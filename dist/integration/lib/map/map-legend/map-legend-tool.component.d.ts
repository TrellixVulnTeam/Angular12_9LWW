import { OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { Observable, BehaviorSubject, ReplaySubject } from 'rxjs';
import { Layer, IgoMap, LayerListControlsOptions, SearchSourceService } from '@igo2/geo';
import { ToolState } from './../../tool/tool.state';
import { MapState } from './../map.state';
import * as i0 from "@angular/core";
export declare class MapLegendToolComponent implements OnInit, OnDestroy {
    private mapState;
    private toolState;
    private searchSourceService;
    private cdRef;
    delayedShowEmptyMapContent: boolean;
    layers$: BehaviorSubject<Layer[]>;
    showAllLegendsValue$: BehaviorSubject<boolean>;
    change$: ReplaySubject<void>;
    private resolution$$;
    private visibleOrInRangeLayers$$;
    updateLegendOnResolutionChange: boolean;
    layerAdditionAllowed: boolean;
    allowShowAllLegends: boolean;
    showAllLegendsValue: boolean;
    layerListControls: LayerListControlsOptions;
    get map(): IgoMap;
    get visibleOrInRangeLayers$(): Observable<Layer[]>;
    get visibleLayers$(): Observable<Layer[]>;
    get excludeBaseLayers(): boolean;
    get searchToolInToolbar(): boolean;
    get catalogToolInToolbar(): boolean;
    get contextToolInToolbar(): boolean;
    constructor(mapState: MapState, toolState: ToolState, searchSourceService: SearchSourceService, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    onShowAllLegends(event: any): void;
    showAllLegend(): boolean;
    ngOnDestroy(): void;
    searchEmit(): void;
    catalogEmit(): void;
    contextEmit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapLegendToolComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapLegendToolComponent, "igo-map-legend-tool", never, { "updateLegendOnResolutionChange": "updateLegendOnResolutionChange"; "layerAdditionAllowed": "layerAdditionAllowed"; "allowShowAllLegends": "allowShowAllLegends"; "showAllLegendsValue": "showAllLegendsValue"; "layerListControls": "layerListControls"; }, {}, never, never>;
}
