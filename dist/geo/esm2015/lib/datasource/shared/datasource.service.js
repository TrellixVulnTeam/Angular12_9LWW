import { Injectable, Optional } from '@angular/core';
import { forkJoin, of, Observable, BehaviorSubject } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { OSMDataSource, FeatureDataSource, XYZDataSource, TileDebugDataSource, WFSDataSource, WMTSDataSource, WMSDataSource, CartoDataSource, ArcGISRestDataSource, ImageArcGISRestDataSource, TileArcGISRestDataSource, WebSocketDataSource, MVTDataSource, ClusterDataSource } from './datasources';
import { ObjectUtils } from '@igo2/utils';
import * as i0 from "@angular/core";
import * as i1 from "./capabilities.service";
import * as i2 from "./options/options.service";
import * as i3 from "./datasources/wfs.service";
import * as i4 from "@igo2/core";
import * as i5 from "../../map/shared/projection.service";
import * as i6 from "@igo2/auth";
export class DataSourceService {
    constructor(capabilitiesService, optionsService, wfsDataSourceService, languageService, messageService, projectionService, authInterceptor) {
        this.capabilitiesService = capabilitiesService;
        this.optionsService = optionsService;
        this.wfsDataSourceService = wfsDataSourceService;
        this.languageService = languageService;
        this.messageService = messageService;
        this.projectionService = projectionService;
        this.authInterceptor = authInterceptor;
        this.datasources$ = new BehaviorSubject([]);
    }
    createAsyncDataSource(context, detailedContextUri) {
        if (!context.type) {
            console.error(context);
            throw new Error('Datasource needs a type');
        }
        let dataSource;
        switch (context.type.toLowerCase()) {
            case 'osm':
                dataSource = this.createOSMDataSource(context);
                break;
            case 'vector':
                dataSource = this.createFeatureDataSource(context);
                break;
            case 'wfs':
                dataSource = this.createWFSDataSource(context);
                break;
            case 'wms':
                const wmsContext = context;
                ObjectUtils.removeDuplicateCaseInsensitive(wmsContext.params);
                dataSource = this.createWMSDataSource(wmsContext, detailedContextUri);
                break;
            case 'wmts':
                dataSource = this.createWMTSDataSource(context);
                break;
            case 'xyz':
                dataSource = this.createXYZDataSource(context);
                break;
            case 'tiledebug':
                dataSource = this.createTileDebugDataSource(context);
                break;
            case 'carto':
                dataSource = this.createCartoDataSource(context);
                break;
            case 'arcgisrest':
                dataSource = this.createArcGISRestDataSource(context, detailedContextUri);
                break;
            case 'imagearcgisrest':
                dataSource = this.createArcGISRestImageDataSource(context, detailedContextUri);
                break;
            case 'websocket':
                dataSource = this.createWebSocketDataSource(context);
                break;
            case 'mvt':
                dataSource = this.createMVTDataSource(context);
                break;
            case 'tilearcgisrest':
                dataSource = this.createTileArcGISRestDataSource(context, detailedContextUri);
                break;
            case 'cluster':
                dataSource = this.createClusterDataSource(context);
                break;
            default:
                console.error(context);
                throw new Error('Invalid datasource type');
        }
        this.datasources$.next(this.datasources$.value.concat([dataSource]));
        return dataSource;
    }
    createOSMDataSource(context) {
        return new Observable(d => d.next(new OSMDataSource(context)));
    }
    createFeatureDataSource(context) {
        return new Observable(d => d.next(new FeatureDataSource(context)));
    }
    createWebSocketDataSource(context) {
        return new Observable(d => d.next(new WebSocketDataSource(context)));
    }
    createWFSDataSource(context) {
        return new Observable(d => d.next(new WFSDataSource(context, this.wfsDataSourceService, this.authInterceptor)));
    }
    createWMSDataSource(context, detailedContextUri) {
        const observables = [];
        if (context.optionsFromCapabilities) {
            observables.push(this.capabilitiesService.getWMSOptions(context).pipe(catchError(e => {
                const title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                const message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
                this.messageService.error(message, title);
                throw e;
            })));
        }
        if (this.optionsService && context.optionsFromApi === true) {
            observables.push(this.optionsService.getWMSOptions(context, detailedContextUri).pipe(catchError(e => {
                e.error.toDisplay = true;
                e.error.title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                e.error.message = this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                return of({});
            })));
        }
        observables.push(of(context));
        return forkJoin(observables).pipe(map((options) => {
            const optionsMerged = options.reduce((a, b) => ObjectUtils.mergeDeep(a, b));
            return new WMSDataSource(optionsMerged, this.wfsDataSourceService);
        }), catchError(() => {
            return of(undefined);
        }));
    }
    createWMTSDataSource(context) {
        if (context.optionsFromCapabilities) {
            return this.capabilitiesService.getWMTSOptions(context).pipe(map((options) => {
                return options ? new WMTSDataSource(options) : undefined;
            }), catchError(() => {
                const title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                const message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.layer });
                this.messageService.error(message, title);
                return of(undefined);
            }));
        }
        return new Observable(d => d.next(new WMTSDataSource(context)));
    }
    createXYZDataSource(context) {
        return new Observable(d => d.next(new XYZDataSource(context)));
    }
    createTileDebugDataSource(context) {
        return new Observable(d => d.next(new TileDebugDataSource(context)));
    }
    createCartoDataSource(context) {
        if (context.mapId) {
            return this.capabilitiesService
                .getCartoOptions(context)
                .pipe(map((options) => new CartoDataSource(options)));
        }
        return new Observable(d => d.next(new CartoDataSource(context)));
    }
    createArcGISRestDataSource(context, detailedContextUri) {
        const observables = [];
        observables.push(this.capabilitiesService.getArcgisOptions(context).pipe(catchError(e => {
            const title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
            const message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.layer });
            this.messageService.error(message, title);
            throw e;
        })));
        if (this.optionsService && context.optionsFromApi === true) {
            observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(catchError(e => {
                e.error.toDisplay = true;
                e.error.title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                e.error.message = this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                return of({});
            })));
        }
        observables.push(of(context));
        return forkJoin(observables).pipe(map((options) => {
            const optionsMerged = options.reduce((a, b) => ObjectUtils.mergeDeep(a, b));
            return new ArcGISRestDataSource(optionsMerged);
        }), catchError(() => {
            return of(undefined);
        }));
    }
    createArcGISRestImageDataSource(context, detailedContextUri) {
        const observables = [];
        observables.push(this.capabilitiesService.getImageArcgisOptions(context).pipe(catchError(e => {
            const title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
            const message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
            this.messageService.error(message, title);
            throw e;
        })));
        if (this.optionsService && context.optionsFromApi === true) {
            observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(catchError(e => {
                e.error.toDisplay = true;
                e.error.title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                e.error.message = this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                return of({});
            })));
        }
        observables.push(of(context));
        return forkJoin(observables).pipe(map((options) => {
            const optionsMerged = options.reduce((a, b) => ObjectUtils.mergeDeep(a, b));
            return new ImageArcGISRestDataSource(optionsMerged);
        }), catchError(() => {
            return of(undefined);
        }));
    }
    createTileArcGISRestDataSource(context, detailedContextUri) {
        const observables = [];
        observables.push(this.capabilitiesService.getImageArcgisOptions(context).pipe(catchError(e => {
            const title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
            const message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
            this.messageService.error(message, title);
            throw e;
        })));
        if (this.optionsService && context.optionsFromApi === true) {
            observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(catchError(e => {
                e.error.toDisplay = true;
                e.error.title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                e.error.message = this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                return of({});
            })));
        }
        observables.push(of(context));
        return forkJoin(observables).pipe(map((options) => {
            const optionsMerged = options.reduce((a, b) => ObjectUtils.mergeDeep(a, b));
            return new TileArcGISRestDataSource(optionsMerged);
        }), catchError(() => {
            return of(undefined);
        }));
    }
    createMVTDataSource(context) {
        return new Observable(d => d.next(new MVTDataSource(context)));
    }
    createClusterDataSource(context) {
        return new Observable(d => d.next(new ClusterDataSource(context)));
    }
}
DataSourceService.ɵfac = function DataSourceService_Factory(t) { return new (t || DataSourceService)(i0.ɵɵinject(i1.CapabilitiesService), i0.ɵɵinject(i2.OptionsService, 8), i0.ɵɵinject(i3.WFSService), i0.ɵɵinject(i4.LanguageService), i0.ɵɵinject(i4.MessageService), i0.ɵɵinject(i5.ProjectionService), i0.ɵɵinject(i6.AuthInterceptor)); };
DataSourceService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DataSourceService, factory: DataSourceService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DataSourceService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.CapabilitiesService }, { type: i2.OptionsService, decorators: [{
                type: Optional
            }] }, { type: i3.WFSService }, { type: i4.LanguageService }, { type: i4.MessageService }, { type: i5.ProjectionService }, { type: i6.AuthInterceptor }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,