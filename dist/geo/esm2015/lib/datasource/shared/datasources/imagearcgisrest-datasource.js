import ImageArcGISRest from 'ol/source/ImageArcGISRest';
import { DataSource } from './datasource';
import { QueryHtmlTarget } from '../../../query/shared/query.enums';
export class ImageArcGISRestDataSource extends DataSource {
    get params() {
        return this.options.params;
    }
    get queryTitle() {
        return this.options.queryTitle
            ? this.options.queryTitle
            : 'title';
    }
    get mapLabel() {
        return this.options.mapLabel;
    }
    get queryHtmlTarget() {
        return this.options.queryHtmlTarget
            ? this.options.queryHtmlTarget
            : QueryHtmlTarget.BLANK;
    }
    createOlSource() {
        const params = this.options.layer === undefined ? this.options.params : Object.assign({ LAYERS: `show:${this.options.layer}` }, this.options.params);
        if (typeof params.renderingRule === 'object') {
            params.renderingRule = JSON.stringify(params.renderingRule);
        }
        return new ImageArcGISRest({
            ratio: 1,
            params,
            url: this.options.url
        });
    }
    getLegend() {
        const legendInfo = this.options.legendInfo;
        const legend = super.getLegend();
        if (legendInfo === undefined || this.options.layer === undefined || legend.length > 0) {
            return legend;
        }
        if (!legendInfo) {
            return;
        }
        let htmlString = '<table>';
        for (const legendElement of legendInfo.legend) {
            const src = `${this.options.url}/${legendInfo.layerId}/images/${legendElement.url}`;
            const label = legendElement.label.replace('<Null>', 'Null');
            htmlString +=
                `<tr><td align='left'><img src="` +
                    src +
                    `" alt ='' /></td><td class="mat-typography">` +
                    label +
                    '</td></tr>';
        }
        htmlString += '</table>';
        return [{ html: htmlString }];
    }
    onUnwatch() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VhcmNnaXNyZXN0LWRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9nZW8vc3JjL2xpYi9kYXRhc291cmNlL3NoYXJlZC9kYXRhc291cmNlcy9pbWFnZWFyY2dpc3Jlc3QtZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGVBQWUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsVUFBVTtJQUl2RCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBYSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFRLElBQUksQ0FBQyxPQUFlLENBQUMsVUFBVTtZQUNyQyxDQUFDLENBQUUsSUFBSSxDQUFDLE9BQWUsQ0FBQyxVQUFVO1lBQ2xDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBUSxJQUFJLENBQUMsT0FBZSxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQVEsSUFBSSxDQUFDLE9BQWUsQ0FBQyxlQUFlO1lBQzFDLENBQUMsQ0FBRSxJQUFJLENBQUMsT0FBZSxDQUFDLGVBQWU7WUFDdkMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVTLGNBQWM7UUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FDbkYsRUFBQyxNQUFNLEVBQUUsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFDLEVBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUNwQixDQUFDO1FBRUYsSUFBSSxPQUFPLE1BQU0sQ0FBQyxhQUFhLEtBQUssUUFBUSxFQUFFO1lBQzVDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDN0Q7UUFFRCxPQUFPLElBQUksZUFBZSxDQUFDO1lBQ3pCLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTTtZQUNOLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUc7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVM7UUFDUCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUMzQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakMsSUFBSSxVQUFVLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU87U0FDUjtRQUNELElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUUzQixLQUFLLE1BQU0sYUFBYSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDN0MsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxXQUFXLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNwRixNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUQsVUFBVTtnQkFDUixpQ0FBaUM7b0JBQ2pDLEdBQUc7b0JBQ0gsOENBQThDO29CQUM5QyxLQUFLO29CQUNMLFlBQVksQ0FBQztTQUNoQjtRQUNELFVBQVUsSUFBSSxVQUFVLENBQUM7UUFDekIsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLFNBQVMsS0FBSSxDQUFDO0NBQ3RCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEltYWdlQXJjR0lTUmVzdCBmcm9tICdvbC9zb3VyY2UvSW1hZ2VBcmNHSVNSZXN0JztcblxuaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJy4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBMZWdlbmQgfSBmcm9tICcuL2RhdGFzb3VyY2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IEFyY0dJU1Jlc3RJbWFnZURhdGFTb3VyY2VPcHRpb25zIH0gZnJvbSAnLi9pbWFnZWFyY2dpc3Jlc3QtZGF0YXNvdXJjZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUXVlcnlIdG1sVGFyZ2V0IH0gZnJvbSAnLi4vLi4vLi4vcXVlcnkvc2hhcmVkL3F1ZXJ5LmVudW1zJztcbmV4cG9ydCBjbGFzcyBJbWFnZUFyY0dJU1Jlc3REYXRhU291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gIHB1YmxpYyBvbDogSW1hZ2VBcmNHSVNSZXN0O1xuICBwdWJsaWMgb3B0aW9uczogQXJjR0lTUmVzdEltYWdlRGF0YVNvdXJjZU9wdGlvbnM7XG5cbiAgZ2V0IHBhcmFtcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucGFyYW1zIGFzIGFueTtcbiAgfVxuXG4gIGdldCBxdWVyeVRpdGxlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLm9wdGlvbnMgYXMgYW55KS5xdWVyeVRpdGxlXG4gICAgICA/ICh0aGlzLm9wdGlvbnMgYXMgYW55KS5xdWVyeVRpdGxlXG4gICAgICA6ICd0aXRsZSc7XG4gIH1cblxuICBnZXQgbWFwTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKHRoaXMub3B0aW9ucyBhcyBhbnkpLm1hcExhYmVsO1xuICB9XG5cbiAgZ2V0IHF1ZXJ5SHRtbFRhcmdldCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAodGhpcy5vcHRpb25zIGFzIGFueSkucXVlcnlIdG1sVGFyZ2V0XG4gICAgICA/ICh0aGlzLm9wdGlvbnMgYXMgYW55KS5xdWVyeUh0bWxUYXJnZXRcbiAgICAgIDogUXVlcnlIdG1sVGFyZ2V0LkJMQU5LO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZU9sU291cmNlKCk6IEltYWdlQXJjR0lTUmVzdCB7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy5vcHRpb25zLmxheWVyID09PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMucGFyYW1zIDogT2JqZWN0LmFzc2lnbihcbiAgICAgIHtMQVlFUlM6IGBzaG93OiR7dGhpcy5vcHRpb25zLmxheWVyfWB9LFxuICAgICAgdGhpcy5vcHRpb25zLnBhcmFtc1xuICAgICk7XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5yZW5kZXJpbmdSdWxlID09PSAnb2JqZWN0Jykge1xuICAgICAgcGFyYW1zLnJlbmRlcmluZ1J1bGUgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucmVuZGVyaW5nUnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBJbWFnZUFyY0dJU1Jlc3Qoe1xuICAgICAgcmF0aW86IDEsXG4gICAgICBwYXJhbXMsXG4gICAgICB1cmw6IHRoaXMub3B0aW9ucy51cmxcbiAgICB9KTtcbiAgfVxuXG4gIGdldExlZ2VuZCgpOiBMZWdlbmRbXSB7XG4gICAgY29uc3QgbGVnZW5kSW5mbyA9IHRoaXMub3B0aW9ucy5sZWdlbmRJbmZvO1xuICAgIGNvbnN0IGxlZ2VuZCA9IHN1cGVyLmdldExlZ2VuZCgpO1xuICAgIGlmIChsZWdlbmRJbmZvID09PSB1bmRlZmluZWQgfHwgdGhpcy5vcHRpb25zLmxheWVyID09PSB1bmRlZmluZWQgfHwgbGVnZW5kLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBsZWdlbmQ7XG4gICAgfVxuXG4gICAgaWYgKCFsZWdlbmRJbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBodG1sU3RyaW5nID0gJzx0YWJsZT4nO1xuXG4gICAgZm9yIChjb25zdCBsZWdlbmRFbGVtZW50IG9mIGxlZ2VuZEluZm8ubGVnZW5kKSB7XG4gICAgICBjb25zdCBzcmMgPSBgJHt0aGlzLm9wdGlvbnMudXJsfS8ke2xlZ2VuZEluZm8ubGF5ZXJJZH0vaW1hZ2VzLyR7bGVnZW5kRWxlbWVudC51cmx9YDtcbiAgICAgIGNvbnN0IGxhYmVsID0gbGVnZW5kRWxlbWVudC5sYWJlbC5yZXBsYWNlKCc8TnVsbD4nLCAnTnVsbCcpO1xuICAgICAgaHRtbFN0cmluZyArPVxuICAgICAgICBgPHRyPjx0ZCBhbGlnbj0nbGVmdCc+PGltZyBzcmM9XCJgICtcbiAgICAgICAgc3JjICtcbiAgICAgICAgYFwiIGFsdCA9JycgLz48L3RkPjx0ZCBjbGFzcz1cIm1hdC10eXBvZ3JhcGh5XCI+YCArXG4gICAgICAgIGxhYmVsICtcbiAgICAgICAgJzwvdGQ+PC90cj4nO1xuICAgIH1cbiAgICBodG1sU3RyaW5nICs9ICc8L3RhYmxlPic7XG4gICAgcmV0dXJuIFt7IGh0bWw6IGh0bWxTdHJpbmcgfV07XG4gIH1cblxuICBwdWJsaWMgb25VbndhdGNoKCkge31cbn1cbiJdfQ==