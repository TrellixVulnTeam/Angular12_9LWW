import olSourceVector from 'ol/source/Vector';
import * as OlLoadingStrategy from 'ol/loadingstrategy';
import olProjection from 'ol/proj/Projection';
import * as olproj from 'ol/proj';
import { DataSource } from './datasource';
import { OgcFilterWriter } from '../../../filter/shared/ogc-filter';
import { defaultFieldNameGeometry, checkWfsParams, getFormatFromOptions, buildUrl } from './wms-wfs.utils';
import { BehaviorSubject } from 'rxjs';
export class WFSDataSource extends DataSource {
    constructor(options, wfsService, authInterceptor) {
        super(checkWfsParams(options, 'wfs'));
        this.options = options;
        this.wfsService = wfsService;
        this.authInterceptor = authInterceptor;
        this.mostRecentIdCallOGCFilter = 0;
        this.ogcFilters$ = new BehaviorSubject(undefined);
        const ogcFilters = this.options.ogcFilters;
        const fieldNameGeometry = this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;
        const ogcFilterWriter = new OgcFilterWriter();
        this.options.ogcFilters =
            ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);
        if (this.options.ogcFilters.enabled &&
            this.options.ogcFilters.editable &&
            (options.sourceFields || []).filter(sf => !sf.values).length > 0) {
            this.wfsService.getSourceFieldsFromWFS(this.options);
        }
        if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.pushButtons) {
            ogcFilters.pushButtons.selectorType = 'pushButton';
        }
        if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.checkboxes) {
            ogcFilters.checkboxes.selectorType = 'checkbox';
        }
        if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.radioButtons) {
            ogcFilters.radioButtons.selectorType = 'radioButton';
        }
        if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.select) {
            ogcFilters.select.selectorType = 'select';
        }
        this.setOgcFilters(this.options.ogcFilters, true);
    }
    set ogcFilters(value) {
        this.options.ogcFilters = value;
    }
    get ogcFilters() {
        return this.options.ogcFilters;
    }
    createOlSource() {
        const vectorSource = new olSourceVector({
            format: getFormatFromOptions(this.options),
            url: (extent, resolution, proj) => {
                const paramsWFS = this.options.paramsWFS;
                const wfsProj = paramsWFS.srsName ? new olProjection({ code: paramsWFS.srsName }) : proj;
                const ogcFilters = this.options.ogcFilters;
                const currentExtent = olproj.transformExtent(extent, proj, wfsProj);
                paramsWFS.srsName = paramsWFS.srsName || proj.getCode();
                return buildUrl(this.options, currentExtent, wfsProj, ogcFilters);
            },
            strategy: OlLoadingStrategy.bbox
        });
        return vectorSource;
    }
    setOgcFilters(ogcFilters, triggerEvent = false) {
        this.ogcFilters = ogcFilters;
        this.mostRecentIdCallOGCFilter += 1;
        if (triggerEvent) {
            this.ogcFilters$.next(this.ogcFilters);
        }
    }
    onUnwatch() { }
}
//# sourceMappingURL=data:application/json;base64,