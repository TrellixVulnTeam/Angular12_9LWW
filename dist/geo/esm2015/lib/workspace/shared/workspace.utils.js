import { EntityStoreFilterCustomFuncStrategy } from '@igo2/common';
import { map } from 'rxjs/operators';
import { StorageScope } from '@igo2/core';
export function getRowsInMapExtent(layerId, storageService) {
    return storageService.get(`workspace.rowsInMapExtent.${layerId}`) || true;
}
export function setRowsInMapExtent(value, layerId, storageService) {
    storageService.set(`workspace.rowsInMapExtent.${layerId}`, value, StorageScope.SESSION);
}
export function getSelectedOnly(layerId, storageService) {
    return storageService.get(`workspace.selectedOnly.${layerId}`) || false;
}
export function setSelectedOnly(value, layerId, storageService) {
    storageService.set(`workspace.selectedOnly.${layerId}`, value, StorageScope.SESSION);
}
export function mapExtentStrategyActiveToolTip(ws) {
    return ws.entityStore.getStrategyOfType(EntityStoreFilterCustomFuncStrategy).active$.pipe(map((active) => active ? 'igo.geo.workspace.inMapExtent.active.tooltip' : 'igo.geo.workspace.inMapExtent.inactive.tooltip'));
}
export function noElementSelected(ws) {
    return ws.entityStore.stateView.manyBy$((record) => {
        return record.state.selected === true;
    }).pipe(map((entities) => entities.length >= 1));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlLnV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvZ2VvL3NyYy9saWIvd29ya3NwYWNlL3NoYXJlZC93b3Jrc3BhY2UudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLG1DQUFtQyxFQUFnQixNQUFNLGNBQWMsQ0FBQztBQUNqRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUcxQyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsT0FBTyxFQUFFLGNBQWM7SUFDeEQsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLDZCQUE2QixPQUFPLEVBQUUsQ0FBWSxJQUFJLElBQUksQ0FBQztBQUN2RixDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsY0FBYztJQUMvRCxjQUFjLENBQUMsR0FBRyxDQUFDLDZCQUE2QixPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzFGLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQU8sRUFBRSxjQUFjO0lBQ3JELE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsT0FBTyxFQUFFLENBQVksSUFBSSxLQUFLLENBQUM7QUFDckYsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxjQUFjO0lBQzVELGNBQWMsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVELE1BQU0sVUFBVSw4QkFBOEIsQ0FBQyxFQUFzRDtJQUNuRyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN2RixHQUFHLENBQUMsQ0FBQyxNQUFlLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsOENBQThDLENBQUMsQ0FBQyxDQUFDLGdEQUFnRCxDQUFDLENBQ3JJLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQXNEO0lBQ3RGLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBNkIsRUFBRSxFQUFFO1FBQ3hFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsQ0FBQyxRQUFpQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUNqRSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdmc1dvcmtzcGFjZSB9IGZyb20gJy4vd2ZzLXdvcmtzcGFjZSc7XG5pbXBvcnQgeyBGZWF0dXJlV29ya3NwYWNlIH0gZnJvbSAnLi9mZWF0dXJlLXdvcmtzcGFjZSc7XG5pbXBvcnQgeyBFZGl0aW9uV29ya3NwYWNlIH0gZnJvbSAnLi9lZGl0aW9uLXdvcmtzcGFjZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFbnRpdHlTdG9yZUZpbHRlckN1c3RvbUZ1bmNTdHJhdGVneSwgRW50aXR5UmVjb3JkIH0gZnJvbSAnQGlnbzIvY29tbW9uJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICcuLi8uLi9mZWF0dXJlL3NoYXJlZC9mZWF0dXJlLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgU3RvcmFnZVNjb3BlIH0gZnJvbSAnQGlnbzIvY29yZSc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvd3NJbk1hcEV4dGVudChsYXllcklkLCBzdG9yYWdlU2VydmljZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gc3RvcmFnZVNlcnZpY2UuZ2V0KGB3b3Jrc3BhY2Uucm93c0luTWFwRXh0ZW50LiR7bGF5ZXJJZH1gKSBhcyBib29sZWFuIHx8IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSb3dzSW5NYXBFeHRlbnQodmFsdWUsIGxheWVySWQsIHN0b3JhZ2VTZXJ2aWNlKSB7XG4gIHN0b3JhZ2VTZXJ2aWNlLnNldChgd29ya3NwYWNlLnJvd3NJbk1hcEV4dGVudC4ke2xheWVySWR9YCwgdmFsdWUsIFN0b3JhZ2VTY29wZS5TRVNTSU9OKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGVkT25seShsYXllcklkLCBzdG9yYWdlU2VydmljZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gc3RvcmFnZVNlcnZpY2UuZ2V0KGB3b3Jrc3BhY2Uuc2VsZWN0ZWRPbmx5LiR7bGF5ZXJJZH1gKSBhcyBib29sZWFuIHx8IGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2VsZWN0ZWRPbmx5KHZhbHVlLCBsYXllcklkLCBzdG9yYWdlU2VydmljZSkge1xuICBzdG9yYWdlU2VydmljZS5zZXQoYHdvcmtzcGFjZS5zZWxlY3RlZE9ubHkuJHtsYXllcklkfWAsIHZhbHVlLCBTdG9yYWdlU2NvcGUuU0VTU0lPTik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBFeHRlbnRTdHJhdGVneUFjdGl2ZVRvb2xUaXAod3M6IFdmc1dvcmtzcGFjZSB8IEZlYXR1cmVXb3Jrc3BhY2UgfCBFZGl0aW9uV29ya3NwYWNlKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgcmV0dXJuIHdzLmVudGl0eVN0b3JlLmdldFN0cmF0ZWd5T2ZUeXBlKEVudGl0eVN0b3JlRmlsdGVyQ3VzdG9tRnVuY1N0cmF0ZWd5KS5hY3RpdmUkLnBpcGUoXG4gICAgbWFwKChhY3RpdmU6IGJvb2xlYW4pID0+IGFjdGl2ZSA/ICdpZ28uZ2VvLndvcmtzcGFjZS5pbk1hcEV4dGVudC5hY3RpdmUudG9vbHRpcCcgOiAnaWdvLmdlby53b3Jrc3BhY2UuaW5NYXBFeHRlbnQuaW5hY3RpdmUudG9vbHRpcCcpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub0VsZW1lbnRTZWxlY3RlZCh3czogV2ZzV29ya3NwYWNlIHwgRmVhdHVyZVdvcmtzcGFjZSB8IEVkaXRpb25Xb3Jrc3BhY2UpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIHdzLmVudGl0eVN0b3JlLnN0YXRlVmlldy5tYW55QnkkKChyZWNvcmQ6IEVudGl0eVJlY29yZDxGZWF0dXJlPikgPT4ge1xuICAgIHJldHVybiByZWNvcmQuc3RhdGUuc2VsZWN0ZWQgPT09IHRydWU7XG4gIH0pLnBpcGUoXG4gICAgbWFwKChlbnRpdGllczogRW50aXR5UmVjb3JkPEZlYXR1cmU+W10pID0+IGVudGl0aWVzLmxlbmd0aCA+PSAxKVxuICApO1xufVxuXG4iXX0=