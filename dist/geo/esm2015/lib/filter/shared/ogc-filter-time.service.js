import { Injectable } from '@angular/core';
import * as moment_ from 'moment';
import * as i0 from "@angular/core";
const moment = moment_;
export class OGCFilterTimeService {
    constructor() {
        this.defaultStepMillisecond = 60000;
    }
    step(datasource, currentFilter) {
        return datasource.options.stepDate
            ? datasource.options.stepDate
            : currentFilter.step;
    }
    stepMillisecond(dataSource, currentFilter) {
        const step = moment.duration(this.step(dataSource, currentFilter)).asMilliseconds();
        return step === 0 ? this.defaultStepMillisecond : step;
    }
    stepIsYearDuration(step) {
        const year = moment.duration(step);
        return (year.years() !== 0 &&
            year.months() === 0 &&
            year.weeks() === 0 &&
            year.days() === 0 &&
            year.hours() === 0 &&
            year.minutes() === 0);
    }
    stepIsMonthDuration(step) {
        const month = moment.duration(step);
        return (month.months() !== 0 &&
            month.weeks() === 0 &&
            month.days() === 0 &&
            month.hours() === 0 &&
            month.minutes() === 0);
    }
    stepIsWeekDuration(step) {
        const week = moment.duration(step);
        return (week.weeks() !== 0 &&
            week.days() === 7 &&
            week.hours() === 0 &&
            week.minutes() === 0);
    }
    stepIsDayDuration(step) {
        const day = moment.duration(step);
        return day.days() !== 0 && day.hours() === 0 && day.minutes() === 0;
    }
    stepIsHourDuration(step) {
        const hour = moment.duration(step);
        return hour.hours() !== 0 && hour.minutes() === 0;
    }
    stepIsMinuteDuration(step) {
        const minute = moment.duration(step);
        return minute.minutes() !== 0;
    }
    dateToNumber(date) {
        let newDate = new Date();
        if (date) {
            newDate = new Date(date);
        }
        return newDate.getTime();
    }
    addStep(value, stepMillisecond) {
        return moment(value).add(stepMillisecond, 'milliseconds').toDate();
    }
    subtractStep(value, stepMillisecond) {
        return moment(value).subtract(stepMillisecond, 'milliseconds').toDate();
    }
}
OGCFilterTimeService.ɵfac = function OGCFilterTimeService_Factory(t) { return new (t || OGCFilterTimeService)(); };
OGCFilterTimeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OGCFilterTimeService, factory: OGCFilterTimeService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OGCFilterTimeService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2djLWZpbHRlci10aW1lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9nZW8vc3JjL2xpYi9maWx0ZXIvc2hhcmVkL29nYy1maWx0ZXItdGltZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxRQUFRLENBQUM7O0FBQ2xDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQU92QixNQUFNLE9BQU8sb0JBQW9CO0lBSTdCO1FBRlMsMkJBQXNCLEdBQUcsS0FBSyxDQUFDO0lBRXpCLENBQUM7SUFFaEIsSUFBSSxDQUFDLFVBQW1DLEVBQUUsYUFBYTtRQUN2RCxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNoQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1lBQzdCLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxlQUFlLENBQUMsVUFBbUMsRUFBRSxhQUFhO1FBQzlELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNwRixPQUFPLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNELENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFZO1FBQzNCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsT0FBTyxDQUNILElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQ3ZCLENBQUM7SUFDTixDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBWTtRQUM1QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sQ0FDSCxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztZQUNwQixLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUNuQixLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztZQUNsQixLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUNuQixLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUN4QixDQUFDO0lBQ04sQ0FBQztJQUVELGtCQUFrQixDQUFDLElBQVk7UUFDM0IsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxPQUFPLENBQ0gsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7WUFDakIsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FDdkIsQ0FBQztJQUNOLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxJQUFZO1FBQzFCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsa0JBQWtCLENBQUMsSUFBWTtRQUMzQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxJQUFZO1FBQzdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBVTtRQUNuQixJQUFJLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3pCLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBZTtRQUNqQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxZQUFZLENBQUMsS0FBSyxFQUFFLGVBQWU7UUFDdEMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1RSxDQUFDOzt3RkEvRVEsb0JBQW9COzBFQUFwQixvQkFBb0IsV0FBcEIsb0JBQW9CO3VGQUFwQixvQkFBb0I7Y0FEaEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50JztcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbmltcG9ydCB7XG4gICAgT2djRmlsdGVyYWJsZURhdGFTb3VyY2VcbiAgfSBmcm9tICcuL29nYy1maWx0ZXIuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9HQ0ZpbHRlclRpbWVTZXJ2aWNlIHtcblxuICAgIHJlYWRvbmx5IGRlZmF1bHRTdGVwTWlsbGlzZWNvbmQgPSA2MDAwMDtcblxuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHN0ZXAoZGF0YXNvdXJjZTogT2djRmlsdGVyYWJsZURhdGFTb3VyY2UsIGN1cnJlbnRGaWx0ZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRhc291cmNlLm9wdGlvbnMuc3RlcERhdGVcbiAgICAgID8gZGF0YXNvdXJjZS5vcHRpb25zLnN0ZXBEYXRlXG4gICAgICA6IGN1cnJlbnRGaWx0ZXIuc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwTWlsbGlzZWNvbmQoZGF0YVNvdXJjZTogT2djRmlsdGVyYWJsZURhdGFTb3VyY2UsIGN1cnJlbnRGaWx0ZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBzdGVwID0gbW9tZW50LmR1cmF0aW9uKHRoaXMuc3RlcChkYXRhU291cmNlLCBjdXJyZW50RmlsdGVyKSkuYXNNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgcmV0dXJuIHN0ZXAgPT09IDAgPyB0aGlzLmRlZmF1bHRTdGVwTWlsbGlzZWNvbmQgOiBzdGVwO1xuICAgIH1cblxuICAgIHN0ZXBJc1llYXJEdXJhdGlvbihzdGVwOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgeWVhciA9IG1vbWVudC5kdXJhdGlvbihzdGVwKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHllYXIueWVhcnMoKSAhPT0gMCAmJlxuICAgICAgICAgICAgeWVhci5tb250aHMoKSA9PT0gMCAmJlxuICAgICAgICAgICAgeWVhci53ZWVrcygpID09PSAwICYmXG4gICAgICAgICAgICB5ZWFyLmRheXMoKSA9PT0gMCAmJlxuICAgICAgICAgICAgeWVhci5ob3VycygpID09PSAwICYmXG4gICAgICAgICAgICB5ZWFyLm1pbnV0ZXMoKSA9PT0gMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0ZXBJc01vbnRoRHVyYXRpb24oc3RlcDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1vbnRoID0gbW9tZW50LmR1cmF0aW9uKHN0ZXApO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbW9udGgubW9udGhzKCkgIT09IDAgJiZcbiAgICAgICAgICAgIG1vbnRoLndlZWtzKCkgPT09IDAgJiZcbiAgICAgICAgICAgIG1vbnRoLmRheXMoKSA9PT0gMCAmJlxuICAgICAgICAgICAgbW9udGguaG91cnMoKSA9PT0gMCAmJlxuICAgICAgICAgICAgbW9udGgubWludXRlcygpID09PSAwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RlcElzV2Vla0R1cmF0aW9uKHN0ZXA6IHN0cmluZykge1xuICAgICAgICBjb25zdCB3ZWVrID0gbW9tZW50LmR1cmF0aW9uKHN0ZXApO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgd2Vlay53ZWVrcygpICE9PSAwICYmXG4gICAgICAgICAgICB3ZWVrLmRheXMoKSA9PT0gNyAmJlxuICAgICAgICAgICAgd2Vlay5ob3VycygpID09PSAwICYmXG4gICAgICAgICAgICB3ZWVrLm1pbnV0ZXMoKSA9PT0gMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0ZXBJc0RheUR1cmF0aW9uKHN0ZXA6IHN0cmluZykge1xuICAgICAgICBjb25zdCBkYXkgPSBtb21lbnQuZHVyYXRpb24oc3RlcCk7XG4gICAgICAgIHJldHVybiBkYXkuZGF5cygpICE9PSAwICYmIGRheS5ob3VycygpID09PSAwICYmIGRheS5taW51dGVzKCkgPT09IDA7XG4gICAgfVxuXG4gICAgc3RlcElzSG91ckR1cmF0aW9uKHN0ZXA6IHN0cmluZykge1xuICAgICAgICBjb25zdCBob3VyID0gbW9tZW50LmR1cmF0aW9uKHN0ZXApO1xuICAgICAgICByZXR1cm4gaG91ci5ob3VycygpICE9PSAwICYmIGhvdXIubWludXRlcygpID09PSAwO1xuICAgIH1cblxuICAgIHN0ZXBJc01pbnV0ZUR1cmF0aW9uKHN0ZXA6IHN0cmluZykge1xuICAgICAgICBjb25zdCBtaW51dGUgPSBtb21lbnQuZHVyYXRpb24oc3RlcCk7XG4gICAgICAgIHJldHVybiBtaW51dGUubWludXRlcygpICE9PSAwO1xuICAgIH1cblxuICAgIGRhdGVUb051bWJlcihkYXRlOiBEYXRlKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IG5ld0RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgIG5ld0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0ZS5nZXRUaW1lKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFN0ZXAodmFsdWUsIHN0ZXBNaWxsaXNlY29uZCkge1xuICAgICAgICByZXR1cm4gbW9tZW50KHZhbHVlKS5hZGQoc3RlcE1pbGxpc2Vjb25kLCAnbWlsbGlzZWNvbmRzJykudG9EYXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN1YnRyYWN0U3RlcCh2YWx1ZSwgc3RlcE1pbGxpc2Vjb25kKSB7XG4gICAgICAgIHJldHVybiBtb21lbnQodmFsdWUpLnN1YnRyYWN0KHN0ZXBNaWxsaXNlY29uZCwgJ21pbGxpc2Vjb25kcycpLnRvRGF0ZSgpO1xuICAgIH1cbn1cbiJdfQ==