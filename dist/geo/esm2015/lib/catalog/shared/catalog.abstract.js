import { TypeCatalog } from './catalog.enum';
export class Catalog {
    constructor(options, service) {
        Object.assign(this, options);
        this.catalogService = service;
    }
}
class WMSCatalog extends Catalog {
    constructor(options, service) {
        super(options, service);
        const sType = TypeCatalog[TypeCatalog.wms];
        this.type = TypeCatalog[sType];
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogWMSLayerItems(this);
    }
}
class WMTSCatalog extends Catalog {
    constructor(options, service) {
        super(options, service);
        const sType = TypeCatalog[TypeCatalog.wmts];
        this.type = TypeCatalog[sType];
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogWMTSLayerItems(this);
    }
}
class BaselayersCatalog extends Catalog {
    constructor(options, service) {
        super(options, service);
        const sType = TypeCatalog[TypeCatalog.baselayers];
        this.type = TypeCatalog[sType];
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogBaseLayerItems(this);
    }
}
class ArcGISRestCatalog extends Catalog {
    constructor(options, service) {
        super(options, service);
        const sType = TypeCatalog[TypeCatalog.arcgisrest];
        this.type = TypeCatalog[sType];
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogArcGISRestItems(this);
    }
}
class TileOrImageArcGISRestCatalog extends Catalog {
    constructor(options, service, typeCatalog) {
        super(options, service);
        this.type = TypeCatalog[TypeCatalog[typeCatalog]];
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogArcGISRestItems(this);
    }
}
export class CompositeCatalog extends Catalog {
    constructor(options, service) {
        super(options, service);
        const sType = TypeCatalog[TypeCatalog.composite];
        this.type = TypeCatalog[sType];
        this.url = null;
    }
    collectCatalogItems() {
        return this.catalogService.loadCatalogCompositeLayerItems(this);
    }
}
export class CatalogFactory {
    static createInstanceCatalog(options, service) {
        let catalog;
        if (options.hasOwnProperty('composite')) {
            catalog = new CompositeCatalog(options, service);
        }
        else if (options.type === TypeCatalog[TypeCatalog.baselayers]) {
            catalog = new BaselayersCatalog(options, service);
        }
        else if (options.type === TypeCatalog[TypeCatalog.arcgisrest]) {
            catalog = new ArcGISRestCatalog(options, service);
        }
        else if (options.type === TypeCatalog[TypeCatalog.tilearcgisrest]) {
            catalog = new TileOrImageArcGISRestCatalog(options, service, TypeCatalog.tilearcgisrest);
        }
        else if (options.type === TypeCatalog[TypeCatalog.imagearcgisrest]) {
            catalog = new TileOrImageArcGISRestCatalog(options, service, TypeCatalog.imagearcgisrest);
        }
        else if (options.type === TypeCatalog[TypeCatalog.wmts]) {
            catalog = new WMTSCatalog(options, service);
        }
        else {
            catalog = new WMSCatalog(options, service);
        }
        return catalog;
    }
}
//# sourceMappingURL=data:application/json;base64,