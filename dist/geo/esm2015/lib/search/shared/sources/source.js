import { ObjectUtils } from '@igo2/utils';
/**
 * Base search source class
 */
export class SearchSource {
    constructor(options, storageService) {
        this.storageService = storageService;
        this.options = options;
        if (this.storageService) {
            const storageOptions = this.storageService.get(this.getId() + '.options');
            if (storageOptions) {
                this.options = ObjectUtils.mergeDeep(this.options, storageOptions);
            }
        }
        this.options = ObjectUtils.mergeDeep(this.getDefaultOptions(), this.options);
        // Set Default Params from Settings
        this.settings.forEach(setting => {
            this.setParamFromSetting(setting, false);
        });
    }
    /**
     * Get search source's id
     * @returns Search source's id
     */
    getId() {
        throw new Error('You have to implement the method "getId".');
    }
    /**
     * Get search source's type
     * @returns Search source's type
     */
    getType() {
        throw new Error('You have to implement the method "getType".');
    }
    /**
     * Get search source's default options
     * @returns Search source default options
     */
    getDefaultOptions() {
        throw new Error('You have to implement the method "getDefaultOptions".');
    }
    /**
     * Search source's title
     */
    get title() {
        return this.options.title;
    }
    /**
     * Whether the search source is available
     */
    get available() {
        return this.options.available !== false;
    }
    /**
     * Whether the search source is enabled
     */
    set enabled(value) {
        this.options.enabled = value;
    }
    get enabled() {
        return this.available && this.options.enabled !== false;
    }
    get showInPointerSummary() {
        const showInPointerSummary = this.options.showInPointerSummary;
        return showInPointerSummary ? showInPointerSummary : false;
    }
    get showInSettings() {
        const showInSettings = this.options.showInSettings;
        return showInSettings === undefined ? true : showInSettings;
    }
    /**
     * Search url
     */
    get searchUrl() {
        return this.options.searchUrl;
    }
    /**
     * Search query params
     */
    get params() {
        return this.options.params === undefined ? {} : this.options.params;
    }
    /**
     * Search settings
     */
    get settings() {
        return this.options.settings === undefined ? [] : this.options.settings;
    }
    /**
     * Set params from selected settings
     */
    setParamFromSetting(setting, saveInStorage = true) {
        switch (setting.type) {
            case 'radiobutton':
                setting.values.forEach(conf => {
                    if (conf.enabled) {
                        this.options.params = Object.assign(this.options.params || {}, {
                            [setting.name]: conf.value
                        });
                    }
                });
                break;
            case 'checkbox':
                let confValue = '';
                setting.values
                    .filter(s => s.available !== false)
                    .forEach(conf => {
                    if (conf.enabled) {
                        confValue += conf.value + ',';
                    }
                });
                confValue = confValue.slice(0, -1);
                this.options.params = Object.assign(this.options.params || {}, {
                    [setting.name]: confValue
                });
                break;
        }
        if (saveInStorage && this.storageService) {
            this.storageService.set(this.getId() + '.options', { params: this.options.params });
        }
    }
    /**
     * Search results display order
     */
    get displayOrder() {
        return this.options.order === undefined ? 99 : this.options.order;
    }
    /**
     * Get hashtags valid
     * @param hashtag hashtag from query
     */
    getHashtagsValid(term, settingsName) {
        const hashtags = term.match(/(#[A-Za-z]+)/g);
        if (!hashtags) {
            return undefined;
        }
        const searchSourceSetting = this.getSettingsValues(settingsName);
        const hashtagsValid = [];
        hashtags.forEach(hashtag => {
            searchSourceSetting.values.forEach(conf => {
                const hashtagKey = hashtag.substring(1);
                if (typeof conf.value === 'string') {
                    const types = conf.value
                        .toLowerCase()
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, '')
                        .split(',');
                    const index = types.indexOf(hashtagKey
                        .toLowerCase()
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, ''));
                    if (index !== -1) {
                        hashtagsValid.push(types[index]);
                    }
                }
                if (conf.hashtags && conf.hashtags.indexOf(hashtagKey.toLowerCase()) !== -1) {
                    hashtagsValid.push(conf.value);
                }
            });
        });
        return hashtagsValid.filter((a, b) => hashtagsValid.indexOf(a) === b);
    }
    getSettingsValues(search) {
        return this.getDefaultOptions().settings.find((value) => {
            return value.name === search;
        });
    }
}
/**
 * Search source ID
 * @internal
 */
SearchSource.id = '';
/**
 * Search source type
 * @internal
 */
SearchSource.type = '';
//# sourceMappingURL=data:application/json;base64,