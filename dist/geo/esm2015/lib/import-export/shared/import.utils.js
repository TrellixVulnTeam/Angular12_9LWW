import * as olStyle from 'ol/style';
import { FeatureDataSource } from '../../datasource/shared/datasources/feature-datasource';
import { featureToOl, moveToOlFeatures } from '../../feature/shared/feature.utils';
import { VectorLayer } from '../../layer/shared/layers/vector-layer';
import { ClusterDataSource } from '../../datasource/shared/datasources/cluster-datasource';
export function addLayerAndFeaturesToMap(features, map, layerTitle) {
    const olFeatures = features.map((feature) => featureToOl(feature, map.projection));
    const r = Math.floor(Math.random() * 255);
    const g = Math.floor(Math.random() * 255);
    const b = Math.floor(Math.random() * 255);
    const stroke = new olStyle.Stroke({
        color: [r, g, b, 1],
        width: 2
    });
    const fill = new olStyle.Fill({
        color: [r, g, b, 0.4]
    });
    const sourceOptions = {
        type: 'vector',
        queryable: true
    };
    const source = new FeatureDataSource(sourceOptions);
    source.ol.addFeatures(olFeatures);
    const layer = new VectorLayer({
        title: layerTitle,
        source,
        style: new olStyle.Style({
            stroke,
            fill,
            image: new olStyle.Circle({
                radius: 5,
                stroke,
                fill
            })
        })
    });
    map.addLayer(layer);
    moveToOlFeatures(map, olFeatures);
    return layer;
}
export function addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService) {
    const olFeatures = features.map((feature) => featureToOl(feature, map.projection));
    let style;
    let distance;
    if (styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute')) {
        const styleByAttribute = styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute');
        style = feature => {
            return styleService.createStyleByAttribute(feature, styleByAttribute);
        };
    }
    else if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {
        const clusterParam = styleListService.getStyleList(layerTitle.toString() + '.clusterParam');
        distance = styleListService.getStyleList(layerTitle.toString() + '.distance');
        const baseStyle = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.clusterStyle'));
        style = feature => {
            return styleService.createClusterStyle(feature, clusterParam, baseStyle);
        };
    }
    else if (styleListService.getStyleList(layerTitle.toString() + '.style')) {
        style = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.style'));
    }
    else if (styleListService.getStyleList('default.clusterStyle') &&
        features[0].geometry.type === 'Point') {
        const clusterParam = styleListService.getStyleList('default.clusterParam');
        distance = styleListService.getStyleList('default.distance');
        const baseStyle = styleService.createStyle(styleListService.getStyleList('default.clusterStyle'));
        style = feature => {
            return styleService.createClusterStyle(feature, clusterParam, baseStyle);
        };
    }
    else {
        style = styleService.createStyle(styleListService.getStyleList('default.style'));
    }
    let source;
    if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {
        const sourceOptions = {
            distance,
            type: 'cluster',
            queryable: true
        };
        source = new ClusterDataSource(sourceOptions);
        source.ol.source.addFeatures(olFeatures);
    }
    else if (styleListService.getStyleList(layerTitle.toString())) {
        const sourceOptions = {
            type: 'vector',
            queryable: true
        };
        source = new FeatureDataSource(sourceOptions);
        source.ol.addFeatures(olFeatures);
    }
    else if (styleListService.getStyleList('default.clusterStyle') &&
        features[0].geometry.type === 'Point') {
        const sourceOptions = {
            distance,
            type: 'cluster',
            queryable: true
        };
        source = new ClusterDataSource(sourceOptions);
        source.ol.source.addFeatures(olFeatures);
    }
    else {
        const sourceOptions = {
            type: 'vector',
            queryable: true
        };
        source = new FeatureDataSource(sourceOptions);
        source.ol.addFeatures(olFeatures);
    }
    const layer = new VectorLayer({
        title: layerTitle,
        source,
        style
    });
    map.addLayer(layer);
    moveToOlFeatures(map, olFeatures);
    return layer;
}
export function handleFileImportSuccess(file, features, map, messageService, languageService, styleListService, styleService) {
    if (features.length === 0) {
        handleNothingToImportError(file, messageService, languageService);
        return;
    }
    const layerTitle = computeLayerTitleFromFile(file);
    if (!styleListService) {
        addLayerAndFeaturesToMap(features, map, layerTitle);
    }
    else {
        addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService);
    }
    const translate = languageService.translate;
    const messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');
    const message = translate.instant('igo.geo.dropGeoFile.success.text', {
        value: layerTitle
    });
    messageService.success(message, messageTitle);
}
export function handleFileImportError(file, error, messageService, languageService, sizeMb) {
    sizeMb = sizeMb ? sizeMb : 30;
    const errMapping = {
        'Invalid file': handleInvalidFileImportError,
        'File is too large': handleSizeFileImportError,
        'Failed to read file': handleUnreadbleFileImportError,
        'Invalid SRS definition': handleSRSImportError,
        'Error 500 with OGRE': handleOgreServerImportError
    };
    errMapping[error.message](file, error, messageService, languageService, sizeMb);
}
export function handleInvalidFileImportError(file, error, messageService, languageService) {
    const translate = languageService.translate;
    const title = translate.instant('igo.geo.dropGeoFile.invalid.title');
    const message = translate.instant('igo.geo.dropGeoFile.invalid.text', {
        value: file.name,
        mimeType: file.type
    });
    messageService.error(message, title);
}
export function handleUnreadbleFileImportError(file, error, messageService, languageService) {
    const translate = languageService.translate;
    const title = translate.instant('igo.geo.dropGeoFile.unreadable.title');
    const message = translate.instant('igo.geo.dropGeoFile.unreadable.text', {
        value: file.name
    });
    messageService.error(message, title);
}
export function handleSizeFileImportError(file, error, messageService, languageService, sizeMb) {
    const translate = languageService.translate;
    const title = translate.instant('igo.geo.dropGeoFile.tooLarge.title');
    const message = translate.instant('igo.geo.dropGeoFile.tooLarge.text', {
        value: file.name,
        size: sizeMb
    });
    messageService.error(message, title);
}
export function handleNothingToImportError(file, messageService, languageService) {
    const translate = languageService.translate;
    const title = translate.instant('igo.geo.dropGeoFile.empty.title');
    const message = translate.instant('igo.geo.dropGeoFile.empty.text', {
        value: file.name,
        mimeType: file.type
    });
    messageService.error(message, title);
}
export function handleSRSImportError(file, messageService, languageService) {
    const translate = languageService.translate;
    const title = translate.instant('igo.geo.dropGeoFile.invalidSRS.title');
    const message = translate.instant('igo.geo.dropGeoFile.invalidSRS.text', {
        value: file.name,
        mimeType: file.type
    });
    messageService.error(message, title);
}
export function handleOgreServerImportError(file, error, messageService, languageService) {
    const title = languageService.translate.instant('igo.geo.dropGeoFile.ogreServer.title');
    const message = languageService.translate.instant('igo.geo.dropGeoFile.ogreServer.text');
    messageService.error(message, title);
}
export function getFileExtension(file) {
    return file.name
        .split('.')
        .pop()
        .toLowerCase();
}
export function computeLayerTitleFromFile(file) {
    return file.name.substr(0, file.name.lastIndexOf('.'));
}
//# sourceMappingURL=data:application/json;base64,