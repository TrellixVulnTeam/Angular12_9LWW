import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { getResolutionFromScale } from '../../../map/shared/map.utils';
import { LayerSyncWatcher } from '../../utils/layerSync-watcher';
export class Layer {
    constructor(options, messageService, authInterceptor) {
        this.options = options;
        this.messageService = messageService;
        this.authInterceptor = authInterceptor;
        this.legendCollapsed = true;
        this.firstLoadComponent = true;
        this.olLoadingProblem = false;
        this.hasBeenVisible$ = new BehaviorSubject(undefined);
        this.isInResolutionsRange$ = new BehaviorSubject(false);
        this.visible$ = new BehaviorSubject(undefined);
        this.displayed$ = combineLatest([
            this.isInResolutionsRange$,
            this.visible$
        ]).pipe(map((bunch) => bunch[0] && bunch[1]));
        this.dataSource = options.source;
        this.ol = this.createOlLayer();
        if (options.zIndex !== undefined) {
            this.zIndex = options.zIndex;
        }
        if (options.baseLayer && options.visible === undefined) {
            options.visible = false;
        }
        this.maxResolution = options.maxResolution || getResolutionFromScale(Number(options.maxScaleDenom));
        this.minResolution = options.minResolution || getResolutionFromScale(Number(options.minScaleDenom));
        this.visible = options.visible === undefined ? true : options.visible;
        this.opacity = options.opacity === undefined ? 1 : options.opacity;
        if (options.legendOptions &&
            (options.legendOptions.url || options.legendOptions.html)) {
            this.legend = this.dataSource.setLegend(options.legendOptions);
        }
        this.legendCollapsed = options.legendOptions
            ? options.legendOptions.collapsed
                ? options.legendOptions.collapsed
                : true
            : true;
        this.ol.set('_layer', this, true);
    }
    /**
     * Define if a layer is generated by code OR defined by layer/context user layer.
     * Useful for filtering layers list in mapOffline.directive or in the sharemap...
     * return false by default.
     */
    get isIgoInternalLayer() {
        return this.options.isIgoInternalLayer || false;
    }
    get id() {
        return this.options.id || this.dataSource.id;
    }
    get alias() {
        return this.options.alias;
    }
    get title() {
        return this.options.title;
    }
    set title(title) {
        this.options.title = title;
    }
    get zIndex() {
        return this.ol.getZIndex();
    }
    set zIndex(zIndex) {
        this.ol.setZIndex(zIndex);
    }
    get baseLayer() {
        return this.options.baseLayer;
    }
    set baseLayer(baseLayer) {
        this.options.baseLayer = baseLayer;
    }
    get opacity() {
        return this.ol.get('opacity');
    }
    set opacity(opacity) {
        this.ol.setOpacity(opacity);
    }
    set isInResolutionsRange(value) {
        this.isInResolutionsRange$.next(value);
    }
    get isInResolutionsRange() {
        return this.isInResolutionsRange$.value;
    }
    set maxResolution(value) {
        this.ol.setMaxResolution(value || Infinity);
        this.updateInResolutionsRange();
    }
    get maxResolution() {
        return this.ol.getMaxResolution();
    }
    set minResolution(value) {
        this.ol.setMinResolution(value || 0);
        this.updateInResolutionsRange();
    }
    get minResolution() {
        return this.ol.getMinResolution();
    }
    set visible(value) {
        var _a, _b;
        this.ol.setVisible(value);
        this.visible$.next(value);
        if (!this.hasBeenVisible$.value && value) {
            this.hasBeenVisible$.next(value);
        }
        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.messages) && value) {
            (_b = this.options) === null || _b === void 0 ? void 0 : _b.messages.filter(m => { var _a; return (_a = m.options) === null || _a === void 0 ? void 0 : _a.showOnEachLayerVisibility; }).map(message => this.showMessage(message));
        }
    }
    get visible() {
        return this.visible$.value;
    }
    get displayed() {
        return this.visible && this.isInResolutionsRange;
    }
    get showInLayerList() {
        return this.options.showInLayerList !== false;
    }
    setMap(igoMap) {
        this.map = igoMap;
        this.unobserveResolution();
        if (igoMap !== undefined) {
            this.observeResolution();
            this.layerSyncWatcher = new LayerSyncWatcher(this, this.map);
            this.layerSyncWatcher.subscribe(() => { });
            this.hasBeenVisible$$ = this.hasBeenVisible$.subscribe(() => {
                if (this.options.messages && this.visible) {
                    this.options.messages.map(message => {
                        this.showMessage(message);
                    });
                }
            });
        }
        else {
            this.layerSyncWatcher.unsubscribe();
        }
    }
    showMessage(message) {
        if (!this.messageService) {
            return;
        }
        message.title = message.title;
        message.text = message.text;
        this.messageService.message(message);
    }
    observeResolution() {
        this.resolution$$ = this.map.viewController.resolution$.subscribe(() => this.updateInResolutionsRange());
    }
    unobserveResolution() {
        if (this.resolution$$ !== undefined) {
            this.resolution$$.unsubscribe();
            this.resolution$$ = undefined;
        }
    }
    updateInResolutionsRange() {
        if (this.map !== undefined) {
            const resolution = this.map.viewController.getResolution();
            const minResolution = this.minResolution;
            const maxResolution = this.maxResolution === undefined ? Infinity : this.maxResolution;
            this.isInResolutionsRange = resolution >= minResolution && resolution <= maxResolution;
        }
        else {
            this.isInResolutionsRange = false;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,