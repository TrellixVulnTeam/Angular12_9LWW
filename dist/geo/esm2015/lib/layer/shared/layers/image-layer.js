import olLayerImage from 'ol/layer/Image';
import { ImageWatcher } from '../../utils';
import { Layer } from './layer';
export class ImageLayer extends Layer {
    constructor(options, messageService, languageService, authInterceptor) {
        super(options, messageService, authInterceptor);
        this.messageService = messageService;
        this.languageService = languageService;
        this.authInterceptor = authInterceptor;
        this.watcher = new ImageWatcher(this, this.messageService, this.languageService);
        this.status$ = this.watcher.status$;
        this.status$.subscribe(valStatus => {
            if (valStatus === 0) {
                this.olLoadingProblem = true;
            }
        });
    }
    createOlLayer() {
        const olOptions = Object.assign({}, this.options, {
            source: this.options.source.ol
        });
        const image = new olLayerImage(olOptions);
        if (this.authInterceptor) {
            image.getSource().setImageLoadFunction((tile, src) => {
                this.customLoader(tile, src, this.authInterceptor, this.messageService, this.languageService);
            });
        }
        return image;
    }
    setMap(map) {
        if (map === undefined) {
            this.watcher.unsubscribe();
        }
        else {
            this.watcher.subscribe(() => { });
        }
        super.setMap(map);
    }
    customLoader(tile, src, interceptor, messageService, languageService) {
        const xhr = new XMLHttpRequest();
        const alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(src);
        let url = src;
        if (alteredUrlWithKeyAuth) {
            url = alteredUrlWithKeyAuth;
        }
        xhr.open('GET', url);
        const intercepted = interceptor.interceptXhr(xhr, url);
        if (!intercepted) {
            xhr.abort();
            tile.getImage().src = url;
            return;
        }
        xhr.responseType = 'arraybuffer';
        xhr.onload = function () {
            const arrayBufferView = new Uint8Array(this.response);
            const responseString = new TextDecoder().decode(arrayBufferView);
            if (responseString.includes('ServiceExceptionReport')) {
                messageService.error(languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable'), languageService.translate.instant('igo.geo.dataSource.unavailableTitle'));
            }
            const blob = new Blob([arrayBufferView], { type: 'image/png' });
            const urlCreator = window.URL;
            const imageUrl = urlCreator.createObjectURL(blob);
            tile.getImage().src = imageUrl;
        };
        xhr.send();
    }
}
//# sourceMappingURL=data:application/json;base64,