import { Watcher } from '@igo2/utils';
import { LinkedProperties } from '../shared/layers/layer.interface';
import { WMSDataSource } from '../../datasource/shared/datasources/wms-datasource';
import { OgcFilterWriter } from '../../filter/shared/ogc-filter';
import { first } from 'rxjs/operators';
export class LayerSyncWatcher extends Watcher {
    constructor(layer, map) {
        super();
        this.ol = layer.ol;
        this.layer = layer;
        this.dataSource = layer.options.source;
        this.map = map;
        this.ogcFilterWriter = new OgcFilterWriter();
    }
    watch() {
        this.ol.on('propertychange', evt => this.transferCommonProperties(evt));
        if (this.dataSource.ogcFilters$) {
            this.ogcFilters$$ = this.dataSource.ogcFilters$
                .subscribe(ogcFilters => this.transferOgcFiltersProperties(ogcFilters));
        }
        if (this.dataSource.timeFilter$) {
            this.timeFilter$$ = this.dataSource.timeFilter$
                .subscribe(timeFilter => this.transferTimeFilterProperties(timeFilter));
        }
        this.syncChildLayers();
    }
    unwatch() {
        this.ol.un('propertychange', evt => this.transferCommonProperties(evt));
        if (this.ogcFilters$$) {
            this.ogcFilters$$.unsubscribe();
        }
        if (this.timeFilter$$) {
            this.timeFilter$$.unsubscribe();
        }
    }
    syncChildLayers() {
        // Force the sync the child layers with parent on the first load.
        if (!this.map) {
            return;
        }
        this.map.status$
            .pipe(first())
            .subscribe(() => {
            this.map.layers
                .filter(layer => { var _a; return (_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links; })
                .map(layer => {
                layer.options.linkedLayers.links.map(link => {
                    var _a, _b, _c, _d, _e, _f;
                    if (((_a = link.properties) === null || _a === void 0 ? void 0 : _a.indexOf(LinkedProperties.VISIBLE)) !== -1) {
                        layer.ol.set('visible', !(layer.visible), false);
                        layer.ol.set('visible', !(layer.visible), false);
                        layer.visible = layer.visible;
                    }
                    if (((_b = link.properties) === null || _b === void 0 ? void 0 : _b.indexOf(LinkedProperties.OPACITY)) !== -1) {
                        const baseOpacity = layer.ol.get('opacity');
                        layer.ol.set('opacity', 0, false);
                        layer.ol.set('opacity', baseOpacity, false);
                        layer.opacity = layer.opacity;
                    }
                    if (((_c = link.properties) === null || _c === void 0 ? void 0 : _c.indexOf(LinkedProperties.MINRESOLUTION)) !== -1) {
                        const baseMinResolution = layer.ol.get('minResolution');
                        layer.ol.set('minResolution', 0, false);
                        layer.ol.set('minResolution', baseMinResolution, false);
                        layer.minResolution = layer.minResolution;
                    }
                    if (((_d = link.properties) === null || _d === void 0 ? void 0 : _d.indexOf(LinkedProperties.MAXRESOLUTION)) !== -1) {
                        const baseMaxResolution = layer.ol.get('maxResolution');
                        layer.ol.set('maxResolution', 0, false);
                        layer.ol.set('maxResolution', baseMaxResolution, false);
                        layer.minResolution = layer.minResolution;
                    }
                    if (((_e = link.properties) === null || _e === void 0 ? void 0 : _e.indexOf(LinkedProperties.OGCFILTERS)) !== -1) {
                        const ogcFilters$ = layer.dataSource.ogcFilters$;
                        ogcFilters$.next(ogcFilters$.value);
                    }
                    if (((_f = link.properties) === null || _f === void 0 ? void 0 : _f.indexOf(LinkedProperties.TIMEFILTER)) !== -1) {
                        const timeFilter$ = layer.dataSource.timeFilter$;
                        timeFilter$.next(timeFilter$.value);
                    }
                });
            });
        });
    }
    transferCommonProperties(layerChange) {
        const key = layerChange.key;
        const layerChangeProperties = layerChange.target.getProperties();
        const newValue = layerChangeProperties[key];
        if (['visible', 'opacity', 'minResolution', 'maxResolution'].indexOf(key) === -1) {
            return;
        }
        const linkedLayers = layerChangeProperties.linkedLayers;
        if (!linkedLayers) {
            return;
        }
        const currentLinkedId = linkedLayers.linkId;
        const currentLinks = linkedLayers.links;
        const isParentLayer = currentLinks ? true : false;
        if (isParentLayer) {
            // search for child layers
            const silent = true;
            currentLinks.map(link => {
                if (!link.properties || link.properties.indexOf(key) === -1) {
                    return;
                }
                link.linkedIds.map(linkedId => {
                    const layerToApply = this.map.layers.find(layer => { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                    if (layerToApply) {
                        layerToApply.ol.set(key, newValue, silent);
                        if (key === 'visible') {
                            layerToApply.visible$.next(newValue);
                        }
                    }
                });
            });
        }
        else {
            // search for parent layer
            const silent = false;
            this.map.layers.map(layer => {
                var _a;
                if ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                    layer.options.linkedLayers.links.map(l => {
                        if (l.properties && l.properties.indexOf(key) !== -1 &&
                            l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                            layer.ol.set(key, newValue, silent);
                            if (key === 'visible') {
                                layer.visible$.next(newValue);
                            }
                        }
                    });
                }
            });
        }
    }
    transferOgcFiltersProperties(ogcFilters) {
        const linkedLayers = this.ol.getProperties().linkedLayers;
        if (!linkedLayers) {
            return;
        }
        const currentLinkedId = linkedLayers.linkId;
        const currentLinks = linkedLayers.links;
        const isParentLayer = currentLinks ? true : false;
        if (isParentLayer) {
            // search for child layers
            currentLinks.map(link => {
                if (!link.properties || link.properties.indexOf(LinkedProperties.OGCFILTERS) === -1) {
                    return;
                }
                link.linkedIds.map(linkedId => {
                    const layerToApply = this.map.layers.find(layer => { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                    if (layerToApply) {
                        const layerType = layerToApply.ol.getProperties().sourceOptions.type;
                        layerToApply.dataSource.setOgcFilters(ogcFilters, false);
                        if (layerType === 'wfs') {
                            layerToApply.ol.getSource().refresh();
                        }
                        if (layerType === 'wms') {
                            let appliedOgcFilter;
                            if (this.ol.getProperties().sourceOptions.type === 'wfs') {
                                appliedOgcFilter = this.ogcFilterWriter.handleOgcFiltersAppliedValue(this.layer.dataSource.options, this.dataSource.options.fieldNameGeometry, undefined, this.map.viewController.getOlProjection());
                            }
                            else if (this.ol.getProperties().sourceOptions.type === 'wms') {
                                appliedOgcFilter = this.dataSource.ol.getParams().FILTER;
                            }
                            layerToApply.dataSource.ol.updateParams({ FILTER: appliedOgcFilter });
                        }
                    }
                });
            });
        }
        else {
            // search for parent layer
            this.map.layers.map(layer => {
                var _a;
                if ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                    layer.options.linkedLayers.links.map(l => {
                        if (l.properties && l.properties.indexOf(LinkedProperties.OGCFILTERS) !== -1 &&
                            l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                            const layerType = layer.ol.getProperties().sourceOptions.type;
                            if (layerType === 'wfs') {
                                layer.dataSource.setOgcFilters(ogcFilters, true);
                                layer.ol.getSource().refresh();
                            }
                            if (layerType === 'wms') {
                                let appliedOgcFilter;
                                if (this.ol.getProperties().sourceOptions.type === 'wfs') {
                                    appliedOgcFilter = this.ogcFilterWriter.handleOgcFiltersAppliedValue(layer.dataSource.options, this.dataSource.options.fieldNameGeometry, undefined, this.map.viewController.getOlProjection());
                                }
                                else if (this.ol.getProperties().sourceOptions.type === 'wms') {
                                    appliedOgcFilter = this.dataSource.ol.getParams().FILTER;
                                }
                                layer.dataSource.ol.updateParams({ FILTER: appliedOgcFilter });
                                layer.dataSource.setOgcFilters(ogcFilters, true);
                            }
                        }
                    });
                }
            });
        }
    }
    transferTimeFilterProperties(timeFilter) {
        const linkedLayers = this.ol.getProperties().linkedLayers;
        if (!linkedLayers) {
            return;
        }
        const currentLinkedId = linkedLayers.linkId;
        const currentLinks = linkedLayers.links;
        const isParentLayer = currentLinks ? true : false;
        if (isParentLayer) {
            // search for child layers
            currentLinks.map(link => {
                if (!link.properties || link.properties.indexOf(LinkedProperties.TIMEFILTER) === -1) {
                    return;
                }
                link.linkedIds.map(linkedId => {
                    const childLayer = this.map.layers.find(layer => {
                        var _a;
                        return layer.dataSource instanceof WMSDataSource &&
                            ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId;
                    });
                    if (childLayer) {
                        childLayer.dataSource.setTimeFilter(timeFilter, false);
                        const appliedTimeFilter = this.ol.getSource().getParams().TIME;
                        childLayer.dataSource.ol.updateParams({ TIME: appliedTimeFilter });
                    }
                });
            });
        }
        else {
            // search for parent layer
            this.map.layers
                .filter(layer => layer.dataSource instanceof WMSDataSource)
                .map(parentLayer => {
                var _a;
                if ((_a = parentLayer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                    parentLayer.options.linkedLayers.links.map(l => {
                        if (l.properties && l.properties.indexOf(LinkedProperties.TIMEFILTER) !== -1 &&
                            l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                            const appliedTimeFilter = this.ol.getSource().getParams().TIME;
                            parentLayer.dataSource.ol.updateParams({ TIME: appliedTimeFilter });
                            parentLayer.dataSource.setTimeFilter(timeFilter, true);
                        }
                    });
                }
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,