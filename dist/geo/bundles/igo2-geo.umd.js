(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/badge'), require('@angular/material/icon'), require('@angular/material/list'), require('@angular/material/tooltip'), require('@igo2/common'), require('@angular/material/button'), require('@igo2/core'), require('@angular/material/dialog'), require('@ngx-translate/core'), require('rxjs'), require('rxjs/operators'), require('@igo2/utils'), require('ol/Map'), require('ol/View'), require('ol/Feature'), require('ol/Geolocation'), require('ol/control/Attribution'), require('ol/control/ScaleLine'), require('ol/proj'), require('ol/proj/proj4'), require('ol/geom/Point'), require('ol/interaction'), require('ol/geom/Circle'), require('ol/style'), require('proj4'), require('ol/extent'), require('ol/geom/GeometryLayout'), require('ol/geom/Polygon'), require('ol/geom/LineString'), require('ol/format/GeoJSON'), require('ol/layer/Vector'), require('ol/Observable'), require('ol/easing'), require('ol/color'), require('ol/render'), require('ol/format/FormatType'), require('ol/proj/Projection'), require('ol/source/ImageWMS'), require('ts-md5'), require('ol/format/filter'), require('ol/format/WKT'), require('ol/format/WFS'), require('moment'), require('ol/format'), require('ol/format/GML2'), require('ol/format/GML3'), require('ol/format/GML32'), require('ol/format/OSMXML'), require('ol/source/Cluster'), require('ol/source/Vector'), require('ol/has'), require('ol/source/OSM'), require('ol/source/XYZ'), require('ol/loadingstrategy'), require('@angular/common/http'), require('ol/source/WMTS'), require('ol/tilegrid/WMTS'), require('ol/extent.js'), require('ol/source/CartoDB'), require('ol/format/EsriJSON'), require('ol/source/ImageArcGISRest'), require('ol/source/TileArcGISRest'), require('ol/source/TileDebug'), require('ol/tilegrid/TileGrid'), require('ol/source/VectorTile'), require('ol/format/MVT'), require('ts-cacheable'), require('ol/source/WMTS.js'), require('@igo2/auth'), require('ol/interaction/DragBox'), require('ol/layer/VectorTile'), require('ol/geom'), require('ol/layer/Image'), require('ol/layer/Tile'), require('ol/render/Feature'), require('@angular/animations'), require('ol-mapbox-style/dist/stylefunction'), require('striptags'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/material/select'), require('@angular/forms'), require('@angular/material/checkbox'), require('@angular/material/divider'), require('@angular/material/input'), require('@angular/material/menu'), require('@angular/material/slide-toggle'), require('@angular/material/slider'), require('@angular/material/autocomplete'), require('@angular/material/button-toggle'), require('ngx-color-picker'), require('@angular/platform-browser'), require('ol/interaction/Draw'), require('ol/interaction/Modify'), require('ol/interaction/Select'), require('ol/events/condition'), require('@turf/line-intersect'), require('@turf/helpers'), require('ol/sphere'), require('ol/Overlay'), require('@turf/point-on-feature'), require('@angular/material/datepicker'), require('@angular/material/radio'), require('@angular/material/table'), require('@angular/material/tabs'), require('@angular/material/tree'), require('@mat-datetimepicker/core'), require('ol/style/Style'), require('ol/interaction/Translate'), require('ol/geom/LinearRing'), require('@angular/cdk/collections'), require('@angular/cdk/tree'), require('file-saver'), require('jspdf'), require('html2canvas'), require('jszip'), require('@angular/cdk/drag-drop'), require('ol/Collection')) :
    typeof define === 'function' && define.amd ? define('@igo2/geo', ['exports', '@angular/core', '@angular/common', '@angular/material/badge', '@angular/material/icon', '@angular/material/list', '@angular/material/tooltip', '@igo2/common', '@angular/material/button', '@igo2/core', '@angular/material/dialog', '@ngx-translate/core', 'rxjs', 'rxjs/operators', '@igo2/utils', 'ol/Map', 'ol/View', 'ol/Feature', 'ol/Geolocation', 'ol/control/Attribution', 'ol/control/ScaleLine', 'ol/proj', 'ol/proj/proj4', 'ol/geom/Point', 'ol/interaction', 'ol/geom/Circle', 'ol/style', 'proj4', 'ol/extent', 'ol/geom/GeometryLayout', 'ol/geom/Polygon', 'ol/geom/LineString', 'ol/format/GeoJSON', 'ol/layer/Vector', 'ol/Observable', 'ol/easing', 'ol/color', 'ol/render', 'ol/format/FormatType', 'ol/proj/Projection', 'ol/source/ImageWMS', 'ts-md5', 'ol/format/filter', 'ol/format/WKT', 'ol/format/WFS', 'moment', 'ol/format', 'ol/format/GML2', 'ol/format/GML3', 'ol/format/GML32', 'ol/format/OSMXML', 'ol/source/Cluster', 'ol/source/Vector', 'ol/has', 'ol/source/OSM', 'ol/source/XYZ', 'ol/loadingstrategy', '@angular/common/http', 'ol/source/WMTS', 'ol/tilegrid/WMTS', 'ol/extent.js', 'ol/source/CartoDB', 'ol/format/EsriJSON', 'ol/source/ImageArcGISRest', 'ol/source/TileArcGISRest', 'ol/source/TileDebug', 'ol/tilegrid/TileGrid', 'ol/source/VectorTile', 'ol/format/MVT', 'ts-cacheable', 'ol/source/WMTS.js', '@igo2/auth', 'ol/interaction/DragBox', 'ol/layer/VectorTile', 'ol/geom', 'ol/layer/Image', 'ol/layer/Tile', 'ol/render/Feature', '@angular/animations', 'ol-mapbox-style/dist/stylefunction', 'striptags', '@angular/material/core', '@angular/material/form-field', '@angular/material/select', '@angular/forms', '@angular/material/checkbox', '@angular/material/divider', '@angular/material/input', '@angular/material/menu', '@angular/material/slide-toggle', '@angular/material/slider', '@angular/material/autocomplete', '@angular/material/button-toggle', 'ngx-color-picker', '@angular/platform-browser', 'ol/interaction/Draw', 'ol/interaction/Modify', 'ol/interaction/Select', 'ol/events/condition', '@turf/line-intersect', '@turf/helpers', 'ol/sphere', 'ol/Overlay', '@turf/point-on-feature', '@angular/material/datepicker', '@angular/material/radio', '@angular/material/table', '@angular/material/tabs', '@angular/material/tree', '@mat-datetimepicker/core', 'ol/style/Style', 'ol/interaction/Translate', 'ol/geom/LinearRing', '@angular/cdk/collections', '@angular/cdk/tree', 'file-saver', 'jspdf', 'html2canvas', 'jszip', '@angular/cdk/drag-drop', 'ol/Collection'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.igo2 = global.igo2 || {}, global.igo2.geo = {}), global.ng.core, global.ng.common, global.ng.material.badge, global.ng.material.icon, global.ng.material.list, global.ng.material.tooltip, global.common, global.ng.material.button, global.core, global.ng.material.dialog, global["ngxt-core"], global.rxjs, global.rxjs.operators, global.utils, global.olMap, global.olView, global.olFeature, global.olGeolocation, global.olAttribution, global.olControlScaleLine, global.olproj, global.olproj4, global.OlPoint, global.olinteraction, global.olCircle, global.olstyle, global.proj4, global.olextent, global.olGeometryLayout, global.OlPolygon, global.OlLineString, global.OlGeoJSON, global.OlVectorLayer, global.olobservable, global.oleasing, global.color, global.olRender, global.FormatType, global.olProjection, global.olSourceImageWMS, global.tsMd5, global.olfilter, global.olWKT, global.olFormatWFS, global.moment, global.olformat, global.olFormatGML2, global.olFormatGML3, global.olFormatGML32, global.olFormatOSMXML, global.olSourceCluster, global.OlVectorSource, global.has, global.olSourceOSM, global.olSourceXYZ, global.OlLoadingStrategy, global.ng.common.http, global.olSourceWMTS, global.olTileGridWMTS, global.extent_js, global.olSourceCarto, global.olFormatEsriJSON, global.olSourceImageArcGISRest, global.olSourceTileArcGISRest, global.TileDebug, global.olTileGrid, global.olSourceVectorTile, global.olFormatMVT, global.tsCacheable, global.WMTS_js, global.auth, global.OlDragBoxInteraction, global.olLayerVectorTile, global.olgeom, global.olLayerImage, global.olLayerTile, global.OlRenderFeature, global.ng.animations, global.stylefunction, global.striptags, global.ng.material.core, global.ng.material.formField, global.ng.material.select, global.ng.forms, global.ng.material.checkbox, global.ng.material.divider, global.ng.material.input, global.ng.material.menu, global.ng.material.slideToggle, global.ng.material.slider, global.ng.material.autocomplete, global.ng.material.buttonToggle, global.ngxColorPicker, global.ng.platformBrowser, global.OlDraw, global.OlModify, global.olInteractionSelect, global.olcondition, global.lineIntersect, global.helpers, global.sphere, global.OlOverlay, global.pointOnFeature, global.ng.material.datepicker, global.ng.material.radio, global.ng.material.table, global.ng.material.tabs, global.ng.material.tree, global.datepickercore, global.OlStyle, global.OlTranslate, global.OlLinearRing, global.ng.cdk.collections, global.ng.cdk.tree, global.fileSaver, global.jsPDF, global._html2canvas, global.JSZip, global.ng.cdk.dragDrop, global.Collection));
})(this, (function (exports, i0, i1$1, i9$1, i4, i1$3, i3, i6, i2, i2$1, i1, i7, rxjs, operators, utils, olMap, olView, OlFeature, olGeolocation, olAttribution, olControlScaleLine, olproj, olproj4, OlPoint, olInteraction, OlCircle, olstyle, proj4, olextent, OlGeometryLayout, OlPolygon, OlLineString, OlGeoJSON, OlVectorLayer, olObservable, oleasing, color, render, FormatType, olProjection, olSourceImageWMS, tsMd5, olfilter, olWKT, olFormatWFS, moment_, olformat, olFormatGML2, olFormatGML3, olFormatGML32, olFormatOSMXML, olSourceCluster, OlVectorSource, has, olSourceOSM, olSourceXYZ, OlLoadingStrategy, i1$2, olSourceWMTS, olTileGridWMTS, extent_js, olSourceCarto, olFormatEsriJSON, ImageArcGISRest, olSourceTileArcGISRest, TileDebug, TileGrid, olSourceVectorTile, olFormatMVT, tsCacheable, WMTS_js, i5, OlDragBoxInteraction, olLayerVectorTile, olgeom, olLayerImage, olLayerTile, RenderFeature, animations, stylefunction, striptags_, i9, i12, i13, i16, i11, i10, i5$1, i5$2, i22, i13$1, i6$1, i18, i12$1, i1$4, OlDraw, OlModify, OlSelect, olCondition, lineIntersect, helpers, sphere, OlOverlay, pointOnFeature, i25, i19, i23, i20, i24, i4$1, OlStyle, OlTranslate, OlLinearRing, collections, tree, fileSaver, jspdf, html2canvas, JSZip, i2$2, Collection) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i9__namespace$1 = /*#__PURE__*/_interopNamespace(i9$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var olMap__default = /*#__PURE__*/_interopDefaultLegacy(olMap);
    var olView__default = /*#__PURE__*/_interopDefaultLegacy(olView);
    var OlFeature__default = /*#__PURE__*/_interopDefaultLegacy(OlFeature);
    var olGeolocation__default = /*#__PURE__*/_interopDefaultLegacy(olGeolocation);
    var olAttribution__default = /*#__PURE__*/_interopDefaultLegacy(olAttribution);
    var olControlScaleLine__default = /*#__PURE__*/_interopDefaultLegacy(olControlScaleLine);
    var olproj__namespace = /*#__PURE__*/_interopNamespace(olproj);
    var olproj4__namespace = /*#__PURE__*/_interopNamespace(olproj4);
    var OlPoint__default = /*#__PURE__*/_interopDefaultLegacy(OlPoint);
    var olInteraction__namespace = /*#__PURE__*/_interopNamespace(olInteraction);
    var OlCircle__default = /*#__PURE__*/_interopDefaultLegacy(OlCircle);
    var olstyle__namespace = /*#__PURE__*/_interopNamespace(olstyle);
    var proj4__default = /*#__PURE__*/_interopDefaultLegacy(proj4);
    var olextent__namespace = /*#__PURE__*/_interopNamespace(olextent);
    var OlGeometryLayout__default = /*#__PURE__*/_interopDefaultLegacy(OlGeometryLayout);
    var OlPolygon__default = /*#__PURE__*/_interopDefaultLegacy(OlPolygon);
    var OlLineString__default = /*#__PURE__*/_interopDefaultLegacy(OlLineString);
    var OlGeoJSON__default = /*#__PURE__*/_interopDefaultLegacy(OlGeoJSON);
    var OlVectorLayer__default = /*#__PURE__*/_interopDefaultLegacy(OlVectorLayer);
    var olObservable__namespace = /*#__PURE__*/_interopNamespace(olObservable);
    var oleasing__namespace = /*#__PURE__*/_interopNamespace(oleasing);
    var FormatType__default = /*#__PURE__*/_interopDefaultLegacy(FormatType);
    var olProjection__default = /*#__PURE__*/_interopDefaultLegacy(olProjection);
    var olSourceImageWMS__default = /*#__PURE__*/_interopDefaultLegacy(olSourceImageWMS);
    var olfilter__namespace = /*#__PURE__*/_interopNamespace(olfilter);
    var olWKT__default = /*#__PURE__*/_interopDefaultLegacy(olWKT);
    var olFormatWFS__default = /*#__PURE__*/_interopDefaultLegacy(olFormatWFS);
    var moment___namespace = /*#__PURE__*/_interopNamespace(moment_);
    var olformat__namespace = /*#__PURE__*/_interopNamespace(olformat);
    var olFormatGML2__default = /*#__PURE__*/_interopDefaultLegacy(olFormatGML2);
    var olFormatGML3__default = /*#__PURE__*/_interopDefaultLegacy(olFormatGML3);
    var olFormatGML32__default = /*#__PURE__*/_interopDefaultLegacy(olFormatGML32);
    var olFormatOSMXML__default = /*#__PURE__*/_interopDefaultLegacy(olFormatOSMXML);
    var olSourceCluster__default = /*#__PURE__*/_interopDefaultLegacy(olSourceCluster);
    var OlVectorSource__default = /*#__PURE__*/_interopDefaultLegacy(OlVectorSource);
    var olSourceOSM__default = /*#__PURE__*/_interopDefaultLegacy(olSourceOSM);
    var olSourceXYZ__default = /*#__PURE__*/_interopDefaultLegacy(olSourceXYZ);
    var OlLoadingStrategy__namespace = /*#__PURE__*/_interopNamespace(OlLoadingStrategy);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var olSourceWMTS__default = /*#__PURE__*/_interopDefaultLegacy(olSourceWMTS);
    var olTileGridWMTS__default = /*#__PURE__*/_interopDefaultLegacy(olTileGridWMTS);
    var olSourceCarto__default = /*#__PURE__*/_interopDefaultLegacy(olSourceCarto);
    var olFormatEsriJSON__default = /*#__PURE__*/_interopDefaultLegacy(olFormatEsriJSON);
    var ImageArcGISRest__default = /*#__PURE__*/_interopDefaultLegacy(ImageArcGISRest);
    var olSourceTileArcGISRest__default = /*#__PURE__*/_interopDefaultLegacy(olSourceTileArcGISRest);
    var TileDebug__default = /*#__PURE__*/_interopDefaultLegacy(TileDebug);
    var TileGrid__default = /*#__PURE__*/_interopDefaultLegacy(TileGrid);
    var olSourceVectorTile__default = /*#__PURE__*/_interopDefaultLegacy(olSourceVectorTile);
    var olFormatMVT__default = /*#__PURE__*/_interopDefaultLegacy(olFormatMVT);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var OlDragBoxInteraction__default = /*#__PURE__*/_interopDefaultLegacy(OlDragBoxInteraction);
    var olLayerVectorTile__default = /*#__PURE__*/_interopDefaultLegacy(olLayerVectorTile);
    var olgeom__namespace = /*#__PURE__*/_interopNamespace(olgeom);
    var olLayerImage__default = /*#__PURE__*/_interopDefaultLegacy(olLayerImage);
    var olLayerTile__default = /*#__PURE__*/_interopDefaultLegacy(olLayerTile);
    var RenderFeature__default = /*#__PURE__*/_interopDefaultLegacy(RenderFeature);
    var stylefunction__default = /*#__PURE__*/_interopDefaultLegacy(stylefunction);
    var striptags___namespace = /*#__PURE__*/_interopNamespace(striptags_);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i16__namespace = /*#__PURE__*/_interopNamespace(i16);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i22__namespace = /*#__PURE__*/_interopNamespace(i22);
    var i13__namespace$1 = /*#__PURE__*/_interopNamespace(i13$1);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i18__namespace = /*#__PURE__*/_interopNamespace(i18);
    var i12__namespace$1 = /*#__PURE__*/_interopNamespace(i12$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var OlDraw__default = /*#__PURE__*/_interopDefaultLegacy(OlDraw);
    var OlModify__default = /*#__PURE__*/_interopDefaultLegacy(OlModify);
    var OlSelect__default = /*#__PURE__*/_interopDefaultLegacy(OlSelect);
    var olCondition__namespace = /*#__PURE__*/_interopNamespace(olCondition);
    var lineIntersect__default = /*#__PURE__*/_interopDefaultLegacy(lineIntersect);
    var OlOverlay__default = /*#__PURE__*/_interopDefaultLegacy(OlOverlay);
    var pointOnFeature__default = /*#__PURE__*/_interopDefaultLegacy(pointOnFeature);
    var i25__namespace = /*#__PURE__*/_interopNamespace(i25);
    var i19__namespace = /*#__PURE__*/_interopNamespace(i19);
    var i23__namespace = /*#__PURE__*/_interopNamespace(i23);
    var i20__namespace = /*#__PURE__*/_interopNamespace(i20);
    var i24__namespace = /*#__PURE__*/_interopNamespace(i24);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var OlStyle__default = /*#__PURE__*/_interopDefaultLegacy(OlStyle);
    var OlTranslate__default = /*#__PURE__*/_interopDefaultLegacy(OlTranslate);
    var OlLinearRing__default = /*#__PURE__*/_interopDefaultLegacy(OlLinearRing);
    var jspdf__default = /*#__PURE__*/_interopDefaultLegacy(jspdf);
    var html2canvas__default = /*#__PURE__*/_interopDefaultLegacy(html2canvas);
    var JSZip__namespace = /*#__PURE__*/_interopNamespace(JSZip);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var Collection__default = /*#__PURE__*/_interopDefaultLegacy(Collection);

    var MetadataService = /** @class */ (function () {
        function MetadataService() {
        }
        MetadataService.prototype.open = function (metadata) {
            if (metadata.extern) {
                window.open(metadata.url, '_blank');
            }
        };
        return MetadataService;
    }());
    MetadataService.ɵfac = function MetadataService_Factory(t) { return new (t || MetadataService)(); };
    MetadataService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: MetadataService, factory: MetadataService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MetadataService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return []; }, null);
    })();

    function MetadataButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function MetadataButtonComponent_button_0_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.openMetadata(ctx_r1.options.metadata); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 2);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.metadata.show"))("color", ctx_r0.color);
        }
    }
    function MetadataAbstractComponent_mat_dialog_content_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-dialog-content", 3);
            i0__namespace.ɵɵelementStart(1, "h3");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.data.abstract);
        }
    }
    function MetadataAbstractComponent_mat_dialog_content_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-dialog-content", 3);
            i0__namespace.ɵɵelement(1, "h3", 4);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("innerHTML", ctx_r1.data.abstract, i0__namespace.ɵɵsanitizeHtml);
        }
    }
    var MetadataButtonComponent = /** @class */ (function () {
        function MetadataButtonComponent(metadataService, dialog) {
            this.metadataService = metadataService;
            this.dialog = dialog;
            this._color = 'primary';
        }
        Object.defineProperty(MetadataButtonComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MetadataButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        MetadataButtonComponent.prototype.openMetadata = function (metadata) {
            if (metadata.extern) {
                this.metadataService.open(metadata);
            }
            else if (!metadata.extern && metadata.abstract) {
                this.dialog.open(MetadataAbstractComponent, {
                    data: {
                        layerTitle: this.layer.title,
                        abstract: metadata.abstract,
                        type: metadata.type
                    }
                });
            }
        };
        Object.defineProperty(MetadataButtonComponent.prototype, "options", {
            get: function () {
                if (!this.layer) {
                    return;
                }
                return this.layer.options;
            },
            enumerable: false,
            configurable: true
        });
        return MetadataButtonComponent;
    }());
    MetadataButtonComponent.ɵfac = function MetadataButtonComponent_Factory(t) { return new (t || MetadataButtonComponent)(i0__namespace.ɵɵdirectiveInject(MetadataService), i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialog)); };
    MetadataButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MetadataButtonComponent, selectors: [["igo-metadata-button"]], inputs: { layer: "layer", color: "color" }, decls: 1, vars: 1, consts: [["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click"], ["svgIcon", "information-outline"]], template: function MetadataButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, MetadataButtonComponent_button_0_Template, 3, 4, "button", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.options && ctx.options.metadata && ctx.options.metadata.url || ctx.options && ctx.options.metadata && ctx.options.metadata.abstract);
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MetadataButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-metadata-button',
                        templateUrl: './metadata-button.component.html',
                        styleUrls: ['./metadata-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: MetadataService }, { type: i1__namespace.MatDialog }]; }, { layer: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();
    var MetadataAbstractComponent = /** @class */ (function () {
        function MetadataAbstractComponent(data) {
            this.data = data;
        }
        return MetadataAbstractComponent;
    }());
    MetadataAbstractComponent.ɵfac = function MetadataAbstractComponent_Factory(t) { return new (t || MetadataAbstractComponent)(i0__namespace.ɵɵdirectiveInject(i1.MAT_DIALOG_DATA)); };
    MetadataAbstractComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MetadataAbstractComponent, selectors: [["igo-metadata-abstract"]], decls: 6, vars: 3, consts: [["mat-dialog-title", ""], ["mat-button", "", "mat-dialog-close", "", 1, "close-button"], ["class", "mat-typography", 4, "ngIf"], [1, "mat-typography"], [3, "innerHTML"]], template: function MetadataAbstractComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "h2", 0);
                i0__namespace.ɵɵtext(1);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(2, "button", 1);
                i0__namespace.ɵɵtext(3, "X");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(4, MetadataAbstractComponent_mat_dialog_content_4_Template, 3, 1, "mat-dialog-content", 2);
                i0__namespace.ɵɵtemplate(5, MetadataAbstractComponent_mat_dialog_content_5_Template, 2, 1, "mat-dialog-content", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(ctx.data.layerTitle);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.data.type !== "arcgisrest");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.data.type === "arcgisrest");
            }
        }, directives: [i1__namespace.MatDialogTitle, i2__namespace.MatButton, i1__namespace.MatDialogClose, i1__namespace$1.NgIf, i1__namespace.MatDialogContent], styles: [".close-button{top:5px;right:5px;padding:7px;line-height:10px;position:absolute!important;min-width:auto}mat-dialog-container{position:relative}\n"], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MetadataAbstractComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-metadata-abstract',
                        templateUrl: './metadata-abstract.component.html',
                        styleUrls: ['./metadata-abstract.component.scss'],
                        encapsulation: i0.ViewEncapsulation.None
                    }]
            }], function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, null);
    })();

    var IgoMetadataModule = /** @class */ (function () {
        function IgoMetadataModule() {
        }
        IgoMetadataModule.forRoot = function () {
            return {
                ngModule: IgoMetadataModule,
                providers: []
            };
        };
        return IgoMetadataModule;
    }());
    IgoMetadataModule.ɵfac = function IgoMetadataModule_Factory(t) { return new (t || IgoMetadataModule)(); };
    IgoMetadataModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoMetadataModule });
    IgoMetadataModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule,
                i2$1.IgoLanguageModule,
                i1.MatDialogModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoMetadataModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i3.MatTooltipModule,
                            i2$1.IgoLanguageModule,
                            i1.MatDialogModule
                        ],
                        exports: [
                            MetadataButtonComponent,
                            MetadataAbstractComponent
                        ],
                        declarations: [
                            MetadataButtonComponent,
                            MetadataAbstractComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoMetadataModule, { declarations: [MetadataButtonComponent,
                MetadataAbstractComponent], imports: [i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule,
                i2$1.IgoLanguageModule,
                i1.MatDialogModule], exports: [MetadataButtonComponent,
                MetadataAbstractComponent] });
    })();

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var FEATURE = 'Feature';
    exports.FeatureMotion = void 0;
    (function (FeatureMotion) {
        FeatureMotion[FeatureMotion["None"] = 0] = "None";
        FeatureMotion[FeatureMotion["Move"] = 1] = "Move";
        FeatureMotion[FeatureMotion["Zoom"] = 2] = "Zoom";
        FeatureMotion[FeatureMotion["Default"] = 3] = "Default";
    })(exports.FeatureMotion || (exports.FeatureMotion = {}));

    var ImageWatcher = /** @class */ (function (_super) {
        __extends(ImageWatcher, _super);
        function ImageWatcher(layer, messageService, languageService) {
            var _this = _super.call(this) || this;
            _this.loaded = 0;
            _this.loading = 0;
            _this.source = layer.options.source.ol;
            _this.id = utils.uuid();
            _this.messageService = messageService;
            _this.languageService = languageService;
            return _this;
        }
        ImageWatcher.prototype.watch = function () {
            var _this = this;
            this.source.on("imageloadstart", function (e) { return _this.handleLoadStart(e); });
            this.source.on("imageloadend", function (e) { return _this.handleLoadEnd(e); });
            this.source.on("imageloaderror", function (e) { return _this.handleLoadEnd(e); });
            this.source.on("imageloaderror", function (e) { return _this.handleLoadError(e); });
        };
        ImageWatcher.prototype.unwatch = function () {
            var _this = this;
            this.source.un("imageloadstart", function (e) { return _this.handleLoadStart(e); });
            this.source.un("imageloadend", function (e) { return _this.handleLoadEnd(e); });
            this.source.un("imageloaderror", function (e) { return _this.handleLoadEnd(e); });
            this.source.un("imageloaderror", function (e) { return _this.handleLoadError(e); });
        };
        ImageWatcher.prototype.handleLoadStart = function (event) {
            if (!event.image.__watchers__) {
                event.image.__watchers__ = [];
            }
            event.image.__watchers__.push(this.id);
            this.loading += 1;
            this.status = utils.SubjectStatus.Working;
        };
        ImageWatcher.prototype.handleLoadEnd = function (event) {
            if (!event.image.__watchers__) {
                return;
            }
            var watcherIndex = event.image.__watchers__.indexOf(this.id);
            if (watcherIndex < 0) {
                return;
            }
            event.image.__watchers__.splice(watcherIndex, 1);
            this.loaded += 1;
            var loading = this.loading;
            if (this.loaded >= loading) {
                if (loading === this.loading) {
                    this.status = utils.SubjectStatus.Done;
                    this.loaded = this.loading = 0;
                }
            }
        };
        ImageWatcher.prototype.handleLoadError = function (event) {
            if (!event.image.__watchers__) {
                return;
            }
            var title = this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
            var message = this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: event.target.params_.LAYERS });
            this.messageService.error(message, title);
            this.loaded = -1;
            this.loading = 0;
            this.status = utils.SubjectStatus.Error;
        };
        return ImageWatcher;
    }(utils.Watcher));

    function computeMVTOptionsOnHover(layerOptions) {
        var _a, _b;
        var vectorTileLayerOptions = layerOptions;
        if (((_a = vectorTileLayerOptions.sourceOptions) === null || _a === void 0 ? void 0 : _a.type) === 'mvt' &&
            (((_b = vectorTileLayerOptions.styleByAttribute) === null || _b === void 0 ? void 0 : _b.hoverStyle) || vectorTileLayerOptions.hoverStyle)) {
            var fc = vectorTileLayerOptions.sourceOptions.featureClass;
            vectorTileLayerOptions.sourceOptions.featureClass = fc ? fc : 'feature';
        }
        return layerOptions;
    }

    exports.LinkedProperties = void 0;
    (function (LinkedProperties) {
        LinkedProperties["OPACITY"] = "opacity";
        LinkedProperties["VISIBLE"] = "visible";
        LinkedProperties["OGCFILTERS"] = "ogcFilters";
        LinkedProperties["MINRESOLUTION"] = "minResolution";
        LinkedProperties["MAXRESOLUTION"] = "maxResolution";
        LinkedProperties["ZINDEX"] = "zIndex";
        LinkedProperties["TIMEFILTER"] = "timeFilter";
    })(exports.LinkedProperties || (exports.LinkedProperties = {}));
    exports.TooltipType = void 0;
    (function (TooltipType) {
        TooltipType["TITLE"] = "title";
        TooltipType["ABSTRACT"] = "abstract";
        TooltipType["CUSTOM"] = "custom";
    })(exports.TooltipType || (exports.TooltipType = {}));

    /**
     * Generate a id from it's datasource options.
     * @param options Data source options
     * @returns A id
     */
    function generateIdFromSourceOptions(options) {
        var generators = {
            wms: generateWMSIdFromSourceOptions,
            wmts: generateWMTSIdFromSourceOptions,
            xyz: generateXYZIdFromSourceOptions,
            feature: generateFeatureIdFromSourceOptions,
            wfs: generateWfsIdFromSourceOptions,
            arcgisrest: generateArcgisRestIdFromSourceOptions,
            imagearcgisrest: generateArcgisRestIdFromSourceOptions,
            tilearcgisrest: generateArcgisRestIdFromSourceOptions,
            osm: function (_options) { return 'OSM'; },
            tiledebug: function (_options) { return 'tiledebug'; }
        };
        var generator = generators[options.type] || generateId;
        return generator(options);
    }
    /**
     * Generate a id from WMS data source options
     * @param options WMS data source options
     * @returns A md5 hash of the the url and layers
     */
    function generateWMSIdFromSourceOptions(options) {
        var layers = options.params.LAYERS;
        var url = standardizeUrl(options.url);
        var chain = 'wms' + url + layers;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a id from WMTS data source options
     * @param options WMTS data source options
     * @returns A md5 hash of the the url and layer
     */
    function generateWMTSIdFromSourceOptions(options) {
        var layer = options.layer;
        var url = standardizeUrl(options.url);
        var chain = 'wmts' + url + layer;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a id from XYZ data source options
     * @param options XYZ data source options
     * @returns A md5 hash of the the url and layer
     */
    function generateXYZIdFromSourceOptions(options) {
        var url = standardizeUrl(options.url);
        var chain = 'xyz' + url;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a id from feature data source options
     * @param options XYZ data source options
     * @returns A md5 hash of the the url and layer
     */
    function generateFeatureIdFromSourceOptions(options) {
        if (!options.url) {
            return generateId(options);
        }
        var url = standardizeUrl(options.url);
        var chain = 'feature' + url;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a id from feature data source options
     * @param options XYZ data source options
     * @returns A md5 hash of the the url and layer
     */
    function generateWfsIdFromSourceOptions(options) {
        if (!options.url || !options.params) {
            return generateId(options);
        }
        var url = standardizeUrl(options.url);
        var chain = 'wfs' + url + options.params.featureTypes;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a id from ArcGIS Rest data source options
     * @param options ArcGIS Rest data source options
     * @returns A md5 hash of the url and layers
     */
    function generateArcgisRestIdFromSourceOptions(options) {
        var layers = options.layer;
        var url = standardizeUrl(options.url);
        var chain = (options.type || 'arcgis') + url + layers;
        return tsMd5.Md5.hashStr(chain);
    }
    /**
     * Generate a unique id
     * @returns A uuid
     */
    function generateId(_options) {
        return utils.uuid();
    }
    function standardizeUrl(url) {
        var absUrl = url.charAt(0) === '/' ? window.location.origin + url : url;
        var urlDecomposed = absUrl.split(/[?&]/);
        var urlStandardized = urlDecomposed.shift();
        var paramsToKeep = urlDecomposed.filter(function (p) { return p.length !== 0 && p.charAt(0) !== '_'; });
        if (paramsToKeep.length) {
            urlStandardized += '?' + paramsToKeep.join('&');
        }
        return urlStandardized;
    }

    var DataSource = /** @class */ (function () {
        function DataSource(options, dataService) {
            if (options === void 0) { options = {}; }
            this.options = options;
            this.dataService = dataService;
            this.options = options;
            this.id = this.options.id || this.generateId();
            this.ol = this.createOlSource();
        }
        DataSource.prototype.generateId = function () {
            return generateIdFromSourceOptions(this.options);
        };
        DataSource.prototype.getLegend = function (style, view) {
            return this.legend ? this.legend : [];
        };
        DataSource.prototype.setLegend = function (options) {
            if (options.url) {
                this.legend = [{ url: options.url }];
            }
            else if (options.html) {
                this.legend = [{ html: options.html }];
            }
            else {
                this.legend = [];
            }
            return this.legend;
        };
        return DataSource;
    }());

    exports.OgcFilterOperatorType = void 0;
    (function (OgcFilterOperatorType) {
        OgcFilterOperatorType["BasicNumericOperator"] = "basicnumericoperator";
        OgcFilterOperatorType["Basic"] = "basic";
        OgcFilterOperatorType["BasicAndSpatial"] = "basicandspatial";
        OgcFilterOperatorType["Spatial"] = "spatial";
        OgcFilterOperatorType["All"] = "all";
        OgcFilterOperatorType["Time"] = "time";
    })(exports.OgcFilterOperatorType || (exports.OgcFilterOperatorType = {}));
    exports.OgcFilterOperator = void 0;
    (function (OgcFilterOperator) {
        OgcFilterOperator["BBOX"] = "BBox";
        OgcFilterOperator["PropertyIsBetween"] = "PropertyIsBetween";
        OgcFilterOperator["Contains"] = "Contains";
        OgcFilterOperator["During"] = "During";
        OgcFilterOperator["PropertyIsEqualTo"] = "PropertyIsEqualTo";
        OgcFilterOperator["PropertyIsGreaterThan"] = "PropertyIsGreaterThan";
        OgcFilterOperator["PropertyIsGreaterThanOrEqualTo"] = "PropertyIsGreaterThanOrEqualTo";
        OgcFilterOperator["Intersects"] = "Intersects";
        OgcFilterOperator["PropertyIsNull"] = "PropertyIsNull";
        OgcFilterOperator["PropertyIsLessThan"] = "PropertyIsLessThan";
        OgcFilterOperator["PropertyIsLessThanOrEqualTo"] = "PropertyIsLessThanOrEqualTo";
        OgcFilterOperator["PropertyIsLike"] = "PropertyIsLike";
        OgcFilterOperator["PropertyIsNotEqualTo"] = "PropertyIsNotEqualTo";
        OgcFilterOperator["Within"] = "Within";
        OgcFilterOperator["And"] = "And";
        OgcFilterOperator["Or"] = "Or";
        OgcFilterOperator["Not"] = "Not";
    })(exports.OgcFilterOperator || (exports.OgcFilterOperator = {}));

    var moment$3 = moment___namespace;
    var OgcFilterWriter = /** @class */ (function () {
        function OgcFilterWriter() {
            var _a;
            this.filterSequence = [];
            this.operators = (_a = {},
                _a[exports.OgcFilterOperator.PropertyIsEqualTo] = {
                    spatial: false,
                    fieldRestrict: []
                },
                _a[exports.OgcFilterOperator.PropertyIsNotEqualTo] = {
                    spatial: false,
                    fieldRestrict: []
                },
                _a[exports.OgcFilterOperator.PropertyIsLike] = {
                    spatial: false,
                    fieldRestrict: ['string']
                },
                _a[exports.OgcFilterOperator.PropertyIsGreaterThan] = {
                    spatial: false,
                    fieldRestrict: ['number']
                },
                _a[exports.OgcFilterOperator.PropertyIsGreaterThanOrEqualTo] = {
                    spatial: false,
                    fieldRestrict: ['number']
                },
                _a[exports.OgcFilterOperator.PropertyIsLessThan] = {
                    spatial: false,
                    fieldRestrict: ['number']
                },
                _a[exports.OgcFilterOperator.PropertyIsLessThanOrEqualTo] = {
                    spatial: false,
                    fieldRestrict: ['number']
                },
                _a[exports.OgcFilterOperator.PropertyIsBetween] = {
                    spatial: false,
                    fieldRestrict: ['number']
                },
                _a[exports.OgcFilterOperator.During] = { spatial: false, fieldRestrict: [] },
                _a[exports.OgcFilterOperator.PropertyIsNull] = {
                    spatial: false,
                    fieldRestrict: []
                },
                _a[exports.OgcFilterOperator.Intersects] = {
                    spatial: true,
                    fieldRestrict: []
                },
                _a[exports.OgcFilterOperator.Within] = { spatial: true, fieldRestrict: [] },
                _a[exports.OgcFilterOperator.Contains] = { spatial: true, fieldRestrict: [] },
                _a);
        }
        OgcFilterWriter.prototype.defineOgcFiltersDefaultOptions = function (ogcFiltersOptions, fieldNameGeometry, srcType) {
            var ogcFiltersDefaultValue = true; // default values for wfs.
            if (srcType && srcType === 'wms') {
                ogcFiltersDefaultValue = false;
            }
            ogcFiltersOptions = ogcFiltersOptions || {};
            ogcFiltersOptions.enabled =
                ogcFiltersOptions.enabled === undefined
                    ? ogcFiltersDefaultValue
                    : ogcFiltersOptions.enabled;
            ogcFiltersOptions.editable =
                ogcFiltersOptions.editable === undefined
                    ? ogcFiltersDefaultValue
                    : ogcFiltersOptions.editable;
            ogcFiltersOptions.geometryName = fieldNameGeometry;
            ogcFiltersOptions.advancedOgcFilters = true;
            if (ogcFiltersOptions.enabled && (ogcFiltersOptions.pushButtons || ogcFiltersOptions.checkboxes
                || ogcFiltersOptions.radioButtons || ogcFiltersOptions.select)) {
                ogcFiltersOptions.advancedOgcFilters = false;
            }
            return ogcFiltersOptions;
        };
        OgcFilterWriter.prototype.buildFilter = function (filters, extent, proj, fieldNameGeometry, options) {
            var ourBboxFilter;
            var enableBbox;
            if (/intersects|contains|within/gi.test(JSON.stringify(filters))) {
                enableBbox = false;
            }
            else {
                enableBbox = true;
            }
            if (filters) {
                fieldNameGeometry =
                    filters.geometryName !== undefined
                        ? filters.geometryName
                        : fieldNameGeometry;
            }
            if (extent && filters) {
                ourBboxFilter = olfilter__namespace.bbox(fieldNameGeometry, extent, proj.getCode());
            }
            var filterAssembly;
            if (filters) {
                filters = this.checkIgoFiltersProperties(filters, fieldNameGeometry, proj);
                if (extent && enableBbox) {
                    filterAssembly = olfilter__namespace.and(ourBboxFilter, this.bundleFilter(filters, options));
                }
                else {
                    filterAssembly = this.bundleFilter(filters, options);
                }
            }
            else {
                return 'bbox=' + extent.join(',') + ',' + proj.getCode();
            }
            var wfsOptions = {
                srsName: '',
                featureNS: '',
                featurePrefix: '',
                featureTypes: ['featureTypes'],
                filter: filterAssembly,
                outputFormat: '',
                geometryName: fieldNameGeometry
            };
            var query = new olFormatWFS__default["default"]().writeGetFeature(wfsOptions);
            var str = new XMLSerializer().serializeToString(query);
            var regexp1 = /typenames *=|typename *=\"featureTypes\" *>/gi;
            var regexp2 = /<\/Query><\/GetFeature>/gi;
            return 'filter=' + str.split(regexp1)[1].split(regexp2)[0];
        };
        OgcFilterWriter.prototype.bundleFilter = function (filterObject, options) {
            var _this = this;
            if (filterObject instanceof Array) {
                var logicalArray_1 = [];
                filterObject.forEach(function (element) {
                    logicalArray_1.push(_this.bundleFilter(element, options));
                });
                return logicalArray_1;
            }
            else {
                if (filterObject.hasOwnProperty('logical')) {
                    return this.createFilter({
                        operator: filterObject.logical,
                        logicalArray: this.bundleFilter(filterObject.filters, options)
                    }, options);
                }
                else if (filterObject.hasOwnProperty('operator')) {
                    return this.createFilter(filterObject, options);
                }
            }
        };
        OgcFilterWriter.prototype.createFilter = function (filterOptions, options) {
            var operator = filterOptions.operator;
            var logicalArray = filterOptions.logicalArray;
            var wfsPropertyName = filterOptions.propertyName;
            var wfsPattern = filterOptions.pattern;
            var wfsMatchCase = filterOptions.matchCase
                ? filterOptions.matchCase
                : true;
            var wfsWildCard = filterOptions.wildCard ? filterOptions.wildCard : '*';
            var wfsSingleChar = filterOptions.singleChar
                ? filterOptions.singleChar
                : '.';
            var wfsEscapeChar = filterOptions.escapeChar
                ? filterOptions.escapeChar
                : '!';
            var wfsLowerBoundary = filterOptions.lowerBoundary;
            var wfsUpperBoundary = filterOptions.upperBoundary;
            var wfsGeometryName = filterOptions.geometryName;
            var wfsExtent = filterOptions.extent;
            var wfsWktGeometry = filterOptions.wkt_geometry;
            var wfsSrsName = filterOptions.srsName
                ? filterOptions.srsName
                : 'EPSG:3857';
            var wfsBegin = this.parseFilterOptionDate(filterOptions.begin, options ? options.minDate : undefined);
            var wfsEnd = this.parseFilterOptionDate(filterOptions.end, options ? options.maxDate : undefined);
            var wfsExpression = filterOptions.expression;
            var geometry;
            if (wfsWktGeometry) {
                var wkt = new olWKT__default["default"]();
                geometry = wkt.readGeometry(wfsWktGeometry, {
                    dataProjection: wfsSrsName,
                    featureProjection: wfsSrsName || 'EPSG:3857'
                });
            }
            switch (operator.toLowerCase()) {
                case exports.OgcFilterOperator.BBOX.toLowerCase():
                    return olfilter__namespace.bbox(wfsGeometryName, wfsExtent, wfsSrsName);
                case exports.OgcFilterOperator.PropertyIsBetween.toLowerCase():
                    return olfilter__namespace.between(wfsPropertyName, wfsLowerBoundary, wfsUpperBoundary);
                case exports.OgcFilterOperator.Contains.toLowerCase():
                    return olfilter__namespace.contains(wfsGeometryName, geometry, wfsSrsName);
                case exports.OgcFilterOperator.During.toLowerCase():
                    return olfilter__namespace.during(wfsPropertyName, wfsBegin, wfsEnd);
                case exports.OgcFilterOperator.PropertyIsEqualTo.toLowerCase():
                    return olfilter__namespace.equalTo(wfsPropertyName, wfsExpression, wfsMatchCase);
                case exports.OgcFilterOperator.PropertyIsGreaterThan.toLowerCase():
                    return olfilter__namespace.greaterThan(wfsPropertyName, wfsExpression);
                case exports.OgcFilterOperator.PropertyIsGreaterThanOrEqualTo.toLowerCase():
                    return olfilter__namespace.greaterThanOrEqualTo(wfsPropertyName, wfsExpression);
                case exports.OgcFilterOperator.Intersects.toLowerCase():
                    return olfilter__namespace.intersects(wfsGeometryName, geometry, wfsSrsName);
                case exports.OgcFilterOperator.PropertyIsNull.toLowerCase():
                    return olfilter__namespace.isNull(wfsPropertyName);
                case exports.OgcFilterOperator.PropertyIsLessThan.toLowerCase():
                    return olfilter__namespace.lessThan(wfsPropertyName, wfsExpression);
                case exports.OgcFilterOperator.PropertyIsLessThanOrEqualTo.toLowerCase():
                    return olfilter__namespace.lessThanOrEqualTo(wfsPropertyName, wfsExpression);
                case exports.OgcFilterOperator.PropertyIsLike.toLowerCase():
                    return olfilter__namespace.like(wfsPropertyName, wfsPattern.replace(/[()_]/gi, wfsSingleChar), wfsWildCard, wfsSingleChar, wfsEscapeChar, wfsMatchCase);
                case exports.OgcFilterOperator.PropertyIsNotEqualTo.toLowerCase():
                    return olfilter__namespace.notEqualTo(wfsPropertyName, wfsExpression, wfsMatchCase);
                case exports.OgcFilterOperator.Within.toLowerCase():
                    return olfilter__namespace.within(wfsGeometryName, geometry, wfsSrsName);
                // LOGICAL
                case exports.OgcFilterOperator.And.toLowerCase():
                    return olfilter__namespace.and.apply(null, logicalArray);
                case exports.OgcFilterOperator.Or.toLowerCase():
                    return olfilter__namespace.or.apply(null, logicalArray);
                case exports.OgcFilterOperator.Not.toLowerCase():
                    return olfilter__namespace.not.apply(null, logicalArray);
                default:
                    return undefined;
            }
        };
        OgcFilterWriter.prototype.defineInterfaceFilterSequence = function (filterObject, geometryName, logical, level) {
            var _this = this;
            if (logical === void 0) { logical = ''; }
            if (level === void 0) { level = -1; }
            if (filterObject instanceof Array) {
                filterObject.forEach(function (element) {
                    _this.filterSequence.concat(_this.defineInterfaceFilterSequence(element, geometryName, logical, level));
                });
            }
            else {
                if (filterObject.hasOwnProperty('logical')) {
                    level = level + 1;
                    this.filterSequence.concat(this.defineInterfaceFilterSequence(filterObject.filters, geometryName, filterObject.logical, level));
                }
                else if (filterObject.hasOwnProperty('operator')) {
                    this.filterSequence.push(this.addInterfaceFilter(filterObject, geometryName, level, logical));
                }
            }
            return this.filterSequence;
        };
        OgcFilterWriter.prototype.computeAllowedOperators = function (fields, propertyName, defaultOperatorsType) {
            var _a, _b, _c, _d, _e, _f;
            var effectiveOperators = {};
            var allowedOperators;
            var fieldsHasSpatialOperator;
            var includeContains;
            if (fields && propertyName) {
                var srcField = fields.find(function (field) { return field.name === propertyName; });
                allowedOperators =
                    srcField && srcField.allowedOperatorsType
                        ? srcField.allowedOperatorsType
                        : defaultOperatorsType;
            }
            if (fields) {
                fields.map(function (field) {
                    if (!field.allowedOperatorsType) {
                        return;
                    }
                    var allowedOperatorsType = field.allowedOperatorsType.toLowerCase();
                    if (allowedOperatorsType === exports.OgcFilterOperatorType.All.toLowerCase() ||
                        allowedOperatorsType ===
                            exports.OgcFilterOperatorType.Spatial.toLowerCase() ||
                        allowedOperatorsType ===
                            exports.OgcFilterOperatorType.BasicAndSpatial.toLowerCase()) {
                        fieldsHasSpatialOperator = true;
                        if (allowedOperatorsType === exports.OgcFilterOperatorType.All.toLowerCase()) {
                            includeContains = true;
                        }
                    }
                });
            }
            allowedOperators = allowedOperators
                ? allowedOperators
                : exports.OgcFilterOperatorType.BasicAndSpatial;
            switch (allowedOperators.toLowerCase()) {
                case exports.OgcFilterOperatorType.All:
                    effectiveOperators = this.operators;
                    break;
                case exports.OgcFilterOperatorType.Spatial:
                    effectiveOperators = (_a = {},
                        _a[exports.OgcFilterOperator.Intersects] = { spatial: true, fieldRestrict: [] },
                        _a[exports.OgcFilterOperator.Within] = { spatial: true, fieldRestrict: [] },
                        _a);
                    break;
                case exports.OgcFilterOperatorType.BasicAndSpatial:
                    effectiveOperators = (_b = {},
                        _b[exports.OgcFilterOperator.PropertyIsEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _b[exports.OgcFilterOperator.PropertyIsNotEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _b[exports.OgcFilterOperator.Intersects] = { spatial: true, fieldRestrict: [] },
                        _b[exports.OgcFilterOperator.Within] = { spatial: true, fieldRestrict: [] },
                        _b);
                    break;
                case exports.OgcFilterOperatorType.Basic:
                    effectiveOperators = (_c = {},
                        _c[exports.OgcFilterOperator.PropertyIsEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _c[exports.OgcFilterOperator.PropertyIsNotEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _c);
                    break;
                case exports.OgcFilterOperatorType.Time:
                    effectiveOperators = (_d = {},
                        _d[exports.OgcFilterOperator.During] = { spatial: false, fieldRestrict: [] },
                        _d);
                    break;
                case exports.OgcFilterOperatorType.BasicNumericOperator:
                    effectiveOperators = (_e = {},
                        _e[exports.OgcFilterOperator.PropertyIsEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _e[exports.OgcFilterOperator.PropertyIsNotEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _e[exports.OgcFilterOperator.PropertyIsGreaterThan] = {
                            spatial: false,
                            fieldRestrict: ['number']
                        },
                        _e[exports.OgcFilterOperator.PropertyIsGreaterThanOrEqualTo] = {
                            spatial: false,
                            fieldRestrict: ['number']
                        },
                        _e[exports.OgcFilterOperator.PropertyIsLessThan] = {
                            spatial: false,
                            fieldRestrict: ['number']
                        },
                        _e[exports.OgcFilterOperator.PropertyIsLessThanOrEqualTo] = {
                            spatial: false,
                            fieldRestrict: ['number']
                        },
                        _e);
                    break;
                default:
                    effectiveOperators = (_f = {},
                        _f[exports.OgcFilterOperator.PropertyIsEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _f[exports.OgcFilterOperator.PropertyIsNotEqualTo] = {
                            spatial: false,
                            fieldRestrict: []
                        },
                        _f[exports.OgcFilterOperator.Intersects] = { spatial: true, fieldRestrict: [] },
                        _f[exports.OgcFilterOperator.Within] = { spatial: true, fieldRestrict: [] },
                        _f);
            }
            if (fieldsHasSpatialOperator) {
                effectiveOperators.Intersects = {
                    spatial: true,
                    fieldRestrict: []
                };
                effectiveOperators.Within = { spatial: true, fieldRestrict: [] };
                if (includeContains) {
                    effectiveOperators.Contains = {
                        spatial: true,
                        fieldRestrict: []
                    };
                }
            }
            return effectiveOperators;
        };
        OgcFilterWriter.prototype.addInterfaceFilter = function (igoOgcFilterObject, geometryName, level, parentLogical) {
            if (level === void 0) { level = 0; }
            if (parentLogical === void 0) { parentLogical = 'Or'; }
            if (!igoOgcFilterObject) {
                igoOgcFilterObject = { operator: 'PropertyIsEqualTo' };
            }
            var f = {
                propertyName: '',
                operator: '',
                active: '',
                filterid: utils.uuid(),
                step: '',
                begin: '',
                end: '',
                sliderOptions: {},
                lowerBoundary: '',
                upperBoundary: '',
                expression: '',
                pattern: '',
                wildCard: '*',
                singleChar: '.',
                escapeChar: '!',
                matchCase: true,
                igoSpatialSelector: '',
                igoSNRC: '',
                geometryName: '',
                geometry: '',
                wkt_geometry: '',
                extent: '',
                srsName: '',
                parentLogical: '',
                level: 0
            };
            return Object.assign(f, {
                parentLogical: parentLogical,
                level: level,
                geometryName: geometryName
            }, igoOgcFilterObject);
        };
        OgcFilterWriter.prototype.checkIgoFiltersProperties = function (filterObject, fieldNameGeometry, proj, active) {
            var _this = this;
            if (active === void 0) { active = false; }
            var filterArray = [];
            if (filterObject instanceof Array) {
                filterObject.forEach(function (element) {
                    filterArray.push(_this.checkIgoFiltersProperties(element, fieldNameGeometry, proj, active));
                });
                return filterArray;
            }
            else {
                if (filterObject.hasOwnProperty('logical')) {
                    return Object.assign({}, {
                        logical: filterObject.logical,
                        filters: this.checkIgoFiltersProperties(filterObject.filters, fieldNameGeometry, proj, active)
                    });
                }
                else if (filterObject.hasOwnProperty('operator')) {
                    return this.addFilterProperties(filterObject, fieldNameGeometry, proj, active);
                }
            }
        };
        OgcFilterWriter.prototype.addFilterProperties = function (igoOgcFilterObject, fieldNameGeometry, proj, active) {
            if (active === void 0) { active = false; }
            var filterid = igoOgcFilterObject.hasOwnProperty('filterid')
                ? igoOgcFilterObject.filterid
                : utils.uuid();
            var status = igoOgcFilterObject.hasOwnProperty('active')
                ? igoOgcFilterObject.active
                : active;
            var srsName = igoOgcFilterObject.hasOwnProperty('srsName')
                ? igoOgcFilterObject.srsName
                : proj
                    ? proj.getCode()
                    : 'EPSG:3857';
            return Object.assign({}, {
                filterid: filterid,
                active: status,
                igoSpatialSelector: 'fixedExtent',
                srsName: srsName
            }, igoOgcFilterObject, { geometryName: fieldNameGeometry });
        };
        OgcFilterWriter.prototype.rebuiltIgoOgcFilterObjectFromSequence = function (sequence) {
            if (sequence instanceof Array) {
                if (sequence.length >= 1) {
                    var lastParentLogical_1 = sequence[0].parentLogical;
                    var nextElement_1;
                    var logicalArray_2 = [];
                    var lastProcessedFilter_1;
                    sequence.forEach(function (uiFilter) {
                        var element = Object.assign({}, uiFilter);
                        var index = sequence.indexOf(uiFilter);
                        if (index >= 0 && index < sequence.length - 1) {
                            nextElement_1 = sequence[index + 1];
                        }
                        else {
                            nextElement_1 = element;
                        }
                        delete element.active;
                        delete element.filterid;
                        delete element.parentLogical;
                        logicalArray_2.push(element);
                        if (sequence.length === 1) {
                            lastProcessedFilter_1 = element;
                        }
                        else if (lastParentLogical_1 !== nextElement_1.parentLogical) {
                            if (logicalArray_2.length === 1) {
                                console.log('You must set at ' +
                                    'least two operator in a logical (' +
                                    lastParentLogical_1 +
                                    ')');
                            }
                            else {
                                lastProcessedFilter_1 = Object.assign({}, { logical: lastParentLogical_1, filters: logicalArray_2 });
                                logicalArray_2 = [lastProcessedFilter_1];
                                lastParentLogical_1 = nextElement_1.parentLogical;
                            }
                        }
                    });
                    return lastProcessedFilter_1;
                }
                else {
                    return undefined;
                }
            }
            else {
                return undefined;
            }
        };
        OgcFilterWriter.prototype.computeIgoSelector = function (selectors) {
            if (selectors.groups.every(function (group) { return group.computedSelectors !== undefined; })) {
                return selectors;
            }
            var selector;
            if (selectors.groups && selectors.bundles) {
                if (!selectors.bundles.every(function (bundle) { return bundle.id !== undefined; })) {
                    throw new Error('You must set an id for each of your bundles');
                }
                selector = utils.ObjectUtils.copyDeep(selectors);
                selector.groups.forEach(function (group) {
                    group.title = group.title ? group.title : group.name;
                    group.enabled = group.enabled ? group.enabled : false;
                    group.computedSelectors = utils.ObjectUtils.copyDeep(selector.bundles.filter(function (b) { return group.ids.includes(b.id); }));
                });
            }
            else if (!selectors.groups && selectors.bundles) {
                selector = utils.ObjectUtils.copyDeep(selectors);
                selector.groups = [
                    {
                        title: 'group1',
                        name: 'group1',
                        computedSelectors: utils.ObjectUtils.copyDeep(selector.bundles)
                    }
                ];
            }
            else {
                selector = {
                    bundles: selectors,
                    groups: [
                        {
                            title: 'group1',
                            name: 'group1',
                            computedSelectors: utils.ObjectUtils.copyDeep(selectors)
                        }
                    ],
                    selectorType: selector.selectorType
                };
            }
            if (!selector.groups.find(function (selectorGroup) { return selectorGroup.enabled; })) {
                selector.groups[0].enabled = true;
            }
            return selector;
        };
        OgcFilterWriter.prototype.handleOgcFiltersAppliedValue = function (options, fieldNameGeometry, extent, proj) {
            var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
            var ogcFilters = options.ogcFilters;
            if (!ogcFilters) {
                return;
            }
            var conditions = [];
            var filterQueryStringSelector = '';
            var filterQueryStringAdvancedFilters = '';
            if (ogcFilters.enabled && (ogcFilters.pushButtons || ogcFilters.checkboxes || ogcFilters.radioButtons || ogcFilters.select)) {
                var selectors = void 0;
                if (ogcFilters.pushButtons) {
                    selectors = ogcFilters.pushButtons;
                    var pushConditions = this.formatGroupAndFilter(ogcFilters, selectors);
                    try {
                        for (var pushConditions_1 = __values(pushConditions), pushConditions_1_1 = pushConditions_1.next(); !pushConditions_1_1.done; pushConditions_1_1 = pushConditions_1.next()) {
                            var condition = pushConditions_1_1.value;
                            conditions.push(condition);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (pushConditions_1_1 && !pushConditions_1_1.done && (_a = pushConditions_1.return)) _a.call(pushConditions_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                if (ogcFilters.checkboxes) {
                    selectors = ogcFilters.checkboxes;
                    var checkboxConditions = this.formatGroupAndFilter(ogcFilters, selectors);
                    try {
                        for (var checkboxConditions_1 = __values(checkboxConditions), checkboxConditions_1_1 = checkboxConditions_1.next(); !checkboxConditions_1_1.done; checkboxConditions_1_1 = checkboxConditions_1.next()) {
                            var condition = checkboxConditions_1_1.value;
                            conditions.push(condition);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (checkboxConditions_1_1 && !checkboxConditions_1_1.done && (_b = checkboxConditions_1.return)) _b.call(checkboxConditions_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (ogcFilters.radioButtons) {
                    selectors = ogcFilters.radioButtons;
                    var selectorsCorr = this.verifyMultipleEnableds(selectors);
                    var radioConditions = this.formatGroupAndFilter(ogcFilters, selectorsCorr);
                    try {
                        for (var radioConditions_1 = __values(radioConditions), radioConditions_1_1 = radioConditions_1.next(); !radioConditions_1_1.done; radioConditions_1_1 = radioConditions_1.next()) {
                            var condition = radioConditions_1_1.value;
                            conditions.push(condition);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (radioConditions_1_1 && !radioConditions_1_1.done && (_c = radioConditions_1.return)) _c.call(radioConditions_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                if (ogcFilters.select) {
                    selectors = ogcFilters.select;
                    var selectorsCorr = this.verifyMultipleEnableds(selectors);
                    var selectConditions = this.formatGroupAndFilter(ogcFilters, selectorsCorr);
                    try {
                        for (var selectConditions_1 = __values(selectConditions), selectConditions_1_1 = selectConditions_1.next(); !selectConditions_1_1.done; selectConditions_1_1 = selectConditions_1.next()) {
                            var condition = selectConditions_1_1.value;
                            conditions.push(condition);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (selectConditions_1_1 && !selectConditions_1_1.done && (_d = selectConditions_1.return)) _d.call(selectConditions_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                if (conditions.length >= 1) {
                    filterQueryStringSelector = this.buildFilter(conditions.length === 1
                        ? conditions[0]
                        : { logical: 'And', filters: conditions }, extent, proj, ogcFilters.geometryName);
                }
            }
            if (ogcFilters.enabled && ogcFilters.filters) {
                ogcFilters.geometryName = ogcFilters.geometryName || fieldNameGeometry;
                var igoFilters = ogcFilters.filters;
                filterQueryStringAdvancedFilters = this.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName, options);
            }
            var filterQueryString = ogcFilters.advancedOgcFilters
                ? filterQueryStringAdvancedFilters
                : filterQueryStringSelector;
            if (options.type === 'wms') {
                filterQueryString = this.formatProcessedOgcFilter(filterQueryString, options.params.LAYERS);
            }
            if (options.type === 'wfs') {
                filterQueryString = this.formatProcessedOgcFilter(filterQueryString, options.params.featureTypes);
            }
            return filterQueryString;
        };
        OgcFilterWriter.prototype.verifyMultipleEnableds = function (selectors) {
            selectors.bundles.forEach(function (bundle) {
                if (!bundle.multiple) {
                    var enableds = bundle.selectors.reduce(function (list, filter, index) { return (filter.enabled) === true ? list.concat(index) : list; }, []);
                    if (enableds.length > 1) {
                        enableds.splice(0, 1);
                        enableds.forEach(function (index) {
                            bundle.selectors[index].enabled = false;
                        });
                    }
                }
            });
            return selectors;
        };
        OgcFilterWriter.prototype.formatGroupAndFilter = function (ogcFilters, selectors) {
            selectors = this.computeIgoSelector(selectors);
            var selectorBundle = selectors.groups.find(function (g) { return g.enabled; }).computedSelectors;
            var conditions = [];
            selectorBundle.map(function (bundle) {
                var bundleCondition = [];
                var selectorsType = bundle.selectors;
                if (!selectorsType) {
                    return;
                }
                selectorsType
                    .filter(function (ogcselector) { return ogcselector.enabled === true; })
                    .forEach(function (enabledSelector) { return bundleCondition.push(enabledSelector.filters); });
                if (bundleCondition.length === 1) {
                    conditions.push(bundleCondition[0]);
                }
                else if (bundleCondition.length > 1) {
                    conditions.push({
                        logical: bundle.logical,
                        filters: bundleCondition
                    });
                }
            });
            if (selectors.selectorType === 'pushButton') {
                ogcFilters.pushButtons = selectors;
            }
            else if (selectors.selectorType === 'checkbox') {
                ogcFilters.checkboxes = selectors;
            }
            else if (selectors.selectorType === 'radioButton') {
                ogcFilters.radioButtons = selectors;
            }
            else if (selectors.selectorType === 'select') {
                ogcFilters.select = selectors;
            }
            return conditions;
        };
        OgcFilterWriter.prototype.formatProcessedOgcFilter = function (processedFilter, layersOrTypenames) {
            if (!processedFilter) {
                return undefined;
            }
            ;
            var appliedFilter = '';
            if (processedFilter.length === 0 && layersOrTypenames.indexOf(',') === -1) {
                appliedFilter = processedFilter;
            }
            else {
                layersOrTypenames.split(',').forEach(function (layerOrTypenames) {
                    appliedFilter = appliedFilter + "(" + processedFilter.replace('filter=', '') + ")";
                });
            }
            appliedFilter = appliedFilter.replace(/\(\)/g, '');
            var filterValue = appliedFilter.length > 0
                ? appliedFilter.replace('filter=', '')
                : undefined;
            return filterValue;
        };
        OgcFilterWriter.prototype.parseFilterOptionDate = function (value, defaultValue) {
            if (!value) {
                return defaultValue;
            }
            else if (value === 'today') {
                return undefined;
            }
            else if (moment$3(value).isValid()) {
                return value;
            }
            else {
                return undefined;
            }
        };
        return OgcFilterWriter;
    }());

    exports.QueryFormat = void 0;
    (function (QueryFormat) {
        QueryFormat["GML2"] = "gml2";
        QueryFormat["GML3"] = "gml3";
        QueryFormat["JSON"] = "json";
        QueryFormat["GEOJSON"] = "geojson";
        QueryFormat["GEOJSON2"] = "geojson2";
        QueryFormat["ESRIJSON"] = "esrijson";
        QueryFormat["TEXT"] = "text";
        QueryFormat["HTML"] = "html";
        QueryFormat["HTMLGML2"] = "htmlgml2";
    })(exports.QueryFormat || (exports.QueryFormat = {}));
    exports.QueryFormatMimeType = void 0;
    (function (QueryFormatMimeType) {
        QueryFormatMimeType["GML2"] = "application/vnd.ogc.gml";
        QueryFormatMimeType["GML3"] = "application/vnd.ogc.gml/3.1.1";
        QueryFormatMimeType["JSON"] = "application/json";
        QueryFormatMimeType["GEOJSON"] = "application/geojson";
        QueryFormatMimeType["GEOJSON2"] = "geojson";
        QueryFormatMimeType["ESRIJSON"] = "application/json";
        QueryFormatMimeType["TEXT"] = "text/plain";
        QueryFormatMimeType["HTML"] = "text/html";
        QueryFormatMimeType["HTMLGML2"] = "text/html";
    })(exports.QueryFormatMimeType || (exports.QueryFormatMimeType = {}));
    exports.QueryHtmlTarget = void 0;
    (function (QueryHtmlTarget) {
        QueryHtmlTarget["IFRAME"] = "iframe";
        QueryHtmlTarget["BLANK"] = "_blank";
    })(exports.QueryHtmlTarget || (exports.QueryHtmlTarget = {}));

    var defaultEpsg = 'EPSG:3857';
    var defaultMaxFeatures = 5000;
    var defaultWfsVersion = '2.0.0';
    var defaultFieldNameGeometry = 'geometry';
    var gmlRegex = new RegExp(/(.*)?gml(.*)?/gi);
    var jsonRegex = new RegExp(/(.*)?json(.*)?/gi);
    /**
     * This method build the WFS URL based on the layer property.
     * @param options  WFSDataSourceOptions The common wfs datasource options interface
     * @param extent  An extent like array [number, number, number, number]
     * @param proj  olProjection
     * @param ogcFilters  OgcFiltersOptions
     * @returns A string representing the datasource options, based on filter and views
     */
    function buildUrl(options, extent, proj, ogcFilters, randomParam) {
        var paramsWFS = options.paramsWFS;
        var queryStringValues = formatWFSQueryString(options, undefined, options.paramsWFS.srsName);
        var igoFilters;
        if (ogcFilters && ogcFilters.enabled) {
            igoFilters = ogcFilters.filters;
        }
        var ogcFilterWriter = new OgcFilterWriter();
        var filterOrBox = ogcFilterWriter.buildFilter(igoFilters, extent, proj, ogcFilters.geometryName, options);
        var filterOrPush = ogcFilterWriter.handleOgcFiltersAppliedValue(options, ogcFilters.geometryName, extent, proj);
        var prefix = 'filter';
        if (!filterOrPush) {
            prefix = 'bbox';
            filterOrPush = extent.join(',') + ',' + proj.getCode();
        }
        paramsWFS.xmlFilter = ogcFilters.advancedOgcFilters ? filterOrBox : prefix + "=" + filterOrPush;
        var baseUrl = queryStringValues.find(function (f) { return f.name === 'getfeature'; }).value;
        var patternFilter = /(filter|bbox)=.*/gi;
        baseUrl = patternFilter.test(paramsWFS.xmlFilter) ? baseUrl + "&" + paramsWFS.xmlFilter : baseUrl;
        options.download = Object.assign({}, options.download, { dynamicUrl: baseUrl });
        if (randomParam) {
            baseUrl += "$&_t" + new Date().getTime();
        }
        return baseUrl.replace(/&&/g, '&');
    }
    /**
     * This method build/standardize WFS call query params based on the layer property.
     * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface
     * @param count  Number: Used to control the number of feature. Used to bypass whe wfs datasource options interface (maxFeatures)
     * @param epsg  String: Used to control the EPSG code (es: 'EPSG3857'). Used to bypass whe wfs datasource options interface (srsName)
     * @param properties  String: Used to control the queried fields  (WFS service).
     * @returns An array array of {name: '', value: ''} of predefined query params.
     */
    function formatWFSQueryString(dataSourceOptions, count, epsg, properties, startIndex, forceDefaultOutputFormat) {
        if (startIndex === void 0) { startIndex = 0; }
        if (forceDefaultOutputFormat === void 0) { forceDefaultOutputFormat = false; }
        var versionWfs200 = '2.0.0'; // not the same usage as defaultWfsVersion.
        var url = dataSourceOptions.urlWfs;
        var paramsWFS = dataSourceOptions.paramsWFS;
        var effectiveCount = count || defaultMaxFeatures;
        var effectiveStartIndex = paramsWFS.version === versionWfs200 ? "startIndex=" + startIndex : '';
        var epsgCode = epsg || defaultEpsg;
        var outputFormat = paramsWFS.outputFormat
            ? "outputFormat=" + paramsWFS.outputFormat
            : '';
        var version = paramsWFS.version
            ? "version=" + paramsWFS.version
            : "version=" + defaultWfsVersion;
        var paramTypename = paramsWFS.version === versionWfs200 ? 'typenames' : 'typename';
        var featureTypes = paramTypename + "=" + paramsWFS.featureTypes;
        var paramMaxFeatures = paramsWFS.version === versionWfs200 ? 'count' : 'maxFeatures';
        var cnt = count
            ? paramMaxFeatures + "=" + effectiveCount
            : paramsWFS.maxFeatures
                ? paramMaxFeatures + "=" + paramsWFS.maxFeatures
                : paramMaxFeatures + "=" + effectiveCount;
        if (forceDefaultOutputFormat) {
            outputFormat = '';
            version = 'version=1.1.0';
            cnt = cnt.replace('count', 'maxFeatures');
        }
        var srs = epsg
            ? "srsname=" + epsgCode
            : paramsWFS.srsName
                ? 'srsname=' + paramsWFS.srsName
                : "srsname=" + epsgCode;
        var propertyName = '';
        var valueReference = '';
        if (properties) {
            propertyName = "propertyName=" + properties;
            valueReference = "valueReference=" + properties;
        }
        var sourceFields = dataSourceOptions.sourceFields;
        if (!propertyName && sourceFields && sourceFields.length > 0) {
            var fieldsNames_1 = [];
            dataSourceOptions.sourceFields.forEach(function (sourcefield) {
                fieldsNames_1.push(sourcefield.name);
            });
            propertyName = "propertyName=" + fieldsNames_1.join(',') + "," + paramsWFS.fieldNameGeometry;
        }
        var separator = url.indexOf('?') === -1 ? '?' : '&';
        var getCapabilities = "" + url + separator + "service=WFS&request=GetCapabilities&" + version;
        var getFeature = "" + url + separator + "service=WFS&request=GetFeature&" + version + "&" + featureTypes + "&";
        getFeature += outputFormat + "&" + srs + "&" + cnt + "&" + propertyName + "&" + effectiveStartIndex;
        var getpropertyvalue = url + "?service=WFS&request=GetPropertyValue&version=" + versionWfs200 + "&" + featureTypes + "&";
        getpropertyvalue += "&" + cnt + "&" + valueReference;
        return [
            { name: 'outputformat', value: outputFormat },
            { name: 'version', value: version },
            { name: 'typename', value: featureTypes },
            { name: 'count', value: cnt },
            { name: 'srsname', value: srs },
            { name: 'propertyname', value: propertyName },
            { name: 'valuereference', value: valueReference },
            { name: 'getcapabilities', value: getCapabilities.replace(/&&/g, '&') },
            { name: 'getfeature', value: getFeature.replace(/&&/g, '&') },
            { name: 'getpropertyvalue', value: getpropertyvalue.replace(/&&/g, '&') }
        ];
    }
    /**
     * Validate/Modify layer's wfs options based on :
     * 1- an Openlayers's issue with GML provided from WFS. Refer to
     * https://github.com/openlayers/openlayers/pull/6400
     * 2- Set default values for optionals parameters.
     * @param wfsDataSourceOptions  WFSDataSourceOptions The common wfs datasource options interface
     * @returns An array array of {name: '', value: ''} of predefined query params.
     */
    function checkWfsParams(wfsDataSourceOptions, srcType) {
        if (srcType && srcType === 'wfs') {
            // reassignation of params to paramsWFS and url to urlWFS to have a common interface with wms-wfs datasources
            wfsDataSourceOptions.paramsWFS = wfsDataSourceOptions.params;
        }
        var paramsWFS = wfsDataSourceOptions.paramsWFS;
        wfsDataSourceOptions.urlWfs =
            wfsDataSourceOptions.urlWfs || wfsDataSourceOptions.url;
        paramsWFS.version = paramsWFS.version || defaultWfsVersion;
        paramsWFS.fieldNameGeometry =
            paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;
        paramsWFS.maxFeatures = paramsWFS.maxFeatures || defaultMaxFeatures;
        var outputFormat;
        if (paramsWFS.outputFormat) {
            outputFormat = paramsWFS.outputFormat;
        }
        if (gmlRegex.test(outputFormat) || !outputFormat) {
            paramsWFS.version = '1.1.0';
        }
        return Object.assign({}, wfsDataSourceOptions);
    }
    function getFormatFromOptions(options) {
        var wfsOptions = options;
        var olFormatCls;
        var outputFormat = wfsOptions.paramsWFS.outputFormat
            ? wfsOptions.paramsWFS.outputFormat
            : undefined;
        if (!outputFormat) {
            olFormatCls = olformat__namespace.WFS;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        if (olformat__namespace[outputFormat]) {
            olFormatCls = olformat__namespace[outputFormat];
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('gml2')) {
            olFormatCls = olformat__namespace.WFS;
            return new olFormatCls(Object.assign(Object.assign({}, wfsOptions.formatOptions), { gmlFormat: olFormatGML2__default["default"] }));
        }
        else if (outputFormat.toLowerCase().match('gml32')) {
            olFormatCls = olformat__namespace.WFS;
            return new olFormatCls(Object.assign(Object.assign({}, wfsOptions.formatOptions), { gmlFormat: olFormatGML32__default["default"] }));
        }
        else if (outputFormat.toLowerCase().match('gml3')) {
            olFormatCls = olformat__namespace.WFS;
            return new olFormatCls(Object.assign(Object.assign({}, wfsOptions.formatOptions), { gmlFormat: olFormatGML3__default["default"] }));
        }
        else if (outputFormat.toLowerCase().match('topojson')) {
            olFormatCls = olformat__namespace.TopoJSON;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('geojson')) {
            olFormatCls = olformat__namespace.GeoJSON;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('esrijson')) {
            olFormatCls = olformat__namespace.EsriJSON;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('json')) {
            olFormatCls = olformat__namespace.GeoJSON;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('gpx')) {
            olFormatCls = olformat__namespace.GPX;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('WKT')) {
            olFormatCls = olformat__namespace.WKT;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('osmxml')) {
            olFormatCls = olFormatOSMXML__default["default"];
            return new olFormatCls(wfsOptions.formatOptions);
        }
        else if (outputFormat.toLowerCase().match('kml')) {
            olFormatCls = olformat__namespace.KML;
            return new olFormatCls(wfsOptions.formatOptions);
        }
        return new olFormatCls();
    }

    var WMSDataSource = /** @class */ (function (_super) {
        __extends(WMSDataSource, _super);
        function WMSDataSource(options, wfsService) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.wfsService = wfsService;
            _this.ogcFilters$ = new rxjs.BehaviorSubject(undefined);
            _this.timeFilter$ = new rxjs.BehaviorSubject(undefined);
            var sourceParams = options.params;
            var dpi = sourceParams.DPI || 96;
            sourceParams.DPI = dpi;
            sourceParams.MAP_RESOLUTION = dpi;
            sourceParams.FORMAT_OPTIONS = 'dpi:' + dpi;
            if (options.refreshIntervalSec && options.refreshIntervalSec > 0) {
                setInterval(function () {
                    _this.refresh();
                }, options.refreshIntervalSec * 1000); // Convert seconds to MS
            }
            var fieldNameGeometry = defaultFieldNameGeometry;
            // ####   START if paramsWFS
            if (options.paramsWFS) {
                var wfsCheckup = checkWfsParams(options, 'wms');
                utils.ObjectUtils.mergeDeep(options.paramsWFS, wfsCheckup.paramsWFS);
                fieldNameGeometry =
                    options.paramsWFS.fieldNameGeometry || fieldNameGeometry;
                options.download = Object.assign({}, options.download, {
                    dynamicUrl: _this.buildDynamicDownloadUrlFromParamsWFS(options)
                });
            } //  ####   END  if paramsWFS
            if (!options.sourceFields || options.sourceFields.length === 0) {
                options.sourceFields = [];
            }
            else {
                options.sourceFields.forEach(function (sourceField) {
                    sourceField.alias = sourceField.alias
                        ? sourceField.alias
                        : sourceField.name;
                    // to allow only a list of sourcefield with names
                });
            }
            var initOgcFilters = options
                .ogcFilters;
            var ogcFilterWriter = new OgcFilterWriter();
            if (!initOgcFilters) {
                options.ogcFilters = ogcFilterWriter.defineOgcFiltersDefaultOptions(initOgcFilters, fieldNameGeometry, 'wms');
            }
            else {
                initOgcFilters.advancedOgcFilters = (initOgcFilters.pushButtons || initOgcFilters.checkboxes
                    || initOgcFilters.radioButtons || initOgcFilters.select)
                    ? false
                    : true;
                if (initOgcFilters.advancedOgcFilters && initOgcFilters.filters) {
                    var filterDuring = initOgcFilters.filters;
                    if (filterDuring.calendarModeYear) {
                        initOgcFilters.advancedOgcFilters = false;
                    }
                }
                if (initOgcFilters.pushButtons) {
                    initOgcFilters.pushButtons.selectorType = 'pushButton';
                }
                if (initOgcFilters.checkboxes) {
                    initOgcFilters.checkboxes.selectorType = 'checkbox';
                }
                if (initOgcFilters.radioButtons) {
                    initOgcFilters.radioButtons.selectorType = 'radioButton';
                }
                if (initOgcFilters.select) {
                    initOgcFilters.select.selectorType = 'select';
                }
            }
            if (sourceParams.LAYERS.split(',').length > 1 &&
                initOgcFilters &&
                initOgcFilters.enabled) {
                console.log('*******************************');
                console.log('BE CAREFULL, YOUR WMS LAYERS (' +
                    sourceParams.LAYERS +
                    ') MUST SHARE THE SAME FIELDS TO ALLOW ogcFilters TO WORK !! ');
                console.log('*******************************');
            }
            if (options.paramsWFS &&
                initOgcFilters &&
                initOgcFilters.enabled &&
                initOgcFilters.editable &&
                (options.sourceFields || []).filter(function (sf) { return !sf.values; }).length > 0) {
                _this.wfsService.getSourceFieldsFromWFS(options);
            }
            var filterQueryString = ogcFilterWriter.handleOgcFiltersAppliedValue(options, fieldNameGeometry);
            sourceParams.FILTER = filterQueryString;
            _this.setOgcFilters(initOgcFilters, true);
            var timeFilterableDataSourceOptions = options;
            if ((timeFilterableDataSourceOptions === null || timeFilterableDataSourceOptions === void 0 ? void 0 : timeFilterableDataSourceOptions.timeFilterable) &&
                (timeFilterableDataSourceOptions === null || timeFilterableDataSourceOptions === void 0 ? void 0 : timeFilterableDataSourceOptions.timeFilter)) {
                _this.setTimeFilter(timeFilterableDataSourceOptions.timeFilter, true);
            }
            return _this;
        }
        Object.defineProperty(WMSDataSource.prototype, "params", {
            get: function () {
                return this.options.params;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WMSDataSource.prototype, "queryTitle", {
            get: function () {
                return this.options.queryTitle
                    ? this.options.queryTitle
                    : 'title';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WMSDataSource.prototype, "mapLabel", {
            get: function () {
                return this.options.mapLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WMSDataSource.prototype, "queryHtmlTarget", {
            get: function () {
                return this.options.queryHtmlTarget
                    ? this.options.queryHtmlTarget
                    : exports.QueryHtmlTarget.BLANK;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WMSDataSource.prototype, "ogcFilters", {
            get: function () {
                return this.options.ogcFilters;
            },
            set: function (value) {
                this.options.ogcFilters = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WMSDataSource.prototype, "timeFilter", {
            get: function () {
                return this.options.timeFilter;
            },
            set: function (value) {
                this.options.timeFilter = value;
            },
            enumerable: false,
            configurable: true
        });
        WMSDataSource.prototype.refresh = function () {
            this.ol.updateParams({ igoRefresh: Math.random() });
        };
        WMSDataSource.prototype.buildDynamicDownloadUrlFromParamsWFS = function (asWFSDataSourceOptions) {
            var queryStringValues = formatWFSQueryString(asWFSDataSourceOptions);
            var downloadUrl = queryStringValues.find(function (f) { return f.name === 'getfeature'; })
                .value;
            return downloadUrl;
        };
        WMSDataSource.prototype.createOlSource = function () {
            return new olSourceImageWMS__default["default"](Object.assign({ ratio: 1 }, this.options));
        };
        WMSDataSource.prototype.setOgcFilters = function (ogcFilters, triggerEvent) {
            if (triggerEvent === void 0) { triggerEvent = false; }
            this.ogcFilters = ogcFilters;
            if (triggerEvent) {
                this.ogcFilters$.next(this.ogcFilters);
            }
        };
        WMSDataSource.prototype.setTimeFilter = function (timeFilter, triggerEvent) {
            if (triggerEvent === void 0) { triggerEvent = false; }
            this.timeFilter = timeFilter;
            if (triggerEvent) {
                this.timeFilter$.next(this.timeFilter);
            }
        };
        WMSDataSource.prototype.getLegend = function (style, view) {
            var legend = _super.prototype.getLegend.call(this);
            if (legend.length > 0 && (style === undefined && !(view === null || view === void 0 ? void 0 : view.scale))) {
                return legend;
            }
            var contentDependent = false;
            var projParam;
            if ((view === null || view === void 0 ? void 0 : view.size) && (view === null || view === void 0 ? void 0 : view.extent) && (view === null || view === void 0 ? void 0 : view.projection) && this.options.contentDependentLegend) {
                projParam = this.params.VERSION === '1.3.0' || this.params.VERSION === undefined ? 'CRS' : 'SRS';
                contentDependent = true;
            }
            var sourceParams = this.params;
            var layers = [];
            if (sourceParams.LAYERS !== undefined) {
                layers = sourceParams.LAYERS.split(',');
            }
            var baseUrl = this.options.url.replace(/\?$/, '');
            var params = [
                'REQUEST=GetLegendGraphic',
                'SERVICE=WMS',
                'FORMAT=image/png',
                'SLD_VERSION=1.1.0',
                "VERSION=" + (sourceParams.VERSION || '1.3.0')
            ];
            if (style !== undefined) {
                params.push("STYLE=" + style);
            }
            if ((view === null || view === void 0 ? void 0 : view.scale) !== undefined) {
                params.push("SCALE=" + view.scale);
            }
            if (contentDependent) {
                params.push("WIDTH=" + view.size[0]);
                params.push("HEIGHT=" + view.size[1]);
                params.push("BBOX=" + view.extent.join(','));
                params.push(projParam + "=" + view.projection);
            }
            legend = layers.map(function (layer) {
                var separator = baseUrl.match(/\?/) ? '&' : '?';
                return {
                    url: "" + baseUrl + separator + params.join('&') + "&LAYER=" + layer,
                    title: layers.length > 1 ? layer : undefined,
                    currentStyle: style === undefined ? undefined : style
                };
            });
            return legend;
        };
        WMSDataSource.prototype.onUnwatch = function () { };
        return WMSDataSource;
    }(DataSource));

    var LayerSyncWatcher = /** @class */ (function (_super) {
        __extends(LayerSyncWatcher, _super);
        function LayerSyncWatcher(layer, map) {
            var _this = _super.call(this) || this;
            _this.ol = layer.ol;
            _this.layer = layer;
            _this.dataSource = layer.options.source;
            _this.map = map;
            _this.ogcFilterWriter = new OgcFilterWriter();
            return _this;
        }
        LayerSyncWatcher.prototype.watch = function () {
            var _this = this;
            this.ol.on('propertychange', function (evt) { return _this.transferCommonProperties(evt); });
            if (this.dataSource.ogcFilters$) {
                this.ogcFilters$$ = this.dataSource.ogcFilters$
                    .subscribe(function (ogcFilters) { return _this.transferOgcFiltersProperties(ogcFilters); });
            }
            if (this.dataSource.timeFilter$) {
                this.timeFilter$$ = this.dataSource.timeFilter$
                    .subscribe(function (timeFilter) { return _this.transferTimeFilterProperties(timeFilter); });
            }
            this.syncChildLayers();
        };
        LayerSyncWatcher.prototype.unwatch = function () {
            var _this = this;
            this.ol.un('propertychange', function (evt) { return _this.transferCommonProperties(evt); });
            if (this.ogcFilters$$) {
                this.ogcFilters$$.unsubscribe();
            }
            if (this.timeFilter$$) {
                this.timeFilter$$.unsubscribe();
            }
        };
        LayerSyncWatcher.prototype.syncChildLayers = function () {
            var _this = this;
            // Force the sync the child layers with parent on the first load.
            if (!this.map) {
                return;
            }
            this.map.status$
                .pipe(operators.first())
                .subscribe(function () {
                _this.map.layers
                    .filter(function (layer) { var _a; return (_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links; })
                    .map(function (layer) {
                    layer.options.linkedLayers.links.map(function (link) {
                        var _a, _b, _c, _d, _e, _f;
                        if (((_a = link.properties) === null || _a === void 0 ? void 0 : _a.indexOf(exports.LinkedProperties.VISIBLE)) !== -1) {
                            layer.ol.set('visible', !(layer.visible), false);
                            layer.ol.set('visible', !(layer.visible), false);
                            layer.visible = layer.visible;
                        }
                        if (((_b = link.properties) === null || _b === void 0 ? void 0 : _b.indexOf(exports.LinkedProperties.OPACITY)) !== -1) {
                            var baseOpacity = layer.ol.get('opacity');
                            layer.ol.set('opacity', 0, false);
                            layer.ol.set('opacity', baseOpacity, false);
                            layer.opacity = layer.opacity;
                        }
                        if (((_c = link.properties) === null || _c === void 0 ? void 0 : _c.indexOf(exports.LinkedProperties.MINRESOLUTION)) !== -1) {
                            var baseMinResolution = layer.ol.get('minResolution');
                            layer.ol.set('minResolution', 0, false);
                            layer.ol.set('minResolution', baseMinResolution, false);
                            layer.minResolution = layer.minResolution;
                        }
                        if (((_d = link.properties) === null || _d === void 0 ? void 0 : _d.indexOf(exports.LinkedProperties.MAXRESOLUTION)) !== -1) {
                            var baseMaxResolution = layer.ol.get('maxResolution');
                            layer.ol.set('maxResolution', 0, false);
                            layer.ol.set('maxResolution', baseMaxResolution, false);
                            layer.minResolution = layer.minResolution;
                        }
                        if (((_e = link.properties) === null || _e === void 0 ? void 0 : _e.indexOf(exports.LinkedProperties.OGCFILTERS)) !== -1) {
                            var ogcFilters$ = layer.dataSource.ogcFilters$;
                            ogcFilters$.next(ogcFilters$.value);
                        }
                        if (((_f = link.properties) === null || _f === void 0 ? void 0 : _f.indexOf(exports.LinkedProperties.TIMEFILTER)) !== -1) {
                            var timeFilter$ = layer.dataSource.timeFilter$;
                            timeFilter$.next(timeFilter$.value);
                        }
                    });
                });
            });
        };
        LayerSyncWatcher.prototype.transferCommonProperties = function (layerChange) {
            var _this = this;
            var key = layerChange.key;
            var layerChangeProperties = layerChange.target.getProperties();
            var newValue = layerChangeProperties[key];
            if (['visible', 'opacity', 'minResolution', 'maxResolution'].indexOf(key) === -1) {
                return;
            }
            var linkedLayers = layerChangeProperties.linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer) {
                // search for child layers
                var silent_1 = true;
                currentLinks.map(function (link) {
                    if (!link.properties || link.properties.indexOf(key) === -1) {
                        return;
                    }
                    link.linkedIds.map(function (linkedId) {
                        var layerToApply = _this.map.layers.find(function (layer) { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                        if (layerToApply) {
                            layerToApply.ol.set(key, newValue, silent_1);
                            if (key === 'visible') {
                                layerToApply.visible$.next(newValue);
                            }
                        }
                    });
                });
            }
            else {
                // search for parent layer
                var silent_2 = false;
                this.map.layers.map(function (layer) {
                    var _a;
                    if ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                        layer.options.linkedLayers.links.map(function (l) {
                            if (l.properties && l.properties.indexOf(key) !== -1 &&
                                l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                                layer.ol.set(key, newValue, silent_2);
                                if (key === 'visible') {
                                    layer.visible$.next(newValue);
                                }
                            }
                        });
                    }
                });
            }
        };
        LayerSyncWatcher.prototype.transferOgcFiltersProperties = function (ogcFilters) {
            var _this = this;
            var linkedLayers = this.ol.getProperties().linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer) {
                // search for child layers
                currentLinks.map(function (link) {
                    if (!link.properties || link.properties.indexOf(exports.LinkedProperties.OGCFILTERS) === -1) {
                        return;
                    }
                    link.linkedIds.map(function (linkedId) {
                        var layerToApply = _this.map.layers.find(function (layer) { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                        if (layerToApply) {
                            var layerType = layerToApply.ol.getProperties().sourceOptions.type;
                            layerToApply.dataSource.setOgcFilters(ogcFilters, false);
                            if (layerType === 'wfs') {
                                layerToApply.ol.getSource().refresh();
                            }
                            if (layerType === 'wms') {
                                var appliedOgcFilter = void 0;
                                if (_this.ol.getProperties().sourceOptions.type === 'wfs') {
                                    appliedOgcFilter = _this.ogcFilterWriter.handleOgcFiltersAppliedValue(_this.layer.dataSource.options, _this.dataSource.options.fieldNameGeometry, undefined, _this.map.viewController.getOlProjection());
                                }
                                else if (_this.ol.getProperties().sourceOptions.type === 'wms') {
                                    appliedOgcFilter = _this.dataSource.ol.getParams().FILTER;
                                }
                                layerToApply.dataSource.ol.updateParams({ FILTER: appliedOgcFilter });
                            }
                        }
                    });
                });
            }
            else {
                // search for parent layer
                this.map.layers.map(function (layer) {
                    var _a;
                    if ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                        layer.options.linkedLayers.links.map(function (l) {
                            if (l.properties && l.properties.indexOf(exports.LinkedProperties.OGCFILTERS) !== -1 &&
                                l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                                var layerType = layer.ol.getProperties().sourceOptions.type;
                                if (layerType === 'wfs') {
                                    layer.dataSource.setOgcFilters(ogcFilters, true);
                                    layer.ol.getSource().refresh();
                                }
                                if (layerType === 'wms') {
                                    var appliedOgcFilter = void 0;
                                    if (_this.ol.getProperties().sourceOptions.type === 'wfs') {
                                        appliedOgcFilter = _this.ogcFilterWriter.handleOgcFiltersAppliedValue(layer.dataSource.options, _this.dataSource.options.fieldNameGeometry, undefined, _this.map.viewController.getOlProjection());
                                    }
                                    else if (_this.ol.getProperties().sourceOptions.type === 'wms') {
                                        appliedOgcFilter = _this.dataSource.ol.getParams().FILTER;
                                    }
                                    layer.dataSource.ol.updateParams({ FILTER: appliedOgcFilter });
                                    layer.dataSource.setOgcFilters(ogcFilters, true);
                                }
                            }
                        });
                    }
                });
            }
        };
        LayerSyncWatcher.prototype.transferTimeFilterProperties = function (timeFilter) {
            var _this = this;
            var linkedLayers = this.ol.getProperties().linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer) {
                // search for child layers
                currentLinks.map(function (link) {
                    if (!link.properties || link.properties.indexOf(exports.LinkedProperties.TIMEFILTER) === -1) {
                        return;
                    }
                    link.linkedIds.map(function (linkedId) {
                        var childLayer = _this.map.layers.find(function (layer) {
                            var _a;
                            return layer.dataSource instanceof WMSDataSource &&
                                ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId;
                        });
                        if (childLayer) {
                            childLayer.dataSource.setTimeFilter(timeFilter, false);
                            var appliedTimeFilter = _this.ol.getSource().getParams().TIME;
                            childLayer.dataSource.ol.updateParams({ TIME: appliedTimeFilter });
                        }
                    });
                });
            }
            else {
                // search for parent layer
                this.map.layers
                    .filter(function (layer) { return layer.dataSource instanceof WMSDataSource; })
                    .map(function (parentLayer) {
                    var _a;
                    if ((_a = parentLayer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                        parentLayer.options.linkedLayers.links.map(function (l) {
                            if (l.properties && l.properties.indexOf(exports.LinkedProperties.TIMEFILTER) !== -1 &&
                                l.bidirectionnal !== false && l.linkedIds.indexOf(currentLinkedId) !== -1) {
                                var appliedTimeFilter = _this.ol.getSource().getParams().TIME;
                                parentLayer.dataSource.ol.updateParams({ TIME: appliedTimeFilter });
                                parentLayer.dataSource.setTimeFilter(timeFilter, true);
                            }
                        });
                    }
                });
            }
        };
        return LayerSyncWatcher;
    }(utils.Watcher));

    var TileWatcher = /** @class */ (function (_super) {
        __extends(TileWatcher, _super);
        function TileWatcher(layer) {
            var _this = _super.call(this) || this;
            _this.loaded = 0;
            _this.loading = 0;
            _this.source = layer.options.source.ol;
            _this.id = utils.uuid();
            return _this;
        }
        TileWatcher.prototype.watch = function () {
            var _this = this;
            this.source.on("tileloadstart", function (e) { return _this.handleLoadStart(e); });
            this.source.on("tileloadend", function (e) { return _this.handleLoadEnd(e); });
            this.source.on("tileloaderror", function (e) { return _this.handleLoadEnd(e); });
        };
        TileWatcher.prototype.unwatch = function () {
            var _this = this;
            this.source.un("tileloadstart", function (e) { return _this.handleLoadStart(e); });
            this.source.un("tileloadend", function (e) { return _this.handleLoadEnd(e); });
            this.source.un("tileloaderror", function (e) { return _this.handleLoadEnd(e); });
        };
        TileWatcher.prototype.handleLoadStart = function (event) {
            // This is to avoid increasing
            // the number of loaded tiles if a tile was loading
            // before subscribing to this watcher
            if (!event.tile.__watchers__) {
                event.tile.__watchers__ = [];
            }
            event.tile.__watchers__.push(this.id);
            this.loading += 1;
            this.status = utils.SubjectStatus.Working;
        };
        TileWatcher.prototype.handleLoadEnd = function (event) {
            if (!event.tile.__watchers__) {
                return;
            }
            var watcherIndex = event.tile.__watchers__.indexOf(this.id);
            if (watcherIndex < 0) {
                return;
            }
            event.tile.__watchers__.splice(watcherIndex, 1);
            this.loaded += 1;
            var loading = this.loading;
            if (this.loaded >= loading) {
                if (loading === this.loading) {
                    this.status = utils.SubjectStatus.Done;
                    this.loaded = this.loading = 0;
                }
            }
        };
        return TileWatcher;
    }(utils.Watcher));

    /**
     * Get all the layers legend
     * @return Array of legend
     */
    function getLayersLegends(layers, view) {
        var e_1, _a, e_2, _b;
        var legends = [];
        try {
            for (var layers_1 = __values(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
                var layer = layers_1_1.value;
                if (layer.visible === false) {
                    continue;
                }
                var legendUrls = layer.dataSource.getLegend(undefined, view) || [];
                try {
                    for (var legendUrls_1 = (e_2 = void 0, __values(legendUrls)), legendUrls_1_1 = legendUrls_1.next(); !legendUrls_1_1.done; legendUrls_1_1 = legendUrls_1.next()) {
                        var legendUrl = legendUrls_1_1.value;
                        if (legendUrl.url === undefined) {
                            continue;
                        }
                        // Add legend info to the list
                        legends.push({
                            title: layer.title,
                            url: legendUrl.url
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (legendUrls_1_1 && !legendUrls_1_1.done && (_b = legendUrls_1.return)) _b.call(legendUrls_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (layers_1_1 && !layers_1_1.done && (_a = layers_1.return)) _a.call(layers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return legends;
    }

    var FeatureDataSource = /** @class */ (function (_super) {
        __extends(FeatureDataSource, _super);
        function FeatureDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FeatureDataSource.prototype.createOlSource = function () {
            var sourceOptions = {
                format: this.getSourceFormatFromOptions(this.options)
            };
            return new OlVectorSource__default["default"](Object.assign(sourceOptions, this.options));
        };
        FeatureDataSource.prototype.getSourceFormatFromOptions = function (options) {
            if (options.format) {
                return options.format;
            }
            var olFormatCls;
            var formatType = options.formatType;
            if (!formatType) {
                olFormatCls = olformat__namespace.GeoJSON;
            }
            else {
                olFormatCls = olformat__namespace[formatType];
                if (olFormatCls === undefined) {
                    throw new Error('Invalid vector source format ${formatType}.');
                }
            }
            var formatOptions = options.formatOptions;
            var format;
            if (formatOptions) {
                format = new olFormatCls(formatOptions);
            }
            else {
                format = new olFormatCls();
            }
            return format;
        };
        FeatureDataSource.prototype.onUnwatch = function () { };
        Object.defineProperty(FeatureDataSource.prototype, "queryTitle", {
            get: function () {
                return this.options.queryTitle
                    ? this.options.queryTitle
                    : 'title';
            },
            enumerable: false,
            configurable: true
        });
        return FeatureDataSource;
    }(DataSource));

    var ClusterDataSource = /** @class */ (function (_super) {
        __extends(ClusterDataSource, _super);
        function ClusterDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ClusterDataSource.prototype.createOlSource = function () {
            this.options.format = this.getSourceFormatFromOptions(this.options);
            this.options.source = _super.prototype.createOlSource.call(this);
            return new olSourceCluster__default["default"](this.options);
        };
        ClusterDataSource.prototype.generateId = function () {
            return utils.uuid();
        };
        ClusterDataSource.prototype.onUnwatch = function () { };
        return ClusterDataSource;
    }(FeatureDataSource));

    var VectorWatcher = /** @class */ (function (_super) {
        __extends(VectorWatcher, _super);
        function VectorWatcher(layer) {
            var _this = _super.call(this) || this;
            _this.loaded = 0;
            _this.loading = 0;
            _this.layer = layer;
            _this.id = utils.uuid();
            return _this;
        }
        VectorWatcher.prototype.watch = function () {
            var _this = this;
            var olSource = this.layer.options.source.ol;
            if (this.layer.dataSource instanceof ClusterDataSource) {
                olSource = this.layer.options.source.options.source;
            }
            if (olSource.getUrl()) {
                olSource.on("featuresloadstart", function (e) { return _this.handleLoadStart(e); });
                olSource.on("featuresloadend", function (e) { return _this.handleLoadEnd(e); });
                olSource.on("featuresloaderror", function (e) { return _this.handleLoadEnd(e); });
            }
        };
        VectorWatcher.prototype.unwatch = function () {
            var _this = this;
            var olSource = this.layer.options.source.ol;
            if (this.layer.dataSource instanceof ClusterDataSource) {
                olSource = this.layer.options.source.options.source;
            }
            if (olSource.getUrl()) {
                olSource.un("featuresloadstart", function (e) { return _this.handleLoadStart(e); });
                olSource.un("featuresloadend", function (e) { return _this.handleLoadEnd(e); });
                olSource.un("featuresloaderror", function (e) { return _this.handleLoadEnd(e); });
            }
        };
        VectorWatcher.prototype.handleLoadStart = function (event) {
            this.loading += 1;
            this.status = utils.SubjectStatus.Working;
        };
        VectorWatcher.prototype.handleLoadEnd = function (event) {
            this.loaded += 1;
            var loading = this.loading;
            if (this.loaded >= loading) {
                if (loading === this.loading) {
                    this.status = utils.SubjectStatus.Done;
                    this.loaded = this.loading = 0;
                }
            }
        };
        return VectorWatcher;
    }(utils.Watcher));

    /**
     * This method extracts a coordinate tuple from a string.
     * @param str Any string
     * @param mapProjection string Map Projection
     * @param opts.forceNA boolean Force North America Zone
     * @returns object:
     *             lonLat: Coordinate,
     *             message: Message of error,
     *             radius: radius of the confience of coordinate,
     *             conf: confidence of the coordinate}
     */
    function stringToLonLat(str, mapProjection, opts) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (opts === void 0) { opts = {}; }
        var lonLat;
        var coordStr;
        var negativeLon;
        var degreesLon;
        var minutesLon;
        var secondsLon;
        var directionLon;
        var decimalLon;
        var negativeLat;
        var degreesLat;
        var minutesLat;
        var secondsLat;
        var directionLat;
        var decimalLat;
        var zone;
        var radius;
        var conf;
        var lon;
        var lat;
        var projectionPattern = '(\\s*;\\s*[\\d]{4,6})';
        var toProjection = '4326';
        var projectionStr;
        var projectionRegex = new RegExp(projectionPattern, 'g');
        var lonlatCoord = '([-+])?([\\d]{1,3})([,.](\\d+))?';
        var lonLatPattern = lonlatCoord + "[\\s,]+" + lonlatCoord;
        var lonLatRegex = new RegExp("^" + lonLatPattern + "$", 'g');
        var dmsCoord = '([0-9]{1,2})[:|°]?\\s*([0-9]{1,2})?[:|\'|′|’]?\\s*([0-9]{1,2}(?:.[0-9]+){0,1})?\\s*["|″|”]?\\s*';
        var dmsCoordPattern = dmsCoord + "([N|S|E|W|O]),?\\s*" + dmsCoord + "([N|S|E|W|O])";
        var dmsRegex = new RegExp("^" + dmsCoordPattern + "$", 'gi');
        var patternUtm = '(UTM)-?(\\d{1,2})[\\s,]*(\\d+[.,]?\\d+)[\\s,]+(\\d+[.,]?\\d+)';
        var utmRegex = new RegExp("^" + patternUtm, 'gi');
        var patternMtm = '(MTM)-?(\\d{1,2})[\\s,]*(\\d+[.,]?\\d+)[\\s,]+(\\d+[.,]?\\d+)';
        var mtmRegex = new RegExp("^" + patternMtm, 'gi');
        var ddCoord = '([-+])?(\\d{1,3})[,.](\\d+)';
        var patternDd = ddCoord + "\\s*[,]?\\s*" + ddCoord;
        var ddRegex = new RegExp("^" + patternDd, 'g');
        var dmdCoord = '([-+])?(\\d{1,3})[\\s,.]{1}(\\d{1,2})[\\s,.]{1}(\\d{1,2})[.,]?(\\d{1,5})?';
        var patternDmd = dmdCoord + "\\s*[,.]?\\s*" + dmdCoord;
        var dmdRegex = new RegExp("^" + patternDmd, 'g');
        /* eslint-disable max-len */
        var patternBELL = 'LAT\\s*[\\s:]*\\s*([-+])?(\\d{1,2})[\\s.,]?(\\d+)?[\\s.,]?\\s*(\\d{1,2}([.,]\\d+)?)?\\s*(N|S|E|W)?\\s*LONG\\s*[\\s:]*\\s*([-+])?(\\d{1,3})[\\s.,]?(\\d+)?[\\s.,]?\\s*(\\d{1,2}([.,]\\d+)?)?\\s*(N|S|E|W)?\\s*UNC\\s*[\\s:]?\\s*(\\d+)\\s*CONF\\s*[\\s:]?\\s*(\\d{1,3})';
        var bellRegex = new RegExp("^" + patternBELL + "?", 'gi');
        var mmCoord = '([-+]?\\d+)[,.]?(\\d+)?';
        var mmPattern = mmCoord + "[\\s,]+" + mmCoord;
        var mmRegex = new RegExp("^" + mmPattern + "$", 'g');
        var isXYCoords = false;
        str = str.toLocaleUpperCase().trim();
        // Extract projection
        if (projectionRegex.test(str)) {
            _a = __read(str.split(';').map(function (s) { return s.trim(); }), 2), coordStr = _a[0], projectionStr = _a[1];
        }
        else {
            coordStr = str;
        }
        if (lonLatRegex.test(coordStr)) {
            _b = __read(coordStr.match(lonLatPattern), 9), negativeLon = _b[1], lon = _b[2], decimalLon = _b[4], negativeLat = _b[5], lat = _b[6], decimalLat = _b[8];
            lon = parseFloat((negativeLon ? negativeLon : '') + lon + '.' + decimalLon);
            lat = parseFloat((negativeLat ? negativeLat : '') + lat + '.' + decimalLat);
        }
        else if (dmsRegex.test(coordStr)) {
            _c = __read(coordStr.match(dmsCoordPattern), 9), degreesLon = _c[1], minutesLon = _c[2], secondsLon = _c[3], directionLon = _c[4], degreesLat = _c[5], minutesLat = _c[6], secondsLat = _c[7], directionLat = _c[8];
            if (directionLon === 'S' || directionLon === 'N') {
                degreesLon = [degreesLat, (degreesLat = degreesLon)][0];
                minutesLon = [minutesLat, (minutesLat = minutesLon)][0];
                secondsLon = [secondsLat, (secondsLat = secondsLon)][0];
                directionLon = [directionLat, (directionLat = directionLon)][0];
            }
            lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);
            lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);
        }
        else if (utmRegex.test(coordStr)) {
            isXYCoords = true;
            _d = __read(coordStr.match(patternUtm), 5), zone = _d[2], lon = _d[3], lat = _d[4];
            var epsgUtm = Number(zone) < 10 ? "EPSG:3260" + zone : "EPSG:326" + zone;
            _e = __read(olproj__namespace.transform([parseFloat(lon), parseFloat(lat)], epsgUtm, 'EPSG:4326'), 2), lon = _e[0], lat = _e[1];
        }
        else if (mtmRegex.test(coordStr)) {
            isXYCoords = true;
            _f = __read(coordStr.match(patternMtm), 5), zone = _f[2], lon = _f[3], lat = _f[4];
            var epsgMtm = Number(zone) < 10 ? "EPSG:3218" + zone : "EPSG:321" + (80 + Number(zone));
            _g = __read(olproj__namespace.transform([parseFloat(lon), parseFloat(lat)], epsgMtm, 'EPSG:4326'), 2), lon = _g[0], lat = _g[1];
        }
        else if (dmdRegex.test(coordStr)) {
            _h = __read(coordStr.match(patternDmd), 11), negativeLon = _h[1], degreesLon = _h[2], minutesLon = _h[3], secondsLon = _h[4], decimalLon = _h[5], negativeLat = _h[6], degreesLat = _h[7], minutesLat = _h[8], secondsLat = _h[9], decimalLat = _h[10];
            lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);
            lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);
        }
        else if (ddRegex.test(coordStr)) {
            _j = __read(coordStr.match(patternDd), 7), negativeLon = _j[1], degreesLon = _j[2], decimalLon = _j[3], negativeLat = _j[4], degreesLat = _j[5], decimalLat = _j[6];
            lon = convertDMSToDD(parseFloat((negativeLon ? negativeLon : '') + degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);
            lat = convertDMSToDD(parseFloat((negativeLat ? negativeLat : '') + degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);
        }
        else if (bellRegex.test(coordStr)) {
            _k = __read(coordStr.match(patternBELL), 15), negativeLat = _k[1], degreesLat = _k[2], minutesLat = _k[3], secondsLat = _k[4], directionLat = _k[6], negativeLon = _k[7], degreesLon = _k[8], minutesLon = _k[9], secondsLon = _k[10], directionLon = _k[12], radius = _k[13], conf = _k[14];
            // Set default value for North America
            if (!directionLon) {
                directionLon = 'W';
            }
            // Check if real minutes or decimals
            if (minutesLon && minutesLon.length > 2) {
                lon = parseFloat((negativeLon ? negativeLon : '') + degreesLon + '.' + minutesLon);
            }
            else {
                lon = convertDMSToDD(parseFloat(degreesLon), parseFloat(minutesLon), parseFloat(secondsLon), directionLon);
            }
            if (minutesLat && minutesLat.length > 2) {
                lat = parseFloat((negativeLat ? negativeLat : '') + degreesLat + '.' + minutesLat);
            }
            else {
                lat = convertDMSToDD(parseFloat(degreesLat), parseFloat(minutesLat), parseFloat(secondsLat), directionLat);
            }
        }
        else if (mmRegex.test(coordStr)) {
            isXYCoords = true;
            _l = __read(coordStr.match(mmPattern), 5), lon = _l[1], decimalLon = _l[2], lat = _l[3], decimalLat = _l[4];
            if (decimalLon) {
                lon = parseFloat(lon + '.' + decimalLon);
            }
            if (decimalLat) {
                lat = parseFloat(lat + '.' + decimalLat);
            }
        }
        else {
            return {
                lonLat: undefined,
                message: '',
                radius: undefined,
                conf: undefined
            };
        }
        if (opts.forceNA && !isXYCoords) {
            // Set a negative coordinate for North America zone
            if (lon > 0 && lat > 0) {
                if (lon > lat) {
                    lon = -lon;
                }
                else {
                    lat = -lat;
                }
            }
            // Reverse coordinate to respect lonLat convention
            if (lon > lat) {
                lon = [lat, (lat = lon)][0];
            }
        }
        lonLat = [Number(lon), Number(lat)];
        // Reproject the coordinate if projection parameter have been set and coord is not 4326
        if ((projectionStr !== undefined && projectionStr !== toProjection) ||
            (lonLat[0] > 180 || lonLat[0] < -180) ||
            (lonLat[1] > 90 || lonLat[1] < -90)) {
            var source = projectionStr ? 'EPSG:' + projectionStr : mapProjection;
            var dest = 'EPSG:' + toProjection;
            try {
                lonLat = olproj__namespace.transform(lonLat, source, dest);
            }
            catch (e) {
                return {
                    lonLat: undefined,
                    message: 'Projection ' + source + ' not supported',
                    radius: undefined,
                    conf: undefined
                };
            }
        }
        if (Math.abs(lonLat[0]) <= 180 && Math.abs(lonLat[1]) <= 90) {
            return {
                lonLat: lonLat,
                message: '',
                radius: radius ? parseInt(radius, 10) : undefined,
                conf: conf ? parseInt(conf, 10) : undefined
            };
        }
        else {
            return {
                lonLat: undefined,
                message: 'Coordinate out of Longitude/Latitude bounds',
                radius: undefined,
                conf: undefined
            };
        }
    }
    /**
     * Convert degrees minutes seconds to dd
     * @param degrees Degrees
     * @param minutes Minutes
     * @param seconds Seconds
     * @param direction Direction
     */
    function convertDMSToDD(degrees, minutes, seconds, direction) {
        minutes = minutes || 0;
        seconds = seconds || 0;
        var neg = degrees < 0;
        var dd = Math.abs(degrees) + minutes / 60 + seconds / 3600;
        if (neg || direction === 'S' || direction === 'W') {
            dd = -dd;
        } // Don't do anything for N or E
        return dd;
    }
    /**
     * Convert dd to degrees minutes seconds
     * @param lonLatDD longitude and latitude in dd
     * @param decimal number of decimals for seconds
     * @returns longitude and latitude in dms
     */
    function convertDDToDMS(lonLatDD, decimal) {
        if (decimal === void 0) { decimal = 3; }
        var lonLatDMS = [];
        lonLatDD.forEach(function (dd) {
            var degrees = dd < 0 ? Math.ceil(dd) : Math.floor(dd);
            var int = dd < 0 ? (degrees - dd) * 60 : (dd - degrees) * 60;
            var minutes = Math.floor(int);
            var seconds = ((int - minutes) * 60).toFixed(decimal);
            lonLatDMS.push(degrees + "\u00B0 " + minutes + "' " + seconds + "\"");
        });
        return lonLatDMS;
    }
    /**
     * Return true of two view states are equal.
     * @param state1 View state
     * @param state2 View state
     * @returns True if the view states are equal
     */
    function viewStatesAreEqual(state1, state2) {
        if (state1 === undefined || state2 === undefined) {
            return false;
        }
        var tolerance = 1 / 10000;
        return (state1.zoom === state2.zoom &&
            Math.trunc(state1.center[0] / tolerance) ===
                Math.trunc(state2.center[0] / tolerance) &&
            Math.trunc(state1.center[1] / tolerance) ===
                Math.trunc(state2.center[1] / tolerance));
    }
    /**
     * Format the scale to a human readable text
     * @param Scale of the map
     * @returns Human readable scale text
     */
    function formatScale(scale) {
        scale = Math.round(scale);
        if (scale < 10000) {
            return scale + '';
        }
        scale = Math.round(scale / 1000);
        if (scale < 1000) {
            return scale + 'K';
        }
        scale = Math.round(scale / 1000);
        return scale + 'M';
    }
    /**
     * Return the resolution from a scale denom
     * @param scale Scale denom
     * @param dpi DPI
     * @returns Resolution
     */
    function getResolutionFromScale(scale, dpi) {
        if (dpi === void 0) { dpi = 96; }
        var inchesPerMeter = 39.3701;
        return scale / (inchesPerMeter * dpi);
    }
    /**
     * Return the resolution from a scale denom
     * @param Scale denom
     * @returns Resolution
     */
    function getScaleFromResolution(resolution, unit, dpi) {
        if (unit === void 0) { unit = 'm'; }
        if (dpi === void 0) { dpi = 96; }
        var inchesPerMeter = 39.3701;
        return resolution * olproj__namespace.METERS_PER_UNIT[unit] * inchesPerMeter * dpi;
    }
    /**
     * Returns true if the CTRL key is pushed during an Ol MapBrowserPointerEvent
     * @param event OL MapBrowserPointerEvent
     * @returns Whether the CTRL key is pushed
     */
    function ctrlKeyDown(event) {
        var originalEvent = event.originalEvent;
        return (!originalEvent.altKey &&
            (has.MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    }
    function roundCoordTo(coord, decimal) {
        if (decimal === void 0) { decimal = 3; }
        return [
            utils.NumberUtils.roundToNDecimal(coord[0], decimal),
            utils.NumberUtils.roundToNDecimal(coord[1], decimal)
        ];
    }
    /**
     * Returns an array of converted coordinates.
     * Conversion is done for every configured projections
     * and for the current UTM zone and MTM zone.
     * @param lonLat [number, number] array of the coordinate to transform.
     * @param projections  Projection[] Array of destination projection.
     * @returns Returns an array of converted coordinates.
     */
    function lonLatConversion(lonLat, projections) {
        var rawCoord3857 = olproj__namespace.transform(lonLat, 'EPSG:4326', 'EPSG:3857');
        var convertedLonLat = [
            {
                code: 'EPSG:3857',
                alias: 'Web Mercator',
                coord: rawCoord3857,
                igo2CoordFormat: roundCoordTo(rawCoord3857).join(', ') + " ; 3857"
            }
        ];
        // detect the current utm zone.
        var utmZone = utmZoneFromLonLat(lonLat);
        var epsgUtm = utmZone < 10 ? "EPSG:3260" + utmZone : "EPSG:326" + utmZone;
        var utmName = "UTM-" + utmZone;
        var rawCoordUtm = olproj__namespace.transform(lonLat, 'EPSG:4326', epsgUtm);
        convertedLonLat.push({
            code: epsgUtm,
            alias: 'UTM',
            coord: rawCoordUtm,
            igo2CoordFormat: utmName + " " + roundCoordTo(rawCoordUtm).join(', ')
        });
        // detect the current mtm zone.
        var mtmZone = mtmZoneFromLonLat(lonLat);
        if (mtmZone) {
            var epsgMtm = mtmZone < 10 ? "EPSG:3218" + mtmZone : "EPSG:321" + (80 + mtmZone);
            var mtmName = "MTM-" + mtmZone;
            var rawCoordMtm = olproj__namespace.transform(lonLat, 'EPSG:4326', epsgMtm);
            convertedLonLat.push({
                code: epsgMtm,
                alias: 'MTM',
                coord: rawCoordMtm,
                igo2CoordFormat: mtmName + " " + roundCoordTo(rawCoordMtm).join(', ')
            });
        }
        projections.forEach(function (projection) {
            var rawCoord = olproj__namespace.transform(lonLat, 'EPSG:4326', projection.code);
            var numericEpsgCode = projection.code.split(':')[1];
            convertedLonLat.push({
                code: projection.code,
                alias: projection.alias || projection.code,
                coord: rawCoord,
                igo2CoordFormat: roundCoordTo(rawCoord).join(', ') + " ; " + numericEpsgCode
            });
        });
        return convertedLonLat;
    }
    /**
     * Detect the current utm zone of the lon/lat coordinate.
     * @param lonLat [number, number] array of the coordinate to detect the UTM zone.
     * @returns number The UTM zone.
     */
    function utmZoneFromLonLat(lonLat) {
        return Math.ceil((lonLat[0] + 180) / 6);
    }
    /**
     * Detect the current mtm zone of the lon/lat coordinate.
     * @param lonLat [number, number] array of the coordinate to detect the MTM zone.
     * @returns number The MTM zone. Undefined if outside of the mtm application zone.
     */
    function mtmZoneFromLonLat(lonLat) {
        var long = lonLat[0];
        var mtmZone;
        if (long < -51 && long > -54) {
            mtmZone = 1;
        }
        if (long < -54 && long > -57) {
            mtmZone = 2;
        }
        if (long < -57 && long > -60) {
            mtmZone = 3;
        }
        if (long < -60 && long > -63) {
            mtmZone = 4;
        }
        if (long < -63 && long > -66) {
            mtmZone = 5;
        }
        if (long < -66 && long > -69) {
            mtmZone = 6;
        }
        if (long < -69 && long > -72) {
            mtmZone = 7;
        }
        if (long < -72 && long > -75) {
            mtmZone = 8;
        }
        if (long < -75 && long > -78) {
            mtmZone = 9;
        }
        if (long < -78 && long > -81) {
            mtmZone = 10;
        }
        return mtmZone;
    }

    var Layer = /** @class */ (function () {
        function Layer(options, messageService, authInterceptor) {
            this.options = options;
            this.messageService = messageService;
            this.authInterceptor = authInterceptor;
            this.legendCollapsed = true;
            this.firstLoadComponent = true;
            this.olLoadingProblem = false;
            this.hasBeenVisible$ = new rxjs.BehaviorSubject(undefined);
            this.isInResolutionsRange$ = new rxjs.BehaviorSubject(false);
            this.visible$ = new rxjs.BehaviorSubject(undefined);
            this.displayed$ = rxjs.combineLatest([
                this.isInResolutionsRange$,
                this.visible$
            ]).pipe(operators.map(function (bunch) { return bunch[0] && bunch[1]; }));
            this.dataSource = options.source;
            this.ol = this.createOlLayer();
            if (options.zIndex !== undefined) {
                this.zIndex = options.zIndex;
            }
            if (options.baseLayer && options.visible === undefined) {
                options.visible = false;
            }
            this.maxResolution = options.maxResolution || getResolutionFromScale(Number(options.maxScaleDenom));
            this.minResolution = options.minResolution || getResolutionFromScale(Number(options.minScaleDenom));
            this.visible = options.visible === undefined ? true : options.visible;
            this.opacity = options.opacity === undefined ? 1 : options.opacity;
            if (options.legendOptions &&
                (options.legendOptions.url || options.legendOptions.html)) {
                this.legend = this.dataSource.setLegend(options.legendOptions);
            }
            this.legendCollapsed = options.legendOptions
                ? options.legendOptions.collapsed
                    ? options.legendOptions.collapsed
                    : true
                : true;
            this.ol.set('_layer', this, true);
        }
        Object.defineProperty(Layer.prototype, "isIgoInternalLayer", {
            /**
             * Define if a layer is generated by code OR defined by layer/context user layer.
             * Useful for filtering layers list in mapOffline.directive or in the sharemap...
             * return false by default.
             */
            get: function () {
                return this.options.isIgoInternalLayer || false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "id", {
            get: function () {
                return this.options.id || this.dataSource.id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "alias", {
            get: function () {
                return this.options.alias;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "title", {
            get: function () {
                return this.options.title;
            },
            set: function (title) {
                this.options.title = title;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "zIndex", {
            get: function () {
                return this.ol.getZIndex();
            },
            set: function (zIndex) {
                this.ol.setZIndex(zIndex);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "baseLayer", {
            get: function () {
                return this.options.baseLayer;
            },
            set: function (baseLayer) {
                this.options.baseLayer = baseLayer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "opacity", {
            get: function () {
                return this.ol.get('opacity');
            },
            set: function (opacity) {
                this.ol.setOpacity(opacity);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "isInResolutionsRange", {
            get: function () {
                return this.isInResolutionsRange$.value;
            },
            set: function (value) {
                this.isInResolutionsRange$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "maxResolution", {
            get: function () {
                return this.ol.getMaxResolution();
            },
            set: function (value) {
                this.ol.setMaxResolution(value || Infinity);
                this.updateInResolutionsRange();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "minResolution", {
            get: function () {
                return this.ol.getMinResolution();
            },
            set: function (value) {
                this.ol.setMinResolution(value || 0);
                this.updateInResolutionsRange();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "visible", {
            get: function () {
                return this.visible$.value;
            },
            set: function (value) {
                var _this = this;
                var _a, _b;
                this.ol.setVisible(value);
                this.visible$.next(value);
                if (!this.hasBeenVisible$.value && value) {
                    this.hasBeenVisible$.next(value);
                }
                if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.messages) && value) {
                    (_b = this.options) === null || _b === void 0 ? void 0 : _b.messages.filter(function (m) { var _a; return (_a = m.options) === null || _a === void 0 ? void 0 : _a.showOnEachLayerVisibility; }).map(function (message) { return _this.showMessage(message); });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "displayed", {
            get: function () {
                return this.visible && this.isInResolutionsRange;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Layer.prototype, "showInLayerList", {
            get: function () {
                return this.options.showInLayerList !== false;
            },
            enumerable: false,
            configurable: true
        });
        Layer.prototype.setMap = function (igoMap) {
            var _this = this;
            this.map = igoMap;
            this.unobserveResolution();
            if (igoMap !== undefined) {
                this.observeResolution();
                this.layerSyncWatcher = new LayerSyncWatcher(this, this.map);
                this.layerSyncWatcher.subscribe(function () { });
                this.hasBeenVisible$$ = this.hasBeenVisible$.subscribe(function () {
                    if (_this.options.messages && _this.visible) {
                        _this.options.messages.map(function (message) {
                            _this.showMessage(message);
                        });
                    }
                });
            }
            else {
                this.layerSyncWatcher.unsubscribe();
            }
        };
        Layer.prototype.showMessage = function (message) {
            if (!this.messageService) {
                return;
            }
            message.title = message.title;
            message.text = message.text;
            this.messageService.message(message);
        };
        Layer.prototype.observeResolution = function () {
            var _this = this;
            this.resolution$$ = this.map.viewController.resolution$.subscribe(function () { return _this.updateInResolutionsRange(); });
        };
        Layer.prototype.unobserveResolution = function () {
            if (this.resolution$$ !== undefined) {
                this.resolution$$.unsubscribe();
                this.resolution$$ = undefined;
            }
        };
        Layer.prototype.updateInResolutionsRange = function () {
            if (this.map !== undefined) {
                var resolution = this.map.viewController.getResolution();
                var minResolution = this.minResolution;
                var maxResolution = this.maxResolution === undefined ? Infinity : this.maxResolution;
                this.isInResolutionsRange = resolution >= minResolution && resolution <= maxResolution;
            }
            else {
                this.isInResolutionsRange = false;
            }
        };
        return Layer;
    }());

    var VectorLayer = /** @class */ (function (_super) {
        __extends(VectorLayer, _super);
        function VectorLayer(options, messageService, authInterceptor) {
            var _this = _super.call(this, options, messageService, authInterceptor) || this;
            _this.messageService = messageService;
            _this.authInterceptor = authInterceptor;
            _this.watcher = new VectorWatcher(_this);
            _this.status$ = _this.watcher.status$;
            return _this;
        }
        Object.defineProperty(VectorLayer.prototype, "browsable", {
            get: function () {
                return this.options.browsable !== false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VectorLayer.prototype, "exportable", {
            get: function () {
                return this.options.exportable !== false;
            },
            enumerable: false,
            configurable: true
        });
        VectorLayer.prototype.createOlLayer = function () {
            var _this = this;
            var olOptions = Object.assign({}, this.options, {
                source: this.options.source.ol
            });
            if (this.options.animation) {
                this.dataSource.ol.on('addfeature', function (e) {
                    this.flash(e.feature);
                }.bind(this));
            }
            if (this.options.trackFeature) {
                this.enableTrackFeature(this.options.trackFeature);
            }
            var vector = new OlVectorLayer__default["default"](olOptions);
            var vectorSource = vector.getSource();
            var url = vectorSource.getUrl();
            if (url) {
                var loader = void 0;
                var wfsOptions_1 = olOptions.sourceOptions;
                if ((wfsOptions_1 === null || wfsOptions_1 === void 0 ? void 0 : wfsOptions_1.type) === 'wfs' && (wfsOptions_1.params || wfsOptions_1.paramsWFS)) {
                    loader = function (extent, resolution, proj, success, failure) {
                        _this.customWFSLoader(vectorSource, wfsOptions_1, _this.authInterceptor, extent, resolution, proj, success, failure);
                    };
                }
                else {
                    loader = function (extent, resolution, proj, success, failure) {
                        _this.customLoader(vectorSource, url, _this.authInterceptor, extent, resolution, proj, success, failure);
                    };
                }
                if (loader) {
                    vectorSource.setLoader(loader);
                }
            }
            return vector;
        };
        VectorLayer.prototype.flash = function (feature) {
            var start = new Date().getTime();
            var listenerKey = this.ol.on('postrender', animate.bind(this));
            function animate(event) {
                var vectorContext = render.getVectorContext(event);
                var frameState = event.frameState;
                var flashGeom = feature.getGeometry().clone();
                var elapsed = frameState.time - start;
                var elapsedRatio = elapsed / this.options.animation.duration;
                var opacity = oleasing.easeOut(1 - elapsedRatio);
                var newColor = color.asArray(this.options.animation.color || 'red');
                newColor[3] = opacity;
                var style = this.ol
                    .getStyleFunction()
                    .call(this, feature)
                    .find(function (style2) {
                    return style2.getImage();
                });
                if (!style) {
                    style = this.ol.getStyleFunction().call(this, feature)[0];
                }
                var styleClone = style.clone();
                switch (feature.getGeometry().getType()) {
                    case 'Point':
                        var radius = oleasing.easeOut(elapsedRatio) * (styleClone.getImage().getRadius() * 3);
                        styleClone.getImage().setRadius(radius);
                        styleClone.getImage().setOpacity(opacity);
                        break;
                    case 'LineString':
                        // TODO
                        if (styleClone.getImage()) {
                            styleClone.getImage().getStroke().setColor(newColor);
                            styleClone
                                .getImage()
                                .getStroke()
                                .setWidth(oleasing.easeOut(elapsedRatio) *
                                (styleClone.getImage().getStroke().getWidth() * 3));
                        }
                        if (styleClone.getStroke()) {
                            styleClone.getStroke().setColor(newColor);
                            styleClone
                                .getStroke()
                                .setWidth(oleasing.easeOut(elapsedRatio) * (styleClone.getStroke().getWidth() * 3));
                        }
                        break;
                    case 'Polygon':
                        // TODO
                        if (styleClone.getImage()) {
                            styleClone.getImage().getFill().setColor(newColor);
                        }
                        if (styleClone.getFill()) {
                            styleClone.getFill().setColor(newColor);
                        }
                        break;
                }
                styleClone.setText('');
                vectorContext.setStyle(styleClone);
                vectorContext.drawGeometry(flashGeom);
                if (elapsed > this.options.animation.duration) {
                    olObservable.unByKey(listenerKey);
                    // remove last geometry
                    // there is a little flash before feature disappear, better solution ?
                    this.map.ol.render();
                    return;
                }
                // tell OpenLayers to continue postcompose animation
                this.map.ol.render();
            }
        };
        VectorLayer.prototype.setMap = function (map) {
            if (map === undefined) {
                this.watcher.unsubscribe();
            }
            else {
                this.watcher.subscribe(function () { });
            }
            _super.prototype.setMap.call(this, map);
        };
        VectorLayer.prototype.onUnwatch = function () {
            this.dataSource.onUnwatch();
            this.stopAnimation();
        };
        VectorLayer.prototype.stopAnimation = function () {
            this.dataSource.ol.un('addfeature', function (e) {
                if (this.visible) {
                    this.flash(e.feature);
                }
            }.bind(this));
        };
        VectorLayer.prototype.enableTrackFeature = function (id) {
            this.trackFeatureListenerId = this.dataSource.ol.on('addfeature', this.trackFeature.bind(this, id));
        };
        VectorLayer.prototype.centerMapOnFeature = function (id) {
            var feat = this.dataSource.ol.getFeatureById(id);
            if (feat) {
                this.map.ol.getView().setCenter(feat.getGeometry().getCoordinates());
            }
        };
        VectorLayer.prototype.trackFeature = function (id, feat) {
            if (feat.feature.getId() === id && this.visible) {
                this.centerMapOnFeature(id);
            }
        };
        VectorLayer.prototype.disableTrackFeature = function (id) {
            olObservable.unByKey(this.trackFeatureListenerId);
        };
        /**
         * Custom loader for a WFS datasource
         * @internal
         * @param vectorSource the vector source to be created
         * @param options olOptions from source
         * @param interceptor the interceptor of the data
         * @param extent the extent of the requested data
         * @param resolution the current resolution
         * @param proj the projection to retrieve the data
         * @param success success callback
         * @param failure failure callback
         * @param randomParam random parameter to ensure cache is not causing problems in retrieving new data
         */
        VectorLayer.prototype.customWFSLoader = function (vectorSource, options, interceptor, extent, resolution, proj, success, failure, randomParam) {
            {
                var paramsWFS = options.paramsWFS;
                var wfsProj = paramsWFS.srsName ? new olProjection__default["default"]({ code: paramsWFS.srsName }) : proj;
                var currentExtent = olproj__namespace.transformExtent(extent, proj, wfsProj);
                paramsWFS.srsName = paramsWFS.srsName || proj.getCode();
                var url = buildUrl(options, currentExtent, wfsProj, options.ogcFilters, randomParam);
                var startIndex = 0;
                if (paramsWFS.version === '2.0.0' && paramsWFS.maxFeatures > defaultMaxFeatures) {
                    var nbOfFeature = 1000;
                    while (startIndex < paramsWFS.maxFeatures) {
                        var alteredUrl = url.replace('count=' + paramsWFS.maxFeatures, 'count=' + nbOfFeature);
                        alteredUrl = alteredUrl.replace('startIndex=0', '0');
                        alteredUrl += '&startIndex=' + startIndex;
                        alteredUrl.replace(/&&/g, '&');
                        this.getFeatures(vectorSource, interceptor, currentExtent, wfsProj, proj, alteredUrl, nbOfFeature, success, failure);
                        startIndex += nbOfFeature;
                    }
                }
                else {
                    this.getFeatures(vectorSource, interceptor, currentExtent, wfsProj, proj, url, paramsWFS.maxFeatures, success, failure);
                }
            }
        };
        /**
         * Custom loader to get feature from a WFS datasource
         * @internal
         * @param vectorSource the vector source to be created
         * @param interceptor the interceptor of the data
         * @param extent the extent of the requested data
         * @param dataProjection the projection of the retrieved data
         * @param featureProjection the projection of the created features
         * @param url the url string to retrieve the data
         * @param threshold the threshold to manage "more features" (TODO)
         * @param success success callback
         * @param failure failure callback
         */
        VectorLayer.prototype.getFeatures = function (vectorSource, interceptor, extent, dataProjection, featureProjection, url, threshold, success, failure) {
            var _this = this;
            var idAssociatedCall = this.dataSource.mostRecentIdCallOGCFilter;
            var xhr = new XMLHttpRequest();
            var alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(url);
            var modifiedUrl = url;
            if (alteredUrlWithKeyAuth) {
                modifiedUrl = alteredUrlWithKeyAuth;
            }
            xhr.open('GET', modifiedUrl);
            if (interceptor) {
                interceptor.interceptXhr(xhr, modifiedUrl);
            }
            var onError = function () {
                vectorSource.removeLoadedExtent(extent);
                failure();
            };
            xhr.onerror = onError;
            xhr.onload = function () {
                if (xhr.status === 200 && xhr.responseText.length > 0) {
                    var features = vectorSource
                        .getFormat()
                        .readFeatures(xhr.responseText, { dataProjection: dataProjection, featureProjection: featureProjection });
                    // TODO Manage "More feature"
                    /*if (features.length === 0 || features.length < threshold ) {
                      console.log('No more data to download at this resolution');
                    }*/
                    // Avoids retrieving an older call that took longer to be process
                    if (idAssociatedCall === _this.dataSource.mostRecentIdCallOGCFilter) {
                        vectorSource.addFeatures(features);
                        success(features);
                    }
                    else {
                        success([]);
                    }
                }
                else {
                    onError();
                }
            };
            xhr.send();
        };
        /**
         * Custom loader for vector layer.
         * @internal
         * @param vectorSource the vector source to be created
         * @param url the url string or function to retrieve the data
         * @param interceptor the interceptor of the data
         * @param extent the extent of the requested data
         * @param resolution the current resolution
         * @param projection the projection to retrieve the data
         */
        VectorLayer.prototype.customLoader = function (vectorSource, url, interceptor, extent, resolution, projection, success, failure) {
            var xhr = new XMLHttpRequest();
            var modifiedUrl = url;
            if (typeof url !== 'function') {
                var alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(url);
                if (alteredUrlWithKeyAuth) {
                    modifiedUrl = alteredUrlWithKeyAuth;
                }
            }
            else {
                modifiedUrl = url(extent, resolution, projection);
            }
            xhr.open('GET', modifiedUrl);
            var format = vectorSource.getFormat();
            if (format.getType() === FormatType__default["default"].ARRAY_BUFFER) {
                xhr.responseType = 'arraybuffer';
            }
            if (interceptor) {
                interceptor.interceptXhr(xhr, modifiedUrl);
            }
            var onError = function () {
                vectorSource.removeLoadedExtent(extent);
                failure();
            };
            xhr.onerror = onError;
            xhr.onload = function () {
                // status will be 0 for file:// urls
                if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {
                    var type = format.getType();
                    var source = void 0;
                    if (type === FormatType__default["default"].JSON || type === FormatType__default["default"].TEXT) {
                        source = xhr.responseText;
                    }
                    else if (type === FormatType__default["default"].XML) {
                        source = xhr.responseXML;
                        if (!source) {
                            source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
                        }
                    }
                    else if (type === FormatType__default["default"].ARRAY_BUFFER) {
                        source = xhr.response;
                    }
                    if (source) {
                        var features = format.readFeatures(source, { extent: extent, featureProjection: projection });
                        vectorSource.addFeatures(features, format.readProjection(source));
                        success(features);
                    }
                    else {
                        onError();
                    }
                }
                else {
                    onError();
                }
            };
            xhr.send();
        };
        return VectorLayer;
    }(Layer));

    var DataService = /** @class */ (function () {
        function DataService() {
        }
        return DataService;
    }());

    var OSMDataSource = /** @class */ (function (_super) {
        __extends(OSMDataSource, _super);
        function OSMDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OSMDataSource.prototype.createOlSource = function () {
            if (!this.options.url) {
                this.options.url = 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';
            }
            return new olSourceOSM__default["default"](this.options);
        };
        OSMDataSource.prototype.onUnwatch = function () { };
        return OSMDataSource;
    }(DataSource));

    var XYZDataSource = /** @class */ (function (_super) {
        __extends(XYZDataSource, _super);
        function XYZDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        XYZDataSource.prototype.createOlSource = function () {
            return new olSourceXYZ__default["default"](this.options);
        };
        XYZDataSource.prototype.onUnwatch = function () { };
        return XYZDataSource;
    }(DataSource));

    var WFSDataSource = /** @class */ (function (_super) {
        __extends(WFSDataSource, _super);
        function WFSDataSource(options, wfsService, authInterceptor) {
            var _this = _super.call(this, checkWfsParams(options, 'wfs')) || this;
            _this.options = options;
            _this.wfsService = wfsService;
            _this.authInterceptor = authInterceptor;
            _this.mostRecentIdCallOGCFilter = 0;
            _this.ogcFilters$ = new rxjs.BehaviorSubject(undefined);
            var ogcFilters = _this.options.ogcFilters;
            var fieldNameGeometry = _this.options.paramsWFS.fieldNameGeometry || defaultFieldNameGeometry;
            var ogcFilterWriter = new OgcFilterWriter();
            _this.options.ogcFilters =
                ogcFilterWriter.defineOgcFiltersDefaultOptions(ogcFilters, fieldNameGeometry);
            if (_this.options.ogcFilters.enabled &&
                _this.options.ogcFilters.editable &&
                (options.sourceFields || []).filter(function (sf) { return !sf.values; }).length > 0) {
                _this.wfsService.getSourceFieldsFromWFS(_this.options);
            }
            if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.pushButtons) {
                ogcFilters.pushButtons.selectorType = 'pushButton';
            }
            if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.checkboxes) {
                ogcFilters.checkboxes.selectorType = 'checkbox';
            }
            if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.radioButtons) {
                ogcFilters.radioButtons.selectorType = 'radioButton';
            }
            if (ogcFilters === null || ogcFilters === void 0 ? void 0 : ogcFilters.select) {
                ogcFilters.select.selectorType = 'select';
            }
            _this.setOgcFilters(_this.options.ogcFilters, true);
            return _this;
        }
        Object.defineProperty(WFSDataSource.prototype, "ogcFilters", {
            get: function () {
                return this.options.ogcFilters;
            },
            set: function (value) {
                this.options.ogcFilters = value;
            },
            enumerable: false,
            configurable: true
        });
        WFSDataSource.prototype.createOlSource = function () {
            var _this = this;
            var vectorSource = new OlVectorSource__default["default"]({
                format: getFormatFromOptions(this.options),
                url: function (extent, resolution, proj) {
                    var paramsWFS = _this.options.paramsWFS;
                    var wfsProj = paramsWFS.srsName ? new olProjection__default["default"]({ code: paramsWFS.srsName }) : proj;
                    var ogcFilters = _this.options.ogcFilters;
                    var currentExtent = olproj__namespace.transformExtent(extent, proj, wfsProj);
                    paramsWFS.srsName = paramsWFS.srsName || proj.getCode();
                    return buildUrl(_this.options, currentExtent, wfsProj, ogcFilters);
                },
                strategy: OlLoadingStrategy__namespace.bbox
            });
            return vectorSource;
        };
        WFSDataSource.prototype.setOgcFilters = function (ogcFilters, triggerEvent) {
            if (triggerEvent === void 0) { triggerEvent = false; }
            this.ogcFilters = ogcFilters;
            this.mostRecentIdCallOGCFilter += 1;
            if (triggerEvent) {
                this.ogcFilters$.next(this.ogcFilters);
            }
        };
        WFSDataSource.prototype.onUnwatch = function () { };
        return WFSDataSource;
    }(DataSource));

    var WFSService = /** @class */ (function (_super) {
        __extends(WFSService, _super);
        function WFSService(http) {
            var _this = _super.call(this) || this;
            _this.http = http;
            return _this;
        }
        WFSService.prototype.getData = function () {
            console.log('This is defining a data service.');
            return 'This is defining a data service.';
        };
        WFSService.prototype.getSourceFieldsFromWFS = function (dataSourceOptions) {
            if (!dataSourceOptions.sourceFields || dataSourceOptions.sourceFields.length === 0) {
                dataSourceOptions.sourceFields = [];
                this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(function (getfeatureSourceField) {
                    dataSourceOptions.sourceFields = getfeatureSourceField;
                });
            }
            else {
                this.defineFieldAndValuefromWFS(dataSourceOptions).subscribe(function (getfeatureSourceField) {
                    dataSourceOptions.sourceFields.forEach(function (sourcefield) {
                        if (sourcefield.alias === undefined) {
                            sourcefield.alias = sourcefield.name; // to allow only a list of sourcefield with names
                        }
                        if (sourcefield.values === undefined || sourcefield.values.length === 0) {
                            sourcefield.values = getfeatureSourceField.find(function (sf) { return sf.name === sourcefield.name; }).values;
                        }
                    });
                });
            }
        };
        WFSService.prototype.wfsGetFeature = function (dataSourceOptions, nb, epsgCode, propertyName, startIndex, forceDefaultOutputFormat) {
            if (nb === void 0) { nb = defaultMaxFeatures; }
            if (epsgCode === void 0) { epsgCode = defaultEpsg; }
            if (startIndex === void 0) { startIndex = 0; }
            if (forceDefaultOutputFormat === void 0) { forceDefaultOutputFormat = false; }
            var queryStringValues = formatWFSQueryString(dataSourceOptions, nb, epsgCode, propertyName, startIndex, forceDefaultOutputFormat);
            var baseUrl = queryStringValues.find(function (f) { return f.name === 'getfeature'; }).value;
            var outputFormat = dataSourceOptions.paramsWFS.outputFormat;
            if (forceDefaultOutputFormat || gmlRegex.test(outputFormat) || !outputFormat) {
                return this.http.get(baseUrl, { responseType: 'text' });
            }
            else {
                return this.http.get(baseUrl);
            }
        };
        WFSService.prototype.defineFieldAndValuefromWFS = function (dataSourceOptions) {
            var _this = this;
            return new rxjs.Observable(function (d) {
                var _a;
                var sourceFields = [];
                var fieldList;
                var fieldListWoGeom;
                var fieldListWoGeomStr;
                var olFormats;
                var effectiveOlFormats;
                olFormats = getFormatFromOptions(dataSourceOptions);
                var gmlDataSourceOptions = JSON.parse(JSON.stringify(dataSourceOptions));
                delete gmlDataSourceOptions.paramsWFS.outputFormat;
                delete gmlDataSourceOptions.formatOptions;
                effectiveOlFormats = getFormatFromOptions(gmlDataSourceOptions);
                var sourceFieldsToRetrieveValues = (_a = dataSourceOptions.sourceFields) === null || _a === void 0 ? void 0 : _a.filter(function (f) { return !f.values; }).map(function (f) { return f.name; });
                // Validate if the service manage no outputformat (wfs 1.0.0 and GML is the default return)
                _this.wfsGetFeature(dataSourceOptions, 1, undefined, undefined, 0, true).pipe(operators.concatMap(function (res) { return String(res).toLowerCase().includes('exception') ? rxjs.of(false) : rxjs.of(true); }), operators.concatMap(function (allowGml) {
                    // If the service return GML (return no exception)
                    return _this.wfsGetFeature(dataSourceOptions, 1).pipe(operators.concatMap(function (firstFeature) {
                        var features = olFormats.readFeatures(firstFeature);
                        fieldList = features[0].getKeys();
                        if (dataSourceOptions.sourceFields || dataSourceOptions.sourceFields.length === 0) {
                            sourceFieldsToRetrieveValues = fieldList;
                        }
                        fieldListWoGeom = fieldList.filter(function (field) { return sourceFieldsToRetrieveValues.includes(field) &&
                            field !== features[0].getGeometryName() &&
                            !field.match(/boundedby/gi); });
                        fieldListWoGeomStr = fieldListWoGeom.join(',');
                        var processingArray = [];
                        var startIndex = 0;
                        // If the service do not allow gml return, dice the call in multiple
                        // calls by increment of chunkSize with the original outputFormat
                        if (!allowGml && dataSourceOptions.paramsWFS.version === '2.0.0' &&
                            dataSourceOptions.paramsWFS.maxFeatures > defaultMaxFeatures) {
                            var chunkSize = 1000;
                            while (startIndex < dataSourceOptions.paramsWFS.maxFeatures) {
                                processingArray.push(_this.wfsGetFeature(dataSourceOptions, chunkSize, dataSourceOptions.paramsWFS.srsName, fieldListWoGeomStr, startIndex));
                                startIndex += chunkSize;
                            }
                            effectiveOlFormats = olFormats;
                        }
                        else {
                            processingArray.push(_this.wfsGetFeature(dataSourceOptions, dataSourceOptions.paramsWFS.maxFeatures || defaultMaxFeatures, dataSourceOptions.paramsWFS.srsName, fieldListWoGeomStr, 0, true));
                        }
                        return rxjs.combineLatest(processingArray);
                    }));
                })).subscribe(function (results) {
                    var mfeatures = [];
                    results.map(function (result) {
                        var loopFeatures = effectiveOlFormats.readFeatures(result);
                        mfeatures = mfeatures.concat(loopFeatures);
                    });
                    _this.built_properties_value(mfeatures).forEach(function (element) {
                        sourceFields.push(element);
                    });
                    d.next(sourceFields);
                    d.complete();
                });
            });
        };
        WFSService.prototype.built_properties_value = function (features) {
            if (features.length === 0) {
                return [];
            }
            var kv = Object.assign({}, features[0].getProperties());
            delete kv[features[0].getGeometryName()];
            delete kv.boundedBy;
            var sourceFields = [];
            for (var property in kv) {
                if (kv.hasOwnProperty(property)) {
                    var fieldType = typeof features[0].get(property) === 'object'
                        ? undefined
                        : typeof features[0].get(property);
                    sourceFields.push({
                        name: property,
                        alias: property,
                        type: fieldType,
                        values: [kv[property]]
                    });
                }
            }
            features.every(function (element) {
                var featureProperties = element.getProperties();
                var _loop_1 = function (key) {
                    if (featureProperties.hasOwnProperty(key) && key in kv) {
                        sourceFields.filter(function (f) { return f.name === key; }).forEach(function (v) {
                            if (v.values.indexOf(featureProperties[key]) === -1) {
                                v.values.push(featureProperties[key]);
                            }
                        });
                    }
                };
                for (var key in featureProperties) {
                    _loop_1(key);
                }
                return true;
            });
            return sourceFields;
        };
        return WFSService;
    }(DataService));
    WFSService.ɵfac = function WFSService_Factory(t) { return new (t || WFSService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient)); };
    WFSService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: WFSService, factory: WFSService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WFSService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }]; }, null);
    })();

    function createDefaultTileGrid(epsg) {
        var projection = epsg ? olproj__namespace.get(epsg) : olproj__namespace.get('EPSG:3857');
        var projectionExtent = projection.getExtent();
        var size = extent_js.getWidth(projectionExtent) / 256;
        var resolutions = new Array(20);
        var matrixIds = new Array(20);
        for (var z = 0; z < 20; ++z) {
            resolutions[z] = size / Math.pow(2, z);
            matrixIds[z] = z;
        }
        return new olTileGridWMTS__default["default"]({
            origin: extent_js.getTopLeft(projectionExtent),
            resolutions: resolutions,
            matrixIds: matrixIds
        });
    }

    var WMTSDataSource = /** @class */ (function (_super) {
        __extends(WMTSDataSource, _super);
        function WMTSDataSource(options) {
            return _super.call(this, options) || this;
        }
        WMTSDataSource.prototype.createOlSource = function () {
            var sourceOptions = Object.assign({
                tileGrid: createDefaultTileGrid(this.options.projection)
            }, this.options);
            return new olSourceWMTS__default["default"](sourceOptions);
        };
        WMTSDataSource.prototype.onUnwatch = function () { };
        return WMTSDataSource;
    }(DataSource));

    var CartoDataSource = /** @class */ (function (_super) {
        __extends(CartoDataSource, _super);
        function CartoDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CartoDataSource.prototype, "params", {
            get: function () {
                return this.options.params;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CartoDataSource.prototype, "queryTitle", {
            get: function () {
                return this.options.queryTitle
                    ? this.options.queryTitle
                    : 'title';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CartoDataSource.prototype, "mapLabel", {
            get: function () {
                return this.options.mapLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CartoDataSource.prototype, "queryHtmlTarget", {
            get: function () {
                return this.options.queryHtmlTarget
                    ? this.options.queryHtmlTarget
                    : exports.QueryHtmlTarget.BLANK;
            },
            enumerable: false,
            configurable: true
        });
        CartoDataSource.prototype.createOlSource = function () {
            var crossOrigin = this.options.crossOrigin
                ? this.options.crossOrigin
                : 'anonymous';
            var sourceOptions = Object.assign({
                crossOrigin: crossOrigin
            }, this.options);
            return new olSourceCarto__default["default"](sourceOptions);
        };
        CartoDataSource.prototype.getLegend = function () {
            var e_1, _a;
            var legend = _super.prototype.getLegend.call(this);
            if (legend.length > 0) {
                return legend;
            }
            var htmlString = '<table>';
            if (this.options.config.layers[0].legend !== null) {
                this.options.config.layers[0].legend.items.forEach(function (f) {
                    if (f.visible === true) {
                        htmlString +=
                            '<tr><td>' +
                                '<p><font size="5" color="' +
                                f.value +
                                '"> &#9679</font></p></td>' +
                                '<td>' +
                                f.name +
                                '</td></tr>';
                    }
                });
                htmlString += '</table>';
                return [{ html: htmlString }];
            }
            else {
                // Try to build the legend from the cartocss options
                var layerOptions = this.options.config.layers[0].options;
                // All available cartocss style options
                var types = [
                    'polygon-fill:',
                    'marker-fill:',
                    'shield-fill:',
                    'building-fill:',
                    'line-color:'
                ];
                try {
                    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                        var oneType = types_1_1.value;
                        if (layerOptions.cartocss.includes(oneType)) {
                            var type = layerOptions.cartocss.split(oneType).pop();
                            var color = type.substr(0, type.indexOf(';'));
                            if (color.includes('ramp')) {
                                var colors = color.split(', (')[1].split(',');
                                var data = color.split(', (')[2].split(',');
                                for (var j = 0; j < colors.length; j++) {
                                    colors[j] = colors[j].replace(/("|\))/g, '');
                                    data[j] = data[j].replace(/("|\))/g, '');
                                    if (data[j].replace(/\s+/g, '') === '=') {
                                        data[j] = 'Autres';
                                    }
                                    htmlString +=
                                        '<tr><td>' +
                                            '<p><font size="5" color="' +
                                            colors[j] +
                                            '"> &#9679</font></p></td>' +
                                            '<td>' +
                                            data[j] +
                                            '</td></tr>';
                                }
                                break;
                            }
                            else {
                                var title = layerOptions.layer_name
                                    ? layerOptions.layer_name
                                    : '';
                                htmlString +=
                                    '<tr><td>' +
                                        '<p><font size="5" color="' +
                                        color +
                                        '"> &#9679</font></p>' +
                                        '</td><td>' +
                                        title +
                                        '</td></tr>';
                                break;
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                htmlString += '</table>';
                return [{ html: htmlString }];
            }
        };
        CartoDataSource.prototype.onUnwatch = function () { };
        return CartoDataSource;
    }(DataSource));

    var ArcGISRestDataSource = /** @class */ (function (_super) {
        __extends(ArcGISRestDataSource, _super);
        function ArcGISRestDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ArcGISRestDataSource.prototype.createOlSource = function () {
            var esrijsonFormat = new olFormatEsriJSON__default["default"]();
            return new OlVectorSource__default["default"]({
                attributions: this.options.params.attributions,
                overlaps: false,
                format: esrijsonFormat,
                url: function (extent, resolution, proj) {
                    var baseUrl = this.options.url + '/' + this.options.layer + '/query/';
                    var geometry = encodeURIComponent('{"xmin":' +
                        extent[0] +
                        ',"ymin":' +
                        extent[1] +
                        ',"xmax":' +
                        extent[2] +
                        ',"ymax":' +
                        extent[3] +
                        ',"spatialReference":{"wkid":102100}}');
                    var params = [
                        'f=json',
                        "geometry=" + geometry,
                        'geometryType=esriGeometryEnvelope',
                        'inSR=102100',
                        'spatialRel=esriSpatialRelIntersects',
                        'outFields=*',
                        'returnGeometry=true',
                        'outSR=102100'
                    ];
                    if (this.options.params.time) {
                        var time = "time=" + this.options.params.time;
                        params.push(time);
                    }
                    if (this.options.params.customParams) {
                        this.options.params.customParams.forEach(function (element) {
                            params.push(element);
                        });
                    }
                    return baseUrl + "?" + params.join('&');
                }.bind(this),
                strategy: OlLoadingStrategy__namespace.bbox
            });
        };
        ArcGISRestDataSource.prototype.getLegend = function () {
            var e_1, _a, e_2, _b;
            var legendInfo = this.options.legendInfo;
            var legend = _super.prototype.getLegend.call(this);
            if (legendInfo === undefined || legend.length > 0) {
                return legend;
            }
            if (!legendInfo) {
                return;
            }
            var htmlString = '<table>';
            var src;
            var label;
            var svg;
            if (legendInfo.legend) {
                try {
                    for (var _c = __values(legendInfo.legend), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var legendElement = _d.value;
                        src = this.htmlImgSrc(legendElement.contentType, legendElement.imageData);
                        label = legendElement.label ? legendElement.label.replace('<Null>', 'Null') : '';
                        htmlString +=
                            "<tr><td align='left'><img src=\"" +
                                src +
                                "\" alt ='' /></td><td class=\"mat-typography\">" +
                                label +
                                '</td></tr>';
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (legendInfo.type === "uniqueValue") {
                try {
                    for (var _e = __values(legendInfo.uniqueValueInfos), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var legendElement = _f.value;
                        label = legendElement.label.replace('<Null>', 'Null');
                        if (legendElement.symbol.type === 'esriPMS') {
                            src = this.htmlImgSrc(legendElement.symbol.contentType, legendElement.symbol.imageData);
                            htmlString +=
                                "<tr><td align='left'><img src=\"" +
                                    src +
                                    "\" alt ='' /></td><td class=\"mat-typography\">" +
                                    label +
                                    '</td></tr>';
                        }
                        else if (legendElement.symbol.type !== 'esriPMS') {
                            svg = this.createSVG(legendElement.symbol);
                            htmlString += "<tr><td align='left'>" + svg + "</td><td class=\"mat-typography\">" + label + '</td></tr>';
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else if (legendInfo.type === "simple") {
                label = legendInfo.label ? legendInfo.label.replace('<Null>', 'Null') : '';
                if (legendInfo.symbol.type === 'esriPMS') {
                    src = this.htmlImgSrc(legendInfo.symbol.contentType, legendInfo.symbol.imageData);
                    htmlString +=
                        "<tr><td align='left'><img src=\"" +
                            src +
                            "\" alt ='' /></td><td class=\"mat-typography\">" +
                            label +
                            '</td></tr>';
                }
                else if (legendInfo.symbol.type !== 'esriPMS') {
                    svg = this.createSVG(legendInfo.symbol);
                    htmlString += "<tr><td align='left'>" + svg + "</td><td class=\"mat-typography\">" + label + '</td></tr>';
                }
            }
            htmlString += '</table>';
            return [{ html: htmlString }];
        };
        ArcGISRestDataSource.prototype.htmlImgSrc = function (contentType, imageData) {
            return "data:" + contentType + ";base64," + imageData;
        };
        ArcGISRestDataSource.prototype.createSVG = function (symbol) {
            var svg = '';
            var color = symbol.color ? symbol.color : [0, 0, 0, 0];
            if (symbol.type === 'esriSLS') {
                var width = symbol.width ? symbol.width : 0;
                var stroke = "stroke:rgba(" + color[0] + ',' + color[1] + ',' + color[2] + ',' + color[3] + ')';
                var strokeWidth = "stroke-width:" + width;
                if (symbol.style === 'esriSLSSolid') {
                    svg = "<svg height=\"30\" width=\"30\"><line x1=\"0\" y1=\"15\" x2=\"30\" y2=\"15\" style=\"" + stroke + ';' + strokeWidth + "\"/></svg>";
                }
                else if (symbol.style === 'esriSLSDash') {
                    var strokeDashArray = "stroke-dasharray=\"5,5\"";
                    svg = "<svg height=\"30\" width=\"30\"><line x1=\"0\" y1=\"15\" x2=\"30\" y2=\"15\" style=\"" + stroke + ';' + strokeWidth + "\" " + strokeDashArray + "/></svg>";
                }
            }
            else if (symbol.style === 'esriSMSCircle' || symbol.style === 'esriSFSSolid') {
                var outlineColor = symbol.outline.color;
                var outlineWidth = symbol.outline.width;
                var size = symbol.size;
                var stroke = "stroke:rgba(" + outlineColor[0] + ',' + outlineColor[1] + ',' + outlineColor[2] + ',' + outlineColor[3] + ')';
                var strokeWidth = "stroke-width:" + outlineWidth;
                var fill = "fill:rgba(" + color[0] + ',' + color[1] + ',' + color[2] + ',' + color[3] + ')';
                if (symbol.style === 'esriSMSCircle') {
                    svg = "<svg height=\"30\" width=\"30\"><circle cx=\"15\" cy=\"15\" r=\"" + size / 2 + "\" style=\"" + stroke + ';' + strokeWidth + ';' + fill + "\"/></svg>";
                }
                else {
                    svg = "<svg height=\"30\" width=\"30\"><rect x=\"5\" y=\"5\" width=\"20\" height=\"20\" style =\"" + stroke + ';' + strokeWidth + ';' + fill + "\"/></svg>";
                }
            }
            return svg;
        };
        ArcGISRestDataSource.prototype.onUnwatch = function () { };
        return ArcGISRestDataSource;
    }(DataSource));

    var ImageArcGISRestDataSource = /** @class */ (function (_super) {
        __extends(ImageArcGISRestDataSource, _super);
        function ImageArcGISRestDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ImageArcGISRestDataSource.prototype, "params", {
            get: function () {
                return this.options.params;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageArcGISRestDataSource.prototype, "queryTitle", {
            get: function () {
                return this.options.queryTitle
                    ? this.options.queryTitle
                    : 'title';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageArcGISRestDataSource.prototype, "mapLabel", {
            get: function () {
                return this.options.mapLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageArcGISRestDataSource.prototype, "queryHtmlTarget", {
            get: function () {
                return this.options.queryHtmlTarget
                    ? this.options.queryHtmlTarget
                    : exports.QueryHtmlTarget.BLANK;
            },
            enumerable: false,
            configurable: true
        });
        ImageArcGISRestDataSource.prototype.createOlSource = function () {
            var params = this.options.layer === undefined ? this.options.params : Object.assign({ LAYERS: "show:" + this.options.layer }, this.options.params);
            if (typeof params.renderingRule === 'object') {
                params.renderingRule = JSON.stringify(params.renderingRule);
            }
            return new ImageArcGISRest__default["default"]({
                ratio: 1,
                params: params,
                url: this.options.url
            });
        };
        ImageArcGISRestDataSource.prototype.getLegend = function () {
            var e_1, _a;
            var legendInfo = this.options.legendInfo;
            var legend = _super.prototype.getLegend.call(this);
            if (legendInfo === undefined || this.options.layer === undefined || legend.length > 0) {
                return legend;
            }
            if (!legendInfo) {
                return;
            }
            var htmlString = '<table>';
            try {
                for (var _b = __values(legendInfo.legend), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var legendElement = _c.value;
                    var src = this.options.url + "/" + legendInfo.layerId + "/images/" + legendElement.url;
                    var label = legendElement.label.replace('<Null>', 'Null');
                    htmlString +=
                        "<tr><td align='left'><img src=\"" +
                            src +
                            "\" alt ='' /></td><td class=\"mat-typography\">" +
                            label +
                            '</td></tr>';
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            htmlString += '</table>';
            return [{ html: htmlString }];
        };
        ImageArcGISRestDataSource.prototype.onUnwatch = function () { };
        return ImageArcGISRestDataSource;
    }(DataSource));

    var TileArcGISRestDataSource = /** @class */ (function (_super) {
        __extends(TileArcGISRestDataSource, _super);
        function TileArcGISRestDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TileArcGISRestDataSource.prototype, "params", {
            get: function () {
                return this.options.params;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TileArcGISRestDataSource.prototype, "queryTitle", {
            get: function () {
                return this.options.queryTitle
                    ? this.options.queryTitle
                    : 'title';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TileArcGISRestDataSource.prototype, "mapLabel", {
            get: function () {
                return this.options.mapLabel;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TileArcGISRestDataSource.prototype, "queryHtmlTarget", {
            get: function () {
                return this.options.queryHtmlTarget
                    ? this.options.queryHtmlTarget
                    : exports.QueryHtmlTarget.BLANK;
            },
            enumerable: false,
            configurable: true
        });
        TileArcGISRestDataSource.prototype.createOlSource = function () {
            return new olSourceTileArcGISRest__default["default"](this.options);
        };
        TileArcGISRestDataSource.prototype.getLegend = function () {
            var e_1, _a;
            var legendInfo = this.options.legendInfo;
            var legend = _super.prototype.getLegend.call(this);
            if (legendInfo === undefined || this.options.layer === undefined || legend.length > 0) {
                return legend;
            }
            if (!legendInfo) {
                return;
            }
            var htmlString = '<table>';
            try {
                for (var _b = __values(legendInfo.legend), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var legendElement = _c.value;
                    var src = this.options.url + "/" + legendInfo.layerId + "/images/" + legendElement.url;
                    var label = legendElement.label.replace('<Null>', 'Null');
                    htmlString +=
                        "<tr><td align='left'><img src=\"" +
                            src +
                            "\" alt ='' /></td><td class=\"mat-typography\">" +
                            label +
                            '</td></tr>';
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            htmlString += '</table>';
            return [{ html: htmlString }];
        };
        TileArcGISRestDataSource.prototype.onUnwatch = function () { };
        return TileArcGISRestDataSource;
    }(DataSource));

    var TileDebugDataSource = /** @class */ (function (_super) {
        __extends(TileDebugDataSource, _super);
        function TileDebugDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TileDebugDataSource.prototype.createOlSource = function () {
            var baseOptions = JSON.parse(JSON.stringify(this.options)); // to avoid to alter the original options
            if (this.options.tileGrid) {
                delete baseOptions.tileGrid;
                baseOptions.tileGrid = new TileGrid__default["default"](this.options.tileGrid);
            }
            return new TileDebug__default["default"](baseOptions);
        };
        TileDebugDataSource.prototype.onUnwatch = function () { };
        return TileDebugDataSource;
    }(DataSource));

    var WebSocketDataSource = /** @class */ (function (_super) {
        __extends(WebSocketDataSource, _super);
        function WebSocketDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WebSocketDataSource.prototype.createOlSource = function () {
            this.createWebSocket();
            this.options.format = this.getSourceFormatFromOptions(this.options);
            return _super.prototype.createOlSource.call(this);
        };
        WebSocketDataSource.prototype.createWebSocket = function () {
            this.ws = new WebSocket(this.options.url);
            this.ws.onmessage = this.onMessage.bind(this);
            if (this.options.onclose) {
                this.ws.onclose = this.onClose.bind(this);
            }
            if (this.options.onerror) {
                this.ws.onerror = this.onError.bind(this);
            }
            if (this.options.onopen) {
                this.ws.onopen = this.onOpen.bind(this);
            }
        };
        WebSocketDataSource.prototype.onMessage = function (event) {
            var featureAdded = this.options.format.readFeature(event.data);
            switch (this.options.onmessage) {
                case 'update':
                    // ol don't add if same ID
                    var featureToRemove = this.ol.getFeatureById(featureAdded.getId());
                    if (featureToRemove) {
                        this.ol.removeFeature(featureToRemove);
                    }
                    this.ol.addFeature(featureAdded);
                    break;
                case 'delete':
                    this.ol.clear(true);
                    this.ol.addFeature(featureAdded);
                    break;
                case 'add':
                default:
                    this.ol.addFeature(featureAdded);
            }
        };
        WebSocketDataSource.prototype.onClose = function (event) {
            // thrown message to user
        };
        WebSocketDataSource.prototype.onError = function (event) {
            // thrown message to user
        };
        WebSocketDataSource.prototype.onOpen = function (event) {
            // thrown message to user ?
        };
        WebSocketDataSource.prototype.onUnwatch = function () {
            this.ws.close();
        };
        return WebSocketDataSource;
    }(FeatureDataSource));

    var MVTDataSource = /** @class */ (function (_super) {
        __extends(MVTDataSource, _super);
        function MVTDataSource() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MVTDataSource.prototype.createOlSource = function () {
            var mvtFormat;
            if (this.options.featureClass === 'feature') {
                mvtFormat = new olFormatMVT__default["default"]({ featureClass: OlFeature__default["default"] });
            }
            else {
                mvtFormat = new olFormatMVT__default["default"]();
            }
            this.options.format = mvtFormat;
            return new olSourceVectorTile__default["default"](this.options);
        };
        MVTDataSource.prototype.generateId = function () {
            if (!this.options.url) {
                return utils.uuid();
            }
            var chain = 'mvt' + this.options.url;
            return tsMd5.Md5.hashStr(chain);
        };
        MVTDataSource.prototype.onUnwatch = function () { };
        return MVTDataSource;
    }(DataSource));

    var EsriStyleGenerator = /** @class */ (function () {
        function EsriStyleGenerator() {
            this._converters = {};
            this._converters.esriPMS = EsriStyleGenerator._convertEsriPMS;
            this._converters.esriSFS = EsriStyleGenerator._convertEsriSFS;
            this._converters.esriSLS = EsriStyleGenerator._convertEsriSLS;
            this._converters.esriSMS = EsriStyleGenerator._convertEsriSMS;
            this._converters.esriTS = EsriStyleGenerator._convertEsriTS;
            this._renderers = {};
            this._renderers.uniqueValue = this._renderUniqueValue;
            this._renderers.simple = this._renderSimple;
            this._renderers.classBreaks = this._renderClassBreaks;
        }
        EsriStyleGenerator._convertPointToPixel = function (point) {
            return point / 0.75;
        };
        EsriStyleGenerator._transformColor = function (color) {
            // alpha channel is different, runs from 0-255 but in ol3 from 0-1
            return [color[0], color[1], color[2], color[3] / 255];
        };
        EsriStyleGenerator._getResolutionForScale = function (scale, units) {
            var dpi = 96;
            var mpu = olproj__namespace.METERS_PER_UNIT[units];
            var inchesPerMeter = 39.3701;
            return parseFloat(scale) / (mpu * inchesPerMeter * dpi);
        };
        /* convert an Esri Text Symbol */
        EsriStyleGenerator._convertEsriTS = function (symbol) {
            var rotation = EsriStyleGenerator._transformAngle(symbol.angle);
            var text = symbol.text !== undefined ? symbol.text : undefined;
            return new olstyle__namespace.Style({
                text: new olstyle__namespace.Text({
                    fill: new olstyle__namespace.Fill({
                        color: EsriStyleGenerator._transformColor(symbol.color)
                    }),
                    font: symbol.font.style +
                        ' ' +
                        symbol.font.weight +
                        ' ' +
                        symbol.font.size +
                        ' px ' +
                        symbol.font.family,
                    textBaseline: symbol.verticalAlignment,
                    textAlign: symbol.horizontalAlignment,
                    offsetX: EsriStyleGenerator._convertPointToPixel(symbol.xoffset),
                    offsetY: EsriStyleGenerator._convertPointToPixel(symbol.yoffset),
                    rotation: rotation,
                    text: text
                })
            });
        };
        /* convert an Esri Picture Marker Symbol */
        EsriStyleGenerator._convertEsriPMS = function (symbol) {
            var src = 'data:' + symbol.contentType + ';base64, ' + symbol.imageData;
            var rotation = EsriStyleGenerator._transformAngle(symbol.angle);
            return new olstyle__namespace.Style({
                image: new olstyle__namespace.Icon({
                    src: src,
                    rotation: rotation
                })
            });
        };
        /* convert an Esri Simple Fill Symbol */
        EsriStyleGenerator._convertEsriSFS = function (symbol) {
            // there is no support in openlayers currently for fill patterns, so style is not interpreted
            var fill = new olstyle__namespace.Fill({
                color: EsriStyleGenerator._transformColor(symbol.color)
            });
            var stroke = symbol.outline
                ? EsriStyleGenerator._convertOutline(symbol.outline)
                : undefined;
            return new olstyle__namespace.Style({
                fill: fill,
                stroke: stroke
            });
        };
        EsriStyleGenerator._convertOutline = function (outline) {
            var lineDash;
            var color = EsriStyleGenerator._transformColor(outline.color);
            if (outline.style === 'esriSLSDash') {
                lineDash = [5];
            }
            else if (outline.style === 'esriSLSDashDot') {
                lineDash = [5, 5, 1, 2];
            }
            else if (outline.style === 'esriSLSDashDotDot') {
                lineDash = [5, 5, 1, 2, 1, 2];
            }
            else if (outline.style === 'esriSLSDot') {
                lineDash = [1, 2];
            }
            else if (outline.style === 'esriSLSNull') {
                // line not visible, make color fully transparent
                color[3] = 0;
            }
            return new olstyle__namespace.Stroke({
                color: color,
                lineDash: lineDash,
                width: EsriStyleGenerator._convertPointToPixel(outline.width)
            });
        };
        /* convert an Esri Simple Line Symbol */
        EsriStyleGenerator._convertEsriSLS = function (symbol) {
            return new olstyle__namespace.Style({
                stroke: EsriStyleGenerator._convertOutline(symbol)
            });
        };
        EsriStyleGenerator._transformAngle = function (angle) {
            if (angle === 0 || angle === undefined) {
                return undefined;
            }
            var normalRad = (angle * Math.PI) / 180;
            var ol3Rad = -normalRad + Math.PI / 2;
            if (ol3Rad < 0) {
                return 2 * Math.PI + ol3Rad;
            }
            else {
                return ol3Rad;
            }
        };
        /* convert an Esri Simple Marker Symbol */
        EsriStyleGenerator._convertEsriSMS = function (symbol) {
            var fill = new olstyle__namespace.Fill({
                color: EsriStyleGenerator._transformColor(symbol.color)
            });
            var stroke = symbol.outline
                ? EsriStyleGenerator._convertOutline(symbol.outline)
                : undefined;
            var radius = EsriStyleGenerator._convertPointToPixel(symbol.size) / 2;
            var rotation = EsriStyleGenerator._transformAngle(symbol.angle);
            if (symbol.style === 'esriSMSCircle') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.Circle({
                        radius: radius,
                        fill: fill,
                        stroke: stroke
                    })
                });
            }
            else if (symbol.style === 'esriSMSCross') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: radius,
                        radius2: 0,
                        angle: 0,
                        rotation: rotation
                    })
                });
            }
            else if (symbol.style === 'esriSMSDiamond') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: radius,
                        rotation: rotation
                    })
                });
            }
            else if (symbol.style === 'esriSMSSquare') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: radius,
                        angle: Math.PI / 4,
                        rotation: rotation
                    })
                });
            }
            else if (symbol.style === 'esriSMSX') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 4,
                        radius: radius,
                        radius2: 0,
                        angle: Math.PI / 4,
                        rotation: rotation
                    })
                });
            }
            else if (symbol.style === 'esriSMSTriangle') {
                return new olstyle__namespace.Style({
                    image: new olstyle__namespace.RegularShape({
                        fill: fill,
                        stroke: stroke,
                        points: 3,
                        radius: radius,
                        angle: 0,
                        rotation: rotation
                    })
                });
            }
        };
        EsriStyleGenerator.prototype._convertLabelingInfo = function (labelingInfo, mapUnits) {
            var styles = [];
            for (var i = 0, ii = labelingInfo.length; i < ii; ++i) {
                var labelExpression = labelingInfo[i].labelExpression;
                // only limited support for label expressions
                var field = labelExpression.substr(labelExpression.indexOf('[') + 1, labelExpression.indexOf(']') - 1);
                var symbol = labelingInfo[i].symbol;
                var maxScale = labelingInfo[i].maxScale;
                var minScale = labelingInfo[i].minScale;
                var minResolution = null;
                if (maxScale !== 0) {
                    minResolution = EsriStyleGenerator._getResolutionForScale(maxScale, mapUnits);
                }
                var maxResolution = null;
                if (minScale !== 0) {
                    maxResolution = EsriStyleGenerator._getResolutionForScale(minScale, mapUnits);
                }
                var style = this._converters[symbol.type].call(this, symbol);
                styles.push((function () {
                    return function (feature, resolution) {
                        var visible = true;
                        if (this.minResolution !== null && this.maxResolution !== null) {
                            visible =
                                resolution < this.maxResolution &&
                                    resolution >= this.minResolution;
                        }
                        else if (this.minResolution !== null) {
                            visible = resolution >= this.minResolution;
                        }
                        else if (this.maxResolution !== null) {
                            visible = resolution < this.maxResolution;
                        }
                        if (visible) {
                            var value = feature.get(this.field);
                            this.style.getText().setText(value);
                            return [this.style];
                        }
                    };
                })().bind({
                    minResolution: minResolution,
                    maxResolution: maxResolution,
                    field: field,
                    style: style
                }));
            }
            return styles;
        };
        EsriStyleGenerator.prototype._renderSimple = function (renderer) {
            var style = this._converters[renderer.symbol.type].call(this, renderer.symbol);
            return (function () {
                return function () {
                    return [style];
                };
            })();
        };
        EsriStyleGenerator.prototype._renderClassBreaks = function (renderer) {
            var defaultSymbol = renderer.defaultSymbol;
            var defaultStyle = this._converters[defaultSymbol.type].call(this, defaultSymbol);
            var field = renderer.field;
            var classes = [];
            for (var i = 0, ii = renderer.classBreakInfos.length; i < ii; ++i) {
                var classBreakInfo = renderer.classBreakInfos[i];
                var min = void 0;
                if (classBreakInfo.classMinValue === null ||
                    classBreakInfo.classMinValue === undefined) {
                    if (i === 0) {
                        min = renderer.minValue;
                    }
                    else {
                        min = renderer.classBreakInfos[i - 1].classMaxValue;
                    }
                }
                else {
                    min = classBreakInfo.classMinValue;
                }
                var max = classBreakInfo.classMaxValue;
                var symbol = classBreakInfo.symbol;
                var style = this._converters[symbol.type].call(this, symbol);
                classes.push({ min: min, max: max, style: style });
            }
            return (function () {
                return function (feature) {
                    var value = feature.get(field);
                    for (var i = 0, ii = classes.length; i < ii; ++i) {
                        var condition = void 0;
                        if (i === 0) {
                            condition = value >= classes[i].min && value <= classes[i].max;
                        }
                        else {
                            condition = value > classes[i].min && value <= classes[i].max;
                        }
                        if (condition) {
                            return [classes[i].style];
                        }
                    }
                    return [defaultStyle];
                };
            })();
        };
        EsriStyleGenerator.prototype._renderUniqueValue = function (renderer) {
            var defaultSymbol = renderer.defaultSymbol;
            var defaultStyle = [];
            if (defaultSymbol) {
                defaultStyle = [
                    this._converters[defaultSymbol.type].call(this, defaultSymbol)
                ];
            }
            var field = renderer.field1;
            var infos = renderer.uniqueValueInfos;
            var me = this;
            return (function () {
                var hash = {};
                for (var i = 0, ii = infos.length; i < ii; ++i) {
                    var info = infos[i];
                    var symbol = info.symbol;
                    hash[info.value] = [me._converters[symbol.type].call(me, symbol)];
                }
                return function (feature) {
                    var style = hash[feature.get(field)];
                    return style ? style : defaultStyle;
                };
            })();
        };
        EsriStyleGenerator.prototype.generateStyle = function (layerInfo, mapUnits) {
            var drawingInfo = layerInfo.drawingInfo;
            var styleFunctions = [];
            var drawingInfoStyle = this._renderers[drawingInfo.renderer.type].call(this, drawingInfo.renderer);
            if (drawingInfoStyle !== undefined) {
                styleFunctions.push(drawingInfoStyle);
            }
            if (layerInfo.labelingInfo) {
                var labelingInfoStyleFunctions = this._convertLabelingInfo(layerInfo.labelingInfo, mapUnits);
                styleFunctions = styleFunctions.concat(labelingInfoStyleFunctions);
            }
            if (styleFunctions.length === 1) {
                return styleFunctions[0];
            }
            else {
                return (function () {
                    return function (feature, resolution) {
                        var styles = [];
                        for (var i = 0, ii = styleFunctions.length; i < ii; ++i) {
                            var result = styleFunctions[i].call(null, feature, resolution);
                            if (result) {
                                styles = styles.concat(result);
                            }
                        }
                        return styles;
                    };
                })();
            }
        };
        return EsriStyleGenerator;
    }());

    exports.TimeFilterType = void 0;
    (function (TimeFilterType) {
        TimeFilterType["DATE"] = "date";
        TimeFilterType["TIME"] = "time";
        TimeFilterType["DATETIME"] = "datetime";
        TimeFilterType["YEAR"] = "year";
    })(exports.TimeFilterType || (exports.TimeFilterType = {}));
    exports.TimeFilterStyle = void 0;
    (function (TimeFilterStyle) {
        TimeFilterStyle["CALENDAR"] = "calendar";
        TimeFilterStyle["SLIDER"] = "slider";
    })(exports.TimeFilterStyle || (exports.TimeFilterStyle = {}));

    /**
     * MapService
     *
     * This service tracks the IgoMap instance, if any.
     * Currently, only one map instance is supported
     * but support for multiple maps may be added in the future.
     * This will impact other services such as the OverlayService
     * because these maps won't be sharing overlayed features.
     */
    var MapService = /** @class */ (function () {
        function MapService() {
        }
        MapService.prototype.getMap = function () {
            return this.map;
        };
        MapService.prototype.setMap = function (map) {
            this.map = map;
        };
        return MapService;
    }());
    MapService.ɵfac = function MapService_Factory(t) { return new (t || MapService)(); };
    MapService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: MapService, factory: MapService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MapService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return []; }, null);
    })();

    exports.TypeCapabilities = void 0;
    (function (TypeCapabilities) {
        TypeCapabilities["wms"] = "wms";
        TypeCapabilities["wmts"] = "wmts";
        TypeCapabilities["arcgisrest"] = "esriJSON";
        TypeCapabilities["imagearcgisrest"] = "esriJSON";
        TypeCapabilities["tilearcgisrest"] = "esriJSON";
    })(exports.TypeCapabilities || (exports.TypeCapabilities = {}));
    var CapabilitiesService = /** @class */ (function () {
        function CapabilitiesService(http, mapService) {
            this.http = http;
            this.mapService = mapService;
            this.parsers = {
                wms: new olformat.WMSCapabilities(),
                wmts: new olformat.WMTSCapabilities(),
                esriJSON: new olformat.EsriJSON()
            };
        }
        CapabilitiesService.prototype.getWMSOptions = function (baseOptions) {
            var _this = this;
            var url = baseOptions.url;
            var version = baseOptions.params.VERSION;
            return this.getCapabilities('wms', url, version).pipe(operators.map(function (capabilities) {
                return capabilities
                    ? _this.parseWMSOptions(baseOptions, capabilities)
                    : undefined;
            }));
        };
        CapabilitiesService.prototype.getWMTSOptions = function (baseOptions) {
            var _this = this;
            var url = baseOptions.url;
            var version = baseOptions.version;
            var options = this.getCapabilities('wmts', url, version).pipe(operators.map(function (capabilities) {
                return capabilities
                    ? _this.parseWMTSOptions(baseOptions, capabilities)
                    : undefined;
            }));
            return options;
        };
        CapabilitiesService.prototype.getCartoOptions = function (baseOptions) {
            var _this = this;
            var baseUrl = 'https://' +
                baseOptions.account +
                '.carto.com/api/v2/viz/' +
                baseOptions.mapId +
                '/viz.json';
            return this.http
                .jsonp(baseUrl, 'callback')
                .pipe(operators.map(function (cartoOptions) { return _this.parseCartoOptions(baseOptions, cartoOptions); }));
        };
        CapabilitiesService.prototype.getArcgisOptions = function (baseOptions) {
            var _this = this;
            var baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';
            var modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');
            var legendUrl = modifiedUrl + '/legend?f=json';
            var serviceCapabilities = this.getCapabilities('arcgisrest', baseOptions.url);
            var arcgisOptions = this.http.get(baseUrl);
            var legend = this.http.get(legendUrl).pipe(operators.map(function (res) { return res; }), operators.catchError(function (err) {
                console.log('No legend associated with this Feature Service');
                return rxjs.of(err);
            }));
            return rxjs.forkJoin([arcgisOptions, legend, serviceCapabilities]).pipe(operators.map(function (res) {
                return _this.parseArcgisOptions(baseOptions, res[0], res[1], res[2]);
            }));
        };
        CapabilitiesService.prototype.getImageArcgisOptions = function (baseOptions) {
            var _this = this;
            var baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';
            var modifiedUrl = baseOptions.url.replace('FeatureServer', 'MapServer');
            var legendUrl = modifiedUrl + '/legend?f=json';
            var serviceCapabilities = this.getCapabilities('imagearcgisrest', baseOptions.url);
            var arcgisOptions = this.http.get(baseUrl);
            var legend = this.http.get(legendUrl).pipe(operators.map(function (res) { return res; }), operators.catchError(function (err) {
                console.log('No legend associated with this Image Service');
                return rxjs.of(err);
            }));
            return rxjs.forkJoin([arcgisOptions, legend, serviceCapabilities]).pipe(operators.map(function (res) {
                return _this.parseTileOrImageArcgisOptions(baseOptions, res[0], res[1], res[2]);
            }));
        };
        CapabilitiesService.prototype.getTileArcgisOptions = function (baseOptions) {
            var _this = this;
            var baseUrl = baseOptions.url + '/' + baseOptions.layer + '?f=json';
            var legendUrl = baseOptions.url + '/legend?f=json';
            var serviceCapabilities = this.getCapabilities('tilearcgisrest', baseOptions.url);
            var arcgisOptions = this.http.get(baseUrl);
            var legendInfo = this.http.get(legendUrl).pipe(operators.map(function (res) { return res; }), operators.catchError(function (err) {
                console.log('No legend associated with this Tile Service');
                return rxjs.of(err);
            }));
            return rxjs.forkJoin([arcgisOptions, legendInfo, serviceCapabilities]).pipe(operators.map(function (res) { return _this.parseTileOrImageArcgisOptions(baseOptions, res[0], res[1], res[2]); }));
        };
        CapabilitiesService.prototype.getCapabilities = function (service, baseUrl, version) {
            var _this = this;
            var params = new i1$2.HttpParams({
                fromObject: {
                    request: 'GetCapabilities',
                    service: service.toUpperCase(),
                    version: version || '1.3.0',
                    _i: 'true'
                }
            });
            var request;
            if (exports.TypeCapabilities[service] === 'esriJSON') {
                request = this.http.get(baseUrl + '?f=json');
            }
            else {
                request = this.http.get(baseUrl, {
                    params: params,
                    responseType: 'text'
                });
            }
            return request.pipe(operators.map(function (res) {
                if (exports.TypeCapabilities[service] === 'esriJSON') {
                    return res;
                }
                if (String(res).toLowerCase().includes('serviceexception') &&
                    String(res).toLowerCase().includes('access denied')) {
                    throw {
                        error: {
                            message: 'Service error getCapabilities: Access is denied'
                        }
                    };
                }
                else {
                    return _this.parsers[service].read(res);
                }
            }), operators.catchError(function (e) {
                if (typeof e.error !== 'undefined') {
                    e.error.caught = true;
                }
                throw e;
            }));
        };
        CapabilitiesService.prototype.parseWMSOptions = function (baseOptions, capabilities) {
            var e_1, _b;
            var layers = baseOptions.params.LAYERS;
            var layer = this.findDataSourceInCapabilities(capabilities.Capability.Layer, layers);
            if (!layer) {
                throw {
                    error: {
                        message: 'Layer not found'
                    }
                };
            }
            var metadata = layer.DataURL ? layer.DataURL[0] : undefined;
            var abstract = layer.Abstract ? layer.Abstract : undefined;
            var keywordList = layer.KeywordList ? layer.KeywordList : undefined;
            var queryable = layer.queryable;
            var timeFilter = this.getTimeFilter(layer);
            var timeFilterable = timeFilter && Object.keys(timeFilter).length > 0;
            var legendOptions = layer.Style ? this.getStyle(layer.Style) : undefined;
            var isExtentInGeographic = true;
            if (layer.EX_GeographicBoundingBox) {
                layer.EX_GeographicBoundingBox.forEach(function (coord, index) {
                    if (index < 2 && (coord > 180 || coord < -180)) {
                        isExtentInGeographic = false;
                    }
                    if (index >= 2 && (coord > 90 || coord < -90)) {
                        isExtentInGeographic = false;
                    }
                });
            }
            else {
                isExtentInGeographic = false;
            }
            var extent = isExtentInGeographic ?
                olproj__namespace.transformExtent(layer.EX_GeographicBoundingBox, 'EPSG:4326', this.mapService.getMap().projection) :
                undefined;
            var queryFormat;
            var queryFormatMimeTypePriority = [
                exports.QueryFormatMimeType.GEOJSON,
                exports.QueryFormatMimeType.GEOJSON2,
                exports.QueryFormatMimeType.GML3,
                exports.QueryFormatMimeType.GML2,
                exports.QueryFormatMimeType.JSON,
                exports.QueryFormatMimeType.HTML
            ];
            var _loop_1 = function (mimeType) {
                if (capabilities.Capability.Request.GetFeatureInfo.Format.indexOf(mimeType) !== -1) {
                    var keyEnum = Object.keys(exports.QueryFormatMimeType).find(function (key) { return exports.QueryFormatMimeType[key] === mimeType; });
                    queryFormat = exports.QueryFormat[keyEnum];
                    return "break";
                }
            };
            try {
                for (var queryFormatMimeTypePriority_1 = __values(queryFormatMimeTypePriority), queryFormatMimeTypePriority_1_1 = queryFormatMimeTypePriority_1.next(); !queryFormatMimeTypePriority_1_1.done; queryFormatMimeTypePriority_1_1 = queryFormatMimeTypePriority_1.next()) {
                    var mimeType = queryFormatMimeTypePriority_1_1.value;
                    var state_1 = _loop_1(mimeType);
                    if (state_1 === "break")
                        break;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (queryFormatMimeTypePriority_1_1 && !queryFormatMimeTypePriority_1_1.done && (_b = queryFormatMimeTypePriority_1.return)) _b.call(queryFormatMimeTypePriority_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!queryFormat) {
                queryable = false;
            }
            var options = utils.ObjectUtils.removeUndefined({
                _layerOptionsFromSource: {
                    title: layer.Title,
                    maxResolution: getResolutionFromScale(layer.MaxScaleDenominator),
                    minResolution: getResolutionFromScale(layer.MinScaleDenominator),
                    extent: extent,
                    metadata: {
                        url: metadata ? metadata.OnlineResource : undefined,
                        extern: metadata ? true : undefined,
                        abstract: abstract,
                        keywordList: keywordList
                    },
                    legendOptions: legendOptions
                },
                queryable: queryable,
                queryFormat: queryFormat,
                timeFilter: timeFilterable ? timeFilter : undefined,
                timeFilterable: timeFilterable ? true : undefined,
                minDate: timeFilterable ? timeFilter.min : undefined,
                maxDate: timeFilterable ? timeFilter.max : undefined,
                stepDate: timeFilterable ? timeFilter.step : undefined
            });
            return utils.ObjectUtils.mergeDeep(options, baseOptions);
        };
        CapabilitiesService.prototype.parseWMTSOptions = function (baseOptions, capabilities) {
            // Put Title source in _layerOptionsFromSource. (For source & catalog in _layerOptionsFromSource, if not already on config)
            var layer = capabilities.Contents.Layer.find(function (el) { return el.Identifier === baseOptions.layer; });
            var options = WMTS_js.optionsFromCapabilities(capabilities, baseOptions);
            var ouputOptions = Object.assign(options, baseOptions);
            var sourceOptions = utils.ObjectUtils.removeUndefined({
                _layerOptionsFromSource: {
                    title: layer.Title
                }
            });
            return utils.ObjectUtils.mergeDeep(sourceOptions, ouputOptions);
        };
        CapabilitiesService.prototype.parseCartoOptions = function (baseOptions, cartoOptions) {
            var layers = [];
            var params = cartoOptions.layers[1].options.layer_definition;
            params.layers.forEach(function (element) {
                layers.push({
                    type: element.type.toLowerCase(),
                    options: element.options,
                    legend: element.legend
                });
            });
            var options = utils.ObjectUtils.removeUndefined({
                config: {
                    version: params.version,
                    layers: layers
                }
            });
            return utils.ObjectUtils.mergeDeep(options, baseOptions);
        };
        CapabilitiesService.prototype.parseArcgisOptions = function (baseOptions, arcgisOptions, legend, serviceCapabilities) {
            var _a;
            var title = arcgisOptions.name;
            var legendInfo;
            if (legend.layers) {
                legendInfo = legend.layers.find(function (x) { return x.layerName === title; });
            }
            else if ((_a = arcgisOptions.drawingInfo) === null || _a === void 0 ? void 0 : _a.renderer) {
                legendInfo = arcgisOptions.drawingInfo.renderer;
            }
            else {
                legendInfo = undefined;
            }
            var style;
            if (arcgisOptions.drawingInfo) {
                var styleGenerator = new EsriStyleGenerator();
                var units = arcgisOptions.units === 'esriMeters' ? 'm' : 'degrees';
                style = styleGenerator.generateStyle(arcgisOptions, units);
            }
            var attributions = new olAttribution__default["default"]({
                target: arcgisOptions.copyrightText
            });
            var timeExtent;
            var timeFilter;
            if (arcgisOptions.timeInfo) {
                var time = arcgisOptions.timeInfo.timeExtent;
                timeExtent = time[0] + ',' + time[1];
                var min = new Date();
                min.setTime(time[0]);
                var max = new Date();
                max.setTime(time[1]);
                timeFilter = {
                    min: min.toUTCString(),
                    max: max.toUTCString(),
                    range: true,
                    type: exports.TimeFilterType.DATETIME,
                    style: exports.TimeFilterStyle.CALENDAR
                };
            }
            var params = Object.assign({}, {
                style: style,
                LAYERS: baseOptions.layer ? 'show:' + baseOptions.layer : undefined,
                time: timeExtent
            });
            var options = utils.ObjectUtils.removeUndefined({
                params: params,
                _layerOptionsFromSource: {
                    title: title,
                    minResolution: getResolutionFromScale(arcgisOptions.maxScale),
                    maxResolution: getResolutionFromScale(arcgisOptions.minScale),
                    metadata: {
                        extern: false,
                        abstract: arcgisOptions.description || serviceCapabilities.serviceDescription
                    },
                },
                legendInfo: legendInfo,
                timeFilter: timeFilter,
                sourceFields: arcgisOptions.fields,
                queryTitle: arcgisOptions.displayField
            });
            options.attributions = attributions;
            return utils.ObjectUtils.mergeDeep(options, baseOptions);
        };
        CapabilitiesService.prototype.parseTileOrImageArcgisOptions = function (baseOptions, arcgisOptions, legend, serviceCapabilities) {
            var title = arcgisOptions.name;
            var legendInfo = legend.layers ? legend.layers.find(function (x) { return x.layerName === title; }) : undefined;
            var attributions = new olAttribution__default["default"]({
                target: arcgisOptions.copyrightText
            });
            var timeExtent;
            var timeFilter;
            if (arcgisOptions.timeInfo) {
                var time = arcgisOptions.timeInfo.timeExtent;
                timeExtent = time[0] + ',' + time[1];
                var min = new Date();
                min.setTime(time[0]);
                var max = new Date();
                max.setTime(time[1]);
                timeFilter = {
                    min: min.toUTCString(),
                    max: max.toUTCString(),
                    range: true,
                    type: exports.TimeFilterType.DATETIME,
                    style: exports.TimeFilterStyle.CALENDAR
                };
            }
            var params = Object.assign({}, {
                LAYERS: baseOptions.layer ? 'show:' + baseOptions.layer : undefined,
                time: timeExtent
            });
            var options = utils.ObjectUtils.removeUndefined({
                params: params,
                _layerOptionsFromSource: {
                    title: title,
                    minResolution: getResolutionFromScale(arcgisOptions.maxScale),
                    maxResolution: getResolutionFromScale(arcgisOptions.minScale),
                    metadata: {
                        extern: false,
                        abstract: arcgisOptions.description || serviceCapabilities.serviceDescription
                    },
                },
                legendInfo: legendInfo,
                timeFilter: timeFilter,
                sourceFields: arcgisOptions.fields,
                queryTitle: arcgisOptions.displayField
            });
            options.attributions = attributions;
            return utils.ObjectUtils.mergeDeep(options, baseOptions);
        };
        CapabilitiesService.prototype.findDataSourceInCapabilities = function (layerArray, name) {
            var _this = this;
            if (Array.isArray(layerArray)) {
                var layer_1;
                layerArray.find(function (value) {
                    layer_1 = _this.findDataSourceInCapabilities(value, name);
                    return layer_1 !== undefined;
                }, this);
                return layer_1;
            }
            else if (layerArray.Layer) {
                return this.findDataSourceInCapabilities(layerArray.Layer, name);
            }
            else {
                if (layerArray.Name && layerArray.Name === name) {
                    return layerArray;
                }
                return undefined;
            }
        };
        CapabilitiesService.prototype.getTimeFilter = function (layer) {
            var dimension;
            if (layer.Dimension) {
                var timeFilter = {};
                dimension = layer.Dimension[0];
                if (dimension.values) {
                    var minMaxDim = dimension.values.split('/');
                    timeFilter.min = minMaxDim[0] !== undefined ? minMaxDim[0] : undefined;
                    timeFilter.max = minMaxDim[1] !== undefined ? minMaxDim[1] : undefined;
                    timeFilter.step = minMaxDim[2] !== undefined ? minMaxDim[2] : undefined;
                }
                if (dimension.default) {
                    timeFilter.value = dimension.default;
                }
                return timeFilter;
            }
        };
        CapabilitiesService.prototype.getStyle = function (Style) {
            var styleOptions = Style.map(function (style) {
                return {
                    name: style.Name,
                    title: style.Title
                };
            })
                // Handle repeat the style "default" in output  (MapServer or OpenLayer)
                .filter(function (item, index, self) { return self.findIndex(function (i) { return i.name === item.name; }) ===
                index; });
            var legendOptions = {
                stylesAvailable: styleOptions
            };
            return legendOptions;
        };
        return CapabilitiesService;
    }());
    CapabilitiesService.ɵfac = function CapabilitiesService_Factory(t) { return new (t || CapabilitiesService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(MapService)); };
    CapabilitiesService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: CapabilitiesService, factory: CapabilitiesService.ɵfac, providedIn: 'root' });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], CapabilitiesService.prototype, "getCapabilities", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CapabilitiesService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: MapService }]; }, { getCapabilities: [] });
    })();

    var OptionsService = /** @class */ (function () {
        function OptionsService() {
        }
        return OptionsService;
    }());

    /**
     * When injected, this service automatically registers and
     * projection defined in the application config. A custom projection
     * needs to be registered to be usable by OL.
     */
    var ProjectionService = /** @class */ (function () {
        function ProjectionService(config) {
            var _this = this;
            this.config = config;
            var projections = this.config.getConfig('projections') || [];
            projections.forEach(function (projection) {
                projection.alias = projection.alias ? projection.alias : projection.code;
                _this.registerProjection(projection);
            });
            // register all utm zones
            for (var utmZone = 1; utmZone < 61; utmZone++) {
                var code = utmZone < 10 ? "EPSG:3260" + utmZone : "EPSG:326" + utmZone;
                var def = "+proj=utm +zone=" + utmZone + " +datum=WGS84 +units=m +no_defs";
                var proj = { code: code, def: def, extent: undefined };
                this.registerProjection(proj);
            }
            // register all mtm zones
            for (var mtmZone = 1; mtmZone < 11; mtmZone++) {
                var code = mtmZone < 10 ? "EPSG:3218" + mtmZone : "EPSG:321" + (80 + mtmZone);
                var lon0 = void 0;
                if (Number(mtmZone) <= 2) {
                    lon0 = -50 - Number(mtmZone) * 3;
                }
                else if (Number(mtmZone) >= 12) {
                    lon0 = -81 - (Number(mtmZone) - 12) * 3;
                }
                else {
                    lon0 = -49.5 - Number(mtmZone) * 3;
                }
                var def = "+proj=tmerc +lat_0=0 +lon_0=" + lon0 + " +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"";
                var proj = { code: code, def: def, extent: undefined };
                this.registerProjection(proj);
            }
        }
        /**
         * Define a proj4 projection and register it in OL
         * @param projection Projection
         */
        ProjectionService.prototype.registerProjection = function (projection) {
            proj4__default["default"].defs(projection.code, projection.def);
            olproj4__namespace.register(proj4__default["default"]);
            if (projection.extent) {
                olproj__namespace.get(projection.code).setExtent(projection.extent);
            }
        };
        return ProjectionService;
    }());
    ProjectionService.ɵfac = function ProjectionService_Factory(t) { return new (t || ProjectionService)(i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    ProjectionService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: ProjectionService, factory: ProjectionService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ProjectionService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, null);
    })();

    var DataSourceService = /** @class */ (function () {
        function DataSourceService(capabilitiesService, optionsService, wfsDataSourceService, languageService, messageService, projectionService, authInterceptor) {
            this.capabilitiesService = capabilitiesService;
            this.optionsService = optionsService;
            this.wfsDataSourceService = wfsDataSourceService;
            this.languageService = languageService;
            this.messageService = messageService;
            this.projectionService = projectionService;
            this.authInterceptor = authInterceptor;
            this.datasources$ = new rxjs.BehaviorSubject([]);
        }
        DataSourceService.prototype.createAsyncDataSource = function (context, detailedContextUri) {
            if (!context.type) {
                console.error(context);
                throw new Error('Datasource needs a type');
            }
            var dataSource;
            switch (context.type.toLowerCase()) {
                case 'osm':
                    dataSource = this.createOSMDataSource(context);
                    break;
                case 'vector':
                    dataSource = this.createFeatureDataSource(context);
                    break;
                case 'wfs':
                    dataSource = this.createWFSDataSource(context);
                    break;
                case 'wms':
                    var wmsContext = context;
                    utils.ObjectUtils.removeDuplicateCaseInsensitive(wmsContext.params);
                    dataSource = this.createWMSDataSource(wmsContext, detailedContextUri);
                    break;
                case 'wmts':
                    dataSource = this.createWMTSDataSource(context);
                    break;
                case 'xyz':
                    dataSource = this.createXYZDataSource(context);
                    break;
                case 'tiledebug':
                    dataSource = this.createTileDebugDataSource(context);
                    break;
                case 'carto':
                    dataSource = this.createCartoDataSource(context);
                    break;
                case 'arcgisrest':
                    dataSource = this.createArcGISRestDataSource(context, detailedContextUri);
                    break;
                case 'imagearcgisrest':
                    dataSource = this.createArcGISRestImageDataSource(context, detailedContextUri);
                    break;
                case 'websocket':
                    dataSource = this.createWebSocketDataSource(context);
                    break;
                case 'mvt':
                    dataSource = this.createMVTDataSource(context);
                    break;
                case 'tilearcgisrest':
                    dataSource = this.createTileArcGISRestDataSource(context, detailedContextUri);
                    break;
                case 'cluster':
                    dataSource = this.createClusterDataSource(context);
                    break;
                default:
                    console.error(context);
                    throw new Error('Invalid datasource type');
            }
            this.datasources$.next(this.datasources$.value.concat([dataSource]));
            return dataSource;
        };
        DataSourceService.prototype.createOSMDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new OSMDataSource(context)); });
        };
        DataSourceService.prototype.createFeatureDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new FeatureDataSource(context)); });
        };
        DataSourceService.prototype.createWebSocketDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new WebSocketDataSource(context)); });
        };
        DataSourceService.prototype.createWFSDataSource = function (context) {
            var _this = this;
            return new rxjs.Observable(function (d) { return d.next(new WFSDataSource(context, _this.wfsDataSourceService, _this.authInterceptor)); });
        };
        DataSourceService.prototype.createWMSDataSource = function (context, detailedContextUri) {
            var _this = this;
            var observables = [];
            if (context.optionsFromCapabilities) {
                observables.push(this.capabilitiesService.getWMSOptions(context).pipe(operators.catchError(function (e) {
                    var title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    var message = _this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
                    _this.messageService.error(message, title);
                    throw e;
                })));
            }
            if (this.optionsService && context.optionsFromApi === true) {
                observables.push(this.optionsService.getWMSOptions(context, detailedContextUri).pipe(operators.catchError(function (e) {
                    e.error.toDisplay = true;
                    e.error.title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    e.error.message = _this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                    return rxjs.of({});
                })));
            }
            observables.push(rxjs.of(context));
            return rxjs.forkJoin(observables).pipe(operators.map(function (options) {
                var optionsMerged = options.reduce(function (a, b) { return utils.ObjectUtils.mergeDeep(a, b); });
                return new WMSDataSource(optionsMerged, _this.wfsDataSourceService);
            }), operators.catchError(function () {
                return rxjs.of(undefined);
            }));
        };
        DataSourceService.prototype.createWMTSDataSource = function (context) {
            var _this = this;
            if (context.optionsFromCapabilities) {
                return this.capabilitiesService.getWMTSOptions(context).pipe(operators.map(function (options) {
                    return options ? new WMTSDataSource(options) : undefined;
                }), operators.catchError(function () {
                    var title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    var message = _this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.layer });
                    _this.messageService.error(message, title);
                    return rxjs.of(undefined);
                }));
            }
            return new rxjs.Observable(function (d) { return d.next(new WMTSDataSource(context)); });
        };
        DataSourceService.prototype.createXYZDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new XYZDataSource(context)); });
        };
        DataSourceService.prototype.createTileDebugDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new TileDebugDataSource(context)); });
        };
        DataSourceService.prototype.createCartoDataSource = function (context) {
            if (context.mapId) {
                return this.capabilitiesService
                    .getCartoOptions(context)
                    .pipe(operators.map(function (options) { return new CartoDataSource(options); }));
            }
            return new rxjs.Observable(function (d) { return d.next(new CartoDataSource(context)); });
        };
        DataSourceService.prototype.createArcGISRestDataSource = function (context, detailedContextUri) {
            var _this = this;
            var observables = [];
            observables.push(this.capabilitiesService.getArcgisOptions(context).pipe(operators.catchError(function (e) {
                var title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                var message = _this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.layer });
                _this.messageService.error(message, title);
                throw e;
            })));
            if (this.optionsService && context.optionsFromApi === true) {
                observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(operators.catchError(function (e) {
                    e.error.toDisplay = true;
                    e.error.title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    e.error.message = _this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                    return rxjs.of({});
                })));
            }
            observables.push(rxjs.of(context));
            return rxjs.forkJoin(observables).pipe(operators.map(function (options) {
                var optionsMerged = options.reduce(function (a, b) { return utils.ObjectUtils.mergeDeep(a, b); });
                return new ArcGISRestDataSource(optionsMerged);
            }), operators.catchError(function () {
                return rxjs.of(undefined);
            }));
        };
        DataSourceService.prototype.createArcGISRestImageDataSource = function (context, detailedContextUri) {
            var _this = this;
            var observables = [];
            observables.push(this.capabilitiesService.getImageArcgisOptions(context).pipe(operators.catchError(function (e) {
                var title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                var message = _this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
                _this.messageService.error(message, title);
                throw e;
            })));
            if (this.optionsService && context.optionsFromApi === true) {
                observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(operators.catchError(function (e) {
                    e.error.toDisplay = true;
                    e.error.title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    e.error.message = _this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                    return rxjs.of({});
                })));
            }
            observables.push(rxjs.of(context));
            return rxjs.forkJoin(observables).pipe(operators.map(function (options) {
                var optionsMerged = options.reduce(function (a, b) { return utils.ObjectUtils.mergeDeep(a, b); });
                return new ImageArcGISRestDataSource(optionsMerged);
            }), operators.catchError(function () {
                return rxjs.of(undefined);
            }));
        };
        DataSourceService.prototype.createTileArcGISRestDataSource = function (context, detailedContextUri) {
            var _this = this;
            var observables = [];
            observables.push(this.capabilitiesService.getImageArcgisOptions(context).pipe(operators.catchError(function (e) {
                var title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                var message = _this.languageService.translate.instant('igo.geo.dataSource.unavailable', { value: context.params.LAYERS });
                _this.messageService.error(message, title);
                throw e;
            })));
            if (this.optionsService && context.optionsFromApi === true) {
                observables.push(this.optionsService.getArcgisRestOptions(context, detailedContextUri).pipe(operators.catchError(function (e) {
                    e.error.toDisplay = true;
                    e.error.title = _this.languageService.translate.instant('igo.geo.dataSource.unavailableTitle');
                    e.error.message = _this.languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable');
                    return rxjs.of({});
                })));
            }
            observables.push(rxjs.of(context));
            return rxjs.forkJoin(observables).pipe(operators.map(function (options) {
                var optionsMerged = options.reduce(function (a, b) { return utils.ObjectUtils.mergeDeep(a, b); });
                return new TileArcGISRestDataSource(optionsMerged);
            }), operators.catchError(function () {
                return rxjs.of(undefined);
            }));
        };
        DataSourceService.prototype.createMVTDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new MVTDataSource(context)); });
        };
        DataSourceService.prototype.createClusterDataSource = function (context) {
            return new rxjs.Observable(function (d) { return d.next(new ClusterDataSource(context)); });
        };
        return DataSourceService;
    }());
    DataSourceService.ɵfac = function DataSourceService_Factory(t) { return new (t || DataSourceService)(i0__namespace.ɵɵinject(CapabilitiesService), i0__namespace.ɵɵinject(OptionsService, 8), i0__namespace.ɵɵinject(WFSService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(ProjectionService), i0__namespace.ɵɵinject(i5__namespace.AuthInterceptor)); };
    DataSourceService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: DataSourceService, factory: DataSourceService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DataSourceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () {
            return [{ type: CapabilitiesService }, { type: OptionsService, decorators: [{
                            type: i0.Optional
                        }] }, { type: WFSService }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.MessageService }, { type: ProjectionService }, { type: i5__namespace.AuthInterceptor }];
        }, null);
    })();

    var OptionsApiService = /** @class */ (function (_super) {
        __extends(OptionsApiService, _super);
        function OptionsApiService(http, options) {
            if (options === void 0) { options = {}; }
            var _this = _super.call(this) || this;
            _this.http = http;
            _this.urlApi = options.url || _this.urlApi;
            _this.provideContextUri = options.provideContextUri || _this.provideContextUri;
            return _this;
        }
        OptionsApiService.prototype.getWMSOptions = function (baseOptions, detailedContextUri) {
            if (!this.urlApi) {
                return rxjs.of({});
            }
            var params = new i1$2.HttpParams({
                fromObject: {
                    type: baseOptions.type,
                    url: baseOptions.url,
                    layers: baseOptions.params.LAYERS
                }
            });
            if (detailedContextUri && this.provideContextUri) {
                params = params.append('context', detailedContextUri);
            }
            var request = this.http.get(this.urlApi, {
                params: params
            });
            return request.pipe(operators.map(function (res) {
                if (!res || !res.sourceOptions) {
                    return {};
                }
                if (res.layerOptions) {
                    res.sourceOptions._layerOptionsFromSource = res.layerOptions;
                }
                return res.sourceOptions;
            }));
        };
        OptionsApiService.prototype.getArcgisRestOptions = function (baseOptions, detailedContextUri) {
            if (!this.urlApi) {
                return rxjs.of({});
            }
            var params = new i1$2.HttpParams({
                fromObject: {
                    type: baseOptions.type,
                    url: baseOptions.url,
                    layers: baseOptions.layer
                }
            });
            if (detailedContextUri && this.provideContextUri) {
                params = params.append('context', detailedContextUri);
            }
            var request = this.http.get(this.urlApi, {
                params: params
            });
            return request.pipe(operators.map(function (res) {
                if (!res || !res.sourceOptions) {
                    return {};
                }
                if (res.layerOptions) {
                    res.sourceOptions._layerOptionsFromSource = res.layerOptions;
                }
                return res.sourceOptions;
            }));
        };
        return OptionsApiService;
    }(OptionsService));
    OptionsApiService.ɵfac = function OptionsApiService_Factory(t) { return new (t || OptionsApiService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject('options')); };
    OptionsApiService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: OptionsApiService, factory: OptionsApiService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OptionsApiService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }];
        }, null);
    })();

    function optionsApiFactory(http, configService) {
        return new OptionsApiService(http, configService.getConfig('optionsApi'));
    }
    function provideOptionsApi() {
        return {
            provide: OptionsService,
            useFactory: optionsApiFactory,
            deps: [i1$2.HttpClient, i2$1.ConfigService]
        };
    }

    /**
     * Create an Openlayers feature object out of a feature definition.
     * The output object has a reference to the feature id.
     * @param feature Feature definition
     * @param projectionOut Feature object projection
     * @returns OpenLayers feature object
     */
    function featureToOl(feature, projectionOut, getId) {
        getId = getId ? getId : i6.getEntityId;
        var olFormat = new OlGeoJSON__default["default"]();
        var olFeature = olFormat.readFeature(feature, {
            dataProjection: feature.projection,
            featureProjection: projectionOut
        });
        olFeature.setId(getId(feature));
        var title = i6.getEntityTitle(feature);
        if (title !== undefined) {
            olFeature.set('_title', title, true);
        }
        if (feature.extent !== undefined) {
            olFeature.set('_extent', feature.extent, true);
        }
        if (feature.projection !== undefined) {
            olFeature.set('_projection', feature.projection, true);
        }
        var mapTitle = i6.getEntityProperty(feature, 'meta.mapTitle');
        if (mapTitle !== undefined) {
            olFeature.set('_mapTitle', mapTitle, true);
        }
        olFeature.set('_entityRevision', i6.getEntityRevision(feature), true);
        var icon = i6.getEntityIcon(feature);
        if (icon !== undefined) {
            olFeature.set('_icon', icon, true);
        }
        if (feature.meta && feature.meta.style) {
            olFeature.set('_style', feature.meta.style, true);
        }
        if (feature.sourceId) {
            olFeature.set('_sourceId', feature.sourceId, true);
        }
        return olFeature;
    }
    function renderFeatureFromOl(olRenderFeature, projectionIn, olLayer, projectionOut) {
        if (projectionOut === void 0) { projectionOut = 'EPSG:4326'; }
        var geom;
        var title;
        var exclude;
        var excludeOffline;
        if (olLayer) {
            title = olLayer.get('title');
            if (olLayer.get('sourceOptions')) {
                exclude = olLayer.get('sourceOptions').excludeAttribute;
                excludeOffline = olLayer.get('sourceOptions').excludeAttributeOffline;
            }
        }
        else {
            title = olRenderFeature.get('_title');
        }
        var olFormat = new OlGeoJSON__default["default"]();
        var properties = olRenderFeature.getProperties();
        var geometryType = olRenderFeature.getType();
        if (geometryType === 'Polygon') {
            var ends = olRenderFeature.getEnds();
            geom = new OlPolygon__default["default"](olRenderFeature.getFlatCoordinates(), OlGeometryLayout__default["default"].XY, ends);
        }
        else if (geometryType === 'Point') {
            geom = new OlPoint__default["default"](olRenderFeature.getFlatCoordinates(), OlGeometryLayout__default["default"].XY);
        }
        else if (geometryType === 'LineString') {
            geom = new OlLineString__default["default"](olRenderFeature.getFlatCoordinates(), OlGeometryLayout__default["default"].XY);
        }
        var geometry = olFormat.writeGeometryObject(geom, {
            dataProjection: projectionOut,
            featureProjection: projectionIn
        });
        var id = olRenderFeature.getId() ? olRenderFeature.getId() : utils.uuid();
        var mapTitle = olRenderFeature.get('_mapTitle');
        var extent = olproj__namespace.transformExtent(olRenderFeature.getExtent(), projectionIn, projectionOut);
        return {
            type: FEATURE,
            projection: projectionOut,
            extent: extent,
            meta: {
                id: id,
                title: title ? title : mapTitle ? mapTitle : id,
                mapTitle: mapTitle,
                excludeAttribute: exclude,
                excludeAttributeOffline: excludeOffline
            },
            properties: properties,
            geometry: geometry,
            ol: olRenderFeature
        };
    }
    /**
     * Create a feature object out of an OL feature
     * The output object has a reference to the feature id.
     * @param olFeature OL Feature
     * @param projectionIn OL feature projection
     * @param olLayer OL Layer
     * @param projectionOut Feature projection
     * @returns Feature
     */
    function featureFromOl(olFeature, projectionIn, olLayer, projectionOut) {
        if (projectionOut === void 0) { projectionOut = 'EPSG:4326'; }
        var title;
        var exclude;
        var excludeOffline;
        var idColumn; // for arcgisrest and tilearcgisrest source
        var olFormat = new OlGeoJSON__default["default"]();
        var keys = olFeature.getKeys().filter(function (key) {
            return !key.startsWith('_') && key !== 'geometry';
        });
        var properties = keys.reduce(function (acc, key) {
            acc[key] = olFeature.get(key);
            return acc;
        }, {});
        var geometry = olFormat.writeGeometryObject(olFeature.getGeometry(), {
            dataProjection: projectionOut,
            featureProjection: projectionIn
        });
        if (olLayer) {
            title = olLayer.get('title');
            var sourceOptions = olLayer.get('sourceOptions');
            if (sourceOptions) {
                exclude = sourceOptions.excludeAttribute;
                excludeOffline = sourceOptions.excludeAttributeOffline;
                idColumn =
                    sourceOptions.idColumn ||
                        ((sourceOptions.type === 'arcgisrest' || sourceOptions.type === 'tilearcgisrest') ? 'OBJECTID' : undefined);
            }
        }
        else {
            title = olFeature.get('_title');
        }
        var mapTitle = olFeature.get('_mapTitle');
        var id = olFeature.getId() ? olFeature.getId() : olFeature.get(idColumn) ? olFeature.get(idColumn) : utils.uuid();
        var newFeature = olFeature.get('_newFeature');
        return {
            type: FEATURE,
            projection: projectionOut,
            extent: olFeature.get('_extent'),
            meta: {
                id: id,
                title: title ? title : mapTitle ? mapTitle : id,
                mapTitle: mapTitle,
                revision: olFeature.getRevision(),
                style: olFeature.get('_style'),
                excludeAttribute: exclude,
                excludeAttributeOffline: excludeOffline
            },
            properties: properties,
            geometry: geometry,
            ol: olFeature
        };
    }
    /**
     * Compute an OL feature extent in it's map projection
     * @param map Map
     * @param olFeature OL feature
     * @returns Extent in the map projection
     */
    function computeOlFeatureExtent(map, olFeature) {
        var olExtent = olextent__namespace.createEmpty();
        var olFeatureExtent = olFeature.get('_extent');
        var olFeatureProjection = olFeature.get('_projection');
        if (olFeatureExtent !== undefined && olFeatureProjection !== undefined) {
            olExtent = olproj__namespace.transformExtent(olFeatureExtent, olFeatureProjection, map.projection);
        }
        else {
            var olGeometry = olFeature.getGeometry();
            if (olGeometry !== null) {
                olExtent = olGeometry.getExtent();
            }
        }
        return olExtent;
    }
    /**
     * Compute a multiple OL features extent in their map projection
     * @param map Map
     * @param olFeatures OL features
     * @returns Extent in the map projection
     */
    function computeOlFeaturesExtent(map, olFeatures) {
        var extent = olextent__namespace.createEmpty();
        olFeatures.forEach(function (olFeature) {
            var featureExtent = computeOlFeatureExtent(map, olFeature);
            olextent__namespace.extend(extent, featureExtent);
        });
        return extent;
    }
    /**
     * Scale an extent.
     * @param extent Extent
     * @param Scaling factors for top, right, bottom and left directions, in that order
     * @returns Scaled extent
     */
    function scaleExtent(extent, scale) {
        var _a = __read(olextent__namespace.getSize(extent), 2), width = _a[0], height = _a[1];
        return [
            scale[3] ? extent[0] - width * scale[3] : extent[0],
            scale[2] ? extent[1] - height * scale[2] : extent[1],
            scale[1] ? extent[2] + width * scale[1] : extent[2],
            scale[0] ? extent[3] + height * scale[0] : extent[3]
        ];
    }
    /**
     * Return true if features are out of view.
     * If features are too close to the edge, they are considered out of view.
     * We define the edge as 5% of the extent size.
     * @param map Map
     * @param featuresExtent The features's extent
     * @returns Return true if features are out of view
     */
    function featuresAreOutOfView(map, featuresExtent) {
        var mapExtent = map.viewController.getExtent();
        var edgeRatio = 0.05;
        var scale = [-1, -1, -1, -1].map(function (x) { return x * edgeRatio; });
        var viewExtent = scaleExtent(mapExtent, scale);
        return !olextent__namespace.containsExtent(viewExtent, featuresExtent);
    }
    /**
     * Return true if features are too deep into the view. This results
     * in features being too small.
     * Features are considered too small if their extent occupies less than
     * 1% of the map extent.
     * @param map Map
     * @param featuresExtent The features's extent
     * @param areaRatio The features extent to view extent acceptable ratio
     * @returns Return true if features are too deep in the view
     */
    function featuresAreTooDeepInView(map, featuresExtent, areaRatio) {
        // An area ratio of 0.004 means that the feature extent's width and height
        // should be about 1/16 of the map extent's width and height
        areaRatio = areaRatio ? areaRatio : 0.004;
        var mapExtent = map.viewController.getExtent();
        var mapExtentArea = olextent__namespace.getArea(mapExtent);
        var featuresExtentArea = olextent__namespace.getArea(featuresExtent);
        if (featuresExtentArea === 0 && map.viewController.getZoom() > 13) {
            // In case it's a point
            return false;
        }
        return featuresExtentArea / mapExtentArea < areaRatio;
    }
    /**
     * Fit view to include the features extent.
     * By default, this method will let the features occupy about 50% of the viewport.
     * @param map Map
     * @param olFeatures OL features
     * @param motion To motion to the new map view
     * @param scale If this is defined, the original view will be scaled
     *  by that factor before any logic is applied.
     */
    function moveToOlFeatures(map, olFeatures, motion, scale, areaRatio) {
        if (motion === void 0) { motion = exports.FeatureMotion.Default; }
        var featuresExtent = computeOlFeaturesExtent(map, olFeatures);
        var viewExtent = featuresExtent;
        if (scale !== undefined) {
            viewExtent = scaleExtent(viewExtent, scale);
        }
        if (motion === exports.FeatureMotion.Zoom) {
            map.viewController.zoomToExtent(viewExtent);
        }
        else if (motion === exports.FeatureMotion.Move) {
            map.viewController.moveToExtent(viewExtent);
        }
        else if (motion === exports.FeatureMotion.Default) {
            if (featuresAreOutOfView(map, featuresExtent) ||
                featuresAreTooDeepInView(map, featuresExtent, areaRatio)) {
                map.viewController.zoomToExtent(viewExtent);
            }
        }
    }
    /**
     * Hide an OL feature
     * @param olFeature OL feature
     */
    function hideOlFeature(olFeature) {
        olFeature.setStyle(new olstyle__namespace.Style({}));
    }
    /**
     * Try to bind a layer to a store if none is bound already.
     * The layer will also be added to the store's map.
     * If no layer is given to that function, a basic one will be created.
     * @param store The store to bind the layer
     * @param layer An optional VectorLayer
     */
    function tryBindStoreLayer(store, layer) {
        if (store.layer !== undefined) {
            if (store.layer.map === undefined) {
                store.map.addLayer(store.layer);
            }
            return;
        }
        layer = layer
            ? layer
            : new VectorLayer({
                source: new FeatureDataSource()
            });
        store.bindLayer(layer);
        if (store.layer.map === undefined) {
            store.map.addLayer(store.layer);
        }
    }
    /**
     * Compute a diff between a source array of Ol features and a target array
     * @param source Source array of OL features
     * @param starget Target array of OL features
     * @returns Features to add and remove
     */
    function computeOlFeaturesDiff(source, target) {
        var olFeaturesMap = new Map();
        target.forEach(function (olFeature) {
            olFeaturesMap.set(olFeature.getId(), olFeature);
        });
        var olFeaturesToRemove = [];
        source.forEach(function (olFeature) {
            var newOlFeature = olFeaturesMap.get(olFeature.getId());
            if (newOlFeature === undefined) {
                olFeaturesToRemove.push(olFeature);
            }
            else if (newOlFeature.get('_entityRevision') !== olFeature.get('_entityRevision')) {
                olFeaturesToRemove.push(olFeature);
            }
            else {
                olFeaturesMap.delete(newOlFeature.getId());
            }
        });
        var olFeaturesToAddIds = Array.from(olFeaturesMap.keys());
        var olFeaturesToAdd = target.filter(function (olFeature) {
            return olFeaturesToAddIds.indexOf(olFeature.getId()) >= 0;
        });
        return {
            add: olFeaturesToAdd,
            remove: olFeaturesToRemove
        };
    }

    /**
     * The class is a specialized version of an EntityStore that stores
     * features and the map layer to display them on. Synchronization
     * between the store and the layer is handled by strategies.
     */
    var FeatureStore = /** @class */ (function (_super) {
        __extends(FeatureStore, _super);
        function FeatureStore(entities, options) {
            var _this = _super.call(this, entities, options) || this;
            _this.map = options.map;
            return _this;
        }
        Object.defineProperty(FeatureStore.prototype, "source", {
            /**
             * The layer's data source
             */
            get: function () {
                return this.layer ? this.layer.dataSource : undefined;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Bind this store to a vector layer
         * @param layer Vector layer
         * @returns Feature store
         */
        FeatureStore.prototype.bindLayer = function (layer) {
            this.layer = layer;
            return this;
        };
        /**
         * Set the layer's features and perform a motion to make them visible. Strategies
         * make extensive use of that method.
         * @param features Features
         * @param motion Optional: The type of motion to perform
         */
        FeatureStore.prototype.setLayerFeatures = function (features, motion, viewScale, areaRatio, getId) {
            var _this = this;
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            getId = getId ? getId : i6.getEntityId;
            this.checkLayer();
            var olFeatures = features
                .map(function (feature) { return featureToOl(feature, _this.map.projection, getId); });
            this.setLayerOlFeatures(olFeatures, motion, viewScale, areaRatio);
        };
        /**
         * Set the store's features from an array of OL features.
         * @param olFeatures Ol features
         */
        FeatureStore.prototype.setStoreOlFeatures = function (olFeatures) {
            var _this = this;
            this.checkLayer();
            var features = olFeatures.map(function (olFeature) {
                olFeature.set('_featureStore', _this, true);
                return featureFromOl(olFeature, _this.layer.map.projection);
            });
            this.load(features);
        };
        /**
         * Remove all features from the layer
         */
        FeatureStore.prototype.clearLayer = function () {
            this.checkLayer();
            this.source.ol.clear();
        };
        /**
         * Check wether a layer is bound or not and throw an error if not.
         */
        FeatureStore.prototype.checkLayer = function () {
            if (this.layer === undefined) {
                throw new Error('This FeatureStore is not bound to a layer.');
            }
        };
        /**
         * Set the layer's features and perform a motion to make them visible.
         * @param features Openlayers feature objects
         * @param motion Optional: The type of motion to perform
         */
        FeatureStore.prototype.setLayerOlFeatures = function (olFeatures, motion, viewScale, areaRatio) {
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            var olSource = this.layer.ol.getSource();
            var diff = computeOlFeaturesDiff(olSource.getFeatures(), olFeatures);
            if (diff.remove.length > 0) {
                this.removeOlFeaturesFromLayer(diff.remove);
            }
            if (diff.add.length > 0) {
                this.addOlFeaturesToLayer(diff.add);
            }
            if (diff.add.length > 0) {
                // If features are added, do a motion toward the newly added features
                moveToOlFeatures(this.map, diff.add, motion, viewScale, areaRatio);
            }
            else if (diff.remove.length > 0) {
                // Else, do a motion toward all the features
                moveToOlFeatures(this.map, olFeatures, motion, viewScale, areaRatio);
            }
        };
        /**
         * Add features to the the layer
         * @param features Openlayers feature objects
         */
        FeatureStore.prototype.addOlFeaturesToLayer = function (olFeatures) {
            var _this = this;
            olFeatures.forEach(function (olFeature) {
                olFeature.set('_featureStore', _this, true);
            });
            this.source.ol.addFeatures(olFeatures);
        };
        /**
         * Remove features from the the layer
         * @param features Openlayers feature objects
         */
        FeatureStore.prototype.removeOlFeaturesFromLayer = function (olFeatures) {
            var _this = this;
            olFeatures.forEach(function (olFeature) {
                _this.source.ol.removeFeature(olFeature);
            });
        };
        return FeatureStore;
    }(i6.EntityStore));

    /**
     * This strategy maintain the store features updated while the map is moved.
     * The features's state inside the map are tagged inMapExtent = true;
     */
    var FeatureStoreInMapExtentStrategy = /** @class */ (function (_super) {
        __extends(FeatureStoreInMapExtentStrategy, _super);
        function FeatureStoreInMapExtentStrategy(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            /**
             * Subscription to the store's OL source changes
             */
            _this.stores$$ = new Map();
            _this.states$$ = [];
            return _this;
        }
        /**
         * Bind this strategy to a store and start watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreInMapExtentStrategy.prototype.bindStore = function (store) {
            var _this = this;
            _super.prototype.bindStore.call(this, store);
            if (this.active === true) {
                this.watchStore(store);
            }
            this.empty$$ = store.empty$
                .pipe(operators.skipWhile(function (empty) { return !empty; }))
                .subscribe(function () { return _this.updateEntitiesInExtent(store); });
        };
        /**
         * Unbind this strategy from a store and stop watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreInMapExtentStrategy.prototype.unbindStore = function (store) {
            _super.prototype.unbindStore.call(this, store);
            if (this.active === true) {
                this.unwatchStore(store);
            }
        };
        /**
         * Start watching all stores already bound to that strategy at once.
         * @internal
         */
        FeatureStoreInMapExtentStrategy.prototype.doActivate = function () {
            var _this = this;
            this.stores.forEach(function (store) { return _this.watchStore(store); });
        };
        /**
         * Stop watching all stores bound to that strategy
         * @internal
         */
        FeatureStoreInMapExtentStrategy.prototype.doDeactivate = function () {
            this.unwatchAll();
        };
        /**
         * Watch for a store's  OL source changes
         * @param store Feature store
         */
        FeatureStoreInMapExtentStrategy.prototype.watchStore = function (store) {
            var _this = this;
            if (this.stores$$.has(store)) {
                return;
            }
            this.updateEntitiesInExtent(store);
            this.states$$.push(store.layer.map.viewController.state$.subscribe(function () {
                _this.updateEntitiesInExtent(store);
            }));
        };
        FeatureStoreInMapExtentStrategy.prototype.updateEntitiesInExtent = function (store) {
            var e_1, _c;
            var _a, _b;
            if ((_b = (_a = store === null || store === void 0 ? void 0 : store.layer) === null || _a === void 0 ? void 0 : _a.map) === null || _b === void 0 ? void 0 : _b.viewController) {
                store.state.updateAll({ inMapExtent: false });
                var mapExtent = store.layer.map.viewController.getExtent();
                var entitiesInMapExtent = [];
                var entitiesWithNoGeom = [];
                try {
                    for (var _d = __values(store.entities$.value), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var entity = _e.value;
                        if (entity.ol) {
                            if (olextent__namespace.intersects(entity.ol.getGeometry().getExtent(), mapExtent)) {
                                entitiesInMapExtent.push(entity);
                            }
                        }
                        else {
                            entitiesWithNoGeom.push(entity);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (entitiesInMapExtent.length > 0) {
                    store.state.updateMany(entitiesInMapExtent, { inMapExtent: true }, false);
                }
                if (entitiesWithNoGeom.length > 0) {
                    store.state.updateMany(entitiesWithNoGeom, { inMapExtent: true }, false);
                }
            }
        };
        /**
         * Stop watching for a store's OL source changes
         * @param store Feature store
         */
        FeatureStoreInMapExtentStrategy.prototype.unwatchStore = function (store) {
            var key = this.stores$$.get(store);
            if (key !== undefined) {
                this.stores$$.delete(store);
            }
        };
        /**
         * Stop watching for OL source changes in all stores.
         */
        FeatureStoreInMapExtentStrategy.prototype.unwatchAll = function () {
            this.stores$$.clear();
            this.states$$.map(function (state) { return state.unsubscribe(); });
            if (this.empty$$) {
                this.empty$$.unsubscribe();
            }
        };
        return FeatureStoreInMapExtentStrategy;
    }(i6.EntityStoreStrategy));

    /**
     * This strategy maintain the store features updated while the map is scrolled.
     * The features's state inside the map's resolution are tagged inMapResolution = true;
     */
    var FeatureStoreInMapResolutionStrategy = /** @class */ (function (_super) {
        __extends(FeatureStoreInMapResolutionStrategy, _super);
        function FeatureStoreInMapResolutionStrategy(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            /**
             * Subscription to the store's OL source changes
             */
            _this.stores$$ = new Map();
            _this.resolution$$ = [];
            return _this;
        }
        /**
         * Bind this strategy to a store and start watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreInMapResolutionStrategy.prototype.bindStore = function (store) {
            var _this = this;
            _super.prototype.bindStore.call(this, store);
            if (this.active === true) {
                this.watchStore(store);
            }
            this.empty$$ = store.empty$
                .subscribe(function () { return _this.updateEntitiesInResolution(store, store.layer.map.viewController.getResolution()); });
        };
        /**
         * Unbind this strategy from a store and stop watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreInMapResolutionStrategy.prototype.unbindStore = function (store) {
            _super.prototype.unbindStore.call(this, store);
            if (this.active === true) {
                this.unwatchStore(store);
            }
        };
        /**
         * Start watching all stores already bound to that strategy at once.
         * @internal
         */
        FeatureStoreInMapResolutionStrategy.prototype.doActivate = function () {
            var _this = this;
            this.stores.forEach(function (store) { return _this.watchStore(store); });
        };
        /**
         * Stop watching all stores bound to that strategy
         * @internal
         */
        FeatureStoreInMapResolutionStrategy.prototype.doDeactivate = function () {
            this.unwatchAll();
        };
        /**
         * Watch for a store's  OL source changes
         * @param store Feature store
         */
        FeatureStoreInMapResolutionStrategy.prototype.watchStore = function (store) {
            var _this = this;
            if (this.stores$$.has(store)) {
                return;
            }
            this.updateEntitiesInResolution(store, store.layer.map.viewController.getResolution());
            this.resolution$$.push(store.layer.map.viewController.resolution$.subscribe(function (res) {
                _this.updateEntitiesInResolution(store, res);
            }));
        };
        FeatureStoreInMapResolutionStrategy.prototype.updateEntitiesInResolution = function (store, mapResolution) {
            if (mapResolution > store.layer.minResolution && mapResolution < store.layer.maxResolution) {
                store.state.updateAll({ inMapResolution: true });
            }
            else {
                store.state.updateAll({ inMapResolution: false });
            }
        };
        /**
         * Stop watching for a store's OL source changes
         * @param store Feature store
         */
        FeatureStoreInMapResolutionStrategy.prototype.unwatchStore = function (store) {
            var key = this.stores$$.get(store);
            if (key !== undefined) {
                this.stores$$.delete(store);
            }
        };
        /**
         * Stop watching for OL source changes in all stores.
         */
        FeatureStoreInMapResolutionStrategy.prototype.unwatchAll = function () {
            this.stores$$.clear();
            this.resolution$$.map(function (state) { return state.unsubscribe(); });
            if (this.empty$$) {
                this.empty$$.unsubscribe();
            }
        };
        return FeatureStoreInMapResolutionStrategy;
    }(i6.EntityStoreStrategy));

    /**
     * This strategy loads a store's features into it's layer counterpart.
     * The store -> layer binding is a one-way binding. That means any entity
     * added to the store will be added to the layer but the opposite is false.
     *
     * Important: This strategy observes filtered entities, not raw entities. This
     * is not configurable yet.
     */
    var FeatureStoreLoadingStrategy = /** @class */ (function (_super) {
        __extends(FeatureStoreLoadingStrategy, _super);
        function FeatureStoreLoadingStrategy(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            /**
             * Subscription to the store's features
             */
            _this.stores$$ = new Map();
            _this.setMotion(options.motion);
            return _this;
        }
        /**
         * Bind this strategy to a store and start watching for entities changes
         * @param store Feature store
         */
        FeatureStoreLoadingStrategy.prototype.bindStore = function (store) {
            _super.prototype.bindStore.call(this, store);
            if (this.active === true) {
                this.watchStore(store);
            }
        };
        /**
         * Unbind this strategy from a store and stop watching for entities changes
         * @param store Feature store
         */
        FeatureStoreLoadingStrategy.prototype.unbindStore = function (store) {
            _super.prototype.unbindStore.call(this, store);
            if (this.active === true) {
                this.unwatchStore(store);
            }
        };
        /**
         * Define the motion to apply on load
         * @param motion Feature motion
         */
        FeatureStoreLoadingStrategy.prototype.setMotion = function (motion) {
            this.motion = motion;
        };
        /**
         * Start watching all stores already bound to that strategy at once.
         * @internal
         */
        FeatureStoreLoadingStrategy.prototype.doActivate = function () {
            var _this = this;
            this.stores.forEach(function (store) { return _this.watchStore(store); });
        };
        /**
         * Stop watching all stores bound to that strategy
         * @internal
         */
        FeatureStoreLoadingStrategy.prototype.doDeactivate = function () {
            this.unwatchAll();
        };
        /**
         * Watch for entities changes in a store.
         * Important: Never observe a store's sorted entities. It makes no sense
         * to display sorted entities (instead of unsorted) on a layer and it
         * would potentially result in a lot of useless computation.
         * @param store Feature store
         */
        FeatureStoreLoadingStrategy.prototype.watchStore = function (store) {
            var _this = this;
            if (this.stores$$.has(store)) {
                return;
            }
            var subscription = store.view.all$()
                .subscribe(function (features) { return _this.onFeaturesChange(features, store); });
            this.stores$$.set(store, subscription);
        };
        /**
         * Stop watching for entities changes in a store.
         * @param store Feature store
         */
        FeatureStoreLoadingStrategy.prototype.unwatchStore = function (store) {
            var subscription = this.stores$$.get(store);
            if (subscription !== undefined) {
                subscription.unsubscribe();
                this.stores$$.delete(store);
            }
        };
        /**
         * Stop watching for entities changes in all stores.
         */
        FeatureStoreLoadingStrategy.prototype.unwatchAll = function () {
            Array.from(this.stores$$.entries()).forEach(function (entries) {
                entries[1].unsubscribe();
            });
            this.stores$$.clear();
        };
        /**
         * Load features into a layer or clear the layer if the array of features is empty.
         * @param features Store filtered features
         * @param store Feature store
         */
        FeatureStoreLoadingStrategy.prototype.onFeaturesChange = function (features, store) {
            if (features.length === 0) {
                store.clearLayer();
            }
            else {
                store.setLayerFeatures(features, this.selectMotion(store), this.options.viewScale, this.options.areaRatio, this.options.getFeatureId);
            }
        };
        /**
         * Selects the best motion
         * @param store A FeatureStore to apply the motion
         * @returns The motion selected
         */
        FeatureStoreLoadingStrategy.prototype.selectMotion = function (store) {
            if (this.motion !== undefined) {
                return this.motion;
            }
            if (store.pristine === true) {
                // If features have just been loaded into the store, move/zoom on them
                return exports.FeatureMotion.Default;
            }
            else if (store.count > store.view.count) {
                // If features have been filtered, move/zoom on the remaining ones
                return exports.FeatureMotion.Default;
            }
            else {
                // On insert, update or delete, do nothing
                return exports.FeatureMotion.None;
            }
        };
        return FeatureStoreLoadingStrategy;
    }(i6.EntityStoreStrategy));

    /**
     * This strategy loads a layer's features into it's store counterpart.
     * The layer -> store binding is a one-way binding. That means any OL feature
     * added to the layer will be added to the store but the opposite is false.
     *
     * Important: In it's current state, this strategy is to meant to be combined
     * with a standard Loading strategy and it would probably cause recursion issues.
     */
    var FeatureStoreLoadingLayerStrategy = /** @class */ (function (_super) {
        __extends(FeatureStoreLoadingLayerStrategy, _super);
        function FeatureStoreLoadingLayerStrategy(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            /**
             * Subscription to the store's OL source changes
             */
            _this.stores$$ = new Map();
            return _this;
        }
        /**
         * Bind this strategy to a store and start watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreLoadingLayerStrategy.prototype.bindStore = function (store) {
            _super.prototype.bindStore.call(this, store);
            if (this.active === true) {
                this.watchStore(store);
            }
        };
        /**
         * Unbind this strategy from a store and stop watching for Ol source changes
         * @param store Feature store
         */
        FeatureStoreLoadingLayerStrategy.prototype.unbindStore = function (store) {
            _super.prototype.unbindStore.call(this, store);
            if (this.active === true) {
                this.unwatchStore(store);
            }
        };
        /**
         * Start watching all stores already bound to that strategy at once.
         * @internal
         */
        FeatureStoreLoadingLayerStrategy.prototype.doActivate = function () {
            var _this = this;
            this.stores.forEach(function (store) { return _this.watchStore(store); });
        };
        /**
         * Stop watching all stores bound to that strategy
         * @internal
         */
        FeatureStoreLoadingLayerStrategy.prototype.doDeactivate = function () {
            this.unwatchAll();
        };
        /**
         * Watch for a store's  OL source changes
         * @param store Feature store
         */
        FeatureStoreLoadingLayerStrategy.prototype.watchStore = function (store) {
            var _this = this;
            if (this.stores$$.has(store)) {
                return;
            }
            this.onSourceChanges(store);
            var olSource = store.layer.ol.getSource();
            olSource.on('change', function (event) {
                _this.onSourceChanges(store);
            });
        };
        /**
         * Stop watching for a store's OL source changes
         * @param store Feature store
         */
        FeatureStoreLoadingLayerStrategy.prototype.unwatchStore = function (store) {
            var key = this.stores$$.get(store);
            if (key !== undefined) {
                this.stores$$.delete(store);
            }
        };
        /**
         * Stop watching for OL source changes in all stores.
         */
        FeatureStoreLoadingLayerStrategy.prototype.unwatchAll = function () {
            Array.from(this.stores$$.entries()).forEach(function (entries) {
            });
            this.stores$$.clear();
        };
        /**
         * Load features from an OL source into a  store or clear the store if the source is empty
         * @param features Store filtered features
         * @param store Feature store
         */
        FeatureStoreLoadingLayerStrategy.prototype.onSourceChanges = function (store) {
            var olFeatures = store.layer.ol.getSource().getFeatures();
            if (store.layer.dataSource instanceof ClusterDataSource) {
                olFeatures = olFeatures.flatMap(function (cluster) { return cluster.get('features'); });
            }
            if (olFeatures.length === 0) {
                store.clear();
            }
            else {
                store.setStoreOlFeatures(olFeatures);
            }
        };
        return FeatureStoreLoadingLayerStrategy;
    }(i6.EntityStoreStrategy));

    var OlDragSelectInteraction = /** @class */ (function (_super) {
        __extends(OlDragSelectInteraction, _super);
        function OlDragSelectInteraction(options) {
            return _super.call(this, options) || this;
        }
        return OlDragSelectInteraction;
    }(OlDragBoxInteraction__default["default"]));
    /**
     * This strategy synchronizes a store and a layer selected entities.
     * The store <-> layer binding is a two-way binding.
     *
     * In many cases, a single strategy bound to multiple stores
     * will yield better results that multiple strategies with each their
     * own store. In the latter scenario, a click on overlapping features
     * would trigger the strategy of each layer and they would cancel
     * each other as well as move the map view around needlessly.
     */
    var FeatureStoreSelectionStrategy = /** @class */ (function (_super) {
        __extends(FeatureStoreSelectionStrategy, _super);
        function FeatureStoreSelectionStrategy(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.setMotion(options.motion);
            _this._overlayStore = _this.createOverlayStore();
            return _this;
        }
        Object.defineProperty(FeatureStoreSelectionStrategy.prototype, "map", {
            /**
             * The map the layers belong to
             */
            get: function () {
                return this.options.map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureStoreSelectionStrategy.prototype, "overlayStore", {
            /**
             * A feature store that'll contain the selected features. It has it's own
             * layer, shared by all the stores this staretgy is bound to.
             */
            get: function () {
                return this._overlayStore;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Bind this strategy to a store and force this strategy's
         * reactivation to properly setup watchers.
         * @param store Feature store
         */
        FeatureStoreSelectionStrategy.prototype.bindStore = function (store) {
            _super.prototype.bindStore.call(this, store);
            if (this.active === true) {
                // Force reactivation
                this.activate();
            }
        };
        /**
         * Unbind this strategy from a store and force this strategy's
         * reactivation to properly setup watchers.
         * @param store Feature store
         */
        FeatureStoreSelectionStrategy.prototype.unbindStore = function (store) {
            _super.prototype.unbindStore.call(this, store);
            if (this.active === true) {
                // Force reactivation
                this.activate();
            }
        };
        /**
         * Define the motion to apply on select
         * @param motion Feature motion
         */
        FeatureStoreSelectionStrategy.prototype.setMotion = function (motion) {
            this.motion = motion;
        };
        /**
         * Unselect all entities, from all stores
         */
        FeatureStoreSelectionStrategy.prototype.unselectAll = function () {
            this.stores.forEach(function (store) {
                store.state.updateAll({ selected: false });
            });
        };
        /**
         * Clear the overlay
         */
        FeatureStoreSelectionStrategy.prototype.clear = function () {
            this.overlayStore.source.ol.clear();
            this.overlayStore.clear();
        };
        /**
         * Deactivate the selection without removing the selection
         * overlay.
         */
        FeatureStoreSelectionStrategy.prototype.deactivateSelection = function () {
            this.unlistenToMapClick();
            this.removeDragBoxInteraction();
            this.unwatchAll();
        };
        /**
         * Add the overlay layer, setup the map click lsitener and
         * start watching for stores selection
         * @internal
         */
        FeatureStoreSelectionStrategy.prototype.doActivate = function () {
            this.addOverlayLayer();
            this.listenToMapClick();
            if (this.options.dragBox === true) {
                this.addDragBoxInteraction();
            }
            this.watchAll();
        };
        /**
         * Remove the overlay layer, remove the map click lsitener and
         * stop watching for stores selection
         * @internal
         */
        FeatureStoreSelectionStrategy.prototype.doDeactivate = function () {
            this.deactivateSelection();
            this.removeOverlayLayer();
        };
        /**
         * Create a single observable of all the stores. With a single observable,
         * features can be added all at once to the overlay layer and a single
         * motion can be performed. Multiple observable would have
         * a cancelling effect on each other.
         */
        FeatureStoreSelectionStrategy.prototype.watchAll = function () {
            var _this = this;
            this.unwatchAll();
            var stores$ = this.stores.map(function (store) {
                return store.stateView
                    .manyBy$(function (record) {
                    return record.state.selected === true;
                })
                    .pipe(operators.map(function (records) { return records.map(function (record) { return record.entity; }); }));
            });
            this.stores$$ = rxjs.combineLatest(stores$)
                .pipe(operators.debounceTime(5), operators.skip(1), // Skip intial selection
            operators.map(function (features) { return features.reduce(function (a, b) { return a.concat(b); }); }))
                .subscribe(function (features) { return _this.onSelectFromStore(features); });
        };
        /**
         * Stop watching for selection in all stores.
         */
        FeatureStoreSelectionStrategy.prototype.unwatchAll = function () {
            if (this.stores$$ !== undefined) {
                this.stores$$.unsubscribe();
            }
        };
        /**
         * Add a 'singleclick' listener to the map that'll allow selecting
         * features by clicking on the map. The selection will be performed
         * only on the layers bound to this strategy.
         */
        FeatureStoreSelectionStrategy.prototype.listenToMapClick = function () {
            var _this = this;
            this.mapClickListener = this.map.ol.on('singleclick', function (event) {
                _this.onMapClick(event);
            });
        };
        /**
         * Remove the map click listener
         */
        FeatureStoreSelectionStrategy.prototype.unlistenToMapClick = function () {
            olObservable.unByKey(this.mapClickListener);
        };
        /**
         * On map click, select feature at pixel
         * @param event OL MapBrowserPointerEvent
         */
        FeatureStoreSelectionStrategy.prototype.onMapClick = function (event) {
            var _this = this;
            var exclusive = !ctrlKeyDown(event);
            var reverse = !exclusive;
            var olFeatures = event.map.getFeaturesAtPixel(event.pixel, {
                hitTolerance: this.options.hitTolerance || 0,
                layerFilter: function (olLayer) {
                    var storeOlLayer = _this.stores.find(function (store) {
                        return store.layer.ol === olLayer;
                    });
                    return storeOlLayer !== undefined;
                }
            });
            this.onSelectFromMap(olFeatures, exclusive, reverse);
        };
        /**
         * Add a drag box interaction and, on drag box end, select features
         */
        FeatureStoreSelectionStrategy.prototype.addDragBoxInteraction = function () {
            var e_1, _a;
            var _this = this;
            var olDragSelectInteraction;
            var olInteractions = this.map.ol.getInteractions().getArray();
            try {
                // There can only be one dragbox interaction, so find the current one, if any
                // Don't keep a reference to the current dragbox because we don't want
                // to remove it when this startegy is deactivated
                for (var olInteractions_1 = __values(olInteractions), olInteractions_1_1 = olInteractions_1.next(); !olInteractions_1_1.done; olInteractions_1_1 = olInteractions_1.next()) {
                    var olInteraction = olInteractions_1_1.value;
                    if (olInteraction instanceof OlDragSelectInteraction) {
                        olDragSelectInteraction = olInteraction;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (olInteractions_1_1 && !olInteractions_1_1.done && (_a = olInteractions_1.return)) _a.call(olInteractions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // If no drag box interaction is found, create a new one and add it to the map
            if (olDragSelectInteraction === undefined) {
                olDragSelectInteraction = new OlDragSelectInteraction({
                    condition: ctrlKeyDown
                });
                this.map.ol.addInteraction(olDragSelectInteraction);
                this.olDragSelectInteraction = olDragSelectInteraction;
            }
            this.olDragSelectInteractionEndKey = olDragSelectInteraction.on('boxend', function (event) { return _this.onDragBoxEnd(event); });
        };
        /**
         * Remove drag box interaction
         */
        FeatureStoreSelectionStrategy.prototype.removeDragBoxInteraction = function () {
            if (this.olDragSelectInteractionEndKey !== undefined) {
                olObservable.unByKey(this.olDragSelectInteractionEndKey);
            }
            if (this.olDragSelectInteraction !== undefined) {
                this.map.ol.removeInteraction(this.olDragSelectInteraction);
            }
            this.olDragSelectInteraction = undefined;
        };
        /**
         * On dragbox end, select features in drag box
         * @param event OL MapBrowserPointerEvent
         */
        FeatureStoreSelectionStrategy.prototype.onDragBoxEnd = function (event) {
            var exclusive = !ctrlKeyDown(event.mapBrowserEvent);
            var target = event.target;
            var extent = target.getGeometry().getExtent();
            var olFeatures = this.stores.reduce(function (acc, store) {
                var olSource = store.layer.ol.getSource();
                acc.push.apply(acc, __spreadArray([], __read(olSource.getFeaturesInExtent(extent))));
                return acc;
            }, []);
            this.onSelectFromMap(olFeatures, exclusive, false);
        };
        /**
         * When features are selected from the store, add
         * them to this startegy's overlay layer (select on map)
         * @param features Store features
         */
        FeatureStoreSelectionStrategy.prototype.onSelectFromStore = function (features) {
            var motion = this.motion;
            var olOverlayFeatures = this.overlayStore.layer.ol
                .getSource()
                .getFeatures();
            var overlayFeaturesKeys = olOverlayFeatures.map(function (olFeature) { return olFeature.getId(); });
            var featuresKeys = features.map(this.overlayStore.getKey);
            var doMotion;
            if (features.length === 0) {
                doMotion = false;
            }
            else {
                doMotion =
                    overlayFeaturesKeys.length !== featuresKeys.length ||
                        !overlayFeaturesKeys.every(function (key) { return featuresKeys.indexOf(key) >= 0; });
            }
            this.overlayStore.setLayerFeatures(features, doMotion ? motion : exports.FeatureMotion.None, this.options.viewScale, this.options.areaRatio, this.options.getFeatureId);
        };
        /**
         * When features are selected from the map, also select them
         * in their store.
         * @param olFeatures OL feature objects
         */
        FeatureStoreSelectionStrategy.prototype.onSelectFromMap = function (olFeatures, exclusive, reverse) {
            var _this = this;
            var groupedFeatures = this.groupFeaturesByStore(olFeatures);
            this.stores.forEach(function (store) {
                var features = groupedFeatures.get(store);
                if (features === undefined && exclusive === true) {
                    _this.unselectAllFeaturesFromStore(store);
                }
                else if (features === undefined && exclusive === false) {
                    // Do nothing
                }
                else {
                    _this.selectFeaturesFromStore(store, features, exclusive, reverse);
                }
            });
        };
        /**
         * Select features in store
         * @param store: Feature store
         * @param features Features
         */
        FeatureStoreSelectionStrategy.prototype.selectFeaturesFromStore = function (store, features, exclusive, reverse) {
            if (reverse === true) {
                store.state.reverseMany(features, ['selected']);
            }
            else {
                store.state.updateMany(features, { selected: true }, exclusive);
            }
        };
        /**
         * Unselect all features from store
         * @param store: Feature store
         */
        FeatureStoreSelectionStrategy.prototype.unselectAllFeaturesFromStore = function (store) {
            store.state.updateAll({ selected: false });
        };
        /**
         * This method returns a store -> features mapping from a list
         * of OL selected features. OL features keep a reference to the store
         * they are from.
         * @param olFeatures: OL feature objects
         * @returns Store -> features mapping
         */
        FeatureStoreSelectionStrategy.prototype.groupFeaturesByStore = function (olFeatures) {
            var groupedFeatures = new Map();
            if (olFeatures === null || olFeatures === undefined) {
                return groupedFeatures;
            }
            olFeatures.forEach(function (olFeature) {
                var store = olFeature.get('_featureStore');
                if (store === undefined) {
                    return;
                }
                var features = groupedFeatures.get(store);
                if (features === undefined) {
                    features = [];
                    groupedFeatures.set(store, features);
                }
                var feature = store.get(olFeature.getId());
                if (feature !== undefined) {
                    features.push(feature);
                }
            });
            return groupedFeatures;
        };
        /**
         * Create an overlay store that'll contain the selected features.
         * @returns Overlay store
         */
        FeatureStoreSelectionStrategy.prototype.createOverlayStore = function () {
            var overlayLayer = this.options.layer
                ? this.options.layer
                : this.createOverlayLayer();
            return new FeatureStore([], { map: this.map }).bindLayer(overlayLayer);
        };
        /**
         * Create an overlay store that'll contain the selected features.
         * @returns Overlay layer
         */
        FeatureStoreSelectionStrategy.prototype.createOverlayLayer = function () {
            return new VectorLayer({
                zIndex: 300,
                source: new FeatureDataSource(),
                style: undefined,
                showInLayerList: false,
                exportable: false,
                browsable: false
            });
        };
        /**
         * Add the overlay store's layer to the map to display the selected
         * features.
         */
        FeatureStoreSelectionStrategy.prototype.addOverlayLayer = function () {
            if (this.overlayStore.layer.map === undefined) {
                this.map.addLayer(this.overlayStore.layer);
            }
        };
        /**
         * Remove the overlay layer from the map
         */
        FeatureStoreSelectionStrategy.prototype.removeOverlayLayer = function () {
            this.overlayStore.source.ol.clear();
            this.map.removeLayer(this.overlayStore.layer);
        };
        return FeatureStoreSelectionStrategy;
    }(i6.EntityStoreStrategy));

    /**
     * Try to add a loading strategy to a store and activate it.
     * If no strategy is given to that function, a basic one will be created.
     * @param store The store to bind the loading strategy
     * @param strategy An optional loading strategy
     */
    function tryAddLoadingStrategy(store, strategy) {
        if (store.getStrategyOfType(FeatureStoreLoadingStrategy) !== undefined) {
            store.activateStrategyOfType(FeatureStoreLoadingStrategy);
            return;
        }
        strategy = strategy ? strategy : new FeatureStoreLoadingStrategy({});
        store.addStrategy(strategy);
        strategy.activate();
    }
    /**
     * Try to add a selection strategy to a store and activate it.
     * If no strategy is given to that function, a basic one will be created.
     * @param store The store to bind the selection strategy
     * @param [strategy] An optional selection strategy
     */
    function tryAddSelectionStrategy(store, strategy) {
        if (store.getStrategyOfType(FeatureStoreSelectionStrategy) !== undefined) {
            store.activateStrategyOfType(FeatureStoreSelectionStrategy);
            return;
        }
        strategy = strategy
            ? strategy
            : new FeatureStoreSelectionStrategy({
                map: store.map
            });
        store.addStrategy(strategy);
        strategy.activate();
    }

    /**
     * Create a marker style for points
     * @returns Style
     */
    function createOverlayMarkerStyle(_a) {
        var _b = _a === void 0 ? {} : _a, text = _b.text, _c = _b.opacity, opacity = _c === void 0 ? 1 : _c, _d = _b.markerColor, markerColor = _d === void 0 ? [0, 161, 222] : _d, _e = _b.markerOutlineColor, markerOutlineColor = _e === void 0 ? [255, 255, 255] : _e;
        var iconColor;
        var svgIconColor;
        var svgOutlineColor;
        var svg;
        var isIE = /msie\s|trident\/|edge\//i.test(window.navigator.userAgent); // To fix IE11 svg bug (temporarly)
        var newColor = color.asArray(markerColor).slice(0);
        var newOutlineColor = color.asArray(markerOutlineColor).slice(0);
        if (newColor.length === 4 && (typeof markerColor !== 'string' || /^#[0-9A-F]{8}$/i.test(markerColor))) {
            opacity = newColor[3];
        }
        svgIconColor = "\"rgba(" + newColor[0] + "," + newColor[1] + "," + newColor[2] + "," + opacity + ")\"";
        iconColor = markerColor;
        svgOutlineColor = "\"rgb(" + newOutlineColor[0] + "," + newOutlineColor[1] + "," + newOutlineColor[2] + ")\"";
        svg =
            'data:image/svg+xml;utf8,<svg version="1.1" xmlns="http://www.w3.org/2000/svg" height="36" width="36" viewBox="0 0 36 36">' +
                '<path fill=' +
                svgIconColor +
                ' stroke=' +
                svgOutlineColor +
                " stroke-width=\"2\" d=\"M 17.692635,32.565644 C 15.71852,30.330584 13.290925,27.058065 11.6766,24.455732 9.3398623,20.688851 7.8905694,17.205334 7.6297492,14.728733 7.5616025,14.081649 7.5739557,12.528552 7.6513363,12.014724 8.1013861,9.0262716 9.8047068,6.3655569 12.310675,4.7364878 c 1.113691,-0.7239832 2.508083,-1.2834131 3.776687,-1.5152052 0.242945,-0.044389 0.451656,-0.09393 0.463804,-0.1100911 0.01215,-0.016161 0.638282,-0.025502 1.391411,-0.02076 1.088235,0.00685 1.450932,0.024316 1.766871,0.085071 2.650763,0.5097353 4.947142,1.8701891 6.498786,3.8501033 0.628018,0.8013587 1.297046,2.0200608 1.640967,2.9891872 0.191065,0.538399 0.427644,1.447408 0.477391,1.834287 0.0164,0.127546 0.0434,0.231902 0.06,0.231902 0.0166,0 0.03122,0.626135 0.03249,1.391411 0.0013,0.765276 -0.011,1.391411 -0.02726,1.391411 -0.01626,0 -0.05449,0.154049 -0.08495,0.342331 -0.08815,0.544879 -0.387235,1.721449 -0.604837,2.379406 -1.209421,3.656888 -4.014463,8.349762 -7.849521,13.132357 -0.790496,0.985807 -1.795217,2.167992 -1.842543,2.167992 -0.01896,0 -0.161766,-0.144111 -0.317336,-0.320246 z m 1.066937,-15.36525 c 0.133519,-0.02121 0.248766,-0.05657 0.256105,-0.07859 0.0073,-0.02202 0.04918,-0.03066 0.09298,-0.0192 0.0438,0.01145 0.107628,-0.0072 0.141834,-0.04137 0.03421,-0.03421 0.08456,-0.05474 0.111888,-0.04563 0.02733,0.0091 0.07703,-0.01077 0.110429,-0.04417 0.03341,-0.03341 0.08416,-0.05293 0.112796,-0.04338 0.02863,0.0095 0.08974,-0.01867 0.135802,-0.06271 0.04606,-0.04403 0.111902,-0.08625 0.146319,-0.09381 0.204084,-0.04483 0.762371,-0.519108 1.079463,-0.917027 0.26749,-0.335672 0.570987,-0.878795 0.529019,-0.946701 -0.01496,-0.0242 -0.0067,-0.044 0.01835,-0.044 0.05645,0 0.196809,-0.467982 0.158801,-0.529481 -0.01521,-0.02461 -0.0043,-0.04475 0.02427,-0.04475 0.03157,0 0.04365,-0.04329 0.03082,-0.11043 -0.01161,-0.06074 -0.0066,-0.110429 0.01124,-0.110429 0.01779,0 0.03235,-0.258405 0.03235,-0.574233 0,-0.315829 -0.01545,-0.574234 -0.03434,-0.574234 -0.01889,0 -0.02437,-0.03811 -0.01219,-0.08469 0.04412,-0.168712 -0.336329,-1.152668 -0.481536,-1.245401 -0.02327,-0.01486 -0.04022,-0.03992 -0.03765,-0.05568 0.01222,-0.07498 -0.156557,-0.318365 -0.406379,-0.586027 -0.295921,-0.317054 -0.773059,-0.690104 -0.83427,-0.652274 -0.0206,0.01273 -0.03745,0.0024 -0.03745,-0.02289 0,-0.06107 -0.433076,-0.2789369 -0.487546,-0.245273 -0.02338,0.01445 -0.04251,0.0068 -0.04251,-0.01695 0,-0.056281 -0.393995,-0.1865457 -0.613804,-0.2029397 -0.0943,-0.00703 -0.188579,-0.023183 -0.209503,-0.035888 -0.02092,-0.012705 -0.276571,-0.023337 -0.568105,-0.023627 -0.534044,-5.301e-4 -1.12638,0.091025 -1.12638,0.1741017 0,0.023781 -0.01713,0.032648 -0.03808,0.019705 -0.05054,-0.031232 -0.403641,0.1088602 -0.403641,0.1601422 0,0.02204 -0.01988,0.02779 -0.04417,0.01278 -0.0243,-0.01501 -0.04417,-0.0051 -0.04417,0.02209 0,0.02716 -0.01988,0.0371 -0.04417,0.02209 -0.0243,-0.01501 -0.04417,-0.0051 -0.04417,0.02209 0,0.02716 -0.01915,0.03755 -0.04256,0.02308 -0.02341,-0.01447 -0.08138,0.01252 -0.128834,0.05997 -0.04745,0.04745 -0.0974,0.07515 -0.111001,0.06155 -0.0136,-0.0136 -0.03722,0.0078 -0.05248,0.0476 -0.01526,0.03978 -0.0411,0.06408 -0.0574,0.054 -0.03277,-0.02025 -0.462299,0.323995 -0.491977,0.394291 -0.01026,0.02429 -0.07454,0.0912 -0.142856,0.148686 -0.248033,0.208705 -0.730279,0.974169 -0.672565,1.067553 0.0145,0.02346 0.0059,0.04266 -0.01914,0.04266 -0.05907,0 -0.241471,0.599428 -0.208527,0.685278 0.01385,0.0361 0.0044,0.06564 -0.02098,0.06564 -0.02539,0 -0.04169,0.0646 -0.03622,0.143558 0.0055,0.07896 -0.0042,0.213129 -0.02144,0.29816 -0.04741,0.233576 0.0511,1.055502 0.167516,1.397721 0.126048,0.370516 0.310099,0.740163 0.426484,0.856548 0.04776,0.04776 0.07554,0.08684 0.06174,0.08684 -0.0138,0 0.01516,0.05653 0.06436,0.125632 0.131301,0.184396 0.499365,0.587266 0.518785,0.567846 0.0092,-0.0092 0.09821,0.06081 0.197812,0.155562 0.09961,0.09475 0.190589,0.162786 0.202187,0.151188 0.0116,-0.0116 0.05991,0.01774 0.107361,0.06519 0.04745,0.04745 0.105426,0.07444 0.128834,0.05997 0.02341,-0.01447 0.04256,-0.0057 0.04256,0.01958 0,0.06106 0.344664,0.23496 0.399061,0.201341 0.02346,-0.0145 0.04266,-0.0059 0.04266,0.01914 0,0.05907 0.599429,0.241471 0.685279,0.208527 0.0361,-0.01385 0.06564,-0.0065 0.06564,0.01645 0,0.05196 1.079115,0.04833 1.413314,-0.0048 z\"></path>" +
                '</svg>';
        var src;
        if (isIE) {
            switch (markerColor) {
                case 'blue' || [0, 161, 222] || '#00a1de':
                    iconColor = 'blue';
                    break;
                case 'red' || '#f64139':
                    iconColor = 'red';
                    break;
                case 'yellow' || '#ffd700':
                    iconColor = 'yellow';
                    break;
                case 'green' || '#008000':
                    iconColor = 'green';
                    break;
                default:
                    iconColor = 'blue';
                    break;
            }
            src = './assets/igo2/geo/icons/place_' + iconColor + '_36px.svg';
        }
        else {
            src = svg;
        }
        return new olstyle__namespace.Style({
            image: new olstyle__namespace.Icon({
                src: svg,
                opacity: opacity,
                imgSize: [36, 36],
                anchor: [0.5, 0.92]
            }),
            text: new olstyle__namespace.Text({
                text: text,
                font: '12px Calibri,sans-serif',
                fill: new olstyle__namespace.Fill({ color: '#000' }),
                stroke: new olstyle__namespace.Stroke({ color: '#fff', width: 3 }),
                overflow: true
            })
        });
    }

    var StyleService = /** @class */ (function () {
        function StyleService() {
        }
        StyleService.prototype.createStyle = function (options) {
            if (!options) {
                return createOverlayMarkerStyle();
            }
            if (typeof options === 'function' || options instanceof olstyle__namespace.Style) {
                return options;
            }
            return this.parseStyle('style', options);
        };
        StyleService.prototype.parseStyle = function (key, value) {
            var _this = this;
            var styleOptions = {};
            var olCls = this.getOlCls(key);
            if (olCls && value instanceof Object) {
                Object.keys(value).forEach(function (_key) {
                    var olKey = _this.getOlKey(_key);
                    styleOptions[olKey] = _this.parseStyle(_key, value[_key]);
                });
                return new olCls(styleOptions);
            }
            else {
                return value;
            }
        };
        StyleService.prototype.getOlKey = function (key) {
            var olKey;
            switch (key.toLowerCase()) {
                case 'circle':
                case 'regularshape':
                case 'icon':
                    olKey = 'image';
                    break;
                default:
                    break;
            }
            return olKey || key;
        };
        StyleService.prototype.getOlCls = function (key) {
            var olCls = olstyle__namespace[key.charAt(0).toUpperCase() + key.slice(1)];
            if (key === 'regularshape') {
                olCls = olstyle__namespace.RegularShape;
            }
            if (key === 'backgroundFill') {
                olCls = olstyle__namespace.Fill;
            }
            if (key === 'backgroundStroke') {
                olCls = olstyle__namespace.Stroke;
            }
            return olCls;
        };
        StyleService.prototype.createStyleByAttribute = function (feature, styleByAttribute) {
            var _a;
            var style;
            var type = styleByAttribute.type ? styleByAttribute.type : this.guessTypeFeature(feature);
            var attribute = styleByAttribute.attribute;
            var data = styleByAttribute.data;
            var stroke = styleByAttribute.stroke;
            var width = styleByAttribute.width;
            var fill = styleByAttribute.fill;
            var anchor = styleByAttribute.anchor;
            var radius = styleByAttribute.radius;
            var icon = styleByAttribute.icon;
            var scale = styleByAttribute.scale;
            var size = data ? data.length : 0;
            var label = styleByAttribute.label ? styleByAttribute.label.attribute : undefined;
            var labelStyle = ((_a = styleByAttribute.label) === null || _a === void 0 ? void 0 : _a.style) ? this.parseStyle('text', styleByAttribute.label.style) : undefined;
            if (!labelStyle && label) {
                labelStyle = new olstyle__namespace.Text();
            }
            var baseStyle = styleByAttribute.baseStyle;
            if (labelStyle) {
                labelStyle.setText(this.getLabel(feature, label));
            }
            if (type === 'circle') {
                for (var i = 0; i < size; i++) {
                    var val = typeof feature.get(attribute) !== 'undefined' && feature.get(attribute) !== null
                        ? feature.get(attribute)
                        : '';
                    if (val === data[i] || val.toString().match(new RegExp(data[i], 'gmi'))) {
                        if (icon) {
                            style = [
                                new olstyle__namespace.Style({
                                    image: new olstyle__namespace.Icon({
                                        color: fill ? fill[i] : undefined,
                                        src: icon[i],
                                        scale: scale ? scale[i] : 1,
                                        anchor: anchor ? anchor[i] : [0.5, 0.5]
                                    }),
                                    text: labelStyle instanceof olstyle__namespace.Text ? labelStyle : undefined
                                })
                            ];
                            return style;
                        }
                        style = [
                            new olstyle__namespace.Style({
                                image: new olstyle__namespace.Circle({
                                    radius: radius ? radius[i] : 4,
                                    stroke: new olstyle__namespace.Stroke({
                                        color: stroke ? stroke[i] : 'black',
                                        width: width ? width[i] : 1
                                    }),
                                    fill: new olstyle__namespace.Fill({
                                        color: fill ? fill[i] : 'black'
                                    })
                                }),
                                text: labelStyle instanceof olstyle__namespace.Text ? labelStyle : undefined
                            })
                        ];
                        return style;
                    }
                }
                if (!feature.getStyle()) {
                    if (baseStyle) {
                        style = this.createStyle(baseStyle);
                        if (labelStyle) {
                            style.setText(labelStyle);
                        }
                        return style;
                    }
                    style = [
                        new olstyle__namespace.Style({
                            image: new olstyle__namespace.Circle({
                                radius: 4,
                                stroke: new olstyle__namespace.Stroke({
                                    color: 'black'
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: '#bbbbf2'
                                })
                            })
                        })
                    ];
                    return style;
                }
            }
            else if (type === 'regular') {
                for (var i = 0; i < size; i++) {
                    var val = typeof feature.get(attribute) !== 'undefined' && feature.get(attribute) !== null
                        ? feature.get(attribute)
                        : '';
                    if (val === data[i] || val.toString().match(new RegExp(data[i], 'gmi'))) {
                        style = [
                            new olstyle__namespace.Style({
                                stroke: new olstyle__namespace.Stroke({
                                    color: stroke ? stroke[i] : 'black',
                                    width: width ? width[i] : 1
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: fill ? fill[i] : 'rgba(255,255,255,0.4)'
                                }),
                                text: labelStyle instanceof olstyle__namespace.Text ? labelStyle : undefined
                            })
                        ];
                        return style;
                    }
                }
                if (feature instanceof OlFeature__default["default"]) {
                    if (!feature.getStyle()) {
                        if (baseStyle) {
                            style = this.createStyle(baseStyle);
                            if (labelStyle) {
                                style.setText(labelStyle);
                            }
                            return style;
                        }
                        style = [
                            new olstyle__namespace.Style({
                                stroke: new olstyle__namespace.Stroke({
                                    color: 'black'
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: '#bbbbf2'
                                })
                            })
                        ];
                        return style;
                    }
                }
            }
        };
        StyleService.prototype.createClusterStyle = function (feature, clusterParam, layerStyle) {
            var e_1, _b;
            if (clusterParam === void 0) { clusterParam = {}; }
            var style;
            var size = feature.get('features').length;
            if (size !== 1) {
                if (clusterParam.clusterRanges) {
                    try {
                        for (var _c = __values(clusterParam.clusterRanges), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var r = _d.value;
                            if ((!r.minRadius || r.minRadius <= size) &&
                                (!r.maxRadius || r.maxRadius >= size)) {
                                style = this.createStyle(r.style);
                                if (r.showRange) {
                                    var text = new olstyle__namespace.Text({
                                        text: size.toString(),
                                        fill: new olstyle__namespace.Fill({
                                            color: '#fff'
                                        })
                                    });
                                    style.setText(text);
                                }
                                if (r.dynamicRadius) {
                                    var clusterRadius = void 0;
                                    var radiusMin = style.getRadius();
                                    clusterRadius = 5 * Math.log(size);
                                    if (clusterRadius < radiusMin) {
                                        clusterRadius = radiusMin;
                                    }
                                    style.image_.setRadius(clusterRadius);
                                }
                                break;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                if (!style) {
                    var clusterRadius = void 0;
                    if (clusterParam.radiusCalc) {
                        clusterRadius = clusterParam.radiusCalc(size);
                    }
                    else {
                        var radiusMin = 6;
                        clusterRadius = 5 * Math.log(size);
                        if (clusterRadius < radiusMin) {
                            clusterRadius = radiusMin;
                        }
                    }
                    style = [
                        new olstyle__namespace.Style({
                            image: new olstyle__namespace.Circle({
                                radius: clusterRadius,
                                stroke: new olstyle__namespace.Stroke({
                                    color: 'black'
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: 'rgba(24, 134, 45, 0.5)'
                                })
                            }),
                            text: new olstyle__namespace.Text({
                                text: size.toString(),
                                fill: new olstyle__namespace.Fill({
                                    color: '#fff'
                                })
                            })
                        })
                    ];
                }
            }
            else {
                style = this.createStyle(layerStyle);
            }
            return style;
        };
        StyleService.prototype.getLabel = function (feature, labelMatch) {
            var label = labelMatch;
            if (!label) {
                return;
            }
            var labelToGet = Array.from(labelMatch.matchAll(/\$\{([^\{\}]+)\}/g));
            labelToGet.forEach(function (v) {
                label = label.replace(v[0], feature.get(v[1]));
            });
            // Nothing done? check feature's attribute
            if (labelToGet.length === 0 && label === labelMatch) {
                label = feature.get(labelMatch) || labelMatch;
            }
            return label;
        };
        StyleService.prototype.guessTypeFeature = function (feature) {
            switch (feature.getGeometry().getType()) {
                case 'Point':
                case 'MultiPoint':
                case 'Circle':
                    return 'circle';
                default:
                    return 'regular';
            }
        };
        return StyleService;
    }());
    StyleService.ɵfac = function StyleService_Factory(t) { return new (t || StyleService)(); };
    StyleService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: StyleService, factory: StyleService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(StyleService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], null, null);
    })();

    /**
     * Create an overlay layer and it's source
     * @returns Overlay layer
     */
    function createOverlayLayer() {
        var overlayDataSource = new FeatureDataSource();
        return new VectorLayer({
            title: 'Overlay',
            zIndex: 300,
            source: overlayDataSource,
            style: createOverlayLayerStyle()
        });
    }
    /**
     * Create an overlay style with markers for points and a basic stroke/fill
     * combination for lines and polygons
     * @returns Style function
     */
    function createOverlayLayerStyle() {
        var defaultStyle = createOverlayDefaultStyle();
        var markerStyle = createOverlayMarkerStyle();
        var style;
        return function (olFeature) {
            if (olFeature.getId() === 'bufferFeature') {
                style = createBufferStyle(olFeature.get('bufferStroke'), 2, olFeature.get('bufferFill'), olFeature.get('bufferText'));
                return style;
            }
            else {
                var customStyle = olFeature.get('_style');
                if (customStyle) {
                    var styleService = new StyleService();
                    return styleService.createStyle(customStyle);
                }
                var geometryType = olFeature.getGeometry().getType();
                style = geometryType === 'Point' ? markerStyle : defaultStyle;
                style.getText().setText(olFeature.get('_mapTitle'));
                return style;
            }
        };
    }
    /**
     * Create a basic style for lines and polygons
     * @returns Style
     */
    function createOverlayDefaultStyle(_a) {
        var _b = _a === void 0 ? {} : _a, text = _b.text, _c = _b.strokeWidth, strokeWidth = _c === void 0 ? 2 : _c, _d = _b.fillColor, fillColor = _d === void 0 ? [0, 161, 222, 0.3] : _d, _e = _b.strokeColor, strokeColor = _e === void 0 ? [0, 161, 222, 0.9] : _e;
        var fillWithOpacity = color.asArray(fillColor).slice(0);
        var strokeWithOpacity = color.asArray(strokeColor).slice(0);
        var stroke = new olstyle__namespace.Stroke({
            width: strokeWidth,
            color: strokeWithOpacity
        });
        var fill = new olstyle__namespace.Fill({
            color: fillWithOpacity
        });
        return new olstyle__namespace.Style({
            stroke: stroke,
            fill: fill,
            image: new olstyle__namespace.Circle({
                radius: 5,
                stroke: stroke,
                fill: fill
            }),
            text: new olstyle__namespace.Text({
                text: text,
                font: '12px Calibri,sans-serif',
                fill: new olstyle__namespace.Fill({ color: '#000' }),
                stroke: new olstyle__namespace.Stroke({ color: '#fff', width: 3 }),
                overflow: true
            })
        });
    }
    function createBufferStyle(strokeRGBA, strokeWidth, fillRGBA, bufferRadius) {
        if (strokeRGBA === void 0) { strokeRGBA = [0, 161, 222, 1]; }
        if (strokeWidth === void 0) { strokeWidth = 2; }
        if (fillRGBA === void 0) { fillRGBA = [0, 161, 222, 0.15]; }
        var stroke = new olstyle__namespace.Stroke({
            width: strokeWidth,
            color: strokeRGBA
        });
        var fill = new olstyle__namespace.Fill({
            color: fillRGBA
        });
        return new olstyle__namespace.Style({
            stroke: stroke,
            fill: fill,
            image: new olstyle__namespace.Circle({
                radius: 5,
                stroke: stroke,
                fill: fill
            }),
            text: new olstyle__namespace.Text({
                font: '12px Calibri,sans-serif',
                text: bufferRadius,
                fill: new olstyle__namespace.Fill({ color: '#000' }),
                stroke: new olstyle__namespace.Stroke({ color: '#fff', width: 3 }),
                overflow: true
            })
        });
    }

    /**
     * This class is simply a shortcut for adding features to a map.
     * It does nothing more than a standard layer but it's shipped with
     * a defautl style based on the geometry type of the features it contains.
     * @todo Enhance that by using a FeatureStore and strategies.
     */
    var Overlay = /** @class */ (function () {
        function Overlay(map) {
            this.layer = createOverlayLayer();
            this.setMap(map);
        }
        Object.defineProperty(Overlay.prototype, "dataSource", {
            /**
             * Overlay layer's data source
             */
            get: function () {
                return this.layer.dataSource;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Bind this to a map and add the overlay layer to that map
         * @param map Map
         */
        Overlay.prototype.setMap = function (map) {
            if (map === undefined) {
                if (this.map !== undefined) {
                    this.map.ol.removeLayer(this.layer.ol);
                }
            }
            else {
                map.ol.addLayer(this.layer.ol);
            }
            this.map = map;
        };
        /**
         * Set the overlay features and, optionally, move to them
         * @param features Features
         * @param motion Optional: Apply this motion to the map view
         * @param sourceId Optional: Remove features of certain sourceId (ex: 'Map' for query features)
         */
        Overlay.prototype.setFeatures = function (features, motion, sourceId) {
            var e_1, _a;
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            if (sourceId) {
                try {
                    for (var _b = __values(this.dataSource.ol.getFeatures()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var olFeature = _c.value;
                        if (olFeature.get('_sourceId') === sourceId) {
                            this.removeOlFeature(olFeature);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                this.clear();
            }
            this.addFeatures(features, motion);
        };
        /**
         * Add a feature to the  overlay and, optionally, move to it
         * @param feature Feature
         * @param motion Optional: Apply this motion to the map view
         */
        Overlay.prototype.addFeature = function (feature, motion) {
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            this.addFeatures([feature], motion);
        };
        /**
         * Add features to the  overlay and, optionally, move to them
         * @param features Features
         * @param motion Optional: Apply this motion to the map view
         */
        Overlay.prototype.addFeatures = function (features, motion) {
            var _this = this;
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            var olFeatures = [];
            features.forEach(function (feature) {
                var olFeature = featureToOl(feature, _this.map.projection);
                var olGeometry = olFeature.getGeometry();
                if (olGeometry === null) {
                    return;
                }
                olFeatures.push(olFeature);
            });
            this.addOlFeatures(olFeatures, motion);
        };
        /**
         * Add a OpenLayers feature to the  overlay and, optionally, move to it
         * @param olFeature OpenLayers Feature
         * @param motion Optional: Apply this motion to the map view
         */
        Overlay.prototype.addOlFeature = function (olFeature, motion) {
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            this.addOlFeatures([olFeature], motion);
        };
        /**
         * Add OpenLayers features to the overlay and, optionally, move to them
         * @param olFeatures OpenLayers Features
         * @param motion Optional: Apply this motion to the map view
         */
        Overlay.prototype.addOlFeatures = function (olFeatures, motion) {
            if (motion === void 0) { motion = exports.FeatureMotion.Default; }
            this.dataSource.ol.addFeatures(olFeatures);
            moveToOlFeatures(this.map, olFeatures, motion);
        };
        /**
         * Remove a feature from the overlay
         * @param feature Feature
         */
        Overlay.prototype.removeFeature = function (feature) {
            this.removeFeatures([feature]);
        };
        /**
         * Remove features from the overlay
         * @param features Features
         */
        Overlay.prototype.removeFeatures = function (features) {
            var _this = this;
            features.forEach(function (feature) {
                if (feature.meta) {
                    if (_this.dataSource.ol.getFeatureById(feature.meta.id)) {
                        _this.removeOlFeature(_this.dataSource.ol.getFeatureById(feature.meta.id));
                    }
                }
            });
        };
        /**
         * Remove an OpenLayers feature from the overlay
         * @param olFeature OpenLayers Feature
         */
        Overlay.prototype.removeOlFeature = function (olFeature) {
            this.dataSource.ol.removeFeature(olFeature);
        };
        /**
         * Clear the overlay
         */
        Overlay.prototype.clear = function () {
            this.dataSource.ol.clear();
        };
        return Overlay;
    }());

    var LayerWatcher = /** @class */ (function (_super) {
        __extends(LayerWatcher, _super);
        function LayerWatcher() {
            var _this = _super.call(this) || this;
            _this.loaded = 0;
            _this.loading = 0;
            _this.layers = [];
            _this.subscriptions = [];
            return _this;
        }
        LayerWatcher.prototype.watch = function () { };
        LayerWatcher.prototype.unwatch = function () {
            var _this = this;
            this.layers.forEach(function (layer) { return _this.unwatchLayer(layer); }, this);
        };
        LayerWatcher.prototype.watchLayer = function (layer) {
            var _this = this;
            if (layer.status$ === undefined) {
                return;
            }
            this.layers.push(layer);
            var layer$$ = layer.status$
                .pipe(operators.distinctUntilChanged())
                .subscribe(function (status) {
                if (status === utils.SubjectStatus.Error) {
                    _this.loading = 0;
                    _this.loaded = -1;
                }
                if (status === utils.SubjectStatus.Working) {
                    _this.loading += 1;
                }
                else if (status === utils.SubjectStatus.Done) {
                    _this.loaded += 1;
                }
                if (_this.loaded >= _this.loading) {
                    _this.loading = _this.loaded = 0;
                    _this.status = utils.SubjectStatus.Done;
                }
                else if (_this.loading > 0) {
                    _this.status = utils.SubjectStatus.Working;
                }
            });
            this.subscriptions.push(layer$$);
        };
        LayerWatcher.prototype.unwatchLayer = function (layer) {
            layer.status$.next(utils.SubjectStatus.Done);
            var index = this.layers.indexOf(layer);
            if (index >= 0) {
                var status = layer.watcher.status;
                if ([utils.SubjectStatus.Working, utils.SubjectStatus.Waiting].indexOf(status) !== -1) {
                    this.loaded += 1;
                }
                this.subscriptions[index].unsubscribe();
                this.subscriptions.splice(index, 1);
                this.layers.splice(index, 1);
                layer.watcher.unwatch();
            }
        };
        return LayerWatcher;
    }(utils.Watcher));

    exports.MapViewAction = void 0;
    (function (MapViewAction) {
        MapViewAction[MapViewAction["Move"] = 0] = "Move";
        MapViewAction[MapViewAction["Zoom"] = 1] = "Zoom";
    })(exports.MapViewAction || (exports.MapViewAction = {}));

    /**
     * Base map controller
     */
    var MapController = /** @class */ (function () {
        function MapController() {
            /**
             * Array of observer keys
             */
            this.observerKeys = [];
        }
        /**
         * Return the OL map this controller is bound to
         * @returns OL Map
         */
        MapController.prototype.getOlMap = function () {
            return this.olMap;
        };
        /**
         * Add or remove this controller to/from a map.
         * @param map OL Map
         */
        MapController.prototype.setOlMap = function (olMap) {
            if (olMap !== undefined && this.getOlMap() !== undefined) {
                throw new Error('This controller is already bound to a map.');
            }
            if (olMap === undefined) {
                this.teardownObservers();
                this.olMap = olMap;
                return;
            }
            this.olMap = olMap;
        };
        /**
         * Teardown any observers
         */
        MapController.prototype.teardownObservers = function () {
            this.observerKeys.forEach(function (key) { return olObservable.unByKey(key); });
            this.observerKeys = [];
        };
        return MapController;
    }());

    /**
     * Controller to handle map view interactions
     */
    var MapViewController = /** @class */ (function (_super) {
        __extends(MapViewController, _super);
        function MapViewController(options) {
            var _this = _super.call(this) || this;
            _this.options = options;
            /**
             * Observable of the current resolution
             */
            _this.resolution$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Observable of the current state
             */
            _this.state$ = new rxjs.BehaviorSubject(undefined);
            /**
             * View Padding
             */
            _this.padding = [0, 0, 0, 0];
            /**
             * Max zoom after set extent
             */
            _this.maxZoomOnExtent = 19;
            /**
             * Extent stream
             */
            _this.extent$ = new rxjs.Subject();
            /**
             * History of states
             */
            _this.states = [];
            /**
             * Current state index
             */
            _this.stateIndex = 0;
            return _this;
        }
        Object.defineProperty(MapViewController.prototype, "stateHistory", {
            /**
             * Whether the view controller should keep the view's state history
             */
            get: function () {
                return this.options ? this.options.stateHistory === true : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapViewController.prototype, "olView", {
            /**
             * OL View
             */
            get: function () {
                return this.olMap.getView();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add or remove this controller to/from a map.
         * @param map OL Map
         */
        MapViewController.prototype.setOlMap = function (olMap) {
            _super.prototype.setOlMap.call(this, olMap);
            this.setupObservers();
        };
        /**
         * Observe move moveend and subscribe to the extent stream
         */
        MapViewController.prototype.setupObservers = function () {
            var _this = this;
            if (this.stateHistory === true) {
                this.observerKeys.push(this.olMap.on('moveend', function (event) { return _this.onMoveEnd(event); }));
            }
            this.extent$$ = this.extent$
                .pipe(operators.debounceTime(25))
                .subscribe(function (value) {
                _this.setExtent(value.extent, value.action);
            });
        };
        /**
         * Teardown any observers
         */
        MapViewController.prototype.teardownObservers = function () {
            _super.prototype.teardownObservers.call(this);
            if (this.extent$$ !== undefined) {
                this.extent$$.unsubscribe();
                this.extent$$ = undefined;
            }
        };
        /**
         * Get the view's OL projection
         * @returns OL projection
         */
        MapViewController.prototype.getOlProjection = function () {
            return this.olView.getProjection();
        };
        /**
         * Get the current map view center
         * @param projection Output projection
         * @returns Center
         */
        MapViewController.prototype.getCenter = function (projection) {
            var center = this.olView.getCenter();
            if (projection && center) {
                center = olproj__namespace.transform(center, this.getOlProjection(), projection);
            }
            return center;
        };
        /**
         * Get the current view extent
         * @param projection Output projection
         * @returns Extent
         */
        MapViewController.prototype.getExtent = function (projection) {
            var extent = this.olView.calculateExtent(this.olMap.getSize());
            if (projection && extent) {
                extent = olproj__namespace.transformExtent(extent, this.getOlProjection(), projection);
            }
            return extent;
        };
        /**
         * Get the current scale
         * @param dpi Dot per inches
         * @returns View scale
         */
        MapViewController.prototype.getScale = function (dpi) {
            if (dpi === void 0) { dpi = 96; }
            return getScaleFromResolution(this.getResolution(), this.getOlProjection().getUnits(), dpi);
        };
        /**
         * Get the current resolution
         * @returns Projection denominator
         */
        MapViewController.prototype.getResolution = function () {
            return this.olView.getResolution();
        };
        /**
         * Get the current zoom level
         * @returns Zoom level
         */
        MapViewController.prototype.getZoom = function () {
            return Math.round(this.olView.getZoom());
        };
        /**
         * Zoom in
         */
        MapViewController.prototype.zoomIn = function () {
            this.zoomTo(this.olView.getZoom() + 1);
        };
        /**
         * Zoom out
         */
        MapViewController.prototype.zoomOut = function () {
            this.zoomTo(this.olView.getZoom() - 1);
        };
        /**
         * Zoom to specific zoom level
         * @param zoom Zoom level
         */
        MapViewController.prototype.zoomTo = function (zoom) {
            this.olView.cancelAnimations();
            this.olView.animate({
                zoom: zoom,
                duration: 250,
                easing: oleasing__namespace.easeOut
            });
        };
        /**
         * Move to extent after a short delay (100ms) unless
         * a new movement gets registered in the meantime.
         * @param extent Extent to move to
         */
        MapViewController.prototype.moveToExtent = function (extent) {
            this.extent$.next({ extent: extent, action: exports.MapViewAction.Move });
        };
        /**
         * Zoom to extent after a short delay (100ms) unless
         * a new movement gets registered in the meantime.
         * @param extent Extent to zoom to
         */
        MapViewController.prototype.zoomToExtent = function (extent) {
            this.extent$.next({ extent: extent, action: exports.MapViewAction.Zoom });
        };
        /**
         * Return the current view rotation
         * @returns Rotation angle in degrees
         */
        MapViewController.prototype.getRotation = function () {
            return this.olView.getRotation();
        };
        /**
         * Reset the view rotation to 0
         */
        MapViewController.prototype.resetRotation = function () {
            this.olView.animate({ rotation: 0 });
        };
        /**
         * Whether the view has a previous state
         * @returns True if the view has a previous state
         */
        MapViewController.prototype.hasPreviousState = function () {
            return this.states.length > 1 && this.stateIndex > 0;
        };
        /**
         * Whether the view has a next state
         * @returns True if the view has a next state
         */
        MapViewController.prototype.hasNextState = function () {
            return this.states.length > 1 && this.stateIndex < this.states.length - 1;
        };
        /**
         * Restore the previous view state
         */
        MapViewController.prototype.previousState = function () {
            if (this.hasPreviousState()) {
                this.setStateIndex(this.stateIndex - 1);
            }
        };
        /**
         * Restore the next view state
         */
        MapViewController.prototype.nextState = function () {
            if (this.hasNextState()) {
                this.setStateIndex(this.stateIndex + 1);
            }
        };
        /**
         * Clear the state history
         */
        MapViewController.prototype.clearStateHistory = function () {
            this.states = [];
            this.stateIndex = 0;
        };
        /**
         * Update the the view to it's intial state
         */
        MapViewController.prototype.setInitialState = function () {
            if (this.states.length > 0) {
                this.setStateIndex(0);
            }
        };
        /**
         * Move to the extent retrieved from the stream
         * @param extent Extent
         * @param action Either zoom or move
         * @param animation With or without animation to the target extent.
         */
        MapViewController.prototype.setExtent = function (extent, action, animation) {
            var _this = this;
            if (animation === void 0) { animation = true; }
            var olView = this.olView;
            olView.cancelAnimations();
            var duration = animation ? 500 : 0;
            var zoom = olView.getZoom();
            var fromCenter = olView.getCenter();
            var toCenter = [
                extent[0] + (extent[2] - extent[0]) / 2,
                extent[1] + (extent[3] - extent[1]) / 2
            ];
            var distCenter = Math.sqrt(Math.pow(fromCenter[0] - toCenter[0], 2) +
                Math.pow(fromCenter[1] - toCenter[1], 2));
            var fromExtent = olView.calculateExtent();
            var fromSize = Math.sqrt(Math.pow(fromExtent[2] - fromExtent[0], 2) +
                Math.pow(fromExtent[3] - fromExtent[1], 2));
            var toSize = Math.sqrt(Math.pow(extent[2] - extent[0], 2) + Math.pow(extent[3] - extent[1], 2));
            var moySize = (toSize + fromSize) / 2;
            var xSize = distCenter / moySize;
            var maxZoom = action === exports.MapViewAction.Move || zoom > this.maxZoomOnExtent
                ? zoom
                : this.maxZoomOnExtent;
            olView.fit(extent, {
                size: this.olMap.getSize(),
                maxZoom: maxZoom,
                padding: this.padding,
                duration: xSize > 4 ? 0 : duration,
                callback: function (isFinished) {
                    if (!isFinished) {
                        olView.fit(extent, {
                            size: _this.olMap.getSize(),
                            maxZoom: maxZoom,
                            padding: _this.padding,
                            duration: xSize > 4 ? 0 : duration
                        });
                    }
                }
            });
        };
        /**
         * Set the view state index
         * @param index State index
         */
        MapViewController.prototype.setStateIndex = function (index) {
            this.stateIndex = index;
            this.setState(this.states[index]);
        };
        /**
         * Set the view state
         * @param state View state
         */
        MapViewController.prototype.setState = function (state) {
            this.olView.animate({
                resolution: state.resolution,
                center: state.center,
                duration: 0
            });
        };
        /**
         * On move end, get the view state and record it.
         * @param event Map event
         */
        MapViewController.prototype.onMoveEnd = function (event) {
            var resolution = this.getResolution();
            if (this.resolution$.value !== resolution) {
                this.resolution$.next(resolution);
            }
            var state = {
                resolution: resolution,
                center: this.getCenter(),
                zoom: this.getZoom()
            };
            if (this.stateHistory === true) {
                var stateIndex = this.stateIndex;
                var stateAtIndex = this.states.length === 0 ? undefined : this.states[stateIndex];
                if (!viewStatesAreEqual(state, stateAtIndex)) {
                    this.states = this.states.slice(0, stateIndex + 1).concat([state]);
                    this.stateIndex = this.states.length - 1;
                }
            }
            this.state$.next(state);
        };
        return MapViewController;
    }(MapController));

    // TODO: This class is messy. Clearly define it's scope and the map browser's.
    // Move some stuff into controllers.
    var IgoMap = /** @class */ (function () {
        function IgoMap(options) {
            this.offlineButtonToggle$ = new rxjs.BehaviorSubject(false);
            this.layers$ = new rxjs.BehaviorSubject([]);
            this.positionFollower = true;
            this.geolocation$ = new rxjs.BehaviorSubject(undefined);
            this.swipeEnabled$ = new rxjs.BehaviorSubject(false);
            this.mapCenter$ = new rxjs.BehaviorSubject(false);
            this.selectedFeatures$ = new rxjs.BehaviorSubject(null);
            this.defaultOptions = {
                controls: { attribution: false }
            };
            this.options = Object.assign({}, this.defaultOptions, options);
            this.layerWatcher = new LayerWatcher();
            this.status$ = this.layerWatcher.status$;
            olproj4__namespace.register(proj4__default["default"]);
            this.init();
        }
        Object.defineProperty(IgoMap.prototype, "layers", {
            get: function () {
                return this.layers$.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IgoMap.prototype, "projection", {
            get: function () {
                return this.viewController.getOlProjection().getCode();
            },
            enumerable: false,
            configurable: true
        });
        IgoMap.prototype.init = function () {
            var controls = [];
            if (this.options.controls) {
                if (this.options.controls.attribution) {
                    var attributionOpt = (this.options.controls.attribution === true
                        ? {}
                        : this.options.controls.attribution);
                    controls.push(new olAttribution__default["default"](attributionOpt));
                }
                if (this.options.controls.scaleLine) {
                    var scaleLineOpt = (this.options.controls.scaleLine === true
                        ? {}
                        : this.options.controls.scaleLine);
                    controls.push(new olControlScaleLine__default["default"](scaleLineOpt));
                }
            }
            var interactions = {};
            if (this.options.interactions === false) {
                interactions = {
                    altShiftDragRotate: false,
                    doubleClickZoom: false,
                    keyboard: false,
                    mouseWheelZoom: false,
                    shiftDragZoom: false,
                    dragPan: false,
                    pinchRotate: false,
                    pinchZoom: false
                };
            }
            this.ol = new olMap__default["default"]({
                interactions: olInteraction__namespace.defaults(interactions),
                controls: controls
            });
            this.setView(this.options.view || {});
            this.viewController = new MapViewController({
                stateHistory: true
            });
            this.viewController.setOlMap(this.ol);
            this.overlay = new Overlay(this);
            this.queryResultsOverlay = new Overlay(this);
            this.searchResultsOverlay = new Overlay(this);
            this.buffer = new Overlay(this);
        };
        IgoMap.prototype.setTarget = function (id) {
            this.ol.setTarget(id);
            if (id !== undefined) {
                this.layerWatcher.subscribe(function () { }, null);
            }
            else {
                this.layerWatcher.unsubscribe();
            }
        };
        IgoMap.prototype.updateView = function (options) {
            var currentView = this.ol.getView();
            var viewOptions = Object.assign({
                zoom: currentView.getZoom()
            }, currentView.getProperties());
            this.setView(Object.assign(viewOptions, options));
            if (options.maxZoomOnExtent) {
                this.viewController.maxZoomOnExtent = options.maxZoomOnExtent;
            }
        };
        /**
         * Set the map view
         * @param options Map view options
         */
        IgoMap.prototype.setView = function (options) {
            if (this.viewController !== undefined) {
                this.viewController.clearStateHistory();
            }
            options = Object.assign({ constrainResolution: true }, options);
            var view = new olView__default["default"](options);
            this.ol.setView(view);
            this.unsubscribeGeolocate();
            if (options) {
                if (options.maxLayerZoomExtent) {
                    this.viewController.maxLayerZoomExtent = options.maxLayerZoomExtent;
                }
                if (options.center) {
                    var projection = view.getProjection().getCode();
                    var center = olproj__namespace.fromLonLat(options.center, projection);
                    view.setCenter(center);
                }
                if (options.geolocate) {
                    this.geolocate(true);
                }
                if (options.alwaysTracking) {
                    this.alwaysTracking = true;
                }
            }
        };
        IgoMap.prototype.updateControls = function (value) {
            var _this = this;
            if (value === undefined) {
                return;
            }
            var controls = [];
            if (value.attribution) {
                var attributionOpt = (value.attribution === true
                    ? {}
                    : value.attribution);
                controls.push(new olAttribution__default["default"](attributionOpt));
            }
            if (value.scaleLine) {
                var scaleLineOpt = (value.scaleLine === true
                    ? {}
                    : value.scaleLine);
                controls.push(new olControlScaleLine__default["default"](scaleLineOpt));
            }
            var currentControls = Object.assign([], this.ol.getControls().getArray());
            currentControls.forEach(function (control) {
                _this.ol.removeControl(control);
            });
            controls.forEach(function (control) {
                _this.ol.addControl(control);
            });
        };
        /**
         * Deprecated
         * TODO: Move to ViewController and update every place it's used
         */
        IgoMap.prototype.getCenter = function (projection) {
            return this.viewController.getCenter(projection);
        };
        /**
         * Deprecated
         * TODO: Move to ViewController and update every place it's used
         */
        IgoMap.prototype.getExtent = function (projection) {
            return this.viewController.getExtent(projection);
        };
        // TODO: Move to ViewController and update every place it's used
        IgoMap.prototype.getZoom = function () {
            return this.viewController.getZoom();
        };
        IgoMap.prototype.changeBaseLayer = function (baseLayer) {
            var e_1, _b;
            if (!baseLayer) {
                return;
            }
            try {
                for (var _c = __values(this.getBaseLayers()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var bl = _d.value;
                    bl.visible = false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            baseLayer.visible = true;
            this.viewController.olView.setMinZoom(baseLayer.dataSource.options.minZoom || (this.options.view || {}).minZoom);
            this.viewController.olView.setMaxZoom(baseLayer.dataSource.options.maxZoom || (this.options.view || {}).maxZoom);
        };
        IgoMap.prototype.getBaseLayers = function () {
            return this.layers.filter(function (layer) { return layer.baseLayer === true; });
        };
        IgoMap.prototype.getLayerById = function (id) {
            return this.layers.find(function (layer) { return layer.id && layer.id === id; });
        };
        IgoMap.prototype.getLayerByAlias = function (alias) {
            return this.layers.find(function (layer) { return layer.alias && layer.alias === alias; });
        };
        IgoMap.prototype.getLayerByOlUId = function (olUId) {
            return this.layers.find(function (layer) { return layer.ol.ol_uid && layer.ol.ol_uid === olUId; });
        };
        /**
         * Add a single layer
         * @param layer Layer to add
         * @param push DEPRECATED
         */
        IgoMap.prototype.addLayer = function (layer, push) {
            if (push === void 0) { push = true; }
            this.addLayers([layer]);
        };
        /**
         * Add many layers
         * @param layers Layers to add
         * @param push DEPRECATED
         */
        IgoMap.prototype.addLayers = function (layers, push) {
            var _this = this;
            if (push === void 0) { push = true; }
            var offsetZIndex = 0;
            var offsetBaseLayerZIndex = 0;
            var addedLayers = layers
                .map(function (layer) {
                if (!layer) {
                    return;
                }
                var offset = layer.zIndex
                    ? 0
                    : layer.baseLayer
                        ? offsetBaseLayerZIndex++
                        : offsetZIndex++;
                return _this.doAddLayer(layer, offset);
            })
                .filter(function (layer) { return layer !== undefined; });
            this.setLayers([].concat(this.layers, addedLayers));
        };
        /**
         * Remove a single layer
         * @param layer Layer to remove
         */
        IgoMap.prototype.removeLayer = function (layer) {
            this.removeLayers([layer]);
        };
        /**
         * Remove many layers
         * @param layers Layers to remove
         */
        IgoMap.prototype.removeLayers = function (layers) {
            var _this = this;
            var newLayers = this.layers$.value.slice(0);
            var layersToRemove = [];
            layers.forEach(function (layer) {
                var index = newLayers.indexOf(layer);
                if (index >= 0) {
                    layersToRemove.push(layer);
                    newLayers.splice(index, 1);
                    _this.handleLinkedLayersDeletion(layer, layersToRemove);
                    layersToRemove.map(function (linkedLayer) {
                        layersToRemove.push(linkedLayer);
                        var linkedIndex = newLayers.indexOf(linkedLayer);
                        if (linkedIndex >= 0) {
                            newLayers.splice(linkedIndex, 1);
                        }
                    });
                }
            });
            layersToRemove.forEach(function (layer) { return _this.doRemoveLayer(layer); });
            this.setLayers(newLayers);
        };
        /**
         * Build a list of linked layers to delete
         * @param srcLayer Layer that has triggered the deletion
         * @param layersToRemove list to append the layer to delete into
         */
        IgoMap.prototype.handleLinkedLayersDeletion = function (srcLayer, layersToRemove) {
            var _this = this;
            var linkedLayers = srcLayer.options.linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer) {
                // search for child layers
                currentLinks.map(function (link) {
                    if (!link.syncedDelete) {
                        return;
                    }
                    link.linkedIds.map(function (linkedId) {
                        var layerToApply = _this.layers.find(function (layer) { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                        if (layerToApply) {
                            layersToRemove.push(layerToApply);
                        }
                    });
                });
            }
            else {
                // search for parent layer
                this.layers.map(function (layer) {
                    var _a;
                    if ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                        layer.options.linkedLayers.links.map(function (l) {
                            if (l.syncedDelete && l.bidirectionnal !== false &&
                                l.linkedIds.indexOf(currentLinkedId) !== -1) {
                                layersToRemove.push(layer);
                                _this.handleLinkedLayersDeletion(layer, layersToRemove);
                            }
                        });
                    }
                });
            }
        };
        /**
         * Remove all layers
         */
        IgoMap.prototype.removeAllLayers = function () {
            var _this = this;
            this.layers.forEach(function (layer) { return _this.doRemoveLayer(layer); });
            this.layers$.next([]);
        };
        IgoMap.prototype.raiseLayer = function (layer) {
            var index = this.getLayerIndex(layer);
            if (index > 1) {
                this.moveLayer(layer, index, index - 1);
            }
        };
        IgoMap.prototype.raiseLayers = function (layers) {
            var e_2, _b;
            try {
                for (var layers_1 = __values(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
                    var layer = layers_1_1.value;
                    this.raiseLayer(layer);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (layers_1_1 && !layers_1_1.done && (_b = layers_1.return)) _b.call(layers_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        IgoMap.prototype.lowerLayer = function (layer) {
            var index = this.getLayerIndex(layer);
            if (index < this.layers.length - 1) {
                this.moveLayer(layer, index, index + 1);
            }
        };
        IgoMap.prototype.lowerLayers = function (layers) {
            var e_3, _b;
            var reverseLayers = layers.reverse();
            try {
                for (var reverseLayers_1 = __values(reverseLayers), reverseLayers_1_1 = reverseLayers_1.next(); !reverseLayers_1_1.done; reverseLayers_1_1 = reverseLayers_1.next()) {
                    var layer = reverseLayers_1_1.value;
                    this.lowerLayer(layer);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (reverseLayers_1_1 && !reverseLayers_1_1.done && (_b = reverseLayers_1.return)) _b.call(reverseLayers_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        IgoMap.prototype.moveLayer = function (layer, from, to) {
            var layerTo = this.layers[to];
            var zIndexTo = layerTo.zIndex;
            var zIndexFrom = layer.zIndex;
            if (layerTo.baseLayer || layer.baseLayer) {
                return;
            }
            layer.zIndex = zIndexTo;
            layerTo.zIndex = zIndexFrom;
            this.layers[to] = layer;
            this.layers[from] = layerTo;
            this.layers$.next(this.layers.slice(0));
        };
        /**
         * Add a layer to the OL map and start watching. If the layer is already
         * added to this map, make it visible but don't add it one again.
         * @param layer Layer
         * @returns The layer added, if any
         */
        IgoMap.prototype.doAddLayer = function (layer, offsetZIndex) {
            if (layer.baseLayer && layer.visible) {
                this.changeBaseLayer(layer);
            }
            var existingLayer = this.getLayerById(layer.id);
            if (existingLayer !== undefined) {
                existingLayer.visible = true;
                return;
            }
            if (!layer.baseLayer && layer.zIndex) {
                layer.zIndex += 10;
            }
            if (layer.zIndex === undefined || layer.zIndex === 0) {
                var maxZIndex = Math.max.apply(Math, __spreadArray([layer.baseLayer ? 0 : 10], __read(this.layers
                    .filter(function (l) { return l.baseLayer === layer.baseLayer && l.zIndex < 200; } // zIndex > 200 = system layer
                )
                    .map(function (l) { return l.zIndex; }))));
                layer.zIndex = maxZIndex + 1 + offsetZIndex;
            }
            if (layer.baseLayer && layer.zIndex > 9) {
                layer.zIndex = 10; // baselayer must have zIndex < 10
            }
            layer.setMap(this);
            this.layerWatcher.watchLayer(layer);
            this.ol.addLayer(layer.ol);
            return layer;
        };
        /**
         * Remove a layer from the OL map and stop watching
         * @param layer Layer
         */
        IgoMap.prototype.doRemoveLayer = function (layer) {
            this.layerWatcher.unwatchLayer(layer);
            this.ol.removeLayer(layer.ol);
            layer.setMap(undefined);
        };
        /**
         * Update the layers observable
         * @param layers Layers
         */
        IgoMap.prototype.setLayers = function (layers) {
            this.layers$.next(this.sortLayersByZIndex(layers).slice(0));
        };
        /**
         * Sort layers by descending zIndex
         * @param layers Array of layers
         * @returns The original array, sorted by zIndex
         */
        IgoMap.prototype.sortLayersByZIndex = function (layers) {
            // Sort by descending zIndex
            return layers.sort(function (layer1, layer2) { return layer2.zIndex - layer1.zIndex; });
        };
        /**
         * Get layer index in the map's inenr array of layers
         * @param layer Layer
         * @returns The layer index
         */
        IgoMap.prototype.getLayerIndex = function (layer) {
            return this.layers.findIndex(function (_layer) { return _layer === layer; });
        };
        // TODO: Create a GeolocationController with everything below
        IgoMap.prototype.geolocate = function (track) {
            var _this = this;
            if (track === void 0) { track = false; }
            var first = true;
            if (this.geolocation$$) {
                track = this.geolocation.getTracking();
                this.unsubscribeGeolocate();
            }
            this.startGeolocation();
            this.geolocation$$ = this.geolocation$.subscribe(function (geolocation) {
                var _a;
                if (!geolocation) {
                    return;
                }
                var accuracy = geolocation.getAccuracy();
                var coordinates = geolocation.getPosition();
                if (accuracy < 10000) {
                    var positionGeometry = coordinates ? new OlPoint__default["default"](coordinates) : null;
                    var accuracyGeometry = geolocation.getAccuracyGeometry();
                    var accuracyExtent = accuracyGeometry.getExtent();
                    [_this.geolocationPositionFeature, _this.geolocationAccuracyFeature].map(function (feature) {
                        if (feature && _this.overlay.dataSource.ol.getFeatureById(feature.getId())) {
                            _this.overlay.dataSource.ol.removeFeature(feature);
                        }
                    });
                    if (_this.bufferFeature) {
                        _this.buffer.dataSource.ol.removeFeature(_this.bufferFeature);
                    }
                    _this.geolocationPositionFeature = new OlFeature__default["default"]({ geometry: positionGeometry });
                    _this.geolocationPositionFeature.setId('geolocationPositionFeature');
                    _this.geolocationPositionFeature.setStyle(new olstyle__namespace.Style({
                        image: new olstyle__namespace.Circle({
                            radius: 6,
                            fill: new olstyle__namespace.Fill({
                                color: '#3399CC',
                            }),
                            stroke: new olstyle__namespace.Stroke({
                                color: '#fff',
                                width: 2,
                            }),
                        }),
                    }));
                    _this.geolocationAccuracyFeature = new OlFeature__default["default"]({ geometry: accuracyGeometry });
                    _this.geolocationAccuracyFeature.setId('geolocationAccuracyFeature');
                    if (_this.alwaysTracking) {
                        [_this.geolocationPositionFeature, _this.geolocationAccuracyFeature].map(function (feature) {
                            _this.overlay.addOlFeature(feature, _this.positionFollower ? exports.FeatureMotion.Move : exports.FeatureMotion.None);
                        });
                    }
                    else {
                        [_this.geolocationPositionFeature, _this.geolocationAccuracyFeature].map(function (feature) {
                            _this.overlay.addOlFeature(feature);
                        });
                    }
                    if ((_a = _this.ol.getView().get('options_')) === null || _a === void 0 ? void 0 : _a.buffer) {
                        var bufferRadius = _this.ol.getView().get('options_').buffer.bufferRadius;
                        _this.bufferGeom = new OlCircle__default["default"](coordinates, bufferRadius);
                        var bufferStroke = _this.ol.getView().get('options_').buffer.bufferStroke;
                        var bufferFill = _this.ol.getView().get('options_').buffer.bufferFill;
                        var bufferText = void 0;
                        if (_this.ol.getView().get('options_').buffer.showBufferRadius) {
                            bufferText = bufferRadius.toString() + 'm';
                        }
                        else {
                            bufferText = '';
                        }
                        _this.bufferFeature = new OlFeature__default["default"](_this.bufferGeom);
                        _this.bufferFeature.setId('bufferFeature');
                        _this.bufferFeature.set('bufferStroke', bufferStroke);
                        _this.bufferFeature.set('bufferFill', bufferFill);
                        _this.bufferFeature.set('bufferText', bufferText);
                        _this.buffer.addOlFeature(_this.bufferFeature, exports.FeatureMotion.None);
                    }
                    if (first) {
                        _this.viewController.zoomToExtent(accuracyExtent);
                        _this.positionFollower = !_this.positionFollower;
                    }
                }
                else if (first) {
                    var view = _this.ol.getView();
                    view.setCenter(coordinates);
                    view.setZoom(14);
                }
                if (track !== true && _this.alwaysTracking !== true) {
                    _this.unsubscribeGeolocate();
                }
                first = false;
            });
        };
        IgoMap.prototype.unsubscribeGeolocate = function () {
            this.stopGeolocation();
            if (this.geolocation$$) {
                this.geolocation$$.unsubscribe();
                this.geolocation$$ = undefined;
            }
        };
        IgoMap.prototype.startGeolocation = function () {
            var _this = this;
            if (!this.geolocation) {
                this.geolocation = new olGeolocation__default["default"]({
                    trackingOptions: {
                        enableHighAccuracy: true
                    },
                    projection: this.projection,
                    tracking: true
                });
                this.geolocation.on('change', function (evt) {
                    _this.geolocation$.next(_this.geolocation);
                });
            }
            else {
                this.geolocation.setTracking(true);
            }
        };
        IgoMap.prototype.stopGeolocation = function () {
            if (this.geolocation) {
                this.geolocation.setTracking(false);
            }
        };
        IgoMap.prototype.onOfflineToggle = function (offline) {
            this.offlineButtonToggle$.next(offline);
        };
        return IgoMap;
    }());

    var _c0$j = ["*"];
    var MapBrowserComponent = /** @class */ (function () {
        function MapBrowserComponent(activityService) {
            this.activityService = activityService;
            this.id = "igo-map-target-" + new Date().getTime();
        }
        Object.defineProperty(MapBrowserComponent.prototype, "view", {
            get: function () {
                return this._view;
            },
            set: function (value) {
                this._view = value;
                if (this.map !== undefined) {
                    this.map.updateView(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapBrowserComponent.prototype, "controls", {
            get: function () {
                return this._controls;
            },
            set: function (value) {
                this._controls = value;
                if (this.map !== undefined) {
                    this.map.updateControls(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        MapBrowserComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.status$$ = this.map.status$.subscribe(function (status) { return _this.handleStatusChange(status); });
        };
        MapBrowserComponent.prototype.ngAfterViewInit = function () {
            this.map.setTarget(this.id);
        };
        MapBrowserComponent.prototype.ngOnDestroy = function () {
            this.map.setTarget(undefined);
            this.activityService.unregister(this.activityId);
            this.status$$.unsubscribe();
        };
        MapBrowserComponent.prototype.handleStatusChange = function (status) {
            if (status === utils.SubjectStatus.Working && this.activityId === undefined) {
                this.activityId = this.activityService.register();
            }
            else if (status === utils.SubjectStatus.Done && this.activityId !== undefined) {
                this.activityService.unregister(this.activityId);
                this.activityId = undefined;
            }
        };
        return MapBrowserComponent;
    }());
    MapBrowserComponent.ɵfac = function MapBrowserComponent_Factory(t) { return new (t || MapBrowserComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ActivityService)); };
    MapBrowserComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MapBrowserComponent, selectors: [["igo-map-browser"]], inputs: { map: "map", view: "view" }, ngContentSelectors: _c0$j, decls: 2, vars: 1, consts: [[1, "igo-map-browser-target", 3, "id"]], template: function MapBrowserComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵprojectionDef();
                i0__namespace.ɵɵelement(0, "div", 0);
                i0__namespace.ɵɵprojection(1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("id", ctx.id);
            }
        }, styles: ["[_nghost-%COMP%]{position:relative;display:block}[_nghost-%COMP%], .igo-map-browser-target[_ngcontent-%COMP%]{width:100%;height:100%}[_nghost-%COMP%]     igo-zoom-button{position:absolute;bottom:calc(40px + 5px + 5px);right:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-zoom-button{display:none}}[_nghost-%COMP%]     igo-offline-button{position:absolute;bottom:15px;right:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-offline-button{bottom:5px}}[_nghost-%COMP%]     igo-geolocate-button{position:absolute;bottom:5px;right:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-geolocate-button{bottom:5px}}[_nghost-%COMP%]     igo-rotation-button{position:absolute;top:calc(40px + 5px + 5px);right:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-rotation-button{bottom:calc(40px + 5px + 5px)}}[_nghost-%COMP%]     igo-home-extent-button{position:absolute;bottom:calc((3 * 40px) + 5px + (2 * 5px));right:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-home-extent-button{bottom:5px;right:calc((2 * 40px) + (3 * 5px))}}[_nghost-%COMP%]     igo-user-button{position:absolute;bottom:5px;right:calc(5px + 50px)}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]     igo-user-button{right:calc((2 * 40px) + (2 * 5px))}}[_nghost-%COMP%]     igo-baselayers-switcher{position:absolute;bottom:5px;left:5px}[_nghost-%COMP%]     .ol-attribution{flex-flow:row;left:calc(40px + 5px + 5px);bottom:5px;text-align:left;padding:0;margin-right:90px;background-color:#fff0;width:calc(100% - 100px)}[_nghost-%COMP%]     .ol-attribution.ol-logo-only{height:inherit}[_nghost-%COMP%]     .ol-attribution.ol-collapsed{background:none}[_nghost-%COMP%]     .ol-attribution.ol-collapsed button{transform:none}[_nghost-%COMP%]     .ol-attribution button{transform:rotate(180deg);background-color:#fff;cursor:pointer;outline:none}[_nghost-%COMP%]     .ol-scale-line-inner{color:#000;border-color:#000;text-shadow:white -1px -1px 3px,white 1px -1px 3px,white -1px 1px 3px,white 1px 1px 4px;box-shadow:0 1px 0 1px #fff9}[_nghost-%COMP%]     .ol-scale-line{background-color:#fff0;bottom:4px;transform:translate(-50%);left:50%}[_nghost-%COMP%]     .ol-scale-bar{background-color:#fff0;bottom:4px;transform:translate(-50%);left:50%}[_nghost-%COMP%]     .ol-scale-text{text-shadow:white -1px -1px 3px,white 1px -1px 3px,white -1px 1px 3px,white 1px 1px 4px}[_nghost-%COMP%]     .ol-scale-step-text{text-shadow:white -1px -1px 3px,white 1px -1px 3px,white -1px 1px 3px,white 1px 1px 4px}[_nghost-%COMP%]     canvas{display:block}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MapBrowserComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-map-browser',
                        templateUrl: './map-browser.component.html',
                        styleUrls: ['./map-browser.component.scss']
                    }]
            }], function () { return [{ type: i2__namespace$1.ActivityService }]; }, { map: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }] });
    })();

    var MapOfflineDirective = /** @class */ (function () {
        function MapOfflineDirective(component, networkService, messageService, languageService) {
            this.networkService = networkService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.offlineButtonStatus = false;
            this.networkState = {
                connection: true
            };
            this.offlineButtonState = {
                connection: true
            };
            this.component = component;
        }
        Object.defineProperty(MapOfflineDirective.prototype, "map", {
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        MapOfflineDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.map.offlineButtonToggle$.subscribe(function (offlineButtonToggle) {
                if (_this.previousMessageId) {
                    _this.messageService.remove(_this.previousMessageId);
                }
                _this.offlineButtonStatus = offlineButtonToggle;
                var translate = _this.languageService.translate;
                if (_this.offlineButtonStatus && _this.networkState.connection) {
                    var message = translate.instant('igo.geo.network.offline.message');
                    var title = translate.instant('igo.geo.network.offline.title');
                    var messageObj = _this.messageService.info(message, title);
                    _this.previousMessageId = messageObj.toastId;
                    _this.offlineButtonState.connection = false;
                    _this.changeLayer();
                }
                else if (!_this.offlineButtonStatus && !_this.networkState.connection) {
                    var message = translate.instant('igo.geo.network.offline.message');
                    var title = translate.instant('igo.geo.network.offline.title');
                    var messageObj = _this.messageService.info(message, title);
                    _this.previousMessageId = messageObj.toastId;
                    _this.offlineButtonState.connection = false;
                    _this.changeLayer();
                }
                else if (!_this.offlineButtonStatus && _this.networkState.connection) {
                    var message_1;
                    var title_1;
                    var messageObs = translate.get('igo.geo.network.online.message');
                    var titleObs = translate.get('igo.geo.network.online.title');
                    messageObs.subscribe(function (message1) {
                        message_1 = message1;
                    });
                    titleObs.subscribe(function (title1) {
                        title_1 = title1;
                    });
                    if (message_1) {
                        var messageObj = _this.messageService.info(message_1, title_1);
                        _this.previousMessageId = messageObj.toastId;
                    }
                    _this.offlineButtonState.connection = true;
                    _this.changeLayer();
                }
            });
            this.networkService.currentState().subscribe(function (state) {
                _this.networkState = state;
                if (!_this.offlineButtonStatus) {
                    _this.changeLayer();
                }
            });
            this.map.layers$.subscribe(function (layers) {
                _this.changeLayer();
            });
        };
        MapOfflineDirective.prototype.changeLayer = function () {
            var _this = this;
            var sourceOptions;
            var layerList = this.map.layers$.value;
            layerList.forEach(function (layer) {
                if (layer.isIgoInternalLayer) {
                    return;
                }
                if (layer.options.source instanceof MVTDataSource) {
                    sourceOptions = layer.options.sourceOptions;
                    layer.ol.getSource().refresh();
                }
                else if (layer.options.source instanceof XYZDataSource) {
                    sourceOptions = layer.options.sourceOptions;
                }
                else if (layer.options.source instanceof ClusterDataSource) {
                    sourceOptions = layer.options.sourceOptions;
                }
                else if (layer.options.source instanceof FeatureDataSource) {
                    sourceOptions = layer.options.sourceOptions;
                }
                else {
                    if (_this.networkState.connection === false ||
                        _this.offlineButtonState.connection === false) {
                        layer.ol.setMaxResolution(0);
                        return;
                    }
                    else if (_this.networkState.connection === true ||
                        _this.offlineButtonState.connection === true) {
                        layer.ol.setMaxResolution(Infinity);
                        return;
                    }
                }
                if (sourceOptions) {
                    if ((sourceOptions.pathOffline &&
                        _this.networkState.connection === false) ||
                        (sourceOptions.pathOffline &&
                            _this.offlineButtonState.connection === false)) {
                        if (sourceOptions.type === 'vector' ||
                            sourceOptions.type === 'cluster') {
                            return;
                        }
                        layer.ol.getSource().setUrl(sourceOptions.pathOffline);
                    }
                    else if ((sourceOptions.pathOffline &&
                        _this.networkState.connection === false) ||
                        (sourceOptions.pathOffline &&
                            _this.offlineButtonState.connection === true)) {
                        if (sourceOptions.type === 'vector' ||
                            sourceOptions.type === 'cluster') {
                            return;
                        }
                        layer.ol.getSource().setUrl(sourceOptions.url);
                    }
                    else {
                        if (_this.networkState.connection === false ||
                            _this.offlineButtonState.connection === false) {
                            layer.ol.setMaxResolution(0);
                        }
                        else if (_this.networkState.connection === true ||
                            _this.offlineButtonState.connection === true) {
                            layer.ol.setMaxResolution(Infinity);
                        }
                    }
                }
                else {
                    if (_this.networkState.connection === false ||
                        _this.offlineButtonState.connection === false) {
                        layer.ol.setMaxResolution(0);
                    }
                    else if (_this.networkState.connection === true ||
                        _this.offlineButtonState.connection === true) {
                        layer.ol.setMaxResolution(Infinity);
                    }
                }
            });
        };
        return MapOfflineDirective;
    }());
    MapOfflineDirective.ɵfac = function MapOfflineDirective_Factory(t) { return new (t || MapOfflineDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.NetworkService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService)); };
    MapOfflineDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: MapOfflineDirective, selectors: [["", "igoMapOffline", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MapOfflineDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoMapOffline]'
                    }]
            }], function () { return [{ type: MapBrowserComponent }, { type: i2__namespace$1.NetworkService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }]; }, null);
    })();

    /**
     * This directive return the pointer coordinate (on click or pointermove)
     * in [longitude, latitude], delayed by in input (pointerMoveDelay)
     * to avoid too many emitted values.
     */
    var PointerPositionDirective = /** @class */ (function () {
        function PointerPositionDirective(component, mediaService) {
            this.component = component;
            this.mediaService = mediaService;
            /**
             * Delay before emitting an event
             */
            this.pointerPositionDelay = 1000;
            /**
             * Event emitted when the pointer move, delayed by pointerMoveDelay
             */
            this.pointerPositionCoord = new i0.EventEmitter();
        }
        Object.defineProperty(PointerPositionDirective.prototype, "map", {
            /**
             * IGO map
             * @internal
             */
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PointerPositionDirective.prototype, "mapProjection", {
            get: function () {
                return this.component.map.projection;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Start listening to pointermove
         * @internal
         */
        PointerPositionDirective.prototype.ngOnInit = function () {
            this.listenToMapPointerMove();
            this.listenToMapClick();
        };
        /**
         * Stop listening to pointermove
         * @internal
         */
        PointerPositionDirective.prototype.ngOnDestroy = function () {
            this.unlistenToMapPointerMove();
            this.unlistenToMapClick();
        };
        /**
         * On map pointermove
         */
        PointerPositionDirective.prototype.listenToMapPointerMove = function () {
            var _this = this;
            this.pointerMoveListener = this.map.ol.on('pointermove', function (event) { return _this.onPointerEvent(event, _this.pointerPositionDelay); });
        };
        /**
         * On map click
         */
        PointerPositionDirective.prototype.listenToMapClick = function () {
            var _this = this;
            this.mapClickListener = this.map.ol.on('singleclick', function (event) { return _this.onPointerEvent(event, 0); });
        };
        /**
         * Stop listening for map pointermove
         */
        PointerPositionDirective.prototype.unlistenToMapPointerMove = function () {
            olObservable.unByKey(this.pointerMoveListener);
            this.pointerMoveListener = undefined;
        };
        /**
         * Stop listening for map clicks
         */
        PointerPositionDirective.prototype.unlistenToMapClick = function () {
            this.mapClickListener = undefined;
        };
        /**
         * emit delayed coordinate (longitude, latitude array) based on pointerMoveDelay or on click
         * @param event OL map browser pointer event
         */
        PointerPositionDirective.prototype.onPointerEvent = function (event, delay) {
            var _this = this;
            if (event.dragging || this.mediaService.isTouchScreen()) {
                return;
            }
            if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves
                clearTimeout(this.lastTimeoutRequest);
            }
            var lonlat = olproj.transform(event.coordinate, this.mapProjection, 'EPSG:4326');
            this.lastTimeoutRequest = setTimeout(function () {
                _this.pointerPositionCoord.emit(lonlat);
            }, delay);
        };
        return PointerPositionDirective;
    }());
    PointerPositionDirective.ɵfac = function PointerPositionDirective_Factory(t) { return new (t || PointerPositionDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent, 2), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MediaService)); };
    PointerPositionDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: PointerPositionDirective, selectors: [["", "igoPointerPosition", ""]], inputs: { pointerPositionDelay: "pointerPositionDelay" }, outputs: { pointerPositionCoord: "pointerPositionCoord" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(PointerPositionDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoPointerPosition]'
                    }]
            }], function () {
            return [{ type: MapBrowserComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: i2__namespace$1.MediaService }];
        }, { pointerPositionDelay: [{
                    type: i0.Input
                }], pointerPositionCoord: [{
                    type: i0.Output
                }] });
    })();

    var ImageLayer = /** @class */ (function (_super) {
        __extends(ImageLayer, _super);
        function ImageLayer(options, messageService, languageService, authInterceptor) {
            var _this = _super.call(this, options, messageService, authInterceptor) || this;
            _this.messageService = messageService;
            _this.languageService = languageService;
            _this.authInterceptor = authInterceptor;
            _this.watcher = new ImageWatcher(_this, _this.messageService, _this.languageService);
            _this.status$ = _this.watcher.status$;
            _this.status$.subscribe(function (valStatus) {
                if (valStatus === 0) {
                    _this.olLoadingProblem = true;
                }
            });
            return _this;
        }
        ImageLayer.prototype.createOlLayer = function () {
            var _this = this;
            var olOptions = Object.assign({}, this.options, {
                source: this.options.source.ol
            });
            var image = new olLayerImage__default["default"](olOptions);
            if (this.authInterceptor) {
                image.getSource().setImageLoadFunction(function (tile, src) {
                    _this.customLoader(tile, src, _this.authInterceptor, _this.messageService, _this.languageService);
                });
            }
            return image;
        };
        ImageLayer.prototype.setMap = function (map) {
            if (map === undefined) {
                this.watcher.unsubscribe();
            }
            else {
                this.watcher.subscribe(function () { });
            }
            _super.prototype.setMap.call(this, map);
        };
        ImageLayer.prototype.customLoader = function (tile, src, interceptor, messageService, languageService) {
            var xhr = new XMLHttpRequest();
            var alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(src);
            var url = src;
            if (alteredUrlWithKeyAuth) {
                url = alteredUrlWithKeyAuth;
            }
            xhr.open('GET', url);
            var intercepted = interceptor.interceptXhr(xhr, url);
            if (!intercepted) {
                xhr.abort();
                tile.getImage().src = url;
                return;
            }
            xhr.responseType = 'arraybuffer';
            xhr.onload = function () {
                var arrayBufferView = new Uint8Array(this.response);
                var responseString = new TextDecoder().decode(arrayBufferView);
                if (responseString.includes('ServiceExceptionReport')) {
                    messageService.error(languageService.translate.instant('igo.geo.dataSource.optionsApiUnavailable'), languageService.translate.instant('igo.geo.dataSource.unavailableTitle'));
                }
                var blob = new Blob([arrayBufferView], { type: 'image/png' });
                var urlCreator = window.URL;
                var imageUrl = urlCreator.createObjectURL(blob);
                tile.getImage().src = imageUrl;
            };
            xhr.send();
        };
        return ImageLayer;
    }(Layer));

    var TileLayer = /** @class */ (function (_super) {
        __extends(TileLayer, _super);
        function TileLayer(options, messageService, authInterceptor) {
            var _this = _super.call(this, options, messageService) || this;
            _this.messageService = messageService;
            _this.authInterceptor = authInterceptor;
            _this.watcher = new TileWatcher(_this);
            _this.status$ = _this.watcher.status$;
            return _this;
        }
        TileLayer.prototype.createOlLayer = function () {
            var _this = this;
            var olOptions = Object.assign({}, this.options, {
                source: this.options.source.ol
            });
            var tileLayer = new olLayerTile__default["default"](olOptions);
            var tileSource = tileLayer.getSource();
            tileSource.setTileLoadFunction(function (tile, url) {
                _this.customLoader(tile, url, _this.authInterceptor);
            });
            return tileLayer;
        };
        /**
         * Custom loader for tile layer.
         * @internal
         * @param tile the current tile
         * @param url the url string or function to retrieve the data
         */
        TileLayer.prototype.customLoader = function (tile, url, interceptor) {
            var alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(url);
            var modifiedUrl = url;
            if (alteredUrlWithKeyAuth) {
                modifiedUrl = alteredUrlWithKeyAuth;
            }
            tile.getImage().src = modifiedUrl;
        };
        TileLayer.prototype.setMap = function (map) {
            if (map === undefined) {
                this.watcher.unsubscribe();
            }
            else {
                this.watcher.subscribe(function () { });
            }
            _super.prototype.setMap.call(this, map);
        };
        return TileLayer;
    }(Layer));

    var VectorTileLayer = /** @class */ (function (_super) {
        __extends(VectorTileLayer, _super);
        function VectorTileLayer(options, messageService, authInterceptor) {
            var _this = _super.call(this, options, messageService, authInterceptor) || this;
            _this.messageService = messageService;
            _this.authInterceptor = authInterceptor;
            _this.watcher = new TileWatcher(_this);
            _this.status$ = _this.watcher.status$;
            return _this;
        }
        VectorTileLayer.prototype.createOlLayer = function () {
            var _this = this;
            var olOptions = Object.assign({}, this.options, {
                source: this.options.source.ol
            });
            var vectorTile = new olLayerVectorTile__default["default"](olOptions);
            var vectorTileSource = vectorTile.getSource();
            vectorTileSource.setTileLoadFunction(function (tile, url) {
                var loader = _this.customLoader(url, tile.getFormat(), _this.authInterceptor, tile.onLoad.bind(tile));
                if (loader) {
                    tile.setLoader(loader);
                }
            });
            return vectorTile;
        };
        /**
         * Custom loader for vector tile layer. Modified from the loadFeaturesXhr function in ol\featureloader.js
         * @internal
         * @param url the url string or function to retrieve the data
         * @param format the format of the tile
         * @param interceptor the interceptor of the data
         * @param success On success event action to trigger
         * @param failure On failure event action to trigger TODO
         */
        VectorTileLayer.prototype.customLoader = function (url, format, interceptor, success, failure) {
            var _this = this;
            return (function (extent, resolution, projection) {
                var xhr = new XMLHttpRequest();
                var modifiedUrl = url;
                if (typeof url !== 'function') {
                    var alteredUrlWithKeyAuth = interceptor.alterUrlWithKeyAuth(url);
                    if (alteredUrlWithKeyAuth) {
                        modifiedUrl = alteredUrlWithKeyAuth;
                    }
                }
                else {
                    modifiedUrl = url(extent, resolution, projection);
                }
                xhr.open('GET', modifiedUrl);
                if (interceptor) {
                    interceptor.interceptXhr(xhr, modifiedUrl);
                }
                if (format.getType() === 'arraybuffer') {
                    xhr.responseType = 'arraybuffer';
                }
                xhr.onload = function (event) {
                    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
                        var type = format.getType();
                        var source = void 0;
                        if (type === 'json' || type === 'text') {
                            source = xhr.responseText;
                        }
                        else if (type === 'xml') {
                            source = xhr.responseXML;
                            if (!source) {
                                source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
                            }
                        }
                        else if (type === 'arraybuffer') {
                            source = xhr.response;
                        }
                        if (source) {
                            success.call(_this, format.readFeatures(source, {
                                extent: extent,
                                featureProjection: projection
                            }), format.readProjection(source));
                        }
                        else {
                            // TODO
                            failure.call(_this);
                        }
                    }
                    else {
                        // TODO
                        failure.call(_this);
                    }
                };
                xhr.onerror = function () {
                    // TODO
                    failure.call(_this);
                };
                xhr.send();
            });
        };
        VectorTileLayer.prototype.setMap = function (map) {
            if (map === undefined) {
                this.watcher.unsubscribe();
            }
            else {
                this.watcher.subscribe(function () { });
            }
            _super.prototype.setMap.call(this, map);
        };
        return VectorTileLayer;
    }(Layer));

    /**
     * This directive makes the mouse coordinate trigger a reverse search on available search sources.
     * The search results are placed into a label, on a cross icon, representing the mouse coordinate.
     * By default, no search sources. Config in config file must be defined.
     * the layer level.
     */
    var HoverFeatureDirective = /** @class */ (function () {
        function HoverFeatureDirective(component, mediaService, styleService) {
            this.component = component;
            this.mediaService = mediaService;
            this.styleService = styleService;
            this.pointerHoverFeatureStore = new i6.EntityStore([]);
            this.selectionMVT = {};
            this.hoverFeatureId = 'hoverFeatureId';
            /**
             * The delay where the mouse must be motionless before trigger the reverse search
             */
            this.igoHoverFeatureDelay = 1000;
            /**
             * If the user has enabled or not the directive
             */
            this.igoHoverFeatureEnabled = false;
        }
        HoverFeatureDirective.prototype.mouseout = function () {
            clearTimeout(this.lastTimeoutRequest);
            this.clearLayer();
        };
        Object.defineProperty(HoverFeatureDirective.prototype, "map", {
            /**
             * IGO map
             * @internal
             */
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(HoverFeatureDirective.prototype, "mapProjection", {
            get: function () {
                return this.component.map.projection;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Start listening to pointermove and reverse search results.
         * @internal
         */
        HoverFeatureDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.listenToMapPointerMove();
            this.subscribeToPointerStore();
            this.listenToMapClick();
            this.map.status$.pipe(operators.take(1)).subscribe(function () {
                _this.store = new FeatureStore([], { map: _this.map });
                _this.initStore();
            });
            // To handle context change without using the contextService.
            this.layers$$ = this.map.layers$.subscribe(function (layers) {
                if (_this.store && !layers.find(function (l) { return l.id === 'hoverFeatureId'; })) {
                    _this.initStore();
                }
            });
        };
        /**
         * Initialize the pointer position store
         * @internal
         */
        HoverFeatureDirective.prototype.initStore = function () {
            var _this = this;
            var store = this.store;
            var layer = new VectorLayer({
                isIgoInternalLayer: true,
                id: 'hoverFeatureId',
                title: 'hoverFeature',
                zIndex: 900,
                source: new FeatureDataSource(),
                showInLayerList: false,
                exportable: false,
                browsable: false,
                style: hoverFeatureMarker
            });
            tryBindStoreLayer(store, layer);
            this.selectionLayer = new olLayerVectorTile__default["default"]({
                map: this.map.ol,
                zIndex: 901,
                renderMode: "vector",
                declutter: true,
                source: new olSourceVectorTile__default["default"]({}),
                style: function (feature) {
                    if (_this.mvtStyleOptions && feature.getId() in _this.selectionMVT) {
                        return _this.createHoverStyle(feature, _this.mvtStyleOptions);
                    }
                }
            });
        };
        HoverFeatureDirective.prototype.createHoverStyle = function (feature, hoverStyle) {
            var _a;
            var localHoverStyle = Object.assign({}, hoverStyle);
            var label = hoverStyle.label ? hoverStyle.label.attribute : undefined;
            var hasLabelStyle = ((_a = hoverStyle.label) === null || _a === void 0 ? void 0 : _a.style) ? true : false;
            if (!feature.get('_isLabel')) {
                localHoverStyle.label = undefined;
                hasLabelStyle = false;
                label = undefined;
            }
            else {
                // clear the style for label....
                var size = localHoverStyle.data ? localHoverStyle.data.length : 0;
                var radius = [];
                var stroke = [];
                var width = [];
                var fill = [];
                for (var i = 0; i < size; i++) {
                    radius.push(0);
                    stroke.push('rgba(255, 255, 255, 0)');
                    width.push(0);
                    fill.push('rgba(255, 255, 255, 0)');
                }
                localHoverStyle.radius = radius;
                localHoverStyle.stroke = stroke;
                localHoverStyle.width = width;
                localHoverStyle.fill = fill;
            }
            if (!hasLabelStyle && label) {
                localHoverStyle.label.style =
                    {
                        textAlign: 'left',
                        textBaseline: 'top',
                        font: '12px Calibri,sans-serif',
                        fill: { color: '#000' },
                        backgroundFill: { color: 'rgba(255, 255, 255, 0.5)' },
                        backgroundStroke: { color: 'rgba(200, 200, 200, 0.75)', width: 2 },
                        stroke: { color: '#fff', width: 3 },
                        overflow: true,
                        offsetX: 10,
                        offsetY: 20,
                        padding: [2.5, 2.5, 2.5, 2.5]
                    };
            }
            return this.styleService.createStyleByAttribute(feature, localHoverStyle);
        };
        /**
         * Stop listening to pointermove and reverse search results.
         * @internal
         */
        HoverFeatureDirective.prototype.ngOnDestroy = function () {
            this.unlistenToMapPointerMove();
            this.unsubscribeToPointerStore();
            this.unlistenToMapSingleClick();
            this.layers$$.unsubscribe();
        };
        /**
         * Subscribe to pointermove result store
         * @internal
         */
        HoverFeatureDirective.prototype.subscribeToPointerStore = function () {
            var _this = this;
            this.store$$ = this.pointerHoverFeatureStore.entities$.subscribe(function (resultsUnderPointerPosition) {
                _this.entitiesToPointerOverlay(resultsUnderPointerPosition);
            });
        };
        /**
         * convert store entities to a pointer position overlay with label summary on.
         * @param event OL map browser pointer event
         */
        HoverFeatureDirective.prototype.entitiesToPointerOverlay = function (resultsUnderPointerPosition) {
            this.addFeatureOverlay(resultsUnderPointerPosition);
        };
        /**
         * On map pointermove
         */
        HoverFeatureDirective.prototype.listenToMapPointerMove = function () {
            var _this = this;
            this.pointerMoveListener = this.map.ol.on('pointermove', function (event) { return _this.onMapEvent(event); });
        };
        /**
         * On map singleclick
         */
        HoverFeatureDirective.prototype.listenToMapClick = function () {
            var _this = this;
            this.singleClickMapListener = this.map.ol.on('singleclick', function (event) { return _this.onMapSingleClickEvent(event); });
        };
        /**
         * Unsubscribe to pointer store.
         * @internal
         */
        HoverFeatureDirective.prototype.unsubscribeToPointerStore = function () {
            this.store$$.unsubscribe();
        };
        /**
         * Stop listening for map pointermove
         * @internal
         */
        HoverFeatureDirective.prototype.unlistenToMapPointerMove = function () {
            olObservable.unByKey(this.pointerMoveListener);
            this.pointerMoveListener = undefined;
        };
        /**
         * Stop listening for map singleclick
         * @internal
         */
        HoverFeatureDirective.prototype.unlistenToMapSingleClick = function () {
            olObservable.unByKey(this.singleClickMapListener);
            this.singleClickMapListener = undefined;
        };
        /**
         * Trigger clear layer on singleclick.
         * @param event OL map browser singleclick event
         */
        HoverFeatureDirective.prototype.onMapSingleClickEvent = function (event) {
            this.clearLayer();
        };
        /**
         * Trigger hover when the mouse is motionless during the defined delay (pointerMoveDelay).
         * @param event OL map browser pointer event
         */
        HoverFeatureDirective.prototype.onMapEvent = function (event) {
            var _this = this;
            if (event.dragging || !this.igoHoverFeatureEnabled ||
                this.mediaService.isTouchScreen()) {
                this.clearLayer();
                return;
            }
            if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves
                clearTimeout(this.lastTimeoutRequest);
            }
            this.clearLayer();
            var maximumZindex = -Infinity;
            var topMostOlLayer;
            var pixel = this.map.ol.getPixelFromCoordinate(event.coordinate);
            this.lastTimeoutRequest = setTimeout(function () {
                // retrieve the topmost layer with feature to only apply the hover on this layer.
                _this.map.ol.forEachFeatureAtPixel(pixel, function (mapFeature, layerOL) {
                    if (!layerOL) {
                        return;
                    }
                    var igoLayer = _this.map.getLayerByOlUId(layerOL.ol_uid);
                    if (!_this.canProcessHover(igoLayer)) {
                        return;
                    }
                    if (igoLayer.zIndex <= maximumZindex) {
                        return;
                    }
                    maximumZindex = igoLayer.zIndex;
                    topMostOlLayer = layerOL;
                }, {
                    hitTolerance: 10, layerFilter: function (olLayer) { return olLayer instanceof OlVectorLayer__default["default"] || olLayer instanceof olLayerVectorTile__default["default"]; }
                });
                if (!topMostOlLayer) {
                    return;
                }
                _this.clearLayer();
                _this.map.ol.forEachFeatureAtPixel(pixel, function (mapFeature, layerOL) {
                    var _a, _b, _c;
                    if (mapFeature.get('hoverSummary') === undefined) {
                        var igoLayer_1;
                        if (layerOL instanceof OlVectorLayer__default["default"]) {
                            igoLayer_1 = _this.map.getLayerByOlUId(layerOL.ol_uid);
                            if (!_this.canProcessHover(igoLayer_1)) {
                                return;
                            }
                            var localOlFeature = _this.handleRenderFeature(mapFeature);
                            _this.setLayerStyleFromOptions(igoLayer_1, localOlFeature);
                            var featuresToLoad = [localOlFeature];
                            localOlFeature.set("_isLabel", false);
                            var myLabelOlFeature = new OlFeature__default["default"]();
                            myLabelOlFeature.setProperties(localOlFeature.getProperties());
                            var labelGeom = localOlFeature.getGeometry().getType() === 'Point' ? localOlFeature.getGeometry() : new olgeom__namespace.Point(event.coordinate);
                            myLabelOlFeature.setGeometry(labelGeom);
                            myLabelOlFeature.setId(localOlFeature.getId());
                            myLabelOlFeature.set("_isLabel", true);
                            _this.setLayerStyleFromOptions(igoLayer_1, myLabelOlFeature);
                            featuresToLoad.push(myLabelOlFeature);
                            _this.pointerHoverFeatureStore.load(featuresToLoad);
                            return true;
                        }
                        if (layerOL instanceof olLayerVectorTile__default["default"]) {
                            igoLayer_1 = _this.map.getLayerByOlUId(layerOL.ol_uid);
                            if (!_this.canProcessHover(igoLayer_1)) {
                                return;
                            }
                            if ((_b = (_a = igoLayer_1 === null || igoLayer_1 === void 0 ? void 0 : igoLayer_1.options) === null || _a === void 0 ? void 0 : _a.styleByAttribute) === null || _b === void 0 ? void 0 : _b.hoverStyle) {
                                _this.mvtStyleOptions = igoLayer_1.options.styleByAttribute.hoverStyle;
                            }
                            else if ((_c = igoLayer_1 === null || igoLayer_1 === void 0 ? void 0 : igoLayer_1.options) === null || _c === void 0 ? void 0 : _c.hoverStyle) {
                                _this.mvtStyleOptions = igoLayer_1.options.hoverStyle;
                            }
                            _this.selectionLayer.setSource(layerOL.getSource());
                            layerOL.getFeatures(event.pixel).then(function (mvtFeatures) {
                                if (!mvtFeatures.length) {
                                    _this.selectionMVT = {};
                                    _this.selectionLayer.changed();
                                    _this.clearLayer();
                                    return;
                                }
                                var feature = mvtFeatures[0];
                                if (!feature) {
                                    _this.clearLayer();
                                    return;
                                }
                                var localOlFeature = _this.handleRenderFeature(feature);
                                localOlFeature.set("_isLabel", false);
                                var myLabelOlFeature = new OlFeature__default["default"]();
                                myLabelOlFeature.setProperties(localOlFeature.getProperties());
                                var labelGeom = localOlFeature.getGeometry().getType() === 'Point' ? localOlFeature.getGeometry() : new olgeom__namespace.Point(event.coordinate);
                                myLabelOlFeature.setGeometry(labelGeom);
                                myLabelOlFeature.setId(localOlFeature.getId());
                                myLabelOlFeature.set("_isLabel", true);
                                _this.setLayerStyleFromOptions(igoLayer_1, myLabelOlFeature);
                                _this.pointerHoverFeatureStore.load([myLabelOlFeature]);
                                _this.selectionMVT[feature.getId()] = localOlFeature;
                                _this.selectionLayer.changed();
                            });
                        }
                    }
                    return true;
                }, {
                    hitTolerance: 10, layerFilter: function (olLayer) { return olLayer === topMostOlLayer; }
                });
            }, this.igoHoverFeatureDelay);
        };
        HoverFeatureDirective.prototype.canProcessHover = function (igoLayer) {
            if (!igoLayer) {
                return false;
            }
            if (!igoLayer.visible) {
                return false;
            }
            if (!igoLayer.options) {
                return false;
            }
            if (!igoLayer.options.styleByAttribute && !igoLayer.options.hoverStyle) {
                return false;
            }
            if ((igoLayer.options.styleByAttribute && !igoLayer.options.styleByAttribute.hoverStyle) &&
                !igoLayer.options.hoverStyle) {
                return false;
            }
            return true;
        };
        HoverFeatureDirective.prototype.handleRenderFeature = function (feature) {
            var localFeature;
            if (feature instanceof RenderFeature__default["default"]) {
                localFeature = new OlFeature__default["default"]({
                    geometry: this.getGeometry(feature)
                });
                localFeature.setId(feature.getId());
            }
            else if (feature instanceof OlFeature__default["default"]) {
                localFeature = feature;
            }
            return localFeature;
        };
        /**
         * Add a feature to the pointer store
         * @param text string
         */
        HoverFeatureDirective.prototype.addFeatureOverlay = function (hoverEntity) {
            if (hoverEntity.length > 0) {
                var result = hoverEntity[0];
                this.clearLayer();
                var feature = new OlFeature__default["default"]({
                    geometry: result.getGeometry(),
                    meta: { id: this.hoverFeatureId },
                    hoverSummary: this.getHoverSummary(result.getProperties())
                });
                this.store.setLayerOlFeatures([feature], exports.FeatureMotion.None);
            }
        };
        HoverFeatureDirective.prototype.setLayerStyleFromOptions = function (igoLayer, feature) {
            var _a, _b, _c;
            if ((_b = (_a = igoLayer === null || igoLayer === void 0 ? void 0 : igoLayer.options) === null || _a === void 0 ? void 0 : _a.styleByAttribute) === null || _b === void 0 ? void 0 : _b.hoverStyle) {
                this.store.layer.ol.setStyle(this.createHoverStyle(feature, igoLayer.options.styleByAttribute.hoverStyle));
                return;
            }
            if ((_c = igoLayer === null || igoLayer === void 0 ? void 0 : igoLayer.options) === null || _c === void 0 ? void 0 : _c.hoverStyle) {
                this.store.layer.ol.setStyle(this.createHoverStyle(feature, igoLayer.options.hoverStyle));
            }
        };
        HoverFeatureDirective.prototype.getHoverSummary = function (properties) {
            var e_1, _d;
            var summary = '';
            try {
                for (var _e = __values(Object.entries(properties)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var _g = __read(_f.value, 2), key = _g[0], value = _g[1];
                    if (!key.startsWith('_') && key !== 'geometry') {
                        summary += key + ": " + value + '\n';
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return summary.length >= 2 ? summary.slice(0, -2) : summary;
        };
        HoverFeatureDirective.prototype.getGeometry = function (feature) {
            var geom;
            if (!feature.getOrientedFlatCoordinates) {
                geom = feature.getGeometry();
            }
            else {
                var coords_1 = feature.getOrientedFlatCoordinates();
                var flatCoords_1 = [];
                coords_1.forEach(function (c, idx) {
                    if (idx % 2 === 0) {
                        flatCoords_1.push([parseFloat(coords_1[idx]), parseFloat(coords_1[idx + 1])]);
                    }
                });
                // TODO: test MultiX
                switch (feature.getType()) {
                    case 'Point':
                        geom = new olgeom__namespace.Point(flatCoords_1);
                        break;
                    case 'Polygon':
                        geom = new olgeom__namespace.Polygon([flatCoords_1]);
                        break;
                    case 'LineString':
                        geom = new olgeom__namespace.LineString([flatCoords_1]);
                        break;
                }
            }
            return geom;
        };
        /**
         * Clear the pointer store features
         */
        HoverFeatureDirective.prototype.clearLayer = function () {
            this.selectionMVT = {};
            if (this.selectionLayer) {
                this.selectionLayer.changed();
            }
            if (this.store) {
                this.store.clearLayer();
            }
        };
        return HoverFeatureDirective;
    }());
    HoverFeatureDirective.ɵfac = function HoverFeatureDirective_Factory(t) { return new (t || HoverFeatureDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent, 2), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MediaService), i0__namespace.ɵɵdirectiveInject(StyleService)); };
    HoverFeatureDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: HoverFeatureDirective, selectors: [["", "igoHoverFeature", ""]], hostBindings: function HoverFeatureDirective_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("mouseout", function HoverFeatureDirective_mouseout_HostBindingHandler() { return ctx.mouseout(); });
            }
        }, inputs: { igoHoverFeatureDelay: "igoHoverFeatureDelay", igoHoverFeatureEnabled: "igoHoverFeatureEnabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(HoverFeatureDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoHoverFeature]'
                    }]
            }], function () {
            return [{ type: MapBrowserComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: i2__namespace$1.MediaService }, { type: StyleService }];
        }, { igoHoverFeatureDelay: [{
                    type: i0.Input
                }], igoHoverFeatureEnabled: [{
                    type: i0.Input
                }], mouseout: [{
                    type: i0.HostListener,
                    args: ['mouseout']
                }] });
    })();
    /**
     * Create a default style for the pointer position and it's label summary.
     * @param feature OlFeature
     * @returns OL style function
     */
    function hoverFeatureMarker(feature, resolution) {
        var olStyleText = new olstyle__namespace.Style({
            text: new olstyle__namespace.Text({
                text: feature.get('hoverSummary'),
                textAlign: 'left',
                textBaseline: 'top',
                font: '12px Calibri,sans-serif',
                fill: new olstyle__namespace.Fill({ color: '#000' }),
                backgroundFill: new olstyle__namespace.Fill({ color: 'rgba(255, 255, 255, 0.5)' }),
                backgroundStroke: new olstyle__namespace.Stroke({ color: 'rgba(200, 200, 200, 0.75)', width: 2 }),
                stroke: new olstyle__namespace.Stroke({ color: '#fff', width: 3 }),
                overflow: true,
                offsetX: 10,
                offsetY: 20,
                padding: [2.5, 2.5, 2.5, 2.5]
            })
        });
        var olStyle = [olStyleText];
        switch (feature.getGeometry().getType()) {
            case 'Point':
                olStyle.push(new olstyle__namespace.Style({
                    image: new olstyle__namespace.Circle({
                        radius: 10,
                        stroke: new olstyle__namespace.Stroke({
                            color: 'blue',
                            width: 3
                        })
                    })
                }));
                break;
            default:
                olStyle.push(new olstyle__namespace.Style({
                    stroke: new olstyle__namespace.Stroke({
                        color: 'white',
                        width: 5
                    })
                }));
                olStyle.push(new olstyle__namespace.Style({
                    stroke: new olstyle__namespace.Stroke({
                        color: 'blue',
                        width: 3
                    })
                }));
        }
        return olStyle;
    }

    /**
     * Return a number of zone MTM for a longitude for province of Quebec only
     * @param lon number
     * @returns zone
     */
    function zoneMtm(lon) {
        var lonMin = -54;
        var lonMax = -81;
        if (lon < lonMax || lon > lonMin) {
            return 0;
        }
        else {
            var deltaLon = 3;
            var zone = 2;
            while (Math.abs(lon - lonMin) > deltaLon) {
                lonMin = lonMin - deltaLon;
                zone++;
            }
            return zone;
        }
    }
    /**
     * Return a number of zone UTM for a longitude
     * @param lon number
     * @returns zone
     */
    function zoneUtm(lon) {
        var lonMin = -180;
        var lonMax = 180;
        var deltaLon = 6;
        var zone = 1;
        while (Math.abs(lon - lonMin) > deltaLon) {
            lonMin = lonMin + deltaLon;
            zone++;
        }
        return zone;
    }
    /**
     * Compute the contraints of projections
     * @param projectionsLimitations: ProjectionsLimitationsOptions
     * @returns projectionsContraints: ProjectionsLimitationsOptions
     */
    function computeProjectionsConstraints(projectionsLimitations) {
        var mtmZone = projectionsLimitations.mtmZone;
        var utmZone = projectionsLimitations.utmZone;
        var projectionsConstraints = {
            projFromConfig: projectionsLimitations.projFromConfig === false ? false : true,
            nad83: projectionsLimitations.nad83 === false ? false : true,
            wgs84: projectionsLimitations.wgs84 === false ? false : true,
            webMercator: projectionsLimitations.webMercator === false ? false : true,
            utm: projectionsLimitations.utm === false ? false : true,
            mtm: projectionsLimitations.mtm === false ? false : true,
            utmZone: {
                minZone: utmZone && utmZone.minZone ? utmZone.minZone : 17,
                maxZone: utmZone && utmZone.maxZone ? utmZone.maxZone : 21,
            },
            mtmZone: {
                minZone: mtmZone && mtmZone.minZone ? mtmZone.minZone : 2,
                maxZone: mtmZone && mtmZone.maxZone ? mtmZone.maxZone : 10,
            }
        };
        return projectionsConstraints;
    }

    var _c0$i = function (a0) { return { zoom: a0 }; };
    var ZoomButtonComponent = /** @class */ (function () {
        function ZoomButtonComponent() {
        }
        Object.defineProperty(ZoomButtonComponent.prototype, "zoom", {
            get: function () { return this.map.viewController.getZoom(); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ZoomButtonComponent.prototype, "minZoom", {
            get: function () { return this.map.viewController.olView.getMinZoom() || 1; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ZoomButtonComponent.prototype, "maxZoom", {
            get: function () { return this.map.viewController.olView.getMaxZoom(); },
            enumerable: false,
            configurable: true
        });
        return ZoomButtonComponent;
    }());
    ZoomButtonComponent.ɵfac = function ZoomButtonComponent_Factory(t) { return new (t || ZoomButtonComponent)(); };
    ZoomButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ZoomButtonComponent, selectors: [["igo-zoom-button"]], inputs: { map: "map", color: "color" }, decls: 7, vars: 16, consts: [[1, "igo-zoom-button-container"], ["mat-icon-button", "", "matTooltipPosition", "left", 3, "matTooltip", "color", "disabled", "click"], ["svgIcon", "plus"], ["svgIcon", "minus"]], template: function ZoomButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵlistener("click", function ZoomButtonComponent_Template_button_click_1_listener() { return ctx.map.viewController.zoomIn(); });
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(4, "button", 1);
                i0__namespace.ɵɵlistener("click", function ZoomButtonComponent_Template_button_click_4_listener() { return ctx.map.viewController.zoomOut(); });
                i0__namespace.ɵɵpipe(5, "translate");
                i0__namespace.ɵɵelement(6, "mat-icon", 3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind2(2, 6, "igo.geo.mapButtons.zoomIn", i0__namespace.ɵɵpureFunction1(12, _c0$i, ctx.zoom + 1)))("color", ctx.color)("disabled", ctx.zoom >= ctx.maxZoom);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind2(5, 9, "igo.geo.mapButtons.zoomOut", i0__namespace.ɵɵpureFunction1(14, _c0$i, ctx.zoom - 1)))("color", ctx.color)("disabled", ctx.zoom <= ctx.minZoom);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [".igo-zoom-button-container[_ngcontent-%COMP%]{width:40px}.igo-zoom-button-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#fff}.igo-zoom-button-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#efefef}.igo-zoom-button-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-child{margin-bottom:2px}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ZoomButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-zoom-button',
                        templateUrl: './zoom-button.component.html',
                        styleUrls: ['./zoom-button.component.scss']
                    }]
            }], function () { return []; }, { map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    var MenuButtonComponent = /** @class */ (function () {
        function MenuButtonComponent(configService) {
            this.configService = configService;
            this.openSidenav = new i0.EventEmitter();
            this.menuButtonReverseColor = false;
            if (typeof this.configService.getConfig('menuButtonReverseColor') !==
                'undefined') {
                this.menuButtonReverseColor = this.configService.getConfig('menuButtonReverseColor');
            }
        }
        Object.defineProperty(MenuButtonComponent.prototype, "sidenavOpened", {
            get: function () {
                return this._sidenavOpenend;
            },
            set: function (value) {
                this._sidenavOpenend = value;
                this.getClassMenuButton();
            },
            enumerable: false,
            configurable: true
        });
        MenuButtonComponent.prototype.getClassMenuButton = function () {
            if (this.sidenavOpened) {
                this.menuButtonClass = {
                    'menu-button': this.menuButtonReverseColor === false,
                    'menu-button-reverse-color': this.menuButtonReverseColor === true
                };
            }
            else {
                this.menuButtonClass = {
                    'menu-button': this.menuButtonReverseColor === false,
                    'menu-button-reverse-color-close': this.menuButtonReverseColor === true
                };
            }
        };
        MenuButtonComponent.prototype.onToggleSidenavClick = function () {
            this.openSidenav.emit();
        };
        return MenuButtonComponent;
    }());
    MenuButtonComponent.ɵfac = function MenuButtonComponent_Factory(t) { return new (t || MenuButtonComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService)); };
    MenuButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MenuButtonComponent, selectors: [["igo-menu-button"]], inputs: { sidenavOpened: "sidenavOpened" }, outputs: { openSidenav: "openSidenav" }, decls: 3, vars: 4, consts: [["mat-icon-button", "", "id", "menu-button", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "ngClass", "matTooltip", "click"], ["svgIcon", "menu"]], template: function MenuButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "button", 0);
                i0__namespace.ɵɵlistener("click", function MenuButtonComponent_Template_button_click_0_listener() { return ctx.onToggleSidenavClick(); });
                i0__namespace.ɵɵpipe(1, "translate");
                i0__namespace.ɵɵelement(2, "mat-icon", 1);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngClass", ctx.menuButtonClass)("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, ctx.sidenavOpened ? "menu.close" : "menu.open"));
            }
        }, directives: [i2__namespace.MatButton, i1__namespace$1.NgClass, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: ["#menu-button[_ngcontent-%COMP%]{background-color:#fff;border-radius:0;left:5px;top:5px}#menu-button.menu-button-reverse-color[_ngcontent-%COMP%]{height:40px;border-radius:0;height:45px;width:48px;left:0px;top:3px}#menu-button.menu-button-reverse-color-close[_ngcontent-%COMP%]{border-radius:0;left:5px;top:5px}mat-icon.disabled[_ngcontent-%COMP%]{color:#00000061}#menu-button[_ngcontent-%COMP%]     div.mat-button-ripple-round{border-radius:0}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MenuButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-menu-button',
                        templateUrl: './menu-button.component.html',
                        styleUrls: ['./menu-button.component.scss']
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, { sidenavOpened: [{
                    type: i0.Input
                }], openSidenav: [{
                    type: i0.Output
                }] });
    })();

    var GeolocateButtonComponent = /** @class */ (function () {
        function GeolocateButtonComponent() {
        }
        Object.defineProperty(GeolocateButtonComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeolocateButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        return GeolocateButtonComponent;
    }());
    GeolocateButtonComponent.ɵfac = function GeolocateButtonComponent_Factory(t) { return new (t || GeolocateButtonComponent)(); };
    GeolocateButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: GeolocateButtonComponent, selectors: [["igo-geolocate-button"]], inputs: { map: "map", color: "color" }, decls: 4, vars: 4, consts: [[1, "igo-geolocate-button-container"], ["mat-icon-button", "", "matTooltipPosition", "left", 3, "matTooltip", "color", "click"], ["svgIcon", "crosshairs-gps"]], template: function GeolocateButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵlistener("click", function GeolocateButtonComponent_Template_button_click_1_listener() { return ctx.map.geolocate(); });
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.mapButtons.geolocate"))("color", ctx.color);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [".igo-geolocate-button-container[_ngcontent-%COMP%]{width:40px;background-color:#fff}.igo-geolocate-button-container[_ngcontent-%COMP%]:hover{background-color:#efefef}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(GeolocateButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-geolocate-button',
                        templateUrl: './geolocate-button.component.html',
                        styleUrls: ['./geolocate-button.component.scss']
                    }]
            }], function () { return []; }, { map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    /*
    Button to center the map to the home extent
    */
    var HomeExtentButtonComponent = /** @class */ (function () {
        function HomeExtentButtonComponent(configService) {
            this.configService = configService;
            this.computeHomeExtent();
        }
        HomeExtentButtonComponent.prototype.computeHomeExtent = function () {
            this.homeExtentButtonExtent = this.extentOverride || this.configService.getConfig('homeExtentButton.homeExtButtonExtent');
            this.homeExtentButtonCenter = this.centerOverride || this.configService.getConfig('homeExtentButton.homeExtButtonCenter');
            this.homeExtentButtonZoom = this.zoomOverride || this.configService.getConfig('homeExtentButton.homeExtButtonZoom');
            // priority over extent if these 2 properties are defined;
            if (this.centerOverride && this.zoomOverride) {
                this.homeExtentButtonExtent = undefined;
            }
        };
        HomeExtentButtonComponent.prototype.onToggleClick = function () {
            this.computeHomeExtent();
            if (this.homeExtentButtonExtent) {
                this.map.viewController.zoomToExtent(this.homeExtentButtonExtent);
            }
            else if (this.homeExtentButtonCenter && this.homeExtentButtonZoom) {
                var center = olproj__namespace.fromLonLat(this.homeExtentButtonCenter, this.map.viewController.olView.getProjection().getCode());
                this.map.viewController.olView.setCenter(center);
                this.map.viewController.zoomTo(this.homeExtentButtonZoom);
            }
        };
        return HomeExtentButtonComponent;
    }());
    HomeExtentButtonComponent.ɵfac = function HomeExtentButtonComponent_Factory(t) { return new (t || HomeExtentButtonComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService)); };
    HomeExtentButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: HomeExtentButtonComponent, selectors: [["igo-home-extent-button"]], inputs: { map: "map", color: "color", extentOverride: "extentOverride", centerOverride: "centerOverride", zoomOverride: "zoomOverride" }, decls: 4, vars: 4, consts: [[1, "igo-home-extent-button-container"], ["mat-icon-button", "", "matTooltipPosition", "left", 3, "matTooltip", "color", "click"], ["svgIcon", "home-map-marker"]], template: function HomeExtentButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵlistener("click", function HomeExtentButtonComponent_Template_button_click_1_listener() { return ctx.onToggleClick(); });
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.mapButtons.home-extent"))("color", ctx.color);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: ["@charset \"UTF-8\";.igo-home-extent-button-container[_ngcontent-%COMP%]{width:40px;background-color:#fff}\\a0[_ngcontent-%COMP%]   .igo-home-extent-button-container[_ngcontent-%COMP%]:hover{background-color:#efefef}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(HomeExtentButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-home-extent-button',
                        templateUrl: './home-extent-button.component.html',
                        styleUrls: ['./home-extent-button.component.scss'],
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, { map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], extentOverride: [{
                    type: i0.Input
                }], centerOverride: [{
                    type: i0.Input
                }], zoomOverride: [{
                    type: i0.Input
                }] });
    })();

    var _c0$h = function (a0) { return [a0]; };
    function OfflineButtonComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵelementStart(1, "div");
            i0__namespace.ɵɵelementStart(2, "button", 2);
            i0__namespace.ɵɵlistener("click", function OfflineButtonComponent_div_0_Template_button_click_2_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.onToggle(); })("click", function OfflineButtonComponent_div_0_Template_button_click_2_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r3 = i0__namespace.ɵɵnextContext(); return ctx_r3.map.onOfflineToggle(ctx_r3.check); });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelement(5, "mat-icon", 3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r0.checked ? i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.mapButtons.online") : i0__namespace.ɵɵpipeBind1(4, 5, "igo.geo.mapButtons.offline"))("ngClass", i0__namespace.ɵɵpureFunction1(7, _c0$h, ctx_r0.btnStyle))("color", ctx_r0.checked ? ctx_r0.color : i0__namespace.ɵɵpureFunction1(9, _c0$h, ctx_r0.colorOff));
        }
    }
    var OfflineButtonComponent = /** @class */ (function () {
        function OfflineButtonComponent(config) {
            this.config = config;
            this.btnStyle = 'baseStyle';
            this.colorOff = 'rgb(255,255,255)';
            this.change = new i0.EventEmitter();
            this.check = false;
            this.visible = false;
            this.visible = this.config.getConfig('offlineButton') ? true : false;
        }
        Object.defineProperty(OfflineButtonComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OfflineButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OfflineButtonComponent.prototype, "checked", {
            get: function () {
                return this.check;
            },
            enumerable: false,
            configurable: true
        });
        OfflineButtonComponent.prototype.onToggle = function () {
            this.check = !this.check;
            if (this.check) {
                this.btnStyle = 'toggleStyle';
            }
            else {
                this.btnStyle = 'baseStyle';
            }
        };
        return OfflineButtonComponent;
    }());
    OfflineButtonComponent.ɵfac = function OfflineButtonComponent_Factory(t) { return new (t || OfflineButtonComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService)); };
    OfflineButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OfflineButtonComponent, selectors: [["igo-offline-button"]], inputs: { map: "map", color: "color", check: "check" }, outputs: { change: "change" }, decls: 1, vars: 1, consts: [["class", "igo-user-button-container", 4, "ngIf"], [1, "igo-user-button-container"], ["mat-icon-button", "", "matTooltipPosition", "left", 3, "matTooltip", "ngClass", "color", "click"], ["svgIcon", "wifi-strength-off"]], template: function OfflineButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, OfflineButtonComponent_div_0_Template, 6, 11, "div", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.visible);
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i1__namespace$1.NgClass, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [".baseStyle[_ngcontent-%COMP%]{width:40px;background-color:#fff}.baseStyle[_ngcontent-%COMP%]:hover{background-color:#efefef}.toggleStyle[_ngcontent-%COMP%]{width:40px;background-color:#b9b9b9}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OfflineButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-offline-button',
                        templateUrl: './offline-button.component.html',
                        styleUrls: ['./offline-button.component.scss']
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, { change: [{
                    type: i0.Output
                }], map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], check: [{
                    type: i0.Input
                }] });
    })();

    function baseLayersSwitcherSlideInOut() {
        return animations.trigger('baseLayerSwitcherState', [
            animations.state('collapseIcon', animations.style({
                height: '40px',
                width: '40px',
                overflow: 'hidden'
            })),
            animations.state('collapseMap', animations.style({
                height: '85px',
                overflow: 'hidden'
            })),
            animations.state('expand', animations.style({
                overflow: 'hidden'
            })),
            animations.transition('collapse => expand', animations.animate('200ms')),
            animations.transition('expand => collapse', animations.animate('200ms'))
        ]);
    }

    function BaseLayersSwitcherComponent_div_0_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 6);
            i0__namespace.ɵɵelementStart(1, "button", 7);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.mapButtons.baselayerSwitcher"));
        }
    }
    function BaseLayersSwitcherComponent_div_0_igo_mini_basemap_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-mini-basemap", 9);
            i0__namespace.ɵɵpipe(1, "translate");
        }
        if (rf & 2) {
            var baseLayer_r3 = ctx.$implicit;
            var i_r4 = ctx.index;
            var ctx_r2 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("map", ctx_r2.map)("baseLayer", baseLayer_r3)("title", ctx_r2.baseLayers.length > 2 && !ctx_r2.expand ? i0__namespace.ɵɵpipeBind1(1, 5, "igo.geo.baselayersSwitcher.title") : baseLayer_r3.title)("display", ctx_r2.expand || i_r4 === 0 && !ctx_r2.useStaticIcon)("disabled", !ctx_r2.expand && ctx_r2.baseLayers.length > 1);
        }
    }
    var _c0$g = function (a0) { return { "container-expand": a0 }; };
    function BaseLayersSwitcherComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r6_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵlistener("@baseLayerSwitcherState.start", function BaseLayersSwitcherComponent_div_0_Template_div_animation_baseLayerSwitcherState_start_0_listener() { i0__namespace.ɵɵrestoreView(_r6_1); var ctx_r5 = i0__namespace.ɵɵnextContext(); return ctx_r5.showButton = false; })("@baseLayerSwitcherState.done", function BaseLayersSwitcherComponent_div_0_Template_div_animation_baseLayerSwitcherState_done_0_listener() { i0__namespace.ɵɵrestoreView(_r6_1); var ctx_r7 = i0__namespace.ɵɵnextContext(); return ctx_r7.showButton = true; })("click", function BaseLayersSwitcherComponent_div_0_Template_div_click_0_listener() { i0__namespace.ɵɵrestoreView(_r6_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.collapseOrExpand(); });
            i0__namespace.ɵɵtemplate(1, BaseLayersSwitcherComponent_div_0_div_1_Template, 4, 3, "div", 2);
            i0__namespace.ɵɵtemplate(2, BaseLayersSwitcherComponent_div_0_igo_mini_basemap_2_Template, 2, 7, "igo-mini-basemap", 3);
            i0__namespace.ɵɵelementStart(3, "div", 4);
            i0__namespace.ɵɵelement(4, "mat-icon", 5);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(4, _c0$g, ctx_r0.expand))("@baseLayerSwitcherState", ctx_r0.expand ? "expand" : ctx_r0.useStaticIcon ? "collapseIcon" : "collapseMap");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.useStaticIcon && !ctx_r0.expand && ctx_r0.showButton);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r0.baseLayers);
        }
    }
    var BaseLayersSwitcherComponent = /** @class */ (function () {
        function BaseLayersSwitcherComponent(mediaService) {
            this.mediaService = mediaService;
            this._baseLayers = [];
            this.expand = false;
            this.showButton = true;
            var media = this.mediaService.media$.value;
            if (media === i2$1.Media.Mobile && this.useStaticIcon === undefined) {
                this.useStaticIcon = true;
            }
        }
        BaseLayersSwitcherComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.layers$$ = this.map.layers$.subscribe(function (arrayLayers) {
                _this._baseLayers = arrayLayers.filter(function (l) { return l.baseLayer; });
            });
        };
        BaseLayersSwitcherComponent.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
        };
        BaseLayersSwitcherComponent.prototype.collapseOrExpand = function () {
            if (this.baseLayers.length > 1 || this.useStaticIcon) {
                this.expand = !this.expand;
            }
            else {
                this.expand = false;
            }
        };
        Object.defineProperty(BaseLayersSwitcherComponent.prototype, "baseLayers", {
            get: function () {
                var mapResolution = this.map.viewController.getResolution();
                var mapZoom = this.map.viewController.getZoom();
                var bl = this._baseLayers.filter(function (l) {
                    return ((!l.options.maxResolution ||
                        mapResolution <= l.options.maxResolution) &&
                        (!l.options.minResolution || mapResolution >= l.options.minResolution) &&
                        (!l.options.source.options.maxZoom || mapZoom <= l.options.source.options.maxZoom) &&
                        (!l.options.source.options.minZoom || mapZoom >= l.options.source.options.minZoom));
                });
                var blHidden = bl.filter(function (l) { return !l.visible; });
                return blHidden.length + 1 === bl.length ? blHidden : bl;
            },
            enumerable: false,
            configurable: true
        });
        return BaseLayersSwitcherComponent;
    }());
    BaseLayersSwitcherComponent.ɵfac = function BaseLayersSwitcherComponent_Factory(t) { return new (t || BaseLayersSwitcherComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MediaService)); };
    BaseLayersSwitcherComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: BaseLayersSwitcherComponent, selectors: [["igo-baselayers-switcher"]], inputs: { map: "map", useStaticIcon: "useStaticIcon" }, decls: 1, vars: 1, consts: [["class", "igo-baselayers-switcher-container", 3, "ngClass", "click", 4, "ngIf"], [1, "igo-baselayers-switcher-container", 3, "ngClass", "click"], ["class", "igo-baselayers-switcher-button-container", 4, "ngIf"], ["class", "mat-typography", 3, "map", "baseLayer", "title", "display", "disabled", 4, "ngFor", "ngForOf"], [1, "more-baselayers"], ["color", "primary", "svgIcon", "menu-down", 1, "material-icons", "mat-icon", "mat-list-avatar"], [1, "igo-baselayers-switcher-button-container"], ["mat-icon-button", "", "matTooltipPosition", "right", "color", "primary", 3, "matTooltip"], ["svgIcon", "image-multiple"], [1, "mat-typography", 3, "map", "baseLayer", "title", "display", "disabled"]], template: function BaseLayersSwitcherComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, BaseLayersSwitcherComponent_div_0_Template, 5, 6, "div", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.baseLayers.length > 0);
            }
        }, styles: [".igo-baselayers-switcher-container[_ngcontent-%COMP%]{height:auto;position:relative}.container-expand[_ngcontent-%COMP%]{overflow:hidden;border-width:0}.more-baselayers[_ngcontent-%COMP%]{width:80px;height:20px;background-color:#fff;text-align:center;cursor:pointer}.more-baselayers[_ngcontent-%COMP%]:hover{background-color:#efefef}.igo-baselayers-switcher-button-container[_ngcontent-%COMP%]{width:40px;background-color:#fff}.igo-baselayers-switcher-button-container[_ngcontent-%COMP%]:hover{background-color:#efefef}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}"], data: { animation: [baseLayersSwitcherSlideInOut()] } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(BaseLayersSwitcherComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-baselayers-switcher',
                        templateUrl: './baselayers-switcher.component.html',
                        styleUrls: ['./baselayers-switcher.component.scss'],
                        animations: [baseLayersSwitcherSlideInOut()]
                    }]
            }], function () { return [{ type: i2__namespace$1.MediaService }]; }, { map: [{
                    type: i0.Input
                }], useStaticIcon: [{
                    type: i0.Input
                }] });
    })();

    var LayerService = /** @class */ (function () {
        function LayerService(http, styleService, dataSourceService, messageService, languageService, authInterceptor) {
            this.http = http;
            this.styleService = styleService;
            this.dataSourceService = dataSourceService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.authInterceptor = authInterceptor;
        }
        LayerService.prototype.createLayer = function (layerOptions) {
            if (!layerOptions.source) {
                return;
            }
            if (layerOptions.source.options &&
                layerOptions.source.options._layerOptionsFromSource) {
                layerOptions = utils.ObjectUtils.mergeDeep(layerOptions.source.options._layerOptionsFromSource, layerOptions || {});
            }
            var layer;
            switch (layerOptions.source.constructor) {
                case OSMDataSource:
                case WMTSDataSource:
                case XYZDataSource:
                case TileDebugDataSource:
                case CartoDataSource:
                case TileArcGISRestDataSource:
                    layer = this.createTileLayer(layerOptions);
                    break;
                case FeatureDataSource:
                case WFSDataSource:
                case ArcGISRestDataSource:
                case WebSocketDataSource:
                case ClusterDataSource:
                    layer = this.createVectorLayer(layerOptions);
                    break;
                case ImageArcGISRestDataSource:
                case WMSDataSource:
                    layer = this.createImageLayer(layerOptions);
                    break;
                case MVTDataSource:
                    var _layerOptions = computeMVTOptionsOnHover(layerOptions);
                    layer = this.createVectorTileLayer(_layerOptions);
                    break;
                default:
                    break;
            }
            return layer;
        };
        LayerService.prototype.createAsyncLayer = function (_layerOptions, detailedContextUri) {
            var _this = this;
            var layerOptions = computeMVTOptionsOnHover(_layerOptions);
            if (layerOptions.source) {
                return new rxjs.Observable(function (d) { return d.next(_this.createLayer(layerOptions)); });
            }
            return this.dataSourceService
                .createAsyncDataSource(layerOptions.sourceOptions, detailedContextUri)
                .pipe(operators.map(function (source) {
                if (source === undefined) {
                    return undefined;
                }
                return _this.createLayer(Object.assign(layerOptions, { source: source }));
            }));
        };
        LayerService.prototype.createImageLayer = function (layerOptions) {
            return new ImageLayer(layerOptions, this.messageService, this.languageService, this.authInterceptor);
        };
        LayerService.prototype.createTileLayer = function (layerOptions) {
            return new TileLayer(layerOptions, this.messageService, this.authInterceptor);
        };
        LayerService.prototype.createVectorLayer = function (layerOptions) {
            var style;
            var igoLayer;
            if (layerOptions.style !== undefined) {
                style = this.styleService.createStyle(layerOptions.style);
            }
            if (layerOptions.source instanceof ArcGISRestDataSource) {
                var source = layerOptions.source;
                style = source.options.params.style;
            }
            else if (layerOptions.styleByAttribute) {
                var serviceStyle_1 = this.styleService;
                layerOptions.style = function (feature) {
                    return serviceStyle_1.createStyleByAttribute(feature, layerOptions.styleByAttribute);
                };
                igoLayer = new VectorLayer(layerOptions, this.messageService, this.authInterceptor);
            }
            if (layerOptions.source instanceof ClusterDataSource) {
                var serviceStyle_2 = this.styleService;
                var baseStyle_1 = layerOptions.clusterBaseStyle;
                layerOptions.style = function (feature) {
                    return serviceStyle_2.createClusterStyle(feature, layerOptions.clusterParam, baseStyle_1);
                };
                igoLayer = new VectorLayer(layerOptions, this.messageService, this.authInterceptor);
            }
            var layerOptionsOl = Object.assign({}, layerOptions, {
                style: style
            });
            if (!igoLayer) {
                igoLayer = new VectorLayer(layerOptionsOl, this.messageService, this.authInterceptor);
            }
            this.applyMapboxStyle(igoLayer, layerOptionsOl);
            return igoLayer;
        };
        LayerService.prototype.createVectorTileLayer = function (layerOptions) {
            var style;
            var igoLayer;
            if (layerOptions.style !== undefined) {
                style = this.styleService.createStyle(layerOptions.style);
            }
            if (layerOptions.styleByAttribute) {
                var serviceStyle_3 = this.styleService;
                layerOptions.style = function (feature) {
                    return serviceStyle_3.createStyleByAttribute(feature, layerOptions.styleByAttribute);
                };
                igoLayer = new VectorTileLayer(layerOptions, this.messageService, this.authInterceptor);
            }
            var layerOptionsOl = Object.assign({}, layerOptions, {
                style: style
            });
            if (!igoLayer) {
                igoLayer = new VectorTileLayer(layerOptionsOl, this.messageService, this.authInterceptor);
            }
            this.applyMapboxStyle(igoLayer, layerOptionsOl);
            return igoLayer;
        };
        LayerService.prototype.applyMapboxStyle = function (layer, layerOptions) {
            if (layerOptions.mapboxStyle) {
                this.getMapboxGlStyle(layerOptions.mapboxStyle.url).subscribe(function (res) {
                    stylefunction__default["default"](layer.ol, res, layerOptions.mapboxStyle.source);
                });
            }
        };
        LayerService.prototype.getMapboxGlStyle = function (url) {
            return this.http.get(url).pipe(operators.map(function (res) { return res; }), operators.catchError(function (err) {
                console.log('No style was found');
                return rxjs.of(err);
            }));
        };
        return LayerService;
    }());
    LayerService.ɵfac = function LayerService_Factory(t) { return new (t || LayerService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(StyleService), i0__namespace.ɵɵinject(DataSourceService), i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i5__namespace.AuthInterceptor, 8)); };
    LayerService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: LayerService, factory: LayerService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: StyleService }, { type: DataSourceService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }, { type: i5__namespace.AuthInterceptor, decorators: [{
                            type: i0.Optional
                        }] }];
        }, null);
    })();

    function MiniBaseMapComponent_div_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 5);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", ctx_r1.title, " ");
        }
    }
    function MiniBaseMapComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r3_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 2);
            i0__namespace.ɵɵlistener("click", function MiniBaseMapComponent_div_1_Template_div_click_0_listener() { i0__namespace.ɵɵrestoreView(_r3_1); var ctx_r2 = i0__namespace.ɵɵnextContext(); return ctx_r2.changeBaseLayer(ctx_r2.baseLayer); });
            i0__namespace.ɵɵelement(1, "igo-map-browser", 3);
            i0__namespace.ɵɵtemplate(2, MiniBaseMapComponent_div_1_div_2_Template, 2, 1, "div", 4);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("map", ctx_r0.basemap);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.title);
        }
    }
    var MiniBaseMapComponent = /** @class */ (function () {
        function MiniBaseMapComponent(layerService, appRef) {
            this.layerService = layerService;
            this.appRef = appRef;
            this.basemap = new IgoMap({
                controls: {},
                interactions: false
            });
        }
        Object.defineProperty(MiniBaseMapComponent.prototype, "baseLayer", {
            get: function () {
                return this._baseLayer;
            },
            set: function (value) {
                this._baseLayer = value;
                this.handleBaseLayerChanged(value);
            },
            enumerable: false,
            configurable: true
        });
        MiniBaseMapComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.handleMainMapViewChange(this.map.ol.getView());
            this.map.viewController.olView.on('change', function (change) {
                _this.handleMainMapViewChange(change.target);
            });
            this.map.ol.on('pointerdrag', function (change) {
                _this.handleMainMapViewChange(change.target.getView());
            });
        };
        MiniBaseMapComponent.prototype.ngOnDestroy = function () {
            var _this = this;
            this.map.viewController.olView.un('change', function (change) {
                _this.handleMainMapViewChange(change.target);
            });
            this.map.ol.un('pointerdrag', function (change) {
                _this.handleMainMapViewChange(change.target.getView());
            });
        };
        MiniBaseMapComponent.prototype.changeBaseLayer = function (baseLayer) {
            if (this.disabled) {
                return;
            }
            this.map.changeBaseLayer(baseLayer);
            this.appRef.tick();
        };
        MiniBaseMapComponent.prototype.handleMainMapViewChange = function (mainMapView) {
            var mainMapViewProperties = mainMapView.getProperties();
            this.basemap.viewController.olView.setResolution(mainMapViewProperties.resolution);
            this.basemap.viewController.olView.setRotation(mainMapViewProperties.rotation);
            this.basemap.viewController.olView.setCenter(this.map.viewController.getCenter());
        };
        MiniBaseMapComponent.prototype.handleBaseLayerChanged = function (baselayer) {
            this.basemap.removeAllLayers();
            var options = Object.assign(Object.create(baselayer.options), baselayer.options, {
                visible: true,
                baseLayer: false
            });
            var layer = this.layerService.createLayer(options);
            this.basemap.addLayer(layer);
            this.handleLinkedBaseLayer(layer);
        };
        MiniBaseMapComponent.prototype.handleLinkedBaseLayer = function (baselayer) {
            var _this = this;
            var linkedLayers = baselayer.options.linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer && currentLinkedId === baselayer.options.linkedLayers.linkId) {
                // search for child layers
                currentLinks.map(function (link) {
                    link.linkedIds.map(function (linkedId) {
                        var layerToApply = _this.map.layers.find(function (l) { var _a; return ((_a = l.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                        if (layerToApply) {
                            var linkedLayerOptions = Object.assign(Object.create(layerToApply.options), layerToApply.options, {
                                zIndex: 9000,
                                visible: true,
                                baseLayer: false,
                            });
                            _this.basemap.addLayer(_this.layerService.createLayer(linkedLayerOptions));
                        }
                    });
                });
            }
        };
        return MiniBaseMapComponent;
    }());
    MiniBaseMapComponent.ɵfac = function MiniBaseMapComponent_Factory(t) { return new (t || MiniBaseMapComponent)(i0__namespace.ɵɵdirectiveInject(LayerService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ApplicationRef)); };
    MiniBaseMapComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MiniBaseMapComponent, selectors: [["igo-mini-basemap"]], inputs: { map: "map", disabled: "disabled", display: "display", title: "title", baseLayer: "baseLayer" }, decls: 2, vars: 1, consts: [[1, "igo-mini-basemap-container"], [3, "click", 4, "ngIf"], [3, "click"], [3, "map"], ["class", "igo-mini-basemap-title", 4, "ngIf"], [1, "igo-mini-basemap-title"]], template: function MiniBaseMapComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵtemplate(1, MiniBaseMapComponent_div_1_Template, 3, 2, "div", 1);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.display);
            }
        }, styles: [".igo-mini-basemap-container[_ngcontent-%COMP%]{width:calc(40px * 2);height:calc(40px * 2);background-color:#ffffff03;border:2px solid white;box-shadow:0 1px 4px #0000004d;cursor:pointer;margin-top:5px}.igo-mini-basemap-container[_ngcontent-%COMP%]:hover   .igo-mini-basemap-title[_ngcontent-%COMP%]{color:#000;text-shadow:0 0 5px white}.igo-mini-basemap-container[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{width:100%;height:100%}.igo-mini-basemap-title[_ngcontent-%COMP%]{position:relative;top:-76px;height:76px;width:76px;text-align:center;vertical-align:bottom;color:#fff;text-shadow:0 0 5px black;white-space:normal;display:flex;align-items:flex-end;justify-content:center}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MiniBaseMapComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-mini-basemap',
                        templateUrl: './mini-basemap.component.html',
                        styleUrls: ['./mini-basemap.component.scss']
                    }]
            }], function () { return [{ type: LayerService }, { type: i0__namespace.ApplicationRef }]; }, { map: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], display: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], baseLayer: [{
                    type: i0.Input
                }] });
    })();

    function RotationButtonComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r3_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementStart(3, "button", 2);
            i0__namespace.ɵɵlistener("click", function RotationButtonComponent_div_0_Template_button_click_3_listener() { i0__namespace.ɵɵrestoreView(_r3_1); var ctx_r2 = i0__namespace.ɵɵnextContext(); return ctx_r2.map.viewController.resetRotation(); });
            i0__namespace.ɵɵelement(4, "mat-icon", 3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", ctx_r0.rotated ? i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.mapButtons.resetRotation") : i0__namespace.ɵɵpipeBind1(2, 6, "igo.geo.mapButtons.tipRotation"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("color", ctx_r0.color)("disabled", !ctx_r0.rotated);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r0.rotationStyle(ctx_r0.map.viewController.getRotation()));
        }
    }
    function RotationButtonComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementStart(3, "button", 2);
            i0__namespace.ɵɵlistener("click", function RotationButtonComponent_div_1_Template_button_click_3_listener() { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.map.viewController.resetRotation(); });
            i0__namespace.ɵɵelement(4, "mat-icon", 3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", ctx_r1.rotated ? i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.mapButtons.resetRotation") : i0__namespace.ɵɵpipeBind1(2, 6, "igo.geo.mapButtons.tipRotation"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("color", ctx_r1.color)("disabled", !ctx_r1.rotated);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r1.rotationStyle(ctx_r1.map.viewController.getRotation()));
        }
    }
    var RotationButtonComponent = /** @class */ (function () {
        function RotationButtonComponent() {
        }
        Object.defineProperty(RotationButtonComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RotationButtonComponent.prototype, "showIfNoRotation", {
            get: function () {
                return this._showIfNoRotation;
            },
            set: function (value) {
                this._showIfNoRotation = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RotationButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RotationButtonComponent.prototype, "rotated", {
            get: function () {
                return this.map.viewController.getRotation() !== 0;
            },
            enumerable: false,
            configurable: true
        });
        RotationButtonComponent.prototype.rotationStyle = function (radians) {
            var rotation = 'rotate(' + radians + 'rad)';
            return {
                transform: rotation
            };
        };
        return RotationButtonComponent;
    }());
    RotationButtonComponent.ɵfac = function RotationButtonComponent_Factory(t) { return new (t || RotationButtonComponent)(); };
    RotationButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: RotationButtonComponent, selectors: [["igo-rotation-button"]], inputs: { map: "map", showIfNoRotation: "showIfNoRotation", color: "color" }, decls: 2, vars: 2, consts: [["class", "igo-rotation-button-container", "matTooltipPosition", "left", 3, "matTooltip", 4, "ngIf"], ["matTooltipPosition", "left", 1, "igo-rotation-button-container", 3, "matTooltip"], ["mat-icon-button", "", "matTooltipPosition", "left", 3, "color", "disabled", "click"], ["svgIcon", "navigation", 3, "ngStyle"]], template: function RotationButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, RotationButtonComponent_div_0_Template, 5, 8, "div", 0);
                i0__namespace.ɵɵtemplate(1, RotationButtonComponent_div_1_Template, 5, 8, "div", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.rotated && !ctx.showIfNoRotation);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.showIfNoRotation);
            }
        }, directives: [i1__namespace$1.NgIf, i3__namespace.MatTooltip, i2__namespace.MatButton, i4__namespace.MatIcon, i1__namespace$1.NgStyle], pipes: [i7__namespace.TranslatePipe], styles: [".igo-rotation-button-container[_ngcontent-%COMP%]{width:40px;background-color:#fff}.igo-rotation-button-container[_ngcontent-%COMP%]:hover{background-color:#efefef}button[_ngcontent-%COMP%], [_nghost-%COMP%]     button .mat-button-ripple-round{border-radius:0}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){button[_ngcontent-%COMP%]:disabled, [_nghost-%COMP%]     button .mat-button-ripple-round:disabled{display:none}}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(RotationButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-rotation-button',
                        templateUrl: './rotation-button.component.html',
                        styleUrls: ['./rotation-button.component.scss']
                    }]
            }], function () { return []; }, { map: [{
                    type: i0.Input
                }], showIfNoRotation: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    /**
     * Tool to swipe the layers
     */
    var SwipeControlComponent = /** @class */ (function () {
        function SwipeControlComponent() {
            /**
             * State of draggable action
             */
            this.inDragAction = false;
            /**
             * Binder of prerender on the same element
             */
            this.boundPrerender = this.prerender.bind(this);
        }
        /**
         * Get the list of layers for swipe and activate of deactivate the swipe
         * @internal
         */
        SwipeControlComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.getListOfLayers();
            this.swipeEnabled$$ = this.map.swipeEnabled$.subscribe(function (value) {
                value ? _this.displaySwipe() : _this.displaySwipeOff();
            });
            this.letZoom();
        };
        /**
         * Clear the overlay layer and any interaction added by this component.
         * @internal
         */
        SwipeControlComponent.prototype.ngOnDestroy = function () {
            this.swipeEnabled$$.unsubscribe();
            this.map.swipeEnabled$.unsubscribe();
            this.displaySwipeOff();
        };
        /**
         * Display a swipe-element and render the layers
         */
        SwipeControlComponent.prototype.displaySwipe = function () {
            var _this = this;
            this.swipeId.style.visibility = 'visible';
            this.layers.map(function (layer) { return layer.ol.on('prerender', _this.boundPrerender); });
            this.layers.map(function (layer) { return layer.ol.on('postrender', _this.postrender); });
            this.map.ol.render();
        };
        /**
         * Clear a swipe-element and render the layers on the initial state
         */
        SwipeControlComponent.prototype.displaySwipeOff = function () {
            var _this = this;
            this.swipeId.style.visibility = 'hidden';
            this.layers.map(function (layer) { return layer.ol.un('prerender', _this.boundPrerender); });
            this.layers.map(function (layer) { return layer.ol.un('postrender', _this.postrender); });
            this.map.ol.render();
            this.layers = [];
        };
        Object.defineProperty(SwipeControlComponent.prototype, "swipeId", {
            /**
             * Getter of element
             */
            get: function () {
                return document.getElementById('igo-layer-swipe');
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Get the list of layers for swipe
         */
        SwipeControlComponent.prototype.getListOfLayers = function () {
            var _this = this;
            this.map.selectedFeatures$.subscribe(function (layers) {
                var e_1, _a;
                _this.layers = [];
                if (layers !== null) {
                    try {
                        for (var layers_1 = __values(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
                            var layer = layers_1_1.value;
                            if (!_this.layers.includes(layer)) {
                                _this.layers.push(layer);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (layers_1_1 && !layers_1_1.done && (_a = layers_1.return)) _a.call(layers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        };
        /**
         * Get a position of click or touch
         */
        SwipeControlComponent.prototype.dragDown = function (event) {
            this.inDragAction = true;
            event.preventDefault();
            if (event.type === 'mousedown') {
                this.pos3 = event.clientX;
                this.mouseSwipe();
                document.onmouseup = this.closeDragMouseElement;
            }
            else if (event.type === 'touchstart') {
                document.getElementById('arrows').style.visibility = 'hidden';
                this.pos3 = event.touches[0].clientX;
                this.touchSwipe();
                document.ontouchend = this.closeDragTouchElement;
            }
        };
        /**
         * Moving a line with a mouse
         */
        SwipeControlComponent.prototype.mouseSwipe = function () {
            var _this = this;
            document.addEventListener('mousemove', function (event) {
                if (_this.inDragAction) {
                    event.preventDefault();
                    _this.pos1 = _this.pos3 - event.clientX;
                    _this.pos3 = event.clientX;
                    _this.swipeId.style.left = (_this.swipeId.offsetLeft - _this.pos1) + 'px';
                }
                _this.map.ol.render();
            });
        };
        /**
         * Moving a line with a touch
         */
        SwipeControlComponent.prototype.touchSwipe = function () {
            var _this = this;
            document.addEventListener('touchmove', function (event) {
                if (_this.inDragAction) {
                    event.preventDefault();
                    document.getElementById('arrows').style.visibility = 'hidden';
                    _this.pos1 = _this.pos3 - event.changedTouches[0].clientX;
                    _this.pos3 = event.changedTouches[0].clientX;
                    _this.swipeId.style.left = (_this.swipeId.offsetLeft - _this.pos1) + 'px';
                }
                _this.map.ol.render();
            });
        };
        /**
         * Deactivate a listener of a mouse-action
         */
        SwipeControlComponent.prototype.closeDragMouseElement = function () {
            document.onmouseup = null;
            document.onmousemove = null;
            this.inDragAction = false;
        };
        /**
         * Deactivate a listener of a touch-action
         */
        SwipeControlComponent.prototype.closeDragTouchElement = function () {
            document.ontouchend = null;
            document.ontouchmove = null;
            document.getElementById('arrows').style.visibility = 'visible';
            this.inDragAction = false;
        };
        /**
         * Cut the image of a layer by the position of swiped-element
         */
        SwipeControlComponent.prototype.prerender = function (event) {
            var ctx = event.context;
            var mapSize = this.map.ol.getSize();
            var width = this.swipeId.offsetLeft;
            var tl = render.getRenderPixel(event, [width, 0]);
            var tr = render.getRenderPixel(event, [0, 0]);
            var bl = render.getRenderPixel(event, [width, mapSize[1]]);
            var br = render.getRenderPixel(event, [0, mapSize[1]]);
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(tl[0], tl[1]);
            ctx.lineTo(bl[0], bl[1]);
            ctx.lineTo(br[0], br[1]);
            ctx.lineTo(tr[0], tr[1]);
            ctx.closePath();
            ctx.clip();
        };
        /**
         * Save a current state of the context
         */
        SwipeControlComponent.prototype.postrender = function (event) {
            event.context.restore();
            event.context.save();
        };
        /**
         * Zoom on div
         */
        SwipeControlComponent.prototype.letZoom = function () {
            var _this = this;
            document.getElementById('igo-layer-swipe').addEventListener('wheel', function (event) {
                event.deltaY > 0 ? _this.map.viewController.zoomOut() : _this.map.viewController.zoomIn();
            }, true);
        };
        return SwipeControlComponent;
    }());
    SwipeControlComponent.ɵfac = function SwipeControlComponent_Factory(t) { return new (t || SwipeControlComponent)(); };
    SwipeControlComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SwipeControlComponent, selectors: [["igo-swipe-control"]], inputs: { map: "map" }, decls: 5, vars: 0, consts: [["id", "igo-layer-swipe", 1, "igo-swipe-control-container", 3, "mousedown", "mouseup", "touchstart", "touchend"], [1, "igo-swipe-control-line"], ["id", "arrows", 1, "igo-swipe-control-arrows"], [1, "igo-arrow-left"], [1, "igo-arrow-right"]], template: function SwipeControlComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵlistener("mousedown", function SwipeControlComponent_Template_div_mousedown_0_listener($event) { return ctx.dragDown($event); })("mouseup", function SwipeControlComponent_Template_div_mouseup_0_listener() { return ctx.closeDragMouseElement(); })("touchstart", function SwipeControlComponent_Template_div_touchstart_0_listener($event) { return ctx.dragDown($event); })("touchend", function SwipeControlComponent_Template_div_touchend_0_listener() { return ctx.closeDragTouchElement(); });
                i0__namespace.ɵɵelement(1, "div", 1);
                i0__namespace.ɵɵelementStart(2, "div", 2);
                i0__namespace.ɵɵelement(3, "div", 3);
                i0__namespace.ɵɵelement(4, "div", 4);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
        }, styles: [".igo-swipe-control-container[_ngcontent-%COMP%]{position:absolute;width:80px;height:100%;top:0%;left:50%;cursor:-webkit-grab;cursor:grab;z-index:1;transform:translate(-40px)}.igo-swipe-control-container[_ngcontent-%COMP%]:active{cursor:-webkit-grabbing;cursor:grabbing}.igo-swipe-control-line[_ngcontent-%COMP%]{position:absolute;width:4px;height:100%;top:50%;left:50%;transform:translate(-50%,-50%);background-color:#5e5a5a}.igo-swipe-control-arrows[_ngcontent-%COMP%]{position:absolute;width:32px;height:32px;left:50%;top:50%;transform:translate(-50%,-50%);margin-top:-16px;padding:5px 4px;background-color:#5e5a5a;z-index:2;-webkit-tap-highlight-color:rgba(0,0,0,0)}.igo-swipe-control-arrows[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{display:inline-block;width:0;height:0;border-top:10px solid transparent;border-bottom:10px solid transparent}.igo-swipe-control-arrows[_ngcontent-%COMP%]   .igo-arrow-right[_ngcontent-%COMP%]{margin-left:4px;border-left:10px solid white}.igo-swipe-control-arrows[_ngcontent-%COMP%]   .igo-arrow-left[_ngcontent-%COMP%]{border-right:10px solid white}.igo-swipe-control-arrows[_ngcontent-%COMP%]:active{display:none}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SwipeControlComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-swipe-control',
                        templateUrl: './swipe-control.component.html',
                        styleUrls: ['./swipe-control.component.scss']
                    }]
            }], function () { return []; }, { map: [{
                    type: i0.Input
                }] });
    })();

    /**
     * Tool to display the center of the map
     */
    var MapCenterComponent = /** @class */ (function () {
        function MapCenterComponent() {
        }
        /**
         * Set a visibility for cursor of the center of the map
         */
        MapCenterComponent.prototype.ngAfterViewInit = function () {
            if (this.map) {
                this.displayCenter$$ = this.map.mapCenter$.subscribe(function (value) {
                    value ?
                        document.getElementById('mapCenter').style.visibility = 'visible' :
                        document.getElementById('mapCenter').style.visibility = 'hidden';
                });
            }
            this.letZoom();
        };
        /**
         * Destroyer of a component
         */
        MapCenterComponent.prototype.ngOnDestroy = function () {
            if (this.displayCenter$$) {
                this.displayCenter$$.unsubscribe();
            }
        };
        /**
         * Zoom on div
         */
        MapCenterComponent.prototype.letZoom = function () {
            var _this = this;
            document.getElementById('mapCenter').addEventListener('wheel', function (event) {
                event.deltaY > 0 ? _this.map.viewController.zoomOut() : _this.map.viewController.zoomIn();
            }, true);
        };
        return MapCenterComponent;
    }());
    MapCenterComponent.ɵfac = function MapCenterComponent_Factory(t) { return new (t || MapCenterComponent)(); };
    MapCenterComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MapCenterComponent, selectors: [["igo-map-center"]], inputs: { map: "map" }, decls: 3, vars: 0, consts: [["id", "mapCenter", 1, "mapCenter"], [1, "vertical"], [1, "horizontal"]], template: function MapCenterComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelement(1, "div", 1);
                i0__namespace.ɵɵelement(2, "div", 2);
                i0__namespace.ɵɵelementEnd();
            }
        }, styles: [".mapCenter[_ngcontent-%COMP%]{width:30px;height:30px;position:absolute;top:50%;left:50%;transform:translate(-15px,-15px);pointer-events:none}.mapCenter[_ngcontent-%COMP%]   .vertical[_ngcontent-%COMP%], .mapCenter[_ngcontent-%COMP%]   .horizontal[_ngcontent-%COMP%]{width:4px;height:30px;position:absolute;left:13px;background-color:#000}.mapCenter[_ngcontent-%COMP%]   .horizontal[_ngcontent-%COMP%]{transform:rotate(90deg)}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MapCenterComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-map-center',
                        templateUrl: './map-center.component.html',
                        styleUrls: ['./map-center.component.scss']
                    }]
            }], function () { return []; }, { map: [{
                    type: i0.Input
                }] });
    })();

    function InfoSectionComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵelementStart(1, "pre");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.infoContent);
        }
    }
    var InfoSectionComponent = /** @class */ (function () {
        function InfoSectionComponent() {
            this.infoContent = '';
        }
        return InfoSectionComponent;
    }());
    InfoSectionComponent.ɵfac = function InfoSectionComponent_Factory(t) { return new (t || InfoSectionComponent)(); };
    InfoSectionComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: InfoSectionComponent, selectors: [["igo-info-section"]], inputs: { infoContent: "infoContent" }, decls: 1, vars: 1, consts: [["class", "infoSection", 4, "ngIf"], [1, "infoSection"]], template: function InfoSectionComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, InfoSectionComponent_div_0_Template, 3, 1, "div", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.infoContent && ctx.infoContent.length);
            }
        }, directives: [i1__namespace$1.NgIf], styles: [".infoSection[_ngcontent-%COMP%]{border-radius:10px;background-color:#6e6e6e66;padding:calc(5px / 2);position:absolute;text-align:center;top:5px;left:50%;text-shadow:0 0 5px white,0 0 10px white,0 0 15px white}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.infoSection[_ngcontent-%COMP%]{top:calc(40px + 5px + 5px);left:10%}}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(InfoSectionComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-info-section',
                        templateUrl: './info-section.component.html',
                        styleUrls: ['./info-section.component.scss']
                    }]
            }], function () { return []; }, { infoContent: [{
                    type: i0.Input
                }] });
    })();

    exports.CatalogItemType = void 0;
    (function (CatalogItemType) {
        CatalogItemType["Layer"] = "layer";
        CatalogItemType["Group"] = "group";
    })(exports.CatalogItemType || (exports.CatalogItemType = {}));
    exports.TypeCatalog = void 0;
    (function (TypeCatalog) {
        TypeCatalog[TypeCatalog["wms"] = 0] = "wms";
        TypeCatalog[TypeCatalog["wmts"] = 1] = "wmts";
        TypeCatalog[TypeCatalog["baselayers"] = 2] = "baselayers";
        TypeCatalog[TypeCatalog["arcgisrest"] = 3] = "arcgisrest";
        TypeCatalog[TypeCatalog["tilearcgisrest"] = 4] = "tilearcgisrest";
        TypeCatalog[TypeCatalog["imagearcgisrest"] = 5] = "imagearcgisrest";
        TypeCatalog[TypeCatalog["composite"] = 6] = "composite";
    })(exports.TypeCatalog || (exports.TypeCatalog = {}));

    var Catalog = /** @class */ (function () {
        function Catalog(options, service) {
            Object.assign(this, options);
            this.catalogService = service;
        }
        return Catalog;
    }());
    var WMSCatalog = /** @class */ (function (_super) {
        __extends(WMSCatalog, _super);
        function WMSCatalog(options, service) {
            var _this = _super.call(this, options, service) || this;
            var sType = exports.TypeCatalog[exports.TypeCatalog.wms];
            _this.type = exports.TypeCatalog[sType];
            return _this;
        }
        WMSCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogWMSLayerItems(this);
        };
        return WMSCatalog;
    }(Catalog));
    var WMTSCatalog = /** @class */ (function (_super) {
        __extends(WMTSCatalog, _super);
        function WMTSCatalog(options, service) {
            var _this = _super.call(this, options, service) || this;
            var sType = exports.TypeCatalog[exports.TypeCatalog.wmts];
            _this.type = exports.TypeCatalog[sType];
            return _this;
        }
        WMTSCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogWMTSLayerItems(this);
        };
        return WMTSCatalog;
    }(Catalog));
    var BaselayersCatalog = /** @class */ (function (_super) {
        __extends(BaselayersCatalog, _super);
        function BaselayersCatalog(options, service) {
            var _this = _super.call(this, options, service) || this;
            var sType = exports.TypeCatalog[exports.TypeCatalog.baselayers];
            _this.type = exports.TypeCatalog[sType];
            return _this;
        }
        BaselayersCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogBaseLayerItems(this);
        };
        return BaselayersCatalog;
    }(Catalog));
    var ArcGISRestCatalog = /** @class */ (function (_super) {
        __extends(ArcGISRestCatalog, _super);
        function ArcGISRestCatalog(options, service) {
            var _this = _super.call(this, options, service) || this;
            var sType = exports.TypeCatalog[exports.TypeCatalog.arcgisrest];
            _this.type = exports.TypeCatalog[sType];
            return _this;
        }
        ArcGISRestCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogArcGISRestItems(this);
        };
        return ArcGISRestCatalog;
    }(Catalog));
    var TileOrImageArcGISRestCatalog = /** @class */ (function (_super) {
        __extends(TileOrImageArcGISRestCatalog, _super);
        function TileOrImageArcGISRestCatalog(options, service, typeCatalog) {
            var _this = _super.call(this, options, service) || this;
            _this.type = exports.TypeCatalog[exports.TypeCatalog[typeCatalog]];
            return _this;
        }
        TileOrImageArcGISRestCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogArcGISRestItems(this);
        };
        return TileOrImageArcGISRestCatalog;
    }(Catalog));
    var CompositeCatalog = /** @class */ (function (_super) {
        __extends(CompositeCatalog, _super);
        function CompositeCatalog(options, service) {
            var _this = _super.call(this, options, service) || this;
            var sType = exports.TypeCatalog[exports.TypeCatalog.composite];
            _this.type = exports.TypeCatalog[sType];
            _this.url = null;
            return _this;
        }
        CompositeCatalog.prototype.collectCatalogItems = function () {
            return this.catalogService.loadCatalogCompositeLayerItems(this);
        };
        return CompositeCatalog;
    }(Catalog));
    var CatalogFactory = /** @class */ (function () {
        function CatalogFactory() {
        }
        CatalogFactory.createInstanceCatalog = function (options, service) {
            var catalog;
            if (options.hasOwnProperty('composite')) {
                catalog = new CompositeCatalog(options, service);
            }
            else if (options.type === exports.TypeCatalog[exports.TypeCatalog.baselayers]) {
                catalog = new BaselayersCatalog(options, service);
            }
            else if (options.type === exports.TypeCatalog[exports.TypeCatalog.arcgisrest]) {
                catalog = new ArcGISRestCatalog(options, service);
            }
            else if (options.type === exports.TypeCatalog[exports.TypeCatalog.tilearcgisrest]) {
                catalog = new TileOrImageArcGISRestCatalog(options, service, exports.TypeCatalog.tilearcgisrest);
            }
            else if (options.type === exports.TypeCatalog[exports.TypeCatalog.imagearcgisrest]) {
                catalog = new TileOrImageArcGISRestCatalog(options, service, exports.TypeCatalog.imagearcgisrest);
            }
            else if (options.type === exports.TypeCatalog[exports.TypeCatalog.wmts]) {
                catalog = new WMTSCatalog(options, service);
            }
            else {
                catalog = new WMSCatalog(options, service);
            }
            return catalog;
        };
        return CatalogFactory;
    }());

    var QueryService = /** @class */ (function () {
        function QueryService(http) {
            this.http = http;
            this.queryEnabled = true;
        }
        QueryService.prototype.query = function (layers, options) {
            var _this = this;
            return layers
                .filter(function (layer) { return layer.visible && layer.isInResolutionsRange; })
                .map(function (layer) { return _this.queryLayer(layer, options); });
        };
        QueryService.prototype.queryLayer = function (layer, options) {
            var _this = this;
            var url = this.getQueryUrl(layer.dataSource, options, false, layer.map.viewController.getExtent());
            if (!url) {
                return rxjs.of([]);
            }
            if (layer.dataSource.options.queryFormat ===
                exports.QueryFormat.HTMLGML2) {
                var urlGml = this.getQueryUrl(layer.dataSource, options, true);
                return this.http.get(urlGml, { responseType: 'text' }).pipe(operators.mergeMap(function (gmlRes) {
                    var mergedGML = _this.mergeGML(gmlRes, url, layer);
                    var imposedGeom = mergedGML[0];
                    var imposedProperties = mergedGML[1];
                    return _this.http
                        .get(url, { responseType: 'text' })
                        .pipe(operators.map(function (res) { return _this.extractData(res, layer, options, url, imposedGeom, imposedProperties); }));
                }));
            }
            var request = this.http.get(url, { responseType: 'text' });
            return request.pipe(operators.map(function (res) { return _this.extractData(res, layer, options, url); }));
        };
        QueryService.prototype.mergeGML = function (gmlRes, url, layer) {
            var _a, _b;
            var parser = new olFormatGML2__default["default"]();
            var features = parser.readFeatures(gmlRes);
            // Handle non standard GML output (MapServer)
            if (features.length === 0) {
                var wmsParser = new olformat__namespace.WMSGetFeatureInfo();
                features = wmsParser.readFeatures(gmlRes);
            }
            var olmline = new olgeom__namespace.MultiLineString([]);
            var pts;
            var ptsArray = [];
            var olmpoly = new olgeom__namespace.MultiPolygon([]);
            var firstFeatureType;
            var nbFeatures = features.length;
            // Check if geometry intersect bbox
            // for geoserver getfeatureinfo response in data projection, not call projection
            var searchParams = this.getQueryParams(url.toLowerCase());
            var bboxRaw = searchParams.bbox;
            var bbox = bboxRaw.split(',');
            var bboxExtent = olextent__namespace.createEmpty();
            olextent__namespace.extend(bboxExtent, bbox);
            var outBboxExtent = false;
            var titleContent;
            var queryTileField;
            if ((_b = (_a = layer.options) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.options) {
                var dataSourceOptions = layer.options.source
                    .options;
                if (dataSourceOptions.queryTitle) {
                    queryTileField = dataSourceOptions.queryTitle;
                }
            }
            features.map(function (feature) {
                if (queryTileField) {
                    var queryTitleContent = feature.getProperties()[queryTileField];
                    if (queryTitleContent) {
                        titleContent = !titleContent ? queryTitleContent : titleContent + "," + queryTitleContent;
                    }
                }
                /*  if (!feature.getGeometry().simplify(100).intersectsExtent(bboxExtent)) {
                  outBboxExtent = true;
                  // TODO: Check to project the geometry?
                }*/
                var featureGeometryCoordinates = feature.getGeometry().getCoordinates();
                var featureGeometryType = feature.getGeometry().getType();
                if (!firstFeatureType && !outBboxExtent) {
                    firstFeatureType = featureGeometryType;
                }
                if (!outBboxExtent) {
                    switch (featureGeometryType) {
                        case 'Point':
                            if (nbFeatures === 1) {
                                pts = new olgeom__namespace.Point(featureGeometryCoordinates, 'XY');
                            }
                            else {
                                ptsArray.push(featureGeometryCoordinates);
                            }
                            break;
                        case 'LineString':
                            olmline.appendLineString(new olgeom__namespace.LineString(featureGeometryCoordinates, 'XY'));
                            break;
                        case 'Polygon':
                            olmpoly.appendPolygon(new olgeom__namespace.Polygon(featureGeometryCoordinates, 'XY'));
                            break;
                        case 'MultiPolygon':
                            olmpoly = new olgeom__namespace.MultiPolygon(featureGeometryCoordinates, 'XY');
                            break;
                        default:
                            return;
                    }
                }
            });
            var olmpts;
            if (ptsArray.length === 0 && pts) {
                olmpts = {
                    type: pts.getType(),
                    coordinates: pts.getCoordinates()
                };
            }
            else {
                olmpts = {
                    type: 'Polygon',
                    coordinates: [this.convexHull(ptsArray)]
                };
            }
            var returnGeometry;
            switch (firstFeatureType) {
                case 'LineString':
                    returnGeometry = {
                        type: olmline.getType(),
                        coordinates: olmline.getCoordinates()
                    };
                case 'Point':
                    return olmpts;
                case 'Polygon':
                    returnGeometry = {
                        type: olmpoly.getType(),
                        coordinates: olmpoly.getCoordinates()
                    };
                case 'MultiPolygon':
                    returnGeometry = {
                        type: olmpoly.getType(),
                        coordinates: olmpoly.getCoordinates()
                    };
            }
            var imposedProperties = {};
            if (queryTileField) {
                imposedProperties[queryTileField] = titleContent;
            }
            return [returnGeometry, imposedProperties];
        };
        QueryService.prototype.cross = function (a, b, o) {
            return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
        };
        /**
         * @param points An array of [X, Y] coordinates
         * This method is use instead of turf.js convexHull because Turf needs at least 3 point to make a hull.
         * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain#JavaScript
         */
        QueryService.prototype.convexHull = function (points) {
            var e_1, _d;
            points.sort(function (a, b) {
                return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];
            });
            var lower = [];
            try {
                for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {
                    var point = points_1_1.value;
                    while (lower.length >= 2 &&
                        this.cross(lower[lower.length - 2], lower[lower.length - 1], point) <= 0) {
                        lower.pop();
                    }
                    lower.push(point);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (points_1_1 && !points_1_1.done && (_d = points_1.return)) _d.call(points_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var upper = [];
            for (var i = points.length - 1; i >= 0; i--) {
                while (upper.length >= 2 &&
                    this.cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0) {
                    upper.pop();
                }
                upper.push(points[i]);
            }
            upper.pop();
            lower.pop();
            return lower.concat(upper);
        };
        QueryService.prototype.extractData = function (res, layer, options, url, imposedGeometry, imposedProperties) {
            var e_2, _d;
            var _this = this;
            var queryDataSource = layer.dataSource;
            var allowedFieldsAndAlias = this.getAllowedFieldsAndAlias(layer);
            var features = [];
            switch (queryDataSource.options.queryFormat) {
                case exports.QueryFormat.GML3:
                    features = this.extractGML3Data(res, layer.zIndex, allowedFieldsAndAlias);
                    break;
                case exports.QueryFormat.JSON:
                case exports.QueryFormat.GEOJSON:
                case exports.QueryFormat.GEOJSON2:
                    features = this.extractGeoJSONData(res, layer.zIndex, allowedFieldsAndAlias);
                    break;
                case exports.QueryFormat.ESRIJSON:
                    features = this.extractEsriJSONData(res, layer.zIndex, allowedFieldsAndAlias);
                    break;
                case exports.QueryFormat.TEXT:
                    features = this.extractTextData(res);
                    break;
                case exports.QueryFormat.HTML:
                    features = this.extractHtmlData(res, queryDataSource.queryHtmlTarget, url);
                    break;
                case exports.QueryFormat.HTMLGML2:
                    features = this.extractHtmlData(res, queryDataSource.queryHtmlTarget, url, imposedGeometry, imposedProperties);
                    break;
                case exports.QueryFormat.GML2:
                default:
                    features = this.extractGML2Data(res, layer, allowedFieldsAndAlias);
                    break;
            }
            if (features.length > 0 && features[0].geometry === null) {
                var geomToAdd = this.createGeometryFromUrlClick(url);
                try {
                    for (var features_1 = __values(features), features_1_1 = features_1.next(); !features_1_1.done; features_1_1 = features_1.next()) {
                        var feature = features_1_1.value;
                        feature.geometry = geomToAdd;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (features_1_1 && !features_1_1.done && (_d = features_1.return)) _d.call(features_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return features.map(function (feature, index) {
                var _a;
                var mapLabel = feature.properties[queryDataSource.mapLabel];
                var exclude;
                if (((_a = layer.options.sourceOptions) === null || _a === void 0 ? void 0 : _a.type) === 'wms') {
                    var sourceOptions = layer.options
                        .sourceOptions;
                    exclude = sourceOptions ? sourceOptions.excludeAttribute : undefined;
                }
                var title = _this.getQueryTitle(feature, layer);
                if (!title && features.length > 1) {
                    title = layer.title + " (" + (index + 1) + ")";
                }
                else if (!title) {
                    title = layer.title;
                }
                var meta = Object.assign({}, feature.meta || {}, {
                    id: utils.uuid(),
                    title: title,
                    mapTitle: mapLabel,
                    sourceTitle: layer.title,
                    order: 1000 - layer.zIndex,
                    excludeAttribute: exclude
                });
                return Object.assign(feature, {
                    meta: meta,
                    projection: queryDataSource.options.type === 'carto'
                        ? 'EPSG:4326'
                        : options.projection
                });
            });
        };
        QueryService.prototype.createGeometryFromUrlClick = function (url) {
            var searchParams = this.getQueryParams(url.toLowerCase());
            var bboxRaw = searchParams.bbox;
            var width = parseInt(searchParams.width, 10);
            var height = parseInt(searchParams.height, 10);
            var xPosition = parseInt(searchParams.i || searchParams.x, 10);
            var yPosition = parseInt(searchParams.j || searchParams.y, 10);
            var bbox = bboxRaw.split(',');
            var threshold = (Math.abs(parseFloat(bbox[0])) - Math.abs(parseFloat(bbox[2]))) * 0.05;
            // for context in degree (EPSG:4326,4269...)
            if (Math.abs(parseFloat(bbox[0])) < 180) {
                threshold = 0.045;
            }
            var clickx = parseFloat(bbox[0]) +
                (Math.abs(parseFloat(bbox[0]) - parseFloat(bbox[2])) * xPosition) /
                    width -
                threshold;
            var clicky = parseFloat(bbox[1]) +
                (Math.abs(parseFloat(bbox[1]) - parseFloat(bbox[3])) * yPosition) /
                    height -
                threshold;
            var clickx1 = clickx + threshold * 2;
            var clicky1 = clicky + threshold * 2;
            var wktPoly = 'POLYGON((' +
                clickx +
                ' ' +
                clicky +
                ', ' +
                clickx +
                ' ' +
                clicky1 +
                ', ' +
                clickx1 +
                ' ' +
                clicky1 +
                ', ' +
                clickx1 +
                ' ' +
                clicky +
                ', ' +
                clickx +
                ' ' +
                clicky +
                '))';
            var format = new olformat__namespace.WKT();
            var tenPercentWidthGeom = format.readFeature(wktPoly);
            var f = tenPercentWidthGeom.getGeometry();
            var newGeom = {
                type: f.getType(),
                coordinates: f.getCoordinates()
            };
            return newGeom;
        };
        QueryService.prototype.extractGML2Data = function (res, zIndex, allowedFieldsAndAlias) {
            var _this = this;
            var parser = new olFormatGML2__default["default"]();
            var features = parser.readFeatures(res);
            // Handle non standard GML output (MapServer)
            if (features.length === 0) {
                var wmsParser = new olformat__namespace.WMSGetFeatureInfo();
                try {
                    features = wmsParser.readFeatures(res);
                }
                catch (e) {
                    console.warn('query.service: Multipolygons are badly managed in mapserver in GML2. Use another format.');
                }
            }
            return features.map(function (feature) { return _this.featureToResult(feature, zIndex, allowedFieldsAndAlias); });
        };
        QueryService.prototype.extractGML3Data = function (res, zIndex, allowedFieldsAndAlias) {
            var _this = this;
            var parser = new olFormatGML3__default["default"]();
            var features = [];
            try {
                features = parser.readFeatures(res);
            }
            catch (e) {
                console.warn('query.service: GML3 is not well supported');
            }
            return features.map(function (feature) { return _this.featureToResult(feature, zIndex, allowedFieldsAndAlias); });
        };
        QueryService.prototype.extractGeoJSONData = function (res, zIndex, allowedFieldsAndAlias) {
            var features = [];
            try {
                features = JSON.parse(res.replace(/(\r|\n)/g, ' ')).features;
            }
            catch (e) {
                console.warn('query.service: Unable to parse geojson', '\n', res);
            }
            features.map(function (feature) { return feature.meta = {
                id: utils.uuid(),
                order: 1000 - zIndex,
                alias: allowedFieldsAndAlias
            }; });
            return features;
        };
        QueryService.prototype.extractEsriJSONData = function (res, zIndex, allowedFieldsAndAlias) {
            var _this = this;
            if (res) {
                try {
                    if (JSON.parse(res).error) {
                        return [];
                    }
                }
                catch (e) { }
            }
            var parser = new olFormatEsriJSON__default["default"]();
            var features = parser.readFeatures(res);
            return features.map(function (feature) { return _this.featureToResult(feature, zIndex, allowedFieldsAndAlias); });
        };
        QueryService.prototype.extractTextData = function (res) {
            // TODO
            return [];
        };
        QueryService.prototype.extractHtmlData = function (res, htmlTarget, url, imposedGeometry, imposedProperties) {
            var searchParams = this.getQueryParams(url.toLowerCase());
            var projection = searchParams.crs || searchParams.srs || 'EPSG:3857';
            var geomToAdd = this.createGeometryFromUrlClick(url);
            if (htmlTarget !== exports.QueryHtmlTarget.BLANK &&
                htmlTarget !== exports.QueryHtmlTarget.IFRAME) {
                htmlTarget = exports.QueryHtmlTarget.IFRAME;
            }
            var bodyTagStart = res.toLowerCase().indexOf('<body>');
            var bodyTagEnd = res.toLowerCase().lastIndexOf('</body>') + 7;
            // replace \r \n  and ' ' with '' to validate if the body is really empty. Clear all the html tags from body
            var striptags = striptags___namespace;
            var body = striptags(res.slice(bodyTagStart, bodyTagEnd).replace(/(\r|\n|\s)/g, ''));
            if (body === '' || res === '') {
                return [];
            }
            return [
                {
                    type: FEATURE,
                    projection: projection,
                    properties: Object.assign({ target: htmlTarget, body: res, url: url }, imposedProperties),
                    geometry: imposedGeometry || geomToAdd
                }
            ];
        };
        QueryService.prototype.getQueryParams = function (url) {
            var queryString = url.split('?');
            if (!queryString[1]) {
                return;
            }
            var pairs = queryString[1].split('&');
            var result = {};
            pairs.forEach(function (pair) {
                pair = pair.split('=');
                result[pair[0]] = decodeURIComponent(pair[1] || '');
            });
            return result;
        };
        QueryService.prototype.featureToResult = function (featureOL, zIndex, allowedFieldsAndAlias) {
            var featureGeometry = featureOL.getGeometry();
            var properties = Object.assign({}, featureOL.getProperties());
            delete properties.geometry;
            delete properties.GEOMETRIE;
            delete properties.boundedBy;
            delete properties.shape;
            delete properties.SHAPE;
            delete properties.the_geom;
            delete properties.geom;
            var geometry;
            if (featureGeometry) {
                geometry = {
                    type: featureGeometry.getType(),
                    coordinates: featureGeometry.getCoordinates()
                };
            }
            return {
                type: FEATURE,
                projection: undefined,
                properties: properties,
                geometry: geometry,
                meta: {
                    id: utils.uuid(),
                    order: 1000 - zIndex,
                    alias: allowedFieldsAndAlias
                }
            };
        };
        QueryService.prototype.getQueryUrl = function (datasource, options, forceGML2, mapExtent) {
            if (forceGML2 === void 0) { forceGML2 = false; }
            var url;
            if (datasource.options.queryUrl) {
                return this.getCustomQueryUrl(datasource, options, mapExtent);
            }
            switch (datasource.constructor) {
                case WMSDataSource:
                    var wmsDatasource = datasource;
                    var WMSGetFeatureInfoOptions = {
                        INFO_FORMAT: wmsDatasource.params.INFO_FORMAT ||
                            this.getMimeInfoFormat(datasource.options.queryFormat),
                        QUERY_LAYERS: wmsDatasource.params.LAYERS,
                        FEATURE_COUNT: wmsDatasource.params.FEATURE_COUNT || '5'
                    };
                    if (forceGML2) {
                        WMSGetFeatureInfoOptions.INFO_FORMAT = this.getMimeInfoFormat(exports.QueryFormat.GML2);
                    }
                    url = wmsDatasource.ol.getFeatureInfoUrl(options.coordinates, options.resolution, options.projection, WMSGetFeatureInfoOptions);
                    // const wmsVersion =
                    //   wmsDatasource.params.VERSION ||
                    //   wmsDatasource.params.version ||
                    //   '1.3.0';
                    // if (wmsVersion !== '1.3.0') {
                    //   url = url.replace('&I=', '&X=');
                    //   url = url.replace('&J=', '&Y=');
                    // }
                    break;
                case CartoDataSource:
                    var cartoDatasource = datasource;
                    var baseUrl = 'https://' +
                        cartoDatasource.options.account +
                        '.carto.com/api/v2/sql?';
                    var format = 'format=GeoJSON';
                    var sql = '&q=' + cartoDatasource.options.config.layers[0].options.sql;
                    var clause = ' WHERE ST_Intersects(the_geom_webmercator,ST_BUFFER(ST_SetSRID(ST_POINT(';
                    var meters = cartoDatasource.options.queryPrecision
                        ? cartoDatasource.options.queryPrecision
                        : '1000';
                    var coordinates = options.coordinates[0] +
                        ',' +
                        options.coordinates[1] +
                        '),3857),' +
                        meters +
                        '))';
                    url = "" + baseUrl + format + sql + clause + coordinates;
                    break;
                case ImageArcGISRestDataSource:
                case TileArcGISRestDataSource:
                    var tileArcGISRestDatasource = datasource;
                    var deltaX = Math.abs(mapExtent[0] - mapExtent[2]);
                    var deltaY = Math.abs(mapExtent[1] - mapExtent[3]);
                    var maxDelta = deltaX > deltaY ? deltaX : deltaY;
                    var clickBuffer = maxDelta * 0.005;
                    var threshold = tileArcGISRestDatasource.options.queryPrecision ? tileArcGISRestDatasource.options.queryPrecision : clickBuffer;
                    var extent = olextent__namespace.buffer(olextent__namespace.boundingExtent([options.coordinates]), threshold);
                    var serviceUrl = tileArcGISRestDatasource.options.url +
                        '/' +
                        tileArcGISRestDatasource.options.layer +
                        '/query/';
                    var geometry = encodeURIComponent('{"xmin":' +
                        extent[0] +
                        ',"ymin":' +
                        extent[1] +
                        ',"xmax":' +
                        extent[2] +
                        ',"ymax":' +
                        extent[3] +
                        ',"spatialReference":{"wkid":102100}}');
                    var params = [
                        'f=json',
                        "geometry=" + geometry,
                        'geometryType=esriGeometryEnvelope',
                        'inSR=102100',
                        'spatialRel=esriSpatialRelIntersects',
                        'outFields=*',
                        'returnGeometry=true',
                        'outSR=102100'
                    ];
                    url = serviceUrl + "?" + params.join('&');
                    break;
                default:
                    break;
            }
            return url;
        };
        QueryService.prototype.getMimeInfoFormat = function (queryFormat) {
            var mime = 'application/vnd.ogc.gml';
            var keyEnum = Object.keys(exports.QueryFormat).find(function (key) { return exports.QueryFormat[key] === queryFormat; });
            if (keyEnum) {
                mime = exports.QueryFormatMimeType[keyEnum];
            }
            return mime;
        };
        QueryService.prototype.getAllowedFieldsAndAlias = function (layer) {
            var _a, _b, _c;
            var allowedFieldsAndAlias;
            if (((_c = (_b = (_a = layer.options) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.sourceFields) &&
                layer.options.source.options.sourceFields.length >= 1) {
                allowedFieldsAndAlias = {};
                layer.options.source.options.sourceFields.forEach(function (sourceField) {
                    var alias = sourceField.alias ? sourceField.alias : sourceField.name;
                    allowedFieldsAndAlias[sourceField.name] = alias;
                });
            }
            return allowedFieldsAndAlias;
        };
        QueryService.prototype.getQueryTitle = function (feature, layer) {
            var _a, _b;
            var title;
            if ((_b = (_a = layer.options) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.options) {
                var dataSourceOptions = layer.options.source
                    .options;
                if (dataSourceOptions.queryTitle) {
                    title = this.getLabelMatch(feature, dataSourceOptions.queryTitle);
                }
            }
            return title;
        };
        QueryService.prototype.getLabelMatch = function (feature, labelMatch) {
            var label = labelMatch;
            var labelToGet = Array.from(labelMatch.matchAll(/\$\{([^\{\}]+)\}/g));
            labelToGet.forEach(function (v) {
                label = label.replace(v[0], feature.properties[v[1]]);
            });
            // Nothing done? check feature's attribute
            if (labelToGet.length === 0 && label === labelMatch) {
                label = feature.properties[labelMatch] || labelMatch;
            }
            return label;
        };
        /**
         * @param datasource QueryableDataSource
         * @param options QueryOptions
         * @mapExtent extent of the map when click event
         *
         */
        QueryService.prototype.getCustomQueryUrl = function (datasource, options, mapExtent) {
            var url = datasource.options.queryUrl.replace(/\{xmin\}/g, mapExtent[0].toString())
                .replace(/\{ymin\}/g, mapExtent[1].toString())
                .replace(/\{xmax\}/g, mapExtent[2].toString())
                .replace(/\{ymax\}/g, mapExtent[3].toString())
                .replace(/\{x\}/g, options.coordinates[0].toString())
                .replace(/\{y\}/g, options.coordinates[1].toString())
                .replace(/\{resolution\}/g, options.resolution.toString())
                .replace(/\{srid\}/g, options.projection.replace('EPSG:', ''));
            return url;
        };
        return QueryService;
    }());
    QueryService.ɵfac = function QueryService_Factory(t) { return new (t || QueryService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient)); };
    QueryService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: QueryService, factory: QueryService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(QueryService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }]; }, null);
    })();

    /**
     * Whether a layer is queryable
     * @param layer Layer
     * @returns True if the layer s squeryable
     */
    function layerIsQueryable(layer) {
        var dataSource = layer.dataSource;
        return dataSource.options.queryable === true;
    }
    /**
     * Whether an OL layer is queryable
     * @param layer Layer
     * @returns True if the ol layer is queryable
     */
    function olLayerIsQueryable(olLayer) {
        var layer = olLayer.get('_layer');
        return layer === undefined ? false : layerIsQueryable(layer);
    }
    /**
     * Whether a layer's feature is queryable
     * @param layer Layer
     * @returns True if the layer's feature is queryable
     */
    function layerFeatureIsQueryable(layer) {
        var dataSource = layer.dataSource;
        return dataSource.options.queryLayerFeatures !== undefined ? (dataSource.options.queryLayerFeatures === true) : true;
    }
    /**
     * Whether an OL Vector layer is queryable
     * @param layer Layer
     * @returns True if the ol vector layer is queryable
     */
    function olLayerFeatureIsQueryable(olLayer) {
        var layer = olLayer.get('_layer');
        return layer === undefined ? false : (layerIsQueryable(layer) && layerFeatureIsQueryable(layer));
    }

    /**
     * This directive makes a map queryable with a click of with a drag box.
     * By default, all layers are queryable but this can ben controlled at
     * the layer level.
     */
    var QueryDirective = /** @class */ (function () {
        function QueryDirective(component, queryService) {
            this.component = component;
            this.queryService = queryService;
            /**
             * Subscriptions to ongoing queries
             */
            this.queries$$ = [];
            /**
             * Whter to query features or not
             */
            this.queryFeatures = false;
            /**
             * Feature query hit tolerance
             */
            this.queryFeaturesHitTolerance = 0;
            /**
             * Whether all query should complete before emitting an event
             */
            this.waitForAllQueries = true;
            /**
             * Event emitted when a query (or all queries) complete
             */
            this.query = new i0.EventEmitter();
        }
        Object.defineProperty(QueryDirective.prototype, "map", {
            /**
             * IGO map
             * @internal
             */
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Start listening to click and drag box events
         * @internal
         */
        QueryDirective.prototype.ngAfterViewInit = function () {
            this.listenToMapClick();
            this.addDragBoxInteraction();
        };
        /**
         * Stop listening to click and drag box events and cancel ongoind requests
         * @internal
         */
        QueryDirective.prototype.ngOnDestroy = function () {
            this.cancelOngoingQueries();
            this.unlistenToMapClick();
            this.removeDragBoxInteraction();
        };
        /**
         * On map click, issue queries
         */
        QueryDirective.prototype.listenToMapClick = function () {
            var _this = this;
            this.mapClickListener = this.map.ol.on('singleclick', function (event) { return _this.onMapEvent(event); });
        };
        /**
         * Stop listening for map clicks
         */
        QueryDirective.prototype.unlistenToMapClick = function () {
            olObservable.unByKey(this.mapClickListener);
            this.mapClickListener = undefined;
        };
        /**
         * Issue queries from a map event and emit events with the results
         * @param event OL map browser pointer event
         */
        QueryDirective.prototype.onMapEvent = function (event) {
            var _this = this;
            this.cancelOngoingQueries();
            if (!this.queryService.queryEnabled) {
                return;
            }
            var queries$ = [];
            if (this.queryFeatures) {
                queries$.push(this.doQueryFeatures(event));
            }
            var resolution = this.map.ol.getView().getResolution();
            var queryLayers = this.map.layers.filter(layerIsQueryable);
            queries$.push.apply(queries$, __spreadArray([], __read(this.queryService.query(queryLayers, {
                coordinates: event.coordinate,
                projection: this.map.projection,
                resolution: resolution
            }))));
            if (queries$.length === 0) {
                return;
            }
            if (this.waitForAllQueries) {
                this.queries$$.push(rxjs.zip.apply(void 0, __spreadArray([], __read(queries$))).subscribe(function (results) {
                    var features = [].concat.apply([], __spreadArray([], __read(results)));
                    _this.query.emit({ features: features, event: event });
                }));
            }
            else {
                this.queries$$ = queries$.map(function (query$) {
                    return query$.subscribe(function (features) {
                        _this.query.emit({ features: features, event: event });
                    });
                });
            }
        };
        /**
         * Query features already present on the map
         * @param event OL map browser pointer event
         */
        QueryDirective.prototype.doQueryFeatures = function (event) {
            var _this = this;
            var clickedFeatures = [];
            if (event.type === 'singleclick') {
                this.map.ol.forEachFeatureAtPixel(event.pixel, function (featureOL, layerOL) {
                    var e_1, _a;
                    var layer = _this.map.getLayerById(layerOL.values_._layer.id);
                    if (layer.dataSource.options.queryFormatAsWms) {
                        return;
                    }
                    if (featureOL) {
                        if (featureOL.get('features')) {
                            try {
                                for (var _b = __values(featureOL.get('features')), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var feature = _c.value;
                                    var newFeature = featureFromOl(feature, _this.map.projection);
                                    newFeature.meta = {
                                        title: feature.values_.nom,
                                        id: layerOL.values_._layer.id + '.' + feature.id_,
                                        icon: feature.values_._icon,
                                        sourceTitle: layerOL.values_.title,
                                        alias: _this.queryService.getAllowedFieldsAndAlias(layer),
                                        // title: this.queryService.getQueryTitle(newFeature, layer) || newFeature.meta.title
                                    };
                                    clickedFeatures.push(newFeature);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        else if (featureOL instanceof RenderFeature__default["default"]) {
                            var newFeature = renderFeatureFromOl(featureOL, _this.map.projection, layerOL);
                            newFeature.meta = {
                                id: layerOL.values_._layer.id + '.' + newFeature.meta.id,
                                sourceTitle: layerOL.values_.title,
                                alias: _this.queryService.getAllowedFieldsAndAlias(layer),
                                title: _this.queryService.getQueryTitle(newFeature, layer) || newFeature.meta.title
                            };
                            clickedFeatures.push(newFeature);
                        }
                        else {
                            var newFeature = featureFromOl(featureOL, _this.map.projection, layerOL);
                            newFeature.meta = {
                                id: layerOL.values_._layer.id + '.' + newFeature.meta.id,
                                sourceTitle: layerOL.values_.title,
                                alias: _this.queryService.getAllowedFieldsAndAlias(layer),
                                title: _this.queryService.getQueryTitle(newFeature, layer) || newFeature.meta.title
                            };
                            clickedFeatures.push(newFeature);
                        }
                    }
                }, {
                    hitTolerance: this.queryFeaturesHitTolerance || 0,
                    layerFilter: this.queryFeaturesCondition
                        ? this.queryFeaturesCondition
                        : olLayerFeatureIsQueryable
                });
            }
            else if (event.type === 'boxend') {
                var target = event.target;
                var dragExtent_1 = target.getGeometry().getExtent();
                this.map.layers
                    .filter(layerIsQueryable)
                    .filter(function (layer) { return layer instanceof VectorLayer && layer.visible; })
                    .map(function (layer) {
                    var featuresOL = layer.dataSource.ol;
                    featuresOL.forEachFeatureIntersectingExtent(dragExtent_1, function (olFeature) {
                        var newFeature = featureFromOl(olFeature, _this.map.projection, layer.ol);
                        newFeature.meta = {
                            id: layer.id + '.' + olFeature.getId(),
                            icon: olFeature.values_._icon,
                            sourceTitle: layer.title,
                            alias: _this.queryService.getAllowedFieldsAndAlias(layer),
                            title: _this.queryService.getQueryTitle(newFeature, layer) || newFeature.meta.title
                        };
                        clickedFeatures.push(newFeature);
                    });
                });
            }
            return rxjs.of(clickedFeatures);
        };
        /**
         * Cancel ongoing requests, if any
         */
        QueryDirective.prototype.cancelOngoingQueries = function () {
            this.queries$$.forEach(function (sub) { return sub.unsubscribe(); });
            this.queries$$ = [];
        };
        /**
         * Add a drag box interaction and, on drag box end, select features
         */
        QueryDirective.prototype.addDragBoxInteraction = function () {
            var e_2, _a;
            var _this = this;
            var olDragSelectInteractionOnQuery;
            var olInteractions = this.map.ol.getInteractions().getArray();
            try {
                // There can only be one dragbox interaction, so find the current one, if any
                // Don't keep a reference to the current dragbox because we don't want
                // to remove it when this startegy is deactivated
                for (var olInteractions_1 = __values(olInteractions), olInteractions_1_1 = olInteractions_1.next(); !olInteractions_1_1.done; olInteractions_1_1 = olInteractions_1.next()) {
                    var olInteraction = olInteractions_1_1.value;
                    if (olInteraction instanceof OlDragSelectInteraction) {
                        olDragSelectInteractionOnQuery = olInteraction;
                        break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (olInteractions_1_1 && !olInteractions_1_1.done && (_a = olInteractions_1.return)) _a.call(olInteractions_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            // If no drag box interaction is found, create a new one and add it to the map
            if (olDragSelectInteractionOnQuery === undefined) {
                olDragSelectInteractionOnQuery = new OlDragSelectInteraction({
                    condition: ctrlKeyDown
                });
                this.map.ol.addInteraction(olDragSelectInteractionOnQuery);
                this.olDragSelectInteraction = olDragSelectInteractionOnQuery;
            }
            this.olDragSelectInteractionEndKey = olDragSelectInteractionOnQuery.on('boxend', function (event) { return _this.onMapEvent(event); });
        };
        /**
         * Remove drag box interaction
         */
        QueryDirective.prototype.removeDragBoxInteraction = function () {
            if (this.olDragSelectInteractionEndKey !== undefined) {
                olObservable.unByKey(this.olDragSelectInteractionEndKey);
            }
            if (this.olDragSelectInteraction !== undefined) {
                this.map.ol.removeInteraction(this.olDragSelectInteraction);
            }
            this.olDragSelectInteraction = undefined;
        };
        return QueryDirective;
    }());
    QueryDirective.ɵfac = function QueryDirective_Factory(t) { return new (t || QueryDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent, 2), i0__namespace.ɵɵdirectiveInject(QueryService)); };
    QueryDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: QueryDirective, selectors: [["", "igoQuery", ""]], inputs: { queryFeatures: "queryFeatures", queryFeaturesHitTolerance: "queryFeaturesHitTolerance", queryFeaturesCondition: "queryFeaturesCondition", waitForAllQueries: "waitForAllQueries" }, outputs: { query: "query" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(QueryDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoQuery]'
                    }]
            }], function () {
            return [{ type: MapBrowserComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: QueryService }];
        }, { queryFeatures: [{
                    type: i0.Input
                }], queryFeaturesHitTolerance: [{
                    type: i0.Input
                }], queryFeaturesCondition: [{
                    type: i0.Input
                }], waitForAllQueries: [{
                    type: i0.Input
                }], query: [{
                    type: i0.Output
                }] });
    })();

    /**
     * Base search source class
     */
    var SearchSource = /** @class */ (function () {
        function SearchSource(options, storageService) {
            var _this = this;
            this.storageService = storageService;
            this.options = options;
            if (this.storageService) {
                var storageOptions = this.storageService.get(this.getId() + '.options');
                if (storageOptions) {
                    this.options = utils.ObjectUtils.mergeDeep(this.options, storageOptions);
                }
            }
            this.options = utils.ObjectUtils.mergeDeep(this.getDefaultOptions(), this.options);
            // Set Default Params from Settings
            this.settings.forEach(function (setting) {
                _this.setParamFromSetting(setting, false);
            });
        }
        /**
         * Get search source's id
         * @returns Search source's id
         */
        SearchSource.prototype.getId = function () {
            throw new Error('You have to implement the method "getId".');
        };
        /**
         * Get search source's type
         * @returns Search source's type
         */
        SearchSource.prototype.getType = function () {
            throw new Error('You have to implement the method "getType".');
        };
        /**
         * Get search source's default options
         * @returns Search source default options
         */
        SearchSource.prototype.getDefaultOptions = function () {
            throw new Error('You have to implement the method "getDefaultOptions".');
        };
        Object.defineProperty(SearchSource.prototype, "title", {
            /**
             * Search source's title
             */
            get: function () {
                return this.options.title;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "available", {
            /**
             * Whether the search source is available
             */
            get: function () {
                return this.options.available !== false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "enabled", {
            get: function () {
                return this.available && this.options.enabled !== false;
            },
            /**
             * Whether the search source is enabled
             */
            set: function (value) {
                this.options.enabled = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "showInPointerSummary", {
            get: function () {
                var showInPointerSummary = this.options.showInPointerSummary;
                return showInPointerSummary ? showInPointerSummary : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "showInSettings", {
            get: function () {
                var showInSettings = this.options.showInSettings;
                return showInSettings === undefined ? true : showInSettings;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "searchUrl", {
            /**
             * Search url
             */
            get: function () {
                return this.options.searchUrl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "params", {
            /**
             * Search query params
             */
            get: function () {
                return this.options.params === undefined ? {} : this.options.params;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchSource.prototype, "settings", {
            /**
             * Search settings
             */
            get: function () {
                return this.options.settings === undefined ? [] : this.options.settings;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Set params from selected settings
         */
        SearchSource.prototype.setParamFromSetting = function (setting, saveInStorage) {
            var _a;
            var _this = this;
            if (saveInStorage === void 0) { saveInStorage = true; }
            switch (setting.type) {
                case 'radiobutton':
                    setting.values.forEach(function (conf) {
                        var _a;
                        if (conf.enabled) {
                            _this.options.params = Object.assign(_this.options.params || {}, (_a = {},
                                _a[setting.name] = conf.value,
                                _a));
                        }
                    });
                    break;
                case 'checkbox':
                    var confValue_1 = '';
                    setting.values
                        .filter(function (s) { return s.available !== false; })
                        .forEach(function (conf) {
                        if (conf.enabled) {
                            confValue_1 += conf.value + ',';
                        }
                    });
                    confValue_1 = confValue_1.slice(0, -1);
                    this.options.params = Object.assign(this.options.params || {}, (_a = {},
                        _a[setting.name] = confValue_1,
                        _a));
                    break;
            }
            if (saveInStorage && this.storageService) {
                this.storageService.set(this.getId() + '.options', { params: this.options.params });
            }
        };
        Object.defineProperty(SearchSource.prototype, "displayOrder", {
            /**
             * Search results display order
             */
            get: function () {
                return this.options.order === undefined ? 99 : this.options.order;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Get hashtags valid
         * @param hashtag hashtag from query
         */
        SearchSource.prototype.getHashtagsValid = function (term, settingsName) {
            var hashtags = term.match(/(#[A-Za-z]+)/g);
            if (!hashtags) {
                return undefined;
            }
            var searchSourceSetting = this.getSettingsValues(settingsName);
            var hashtagsValid = [];
            hashtags.forEach(function (hashtag) {
                searchSourceSetting.values.forEach(function (conf) {
                    var hashtagKey = hashtag.substring(1);
                    if (typeof conf.value === 'string') {
                        var types = conf.value
                            .toLowerCase()
                            .normalize('NFD')
                            .replace(/[\u0300-\u036f]/g, '')
                            .split(',');
                        var index = types.indexOf(hashtagKey
                            .toLowerCase()
                            .normalize('NFD')
                            .replace(/[\u0300-\u036f]/g, ''));
                        if (index !== -1) {
                            hashtagsValid.push(types[index]);
                        }
                    }
                    if (conf.hashtags && conf.hashtags.indexOf(hashtagKey.toLowerCase()) !== -1) {
                        hashtagsValid.push(conf.value);
                    }
                });
            });
            return hashtagsValid.filter(function (a, b) { return hashtagsValid.indexOf(a) === b; });
        };
        SearchSource.prototype.getSettingsValues = function (search) {
            return this.getDefaultOptions().settings.find(function (value) {
                return value.name === search;
            });
        };
        return SearchSource;
    }());
    /**
     * Search source ID
     * @internal
     */
    SearchSource.id = '';
    /**
     * Search source type
     * @internal
     */
    SearchSource.type = '';

    /**
     * Map search source. For now it has no search capability. All it does
     * is act as a placeholder for the map query results' "search source".
     */
    var QuerySearchSource = /** @class */ (function (_super) {
        __extends(QuerySearchSource, _super);
        function QuerySearchSource(options) {
            return _super.call(this, options) || this;
        }
        QuerySearchSource.prototype.getId = function () {
            return QuerySearchSource.id;
        };
        QuerySearchSource.prototype.getType = function () {
            return QuerySearchSource.type;
        };
        QuerySearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'Carte'
            };
        };
        return QuerySearchSource;
    }(SearchSource));
    QuerySearchSource.id = 'map';
    QuerySearchSource.type = FEATURE;
    QuerySearchSource.ɵfac = function QuerySearchSource_Factory(t) { return new (t || QuerySearchSource)(i0__namespace.ɵɵinject('options')); };
    QuerySearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: QuerySearchSource, factory: QuerySearchSource.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(QuerySearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }];
        }, null);
    })();

    var GoogleLinks = /** @class */ (function () {
        function GoogleLinks() {
        }
        GoogleLinks.getGoogleMapsCoordLink = function (lon, lat) {
            return 'https://www.google.com/maps?q=' + lat + ',' + lon;
        };
        GoogleLinks.getGoogleStreetViewLink = function (lon, lat) {
            return 'https://www.google.com/maps?q=&layer=c&cbll=' + lat + ',' + lon;
        };
        GoogleLinks.getGoogleMapsNameLink = function (name) {
            var encodedName = encodeURI(name);
            return 'https://www.google.com/maps?q=' + encodedName;
        };
        return GoogleLinks;
    }());

    /**
     * Generate a style for selected features
     * @param feature The feature to generate the style
     * @returns A olStyle
     */
    function getCommonVectorSelectedStyle(_a) {
        var feature = _a.feature, _b = _a.markerColor, markerColor = _b === void 0 ? [0, 161, 222] : _b, _c = _a.markerOpacity, markerOpacity = _c === void 0 ? 1 : _c, _d = _a.markerOutlineColor, markerOutlineColor = _d === void 0 ? [0, 255, 255] : _d, fillColor = _a.fillColor, _e = _a.fillOpacity, fillOpacity = _e === void 0 ? 0.15 : _e, _f = _a.strokeColor, strokeColor = _f === void 0 ? [0, 255, 255] : _f, _g = _a.strokeOpacity, strokeOpacity = _g === void 0 ? 0.5 : _g, _h = _a.strokeWidth, strokeWidth = _h === void 0 ? 4 : _h;
        return getCommonVectorStyle({
            feature: feature,
            markerColor: markerColor,
            markerOpacity: markerOpacity,
            markerOutlineColor: markerOutlineColor,
            fillColor: fillColor,
            fillOpacity: fillOpacity,
            strokeColor: strokeColor,
            strokeOpacity: strokeOpacity,
            strokeWidth: strokeWidth
        });
    }
    /**
     * Generate a basic style for features
     * @param feature The feature to generate the style
     * @returns A olStyle
     */
    function getCommonVectorStyle(_a) {
        var feature = _a.feature, _b = _a.markerColor, markerColor = _b === void 0 ? [0, 161, 222] : _b, _c = _a.markerOpacity, markerOpacity = _c === void 0 ? 0.5 : _c, markerOutlineColor = _a.markerOutlineColor, _d = _a.fillColor, fillColor = _d === void 0 ? [0, 161, 222] : _d, _e = _a.fillOpacity, fillOpacity = _e === void 0 ? 0.15 : _e, _f = _a.strokeColor, strokeColor = _f === void 0 ? [0, 161, 222] : _f, _g = _a.strokeOpacity, strokeOpacity = _g === void 0 ? 0.5 : _g, _h = _a.strokeWidth, strokeWidth = _h === void 0 ? 2 : _h;
        var isOlFeature = feature instanceof OlFeature__default["default"];
        var geometry;
        var text;
        if (isOlFeature) {
            feature = feature;
            geometry = feature.getGeometry();
        }
        else {
            feature = feature;
            geometry = feature.geometry;
            text = feature.meta.mapTitle;
        }
        var geometryType = isOlFeature ? geometry.getType() : geometry.type;
        if (!geometry || geometryType === 'Point') {
            var markerColorAsArray = color.asArray(markerColor).slice(0);
            var markerColorRGB = markerColorAsArray.slice(0, 3);
            if (markerColorAsArray.length === 4 &&
                (typeof markerColor !== 'string' || /^#[0-9A-F]{8}$/i.test(markerColor))) {
                markerOpacity = markerColorAsArray[3];
            }
            return createOverlayMarkerStyle({
                text: text,
                opacity: markerOpacity,
                markerOutlineColor: markerOutlineColor,
                markerColor: markerColorRGB
            });
        }
        else {
            var fillWithOpacity = color.asArray(fillColor).slice(0);
            var strokeWithOpacity = color.asArray(strokeColor).slice(0);
            if (!(fillWithOpacity.length === 4 &&
                (typeof fillColor !== 'string' || /^#[0-9A-F]{8}$/i.test(fillColor)))) {
                fillWithOpacity[3] = fillOpacity;
            }
            if (!(strokeWithOpacity.length === 4 &&
                (typeof strokeColor !== 'string' || /^#[0-9A-F]{8}$/i.test(strokeColor)))) {
                strokeWithOpacity[3] = strokeOpacity;
            }
            return createOverlayDefaultStyle({
                text: text,
                strokeWidth: strokeWidth,
                strokeColor: strokeWithOpacity,
                fillColor: fillWithOpacity
            });
        }
    }

    var OsmLinks = /** @class */ (function () {
        function OsmLinks() {
        }
        OsmLinks.getOpenStreetMapLink = function (lon, lat, zoom) {
            if (zoom === void 0) { zoom = 17; }
            // return 'https://www.google.com/maps?q=' + lat + ',' + lon;
            return "https://www.openstreetmap.org/?mlat=" + lat + "&mlon=" + lon + "#map=" + zoom + "/" + lat + "/" + lon;
        };
        OsmLinks.getOpenStreetCamLink = function (lon, lat, zoom) {
            if (zoom === void 0) { zoom = 17; }
            return "https://openstreetcam.org/map/@" + lat + "," + lon + "," + zoom + "z";
        };
        return OsmLinks;
    }());

    var CatalogService = /** @class */ (function () {
        function CatalogService(http, config, languageService, messageService, capabilitiesService) {
            this.http = http;
            this.config = config;
            this.languageService = languageService;
            this.messageService = messageService;
            this.capabilitiesService = capabilitiesService;
        }
        CatalogService.prototype.loadCatalogs = function () {
            var contextConfig = this.config.getConfig('context') || {};
            var catalogConfig = this.config.getConfig('catalog') || {};
            var apiUrl = catalogConfig.url || contextConfig.url;
            var catalogsFromConfig = catalogConfig.sources || [];
            var observables$ = [];
            if (apiUrl) {
                // Base layers catalog
                if (catalogConfig.baseLayers) {
                    var translate = this.languageService.translate;
                    var title = translate.instant('igo.geo.catalog.baseLayers');
                    var baseLayersCatalog = [
                        {
                            id: 'catalog.baselayers',
                            title: title,
                            url: apiUrl + "/baselayers",
                            type: 'baselayers'
                        }
                    ];
                    observables$.push(rxjs.of(baseLayersCatalog));
                }
                // Catalogs from API
                var catalogsFromApi$ = this.http
                    .get(apiUrl + "/catalogs")
                    .pipe(operators.map(function (catalogs) { return catalogs.map(function (c) { return Object.assign(c, c.options); }); }), operators.catchError(function (_response) { return rxjs.EMPTY; }));
                observables$.push(catalogsFromApi$);
            }
            // Catalogs from config
            if (catalogsFromConfig.length > 0) {
                observables$.push(rxjs.of(catalogsFromConfig).pipe(operators.map(function (catalogs) { return catalogs.map(function (c) {
                    if (!c.id) {
                        c.id = utils.uuid();
                    }
                    return c;
                }); })));
            }
            return rxjs.zip.apply(void 0, __spreadArray([], __read(observables$))).pipe(operators.map(function (catalogs) { return [].concat.apply([], catalogs); }));
        };
        CatalogService.prototype.loadCatalogItems = function (catalog) {
            var newCatalog;
            newCatalog = CatalogFactory.createInstanceCatalog(catalog, this);
            return newCatalog.collectCatalogItems();
        };
        CatalogService.prototype.loadCatalogBaseLayerItems = function (catalog) {
            return this.getCatalogBaseLayersOptions(catalog).pipe(operators.map(function (layersOptions) {
                var items = layersOptions.map(function (layerOptions) {
                    return {
                        id: generateIdFromSourceOptions(layerOptions.sourceOptions),
                        title: layerOptions.title,
                        type: exports.CatalogItemType.Layer,
                        externalProvider: catalog.externalProvider,
                        options: layerOptions
                    };
                });
                return [
                    {
                        id: 'catalog.group.baselayers',
                        type: exports.CatalogItemType.Group,
                        externalProvider: catalog.externalProvider,
                        title: catalog.title,
                        items: items
                    }
                ];
            }));
        };
        CatalogService.prototype.getCatalogBaseLayersOptions = function (catalog) {
            return this.http.get(catalog.url);
        };
        CatalogService.prototype.loadCatalogWMSLayerItems = function (catalog) {
            var _this = this;
            return this.getCatalogCapabilities(catalog).pipe(operators.map(function (capabilities) {
                var items = [];
                if (!capabilities) {
                    return items;
                }
                if (capabilities.Service && capabilities.Service.Abstract && capabilities.Service.Abstract.length) {
                    catalog.abstract = capabilities.Service.Abstract;
                }
                var finalLayers = [];
                _this.flattenWmsCapabilities(capabilities.Capability.Layer, 0, finalLayers, catalog.groupSeparator);
                var capabilitiesCapabilityLayer = Object.assign({}, capabilities.Capability.Layer);
                capabilitiesCapabilityLayer.Layer = finalLayers.filter(function (f) { return f.Layer.length !== 0; });
                _this.includeRecursiveItems(catalog, capabilitiesCapabilityLayer, items);
                return items;
            }));
        };
        CatalogService.prototype.flattenWmsCapabilities = function (parent, level, finalLayers, separator) {
            var e_1, _a;
            if (level === void 0) { level = 0; }
            if (separator === void 0) { separator = ' / '; }
            if (!finalLayers.includes(parent.Title)) {
                var modifiedParent = Object.assign({}, parent);
                modifiedParent.Layer = [];
                finalLayers.push(modifiedParent);
            }
            try {
                for (var _b = __values(parent.Layer), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var layer = _c.value;
                    var modifiedLayer = Object.assign({}, layer);
                    if (level > 0) {
                        modifiedLayer.Title = parent.Title + separator + layer.Title;
                    }
                    if (layer.Layer) {
                        this.flattenWmsCapabilities(modifiedLayer, level + 1, finalLayers, separator);
                    }
                    else {
                        finalLayers.find(function (ff) { return ff.Title === parent.Title; }).Layer.push(layer);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        CatalogService.prototype.loadCatalogWMTSLayerItems = function (catalog) {
            var _this = this;
            return this.getCatalogCapabilities(catalog).pipe(operators.map(function (capabilities) { return _this.getWMTSItems(catalog, capabilities); }));
        };
        CatalogService.prototype.loadCatalogArcGISRestItems = function (catalog) {
            var _this = this;
            return this.getCatalogCapabilities(catalog).pipe(operators.map(function (capabilities) {
                return _this.getArcGISRESTItems(catalog, capabilities);
            }));
        };
        CatalogService.prototype.loadCatalogCompositeLayerItems = function (catalog) {
            var _this = this;
            var compositeCatalog = catalog.composite;
            var catalogsFromInstance = [];
            compositeCatalog.map(function (component) {
                component.sortDirection = catalog.sortDirection; // propagate sortDirection with parent value
                catalogsFromInstance.push(CatalogFactory.createInstanceCatalog(component, _this));
            });
            // get CatalogItems for each original Catalog-----------------------------------------------------
            var request1$ = [];
            catalogsFromInstance.map(function (component) { return request1$.push(component.collectCatalogItems()); });
            // integrate imposed group -----------------------------------------------------
            var request2$ = [];
            function flatDeepLayer(arr) {
                return arr.reduce(function (acc, val) { return acc.concat(val.type === exports.CatalogItemType.Group ? flatDeepLayer(val.items) : val); }, []);
            }
            if (Object.keys(compositeCatalog).find(function (k) { return compositeCatalog[k].groupImpose; })) {
                var pushImposeGroup_1 = function (item, index) {
                    var c = catalogsFromInstance[index];
                    var outGroupImpose = Object.assign({}, c.groupImpose);
                    outGroupImpose.address = c.id;
                    outGroupImpose.type = exports.CatalogItemType.Group;
                    outGroupImpose.externalProvider = c.externalProvider;
                    if (outGroupImpose.sortDirection === undefined) {
                        outGroupImpose.sortDirection = c.sortDirection;
                    }
                    outGroupImpose.items = [];
                    var flatLayer = flatDeepLayer(item);
                    flatLayer.map(function (v) { return (v.address = outGroupImpose.address + "." + outGroupImpose.id); });
                    outGroupImpose.items = flatLayer;
                    return outGroupImpose;
                };
                request2$ = request1$.map(function (obs, idx) { return obs.pipe(operators.map(function (items) { return compositeCatalog[idx].groupImpose
                    ? pushImposeGroup_1(items, idx)
                    : items; })); });
            }
            else {
                request2$ = request1$;
            }
            // concat Group -----------------------------------------------------
            var request3$ = rxjs.zip.apply(void 0, __spreadArray([], __read(request2$))).pipe(operators.map(function (output) { return [].concat.apply([], __spreadArray([], __read(output))); } // [].concat.apply([], result1
            ));
            // merge Group (first level only) -----------------------------------------------------
            var groupByGroupId = function (data, keyFn) { return data.reduce(function (acc, group) {
                var _a;
                var groupId = keyFn(group);
                var ind = acc.find(function (x) { return x.id === groupId; });
                if (!ind) {
                    acc[acc.length] = group;
                }
                else {
                    var ix = acc.indexOf(ind);
                    if (acc[ix].address.split('|').indexOf(group.address) === -1) {
                        acc[ix].address = acc[ix].address + "|" + group.address;
                    }
                    (_a = acc[ix].items).push.apply(_a, __spreadArray([], __read(group.items)));
                }
                return acc;
            }, []); };
            // merge Layer for each Level (catalog, group(recursive))
            var recursiveGroupByLayerAddress = function (items, keyFn) { return items.reduce(function (acc, item, idx, arr) {
                var layerTitle = keyFn(item);
                var outItem = Object.assign({}, item);
                if (item.type === exports.CatalogItemType.Layer) {
                    // same title, same address => result: only one item is keep
                    // same title, address diff
                    var indicesMatchTitle_1 = [];
                    var diffAddress = arr.filter(function (x, i) {
                        var bInd = false;
                        if (x.title === layerTitle && x.type === exports.CatalogItemType.Layer) {
                            if (i !== idx && x.address !== item.address) {
                                bInd = true;
                            }
                            indicesMatchTitle_1.push(i);
                        }
                        return bInd;
                    }); // $& i !== idx
                    if (diffAddress.length > 0) {
                        var nPosition = indicesMatchTitle_1.findIndex(function (x) { return x === idx; }) + 1;
                        outItem.title = item.title + " (" + nPosition + ")"; // source: ${item.address.split('.')[0]}
                    }
                    var exist = acc.find(function (x) { return x.title === outItem.title && x.type === exports.CatalogItemType.Layer; });
                    if (!exist) {
                        acc[acc.length] = outItem;
                    }
                }
                else if (item.type === exports.CatalogItemType.Group) {
                    outItem.items = recursiveGroupByLayerAddress(item.items, function (layer) { return layer.title; });
                    acc[acc.length] = outItem;
                }
                return acc;
            }, []); };
            var request4$ = request3$.pipe(operators.map(function (output) { return groupByGroupId(output, function (group) { return group.id; }); }), operators.map(function (output) { return [].concat.apply([], __spreadArray([], __read(output))); }), operators.map(function (data) { return recursiveGroupByLayerAddress(data, function (layer) { return layer.title; }); }));
            return request4$;
        };
        CatalogService.prototype.getCatalogCapabilities = function (catalog) {
            var _this = this;
            var sType = exports.TypeCatalog[catalog.type];
            return this.capabilitiesService
                .getCapabilities(sType, catalog.url, catalog.version)
                .pipe(operators.catchError(function (e) {
                var title = _this.languageService.translate.instant('igo.geo.catalog.unavailableTitle');
                var message = catalog.title ? _this.languageService.translate.instant('igo.geo.catalog.unavailable', { value: catalog.title }) : _this.languageService.translate.instant('igo.geo.catalog.someUnavailable');
                _this.messageService.error(message, title);
                console.error(e);
                return rxjs.of(undefined);
            }));
        };
        CatalogService.prototype.prepareCatalogItemLayer = function (layer, idParent, layersQueryFormat, catalog) {
            var e_2, _a;
            var configuredQueryFormat = this.retrieveLayerInfoFormat(layer.Name, layersQueryFormat);
            var metadata = layer.DataURL ? layer.DataURL[0] : undefined;
            var legendOptions = catalog.showLegend && layer.Style
                ? this.capabilitiesService.getStyle(layer.Style)
                : undefined;
            var params = Object.assign({}, catalog.queryParams, {
                LAYERS: layer.Name,
                VERSION: catalog.version
            });
            var baseSourceOptions = {
                type: 'wms',
                url: catalog.url,
                crossOrigin: catalog.setCrossOriginAnonymous ? 'anonymous' : undefined,
                queryFormat: configuredQueryFormat,
                queryHtmlTarget: configuredQueryFormat === exports.QueryFormat.HTML ||
                    configuredQueryFormat === exports.QueryFormat.HTMLGML2
                    ? 'iframe'
                    : undefined,
                optionsFromCapabilities: true
            };
            var sourceOptions = Object.assign({}, baseSourceOptions, catalog.sourceOptions, { params: params });
            var layerTitle;
            if (catalog.forcedProperties) {
                try {
                    for (var _b = __values(catalog.forcedProperties), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var property = _c.value;
                        if (layer.Name === property.layerName && property.title) {
                            layerTitle = property.title;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            var abstract;
            if (layer.Abstract) {
                abstract = layer.Abstract;
            }
            else if (!layer.Abstract && catalog.abstract) {
                abstract = catalog.abstract;
            }
            var layerPrepare = {
                id: generateIdFromSourceOptions(sourceOptions),
                type: exports.CatalogItemType.Layer,
                title: layerTitle !== undefined ? layerTitle : layer.Title,
                address: idParent,
                externalProvider: catalog.externalProvider || false,
                options: {
                    maxResolution: getResolutionFromScale(layer.MaxScaleDenominator),
                    minResolution: getResolutionFromScale(layer.MinScaleDenominator),
                    metadata: {
                        url: metadata ? metadata.OnlineResource : undefined,
                        extern: metadata ? true : undefined,
                        abstract: abstract,
                        type: baseSourceOptions.type
                    },
                    legendOptions: legendOptions,
                    tooltip: { type: catalog.tooltipType },
                    sourceOptions: sourceOptions
                }
            };
            return utils.ObjectUtils.removeUndefined(layerPrepare);
        };
        CatalogService.prototype.prepareCatalogItemGroup = function (itemListIn, regexes, idGroup, layersQueryFormat, catalog) {
            var _this = this;
            var groupPrepare = {
                id: idGroup,
                type: exports.CatalogItemType.Group,
                title: itemListIn.Title,
                address: catalog.id,
                externalProvider: catalog.externalProvider || false,
                sortDirection: catalog.sortDirection,
                items: itemListIn.Layer.reduce(function (items, layer) {
                    if (layer.Layer !== undefined) {
                        // recursive, check next level
                        var idGroupItemNextLevel = idGroup + (".group." + (layer.Name || layer.Layer[0].Name));
                        var groupItem = _this.prepareCatalogItemGroup(layer, regexes, idGroupItemNextLevel, layersQueryFormat, catalog);
                        items.push(groupItem);
                    }
                    else {
                        if (_this.testLayerRegexes(layer.Name, regexes) === false) {
                            return items;
                        }
                        var layerItem = _this.prepareCatalogItemLayer(layer, idGroup, layersQueryFormat, catalog);
                        items.push(layerItem);
                    }
                    return items;
                }, [])
            };
            return groupPrepare;
        };
        CatalogService.prototype.includeRecursiveItems = function (catalog, itemListIn, itemsPrepare, loopLevel) {
            var e_3, _a;
            if (loopLevel === void 0) { loopLevel = 0; }
            // Dig all levels until last level (layer object are not defined on last level)
            var regexes = (catalog.regFilters || []).map(function (pattern) { return new RegExp(pattern); });
            if (!itemListIn.Layer) {
                return;
            }
            try {
                for (var _b = __values(itemListIn.Layer), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    if (item.Layer !== undefined) {
                        // recursive, check next level
                        this.includeRecursiveItems(catalog, item, itemsPrepare, loopLevel + 1);
                        continue;
                    }
                    var layersQueryFormat = this.findCatalogInfoFormat(catalog);
                    // group(with layers) and layer(without group) level 1
                    if (loopLevel !== 0) {
                        // TODO: Slice that into multiple methods
                        // Define object of group layer
                        var idGroupItem = "catalog.group." + (itemListIn.Name || item.Name);
                        var groupItem = this.prepareCatalogItemGroup(itemListIn, regexes, idGroupItem, layersQueryFormat, catalog);
                        if (groupItem.items.length !== 0) {
                            itemsPrepare.push(groupItem);
                        }
                        // Break the group (don't add a group of layer for each of their layer!)
                        break;
                    }
                    else {
                        // layer without group
                        if (this.testLayerRegexes(item.Name, regexes) !== false) {
                            var layerItem = this.prepareCatalogItemLayer(item, catalog.id, layersQueryFormat, catalog);
                            itemsPrepare.push(layerItem);
                        }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        CatalogService.prototype.getWMTSItems = function (catalog, capabilities) {
            var _this = this;
            if (!capabilities) {
                return [];
            }
            var layers = capabilities.Contents.Layer;
            var regexes = (catalog.regFilters || []).map(function (pattern) { return new RegExp(pattern); });
            if (capabilities.ServiceIdentification &&
                capabilities.ServiceIdentification.Abstract &&
                capabilities.ServiceIdentification.Abstract.length) {
                catalog.abstract = capabilities.ServiceIdentification.Abstract;
            }
            return layers
                .map(function (layer) {
                var e_4, _a;
                var forcedTitle;
                if (catalog.forcedProperties) {
                    try {
                        for (var _b = __values(catalog.forcedProperties), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var property = _c.value;
                            if (layer.Title === property.layerName && property.title) {
                                forcedTitle = property.title;
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                if (_this.testLayerRegexes(layer.Identifier, regexes) === false) {
                    return undefined;
                }
                var params = Object.assign({}, catalog.queryParams, {
                    version: '1.0.0'
                });
                var baseSourceOptions = {
                    type: 'wmts',
                    url: catalog.url,
                    crossOrigin: catalog.setCrossOriginAnonymous
                        ? 'anonymous'
                        : undefined,
                    layer: layer.Identifier,
                    matrixSet: catalog.matrixSet,
                    optionsFromCapabilities: true,
                    requestEncoding: catalog.requestEncoding || 'KVP',
                    style: 'default'
                };
                var sourceOptions = Object.assign({}, baseSourceOptions, catalog.sourceOptions, { params: params });
                return utils.ObjectUtils.removeUndefined({
                    id: generateIdFromSourceOptions(sourceOptions),
                    type: exports.CatalogItemType.Layer,
                    title: forcedTitle !== undefined ? forcedTitle : layer.Title,
                    address: catalog.id,
                    externalProvider: catalog.externalProvider,
                    options: {
                        sourceOptions: sourceOptions,
                        metadata: {
                            url: undefined,
                            extern: undefined,
                            abstract: catalog.abstract,
                            type: baseSourceOptions.type
                        }
                    }
                });
            })
                .filter(function (item) { return item !== undefined; });
        };
        CatalogService.prototype.getArcGISRESTItems = function (catalog, capabilities) {
            var _this = this;
            if (!capabilities) {
                return [];
            }
            var layers = !capabilities.layers ? [] : capabilities.layers.filter(function (layer) { return !layer.type || layer.type === 'Feature Layer'; });
            if (!capabilities.layers) {
                this.messageService.error(this.languageService.translate.instant('igo.geo.catalog.someUnavailable'), this.languageService.translate.instant('igo.geo.catalog.unavailableTitle'));
            }
            var regexes = (catalog.regFilters || []).map(function (pattern) { return new RegExp(pattern); });
            var abstract;
            if (capabilities.serviceDescription && capabilities.serviceDescription.length) {
                var regex = /(<([^>]+)>)/ig;
                abstract = capabilities.serviceDescription.replace(regex, '');
            }
            return layers
                .map(function (layer) {
                var e_5, _a;
                var forcedTitle;
                if (catalog.forcedProperties) {
                    try {
                        for (var _b = __values(catalog.forcedProperties), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var property = _c.value;
                            if (layer.name === property.layerName && property.title) {
                                forcedTitle = property.title;
                            }
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                }
                if (_this.testLayerRegexes(layer.id, regexes) === false) {
                    return undefined;
                }
                var baseSourceOptions = {
                    type: exports.TypeCatalog[catalog.type],
                    url: catalog.url,
                    crossOrigin: catalog.setCrossOriginAnonymous
                        ? 'anonymous'
                        : undefined,
                    layer: layer.id,
                    queryable: true,
                    queryFormat: 'esrijson',
                    matrixSet: catalog.matrixSet,
                    optionsFromCapabilities: true,
                    style: 'default'
                };
                var sourceOptions = Object.assign({}, baseSourceOptions, catalog.sourceOptions);
                return utils.ObjectUtils.removeUndefined({
                    id: generateIdFromSourceOptions(sourceOptions),
                    type: exports.CatalogItemType.Layer,
                    title: forcedTitle !== undefined ? forcedTitle : layer.name,
                    externalProvider: catalog.externalProvider,
                    address: catalog.id,
                    options: {
                        sourceOptions: sourceOptions,
                        minResolution: getResolutionFromScale(layer.maxScale),
                        maxResolution: getResolutionFromScale(layer.minScale),
                        metadata: {
                            url: undefined,
                            extern: undefined,
                            abstract: abstract,
                            type: baseSourceOptions.type
                        },
                        title: forcedTitle !== undefined ? forcedTitle : layer.name
                    }
                });
            })
                .filter(function (item) { return item !== undefined; });
        };
        CatalogService.prototype.testLayerRegexes = function (layerName, regexes) {
            if (regexes.length === 0) {
                return true;
            }
            return regexes.find(function (regex) { return regex.test(layerName); }) !== undefined;
        };
        CatalogService.prototype.retrieveLayerInfoFormat = function (layerNameFromCatalog, layersQueryFormat) {
            var currentLayerInfoFormat = layersQueryFormat.find(function (f) { return f.layer === layerNameFromCatalog; });
            var baseInfoFormat = layersQueryFormat.find(function (f) { return f.layer === '*'; });
            var queryFormat;
            if (currentLayerInfoFormat) {
                queryFormat = currentLayerInfoFormat.queryFormat;
            }
            else if (baseInfoFormat) {
                queryFormat = baseInfoFormat.queryFormat;
            }
            return queryFormat;
        };
        CatalogService.prototype.findCatalogInfoFormat = function (catalog) {
            var layersQueryFormat = [];
            if (!catalog.queryFormat) {
                return layersQueryFormat;
            }
            Object.keys(catalog.queryFormat).forEach(function (configuredInfoFormat) {
                if (catalog.queryFormat[configuredInfoFormat] instanceof Array) {
                    catalog.queryFormat[configuredInfoFormat].forEach(function (layerName) {
                        if (!layersQueryFormat.find(function (specific) { return specific.layer === layerName; })) {
                            layersQueryFormat.push({
                                layer: layerName,
                                queryFormat: configuredInfoFormat
                            });
                        }
                    });
                }
                else {
                    if (!layersQueryFormat.find(function (specific) { return specific.layer === catalog.queryFormat[configuredInfoFormat]; })) {
                        layersQueryFormat.push({
                            layer: catalog.queryFormat[configuredInfoFormat],
                            queryFormat: configuredInfoFormat
                        });
                    }
                }
            });
            return layersQueryFormat;
        };
        return CatalogService;
    }());
    CatalogService.ɵfac = function CatalogService_Factory(t) { return new (t || CatalogService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.ConfigService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(CapabilitiesService)); };
    CatalogService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: CatalogService, factory: CatalogService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.ConfigService }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.MessageService }, { type: CapabilitiesService }]; }, null);
    })();

    function CatalogBrowserComponent_ng_template_1_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "igo-catalog-browser-group", 3);
            i0__namespace.ɵɵlistener("addedChange", function CatalogBrowserComponent_ng_template_1_ng_container_0_Template_igo_catalog_browser_group_addedChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(2); return ctx_r4.onGroupAddedChange($event); })("layerAddedChange", function CatalogBrowserComponent_ng_template_1_ng_container_0_Template_igo_catalog_browser_group_layerAddedChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r6 = i0__namespace.ɵɵnextContext(2); return ctx_r6.onLayerAddedChange($event); });
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var item_r1 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("catalog", ctx_r2.catalog)("group", item_r1)("state", ctx_r2.store.state)("resolution", i0__namespace.ɵɵpipeBind1(2, 7, ctx_r2.resolution$))("catalogAllowLegend", ctx_r2.catalogAllowLegend)("collapsed", ctx_r2.store.count === 1 ? false : true)("toggleCollapsed", ctx_r2.toggleCollapsedGroup);
        }
    }
    function CatalogBrowserComponent_ng_template_1_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "igo-catalog-browser-layer", 4);
            i0__namespace.ɵɵlistener("addedChange", function CatalogBrowserComponent_ng_template_1_ng_container_1_Template_igo_catalog_browser_layer_addedChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(2); return ctx_r8.onLayerAddedChange($event); });
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var item_r1 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("layer", item_r1)("resolution", i0__namespace.ɵɵpipeBind1(2, 4, ctx_r3.resolution$))("catalogAllowLegend", ctx_r3.catalogAllowLegend)("added", ctx_r3.store.state.get(item_r1).added);
        }
    }
    function CatalogBrowserComponent_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, CatalogBrowserComponent_ng_template_1_ng_container_0_Template, 3, 9, "ng-container", 2);
            i0__namespace.ɵɵtemplate(1, CatalogBrowserComponent_ng_template_1_ng_container_1_Template, 3, 6, "ng-container", 2);
        }
        if (rf & 2) {
            var item_r1 = ctx.$implicit;
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.isGroup(item_r1));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.isLayer(item_r1));
        }
    }
    /**
     * Component to browse a catalog's groups and layers and display them on a map.
     */
    var CatalogBrowserComponent = /** @class */ (function () {
        function CatalogBrowserComponent(layerService, cdRef) {
            this.layerService = layerService;
            this.cdRef = cdRef;
            this.catalogAllowLegend = false;
            /**
             * Whether a group can be toggled when it's collapsed
             */
            this.toggleCollapsedGroup = true;
        }
        Object.defineProperty(CatalogBrowserComponent.prototype, "resolution$", {
            // private resolution$$: Subscription;
            get: function () { return this.map.viewController.resolution$; },
            enumerable: false,
            configurable: true
        });
        /**
         * @internal
         */
        CatalogBrowserComponent.prototype.ngOnInit = function () {
            var currentItems = this.map.layers.map(function (layer) {
                return {
                    id: layer.options.source.id,
                    title: layer.title,
                    type: exports.CatalogItemType.Layer
                };
            });
            this.store.state.updateMany(currentItems, { added: true }, true);
            if (this.catalog && this.catalog.sortDirection !== undefined) {
                this.store.view.sort({
                    direction: this.catalog.sortDirection,
                    valueAccessor: function (item) { return item.title; }
                });
            }
            var catalogShowLegend = this.catalog ? this.catalog.showLegend : false;
            this.catalogAllowLegend = catalogShowLegend ? catalogShowLegend : this.catalogAllowLegend;
            this.watcher = new i6.EntityStoreWatcher(this.store, this.cdRef);
        };
        CatalogBrowserComponent.prototype.ngOnDestroy = function () {
            this.watcher.destroy();
        };
        /**
         * @internal
         */
        CatalogBrowserComponent.prototype.isGroup = function (item) {
            return item.type === exports.CatalogItemType.Group;
        };
        /**
         * @internal
         */
        CatalogBrowserComponent.prototype.isLayer = function (item) {
            return item.type === exports.CatalogItemType.Layer;
        };
        /**
         * When a layer is added or removed, add or remove it from the map
         * @internal
         * @param event Layer added event
         */
        CatalogBrowserComponent.prototype.onLayerAddedChange = function (event) {
            var layer = event.layer;
            this.store.state.update(layer, { added: event.added }, false);
            event.added ? this.addLayerToMap(layer) : this.removeLayerFromMap(layer);
        };
        /**
         * When a froup is added or removed, add or remove it from the map
         * @internal
         * @param event Group added event
         */
        CatalogBrowserComponent.prototype.onGroupAddedChange = function (event) {
            var group = event.group;
            this.store.state.update(group, { added: event.added }, false);
            event.added ? this.addGroupToMap(group) : this.removeGroupFromMap(group);
        };
        /**
         * Add layer to map
         * @param layer Catalog layer
         */
        CatalogBrowserComponent.prototype.addLayerToMap = function (layer) {
            this.addLayersToMap([layer]);
        };
        /**
         * Remove layer from map
         * @param layer Catalog layer
         */
        CatalogBrowserComponent.prototype.removeLayerFromMap = function (layer) {
            this.removeLayersFromMap([layer]);
        };
        /**
         * Add multiple layers to map
         * @param layers Catalog layers
         */
        CatalogBrowserComponent.prototype.addLayersToMap = function (layers) {
            var _this = this;
            var layers$ = layers.map(function (layer) {
                if (!layer.options.sourceOptions.optionsFromApi) {
                    layer.options.sourceOptions.optionsFromApi = true;
                }
                return _this.layerService.createAsyncLayer(layer.options);
            });
            rxjs.zip.apply(void 0, __spreadArray([], __read(layers$))).subscribe(function (oLayers) {
                _this.store.state.updateMany(layers, { added: true });
                _this.map.addLayers(oLayers);
            });
        };
        /**
         * Remove multiple layers from map
         * @param layers Catalog layers
         */
        CatalogBrowserComponent.prototype.removeLayersFromMap = function (layers) {
            var _this = this;
            layers.forEach(function (layer) {
                _this.store.state.update(layer, { added: false });
                if (layer.options.baseLayer === true) {
                    var oLayer = _this.map.getLayerById(layer.options.id);
                    if (oLayer !== undefined) {
                        _this.map.removeLayer(oLayer);
                    }
                }
                else {
                    var oLayer = _this.map.getLayerById(layer.id);
                    if (oLayer !== undefined) {
                        _this.map.removeLayer(oLayer);
                    }
                }
            });
        };
        /**
         * Sort the layers by title. asc or desc.
         * @internal
         */
        CatalogBrowserComponent.prototype.sortCatalogItemsByTitle = function (items, direction) {
            var returnItem = items.sort(function (a, b) {
                var titleA = a.title.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                var titleB = b.title.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                if (titleA < titleB) {
                    return -1;
                }
                if (titleA > titleB) {
                    return 1;
                }
                return 0;
            });
            switch (direction) {
                case 'asc':
                    return returnItem;
                case 'desc':
                    return returnItem.reverse();
                default:
                    return items;
            }
        };
        /**
         * Add all the layers of a group to map
         * @param group Catalog group
         */
        CatalogBrowserComponent.prototype.addGroupToMap = function (group) {
            var _this = this;
            var layers = group.items.filter(function (item) {
                var added = _this.store.state.get(item).added || false;
                return _this.isLayer(item) && added === false;
            });
            if (group.sortDirection !== undefined) {
                layers = this.sortCatalogItemsByTitle(layers, group.sortDirection);
            }
            this.addLayersToMap(layers.reverse());
        };
        /**
         * Remove all the layers of a group from map
         * @param group Catalog group
         */
        CatalogBrowserComponent.prototype.removeGroupFromMap = function (group) {
            var _this = this;
            var layers = group.items.filter(function (item) {
                var added = _this.store.state.get(item).added || false;
                return _this.isLayer(item) && added === true;
            });
            this.removeLayersFromMap(layers);
        };
        return CatalogBrowserComponent;
    }());
    CatalogBrowserComponent.ɵfac = function CatalogBrowserComponent_Factory(t) { return new (t || CatalogBrowserComponent)(i0__namespace.ɵɵdirectiveInject(LayerService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    CatalogBrowserComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: CatalogBrowserComponent, selectors: [["igo-catalog-browser"]], inputs: { catalogAllowLegend: "catalogAllowLegend", catalog: "catalog", store: "store", map: "map", toggleCollapsedGroup: "toggleCollapsedGroup" }, decls: 3, vars: 5, consts: [[3, "navigation", "selection"], ["ngFor", "", 3, "ngForOf"], [4, "ngIf"], [3, "catalog", "group", "state", "resolution", "catalogAllowLegend", "collapsed", "toggleCollapsed", "addedChange", "layerAddedChange"], ["igoListItem", "", 3, "layer", "resolution", "catalogAllowLegend", "added", "addedChange"]], template: function CatalogBrowserComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-list", 0);
                i0__namespace.ɵɵtemplate(1, CatalogBrowserComponent_ng_template_1_Template, 2, 2, "ng-template", 1);
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("navigation", false)("selection", false);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(2, 3, ctx.store.view.all$()));
            }
        }, encapsulation: 2, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogBrowserComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-catalog-browser',
                        templateUrl: './catalog-browser.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: LayerService }, { type: i0__namespace.ChangeDetectorRef }]; }, { catalogAllowLegend: [{
                    type: i0.Input
                }], catalog: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], toggleCollapsedGroup: [{
                    type: i0.Input
                }] });
    })();

    var _c0$f = ["renderedLegend"];
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_mat_list_item_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r15_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-list-item");
            i0__namespace.ɵɵelementStart(1, "mat-icon", 7);
            i0__namespace.ɵɵlistener("toggle", function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_mat_list_item_1_Template_mat_icon_toggle_1_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var item_r6 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r13 = i0__namespace.ɵɵnextContext(3); return ctx_r13.toggleLegendItem($event, item_r6); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(2, "h4", 8);
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r10 = i0__namespace.ɵɵreference(3);
            var item_r6 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r9 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("target", _r10)("collapsed", item_r6.collapsed);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(4, 3, ctx_r9.computeItemTitle(item_r6)), " ");
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 11);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var style_r18 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", style_r18.name);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(style_r18.title);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r20_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 9);
            i0__namespace.ɵɵlistener("ngModelChange", function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_Template_mat_select_ngModelChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r20_1); var ctx_r19 = i0__namespace.ɵɵnextContext(5); return ctx_r19.currentStyle = $event; })("selectionChange", function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_Template_mat_select_selectionChange_2_listener() { i0__namespace.ɵɵrestoreView(_r20_1); var ctx_r21 = i0__namespace.ɵɵnextContext(5); return ctx_r21.onChangeStyle(); });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_mat_option_4_Template, 2, 2, "mat-option", 10);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r11 = i0__namespace.ɵɵnextContext(5);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.layer.legend.selectStyle"))("ngModel", ctx_r11.currentStyle);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r11.styles);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_1_small_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "small");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLegendScale"), " ");
        }
    }
    var _c1$c = function (a0) { return [a0]; };
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r28_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelementStart(1, "img", 13, 14);
            i0__namespace.ɵɵlistener("load", function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_1_Template_img_load_1_listener() { i0__namespace.ɵɵrestoreView(_r28_1); var item_r6 = i0__namespace.ɵɵnextContext(3).$implicit; var ctx_r26 = i0__namespace.ɵɵnextContext(3); return ctx_r26.onLoadImage(item_r6.title); });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(4, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_1_small_4_Template, 3, 3, "small", 0);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var item_r6 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r22 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("id", item_r6.title);
            i0__namespace.ɵɵpropertyInterpolate("src", i0__namespace.ɵɵpureFunction1(6, _c1$c, item_r6.imgGraphValue), i0__namespace.ɵɵsanitizeUrl);
            i0__namespace.ɵɵpropertyInterpolate("alt", i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.layer.legend.loadingLegendText"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r22.imagesHeight[item_r6.title] < 16);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 15);
            i0__namespace.ɵɵpipe(1, "sanitizeHtml");
        }
        if (rf & 2) {
            var item_r6 = i0__namespace.ɵɵnextContext(3).$implicit;
            i0__namespace.ɵɵproperty("ngStyle", item_r6.style)("innerHTML", i0__namespace.ɵɵpipeBind1(1, 2, item_r6.html), i0__namespace.ɵɵsanitizeHtml);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_1_Template, 5, 8, "div", 0);
            i0__namespace.ɵɵtemplate(2, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_div_2_Template, 2, 4, "div", 12);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var item_r6 = i0__namespace.ɵɵnextContext(2).$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", item_r6.url);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", item_r6.html);
        }
    }
    var _c2$6 = function (a0) { return { "with-title": a0 }; };
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_mat_list_item_1_Template, 5, 5, "mat-list-item", 0);
            i0__namespace.ɵɵelementStart(2, "div", 5, 6);
            i0__namespace.ɵɵtemplate(4, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_4_Template, 5, 5, "div", 0);
            i0__namespace.ɵɵtemplate(5, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_div_5_Template, 3, 2, "div", 0);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var item_r6 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r8 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", item_r6.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(4, _c2$6, item_r6.title));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r8.currentStyle !== undefined);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !item_r6.collapsed);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0, null, 4);
            i0__namespace.ɵɵtemplate(2, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_div_2_Template, 6, 6, "div", 1);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(2);
            var _r3 = i0__namespace.ɵɵreference(3);
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.getLegend)("ngIfElse", _r3);
        }
    }
    function LayerLegendComponent_ng_container_0_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, LayerLegendComponent_ng_container_0_ng_container_1_ng_container_1_Template, 3, 2, "ng-container", 3);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var items_r1 = i0__namespace.ɵɵnextContext().ngIf;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", items_r1.slice().reverse());
        }
    }
    function LayerLegendComponent_ng_container_0_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "small");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLegendText"), " ");
        }
    }
    function LayerLegendComponent_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, LayerLegendComponent_ng_container_0_ng_container_1_Template, 2, 1, "ng-container", 1);
            i0__namespace.ɵɵtemplate(2, LayerLegendComponent_ng_container_0_ng_template_2_Template, 3, 3, "ng-template", null, 2, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var items_r1 = ctx.ngIf;
            var _r3 = i0__namespace.ɵɵreference(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", items_r1.length)("ngIfElse", _r3);
        }
    }
    var LayerLegendComponent = /** @class */ (function () {
        /**
         * activeLegend
         */
        function LayerLegendComponent(capabilitiesService, languageService, http, cdRef) {
            this.capabilitiesService = capabilitiesService;
            this.languageService = languageService;
            this.http = http;
            this.cdRef = cdRef;
            this.updateLegendOnResolutionChange = false;
            /**
             * Observable of the legend items
             */
            this.legendItems$ = new rxjs.BehaviorSubject([]);
            /**
             * The scale used to make the legend
             */
            this.scale = undefined;
            /**
             * The extent used to make the legend
             */
            this.view = undefined;
            /**
             * List of size of images displayed
             */
            this.imagesHeight = {};
            /**
             * if getLegendGraphic is authorized
             */
            this.getLegend = true;
        }
        /**
         * On init, subscribe to the map's resolution and update the legend accordingly
         */
        LayerLegendComponent.prototype.ngOnInit = function () {
            var e_1, _a;
            var _this = this;
            var lastlLegend = this.layer.legend;
            this.styles = this.listStyles();
            var sourceOptions = this.layer.options.source.options;
            if (sourceOptions && sourceOptions.params && sourceOptions.params.STYLES) {
                // if a styles is provided into the layers wms params
                this.currentStyle = this.styles.find(function (style) { return style.name === sourceOptions.params.STYLES; }).name;
            }
            else if (!lastlLegend) {
                // if no legend is manually provided
                if (this.styles && this.styles.length > 1) {
                    this.currentStyle = this.styles[0].name;
                }
            }
            else if (this.styles && this.styles.length > 1) {
                this.currentStyle = lastlLegend[0].currentStyle;
            }
            if (typeof this.layer.options.legendOptions !== 'undefined' && this.layer.options.legendOptions.display === false) {
                lastlLegend = [];
            }
            else {
                lastlLegend = this.layer.dataSource.getLegend(this.currentStyle, this.view);
            }
            if (this.updateLegendOnResolutionChange || sourceOptions.contentDependentLegend) {
                var state$ = this.layer.map.viewController.state$;
                this.state$$ = state$.subscribe(function () { return _this.onViewControllerStateChange(); });
            }
            else if (lastlLegend && lastlLegend.length !== 0) {
                this.legendItems$.next(lastlLegend);
                try {
                    for (var lastlLegend_1 = __values(lastlLegend), lastlLegend_1_1 = lastlLegend_1.next(); !lastlLegend_1_1.done; lastlLegend_1_1 = lastlLegend_1.next()) {
                        var legend = lastlLegend_1_1.value;
                        this.getLegendGraphic(legend);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (lastlLegend_1_1 && !lastlLegend_1_1.done && (_a = lastlLegend_1.return)) _a.call(lastlLegend_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        /**
         * On destroy, unsubscribe to the map's view state
         */
        LayerLegendComponent.prototype.ngOnDestroy = function () {
            if (this.state$$ !== undefined) {
                this.state$$.unsubscribe();
            }
        };
        LayerLegendComponent.prototype.getLegendGraphic = function (item) {
            var _this = this;
            if (item.url) {
                var secureIMG = new i6.SecureImagePipe(this.http);
                secureIMG.transform(item.url).pipe(operators.catchError(function (err) {
                    if (err.error) {
                        err.error.caught = true;
                        _this.getLegend = false;
                        _this.cdRef.detectChanges();
                        return err;
                    }
                })).subscribe(function (obsLegGraph) {
                    var idx = _this.legendItems$.value.findIndex(function (leg) { return leg.title === item.title; });
                    var legendGraph = obsLegGraph;
                    _this.legendItems$.value[idx].imgGraphValue = legendGraph;
                    _this.cdRef.detectChanges();
                });
            }
        };
        LayerLegendComponent.prototype.toggleLegendItem = function (collapsed, item) {
            item.collapsed = collapsed;
        };
        LayerLegendComponent.prototype.transfertToggleLegendItem = function (newLegends) {
            var outLegends = newLegends;
            var lastLegends = this.layer.legend;
            for (var i = 0; i < lastLegends.length; i++) {
                outLegends[i].collapsed = lastLegends[i].collapsed;
            }
            return outLegends;
        };
        LayerLegendComponent.prototype.computeItemTitle = function (layerLegend) {
            var layerOptions = this.layer.dataSource.options;
            if (layerOptions.type !== 'wms') {
                return rxjs.of(layerLegend.title);
            }
            var layers = layerOptions.params.LAYERS.split(',');
            var localLayerOptions = JSON.parse(JSON.stringify(layerOptions)); // to avoid to alter the original options.
            localLayerOptions.params.LAYERS = layers.find(function (layer) { return layer === layerLegend.title; });
            return this.capabilitiesService
                .getWMSOptions(localLayerOptions)
                .pipe(operators.map(function (wmsDataSourceOptions) {
                return wmsDataSourceOptions._layerOptionsFromSource.title;
            }));
        };
        /**
         * On resolution change, compute the effective scale level and update the
         * legend accordingly.
         * @param resolution Map resolution
         */
        LayerLegendComponent.prototype.onViewControllerStateChange = function () {
            this.view = {
                resolution: this.layer.map.viewController.getResolution(),
                extent: this.layer.map.viewController.getExtent(),
                projection: this.layer.map.viewController.getOlProjection().getCode(),
                scale: this.layer.map.viewController.getScale(),
                size: this.layer.map.ol.getSize()
            };
            this.updateLegend();
        };
        /**
         * Update the legend with scale level and style define
         */
        LayerLegendComponent.prototype.updateLegend = function () {
            var e_2, _a;
            var legendItems = this.layer.dataSource.getLegend(this.currentStyle, this.view);
            if (this.layer.legend && this.layer.legend.length > 1) {
                legendItems = this.transfertToggleLegendItem(legendItems);
            }
            this.layer.legend = legendItems;
            if (legendItems.length === 0 && this.legendItems$.value.length === 0) {
                return;
            }
            this.legendItems$.next(legendItems);
            try {
                for (var _b = __values(this.legendItems$.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var legend = _c.value;
                    this.getLegendGraphic(legend);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        LayerLegendComponent.prototype.listStyles = function () {
            var layerOptions = this.layer.options;
            if (layerOptions && layerOptions.legendOptions) {
                var translate = this.languageService.translate;
                var title = translate.instant('igo.geo.layer.legend.default');
                var stylesAvailable = [{ name: '', title: title }];
                if (layerOptions.legendOptions.stylesAvailable) {
                    stylesAvailable = stylesAvailable.concat(layerOptions.legendOptions.stylesAvailable.filter(function (sA) { return (sA.name.normalize('NFD').replace(/[\u0300-\u036f]/gi, '') !== 'default' &&
                        sA.name.normalize('NFD').replace(/[\u0300-\u036f]/gi, '') !== 'defaut'); }));
                }
                stylesAvailable.filter(function (sa) { return !sa.title; }).map(function (sa) { return sa.title = sa.name; });
                stylesAvailable.map(function (s) { return s.title = s.title.charAt(0).toUpperCase() + s.title.slice(1).replace(/_/g, ' '); });
                return stylesAvailable;
            }
            return;
        };
        LayerLegendComponent.prototype.onChangeStyle = function () {
            var _this = this;
            this.updateLegend();
            var STYLES = '';
            if (this.layer.dataSource instanceof WMSDataSource) {
                this.layer.dataSource.ol.getParams().LAYERS.split(',').map(function (layer) { return STYLES += _this.currentStyle + ','; });
                STYLES = STYLES.slice(0, -1);
                this.layer.dataSource.ol.updateParams({ STYLES: STYLES });
            }
        };
        LayerLegendComponent.prototype.onLoadImage = function (id) {
            var elemRef;
            if (this.renderedLegends.length === 1) {
                elemRef = this.renderedLegends.first.nativeElement;
            }
            else {
                elemRef = this.renderedLegends.find(function (renderedLegend) { return renderedLegend.nativeElement.id === id; }).nativeElement;
            }
            this.imagesHeight[id] = elemRef.height;
        };
        return LayerLegendComponent;
    }());
    LayerLegendComponent.ɵfac = function LayerLegendComponent_Factory(t) { return new (t || LayerLegendComponent)(i0__namespace.ɵɵdirectiveInject(CapabilitiesService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i1__namespace$2.HttpClient), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    LayerLegendComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerLegendComponent, selectors: [["igo-layer-legend"]], viewQuery: function LayerLegendComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$f, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.renderedLegends = _t);
            }
        }, inputs: { updateLegendOnResolutionChange: "updateLegendOnResolutionChange", layer: "layer" }, decls: 2, vars: 3, consts: [[4, "ngIf"], [4, "ngIf", "ngIfElse"], ["noItems", ""], [4, "ngFor", "ngForOf"], ["renderedLegends", ""], [1, "igo-layer-legend", 3, "ngClass"], ["legend", ""], ["id", "legend-toggle", "mat-list-avatar", "", "igoCollapse", "", "svgIcon", "chevron-up", 1, "igo-chevron", 3, "target", "collapsed", "toggle"], ["matLine", ""], ["tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "ngModel", "ngModelChange", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "ngStyle", "innerHTML", 4, "ngIf"], [3, "id", "src", "alt", "load"], ["renderedLegend", ""], [3, "ngStyle", "innerHTML"]], template: function LayerLegendComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, LayerLegendComponent_ng_container_0_Template, 4, 2, "ng-container", 0);
                i0__namespace.ɵɵpipe(1, "async");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(1, 1, ctx.legendItems$));
            }
        }, directives: [i1__namespace$1.NgIf, i1__namespace$1.NgForOf, i1__namespace$1.NgClass, i1__namespace$3.MatListItem, i4__namespace.MatIcon, i1__namespace$3.MatListAvatarCssMatStyler, i6__namespace.CollapseDirective, i9__namespace.MatLine, i12__namespace.MatFormField, i13__namespace.MatSelect, i3__namespace.MatTooltip, i16__namespace.NgControlStatus, i16__namespace.NgModel, i9__namespace.MatOption, i1__namespace$1.NgStyle], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe, i6__namespace.SanitizeHtmlPipe], styles: [".igo-layer-legend.with-title[_ngcontent-%COMP%]{padding-left:18px}img[_ngcontent-%COMP%]:after{content:\" \";position:relative;height:17px;float:left;width:17px;top:-3px;right:19px;background-color:#fff;border:3px solid #f3f3f3;border-radius:50%;-webkit-animation:2s linear infinite spin;animation:2s linear infinite spin}@-moz-document url-prefix(){img:after{margin-left:19px}}@-webkit-keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerLegendComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-legend',
                        templateUrl: './layer-legend.component.html',
                        styleUrls: ['./layer-legend.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: CapabilitiesService }, { type: i2__namespace$1.LanguageService }, { type: i1__namespace$2.HttpClient }, { type: i0__namespace.ChangeDetectorRef }]; }, { updateLegendOnResolutionChange: [{
                    type: i0.Input
                }], renderedLegends: [{
                    type: i0.ViewChildren,
                    args: ['renderedLegend']
                }], layer: [{
                    type: i0.Input
                }] });
    })();

    function CatalogBrowserLayerComponent_mat_icon_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-icon", 9);
        }
    }
    function CatalogBrowserLayerComponent_button_4_mat_icon_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-icon", 12);
            i0__namespace.ɵɵlistener("click", function CatalogBrowserLayerComponent_button_4_mat_icon_1_Template_mat_icon_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.catalog.externalProvider.layer"));
        }
    }
    function CatalogBrowserLayerComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵtemplate(1, CatalogBrowserLayerComponent_button_4_mat_icon_1_Template, 2, 3, "mat-icon", 11);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.layer.externalProvider);
        }
    }
    function CatalogBrowserLayerComponent_igo_layer_legend_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-layer-legend", 3);
            i0__namespace.ɵɵpipe(1, "async");
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layer", i0__namespace.ɵɵpipeBind1(1, 1, ctx_r3.igoLayer$));
        }
    }
    /**
     * Catalog browser layer item
     */
    var CatalogBrowserLayerComponent = /** @class */ (function () {
        function CatalogBrowserLayerComponent(layerService) {
            this.layerService = layerService;
            this.inRange$ = new rxjs.BehaviorSubject(true);
            this.isPreview$ = new rxjs.BehaviorSubject(false);
            this.layerLegendShown$ = new rxjs.BehaviorSubject(false);
            this.igoLayer$ = new rxjs.BehaviorSubject(undefined);
            this.mouseInsideAdd = false;
            this.catalogAllowLegend = false;
            /**
             * Whether the layer is already added to the map
             */
            this.added = false;
            /**
             * Event emitted when the add/remove button is clicked
             */
            this.addedChange = new i0.EventEmitter();
            this.addedLayerIsPreview = new i0.EventEmitter();
        }
        Object.defineProperty(CatalogBrowserLayerComponent.prototype, "title", {
            /**
             * @internal
             */
            get: function () {
                return i6.getEntityTitle(this.layer);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CatalogBrowserLayerComponent.prototype, "icon", {
            /**
             * @internal
             */
            get: function () {
                return i6.getEntityIcon(this.layer) || 'layers';
            },
            enumerable: false,
            configurable: true
        });
        CatalogBrowserLayerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isInResolutionsRange();
            this.isPreview$$ = this.isPreview$.subscribe(function (value) { return _this.addedLayerIsPreview.emit(value); });
        };
        CatalogBrowserLayerComponent.prototype.ngOnDestroy = function () {
            this.isPreview$$.unsubscribe();
        };
        CatalogBrowserLayerComponent.prototype.computeTitleTooltip = function () {
            var layerOptions = this.layer.options;
            if (!layerOptions.tooltip) {
                return i6.getEntityTitle(this.layer);
            }
            var layerTooltip = layerOptions.tooltip;
            var layerMetadata = layerOptions.metadata;
            switch (layerOptions.tooltip.type) {
                case exports.TooltipType.TITLE:
                    return this.layer.title;
                case exports.TooltipType.ABSTRACT:
                    if (layerMetadata && layerMetadata.abstract) {
                        return layerMetadata.abstract;
                    }
                    else {
                        return this.layer.title;
                    }
                case exports.TooltipType.CUSTOM:
                    if (layerTooltip && layerTooltip.text) {
                        return layerTooltip.text;
                    }
                    else {
                        return this.layer.title;
                    }
                default:
                    return this.layer.title;
            }
        };
        /**
         * On mouse event, mouseenter /mouseleave
         * @internal
         */
        CatalogBrowserLayerComponent.prototype.onMouseEvent = function (event) {
            this.onToggleClick(event);
        };
        CatalogBrowserLayerComponent.prototype.askForLegend = function (event) {
            var _this = this;
            this.layerLegendShown$.next(!this.layerLegendShown$.value);
            this.layerService.createAsyncLayer(this.layer.options).pipe(operators.first())
                .subscribe(function (layer) { return _this.igoLayer$.next(layer); });
        };
        /**
         * On toggle button click, emit the added change event
         * @internal
         */
        CatalogBrowserLayerComponent.prototype.onToggleClick = function (event) {
            var _this = this;
            if (typeof this.lastTimeoutRequest !== 'undefined') {
                clearTimeout(this.lastTimeoutRequest);
            }
            if (event.type === 'mouseenter' && this.mouseInsideAdd) {
                return;
            }
            switch (event.type) {
                case 'click':
                    if (!this.isPreview$.value) {
                        if (this.added) {
                            this.remove();
                        }
                        else {
                            this.add();
                        }
                    }
                    this.isPreview$.next(false);
                    break;
                case 'mouseenter':
                    if (!this.isPreview$.value && !this.added) {
                        this.lastTimeoutRequest = setTimeout(function () {
                            _this.add();
                            _this.isPreview$.next(true);
                        }, 500);
                    }
                    this.mouseInsideAdd = true;
                    break;
                case 'mouseleave':
                    if (this.isPreview$.value) {
                        this.remove();
                        this.isPreview$.next(false);
                    }
                    this.mouseInsideAdd = false;
                    break;
                default:
                    break;
            }
        };
        /**
         * Emit added change event with added = true
         */
        CatalogBrowserLayerComponent.prototype.add = function () {
            if (!this.added) {
                this.added = true;
                this.addedChange.emit({ added: true, layer: this.layer });
            }
        };
        /**
         * Emit added change event with added = false
         */
        CatalogBrowserLayerComponent.prototype.remove = function () {
            if (this.added) {
                this.added = false;
                this.addedChange.emit({ added: false, layer: this.layer });
            }
        };
        CatalogBrowserLayerComponent.prototype.haveGroup = function () {
            return !(!this.layer.address || this.layer.address.split('.').length === 1);
        };
        CatalogBrowserLayerComponent.prototype.isInResolutionsRange = function () {
            var minResolution = this.layer.options.minResolution || 0;
            var maxResolution = this.layer.options.maxResolution || Infinity;
            this.inRange$.next(this.resolution >= minResolution && this.resolution <= maxResolution);
            return this.inRange$.value;
        };
        CatalogBrowserLayerComponent.prototype.computeTooltip = function () {
            if (this.added) {
                return this.isPreview$.value
                    ? 'igo.geo.catalog.layer.addToMap'
                    : this.inRange$.value
                        ? 'igo.geo.catalog.layer.removeFromMap'
                        : 'igo.geo.catalog.layer.removeFromMapOutRange';
            }
            else {
                return this.inRange$.value
                    ? 'igo.geo.catalog.layer.addToMap'
                    : 'igo.geo.catalog.layer.addToMapOutRange';
            }
        };
        return CatalogBrowserLayerComponent;
    }());
    CatalogBrowserLayerComponent.ɵfac = function CatalogBrowserLayerComponent_Factory(t) { return new (t || CatalogBrowserLayerComponent)(i0__namespace.ɵɵdirectiveInject(LayerService)); };
    CatalogBrowserLayerComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: CatalogBrowserLayerComponent, selectors: [["igo-catalog-browser-layer"]], inputs: { resolution: "resolution", catalogAllowLegend: "catalogAllowLegend", layer: "layer", added: "added" }, outputs: { addedChange: "addedChange", addedLayerIsPreview: "addedLayerIsPreview" }, decls: 16, vars: 21, consts: [["mat-list-avatar", "", "svgIcon", "blank", 4, "ngIf"], ["mat-line", "", "matTooltipShowDelay", "500", 3, "ngClass", "matTooltip", "click"], ["disabled", "true", "mat-icon-button", "", 4, "ngIf"], [3, "layer"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "mouseenter", "mouseleave", "click"], ["matBadge", "icon", "igoMatBadgeIcon", "eye-off", "igoMatBadgeInverseColor", "true", "matBadgeDisabled", "true", "matBadgeSize", "small", "matBadgePosition", "after", 3, "matBadgeHidden", "svgIcon"], [1, "igo-cataloglayer-legend-container"], ["legend", ""], [3, "layer", 4, "ngIf"], ["mat-list-avatar", "", "svgIcon", "blank"], ["disabled", "true", "mat-icon-button", ""], ["class", "igo-cataloglayer-external-icon", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 3, "matTooltip", "click", 4, "ngIf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 1, "igo-cataloglayer-external-icon", 3, "matTooltip", "click"]], template: function CatalogBrowserLayerComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵtemplate(1, CatalogBrowserLayerComponent_mat_icon_1_Template, 1, 0, "mat-icon", 0);
                i0__namespace.ɵɵelementStart(2, "h4", 1);
                i0__namespace.ɵɵlistener("click", function CatalogBrowserLayerComponent_Template_h4_click_2_listener($event) { return ctx.askForLegend($event); });
                i0__namespace.ɵɵtext(3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(4, CatalogBrowserLayerComponent_button_4_Template, 2, 1, "button", 2);
                i0__namespace.ɵɵelement(5, "igo-metadata-button", 3);
                i0__namespace.ɵɵelementStart(6, "button", 4);
                i0__namespace.ɵɵlistener("mouseenter", function CatalogBrowserLayerComponent_Template_button_mouseenter_6_listener($event) { return ctx.onMouseEvent($event); })("mouseleave", function CatalogBrowserLayerComponent_Template_button_mouseleave_6_listener($event) { return ctx.onMouseEvent($event); })("click", function CatalogBrowserLayerComponent_Template_button_click_6_listener($event) { return ctx.onToggleClick($event); });
                i0__namespace.ɵɵpipe(7, "translate");
                i0__namespace.ɵɵpipe(8, "async");
                i0__namespace.ɵɵelement(9, "mat-icon", 5);
                i0__namespace.ɵɵpipe(10, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(11, "div", 6, 7);
                i0__namespace.ɵɵtemplate(13, CatalogBrowserLayerComponent_igo_layer_legend_13_Template, 2, 3, "igo-layer-legend", 8);
                i0__namespace.ɵɵpipe(14, "async");
                i0__namespace.ɵɵpipe(15, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.haveGroup());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngClass", ctx.catalogAllowLegend ? "igo-cataloglayer-title" : "")("matTooltip", ctx.computeTitleTooltip());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(ctx.title);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.layer.externalProvider);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("layer", ctx.layer);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(7, 11, ctx.computeTooltip()))("color", i0__namespace.ɵɵpipeBind1(8, 13, ctx.isPreview$) ? "" : ctx.added ? "warn" : "");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("matBadgeHidden", ctx.isInResolutionsRange())("svgIcon", i0__namespace.ɵɵpipeBind1(10, 15, ctx.isPreview$) ? "plus" : ctx.added ? "delete" : "plus");
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(14, 17, ctx.layerLegendShown$) && i0__namespace.ɵɵpipeBind1(15, 19, ctx.igoLayer$) && ctx.catalogAllowLegend);
            }
        }, directives: [i1__namespace$3.MatListItem, i1__namespace$1.NgIf, i9__namespace.MatLine, i1__namespace$1.NgClass, i3__namespace.MatTooltip, MetadataButtonComponent, i2__namespace.MatButton, i4__namespace.MatIcon, i9__namespace$1.MatBadge, i6__namespace.IgoBadgeIconDirective, i1__namespace$3.MatListAvatarCssMatStyler, LayerLegendComponent], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [".igo-cataloglayer-title[_ngcontent-%COMP%]{cursor:pointer}.igo-cataloglayer-legend-container[_ngcontent-%COMP%]{padding-left:18px;width:calc(100% - 18px);margin-left:40px}.igo-cataloglayer-external-icon[_ngcontent-%COMP%]{cursor:help}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogBrowserLayerComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-catalog-browser-layer',
                        templateUrl: './catalog-browser-layer.component.html',
                        styleUrls: ['./catalog-browser-layer.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: LayerService }]; }, { resolution: [{
                    type: i0.Input
                }], catalogAllowLegend: [{
                    type: i0.Input
                }], layer: [{
                    type: i0.Input
                }], added: [{
                    type: i0.Input
                }], addedChange: [{
                    type: i0.Output
                }], addedLayerIsPreview: [{
                    type: i0.Output
                }] });
    })();

    function CatalogBrowserGroupComponent_button_4_mat_icon_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-icon", 9);
            i0__namespace.ɵɵlistener("click", function CatalogBrowserGroupComponent_button_4_mat_icon_1_Template_mat_icon_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.catalog.externalProvider.group"));
        }
    }
    function CatalogBrowserGroupComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 7);
            i0__namespace.ɵɵtemplate(1, CatalogBrowserGroupComponent_button_4_mat_icon_1_Template, 2, 3, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.group.externalProvider);
        }
    }
    function CatalogBrowserGroupComponent_ng_container_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "button", 10);
            i0__namespace.ɵɵlistener("click", function CatalogBrowserGroupComponent_ng_container_5_Template_button_click_1_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.onToggleClick(); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵelement(4, "mat-icon", 11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.catalog.group.removeFromMap"))("disabled", i0__namespace.ɵɵpipeBind1(3, 4, ctx_r1.disabled$));
        }
    }
    function CatalogBrowserGroupComponent_ng_template_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 12);
            i0__namespace.ɵɵlistener("click", function CatalogBrowserGroupComponent_ng_template_8_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.onToggleClick(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelement(3, "mat-icon", 13);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.catalog.group.addToMap"))("disabled", i0__namespace.ɵɵpipeBind1(2, 4, ctx_r3.disabled$));
        }
    }
    function CatalogBrowserGroupComponent_ng_template_12_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function CatalogBrowserGroupComponent_ng_template_12_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r16_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "igo-catalog-browser-layer", 15);
            i0__namespace.ɵɵlistener("addedLayerIsPreview", function CatalogBrowserGroupComponent_ng_template_12_ng_container_1_Template_igo_catalog_browser_layer_addedLayerIsPreview_1_listener($event) { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r15 = i0__namespace.ɵɵnextContext(2); return ctx_r15.onLayerPreview($event); })("addedChange", function CatalogBrowserGroupComponent_ng_template_12_ng_container_1_Template_igo_catalog_browser_layer_addedChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r17 = i0__namespace.ɵɵnextContext(2); return ctx_r17.onLayerAddedChange($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var item_r12 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r14 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("layer", item_r12)("resolution", ctx_r14.resolution)("catalogAllowLegend", ctx_r14.catalogAllowLegend)("added", ctx_r14.state.get(item_r12).added);
        }
    }
    function CatalogBrowserGroupComponent_ng_template_12_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, CatalogBrowserGroupComponent_ng_template_12_ng_container_0_Template, 1, 0, "ng-container", 14);
            i0__namespace.ɵɵtemplate(1, CatalogBrowserGroupComponent_ng_template_12_ng_container_1_Template, 2, 4, "ng-container", 14);
        }
        if (rf & 2) {
            var item_r12 = ctx.$implicit;
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.isGroup(item_r12));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.isLayer(item_r12));
        }
    }
    /**
     * Catalog browser group item
     */
    var CatalogBrowserGroupComponent = /** @class */ (function () {
        function CatalogBrowserGroupComponent() {
            /**
             * Group's items store
             * @internal
             */
            this.store = new i6.EntityStore([]);
            /**
             * Whether all the layers of the group are added
             * @internal
             */
            this.added$ = new rxjs.BehaviorSubject(false);
            this.preview$ = new rxjs.BehaviorSubject(false);
            /**
             * Whether the toggle button is disabled
             * @internal
             */
            this.disabled$ = new rxjs.BehaviorSubject(false);
            /**
             * Whether the group is collapsed
             */
            this.collapsed = true;
            this.catalogAllowLegend = false;
            /**
             * Whether the group can be toggled when it's collapsed
             */
            this.toggleCollapsed = true;
            /**
             * Event emitted when the add/remove button of the group is clicked
             */
            this.addedChange = new i0.EventEmitter();
            /**
             * Event emitted when the add/remove button of a layer is clicked
             */
            this.layerAddedChange = new i0.EventEmitter();
        }
        Object.defineProperty(CatalogBrowserGroupComponent.prototype, "title", {
            /**
             * @internal
             */
            get: function () {
                return this.group.title;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @internal
         */
        CatalogBrowserGroupComponent.prototype.ngOnInit = function () {
            this.store.load(this.group.items);
            this.evaluateAdded();
            this.evaluateDisabled(this.collapsed);
            if (this.group.sortDirection !== undefined) {
                this.store.view.sort({
                    direction: this.group.sortDirection,
                    valueAccessor: function (item) { return item.title; }
                });
            }
        };
        CatalogBrowserGroupComponent.prototype.ngOnDestroy = function () {
            this.store.destroy();
        };
        /**
         * @internal
         */
        CatalogBrowserGroupComponent.prototype.isGroup = function (item) {
            return item.type === exports.CatalogItemType.Group;
        };
        /**
         * @internal
         */
        CatalogBrowserGroupComponent.prototype.isLayer = function (item) {
            return item.type === exports.CatalogItemType.Layer;
        };
        /**
         * On toggle button click, emit the added change event
         * @internal
         */
        CatalogBrowserGroupComponent.prototype.onToggleClick = function () {
            this.added$.value ? this.remove() : this.add();
        };
        /**
         * On toggle button click, emit the added change event
         * @internal
         */
        CatalogBrowserGroupComponent.prototype.onToggleCollapsed = function (collapsed) {
            this.evaluateDisabled(collapsed);
        };
        /**
         * When a layer is added or removed, evaluate if all the layers of the group
         * are now added or removed. If so, consider that the group itself is added
         * or removed.
         * @internal
         * @param event Layer added change event
         */
        CatalogBrowserGroupComponent.prototype.onLayerAddedChange = function (event) {
            this.layerAddedChange.emit(event);
            this.tryToggleGroup(event);
        };
        /**
         * Emit added change event with added = true
         */
        CatalogBrowserGroupComponent.prototype.add = function () {
            this.added$.next(true);
            this.addedChange.emit({
                added: true,
                group: this.group
            });
        };
        /**
         * Emit added change event with added = true
         */
        CatalogBrowserGroupComponent.prototype.remove = function () {
            this.added$.next(false);
            this.addedChange.emit({
                added: false,
                group: this.group
            });
        };
        CatalogBrowserGroupComponent.prototype.onLayerPreview = function (event) {
            this.preview$.next(event);
        };
        /**
         * If all the layers of the group added or removed, add or remove the group itself.
         * @param event The last layer added change event to occur
         */
        CatalogBrowserGroupComponent.prototype.tryToggleGroup = function (event) {
            var _this = this;
            var added = event.added;
            var layer = event.layer;
            var layersAdded = this.store.view
                .all()
                .filter(function (item) { return item.id !== layer.id; })
                .map(function (item) { return _this.state.get(item).added || false; });
            if (layersAdded.every(function (value) { return value === added; })) {
                added ? this.add() : this.remove();
            }
            else if (this.added$.value === true) {
                this.added$.next(false);
            }
        };
        CatalogBrowserGroupComponent.prototype.evaluateAdded = function () {
            var _this = this;
            var added = this.store.all().every(function (item) {
                return (_this.state.get(item).added || false) === true;
            });
            this.added$.next(added);
        };
        CatalogBrowserGroupComponent.prototype.evaluateDisabled = function (collapsed) {
            var disabled = false;
            if (this.toggleCollapsed === false) {
                disabled = collapsed;
            }
            this.disabled$.next(disabled);
        };
        CatalogBrowserGroupComponent.prototype.onTitleClick = function () {
            this.collapsed = !this.collapsed;
        };
        return CatalogBrowserGroupComponent;
    }());
    CatalogBrowserGroupComponent.ɵfac = function CatalogBrowserGroupComponent_Factory(t) { return new (t || CatalogBrowserGroupComponent)(); };
    CatalogBrowserGroupComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: CatalogBrowserGroupComponent, selectors: [["igo-catalog-browser-group"]], inputs: { catalog: "catalog", group: "group", collapsed: "collapsed", resolution: "resolution", catalogAllowLegend: "catalogAllowLegend", toggleCollapsed: "toggleCollapsed", state: "state" }, outputs: { addedChange: "addedChange", layerAddedChange: "layerAddedChange" }, decls: 14, vars: 14, consts: [["mat-list-avatar", "", "svgIcon", "chevron-up", "igoCollapse", "", 1, "igo-chevron", 3, "target", "collapsed", "toggle"], ["id", "catalog-group-title", "mat-line", "", "matTooltipShowDelay", "500", 1, "igo-catalog-group-title", 3, "matTooltip", "click"], ["disabled", "true", "mat-icon-button", "", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["notadded", ""], ["items", ""], ["ngFor", "", 3, "ngForOf"], ["disabled", "true", "mat-icon-button", ""], ["class", "igo-cataloggroup-external-icon", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 3, "matTooltip", "click", 4, "ngIf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 1, "igo-cataloggroup-external-icon", 3, "matTooltip", "click"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "disabled", "click"], ["svgIcon", "delete"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "disabled", "click"], ["svgIcon", "plus"], [4, "ngIf"], ["igoListItem", "", 3, "layer", "resolution", "catalogAllowLegend", "added", "addedLayerIsPreview", "addedChange"]], template: function CatalogBrowserGroupComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵelementStart(1, "mat-icon", 0);
                i0__namespace.ɵɵlistener("toggle", function CatalogBrowserGroupComponent_Template_mat_icon_toggle_1_listener($event) { return ctx.onToggleCollapsed($event); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(2, "h4", 1);
                i0__namespace.ɵɵlistener("click", function CatalogBrowserGroupComponent_Template_h4_click_2_listener() { return ctx.onTitleClick(); });
                i0__namespace.ɵɵtext(3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(4, CatalogBrowserGroupComponent_button_4_Template, 2, 1, "button", 2);
                i0__namespace.ɵɵtemplate(5, CatalogBrowserGroupComponent_ng_container_5_Template, 5, 6, "ng-container", 3);
                i0__namespace.ɵɵpipe(6, "async");
                i0__namespace.ɵɵpipe(7, "async");
                i0__namespace.ɵɵtemplate(8, CatalogBrowserGroupComponent_ng_template_8_Template, 4, 6, "ng-template", null, 4, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(10, "div", null, 5);
                i0__namespace.ɵɵtemplate(12, CatalogBrowserGroupComponent_ng_template_12_Template, 2, 2, "ng-template", 6);
                i0__namespace.ɵɵpipe(13, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r2 = i0__namespace.ɵɵreference(9);
                var _r4 = i0__namespace.ɵɵreference(11);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("target", _r4)("collapsed", ctx.collapsed);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.title);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(ctx.title);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.group.externalProvider);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(6, 8, ctx.added$) && i0__namespace.ɵɵpipeBind1(7, 10, ctx.preview$) === false)("ngIfElse", _r2);
                i0__namespace.ɵɵadvance(7);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(13, 12, ctx.store.view.all$()));
            }
        }, directives: [i1__namespace$3.MatListItem, i4__namespace.MatIcon, i1__namespace$3.MatListAvatarCssMatStyler, i6__namespace.CollapseDirective, i9__namespace.MatLine, i3__namespace.MatTooltip, i1__namespace$1.NgIf, i1__namespace$1.NgForOf, i2__namespace.MatButton, CatalogBrowserLayerComponent, i6__namespace.ListItemDirective], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: [".igo-catalog-group-title[_ngcontent-%COMP%]{cursor:pointer;opacity:.9}#catalog-group-title[_ngcontent-%COMP%]{font-weight:bold}.igo-cataloggroup-external-icon[_ngcontent-%COMP%]{cursor:help}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogBrowserGroupComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-catalog-browser-group',
                        templateUrl: './catalog-browser-group.component.html',
                        styleUrls: ['./catalog-browser-group.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], null, { catalog: [{
                    type: i0.Input
                }], group: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], resolution: [{
                    type: i0.Input
                }], catalogAllowLegend: [{
                    type: i0.Input
                }], toggleCollapsed: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], addedChange: [{
                    type: i0.Output
                }], layerAddedChange: [{
                    type: i0.Output
                }] });
    })();

    var LayerListToolService = /** @class */ (function () {
        function LayerListToolService() {
            this.sortAlpha = false;
            this.onlyVisible = false;
            this.onlyInRange = false;
            this.keywordInitialized = false;
            this.sortedAlphaInitialized = false;
            this.onlyVisibleInitialized = false;
            this.onlyInRangeInitialized = false;
        }
        return LayerListToolService;
    }());
    LayerListToolService.ɵfac = function LayerListToolService_Factory(t) { return new (t || LayerListToolService)(); };
    LayerListToolService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: LayerListToolService, factory: LayerListToolService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerListToolService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return []; }, null);
    })();

    function LayerItemComponent_mat_checkbox_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-checkbox", 9);
            i0__namespace.ɵɵlistener("change", function LayerItemComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener() { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.check(); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r0.layerCheck);
        }
    }
    var _c0$e = function (a0) { return { disabled: a0 }; };
    function LayerItemComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵlistener("click", function LayerItemComponent_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.toggleVisibility(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 11);
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵpipe(5, "async");
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("color", ctx_r1.layer.visible ? "primary" : "default")("matTooltip", ctx_r1.layer.visible ? i0__namespace.ɵɵpipeBind1(1, 5, "igo.geo.layer.hideLayer") : i0__namespace.ɵɵpipeBind1(2, 7, "igo.geo.layer.showLayer"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadgeHidden", i0__namespace.ɵɵpipeBind1(4, 9, ctx_r1.queryBadgeHidden$))("ngClass", i0__namespace.ɵɵpureFunction1(15, _c0$e, i0__namespace.ɵɵpipeBind1(5, 11, ctx_r1.inResolutionRange$) === false))("svgIcon", i0__namespace.ɵɵpipeBind1(6, 13, ctx_r1.layer.visible$) ? "eye" : "eye-off");
        }
    }
    function LayerItemComponent_button_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 12);
            i0__namespace.ɵɵlistener("click", function LayerItemComponent_button_5_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.toggleVisibility(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 11);
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵpipe(5, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("color", ctx_r2.layer.visible ? "primary" : "default")("matTooltip", ctx_r2.layer.visible ? i0__namespace.ɵɵpipeBind1(1, 5, "igo.geo.layer.hideLayer") : i0__namespace.ɵɵpipeBind1(2, 7, "igo.geo.layer.showLayer"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadgeHidden", i0__namespace.ɵɵpipeBind1(4, 9, ctx_r2.queryBadgeHidden$))("ngClass", i0__namespace.ɵɵpureFunction1(13, _c0$e, i0__namespace.ɵɵpipeBind1(5, 11, ctx_r2.inResolutionRange$) === false))("svgIcon", ctx_r2.layer.visible ? "eye" : "eye-off");
        }
    }
    function LayerItemComponent_button_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 13);
            i0__namespace.ɵɵlistener("click", function LayerItemComponent_button_6_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r12 = i0__namespace.ɵɵnextContext(); return ctx_r12.toggleLayerTool(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 14);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.layer.moreOptions"));
        }
    }
    function LayerItemComponent_igo_layer_legend_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-layer-legend", 15);
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layer", ctx_r5.layer)("updateLegendOnResolutionChange", ctx_r5.updateLegendOnResolutionChange);
        }
    }
    var LayerItemComponent = /** @class */ (function () {
        function LayerItemComponent(networkService, renderer, elRef, cdRef) {
            this.networkService = networkService;
            this.renderer = renderer;
            this.elRef = elRef;
            this.cdRef = cdRef;
            this.focusedCls = 'igo-layer-item-focused';
            this.layerTool$ = new rxjs.BehaviorSubject(false);
            this.showLegend$ = new rxjs.BehaviorSubject(true);
            this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            this.queryBadgeHidden$ = new rxjs.BehaviorSubject(true);
            this._selectAll = false;
            this.layers$ = new rxjs.BehaviorSubject(undefined);
            this.toggleLegendOnVisibilityChange = false;
            this.expandLegendIfVisible = false;
            this.updateLegendOnResolutionChange = false;
            this.orderable = true;
            this.lowerDisabled = false;
            this.raiseDisabled = false;
            this.queryBadge = false;
            this.action = new i0.EventEmitter(undefined);
            this.checkbox = new i0.EventEmitter();
        }
        Object.defineProperty(LayerItemComponent.prototype, "activeLayer", {
            get: function () {
                return this._activeLayer;
            },
            set: function (value) {
                if (value && this.layer && value.id === this.layer.id && !this.selectionMode) {
                    this.layerTool$.next(true);
                    this.renderer.addClass(this.elRef.nativeElement, this.focusedCls);
                }
                else {
                    this.renderer.removeClass(this.elRef.nativeElement, this.focusedCls);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerItemComponent.prototype, "selectAll", {
            get: function () {
                return this._selectAll;
            },
            set: function (value) {
                this._selectAll = value;
                if (value === true) {
                    this.layerCheck = true;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerItemComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
                this.layers$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerItemComponent.prototype, "opacity", {
            get: function () {
                return this.layer.opacity * 100;
            },
            set: function (opacity) {
                this.layer.opacity = opacity / 100;
            },
            enumerable: false,
            configurable: true
        });
        LayerItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.layer.visible &&
                this.expandLegendIfVisible &&
                this.layer.firstLoadComponent === true) {
                this.layer.firstLoadComponent = false;
                this.layer.legendCollapsed = false;
            }
            this.toggleLegend(this.layer.legendCollapsed);
            this.updateQueryBadge();
            var resolution$ = this.layer.map.viewController.resolution$;
            this.resolution$$ = resolution$.subscribe(function () {
                _this.onResolutionChange();
            });
            this.tooltipText = this.computeTooltip();
            this.network$$ = this.networkService.currentState().subscribe(function (state) {
                _this.state = state;
                _this.onResolutionChange();
            });
            this.layers$$ = this.layers$.subscribe(function () {
                if (_this.layer && _this.layer.options.active) {
                    _this.layerTool$.next(true);
                    _this.renderer.addClass(_this.elRef.nativeElement, _this.focusedCls);
                }
            });
            if (this.changeDetection) {
                this.changeDetection.subscribe(function () { return _this.cdRef.detectChanges(); });
            }
        };
        LayerItemComponent.prototype.ngOnDestroy = function () {
            this.resolution$$.unsubscribe();
            this.network$$.unsubscribe();
            this.layers$$.unsubscribe();
        };
        LayerItemComponent.prototype.toggleLegend = function (collapsed) {
            this.layer.legendCollapsed = collapsed;
            this.showLegend$.next(!collapsed);
        };
        LayerItemComponent.prototype.toggleLegendOnClick = function () {
            this.toggleLegend(this.showLegend$.value);
        };
        LayerItemComponent.prototype.toggleVisibility = function () {
            this.layer.visible = !this.layer.visible;
            if (this.toggleLegendOnVisibilityChange) {
                this.toggleLegend(!this.layer.visible);
            }
            this.updateQueryBadge();
        };
        LayerItemComponent.prototype.computeTooltip = function () {
            var layerOptions = this.layer.options;
            if (!layerOptions.tooltip) {
                return this.layer.title;
            }
            var layerTooltip = layerOptions.tooltip;
            var layerMetadata = layerOptions.metadata;
            switch (layerOptions.tooltip.type) {
                case exports.TooltipType.TITLE:
                    return this.layer.title;
                case exports.TooltipType.ABSTRACT:
                    if (layerMetadata && layerMetadata.abstract) {
                        return layerMetadata.abstract;
                    }
                    else {
                        return this.layer.title;
                    }
                case exports.TooltipType.CUSTOM:
                    if (layerTooltip && layerTooltip.text) {
                        return layerTooltip.text;
                    }
                    else {
                        return this.layer.title;
                    }
                default:
                    return this.layer.title;
            }
        };
        LayerItemComponent.prototype.onResolutionChange = function () {
            var inResolutionRange = this.layer.isInResolutionsRange;
            if (inResolutionRange === false &&
                this.updateLegendOnResolutionChange === true) {
                this.toggleLegend(true);
            }
            this.inResolutionRange$.next(inResolutionRange);
        };
        LayerItemComponent.prototype.updateQueryBadge = function () {
            var hidden = this.queryBadge === false ||
                this.layer.visible === false ||
                !layerIsQueryable(this.layer);
            this.queryBadgeHidden$.next(hidden);
        };
        LayerItemComponent.prototype.toggleLayerTool = function () {
            this.layerTool$.next(!this.layerTool$.getValue());
            if (this.layerTool$.getValue() === true) {
                this.renderer.addClass(this.elRef.nativeElement, this.focusedCls);
            }
            else {
                this.renderer.removeClass(this.elRef.nativeElement, this.focusedCls);
            }
            this.action.emit(this.layer);
        };
        LayerItemComponent.prototype.check = function () {
            this.layerCheck = !this.layerCheck;
            this.checkbox.emit({ layer: this.layer, check: this.layerCheck });
        };
        return LayerItemComponent;
    }());
    LayerItemComponent.ɵfac = function LayerItemComponent_Factory(t) { return new (t || LayerItemComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.NetworkService), i0__namespace.ɵɵdirectiveInject(i0__namespace.Renderer2), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    LayerItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerItemComponent, selectors: [["igo-layer-item"]], inputs: { activeLayer: "activeLayer", selectAll: "selectAll", layerCheck: "layerCheck", layer: "layer", toggleLegendOnVisibilityChange: "toggleLegendOnVisibilityChange", expandLegendIfVisible: "expandLegendIfVisible", updateLegendOnResolutionChange: "updateLegendOnResolutionChange", orderable: "orderable", lowerDisabled: "lowerDisabled", raiseDisabled: "raiseDisabled", queryBadge: "queryBadge", selectionMode: "selectionMode", changeDetection: "changeDetection" }, outputs: { action: "action", checkbox: "checkbox" }, decls: 11, vars: 9, consts: [[1, "igo-layer-list-item"], ["class", "layerCheck", "mat-list-icon", "", 3, "checked", "change", 4, "ngIf"], ["matLine", "", "matTooltipShowDelay", "500", 1, "igo-layer-title", 3, "matTooltip", "click"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click", 4, "ngIf"], ["class", "selection-eye", "mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click", 4, "ngIf"], ["class", "actions-button", "tooltip-position", "below", "matTooltipShowDelay", "500", "mat-icon-button", "", "color", "primary", 3, "matTooltip", "click", 4, "ngIf"], [1, "igo-layer-legend-container"], ["legend", ""], [3, "layer", "updateLegendOnResolutionChange", 4, "ngIf"], ["mat-list-icon", "", 1, "layerCheck", 3, "checked", "change"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click"], ["matBadge", "?", "matBadgeColor", "accent", "matBadgeSize", "small", "matBadgePosition", "after", 3, "matBadgeHidden", "ngClass", "svgIcon"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "selection-eye", 3, "color", "matTooltip", "click"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "mat-icon-button", "", "color", "primary", 1, "actions-button", 3, "matTooltip", "click"], ["svgIcon", "dots-horizontal"], [3, "layer", "updateLegendOnResolutionChange"]], template: function LayerItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item", 0);
                i0__namespace.ɵɵtemplate(1, LayerItemComponent_mat_checkbox_1_Template, 1, 1, "mat-checkbox", 1);
                i0__namespace.ɵɵelementStart(2, "h4", 2);
                i0__namespace.ɵɵlistener("click", function LayerItemComponent_Template_h4_click_2_listener() { return ctx.toggleLegendOnClick(); });
                i0__namespace.ɵɵtext(3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(4, LayerItemComponent_button_4_Template, 7, 17, "button", 3);
                i0__namespace.ɵɵtemplate(5, LayerItemComponent_button_5_Template, 6, 15, "button", 4);
                i0__namespace.ɵɵtemplate(6, LayerItemComponent_button_6_Template, 3, 3, "button", 5);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(7, "div", 6, 7);
                i0__namespace.ɵɵtemplate(9, LayerItemComponent_igo_layer_legend_9_Template, 1, 2, "igo-layer-legend", 8);
                i0__namespace.ɵɵpipe(10, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.selectionMode);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.tooltipText);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(ctx.layer.title);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.selectionMode);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.selectionMode);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.selectionMode);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(10, 7, ctx.showLegend$));
            }
        }, styles: ["[_nghost-%COMP%]{overflow:hidden}mat-list-item[_ngcontent-%COMP%]     .mat-list-item-content .layerCheck{align-self:baseline;width:16px;padding-right:0}.igo-layer-list-item[_ngcontent-%COMP%]{height:46px;clear:both}.igo-layer-title[_ngcontent-%COMP%]{cursor:pointer}.igo-layer-legend-container[_ngcontent-%COMP%]{padding-left:18px;width:calc(100% - 18px)}mat-icon.disabled[_ngcontent-%COMP%]{color:#00000061}mat-icon[matBadge][_ngcontent-%COMP%]     .mat-badge-content{font-size:12px}.selection-eye[_ngcontent-%COMP%]{padding-right:45px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-item',
                        templateUrl: './layer-item.component.html',
                        styleUrls: ['./layer-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i2__namespace$1.NetworkService }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, { activeLayer: [{
                    type: i0.Input
                }], selectAll: [{
                    type: i0.Input
                }], layerCheck: [{
                    type: i0.Input
                }], layer: [{
                    type: i0.Input
                }], toggleLegendOnVisibilityChange: [{
                    type: i0.Input
                }], expandLegendIfVisible: [{
                    type: i0.Input
                }], updateLegendOnResolutionChange: [{
                    type: i0.Input
                }], orderable: [{
                    type: i0.Input
                }], lowerDisabled: [{
                    type: i0.Input
                }], raiseDisabled: [{
                    type: i0.Input
                }], queryBadge: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], changeDetection: [{
                    type: i0.Input
                }], action: [{
                    type: i0.Output
                }], checkbox: [{
                    type: i0.Output
                }] });
    })();

    exports.LayerListControlsEnum = void 0;
    (function (LayerListControlsEnum) {
        LayerListControlsEnum["always"] = "always";
        LayerListControlsEnum["never"] = "never";
        LayerListControlsEnum["default"] = "default";
    })(exports.LayerListControlsEnum || (exports.LayerListControlsEnum = {}));
    exports.LayerListSelectVisibleEnum = void 0;
    (function (LayerListSelectVisibleEnum) {
        LayerListSelectVisibleEnum["ALL_VISIBLE"] = "ALL_VISIBLE";
        LayerListSelectVisibleEnum["ALL_HIDDEN"] = "ALL_HIDDEN";
        LayerListSelectVisibleEnum["MIXED"] = "MIXED";
        LayerListSelectVisibleEnum["NULL"] = "NULL";
    })(exports.LayerListSelectVisibleEnum || (exports.LayerListSelectVisibleEnum = {}));
    exports.LayerListDisplacement = void 0;
    (function (LayerListDisplacement) {
        LayerListDisplacement["Raise"] = "raise";
        LayerListDisplacement["Lower"] = "lower";
    })(exports.LayerListDisplacement || (exports.LayerListDisplacement = {}));

    var _c0$d = ["igoLayerItemToolbar"];
    function LayerListComponent_igo_layer_list_tool_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-layer-list-tool", 6);
            i0__namespace.ɵɵlistener("appliedFilterAndSort", function LayerListComponent_igo_layer_list_tool_1_Template_igo_layer_list_tool_appliedFilterAndSort_0_listener($event) { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.onAppliedFilterAndSortChange($event); })("selection", function LayerListComponent_igo_layer_list_tool_1_Template_igo_layer_list_tool_selection_0_listener($event) { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.toggleSelectionMode($event); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layersAreAllVisible", ctx_r0.layersAreAllVisible)("term", ctx_r0.layerFilterAndSortOptions.keyword)("onlyVisible", ctx_r0.layerFilterAndSortOptions.onlyVisible)("sortAlpha", ctx_r0.layerFilterAndSortOptions.sortAlpha);
        }
    }
    function LayerListComponent_mat_list_item_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r10_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-list-item", 7);
            i0__namespace.ɵɵelementStart(1, "mat-checkbox", 8);
            i0__namespace.ɵɵlistener("change", function LayerListComponent_mat_list_item_3_Template_mat_checkbox_change_1_listener() { i0__namespace.ɵɵrestoreView(_r10_1); var ctx_r9 = i0__namespace.ɵɵnextContext(); return ctx_r9.selectAll(); });
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("color", !ctx_r1.selectAllCheck && ctx_r1.layersChecked.length > 0 ? "accent" : "primary")("checked", ctx_r1.selectAllCheck)("indeterminate", !ctx_r1.selectAllCheck && ctx_r1.layersChecked.length > 0);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", ctx_r1.selectAllCheck ? i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.layer.deselectAll") : i0__namespace.ɵɵpipeBind1(4, 6, "igo.geo.layer.selectAll"), " ");
        }
    }
    function LayerListComponent_ng_template_7_igo_layer_item_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r15_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-layer-item", 10);
            i0__namespace.ɵɵlistener("action", function LayerListComponent_ng_template_7_igo_layer_item_0_Template_igo_layer_item_action_0_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var ctx_r14 = i0__namespace.ɵɵnextContext(2); return ctx_r14.toggleLayerTool($event); })("checkbox", function LayerListComponent_ng_template_7_igo_layer_item_0_Template_igo_layer_item_checkbox_0_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var ctx_r16 = i0__namespace.ɵɵnextContext(2); return ctx_r16.layersCheck($event); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var layer_r11 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r13 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layer", layer_r11)("activeLayer", ctx_r13.activeLayer)("orderable", ctx_r13.orderable && !layer_r11.baseLayer)("lowerDisabled", ctx_r13.getLowerLayer().id === layer_r11.id)("raiseDisabled", ctx_r13.getUpperLayer().id === layer_r11.id)("queryBadge", ctx_r13.queryBadge)("expandLegendIfVisible", ctx_r13.expandLegendOfVisibleLayers)("updateLegendOnResolutionChange", ctx_r13.updateLegendOnResolutionChange)("toggleLegendOnVisibilityChange", ctx_r13.toggleLegendOnVisibilityChange)("selectionMode", ctx_r13.selection)("selectAll", ctx_r13.selectAllCheck)("layerCheck", layer_r11.options.check)("changeDetection", ctx_r13.layerItemChangeDetection$);
        }
    }
    function LayerListComponent_ng_template_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, LayerListComponent_ng_template_7_igo_layer_item_0_Template, 1, 13, "igo-layer-item", 9);
        }
        if (rf & 2) {
            var layer_r11 = ctx.$implicit;
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngIf", !(ctx_r3.excludeBaseLayers && layer_r11.baseLayer));
        }
    }
    function LayerListComponent_igo_panel_9_button_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r22_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 26);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_9_button_2_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r22_1); var ctx_r21 = i0__namespace.ɵɵnextContext(2); return ctx_r21.removeLayers(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 27);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.layer.removeLayer"));
        }
    }
    function LayerListComponent_igo_panel_9_button_19_Template(rf, ctx) {
        if (rf & 1) {
            var _r24_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 28);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_9_button_19_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r24_1); var ctx_r23 = i0__namespace.ɵɵnextContext(2); return ctx_r23.zoomLayerExtents(ctx_r23.activeLayer); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 29);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.layer.zoomLayer"));
        }
    }
    var _c1$b = function (a0) { return { layer: a0 }; };
    function LayerListComponent_igo_panel_9_Template(rf, ctx) {
        if (rf & 1) {
            var _r26_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-panel", 11);
            i0__namespace.ɵɵelementStart(1, "div", 12);
            i0__namespace.ɵɵtemplate(2, LayerListComponent_igo_panel_9_button_2_Template, 3, 3, "button", 13);
            i0__namespace.ɵɵelementStart(3, "button", 14);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_9_Template_button_click_3_listener() { i0__namespace.ɵɵrestoreView(_r26_1); var ctx_r25 = i0__namespace.ɵɵnextContext(); return ctx_r25.moveActiveLayer(ctx_r25.activeLayer, ctx_r25.layerListDisplacement.Lower); });
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelement(6, "mat-icon", 15);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(7, "button", 16);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_9_Template_button_click_7_listener() { i0__namespace.ɵɵrestoreView(_r26_1); var ctx_r27 = i0__namespace.ɵɵnextContext(); return ctx_r27.moveActiveLayer(ctx_r27.activeLayer, ctx_r27.layerListDisplacement.Raise); });
            i0__namespace.ɵɵpipe(8, "translate");
            i0__namespace.ɵɵpipe(9, "translate");
            i0__namespace.ɵɵelement(10, "mat-icon", 17);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "button", 18);
            i0__namespace.ɵɵpipe(12, "translate");
            i0__namespace.ɵɵelement(13, "mat-icon", 19);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(14, "mat-menu", 20, 21);
            i0__namespace.ɵɵelementStart(16, "div", 22);
            i0__namespace.ɵɵelementStart(17, "mat-slider", 23);
            i0__namespace.ɵɵlistener("input", function LayerListComponent_igo_panel_9_Template_mat_slider_input_17_listener($event) { i0__namespace.ɵɵrestoreView(_r26_1); var ctx_r28 = i0__namespace.ɵɵnextContext(); return ctx_r28.changeOpacity($event); })("click", function LayerListComponent_igo_panel_9_Template_mat_slider_click_17_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(18, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(19, LayerListComponent_igo_panel_9_button_19_Template, 3, 3, "button", 24);
            i0__namespace.ɵɵelementContainer(20, 25);
            i0__namespace.ɵɵprojection(21);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r19 = i0__namespace.ɵɵreference(15);
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("title", ctx_r4.activeLayer.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r4.isLayerRemovable(ctx_r4.activeLayer));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r4.sortAlpha || ctx_r4.onlyVisible || ctx_r4.keyword ? i0__namespace.ɵɵpipeBind1(4, 20, "igo.geo.layer.filterLowerLayer") : i0__namespace.ɵɵpipeBind1(5, 22, "igo.geo.layer.lowerLayer"))("disabled", ctx_r4.lowerDisabled);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadge", ctx_r4.sortAlpha || ctx_r4.onlyVisible || ctx_r4.keyword ? "!" : "")("matBadgeHidden", ctx_r4.lowerDisabled);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r4.sortAlpha || ctx_r4.onlyVisible || ctx_r4.keyword ? i0__namespace.ɵɵpipeBind1(8, 24, "igo.geo.layer.filterRaiseLayer") : i0__namespace.ɵɵpipeBind1(9, 26, "igo.geo.layer.raiseLayer"))("disabled", ctx_r4.raiseDisabled);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadge", ctx_r4.sortAlpha || ctx_r4.onlyVisible || ctx_r4.keyword ? "!" : "")("matBadgeHidden", ctx_r4.raiseDisabled);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matMenuTriggerFor", _r19)("matTooltip", i0__namespace.ɵɵpipeBind1(12, 28, "igo.geo.layer.opacity"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matBadge", ctx_r4.badgeOpacity);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("min", 0)("max", 100)("value", ctx_r4.opacity)("matTooltip", i0__namespace.ɵɵpipeBind1(18, 30, "igo.geo.layer.opacity"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r4.activeLayerIsValid(ctx_r4.activeLayer));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r4.templateLayerToolbar)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(32, _c1$b, ctx_r4.activeLayer));
        }
    }
    function LayerListComponent_igo_panel_10_mat_slider_25_Template(rf, ctx) {
        if (rf & 1) {
            var _r34_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slider", 38);
            i0__namespace.ɵɵlistener("ngModelChange", function LayerListComponent_igo_panel_10_mat_slider_25_Template_mat_slider_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r34_1); var ctx_r33 = i0__namespace.ɵɵnextContext(2); return ctx_r33.checkOpacity = $event; })("click", function LayerListComponent_igo_panel_10_mat_slider_25_Template_mat_slider_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r31 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("min", 0)("max", 100)("ngModel", ctx_r31.checkOpacity)("matTooltip", i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.layer.opacity"));
        }
    }
    function LayerListComponent_igo_panel_10_button_26_Template(rf, ctx) {
        if (rf & 1) {
            var _r37_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 28);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_10_button_26_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r36 = i0__namespace.ɵɵnextContext(2); return ctx_r36.zoomLayersExtents(ctx_r36.layersChecked); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 39);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.layer.zoomLayers"));
        }
    }
    function LayerListComponent_igo_panel_10_Template(rf, ctx) {
        if (rf & 1) {
            var _r39_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-panel", 11);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementStart(2, "div", 30);
            i0__namespace.ɵɵelementStart(3, "button", 31);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_10_Template_button_click_3_listener() { i0__namespace.ɵɵrestoreView(_r39_1); var ctx_r38 = i0__namespace.ɵɵnextContext(); return ctx_r38.removeLayers(ctx_r38.layersChecked); });
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelement(6, "mat-icon", 32);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(7, "button", 33);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_10_Template_button_click_7_listener() { i0__namespace.ɵɵrestoreView(_r39_1); var ctx_r40 = i0__namespace.ɵɵnextContext(); return ctx_r40.toggleVisibility(ctx_r40.layersChecked); });
            i0__namespace.ɵɵpipe(8, "translate");
            i0__namespace.ɵɵpipe(9, "translate");
            i0__namespace.ɵɵelement(10, "mat-icon", 34);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "button", 14);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_10_Template_button_click_11_listener() { i0__namespace.ɵɵrestoreView(_r39_1); var ctx_r41 = i0__namespace.ɵɵnextContext(); return ctx_r41.lowerLayers(ctx_r41.layersChecked); });
            i0__namespace.ɵɵpipe(12, "translate");
            i0__namespace.ɵɵpipe(13, "translate");
            i0__namespace.ɵɵelement(14, "mat-icon", 15);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(15, "button", 16);
            i0__namespace.ɵɵlistener("click", function LayerListComponent_igo_panel_10_Template_button_click_15_listener() { i0__namespace.ɵɵrestoreView(_r39_1); var ctx_r42 = i0__namespace.ɵɵnextContext(); return ctx_r42.raiseLayers(ctx_r42.layersChecked); });
            i0__namespace.ɵɵpipe(16, "translate");
            i0__namespace.ɵɵpipe(17, "translate");
            i0__namespace.ɵɵelement(18, "mat-icon", 17);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(19, "button", 35);
            i0__namespace.ɵɵpipe(20, "translate");
            i0__namespace.ɵɵelement(21, "mat-icon", 36);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(22, "mat-menu", 20, 21);
            i0__namespace.ɵɵelementStart(24, "div", 22);
            i0__namespace.ɵɵtemplate(25, LayerListComponent_igo_panel_10_mat_slider_25_Template, 2, 6, "mat-slider", 37);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(26, LayerListComponent_igo_panel_10_button_26_Template, 3, 3, "button", 24);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r30 = i0__namespace.ɵɵreference(23);
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("title", i0__namespace.ɵɵpipeBind1(1, 21, "igo.geo.layer.tools"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("disabled", ctx_r5.layersChecked.length === 0)("matTooltip", ctx_r5.isAllLayersRemovable(ctx_r5.layersChecked) ? i0__namespace.ɵɵpipeBind1(4, 23, "igo.geo.layer.removeSelectedLayers") : i0__namespace.ɵɵpipeBind1(5, 25, "igo.geo.layer.removeSelectedLayersRestriction"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadge", "!")("matBadgeHidden", ctx_r5.isAllLayersRemovable(ctx_r5.layersChecked));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("disabled", ctx_r5.layersChecked.length === 0)("matTooltip", ctx_r5.statusSelectedLayersCheck === "ALL_HIDDEN" ? i0__namespace.ɵɵpipeBind1(8, 27, "igo.geo.layer.showSelectedLayers") : i0__namespace.ɵɵpipeBind1(9, 29, "igo.geo.layer.hideSelectedLayers"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("svgIcon", ctx_r5.statusSelectedLayersCheck === "ALL_HIDDEN" ? "eye-off" : "eye");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r5.sortAlpha || ctx_r5.onlyVisible || ctx_r5.keyword ? i0__namespace.ɵɵpipeBind1(12, 31, "igo.geo.layer.filterLowerLayer") : i0__namespace.ɵɵpipeBind1(13, 33, "igo.geo.layer.lowerLayer"))("disabled", ctx_r5.lowerDisabledSelection);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadge", ctx_r5.sortAlpha || ctx_r5.onlyVisible || ctx_r5.keyword ? "!" : "")("matBadgeHidden", ctx_r5.lowerDisabledSelection);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r5.sortAlpha || ctx_r5.onlyVisible || ctx_r5.keyword ? i0__namespace.ɵɵpipeBind1(16, 35, "igo.geo.layer.filterRaiseLayer") : i0__namespace.ɵɵpipeBind1(17, 37, "igo.geo.layer.raiseLayer"))("disabled", ctx_r5.raiseDisabledSelection);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matBadge", ctx_r5.sortAlpha || ctx_r5.onlyVisible || ctx_r5.keyword ? "!" : "")("matBadgeHidden", ctx_r5.raiseDisabledSelection);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("disabled", ctx_r5.layersChecked.length === 0)("matMenuTriggerFor", _r30)("matTooltip", i0__namespace.ɵɵpipeBind1(20, 39, "igo.geo.layer.opacity"));
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.layersChecked.length);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.layersChecked.length !== 0 && ctx_r5.activeLayersAreValid(ctx_r5.layersChecked));
        }
    }
    var _c2$5 = [[["", "igoLayerItemToolbar", ""]]];
    var _c3$2 = function (a0, a1, a2) { return { "igo-list-tools-multi": a0, "igo-list-tools-single": a1, "igo-list-no-tools": a2 }; };
    var _c4$1 = ["[igoLayerItemToolbar]"];
    // TODO: This class could use a clean up. Also, some methods could be moved ealsewhere
    var LayerListComponent = /** @class */ (function () {
        function LayerListComponent(elRef) {
            this.elRef = elRef;
            this.orderable = true;
            this.thresholdToFilterAndSort = 5;
            this.layers$ = new rxjs.BehaviorSubject([]);
            this.change$ = new rxjs.ReplaySubject(1);
            this.showToolbar$ = new rxjs.BehaviorSubject(false);
            this.hideSelectedLayers = true;
            this.activeLayer$ = new rxjs.BehaviorSubject(undefined);
            this.layersChecked = [];
            this.layerItemChangeDetection$ = new rxjs.BehaviorSubject(undefined);
            this.layersAreAllVisible = true;
            this.ogcButton = true;
            this.timeButton = true;
            this.floatLabel = 'auto';
            this.layerFilterAndSortOptions = {};
            this.excludeBaseLayers = false;
            this.toggleLegendOnVisibilityChange = false;
            this.expandLegendOfVisibleLayers = false;
            this.updateLegendOnResolutionChange = false;
            this.queryBadge = false;
            this.appliedFilterAndSort = new i0.EventEmitter();
            this._keyword = undefined;
            this._onlyVisible = false;
            this._sortedAlpha = false;
            this.toggleOpacity = false;
            this.selectAllCheck$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(LayerListComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "layers", {
            get: function () {
                return this._layers;
            },
            set: function (value) {
                this._layers = this.removeProblemLayerInList(value);
                this.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "activeLayer", {
            get: function () {
                return this._activeLayer;
            },
            set: function (value) {
                this._activeLayer = value;
                this.activeLayer$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "keyword", {
            get: function () {
                return this._keyword;
            },
            set: function (value) {
                this._keyword = value;
                this.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "onlyVisible", {
            get: function () {
                return this._onlyVisible;
            },
            set: function (value) {
                this._onlyVisible = value;
                this.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "sortAlpha", {
            get: function () {
                return this._sortedAlpha;
            },
            set: function (value) {
                this._sortedAlpha = value;
                this.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "opacity", {
            get: function () {
                return Math.round(this.activeLayer$.getValue().opacity * 100);
            },
            set: function (opacity) {
                this.activeLayer$.getValue().opacity = opacity / 100;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "badgeOpacity", {
            get: function () {
                if (this.opacity === 100) {
                    return;
                }
                return this.opacity;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "raiseDisabled", {
            get: function () {
                if (!this.orderable ||
                    this.activeLayer.baseLayer ||
                    this.getUpperLayer().id === this.activeLayer.id ||
                    this.isUpperBaselayer(this.activeLayer)) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "lowerDisabled", {
            get: function () {
                if (!this.orderable ||
                    this.activeLayer.baseLayer ||
                    this.getLowerLayer().id === this.activeLayer.id ||
                    this.isLowerBaselayer(this.activeLayer)) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "raiseDisabledSelection", {
            get: function () {
                if (this.layersChecked.length === 0 ||
                    !this.orderable ||
                    !this.raisableLayers(this.layersChecked) ||
                    this.selectAllCheck === true) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "lowerDisabledSelection", {
            get: function () {
                if (this.layersChecked.length === 0 ||
                    !this.orderable ||
                    !this.lowerableLayers(this.layersChecked) ||
                    this.selectAllCheck === true) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "checkOpacity", {
            get: function () {
                return this.layersCheckedOpacity() * 100;
            },
            set: function (opacity) {
                var e_1, _b;
                try {
                    for (var _c = __values(this.layersChecked), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var layer = _d.value;
                        layer.opacity = opacity / 100;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListComponent.prototype, "layerListDisplacement", {
            get: function () {
                return exports.LayerListDisplacement;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Subscribe to the search term stream and trigger researches
         * @internal
         */
        LayerListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.change$$ = this.change$
                .pipe(operators.debounce(function () {
                return _this.layers.length === 0 ? rxjs.EMPTY : rxjs.timer(50);
            }))
                .subscribe(function () {
                _this.showToolbar$.next(_this.computeShowToolbar());
                _this.layers$.next(_this.computeLayers(_this.layers.slice(0)));
                _this.appliedFilterAndSort.emit({
                    keyword: _this.keyword,
                    sortAlpha: _this.sortAlpha,
                    onlyVisible: _this.onlyVisible
                });
            });
            this.selectAllCheck$$ = this.selectAllCheck$.subscribe(function (value) {
                _this.selectAllCheck = value;
            });
            this.layers$$ = this.layers$.subscribe(function () {
                var e_2, _b;
                if (_this.layers) {
                    var checks = 0;
                    var _loop_1 = function (layer) {
                        layer.status$.subscribe(function (valStatus) {
                            if (valStatus === 0) {
                                _this.map.removeLayer(layer);
                            }
                        });
                        if (layer.options.active) {
                            _this.activeLayer = layer;
                            _this.layerTool = true;
                        }
                        if (layer.options.check) {
                            checks += 1;
                        }
                    };
                    try {
                        for (var _c = __values(_this.layers), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var layer = _d.value;
                            _loop_1(layer);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (_this.excludeBaseLayers) {
                        _this.selectAllCheck =
                            checks ===
                                _this.layers.filter(function (lay) { return lay.baseLayer !== true && lay.showInLayerList; }).length
                                ? true
                                : false;
                    }
                    else {
                        _this.selectAllCheck =
                            checks === _this.layers.filter(function (lay) { return lay.showInLayerList; }).length
                                ? true
                                : false;
                    }
                }
            });
        };
        LayerListComponent.prototype.ngOnDestroy = function () {
            this.change$$.unsubscribe();
            this.selectAllCheck$$.unsubscribe();
            this.layers$$.unsubscribe();
        };
        LayerListComponent.prototype.activeLayerIsValid = function (layer) {
            var valid = false;
            var layerExtent = layer.options.extent;
            var maxLayerZoomExtent = this.map.viewController.maxLayerZoomExtent;
            if (layerExtent) {
                if (maxLayerZoomExtent) {
                    valid = olextent__namespace.containsExtent(maxLayerZoomExtent, layerExtent);
                }
                else {
                    valid = true;
                }
            }
            return valid;
        };
        LayerListComponent.prototype.activeLayersAreValid = function (layers) {
            var e_3, _b;
            var valid = false;
            var layersExtent = olextent__namespace.createEmpty();
            var maxLayerZoomExtent = this.map.viewController.maxLayerZoomExtent;
            try {
                for (var layers_1 = __values(layers), layers_1_1 = layers_1.next(); !layers_1_1.done; layers_1_1 = layers_1.next()) {
                    var layer = layers_1_1.value;
                    var layerExtent = layer.options.extent;
                    if (layerExtent && !layerExtent.includes(Infinity)) {
                        olextent__namespace.extend(layersExtent, layerExtent);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (layers_1_1 && !layers_1_1.done && (_b = layers_1.return)) _b.call(layers_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (!olextent__namespace.isEmpty(layersExtent)) {
                if (maxLayerZoomExtent) {
                    valid = (olextent__namespace.containsExtent(maxLayerZoomExtent, layersExtent));
                }
                else {
                    valid = true;
                }
            }
            return valid;
        };
        LayerListComponent.prototype.zoomLayerExtents = function (layer) {
            this.map.viewController.zoomToExtent(layer.options.extent);
        };
        LayerListComponent.prototype.zoomLayersExtents = function (layers) {
            var e_4, _b;
            var layersExtent = olextent__namespace.createEmpty();
            try {
                for (var layers_2 = __values(layers), layers_2_1 = layers_2.next(); !layers_2_1.done; layers_2_1 = layers_2.next()) {
                    var layer = layers_2_1.value;
                    var layerExtent = layer.options.extent;
                    if (layerExtent) {
                        olextent__namespace.extend(layersExtent, layerExtent);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (layers_2_1 && !layers_2_1.done && (_b = layers_2.return)) _b.call(layers_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.map.viewController.zoomToExtent(layersExtent);
        };
        LayerListComponent.prototype.changeOpacity = function (event) {
            this.opacity = event.value;
        };
        LayerListComponent.prototype.clearKeyword = function () {
            this.keyword = undefined;
        };
        LayerListComponent.prototype.getLowerLayer = function () {
            return this.layers
                .filter(function (l) { return !l.baseLayer; })
                .reduce(function (prev, current) {
                return prev.zIndex < current.zIndex ? prev : current;
            }, { zIndex: undefined, id: undefined });
        };
        LayerListComponent.prototype.isLowerBaselayer = function (layer) {
            var index = this.layers.findIndex(function (lay) { return layer.id === lay.id; });
            if (this.layers &&
                this.layers[index + 1] &&
                this.layers[index + 1].baseLayer === true) {
                return true;
            }
            return false;
        };
        LayerListComponent.prototype.getUpperLayer = function () {
            return this.layers
                .filter(function (l) { return !l.baseLayer; })
                .reduce(function (prev, current) {
                return prev.zIndex > current.zIndex ? prev : current;
            }, { zIndex: undefined, id: undefined });
        };
        LayerListComponent.prototype.isUpperBaselayer = function (layer) {
            var index = this.layers.findIndex(function (lay) { return layer.id === lay.id; });
            if (this.layers &&
                this.layers[index - 1] &&
                this.layers[index - 1].baseLayer === true) {
                return true;
            }
            return false;
        };
        LayerListComponent.prototype.moveActiveLayer = function (activeLayer, actiontype) {
            var layersToMove = [activeLayer];
            var sortedLayersToMove = [];
            this.getLinkedLayers(activeLayer, layersToMove);
            this.layers.map(function (layer) {
                if (layersToMove.indexOf(layer) !== -1) {
                    sortedLayersToMove.push(layer);
                }
            });
            if (actiontype === exports.LayerListDisplacement.Raise) {
                this.raiseLayers(sortedLayersToMove, false);
            }
            else if (actiontype === exports.LayerListDisplacement.Lower) {
                this.lowerLayers(sortedLayersToMove, false);
            }
        };
        LayerListComponent.prototype.getLinkedLayers = function (activeLayer, layersList) {
            var _this = this;
            var linkedLayers = activeLayer.options.linkedLayers;
            if (!linkedLayers) {
                return;
            }
            var currentLinkedId = linkedLayers.linkId;
            var currentLinks = linkedLayers.links;
            var isParentLayer = currentLinks ? true : false;
            if (isParentLayer) {
                // search for child layers
                currentLinks.map(function (link) {
                    if (!link.properties || link.properties.indexOf(exports.LinkedProperties.ZINDEX) === -1) {
                        return;
                    }
                    link.linkedIds.map(function (linkedId) {
                        var childLayer = _this.layers.find(function (layer) { var _a; return ((_a = layer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId) === linkedId; });
                        if (childLayer) {
                            if (!layersList.includes(childLayer)) {
                                layersList.push(childLayer);
                            }
                        }
                    });
                });
            }
            else {
                // search for parent layer
                this.layers.map(function (parentLayer) {
                    var _a;
                    if ((_a = parentLayer.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.links) {
                        parentLayer.options.linkedLayers.links.map(function (l) {
                            var _a;
                            if (((_a = l.properties) === null || _a === void 0 ? void 0 : _a.indexOf(exports.LinkedProperties.ZINDEX)) !== -1 &&
                                l.bidirectionnal !== false &&
                                l.linkedIds.indexOf(currentLinkedId) !== -1) {
                                layersList.push(parentLayer);
                                _this.getLinkedLayers(parentLayer, layersList);
                            }
                        });
                    }
                });
            }
        };
        /*
         * For selection mode disabled attribute
         */
        LayerListComponent.prototype.raisableLayers = function (layers) {
            var e_5, _b;
            var response = false;
            var base = 0;
            var _loop_2 = function (layer) {
                var mapIndex = this_1.layers.findIndex(function (lay) { return layer.id === lay.id; });
                var currentLayer = this_1.layers[mapIndex];
                if (currentLayer.baseLayer) {
                    base += 1;
                }
                var previousLayer = this_1.layers[mapIndex - 1];
                if (previousLayer &&
                    previousLayer.baseLayer !== true &&
                    !layers.find(function (lay) { return previousLayer.id === lay.id; }) &&
                    currentLayer.baseLayer !== true) {
                    response = true;
                }
            };
            var this_1 = this;
            try {
                for (var layers_3 = __values(layers), layers_3_1 = layers_3.next(); !layers_3_1.done; layers_3_1 = layers_3.next()) {
                    var layer = layers_3_1.value;
                    _loop_2(layer);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (layers_3_1 && !layers_3_1.done && (_b = layers_3.return)) _b.call(layers_3);
                }
                finally { if (e_5) throw e_5.error; }
            }
            if ((this.layersChecked.length === 1 && this.layersChecked[0].baseLayer) ||
                base === this.layersChecked.length) {
                response = false;
            }
            return response;
        };
        /*
         * When multiple layers is selected but some may be allow to move
         */
        LayerListComponent.prototype.raisableLayer = function (index) {
            if (index < 1) {
                return false;
            }
            if (this.layers[index - 1].options.check) {
                return this.raisableLayer(index - 1);
            }
            return true;
        };
        LayerListComponent.prototype.raiseLayers = function (layers, fromUi) {
            var e_6, _b;
            var _this = this;
            if (fromUi === void 0) { fromUi = true; }
            var layersToRaise = [];
            var _loop_3 = function (layer) {
                var index = this_2.layers.findIndex(function (lay) { return lay.id === layer.id; });
                if (this_2.raisableLayer(index)) {
                    layersToRaise.push(layer);
                }
            };
            var this_2 = this;
            try {
                for (var layers_4 = __values(layers), layers_4_1 = layers_4.next(); !layers_4_1.done; layers_4_1 = layers_4.next()) {
                    var layer = layers_4_1.value;
                    _loop_3(layer);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (layers_4_1 && !layers_4_1.done && (_b = layers_4.return)) _b.call(layers_4);
                }
                finally { if (e_6) throw e_6.error; }
            }
            this.map.raiseLayers(layersToRaise);
            if (fromUi) {
                setTimeout(function () {
                    var elements = _this.computeElementRef();
                    if (!_this.isScrolledIntoView(elements[0], elements[1].offsetParent)) {
                        elements[0].scrollTop = elements[1].offsetParent.offsetTop;
                    }
                }, 100);
            }
        };
        /*
         * For selection mode disabled attribute
         */
        LayerListComponent.prototype.lowerableLayers = function (layers) {
            var e_7, _b;
            var response = false;
            var base = 0;
            var _loop_4 = function (layer) {
                var mapIndex = this_3.layers.findIndex(function (lay) { return layer.id === lay.id; });
                var currentLayer = this_3.layers[mapIndex];
                if (currentLayer.baseLayer) {
                    base += 1;
                }
                var nextLayer = this_3.layers[mapIndex + 1];
                if (nextLayer &&
                    nextLayer.baseLayer !== true &&
                    !layers.find(function (lay) { return nextLayer.id === lay.id; })) {
                    response = true;
                }
            };
            var this_3 = this;
            try {
                for (var layers_5 = __values(layers), layers_5_1 = layers_5.next(); !layers_5_1.done; layers_5_1 = layers_5.next()) {
                    var layer = layers_5_1.value;
                    _loop_4(layer);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (layers_5_1 && !layers_5_1.done && (_b = layers_5.return)) _b.call(layers_5);
                }
                finally { if (e_7) throw e_7.error; }
            }
            if ((this.layersChecked.length === 1 && this.layersChecked[0].baseLayer) ||
                base === this.layersChecked.length) {
                response = false;
            }
            return response;
        };
        /*
         * When multiple layers is selected but some may be allow to move
         */
        LayerListComponent.prototype.lowerableLayer = function (index) {
            if (index >
                this.layers.filter(function (lay) { return lay.baseLayer !== true; }).length - 2) {
                return false;
            }
            if (this.layers[index + 1].options.check) {
                return this.lowerableLayer(index + 1);
            }
            return true;
        };
        LayerListComponent.prototype.lowerLayers = function (layers, fromUi) {
            var e_8, _b;
            var _this = this;
            if (fromUi === void 0) { fromUi = true; }
            var layersToLower = [];
            var _loop_5 = function (layer) {
                var index = this_4.layers.findIndex(function (lay) { return lay.id === layer.id; });
                if (this_4.lowerableLayer(index)) {
                    layersToLower.push(layer);
                }
            };
            var this_4 = this;
            try {
                for (var layers_6 = __values(layers), layers_6_1 = layers_6.next(); !layers_6_1.done; layers_6_1 = layers_6.next()) {
                    var layer = layers_6_1.value;
                    _loop_5(layer);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (layers_6_1 && !layers_6_1.done && (_b = layers_6.return)) _b.call(layers_6);
                }
                finally { if (e_8) throw e_8.error; }
            }
            this.map.lowerLayers(layersToLower);
            if (fromUi) {
                setTimeout(function () {
                    var elements = _this.computeElementRef('lower');
                    if (!_this.isScrolledIntoView(elements[0], elements[1].offsetParent)) {
                        elements[0].scrollTop =
                            elements[1].offsetParent.offsetTop +
                                elements[1].offsetParent.offsetHeight -
                                elements[0].clientHeight;
                    }
                }, 100);
            }
        };
        LayerListComponent.prototype.next = function () {
            this.change$.next();
        };
        LayerListComponent.prototype.computeLayers = function (layers) {
            var layersOut = this.filterLayers(layers);
            if (this.sortAlpha) {
                layersOut = this.sortLayersByTitle(layersOut);
            }
            else {
                layersOut = this.sortLayersByZindex(layersOut);
            }
            return layersOut;
        };
        LayerListComponent.prototype.onKeywordChange = function (term) {
            this.keyword = term;
        };
        LayerListComponent.prototype.onAppliedFilterAndSortChange = function (appliedFilter) {
            this.keyword = appliedFilter.keyword;
            this.onlyVisible = appliedFilter.onlyVisible;
            this.sortAlpha = appliedFilter.sortAlpha;
        };
        LayerListComponent.prototype.filterLayers = function (layers) {
            var _this = this;
            if (this.layerFilterAndSortOptions.showToolbar === exports.LayerListControlsEnum.never) {
                return layers;
            }
            if (!this.keyword && !this.onlyVisible) {
                return layers;
            }
            var keepLayerIds = layers.map(function (layer) { return layer.id; });
            layers.forEach(function (layer) {
                var layerOptions = layer.options || {};
                var dataSourceOptions = layer.dataSource.options || {};
                var metadata = layerOptions.metadata || {};
                var keywords = metadata.keywordList || [];
                var layerKeywords = keywords.map(function (kw) {
                    return kw.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                });
                if (_this.keyword && layer.title) {
                    var localKeyword = _this.keyword
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, '');
                    var layerTitle = layer.title
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, '');
                    var dataSourceType = dataSourceOptions.type || '';
                    var keywordRegex_1 = new RegExp(localKeyword, 'gi');
                    var keywordInList = layerKeywords.find(function (kw) { return keywordRegex_1.test(kw); }) !==
                        undefined;
                    if (!keywordRegex_1.test(layerTitle) &&
                        !(_this.keyword.toLowerCase() === dataSourceType.toLowerCase()) &&
                        !keywordInList) {
                        var index = keepLayerIds.indexOf(layer.id);
                        if (index > -1) {
                            keepLayerIds.splice(index, 1);
                        }
                    }
                }
                if (_this.onlyVisible && layer.visible === false) {
                    var index = keepLayerIds.indexOf(layer.id);
                    if (index > -1) {
                        keepLayerIds.splice(index, 1);
                    }
                }
            });
            return layers.filter(function (layer) { return keepLayerIds.indexOf(layer.id) !== -1; });
        };
        LayerListComponent.prototype.sortLayersByZindex = function (layers) {
            return layers.sort(function (layer1, layer2) { return layer2.zIndex - layer1.zIndex; });
        };
        LayerListComponent.prototype.sortLayersByTitle = function (layers) {
            var _this = this;
            return layers.sort(function (a, b) {
                if (_this.normalize(a.title) < _this.normalize(b.title)) {
                    return -1;
                }
                if (_this.normalize(a.title) > _this.normalize(b.title)) {
                    return 1;
                }
                return 0;
            });
        };
        LayerListComponent.prototype.normalize = function (str) {
            return str
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')
                .toLowerCase();
        };
        LayerListComponent.prototype.computeShowToolbar = function () {
            switch (this.layerFilterAndSortOptions.showToolbar) {
                case exports.LayerListControlsEnum.always:
                    return true;
                case exports.LayerListControlsEnum.never:
                    return false;
                default:
                    if (this.layers.length >= this.thresholdToFilterAndSort ||
                        this.keyword ||
                        this.onlyVisible) {
                        return true;
                    }
                    return false;
            }
        };
        LayerListComponent.prototype.toggleLayerTool = function (layer) {
            var e_9, _b;
            this.toggleOpacity = false;
            if (this.layerTool && layer === this.activeLayer) {
                this.layerTool = false;
            }
            else {
                this.layerTool = true;
            }
            try {
                for (var _c = __values(this.layers), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var lay = _d.value;
                    lay.options.active = false;
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_9) throw e_9.error; }
            }
            layer.options.active = true;
            this.activeLayer = layer;
        };
        LayerListComponent.prototype.removeLayers = function (layers) {
            var e_10, _b;
            if (layers && layers.length > 0) {
                this.layersChecked = [];
                try {
                    for (var layers_7 = __values(layers), layers_7_1 = layers_7.next(); !layers_7_1.done; layers_7_1 = layers_7.next()) {
                        var layer = layers_7_1.value;
                        if (layer.options.removable !== false) {
                            layer.map.removeLayer(layer);
                        }
                        else {
                            this.layersChecked.push(layer);
                        }
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (layers_7_1 && !layers_7_1.done && (_b = layers_7.return)) _b.call(layers_7);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
            }
            else if (!layers && this.activeLayer.options.removable !== false) {
                this.activeLayer.map.removeLayer(this.activeLayer);
                this.layerTool = false;
            }
        };
        LayerListComponent.prototype.toggleVisibility = function (layers) {
            var e_11, _b;
            if (layers && layers.length > 0) {
                try {
                    for (var layers_8 = __values(layers), layers_8_1 = layers_8.next(); !layers_8_1.done; layers_8_1 = layers_8.next()) {
                        var layer = layers_8_1.value;
                        layer.visible = this.hideSelectedLayers;
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (layers_8_1 && !layers_8_1.done && (_b = layers_8.return)) _b.call(layers_8);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
            this.layerItemChangeDetection$.next(true);
        };
        LayerListComponent.prototype.isLayerRemovable = function (layer) {
            return layer.options.removable !== false;
        };
        LayerListComponent.prototype.isAllLayersRemovable = function (layers) {
            var _this = this;
            return layers.every(function (l) { return _this.isLayerRemovable(l); });
        };
        Object.defineProperty(LayerListComponent.prototype, "statusSelectedLayersCheck", {
            get: function () {
                var e_12, _b;
                var statusSelectedLayers = exports.LayerListSelectVisibleEnum.NULL;
                var findTrue = false;
                var findFalse = false;
                if (this.layersChecked.length === 0) {
                    statusSelectedLayers = exports.LayerListSelectVisibleEnum.NULL;
                }
                else {
                    statusSelectedLayers = exports.LayerListSelectVisibleEnum.MIXED;
                    this.hideSelectedLayers = false;
                    try {
                        for (var _c = __values(this.layersChecked), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var layer2 = _d.value;
                            if (layer2.visible === true) {
                                findTrue = true;
                            }
                            if (layer2.visible === false) {
                                findFalse = true;
                            }
                        }
                    }
                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_12) throw e_12.error; }
                    }
                    if (findTrue === true && findFalse === false) {
                        statusSelectedLayers = exports.LayerListSelectVisibleEnum.ALL_VISIBLE;
                    }
                    if (findTrue === false && findFalse === true) {
                        statusSelectedLayers = exports.LayerListSelectVisibleEnum.ALL_HIDDEN;
                        this.hideSelectedLayers = true;
                    }
                }
                return statusSelectedLayers;
            },
            enumerable: false,
            configurable: true
        });
        LayerListComponent.prototype.layersCheck = function (event) {
            var e_13, _b;
            event.layer.options.check = event.check;
            if (event.check === true) {
                var eventMapIndex = this.layers.findIndex(function (layer) { return event.layer.id === layer.id; });
                var _loop_6 = function (layer) {
                    var mapIndex = this_5.layers.findIndex(function (lay) { return layer.id === lay.id; });
                    if (eventMapIndex < mapIndex) {
                        this_5.layersChecked.splice(this_5.layersChecked.findIndex(function (lay) { return layer.id === lay.id; }), 0, event.layer);
                        if (this_5.excludeBaseLayers) {
                            if (this_5.layersChecked.length ===
                                this_5.layers.filter(function (lay) { return lay.baseLayer !== true && lay.showInLayerList; }).length) {
                                this_5.selectAllCheck = true;
                            }
                            else {
                                this_5.selectAllCheck = false;
                            }
                        }
                        else if (!this_5.excludeBaseLayers) {
                            if (this_5.layersChecked.length ===
                                this_5.layers.filter(function (lay) { return lay.showInLayerList; }).length) {
                                this_5.selectAllCheck = true;
                            }
                            else {
                                this_5.selectAllCheck = false;
                            }
                        }
                        return { value: void 0 };
                    }
                };
                var this_5 = this;
                try {
                    for (var _c = __values(this.layersChecked), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var layer = _d.value;
                        var state_1 = _loop_6(layer);
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                }
                catch (e_13_1) { e_13 = { error: e_13_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_13) throw e_13.error; }
                }
                this.layersChecked.push(event.layer);
            }
            else {
                var index = this.layersChecked.findIndex(function (layer) { return event.layer.id === layer.id; });
                this.layersChecked.splice(index, 1);
            }
            if (this.excludeBaseLayers) {
                if (this.layersChecked.length ===
                    this.layers.filter(function (lay) { return lay.baseLayer !== true && lay.showInLayerList; }).length) {
                    this.selectAllCheck = true;
                }
                else {
                    this.selectAllCheck = false;
                }
            }
            else if (!this.excludeBaseLayers) {
                if (this.layersChecked.length ===
                    this.layers.filter(function (lay) { return lay.showInLayerList; }).length) {
                    this.selectAllCheck = true;
                }
                else {
                    this.selectAllCheck = false;
                }
            }
        };
        LayerListComponent.prototype.toggleSelectionMode = function (value) {
            var e_14, _b;
            this.selection = value;
            this.activeLayer = undefined;
            if (value === true) {
                this.layerTool = false;
                try {
                    for (var _c = __values(this.layers), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var layer = _d.value;
                        if (layer.options.check) {
                            this.layersChecked.push(layer);
                        }
                    }
                }
                catch (e_14_1) { e_14 = { error: e_14_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_14) throw e_14.error; }
                }
            }
        };
        LayerListComponent.prototype.layersCheckedOpacity = function () {
            var e_15, _b;
            if (this.layersChecked.length > 1) {
                return 1;
            }
            else {
                var opacity = [];
                try {
                    for (var _c = __values(this.layersChecked), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var layer = _d.value;
                        opacity.push(layer.opacity);
                    }
                }
                catch (e_15_1) { e_15 = { error: e_15_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_15) throw e_15.error; }
                }
                return opacity;
            }
        };
        LayerListComponent.prototype.selectAll = function () {
            var e_16, _b, e_17, _c;
            if (!this.selectAllCheck) {
                try {
                    for (var _d = __values(this.layers), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var layer = _e.value;
                        if (this.excludeBaseLayers &&
                            layer.baseLayer !== true &&
                            layer.showInLayerList) {
                            layer.options.check = true;
                            this.layersChecked.push(layer);
                        }
                        else if (!this.excludeBaseLayers && layer.showInLayerList) {
                            layer.options.check = true;
                            this.layersChecked.push(layer);
                        }
                    }
                }
                catch (e_16_1) { e_16 = { error: e_16_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_16) throw e_16.error; }
                }
                this.selectAllCheck$.next(true);
            }
            else {
                try {
                    for (var _f = __values(this.layers), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var layer = _g.value;
                        layer.options.check = false;
                    }
                }
                catch (e_17_1) { e_17 = { error: e_17_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                    }
                    finally { if (e_17) throw e_17.error; }
                }
                this.layersChecked = [];
                this.selectAllCheck$.next(false);
            }
        };
        LayerListComponent.prototype.isScrolledIntoView = function (elemSource, elem) {
            var docViewTop = elemSource.scrollTop;
            var docViewBottom = docViewTop + elemSource.clientHeight;
            var elemTop = elem.offsetTop;
            var elemBottom = elemTop + elem.clientHeight;
            return elemBottom <= docViewBottom && elemTop >= docViewTop;
        };
        LayerListComponent.prototype.computeElementRef = function (type) {
            var checkItems = this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked');
            var checkItem = type === 'lower'
                ? this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked')[checkItems.length - 1]
                : this.elRef.nativeElement.getElementsByClassName('mat-checkbox-checked')[0];
            var igoList = this.elRef.nativeElement.getElementsByTagName('igo-list')[0];
            return [igoList, checkItem];
        };
        LayerListComponent.prototype.removeProblemLayerInList = function (layersList) {
            var e_18, _b;
            try {
                for (var layersList_1 = __values(layersList), layersList_1_1 = layersList_1.next(); !layersList_1_1.done; layersList_1_1 = layersList_1.next()) {
                    var layer = layersList_1_1.value;
                    if (layer.olLoadingProblem === true) {
                        this.map.removeLayer(layer);
                    }
                }
            }
            catch (e_18_1) { e_18 = { error: e_18_1 }; }
            finally {
                try {
                    if (layersList_1_1 && !layersList_1_1.done && (_b = layersList_1.return)) _b.call(layersList_1);
                }
                finally { if (e_18) throw e_18.error; }
            }
            return layersList;
        };
        return LayerListComponent;
    }());
    LayerListComponent.ɵfac = function LayerListComponent_Factory(t) { return new (t || LayerListComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef)); };
    LayerListComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerListComponent, selectors: [["igo-layer-list"]], contentQueries: function LayerListComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, _c0$d, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.templateLayerToolbar = _t.first);
            }
        }, inputs: { layersAreAllVisible: "layersAreAllVisible", ogcButton: "ogcButton", timeButton: "timeButton", map: "map", layers: "layers", floatLabel: "floatLabel", layerFilterAndSortOptions: "layerFilterAndSortOptions", excludeBaseLayers: "excludeBaseLayers", toggleLegendOnVisibilityChange: "toggleLegendOnVisibilityChange", expandLegendOfVisibleLayers: "expandLegendOfVisibleLayers", updateLegendOnResolutionChange: "updateLegendOnResolutionChange", queryBadge: "queryBadge" }, outputs: { appliedFilterAndSort: "appliedFilterAndSort" }, ngContentSelectors: _c4$1, decls: 11, vars: 16, consts: [["floatLabel", "auto", 3, "layersAreAllVisible", "term", "onlyVisible", "sortAlpha", "appliedFilterAndSort", "selection", 4, "ngIf"], ["class", "select-all", 4, "ngIf"], [3, "ngClass", "navigation", "selection"], ["igoList", ""], ["ngFor", "", 3, "ngForOf"], ["class", "igo-layer-actions-container", 3, "title", 4, "ngIf"], ["floatLabel", "auto", 3, "layersAreAllVisible", "term", "onlyVisible", "sortAlpha", "appliedFilterAndSort", "selection"], [1, "select-all"], [1, "select-all-checkbox", "mat-subheading-2", 3, "color", "checked", "indeterminate", "change"], ["igoListItem", "", 3, "layer", "activeLayer", "orderable", "lowerDisabled", "raiseDisabled", "queryBadge", "expandLegendIfVisible", "updateLegendOnResolutionChange", "toggleLegendOnVisibilityChange", "selectionMode", "selectAll", "layerCheck", "changeDetection", "action", "checkbox", 4, "ngIf"], ["igoListItem", "", 3, "layer", "activeLayer", "orderable", "lowerDisabled", "raiseDisabled", "queryBadge", "expandLegendIfVisible", "updateLegendOnResolutionChange", "toggleLegendOnVisibilityChange", "selectionMode", "selectAll", "layerCheck", "changeDetection", "action", "checkbox"], [1, "igo-layer-actions-container", 3, "title"], [1, "igo-layer-button-group"], ["class", "delete-button", "mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "color", "primary", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "down-button", 3, "matTooltip", "disabled", "click"], ["matBadgeColor", "warn", "matBadgeSize", "medium", "svgIcon", "arrow-down", 3, "matBadge", "matBadgeHidden"], ["color", "primary", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "up-button", 3, "matTooltip", "disabled", "click"], ["matBadgeColor", "warn", "matBadgeSize", "medium", "svgIcon", "arrow-up", 3, "matBadge", "matBadgeHidden"], ["color", "primary", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "opacity-button", 3, "matMenuTriggerFor", "matTooltip"], ["matBadgeColor", "primary", "matBadgeSize", "medium", "svgIcon", "opacity", 3, "matBadge"], [1, "mat-menu-opacity-slider"], ["opacityMenu", "matMenu"], ["id", "opacity-menu"], ["id", "opacity-slider", "color", "primary", "thumbLabel", "", "tickInterval", "5", "step", "5", "matTooltipShowDelay", "500", "tooltip-position", "below", 3, "min", "max", "value", "matTooltip", "input", "click"], ["class", "zoomLayer-button", "color", "primary", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "click", 4, "ngIf"], ["igoLayerItemToolbar", "", 3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "delete-button", 3, "matTooltip", "click"], ["svgIcon", "delete"], ["color", "primary", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "zoomLayer-button", 3, "matTooltip", "click"], ["matBadgeColor", "primary", "matBadgeSize", "medium", "svgIcon", "magnify-scan"], [1, "actions-buttons-multi"], ["mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "delete-button", 3, "disabled", "matTooltip", "click"], ["matBadgeColor", "warn", "matBadgeSize", "medium", "svgIcon", "delete", 3, "matBadge", "matBadgeHidden"], ["mat-icon-button", "", "color", "primary", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "eye-button", 3, "disabled", "matTooltip", "click"], [3, "svgIcon"], ["color", "primary", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "opacity-button", 3, "disabled", "matMenuTriggerFor", "matTooltip"], ["svgIcon", "opacity"], ["id", "opacity-slider", "color", "primary", "thumbLabel", "", "tickInterval", "5", "step", "5", "matTooltipShowDelay", "500", "tooltip-position", "below", 3, "min", "max", "ngModel", "matTooltip", "ngModelChange", "click", 4, "ngIf"], ["id", "opacity-slider", "color", "primary", "thumbLabel", "", "tickInterval", "5", "step", "5", "matTooltipShowDelay", "500", "tooltip-position", "below", 3, "min", "max", "ngModel", "matTooltip", "ngModelChange", "click"], ["svgIcon", "magnify-scan"]], template: function LayerListComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵprojectionDef(_c2$5);
                i0__namespace.ɵɵelementStart(0, "mat-list");
                i0__namespace.ɵɵtemplate(1, LayerListComponent_igo_layer_list_tool_1_Template, 1, 4, "igo-layer-list-tool", 0);
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(3, LayerListComponent_mat_list_item_3_Template, 5, 8, "mat-list-item", 1);
                i0__namespace.ɵɵelement(4, "mat-divider");
                i0__namespace.ɵɵelementStart(5, "igo-list", 2, 3);
                i0__namespace.ɵɵtemplate(7, LayerListComponent_ng_template_7_Template, 1, 1, "ng-template", 4);
                i0__namespace.ɵɵpipe(8, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(9, LayerListComponent_igo_panel_9_Template, 22, 34, "igo-panel", 5);
                i0__namespace.ɵɵtemplate(10, LayerListComponent_igo_panel_10_Template, 27, 41, "igo-panel", 5);
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(2, 8, ctx.showToolbar$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.selection);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction3(12, _c3$2, ctx.selection, ctx.layerTool && !ctx.selection, !ctx.layerTool && !ctx.selection))("navigation", false)("selection", false);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(8, 10, ctx.layers$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", !ctx.selection && ctx.layerTool && ctx.activeLayer);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.selection && ctx.layers.length > 0);
            }
        }, styles: ["[_nghost-%COMP%]   .igo-list-no-tools[_ngcontent-%COMP%]{height:calc(100% - 57px);padding-top:8px}[_nghost-%COMP%]   .igo-list-tools-single[_ngcontent-%COMP%]{height:calc(100% - 153px);padding-top:8px}[_nghost-%COMP%]   .igo-list-tools-multi[_ngcontent-%COMP%]{height:calc(100% - 191px);padding-top:8px}mat-form-field.inputFilter[_ngcontent-%COMP%]{width:calc(100% - 100px);max-width:200px}.igo-layer-actions-container[_ngcontent-%COMP%]{width:calc(100% - 5px);padding-left:4px}.igo-layer-actions-container[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{text-align:center}mat-list-item[_ngcontent-%COMP%]     .mat-list-item-content{margin-bottom:10px}mat-checkbox[_ngcontent-%COMP%]     .mat-checkbox-inner-container{margin-left:8px;margin-right:16px}#opacity-slider[_ngcontent-%COMP%]{float:left;min-width:unset;width:110px;left:10px;top:10px}.igo-layer-button-group[_ngcontent-%COMP%], .actions-buttons-multi[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:row-reverse;overflow-x:auto;overflow-y:hidden}.igo-layer-button-group[_ngcontent-%COMP%]::-webkit-scrollbar, .actions-buttons-multi[_ngcontent-%COMP%]::-webkit-scrollbar{height:4px}.igo-layer-button-group[_ngcontent-%COMP%]::-webkit-scrollbar-track, .actions-buttons-multi[_ngcontent-%COMP%]::-webkit-scrollbar-track{background:#f1f1f1}.igo-layer-button-group[_ngcontent-%COMP%]::-webkit-scrollbar-thumb, .actions-buttons-multi[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:#888}.igo-layer-button-group[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover, .actions-buttons-multi[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover{background:#555}.igo-layer-button-group[_ngcontent-%COMP%]{padding-top:5px}[_nghost-%COMP%]   igo-panel[_ngcontent-%COMP%]{height:unset}#opacity-menu[_ngcontent-%COMP%]{max-width:unset;width:132px;height:50px}#opacity-menu[_ngcontent-%COMP%]   .mat-menu-content[_ngcontent-%COMP%]:not(:empty){padding-top:20px}.select-all[_ngcontent-%COMP%]     .mat-list-item-content{margin:0}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-list',
                        templateUrl: './layer-list.component.html',
                        styleUrls: ['./layer-list.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }]; }, { templateLayerToolbar: [{
                    type: i0.ContentChild,
                    args: ['igoLayerItemToolbar', /* TODO: add static flag */ {}]
                }], layersAreAllVisible: [{
                    type: i0.Input
                }], ogcButton: [{
                    type: i0.Input
                }], timeButton: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], layers: [{
                    type: i0.Input
                }], floatLabel: [{
                    type: i0.Input
                }], layerFilterAndSortOptions: [{
                    type: i0.Input
                }], excludeBaseLayers: [{
                    type: i0.Input
                }], toggleLegendOnVisibilityChange: [{
                    type: i0.Input
                }], expandLegendOfVisibleLayers: [{
                    type: i0.Input
                }], updateLegendOnResolutionChange: [{
                    type: i0.Input
                }], queryBadge: [{
                    type: i0.Input
                }], appliedFilterAndSort: [{
                    type: i0.Output
                }] });
    })();

    function LayerListToolComponent_button_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 9);
            i0__namespace.ɵɵlistener("click", function LayerListToolComponent_button_5_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.clearTerm(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 10);
            i0__namespace.ɵɵelementEnd();
        }
    }
    var LayerListToolComponent = /** @class */ (function () {
        function LayerListToolComponent() {
            this.onlyVisible$ = new rxjs.BehaviorSubject(false);
            this.sortAlpha$ = new rxjs.BehaviorSubject(false);
            this.term$ = new rxjs.BehaviorSubject(undefined);
            this.layersAreAllVisible = true;
            this.floatLabel = 'auto';
            this.selectionMode = false;
            this.appliedFilterAndSort = new i0.EventEmitter();
            this.selection = new i0.EventEmitter();
        }
        Object.defineProperty(LayerListToolComponent.prototype, "onlyVisible", {
            get: function () {
                return this.onlyVisible$.value;
            },
            set: function (value) {
                this.onlyVisible$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListToolComponent.prototype, "sortAlpha", {
            get: function () {
                return this.sortAlpha$.value;
            },
            set: function (value) {
                this.sortAlpha$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LayerListToolComponent.prototype, "term", {
            get: function () {
                return this.term$.value;
            },
            set: function (value) {
                this.term$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        LayerListToolComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.term$$ = this.term$.subscribe(function (keyword) {
                _this.appliedFilterAndSort.emit({
                    keyword: keyword,
                    onlyVisible: _this.onlyVisible,
                    sortAlpha: _this.sortAlpha
                });
            });
            this.onlyVisible$$ = this.onlyVisible$.subscribe(function (onlyVisible) {
                _this.appliedFilterAndSort.emit({
                    keyword: _this.term,
                    onlyVisible: onlyVisible,
                    sortAlpha: _this.sortAlpha
                });
            });
            this.sortAlpha$$ = this.sortAlpha$.subscribe(function (sortAlpha) {
                _this.appliedFilterAndSort.emit({
                    keyword: _this.term,
                    onlyVisible: _this.onlyVisible,
                    sortAlpha: sortAlpha
                });
            });
        };
        LayerListToolComponent.prototype.ngOnDestroy = function () {
            this.onlyVisible$$.unsubscribe();
            this.sortAlpha$$.unsubscribe();
            this.term$$.unsubscribe();
        };
        LayerListToolComponent.prototype.clearTerm = function () {
            this.term = undefined;
        };
        LayerListToolComponent.prototype.toggleSortAlpha = function () {
            this.sortAlpha = !this.sortAlpha;
        };
        LayerListToolComponent.prototype.toggleOnlyVisible = function () {
            this.onlyVisible = !this.onlyVisible;
        };
        LayerListToolComponent.prototype.toggleSelectionMode = function () {
            this.selectionMode = !this.selectionMode;
            this.selection.emit(this.selectionMode);
        };
        return LayerListToolComponent;
    }());
    LayerListToolComponent.ɵfac = function LayerListToolComponent_Factory(t) { return new (t || LayerListToolComponent)(); };
    LayerListToolComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerListToolComponent, selectors: [["igo-layer-list-tool"]], inputs: { layersAreAllVisible: "layersAreAllVisible", floatLabel: "floatLabel", onlyVisible: "onlyVisible", sortAlpha: "sortAlpha", term: "term" }, outputs: { appliedFilterAndSort: "appliedFilterAndSort", selection: "selection" }, decls: 21, vars: 30, consts: [[1, "inputFilter", 3, "floatLabel"], ["matInput", "", "matTooltipShowDelay", "500", "type", "text", 3, "placeholder", "matTooltip", "ngModel", "ngModelChange"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", "color", "warn", 3, "click", 4, "ngIf"], ["matTooltipShowDelay", "500", 3, "matTooltip"], ["mat-icon-button", "", 1, "sort-alpha", 3, "color", "click"], [3, "svgIcon"], ["mat-icon-button", "", 1, "only-visible", 3, "disabled", "color", "click"], ["matBadge", "icon", "igoMatBadgeIcon", "eye", "igoMatBadgeInverseColor", "true", "igoMatBadgeInheritColor", "true", 3, "svgIcon"], ["mat-icon-button", "", "color", "primary", 1, "selection-mode", 3, "click"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", "color", "warn", 3, "click"], ["svgIcon", "close"]], template: function LayerListToolComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵelementStart(1, "mat-form-field", 0);
                i0__namespace.ɵɵelementStart(2, "input", 1);
                i0__namespace.ɵɵlistener("ngModelChange", function LayerListToolComponent_Template_input_ngModelChange_2_listener($event) { return ctx.term = $event; });
                i0__namespace.ɵɵpipe(3, "translate");
                i0__namespace.ɵɵpipe(4, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(5, LayerListToolComponent_button_5_Template, 2, 0, "button", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "div", 3);
                i0__namespace.ɵɵpipe(7, "translate");
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementStart(9, "button", 4);
                i0__namespace.ɵɵlistener("click", function LayerListToolComponent_Template_button_click_9_listener() { return ctx.toggleSortAlpha(); });
                i0__namespace.ɵɵelement(10, "mat-icon", 5);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(11, "div", 3);
                i0__namespace.ɵɵpipe(12, "translate");
                i0__namespace.ɵɵpipe(13, "translate");
                i0__namespace.ɵɵelementStart(14, "button", 6);
                i0__namespace.ɵɵlistener("click", function LayerListToolComponent_Template_button_click_14_listener() { return ctx.toggleOnlyVisible(); });
                i0__namespace.ɵɵelement(15, "mat-icon", 7);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(16, "div", 3);
                i0__namespace.ɵɵpipe(17, "translate");
                i0__namespace.ɵɵpipe(18, "translate");
                i0__namespace.ɵɵelementStart(19, "button", 8);
                i0__namespace.ɵɵlistener("click", function LayerListToolComponent_Template_button_click_19_listener() { return ctx.toggleSelectionMode(); });
                i0__namespace.ɵɵelement(20, "mat-icon", 5);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("floatLabel", ctx.floatLabel);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(3, 14, "igo.geo.layer.filterPlaceholder"))("matTooltip", i0__namespace.ɵɵpipeBind1(4, 16, "igo.geo.layer.subsetLayersListKeyword"))("ngModel", ctx.term);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.term);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.sortAlpha ? i0__namespace.ɵɵpipeBind1(7, 18, "igo.geo.layer.sortMapOrder") : i0__namespace.ɵɵpipeBind1(8, 20, "igo.geo.layer.sortAlphabetically"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("color", ctx.sortAlpha ? "warn" : "primary");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("svgIcon", ctx.sortAlpha ? "sort-ascending" : "sort-alphabetical-ascending");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.onlyVisible ? i0__namespace.ɵɵpipeBind1(12, 22, "igo.geo.layer.resetLayersList") : i0__namespace.ɵɵpipeBind1(13, 24, "igo.geo.layer.subsetLayersListOnlyVisible"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("disabled", ctx.layersAreAllVisible && !ctx.onlyVisible)("color", ctx.onlyVisible ? "warn" : "primary");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("svgIcon", ctx.onlyVisible ? "filter-remove" : "filter");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.selectionMode ? i0__namespace.ɵɵpipeBind1(17, 26, "igo.geo.layer.deactivateSelectionMode") : i0__namespace.ɵɵpipeBind1(18, 28, "igo.geo.layer.activateSelectionMode"));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("svgIcon", ctx.selectionMode ? "checkbox-multiple-marked-outline" : "checkbox-multiple-blank-outline");
            }
        }, directives: [i1__namespace$3.MatListItem, i12__namespace.MatFormField, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor, i3__namespace.MatTooltip, i16__namespace.NgControlStatus, i16__namespace.NgModel, i1__namespace$1.NgIf, i2__namespace.MatButton, i4__namespace.MatIcon, i9__namespace$1.MatBadge, i6__namespace.IgoBadgeIconDirective, i12__namespace.MatSuffix], pipes: [i7__namespace.TranslatePipe], styles: ["mat-form-field.inputFilter[_ngcontent-%COMP%]{width:calc(100% - 100px);max-width:200px}.selection-mode[_ngcontent-%COMP%]{margin-left:5px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerListToolComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-list-tool',
                        templateUrl: './layer-list-tool.component.html',
                        styleUrls: ['./layer-list-tool.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], null, { layersAreAllVisible: [{
                    type: i0.Input
                }], floatLabel: [{
                    type: i0.Input
                }], onlyVisible: [{
                    type: i0.Input
                }], sortAlpha: [{
                    type: i0.Input
                }], term: [{
                    type: i0.Input
                }], appliedFilterAndSort: [{
                    type: i0.Output
                }], selection: [{
                    type: i0.Output
                }] });
    })();

    var LayerListBindingDirective = /** @class */ (function () {
        function LayerListBindingDirective(component, mapService, route) {
            this.mapService = mapService;
            this.route = route;
            this.component = component;
        }
        LayerListBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // Override input layers
            // this.component.layers = [];
            this.layersOrResolutionChange$$ = rxjs.combineLatest([
                this.mapService.getMap().layers$,
                this.mapService.getMap().viewController.resolution$
            ]).pipe(operators.debounceTime(10)).subscribe(function (bunch) {
                var shownLayers = bunch[0].filter(function (layer) {
                    return layer.showInLayerList === true;
                });
                _this.component.layers = shownLayers;
                _this.setLayersVisibilityStatus(shownLayers, _this.component.excludeBaseLayers);
            });
        };
        LayerListBindingDirective.prototype.setLayersVisibilityStatus = function (layers, excludeBaseLayers) {
            var _this = this;
            if (this.layersVisibility$$ !== undefined) {
                this.layersVisibility$$.unsubscribe();
                this.layersVisibility$$ = undefined;
            }
            this.layersVisibility$$ = rxjs.combineLatest(layers
                .filter(function (layer) { return layer.baseLayer !== excludeBaseLayers; })
                .map(function (layer) { return layer.visible$; }))
                .pipe(operators.map(function (visibles) { return visibles.every(Boolean); }))
                .subscribe(function (allLayersAreVisible) { return _this.component.layersAreAllVisible = allLayersAreVisible; });
        };
        LayerListBindingDirective.prototype.ngOnDestroy = function () {
            this.layersOrResolutionChange$$.unsubscribe();
            if (this.layersVisibility$$ !== undefined) {
                this.layersVisibility$$.unsubscribe();
                this.layersVisibility$$ = undefined;
            }
        };
        return LayerListBindingDirective;
    }());
    LayerListBindingDirective.ɵfac = function LayerListBindingDirective_Factory(t) { return new (t || LayerListBindingDirective)(i0__namespace.ɵɵdirectiveInject(LayerListComponent, 2), i0__namespace.ɵɵdirectiveInject(MapService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.RouteService, 8)); };
    LayerListBindingDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: LayerListBindingDirective, selectors: [["", "igoLayerListBinding", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerListBindingDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoLayerListBinding]'
                    }]
            }], function () {
            return [{ type: LayerListComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: MapService }, { type: i2__namespace$1.RouteService, decorators: [{
                            type: i0.Optional
                        }] }];
        }, null);
    })();

    function LayerLegendListComponent_mat_slide_toggle_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r8_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 6);
            i0__namespace.ɵɵlistener("change", function LayerLegendListComponent_mat_slide_toggle_1_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r7 = i0__namespace.ɵɵnextContext(); return ctx_r7.toggleShowAllLegends($event.checked); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.layer.legend.showAll"))("checked", ctx_r0.showAllLegendsValue)("labelPosition", "before");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 6, "igo.geo.layer.legend.showAll"), " ");
        }
    }
    function LayerLegendListComponent_mat_divider_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function LayerLegendListComponent_ng_template_6_igo_layer_legend_item_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-layer-legend-item", 8);
        }
        if (rf & 2) {
            var layer_r9 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r11 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layer", layer_r9)("updateLegendOnResolutionChange", ctx_r11.updateLegendOnResolutionChange);
        }
    }
    function LayerLegendListComponent_ng_template_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, LayerLegendListComponent_ng_template_6_igo_layer_legend_item_0_Template, 1, 2, "igo-layer-legend-item", 7);
        }
        if (rf & 2) {
            var layer_r9 = ctx.$implicit;
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngIf", !(ctx_r2.excludeBaseLayers && layer_r9.baseLayer));
        }
    }
    function LayerLegendListComponent_p_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLayersVisibleWithShowAllButton"), " ");
        }
    }
    function LayerLegendListComponent_p_12_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLayersVisibleWithShowAllButtonButZoom"), " ");
        }
    }
    function LayerLegendListComponent_p_16_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLayersVisible"), " ");
        }
    }
    function LayerLegendListComponent_p_20_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.layer.legend.noLayersVisibleButZoom"), " ");
        }
    }
    var LayerLegendListComponent = /** @class */ (function () {
        function LayerLegendListComponent() {
            this.orderable = true;
            this.hasVisibleOrInRangeLayers$ = new rxjs.BehaviorSubject(true);
            this.hasVisibleAndNotInRangeLayers$ = new rxjs.BehaviorSubject(true);
            this.layersInUi$ = new rxjs.BehaviorSubject([]);
            this.layers$ = new rxjs.BehaviorSubject([]);
            this.showAllLegend = false;
            this.change$ = new rxjs.ReplaySubject(1);
            this.excludeBaseLayers = false;
            this.updateLegendOnResolutionChange = false;
            this.allowShowAllLegends = false;
            this.showAllLegendsValue = false;
            this.allLegendsShown = new i0.EventEmitter(false);
        }
        Object.defineProperty(LayerLegendListComponent.prototype, "layers", {
            get: function () {
                return this._layers;
            },
            set: function (value) {
                this._layers = value;
                this.next();
            },
            enumerable: false,
            configurable: true
        });
        LayerLegendListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.change$$ = this.change$
                .pipe(operators.debounce(function () {
                return _this.layers.length === 0 ? rxjs.EMPTY : rxjs.timer(50);
            }))
                .subscribe(function () {
                var layers = _this.computeShownLayers(_this.layers.slice(0));
                _this.layers$.next(layers);
                _this.hasVisibleOrInRangeLayers$.next(_this.layers.slice(0)
                    .filter(function (layer) { return layer.baseLayer !== true; })
                    .filter(function (layer) { return layer.visible$.value && layer.isInResolutionsRange$.value; }).length > 0);
                _this.hasVisibleAndNotInRangeLayers$.next(_this.layers.slice(0)
                    .filter(function (layer) { return layer.baseLayer !== true; })
                    .filter(function (layer) { return layer.visible$.value && !layer.isInResolutionsRange$.value; }).length > 0);
                _this.layersInUi$.next(_this.layers.slice(0).filter(function (layer) { return layer.showInLayerList !== false && (!_this.excludeBaseLayers || !layer.baseLayer); }));
            });
        };
        LayerLegendListComponent.prototype.ngOnDestroy = function () {
            this.change$$.unsubscribe();
        };
        LayerLegendListComponent.prototype.next = function () {
            this.change$.next();
        };
        LayerLegendListComponent.prototype.computeShownLayers = function (layers) {
            var shownLayers = layers.filter(function (layer) { return layer.visible && layer.isInResolutionsRange; });
            if (this.showAllLegendsValue) {
                shownLayers = layers;
            }
            return this.sortLayersByZindex(shownLayers);
        };
        LayerLegendListComponent.prototype.sortLayersByZindex = function (layers) {
            return layers.sort(function (layer1, layer2) { return layer2.zIndex - layer1.zIndex; });
        };
        LayerLegendListComponent.prototype.toggleShowAllLegends = function (toggle) {
            this.showAllLegendsValue = toggle;
            this.next();
            this.allLegendsShown.emit(toggle);
        };
        return LayerLegendListComponent;
    }());
    LayerLegendListComponent.ɵfac = function LayerLegendListComponent_Factory(t) { return new (t || LayerLegendListComponent)(); };
    LayerLegendListComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerLegendListComponent, selectors: [["igo-layer-legend-list"]], inputs: { layers: "layers", excludeBaseLayers: "excludeBaseLayers", updateLegendOnResolutionChange: "updateLegendOnResolutionChange", allowShowAllLegends: "allowShowAllLegends", showAllLegendsValue: "showAllLegendsValue" }, outputs: { allLegendsShown: "allLegendsShown" }, decls: 24, vars: 39, consts: [[1, "layer-legend-list-container"], ["tooltip-position", "above", "matTooltipShowDelay", "500", "class", "mat-typography", 3, "matTooltip", "checked", "labelPosition", "change", 4, "ngIf"], [4, "ngIf"], [3, "navigation", "selection"], ["ngFor", "", 3, "ngForOf"], ["class", "layers-empty mat-typography", 4, "ngIf"], ["tooltip-position", "above", "matTooltipShowDelay", "500", 1, "mat-typography", 3, "matTooltip", "checked", "labelPosition", "change"], ["igoListItem", "", 3, "layer", "updateLegendOnResolutionChange", 4, "ngIf"], ["igoListItem", "", 3, "layer", "updateLegendOnResolutionChange"], [1, "layers-empty", "mat-typography"]], template: function LayerLegendListComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵtemplate(1, LayerLegendListComponent_mat_slide_toggle_1_Template, 4, 8, "mat-slide-toggle", 1);
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵtemplate(3, LayerLegendListComponent_mat_divider_3_Template, 1, 0, "mat-divider", 2);
                i0__namespace.ɵɵpipe(4, "async");
                i0__namespace.ɵɵelementStart(5, "igo-list", 3);
                i0__namespace.ɵɵtemplate(6, LayerLegendListComponent_ng_template_6_Template, 1, 1, "ng-template", 4);
                i0__namespace.ɵɵpipe(7, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(8, LayerLegendListComponent_p_8_Template, 3, 3, "p", 5);
                i0__namespace.ɵɵpipe(9, "async");
                i0__namespace.ɵɵpipe(10, "async");
                i0__namespace.ɵɵpipe(11, "async");
                i0__namespace.ɵɵtemplate(12, LayerLegendListComponent_p_12_Template, 3, 3, "p", 5);
                i0__namespace.ɵɵpipe(13, "async");
                i0__namespace.ɵɵpipe(14, "async");
                i0__namespace.ɵɵpipe(15, "async");
                i0__namespace.ɵɵtemplate(16, LayerLegendListComponent_p_16_Template, 3, 3, "p", 5);
                i0__namespace.ɵɵpipe(17, "async");
                i0__namespace.ɵɵpipe(18, "async");
                i0__namespace.ɵɵpipe(19, "async");
                i0__namespace.ɵɵtemplate(20, LayerLegendListComponent_p_20_Template, 3, 3, "p", 5);
                i0__namespace.ɵɵpipe(21, "async");
                i0__namespace.ɵɵpipe(22, "async");
                i0__namespace.ɵɵpipe(23, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(2, 9, ctx.layersInUi$).length && ctx.allowShowAllLegends);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(4, 11, ctx.layersInUi$).length && ctx.allowShowAllLegends);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("navigation", false)("selection", false);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(7, 13, ctx.layers$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", !ctx.showAllLegendsValue && i0__namespace.ɵɵpipeBind1(9, 15, ctx.layersInUi$).length && i0__namespace.ɵɵpipeBind1(10, 17, ctx.hasVisibleOrInRangeLayers$) === false && i0__namespace.ɵɵpipeBind1(11, 19, ctx.hasVisibleAndNotInRangeLayers$) === false && ctx.allowShowAllLegends);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", !ctx.showAllLegendsValue && i0__namespace.ɵɵpipeBind1(13, 21, ctx.layersInUi$).length && i0__namespace.ɵɵpipeBind1(14, 23, ctx.hasVisibleOrInRangeLayers$) === false && i0__namespace.ɵɵpipeBind1(15, 25, ctx.hasVisibleAndNotInRangeLayers$) && ctx.allowShowAllLegends);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(17, 27, ctx.layersInUi$).length && i0__namespace.ɵɵpipeBind1(18, 29, ctx.hasVisibleOrInRangeLayers$) === false && i0__namespace.ɵɵpipeBind1(19, 31, ctx.hasVisibleAndNotInRangeLayers$) === false && !ctx.allowShowAllLegends);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(21, 33, ctx.layersInUi$).length && i0__namespace.ɵɵpipeBind1(22, 35, ctx.hasVisibleOrInRangeLayers$) === false && i0__namespace.ɵɵpipeBind1(23, 37, ctx.hasVisibleAndNotInRangeLayers$) && !ctx.allowShowAllLegends);
            }
        }, styles: ["mat-slide-toggle[_ngcontent-%COMP%]{width:100%;margin:10px}mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 60px)}igo-list[_ngcontent-%COMP%]{display:contents}.layers-empty[_ngcontent-%COMP%]{text-align:justify;margin:10px}.layer-legend-list-container[_ngcontent-%COMP%]{max-height:100%;overflow:auto}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerLegendListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-legend-list',
                        templateUrl: './layer-legend-list.component.html',
                        styleUrls: ['./layer-legend-list.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layers: [{
                    type: i0.Input
                }], excludeBaseLayers: [{
                    type: i0.Input
                }], updateLegendOnResolutionChange: [{
                    type: i0.Input
                }], allowShowAllLegends: [{
                    type: i0.Input
                }], showAllLegendsValue: [{
                    type: i0.Input
                }], allLegendsShown: [{
                    type: i0.Output
                }] });
    })();

    var LayerLegendListBindingDirective = /** @class */ (function () {
        function LayerLegendListBindingDirective(component, mapService) {
            this.mapService = mapService;
            this.component = component;
        }
        LayerLegendListBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // Override input layers
            this.component.layers = [];
            this.layersOrResolutionChange$$ = rxjs.combineLatest([
                this.mapService.getMap().layers$,
                this.mapService.getMap().viewController.resolution$
            ]).pipe(operators.debounceTime(10)).subscribe(function (bunch) {
                var shownLayers = bunch[0].filter(function (layer) {
                    return layer.showInLayerList === true;
                });
                _this.component.layers = shownLayers;
                _this.layersVisibility$$ = rxjs.combineLatest(shownLayers
                    .map(function (layer) { return layer.visible$; }))
                    .subscribe(function (r) {
                    _this.component.change$.next();
                });
            });
        };
        LayerLegendListBindingDirective.prototype.ngOnDestroy = function () {
            this.layersOrResolutionChange$$.unsubscribe();
            if (this.layersVisibility$$ !== undefined) {
                this.layersVisibility$$.unsubscribe();
                this.layersVisibility$$ = undefined;
            }
        };
        return LayerLegendListBindingDirective;
    }());
    LayerLegendListBindingDirective.ɵfac = function LayerLegendListBindingDirective_Factory(t) { return new (t || LayerLegendListBindingDirective)(i0__namespace.ɵɵdirectiveInject(LayerLegendListComponent, 2), i0__namespace.ɵɵdirectiveInject(MapService)); };
    LayerLegendListBindingDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: LayerLegendListBindingDirective, selectors: [["", "igoLayerLegendListBinding", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerLegendListBindingDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoLayerLegendListBinding]'
                    }]
            }], function () {
            return [{ type: LayerLegendListComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: MapService }];
        }, null);
    })();

    function TrackFeatureButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function TrackFeatureButtonComponent_button_0_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.toggleTrackFeature(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 2);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.layer.trackFeature"))("color", ctx_r0.color);
        }
    }
    var TrackFeatureButtonComponent = /** @class */ (function () {
        function TrackFeatureButtonComponent() {
            this.trackFeature = false;
            this.color = 'primary';
        }
        Object.defineProperty(TrackFeatureButtonComponent.prototype, "options", {
            get: function () {
                if (!this.layer) {
                    return;
                }
                return this.layer.options;
            },
            enumerable: false,
            configurable: true
        });
        TrackFeatureButtonComponent.prototype.ngOnInit = function () {
            this.color = this.trackFeature ? 'primary' : 'basic';
        };
        TrackFeatureButtonComponent.prototype.toggleTrackFeature = function () {
            if (this.trackFeature) {
                this.layer.disableTrackFeature(this.layer.options.trackFeature);
                this.color = 'basic';
            }
            else {
                this.layer.enableTrackFeature(this.layer.options.trackFeature);
                this.color = 'primary';
            }
            this.trackFeature = !this.trackFeature;
        };
        return TrackFeatureButtonComponent;
    }());
    TrackFeatureButtonComponent.ɵfac = function TrackFeatureButtonComponent_Factory(t) { return new (t || TrackFeatureButtonComponent)(); };
    TrackFeatureButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TrackFeatureButtonComponent, selectors: [["igo-track-feature-button"]], inputs: { layer: "layer", trackFeature: "trackFeature" }, decls: 1, vars: 1, consts: [["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click", 4, "ngIf"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click"], ["svgIcon", "crosshairs-gps"]], template: function TrackFeatureButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, TrackFeatureButtonComponent_button_0_Template, 3, 4, "button", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.options.trackFeature);
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TrackFeatureButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-track-feature-button',
                        templateUrl: './track-feature-button.component.html',
                        styleUrls: ['./track-feature-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layer: [{
                    type: i0.Input
                }], trackFeature: [{
                    type: i0.Input
                }] });
    })();

    var LayerLegendItemComponent = /** @class */ (function () {
        function LayerLegendItemComponent(networkService) {
            this.networkService = networkService;
            this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            this.updateLegendOnResolutionChange = false;
        }
        LayerLegendItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            var resolution$ = this.layer.map.viewController.resolution$;
            this.resolution$$ = resolution$.subscribe(function () {
                _this.onResolutionChange();
            });
            this.tooltipText = this.computeTooltip();
            this.network$$ = this.networkService.currentState().subscribe(function (state) {
                _this.state = state;
                _this.onResolutionChange();
            });
        };
        LayerLegendItemComponent.prototype.ngOnDestroy = function () {
            this.resolution$$.unsubscribe();
            this.network$$.unsubscribe();
        };
        LayerLegendItemComponent.prototype.computeTooltip = function () {
            var layerOptions = this.layer.options;
            if (!layerOptions.tooltip) {
                return this.layer.title;
            }
            var layerTooltip = layerOptions.tooltip;
            var layerMetadata = layerOptions.metadata;
            switch (layerOptions.tooltip.type) {
                case exports.TooltipType.TITLE:
                    return this.layer.title;
                case exports.TooltipType.ABSTRACT:
                    if (layerMetadata && layerMetadata.abstract) {
                        return layerMetadata.abstract;
                    }
                    else {
                        return this.layer.title;
                    }
                case exports.TooltipType.CUSTOM:
                    if (layerTooltip && layerTooltip.text) {
                        return layerTooltip.text;
                    }
                    else {
                        return this.layer.title;
                    }
                default:
                    return this.layer.title;
            }
        };
        LayerLegendItemComponent.prototype.onResolutionChange = function () {
            var inResolutionRange = this.layer.isInResolutionsRange;
            this.inResolutionRange$.next(inResolutionRange);
        };
        return LayerLegendItemComponent;
    }());
    LayerLegendItemComponent.ɵfac = function LayerLegendItemComponent_Factory(t) { return new (t || LayerLegendItemComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.NetworkService)); };
    LayerLegendItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: LayerLegendItemComponent, selectors: [["igo-layer-legend-item"]], inputs: { layer: "layer", updateLegendOnResolutionChange: "updateLegendOnResolutionChange" }, decls: 6, vars: 4, consts: [[1, "igo-layer-list-item"], ["matLine", "", "matTooltipShowDelay", "500", 1, "igo-layer-title", 3, "matTooltip"], [1, "igo-layer-legend-container"], ["legend", ""], [3, "layer", "updateLegendOnResolutionChange"]], template: function LayerLegendItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item", 0);
                i0__namespace.ɵɵelementStart(1, "h4", 1);
                i0__namespace.ɵɵtext(2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(3, "div", 2, 3);
                i0__namespace.ɵɵelement(5, "igo-layer-legend", 4);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", ctx.tooltipText);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(ctx.layer.title);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("layer", ctx.layer)("updateLegendOnResolutionChange", ctx.updateLegendOnResolutionChange);
            }
        }, styles: ["[_nghost-%COMP%]{overflow:hidden}.igo-layer-list-item[_ngcontent-%COMP%]{height:46px;clear:both}.igo-layer-legend-container[_ngcontent-%COMP%]{padding-left:18px;width:calc(100% - 18px)}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(LayerLegendItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-layer-legend-item',
                        templateUrl: './layer-legend-item.component.html',
                        styleUrls: ['./layer-legend-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i2__namespace$1.NetworkService }]; }, { layer: [{
                    type: i0.Input
                }], updateLegendOnResolutionChange: [{
                    type: i0.Input
                }] });
    })();

    var IgoLayerModule = /** @class */ (function () {
        function IgoLayerModule() {
        }
        IgoLayerModule.forRoot = function () {
            return {
                ngModule: IgoLayerModule,
                providers: [LayerService, StyleService, LayerListToolService]
            };
        };
        return IgoLayerModule;
    }());
    IgoLayerModule.ɵfac = function IgoLayerModule_Factory(t) { return new (t || IgoLayerModule)(); };
    IgoLayerModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoLayerModule });
    IgoLayerModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i5$1.MatInputModule,
                i12.MatFormFieldModule,
                i1$1.CommonModule,
                i16.FormsModule,
                i10.MatDividerModule,
                i5$2.MatMenuModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i22.MatSlideToggleModule,
                i13.MatSelectModule,
                i3.MatTooltipModule,
                i1$3.MatListModule,
                i13$1.MatSliderModule,
                i9$1.MatBadgeModule,
                i11.MatCheckboxModule,
                i2$1.IgoLanguageModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule,
                i6.IgoImageModule,
                i6.IgoPanelModule,
                i6.IgoMatBadgeIconModule,
                i6.IgoCustomHtmlModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoLayerModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i5$1.MatInputModule,
                            i12.MatFormFieldModule,
                            i1$1.CommonModule,
                            i16.FormsModule,
                            i10.MatDividerModule,
                            i5$2.MatMenuModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i22.MatSlideToggleModule,
                            i13.MatSelectModule,
                            i3.MatTooltipModule,
                            i1$3.MatListModule,
                            i13$1.MatSliderModule,
                            i9$1.MatBadgeModule,
                            i11.MatCheckboxModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoListModule,
                            i6.IgoCollapsibleModule,
                            i6.IgoImageModule,
                            i6.IgoPanelModule,
                            i6.IgoMatBadgeIconModule,
                            i6.IgoCustomHtmlModule
                        ],
                        exports: [
                            LayerItemComponent,
                            LayerLegendItemComponent,
                            LayerLegendComponent,
                            LayerListComponent,
                            LayerListToolComponent,
                            LayerLegendListComponent,
                            LayerListBindingDirective,
                            LayerLegendListBindingDirective,
                            TrackFeatureButtonComponent
                        ],
                        declarations: [
                            LayerItemComponent,
                            LayerLegendItemComponent,
                            LayerLegendComponent,
                            LayerListComponent,
                            LayerListToolComponent,
                            LayerLegendListComponent,
                            LayerListBindingDirective,
                            LayerLegendListBindingDirective,
                            TrackFeatureButtonComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoLayerModule, { declarations: [LayerItemComponent,
                LayerLegendItemComponent,
                LayerLegendComponent,
                LayerListComponent,
                LayerListToolComponent,
                LayerLegendListComponent,
                LayerListBindingDirective,
                LayerLegendListBindingDirective,
                TrackFeatureButtonComponent], imports: [i5$1.MatInputModule,
                i12.MatFormFieldModule,
                i1$1.CommonModule,
                i16.FormsModule,
                i10.MatDividerModule,
                i5$2.MatMenuModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i22.MatSlideToggleModule,
                i13.MatSelectModule,
                i3.MatTooltipModule,
                i1$3.MatListModule,
                i13$1.MatSliderModule,
                i9$1.MatBadgeModule,
                i11.MatCheckboxModule,
                i2$1.IgoLanguageModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule,
                i6.IgoImageModule,
                i6.IgoPanelModule,
                i6.IgoMatBadgeIconModule,
                i6.IgoCustomHtmlModule], exports: [LayerItemComponent,
                LayerLegendItemComponent,
                LayerLegendComponent,
                LayerListComponent,
                LayerListToolComponent,
                LayerLegendListComponent,
                LayerListBindingDirective,
                LayerLegendListBindingDirective,
                TrackFeatureButtonComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(LayerItemComponent, [i1__namespace$3.MatListItem, i1__namespace$1.NgIf, i11__namespace.MatCheckbox, i1__namespace$3.MatListIconCssMatStyler, i9__namespace.MatLine, i3__namespace.MatTooltip, i2__namespace.MatButton, i4__namespace.MatIcon, i9__namespace$1.MatBadge, i1__namespace$1.NgClass, LayerLegendComponent], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe]);
    i0__namespace.ɵɵsetComponentScope(LayerLegendItemComponent, [i1__namespace$3.MatListItem, i9__namespace.MatLine, i3__namespace.MatTooltip, LayerLegendComponent], []);
    i0__namespace.ɵɵsetComponentScope(LayerListComponent, [i1__namespace$3.MatList, i1__namespace$1.NgIf, LayerListToolComponent, i1__namespace$3.MatListItem, i11__namespace.MatCheckbox, i10__namespace.MatDivider, i6__namespace.ListComponent, i1__namespace$1.NgClass, i1__namespace$1.NgForOf, LayerItemComponent, i6__namespace.ListItemDirective, i6__namespace.PanelComponent, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i9__namespace$1.MatBadge, i5__namespace$2.MatMenuTrigger, i5__namespace$2.MatMenu, i13__namespace$1.MatSlider, i1__namespace$1.NgTemplateOutlet, i16__namespace.NgControlStatus, i16__namespace.NgModel], [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(LayerLegendListComponent, [i1__namespace$1.NgIf, i22__namespace.MatSlideToggle, i3__namespace.MatTooltip, i10__namespace.MatDivider, i6__namespace.ListComponent, i1__namespace$1.NgForOf, LayerLegendItemComponent, i6__namespace.ListItemDirective], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe]);

    /**
     * @ignore
     */
    var IgoCatalogBrowserModule = /** @class */ (function () {
        function IgoCatalogBrowserModule() {
        }
        return IgoCatalogBrowserModule;
    }());
    IgoCatalogBrowserModule.ɵfac = function IgoCatalogBrowserModule_Factory(t) { return new (t || IgoCatalogBrowserModule)(); };
    IgoCatalogBrowserModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoCatalogBrowserModule });
    IgoCatalogBrowserModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i2.MatButtonModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoMatBadgeIconModule,
                i2$1.IgoLanguageModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule,
                IgoMetadataModule,
                IgoLayerModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoCatalogBrowserModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i9$1.MatBadgeModule,
                            i2.MatButtonModule,
                            i4.MatIconModule,
                            i1$3.MatListModule,
                            i3.MatTooltipModule,
                            i6.IgoMatBadgeIconModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoListModule,
                            i6.IgoCollapsibleModule,
                            IgoMetadataModule,
                            IgoLayerModule
                        ],
                        exports: [
                            CatalogBrowserComponent
                        ],
                        declarations: [
                            CatalogBrowserComponent,
                            CatalogBrowserGroupComponent,
                            CatalogBrowserLayerComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoCatalogBrowserModule, { declarations: [CatalogBrowserComponent,
                CatalogBrowserGroupComponent,
                CatalogBrowserLayerComponent], imports: [i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i2.MatButtonModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoMatBadgeIconModule,
                i2$1.IgoLanguageModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule,
                IgoMetadataModule,
                IgoLayerModule], exports: [CatalogBrowserComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(CatalogBrowserComponent, [i6__namespace.ListComponent, i1__namespace$1.NgForOf, i1__namespace$1.NgIf, CatalogBrowserGroupComponent,
        CatalogBrowserLayerComponent, i6__namespace.ListItemDirective], [i1__namespace$1.AsyncPipe]);

    function AddCatalogDialogComponent_mat_option_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 17);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var predefinedCatalog_r7 = ctx.$implicit;
            i0__namespace.ɵɵproperty("matTooltip", predefinedCatalog_r7.title)("value", predefinedCatalog_r7);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", predefinedCatalog_r7.title, " ");
        }
    }
    function AddCatalogDialogComponent_mat_option_18_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 17);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var predefinedCatalog_r8 = ctx.$implicit;
            i0__namespace.ɵɵproperty("matTooltip", predefinedCatalog_r8.url)("value", predefinedCatalog_r8);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", predefinedCatalog_r8.url, " ");
        }
    }
    function AddCatalogDialogComponent_mat_option_23_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 18);
            i0__namespace.ɵɵlistener("click", function AddCatalogDialogComponent_mat_option_23_Template_mat_option_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵelementStart(1, "p", 19);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var type_r9 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", type_r9);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(type_r9);
        }
    }
    var _c0$c = function (a0, a1) { return { value: a0, email: a1 }; };
    function AddCatalogDialogComponent_span_24_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵelementStart(1, "p", 20);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r5.languageService.translate.instant("igo.geo.catalog.externalProvider.unavailableWithEmail", i0__namespace.ɵɵpureFunction2(1, _c0$c, ctx_r5.addedCatalog.url, ctx_r5.emailAddress)));
        }
    }
    var _c1$a = function (a0) { return { value: a0 }; };
    function AddCatalogDialogComponent_span_25_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵelementStart(1, "p", 20);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r6.languageService.translate.instant("igo.geo.catalog.unavailable", i0__namespace.ɵɵpureFunction1(1, _c1$a, ctx_r6.addedCatalog.url)));
        }
    }
    var AddCatalogDialogComponent = /** @class */ (function () {
        function AddCatalogDialogComponent(formBuilder, languageService, configService, dialogRef, data) {
            this.formBuilder = formBuilder;
            this.languageService = languageService;
            this.configService = configService;
            this.dialogRef = dialogRef;
            this.data = data;
            this.defaultAddedCatalogType = 'wms';
            this.predefinedCatalogsList$ = new rxjs.BehaviorSubject([]);
            this.predefinedCatalogs = [];
            this.error = false;
            this.store = data.store;
            this.predefinedCatalogs = data.predefinedCatalogs;
            this.error = data.error;
            this.addedCatalog = data.addedCatalog;
            this.form = this.formBuilder.group({
                id: ['', []],
                title: ['', []],
                url: ['', [i16.Validators.required]],
                type: [this.defaultAddedCatalogType, [i16.Validators.required]]
            });
        }
        AddCatalogDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.store.state.clear();
            this.typeCapabilities = Object.keys(exports.TypeCapabilities);
            this.addedCatalogType$$ = this.form
                .get('type')
                .valueChanges.subscribe(function (value) {
                if (value === 'wmts') {
                    _this.form.get('title').setValidators(i16.Validators.required);
                }
                else {
                    _this.form.get('title').setValidators([]);
                }
                _this.form.get('title').updateValueAndValidity();
            });
            this.computePredefinedCatalogList();
            this.storeViewAll$$ = this.store.view
                .all$()
                .subscribe(function () { return _this.computePredefinedCatalogList(); });
            this.emailAddress = this.configService.getConfig('emailAddress');
        };
        AddCatalogDialogComponent.prototype.ngOnDestroy = function () {
            this.addedCatalogType$$.unsubscribe();
            this.storeViewAll$$.unsubscribe();
        };
        AddCatalogDialogComponent.prototype.changeUrlOrTitle = function (catalog) {
            this.form.patchValue(catalog);
            this.error = false;
            this.computePredefinedCatalogList();
        };
        AddCatalogDialogComponent.prototype.computePredefinedCatalogList = function () {
            var _this = this;
            this.predefinedCatalogsList$.next(this.predefinedCatalogs.filter(function (c) { return !_this.store.get(c.id); }));
        };
        AddCatalogDialogComponent.prototype.addCatalog = function (addedCatalog) {
            this.error = false;
            this.dialogRef.close(addedCatalog);
        };
        AddCatalogDialogComponent.prototype.cancel = function () {
            this.error = false;
            this.dialogRef.close();
        };
        return AddCatalogDialogComponent;
    }());
    AddCatalogDialogComponent.ɵfac = function AddCatalogDialogComponent_Factory(t) { return new (t || AddCatalogDialogComponent)(i0__namespace.ɵɵdirectiveInject(i16__namespace.FormBuilder), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService), i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialogRef), i0__namespace.ɵɵdirectiveInject(i1.MAT_DIALOG_DATA, 8)); };
    AddCatalogDialogComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AddCatalogDialogComponent, selectors: [["igo-add-catalog-dialog"]], decls: 34, vars: 25, consts: [["mat-dialog-title", "", 1, "mat-typography"], ["mat-dialog-content", "", 1, "mat-typography"], [1, "igo-form", 3, "formGroup"], [1, "igo-input-container"], ["type", "text", "formControlName", "title", "matInput", "", 3, "placeholder", "matAutocomplete"], [3, "optionSelected"], ["auto2", "matAutocomplete"], ["matTooltipShowDelay", "500", 3, "matTooltip", "value", 4, "ngFor", "ngForOf"], ["type", "text", "formControlName", "url", "placeholder", "URL", "matInput", "", 3, "matAutocomplete"], ["auto", "matAutocomplete"], ["formControlName", "type", "placeholder", "Type"], [3, "value", "click", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["mat-dialog-actions", "", 2, "justify-content", "center"], [1, "igo-form-button-group", "add-catalog-button-top-padding"], ["mat-raised-button", "", "type", "button", 3, "click"], ["id", "addCatalogBtnDialog", "mat-raised-button", "", "type", "button", "color", "primary", 3, "disabled", "click"], ["matTooltipShowDelay", "500", 3, "matTooltip", "value"], [3, "value", "click"], ["mat-line", ""], [1, "error"]], template: function AddCatalogDialogComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "h1", 0);
                i0__namespace.ɵɵtext(1);
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(3, "div", 1);
                i0__namespace.ɵɵelementStart(4, "form", 2);
                i0__namespace.ɵɵelementStart(5, "div", 3);
                i0__namespace.ɵɵelementStart(6, "mat-form-field");
                i0__namespace.ɵɵelement(7, "input", 4);
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementStart(9, "mat-autocomplete", 5, 6);
                i0__namespace.ɵɵlistener("optionSelected", function AddCatalogDialogComponent_Template_mat_autocomplete_optionSelected_9_listener($event) { return ctx.changeUrlOrTitle($event.option.value); });
                i0__namespace.ɵɵtemplate(11, AddCatalogDialogComponent_mat_option_11_Template, 2, 3, "mat-option", 7);
                i0__namespace.ɵɵpipe(12, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(13, "div", 3);
                i0__namespace.ɵɵelementStart(14, "mat-form-field");
                i0__namespace.ɵɵelement(15, "input", 8);
                i0__namespace.ɵɵelementStart(16, "mat-autocomplete", 5, 9);
                i0__namespace.ɵɵlistener("optionSelected", function AddCatalogDialogComponent_Template_mat_autocomplete_optionSelected_16_listener($event) { return ctx.changeUrlOrTitle($event.option.value); });
                i0__namespace.ɵɵtemplate(18, AddCatalogDialogComponent_mat_option_18_Template, 2, 3, "mat-option", 7);
                i0__namespace.ɵɵpipe(19, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(20, "div", 3);
                i0__namespace.ɵɵelementStart(21, "mat-form-field");
                i0__namespace.ɵɵelementStart(22, "mat-select", 10);
                i0__namespace.ɵɵtemplate(23, AddCatalogDialogComponent_mat_option_23_Template, 3, 2, "mat-option", 11);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(24, AddCatalogDialogComponent_span_24_Template, 3, 4, "span", 12);
                i0__namespace.ɵɵtemplate(25, AddCatalogDialogComponent_span_25_Template, 3, 3, "span", 12);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(26, "div", 13);
                i0__namespace.ɵɵelementStart(27, "div", 14);
                i0__namespace.ɵɵelementStart(28, "button", 15);
                i0__namespace.ɵɵlistener("click", function AddCatalogDialogComponent_Template_button_click_28_listener() { return ctx.cancel(); });
                i0__namespace.ɵɵtext(29);
                i0__namespace.ɵɵpipe(30, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(31, "button", 16);
                i0__namespace.ɵɵlistener("click", function AddCatalogDialogComponent_Template_button_click_31_listener() { return ctx.addCatalog(ctx.form.value); });
                i0__namespace.ɵɵtext(32);
                i0__namespace.ɵɵpipe(33, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(10);
                var _r2 = i0__namespace.ɵɵreference(17);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(2, 13, "igo.geo.catalog.library.addTitle"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("formGroup", ctx.form);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(8, 15, "igo.geo.printForm.title"));
                i0__namespace.ɵɵproperty("matAutocomplete", _r0);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(12, 17, ctx.predefinedCatalogsList$));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("matAutocomplete", _r2);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(19, 19, ctx.predefinedCatalogsList$));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngForOf", ctx.typeCapabilities);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.error && ctx.addedCatalog && ctx.emailAddress);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.error && ctx.addedCatalog && !ctx.emailAddress);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(30, 21, "igo.geo.catalog.library.cancel"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("disabled", !ctx.form.valid);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(33, 23, "igo.geo.catalog.library.add"), " ");
            }
        }, directives: [i1__namespace.MatDialogTitle, i1__namespace.MatDialogContent, i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.FormGroupDirective, i12__namespace.MatFormField, i16__namespace.DefaultValueAccessor, i5__namespace$1.MatInput, i6__namespace$1.MatAutocompleteTrigger, i16__namespace.NgControlStatus, i16__namespace.FormControlName, i6__namespace$1.MatAutocomplete, i1__namespace$1.NgForOf, i13__namespace.MatSelect, i1__namespace$1.NgIf, i1__namespace.MatDialogActions, i2__namespace.MatButton, i9__namespace.MatOption, i3__namespace.MatTooltip, i9__namespace.MatLine], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: ["mat-form-field[_ngcontent-%COMP%]{width:100%}.add-catalog-button-top-padding[_ngcontent-%COMP%]{padding-top:25px}.igo-form[_ngcontent-%COMP%]{padding:10px 5px 5px}.igo-form-button-group[_ngcontent-%COMP%]{text-align:center}button[_ngcontent-%COMP%]{cursor:pointer}button#addCatalogBtnDialog[disabled=true][_ngcontent-%COMP%]{cursor:default;background-color:#0000001f;color:#00000042}.error[_ngcontent-%COMP%]{color:red}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AddCatalogDialogComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-add-catalog-dialog',
                        templateUrl: './add-catalog-dialog.component.html',
                        styleUrls: ['./add-catalog-dialog.component.scss']
                    }]
            }], function () {
            return [{ type: i16__namespace.FormBuilder }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.ConfigService }, { type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, null);
    })();

    function CatalogLibaryComponent_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r4_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-catalog-library-item", 3);
            i0__namespace.ɵɵlistener("catalogRemove", function CatalogLibaryComponent_ng_template_1_Template_igo_catalog_library_item_catalogRemove_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r4_1); var catalog_r2 = restoredCtx.$implicit; var ctx_r3 = i0__namespace.ɵɵnextContext(); return ctx_r3.onCatalogRemove(catalog_r2); })("select", function CatalogLibaryComponent_ng_template_1_Template_igo_catalog_library_item_select_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r4_1); var catalog_r2 = restoredCtx.$implicit; var ctx_r5 = i0__namespace.ɵɵnextContext(); return ctx_r5.onCatalogSelect(catalog_r2); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var catalog_r2 = ctx.$implicit;
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("map", ctx_r0.map)("catalog", catalog_r2);
        }
    }
    function CatalogLibaryComponent_div_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 4);
            i0__namespace.ɵɵelementStart(1, "button", 5);
            i0__namespace.ɵɵlistener("click", function CatalogLibaryComponent_div_3_Template_button_click_1_listener() { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.addCatalogDialog(); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelement(5, "mat-icon", 6);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.catalog.library.addBtn"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(4, 4, "igo.geo.catalog.library.addBtn"), " ");
        }
    }
    /**
     * Component to browse a list of available catalogs
     */
    var CatalogLibaryComponent = /** @class */ (function () {
        function CatalogLibaryComponent(capabilitiesService, messageService, languageService, storageService, dialog) {
            this.capabilitiesService = capabilitiesService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.storageService = storageService;
            this.dialog = dialog;
            /**
             * Determine if the form to add a catalog is allowed
             */
            this.addCatalogAllowed = false;
            /**
             * Determine if the form to add a catalog is allowed
             */
            this.predefinedCatalogs = [];
            /**
             * Event emitted a catalog is selected or unselected
             */
            this.catalogSelectChange = new i0.EventEmitter();
            this.submitDisabled = true;
        }
        Object.defineProperty(CatalogLibaryComponent.prototype, "addedCatalogs", {
            get: function () {
                return (this.storageService.get('addedCatalogs') || []);
            },
            set: function (catalogs) {
                this.storageService.set('addedCatalogs', catalogs);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @internal
         */
        CatalogLibaryComponent.prototype.ngOnInit = function () {
            this.store.state.clear();
            this.predefinedCatalogs = this.predefinedCatalogs.map(function (c) {
                c.id = tsMd5.Md5.hashStr((c.type || 'wms') + standardizeUrl(c.url));
                c.title = c.title === '' || !c.title ? c.url : c.title;
                return c;
            });
        };
        CatalogLibaryComponent.prototype.getCatalogs = function () {
            return this.store.view.all$();
        };
        /**
         * When a catalog is selected, update it's state in the store
         * and emit the catalog select change event
         * @internal
         */
        CatalogLibaryComponent.prototype.onCatalogSelect = function (catalog) {
            this.store.state.update(catalog, {
                selected: true,
                focused: true
            }, true);
            this.catalogSelectChange.emit({ selected: true, catalog: catalog });
        };
        CatalogLibaryComponent.prototype.unsubscribeAddingCatalog = function () {
            if (this.addingCatalog$$) {
                this.addingCatalog$$.unsubscribe();
            }
        };
        CatalogLibaryComponent.prototype.addCatalog = function (addedCatalog) {
            var _this = this;
            if (!addedCatalog) {
                return;
            }
            var id = tsMd5.Md5.hashStr(addedCatalog.type + standardizeUrl(addedCatalog.url));
            var predefinedCatalog = this.predefinedCatalogs.find(function (c) { return c.id === addedCatalog.id; });
            if (predefinedCatalog) {
                addedCatalog.version = predefinedCatalog.version;
                addedCatalog.externalProvider = predefinedCatalog.externalProvider;
                id = predefinedCatalog.id;
            }
            if (this.store.get(id)) {
                var title = this.languageService.translate.instant('igo.geo.catalog.library.inlist.title');
                var message = this.languageService.translate.instant('igo.geo.catalog.library.inlist.message');
                this.messageService.alert(message, title);
                return;
            }
            this.unsubscribeAddingCatalog();
            this.addingCatalog$$ = this.capabilitiesService
                .getCapabilities(addedCatalog.type, addedCatalog.url, addedCatalog.version)
                .pipe(operators.catchError(function (e) {
                var title = _this.languageService.translate.instant('igo.geo.catalog.unavailableTitle');
                if (e.error) {
                    _this.addCatalogDialog(true, addedCatalog);
                    e.error.caught = true;
                    return e;
                }
                var message = _this.languageService.translate.instant('igo.geo.catalog.unavailable', { value: addedCatalog.url });
                _this.messageService.error(message, title);
                throw e;
            }))
                .subscribe(function (capabilities) {
                var title;
                var version;
                switch (addedCatalog.type) {
                    case 'wms':
                        title = addedCatalog.title || capabilities.Service.Title;
                        version = addedCatalog.version || capabilities.version;
                        break;
                    case 'arcgisrest':
                    case 'imagearcgisrest':
                    case 'tilearcgisrest':
                        title = addedCatalog.title || capabilities.mapName;
                        break;
                    case 'wmts':
                        title =
                            addedCatalog.title ||
                                capabilities.ServiceIdentification.ServiceType;
                        break;
                    default:
                        title = addedCatalog.title;
                }
                var catalogToAdd = utils.ObjectUtils.removeUndefined(Object.assign({}, predefinedCatalog, utils.ObjectUtils.removeUndefined({
                    id: id,
                    title: title,
                    url: addedCatalog.url,
                    type: addedCatalog.type || 'wms',
                    externalProvider: addedCatalog.externalProvider || false,
                    removable: true,
                    version: version
                })));
                _this.store.insert(catalogToAdd);
                var newCatalogs = _this.addedCatalogs.slice(0);
                newCatalogs.push(catalogToAdd);
                _this.addedCatalogs = newCatalogs;
                _this.unsubscribeAddingCatalog();
            });
        };
        CatalogLibaryComponent.prototype.ngOnDestroy = function () {
            this.unsubscribeAddingCatalog();
        };
        CatalogLibaryComponent.prototype.onCatalogRemove = function (catalog) {
            this.store.delete(catalog);
            this.addedCatalogs = this.addedCatalogs
                .slice(0)
                .filter(function (c) { return c.id !== catalog.id; });
        };
        CatalogLibaryComponent.prototype.addCatalogDialog = function (error, addedCatalog) {
            var _this = this;
            var dialogRef = this.dialog.open(AddCatalogDialogComponent, {
                width: '700px',
                data: {
                    predefinedCatalogs: this.predefinedCatalogs,
                    store: this.store,
                    error: error,
                    addedCatalog: addedCatalog
                }
            });
            dialogRef.afterClosed().subscribe(function (catalog) {
                _this.addCatalog(catalog);
            });
        };
        return CatalogLibaryComponent;
    }());
    CatalogLibaryComponent.ɵfac = function CatalogLibaryComponent_Factory(t) { return new (t || CatalogLibaryComponent)(i0__namespace.ɵɵdirectiveInject(CapabilitiesService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.StorageService), i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialog)); };
    CatalogLibaryComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: CatalogLibaryComponent, selectors: [["igo-catalog-library"]], inputs: { store: "store", map: "map", addCatalogAllowed: "addCatalogAllowed", predefinedCatalogs: "predefinedCatalogs" }, outputs: { catalogSelectChange: "catalogSelectChange" }, decls: 4, vars: 5, consts: [[3, "navigation"], ["ngFor", "", 3, "ngForOf"], ["class", "btnAddCatalog", 4, "ngIf"], ["igoListItem", "", "color", "accent", 3, "map", "catalog", "catalogRemove", "select"], [1, "btnAddCatalog"], ["mat-raised-button", "", "matTooltipPosition", "above", "color", "primary", 3, "matTooltip", "click"], ["svgIcon", "earth-plus"]], template: function CatalogLibaryComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-list", 0);
                i0__namespace.ɵɵtemplate(1, CatalogLibaryComponent_ng_template_1_Template, 1, 2, "ng-template", 1);
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(3, CatalogLibaryComponent_div_3_Template, 6, 6, "div", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("navigation", false);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(2, 3, ctx.getCatalogs()));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.addCatalogAllowed);
            }
        }, styles: ["igo-list[_ngcontent-%COMP%]{height:auto}.btnAddCatalog[_ngcontent-%COMP%]{justify-content:center;display:flex;margin:30px 0}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogLibaryComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-catalog-library',
                        templateUrl: './catalog-library.component.html',
                        styleUrls: ['./catalog-library.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: CapabilitiesService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: i1__namespace.MatDialog }]; }, { store: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], addCatalogAllowed: [{
                    type: i0.Input
                }], predefinedCatalogs: [{
                    type: i0.Input
                }], catalogSelectChange: [{
                    type: i0.Output
                }] });
    })();

    function CatalogLibaryItemComponent_mat_icon_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-icon", 4);
            i0__namespace.ɵɵlistener("click", function CatalogLibaryItemComponent_mat_icon_3_Template_mat_icon_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.catalog.externalProvider.catalog"));
        }
    }
    function CatalogLibaryItemComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 5);
            i0__namespace.ɵɵlistener("click", function CatalogLibaryItemComponent_button_4_Template_button_click_0_listener($event) { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.removeCatalogFromLibrary($event); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.catalog.library.remove"));
        }
    }
    function CatalogLibaryItemComponent_button_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 7);
            i0__namespace.ɵɵelement(1, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
        }
    }
    /**
     * Catalog library item
     */
    var CatalogLibaryItemComponent = /** @class */ (function () {
        function CatalogLibaryItemComponent() {
            this.catalogRemove = new i0.EventEmitter();
        }
        Object.defineProperty(CatalogLibaryItemComponent.prototype, "title", {
            /**
             * @internal
             */
            get: function () { return i6.getEntityTitle(this.catalog); },
            enumerable: false,
            configurable: true
        });
        CatalogLibaryItemComponent.prototype.removeCatalogFromLibrary = function (event) {
            event.stopPropagation();
            this.catalogRemove.emit();
        };
        return CatalogLibaryItemComponent;
    }());
    CatalogLibaryItemComponent.ɵfac = function CatalogLibaryItemComponent_Factory(t) { return new (t || CatalogLibaryItemComponent)(); };
    CatalogLibaryItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: CatalogLibaryItemComponent, selectors: [["igo-catalog-library-item"]], inputs: { catalog: "catalog", map: "map" }, outputs: { catalogRemove: "catalogRemove" }, decls: 6, vars: 4, consts: [["mat-line", ""], ["class", "igo-external-provider", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 3, "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click", 4, "ngIf"], ["class", "igo-blank", "disabled", "true", "mat-icon-button", "", 4, "ngIf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", "svgIcon", "earth-arrow-right", 1, "igo-external-provider", 3, "matTooltip", "click"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click"], ["svgIcon", "delete"], ["disabled", "true", "mat-icon-button", "", 1, "igo-blank"], ["svgIcon", "blank"]], template: function CatalogLibaryItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵelementStart(1, "h4", 0);
                i0__namespace.ɵɵtext(2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(3, CatalogLibaryItemComponent_mat_icon_3_Template, 2, 3, "mat-icon", 1);
                i0__namespace.ɵɵtemplate(4, CatalogLibaryItemComponent_button_4_Template, 3, 3, "button", 2);
                i0__namespace.ɵɵtemplate(5, CatalogLibaryItemComponent_button_5_Template, 2, 0, "button", 3);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate1(" ", ctx.title, " ");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.catalog.externalProvider);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.catalog.removable);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.catalog.removable);
            }
        }, directives: [i1__namespace$3.MatListItem, i9__namespace.MatLine, i1__namespace$1.NgIf, i4__namespace.MatIcon, i3__namespace.MatTooltip, i2__namespace.MatButton], pipes: [i7__namespace.TranslatePipe], styles: [".igo-blank[_ngcontent-%COMP%]{cursor:pointer}.igo-external-provider[_ngcontent-%COMP%]{cursor:help}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CatalogLibaryItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-catalog-library-item',
                        templateUrl: './catalog-library-item.component.html',
                        styleUrls: ['./catalog-library-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], null, { catalog: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], catalogRemove: [{
                    type: i0.Output
                }] });
    })();

    /**
     * @ignore
     */
    var IgoCatalogLibraryModule = /** @class */ (function () {
        function IgoCatalogLibraryModule() {
        }
        return IgoCatalogLibraryModule;
    }());
    IgoCatalogLibraryModule.ɵfac = function IgoCatalogLibraryModule_Factory(t) { return new (t || IgoCatalogLibraryModule)(); };
    IgoCatalogLibraryModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoCatalogLibraryModule });
    IgoCatalogLibraryModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i4.MatIconModule,
                i9$1.MatBadgeModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoListModule,
                i2$1.IgoLanguageModule,
                i2.MatButtonModule,
                i12.MatFormFieldModule,
                i16.ReactiveFormsModule,
                i5$1.MatInputModule,
                i13.MatSelectModule,
                i6$1.MatAutocompleteModule,
                i1.MatDialogModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoCatalogLibraryModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i4.MatIconModule,
                            i9$1.MatBadgeModule,
                            i1$3.MatListModule,
                            i3.MatTooltipModule,
                            i6.IgoListModule,
                            i2$1.IgoLanguageModule,
                            i2.MatButtonModule,
                            i12.MatFormFieldModule,
                            i16.ReactiveFormsModule,
                            i5$1.MatInputModule,
                            i13.MatSelectModule,
                            i6$1.MatAutocompleteModule,
                            i1.MatDialogModule
                        ],
                        exports: [
                            CatalogLibaryComponent,
                            AddCatalogDialogComponent
                        ],
                        declarations: [
                            CatalogLibaryComponent,
                            CatalogLibaryItemComponent,
                            AddCatalogDialogComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoCatalogLibraryModule, { declarations: [CatalogLibaryComponent,
                CatalogLibaryItemComponent,
                AddCatalogDialogComponent], imports: [i1$1.CommonModule,
                i4.MatIconModule,
                i9$1.MatBadgeModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoListModule,
                i2$1.IgoLanguageModule,
                i2.MatButtonModule,
                i12.MatFormFieldModule,
                i16.ReactiveFormsModule,
                i5$1.MatInputModule,
                i13.MatSelectModule,
                i6$1.MatAutocompleteModule,
                i1.MatDialogModule], exports: [CatalogLibaryComponent,
                AddCatalogDialogComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(CatalogLibaryComponent, [i6__namespace.ListComponent, i1__namespace$1.NgForOf, CatalogLibaryItemComponent, i6__namespace.ListItemDirective, i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe]);

    var IgoCatalogModule = /** @class */ (function () {
        function IgoCatalogModule() {
        }
        return IgoCatalogModule;
    }());
    IgoCatalogModule.ɵfac = function IgoCatalogModule_Factory(t) { return new (t || IgoCatalogModule)(); };
    IgoCatalogModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoCatalogModule });
    IgoCatalogModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoMatBadgeIconModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule
            ], IgoCatalogBrowserModule,
            IgoCatalogLibraryModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoCatalogModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i9$1.MatBadgeModule,
                            i4.MatIconModule,
                            i1$3.MatListModule,
                            i3.MatTooltipModule,
                            i6.IgoMatBadgeIconModule,
                            i6.IgoListModule,
                            i6.IgoCollapsibleModule
                        ],
                        exports: [
                            IgoCatalogBrowserModule,
                            IgoCatalogLibraryModule
                        ],
                        declarations: []
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoCatalogModule, { imports: [i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i6.IgoMatBadgeIconModule,
                i6.IgoListModule,
                i6.IgoCollapsibleModule], exports: [IgoCatalogBrowserModule,
                IgoCatalogLibraryModule] });
    })();

    var IgoDataSourceModule = /** @class */ (function () {
        function IgoDataSourceModule() {
        }
        IgoDataSourceModule.forRoot = function () {
            return {
                ngModule: IgoDataSourceModule,
                providers: []
            };
        };
        return IgoDataSourceModule;
    }());
    IgoDataSourceModule.ɵfac = function IgoDataSourceModule_Factory(t) { return new (t || IgoDataSourceModule)(); };
    IgoDataSourceModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoDataSourceModule });
    IgoDataSourceModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoDataSourceModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        exports: [],
                        declarations: []
                    }]
            }], null, null);
    })();

    var FilterableDataSourcePipe = /** @class */ (function () {
        function FilterableDataSourcePipe() {
        }
        FilterableDataSourcePipe.prototype.transform = function (value, arg) {
            var _this = this;
            var layers;
            if (arg === 'time') {
                layers = value.filter(function (layer) {
                    var datasource = layer.dataSource;
                    return (_this.isTimeFilterable(datasource) &&
                        datasource.options.timeFilter !== undefined &&
                        Object.keys(datasource.options.timeFilter).length);
                });
            }
            if (arg === 'ogc') {
                layers = value.filter(function (layer) {
                    var datasource = layer.dataSource;
                    return _this.isOgcFilterable(datasource);
                });
            }
            return layers;
        };
        FilterableDataSourcePipe.prototype.isTimeFilterable = function (dataSource) {
            if (dataSource.options.type !== 'wms') {
                return false;
            }
            return dataSource.options.timeFilterable;
        };
        FilterableDataSourcePipe.prototype.isOgcFilterable = function (dataSource) {
            var isOgcFilterable = false;
            if (dataSource.options.ogcFilters &&
                dataSource.options.ogcFilters.enabled &&
                dataSource.options.ogcFilters.editable) {
                isOgcFilterable = true;
            }
            if (dataSource.options.ogcFilters &&
                dataSource.options.ogcFilters.enabled &&
                (dataSource.options.ogcFilters.pushButtons ||
                    dataSource.options.ogcFilters.checkboxes ||
                    dataSource.options.ogcFilters.radioButtons ||
                    dataSource.options.ogcFilters.select)) {
                isOgcFilterable = true;
            }
            return isOgcFilterable;
        };
        return FilterableDataSourcePipe;
    }());
    FilterableDataSourcePipe.ɵfac = function FilterableDataSourcePipe_Factory(t) { return new (t || FilterableDataSourcePipe)(); };
    FilterableDataSourcePipe.ɵpipe = /*@__PURE__*/ i0__namespace.ɵɵdefinePipe({ name: "filterableDataSource", type: FilterableDataSourcePipe, pure: true });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(FilterableDataSourcePipe, [{
                type: i0.Pipe,
                args: [{
                        name: 'filterableDataSource'
                    }]
            }], null, null);
    })();

    var TimeFilterService = /** @class */ (function () {
        function TimeFilterService() {
        }
        TimeFilterService.prototype.filterByDate = function (datasource, date) {
            var time;
            var newdateform;
            var newdateformStart;
            var newdateformEnd;
            if (Array.isArray(date)) {
                var dates = [];
                if (date[0]) {
                    newdateformStart = this.reformatDateTime(date[0]);
                    dates.push(date[0]);
                }
                if (date[1]) {
                    newdateformEnd = this.reformatDateTime(date[1]);
                    dates.push(date[1]);
                }
                if (dates.length === 2 && newdateformStart !== newdateformEnd) {
                    if (datasource instanceof TileArcGISRestDataSource) {
                        time = newdateformStart + ',' + newdateformEnd;
                    }
                    else {
                        time = newdateformStart + '/' + newdateformEnd;
                    }
                }
                if (newdateformStart === newdateformEnd) {
                    time = newdateformStart;
                }
            }
            else if (date) {
                newdateform = this.reformatDateTime(date);
                time = newdateform;
            }
            var params = { TIME: time };
            datasource.ol.updateParams(params);
            if (datasource instanceof WMSDataSource) {
                var wmsDataSource = datasource;
                wmsDataSource.setTimeFilter(wmsDataSource.timeFilter, true);
            }
        };
        TimeFilterService.prototype.filterByYear = function (datasource, year) {
            var time;
            var newdateformStart;
            var newdateformEnd;
            if (Array.isArray(year)) {
                var years = [];
                if (year[0]) {
                    newdateformStart = year[0];
                    years.push(year[0]);
                }
                if (year[1]) {
                    newdateformEnd = year[1];
                    years.push(year[1]);
                }
                if (years.length === 2 && newdateformStart !== newdateformEnd) {
                    if (datasource instanceof TileArcGISRestDataSource) {
                        time = newdateformStart + ',' + newdateformEnd;
                    }
                    else {
                        time = newdateformStart + '/' + newdateformEnd;
                    }
                }
                if (newdateformStart === newdateformEnd) {
                    time = newdateformStart;
                }
            }
            else { // to reset filter.
                time = year;
            }
            var params = { TIME: time };
            datasource.ol.updateParams(params);
            if (datasource instanceof WMSDataSource) {
                var wmsDataSource = datasource;
                wmsDataSource.setTimeFilter(wmsDataSource.timeFilter, true);
            }
        };
        TimeFilterService.prototype.reformatDateTime = function (value) {
            var year = value.getFullYear();
            var month = value.getMonth() + 1;
            var day = value.getUTCDate();
            var hour = value.getUTCHours();
            var minute = value.getUTCMinutes();
            if (Number(month) < 10) {
                month = '0' + month;
            }
            if (Number(day) < 10) {
                day = '0' + day;
            }
            if (Number(hour) < 10) {
                hour = '0' + hour;
            }
            if (Number(minute) < 10) {
                minute = '0' + minute;
            }
            return year + '-' + month + '-' + day + 'T' + hour + ':' + minute + ':00Z';
        };
        return TimeFilterService;
    }());
    TimeFilterService.ɵfac = function TimeFilterService_Factory(t) { return new (t || TimeFilterService)(); };
    TimeFilterService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: TimeFilterService, factory: TimeFilterService.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterService, [{
                type: i0.Injectable
            }], function () { return []; }, null);
    })();

    var OGCFilterService = /** @class */ (function () {
        function OGCFilterService() {
        }
        OGCFilterService.prototype.filterByOgc = function (wmsDatasource, filterString) {
            var appliedFilter = new OgcFilterWriter().formatProcessedOgcFilter(filterString, wmsDatasource.options.params.LAYERS);
            wmsDatasource.ol.updateParams({ FILTER: appliedFilter });
        };
        OGCFilterService.prototype.setOgcWFSFiltersOptions = function (wfsDatasource) {
            var options = wfsDatasource.options;
            var ogcFilterWriter = new OgcFilterWriter();
            if (options.ogcFilters.enabled && options.ogcFilters.filters) {
                options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(options.ogcFilters.filters, options.paramsWFS.fieldNameGeometry, new olProjection__default["default"]({ code: options.paramsWFS.srsName }), true);
                if (!options.ogcFilters.interfaceOgcFilters) {
                    options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(options.ogcFilters.filters, options.paramsWFS.fieldNameGeometry);
                }
            }
        };
        OGCFilterService.prototype.setOgcWMSFiltersOptions = function (wmsDatasource) {
            var options = wmsDatasource.options;
            var ogcFilterWriter = new OgcFilterWriter();
            if (options.ogcFilters.enabled && options.ogcFilters.filters) {
                options.ogcFilters.filters = ogcFilterWriter.checkIgoFiltersProperties(options.ogcFilters.filters, options.fieldNameGeometry, undefined, true);
                if (!options.ogcFilters.interfaceOgcFilters) {
                    options.ogcFilters.interfaceOgcFilters = ogcFilterWriter.defineInterfaceFilterSequence(
                    // With some wms server, this param must be set to make spatials call.
                    options.ogcFilters.filters, options.fieldNameGeometry);
                }
                this.filterByOgc(wmsDatasource, ogcFilterWriter.buildFilter(options.ogcFilters.filters, undefined, undefined, undefined, wmsDatasource.options));
                options.filtered = true;
            }
            else {
                options.ogcFilters.filters = undefined;
                options.ogcFilters.interfaceOgcFilters = [];
                options.filtered = false;
            }
        };
        return OGCFilterService;
    }());
    OGCFilterService.ɵfac = function OGCFilterService_Factory(t) { return new (t || OGCFilterService)(); };
    OGCFilterService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: OGCFilterService, factory: OGCFilterService.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OGCFilterService, [{
                type: i0.Injectable
            }], function () { return []; }, null);
    })();

    exports.SpatialFilterQueryType = void 0;
    (function (SpatialFilterQueryType) {
        SpatialFilterQueryType["AdmRegion"] = "AdmRegion";
        SpatialFilterQueryType["Mun"] = "Mun";
        SpatialFilterQueryType["Arrond"] = "Arrond";
        SpatialFilterQueryType["CircFed"] = "CircFed";
        SpatialFilterQueryType["CircProv"] = "CircProv";
        SpatialFilterQueryType["DirReg"] = "DirReg";
        SpatialFilterQueryType["MRC"] = "MRC";
        SpatialFilterQueryType["RegTour"] = "RegTour";
    })(exports.SpatialFilterQueryType || (exports.SpatialFilterQueryType = {}));
    exports.SpatialFilterType = void 0;
    (function (SpatialFilterType) {
        SpatialFilterType["Predefined"] = "Predefined";
        SpatialFilterType["Polygon"] = "Polygon";
        SpatialFilterType["Point"] = "Point";
    })(exports.SpatialFilterType || (exports.SpatialFilterType = {}));
    exports.SpatialFilterItemType = void 0;
    (function (SpatialFilterItemType) {
        SpatialFilterItemType["Address"] = "Address";
        SpatialFilterItemType["Thematics"] = "Thematics";
    })(exports.SpatialFilterItemType || (exports.SpatialFilterItemType = {}));

    var SpatialFilterService = /** @class */ (function () {
        function SpatialFilterService(http, languageService, configService) {
            this.http = http;
            this.languageService = languageService;
            this.configService = configService;
            this.baseUrl = 'https://geoegl.msp.gouv.qc.ca/apis/terrapi/';
            /*
             * Type association with URL
             */
            this.urlFilterList = {
                AdmRegion: 'regadmin',
                Arrond: 'arrondissements',
                CircFed: 'circ-fed',
                CircProv: 'circ-prov',
                DirReg: 'dir-reg',
                MRC: 'mrc',
                Mun: 'municipalites',
                RegTour: 'tourisme',
                bornes: 'bornes-sumi',
                hydro: 'hydro',
                routes: 'routes'
            };
            this.baseUrl =
                this.configService.getConfig('spatialFilter.url') || this.baseUrl;
        }
        SpatialFilterService.prototype.getKeyByValue = function (object, value) {
            return Object.keys(object).find(function (key) { return object[key] === value; });
        };
        /*
         * Loading data for spatial filter list component (NO GEOMETRY)
         */
        SpatialFilterService.prototype.loadFilterList = function (type) {
            var urlPath = type;
            if (urlPath) {
                return this.http
                    .get(this.baseUrl + this.urlFilterList[urlPath])
                    .pipe(operators.map(function (featureCollection) { return featureCollection.features.map(function (f) {
                    f.meta = {
                        id: f.properties.code
                    };
                    return f;
                }); }));
            }
        };
        /*
         * Loading item list (STRING)
         */
        SpatialFilterService.prototype.loadThematicsList = function () {
            var _this = this;
            var url = 'types';
            var items = [];
            return this.http.get(this.baseUrl + url).pipe(operators.map(function (types) {
                types.forEach(function (type) {
                    if (type.startsWith('lieux')) {
                        var item = {
                            name: undefined,
                            source: type
                        };
                        var substr = type.substring(6, type.length);
                        var name = substr;
                        if (substr.includes('.')) {
                            var index = substr.indexOf('.');
                            name = substr.substring(index + 1, substr.length);
                            substr = substr.substring(0, index);
                        }
                        try {
                            item.name = _this.languageService.translate.instant('igo.geo.terrapi.' + name);
                        }
                        catch (e) {
                            item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);
                        }
                        try {
                            item.group = _this.languageService.translate.instant('igo.geo.spatialFilter.group.' + substr);
                        }
                        catch (e) {
                            item.group = substr.substring(0, 1).toUpperCase() + substr.substring(1, name.length - 1);
                        }
                        items.push(item);
                    }
                    else {
                        if (_this.getKeyByValue(_this.urlFilterList, type)) {
                            var item = {
                                name: undefined,
                                source: type
                            };
                            var name = _this.getKeyByValue(_this.urlFilterList, type);
                            try {
                                item.name = _this.languageService.translate.instant('igo.geo.terrapi.' + name);
                            }
                            catch (e) {
                                item.name = name.substring(0, 1).toUpperCase() + name.substring(1, name.length - 1);
                            }
                            item.source = type;
                            items.push(item);
                        }
                    }
                });
                return items;
            }));
        };
        /*
         * Loading data for spatial filter item component (Address or Thematics) depends on predefined zone or draw zone (feature)
         */
        SpatialFilterService.prototype.loadFilterItem = function (feature, itemType, type, thematic, buffer) {
            var _this = this;
            if (type) {
                // Predefined type
                var urlType = type;
                var url = this.baseUrl + this.urlFilterList[urlType];
                var urlItem = '';
                if (itemType === exports.SpatialFilterItemType.Address) {
                    urlItem = 'adresses';
                    return this.http
                        .get(url + '/' + feature.properties.code + '/' + urlItem, {
                        params: {
                            geometry: 'true',
                            icon: 'true',
                            bufferInput: buffer.toString(),
                            simplified: '100'
                        }
                    })
                        .pipe(operators.map(function (featureCollection) { return featureCollection.features.map(function (f) {
                        f.meta = {
                            id: f.properties.code,
                            title: _this.languageService.translate.instant('igo.geo.spatialFilter.Address'),
                            icon: f.icon
                        };
                        return f;
                    }); }));
                }
                else {
                    // If thematics search
                    urlItem = thematic.source;
                    return this.http
                        .get(url + '/' + feature.properties.code + '/' + urlItem, {
                        params: {
                            geometry: 'true',
                            icon: 'true',
                            bufferInput: buffer.toString(),
                            simplified: '100'
                        }
                    })
                        .pipe(operators.map(function (featureCollection) { return featureCollection.features.map(function (f) {
                        f.meta = {
                            id: f.properties.code,
                            title: thematic.name,
                            icon: f.icon
                        };
                        return f;
                    }); }));
                }
            }
            else {
                // Draw type
                var url = this.baseUrl + 'locate';
                if (itemType === exports.SpatialFilterItemType.Address) {
                    var urlItem = '?type=adresses';
                    return this.http
                        .post(url + urlItem, {
                        geometry: 'true',
                        icon: 'true',
                        loc: JSON.stringify(feature),
                        bufferInput: buffer.toString(),
                        simplified: '100'
                    })
                        .pipe(operators.map(function (featureCollection) { return featureCollection.features.map(function (f) {
                        f.meta = {
                            id: f.properties.code,
                            title: _this.languageService.translate.instant('igo.geo.spatialFilter.Address'),
                            icon: f.icon
                        };
                        return f;
                    }); }));
                }
                else {
                    // If thematics search
                    var urlItem = '?type=' + thematic.source;
                    return this.http
                        .post(url + urlItem, {
                        geometry: 'true',
                        icon: 'true',
                        loc: JSON.stringify(feature),
                        bufferInput: buffer.toString(),
                        simplified: '100'
                    })
                        .pipe(operators.map(function (featureCollection) { return featureCollection.features.map(function (f) {
                        f.meta = {
                            id: f.properties.code,
                            title: thematic.name,
                            icon: f.icon
                        };
                        return f;
                    }); }));
                }
            }
        };
        /*
         * Get one territory by id (WITH GEOMETRY)
         */
        SpatialFilterService.prototype.loadItemById = function (feature, type) {
            var featureType = this.urlFilterList[type];
            var featureCode = '/' + feature.properties.code;
            if (featureType && featureCode) {
                return this.http
                    .get(this.baseUrl + featureType + featureCode, {
                    params: {
                        geometry: 'true'
                    }
                })
                    .pipe(operators.map(function (f) {
                    f.meta = {
                        id: f.properties.code,
                        alias: f.properties.nom,
                        title: f.properties.nom
                    };
                    return f;
                }));
            }
        };
        /*
         * Get buffer geometry
         */
        SpatialFilterService.prototype.loadBufferGeometry = function (feature, filterType, buffer, type) {
            if (filterType === exports.SpatialFilterType.Predefined) {
                var featureType = this.urlFilterList[type];
                var featureCode = '/' + feature.properties.code;
                if (featureType && featureCode) {
                    return this.http
                        .get(this.baseUrl + featureType + featureCode, {
                        params: {
                            geometry: '100',
                            bufferOutput: buffer.toString()
                        }
                    })
                        .pipe(operators.map(function (f) {
                        f.meta = {
                            id: f.properties.code,
                            alias: f.properties.nom,
                            title: f.properties.nom
                        };
                        return f;
                    }));
                }
            }
            else {
                return this.http
                    .post(this.baseUrl + 'geospatial/buffer?', {
                    buffer: buffer,
                    loc: JSON.stringify(feature)
                })
                    .pipe(operators.map(function (f) {
                    return f;
                }));
            }
        };
        return SpatialFilterService;
    }());
    SpatialFilterService.ɵfac = function SpatialFilterService_Factory(t) { return new (t || SpatialFilterService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    SpatialFilterService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: SpatialFilterService, factory: SpatialFilterService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SpatialFilterService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.ConfigService }]; }, null);
    })();

    var DownloadService = /** @class */ (function () {
        function DownloadService(messageService, languageService) {
            this.messageService = messageService;
            this.languageService = languageService;
        }
        DownloadService.prototype.open = function (layer) {
            var translate = this.languageService.translate;
            var title = translate.instant('igo.geo.download.title');
            this.messageService.success(translate.instant('igo.geo.download.start'), title);
            var DSOptions = layer.dataSource.options;
            if (Object.keys(DSOptions.download).length > 0) {
                if (DSOptions.download.dynamicUrl &&
                    DSOptions.download.url === undefined) {
                    var wfsOptions = void 0;
                    var currentProj = new olProjection__default["default"]({ code: layer.map.projection });
                    var paramsWFS = layer.dataSource.options.paramsWFS;
                    if (paramsWFS && Object.keys(paramsWFS).length > 0) {
                        currentProj = paramsWFS.srsName ? new olProjection__default["default"]({ code: paramsWFS.srsName }) : currentProj;
                        wfsOptions = layer.dataSource.options.paramsWFS;
                    }
                    else {
                        wfsOptions = layer.dataSource.options.params;
                    }
                    var currentExtent = olproj__namespace.transformExtent(layer.map.viewController.getExtent(), new olProjection__default["default"]({ code: layer.map.projection }), currentProj);
                    var outputFormatDownload = wfsOptions.outputFormatDownload === undefined
                        ? wfsOptions.outputFormat === undefined ? '' : 'outputformat=' + wfsOptions.outputFormat
                        : 'outputformat=' + wfsOptions.outputFormatDownload;
                    var baseurl = DSOptions.download.dynamicUrl
                        .replace(/&?outputformat=[^&]*/gi, '')
                        .replace(/&?filter=[^&]*/gi, '')
                        .replace(/&?bbox=[^&]*/gi, '');
                    var ogcFilters = layer.dataSource.options.ogcFilters;
                    var filterQueryString = void 0;
                    filterQueryString = new OgcFilterWriter()
                        .handleOgcFiltersAppliedValue(layer.dataSource.options, ogcFilters.geometryName, currentExtent, currentProj);
                    if (!filterQueryString) {
                        // Prevent getting all the features for empty filter
                        filterQueryString = new OgcFilterWriter().buildFilter(undefined, currentExtent, currentProj, ogcFilters.geometryName);
                    }
                    else {
                        filterQueryString = 'filter=' + encodeURIComponent(filterQueryString);
                    }
                    window.open(baseurl + "&" + filterQueryString + "&" + outputFormatDownload, '_blank');
                }
                else if (DSOptions.download) {
                    window.open(DSOptions.download.url, '_blank');
                }
            }
        };
        return DownloadService;
    }());
    DownloadService.ɵfac = function DownloadService_Factory(t) { return new (t || DownloadService)(i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService)); };
    DownloadService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: DownloadService, factory: DownloadService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DownloadService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }]; }, null);
    })();

    function DownloadButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function DownloadButtonComponent_button_0_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.openDownload(ctx_r1.layer); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 2);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.download.action"))("color", ctx_r0.color);
        }
    }
    var DownloadButtonComponent = /** @class */ (function () {
        function DownloadButtonComponent(downloadService) {
            this.downloadService = downloadService;
            this._color = 'primary';
        }
        Object.defineProperty(DownloadButtonComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DownloadButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        DownloadButtonComponent.prototype.openDownload = function (layer) {
            this.downloadService.open(layer);
        };
        Object.defineProperty(DownloadButtonComponent.prototype, "options", {
            get: function () {
                if (!this.layer) {
                    return;
                }
                return this.layer.dataSource.options;
            },
            enumerable: false,
            configurable: true
        });
        return DownloadButtonComponent;
    }());
    DownloadButtonComponent.ɵfac = function DownloadButtonComponent_Factory(t) { return new (t || DownloadButtonComponent)(i0__namespace.ɵɵdirectiveInject(DownloadService)); };
    DownloadButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DownloadButtonComponent, selectors: [["igo-download-button"]], inputs: { layer: "layer", color: "color" }, decls: 1, vars: 1, consts: [["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "click"], ["svgIcon", "download"]], template: function DownloadButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, DownloadButtonComponent_button_0_Template, 3, 4, "button", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.options && ctx.options.download && (ctx.options.download["dynamicUrl"] || ctx.options.download["url"]));
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DownloadButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-download-button',
                        templateUrl: './download-button.component.html',
                        styleUrls: ['./download-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: DownloadService }]; }, { layer: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    var IgoDownloadModule = /** @class */ (function () {
        function IgoDownloadModule() {
        }
        IgoDownloadModule.forRoot = function () {
            return {
                ngModule: IgoDownloadModule
            };
        };
        return IgoDownloadModule;
    }());
    IgoDownloadModule.ɵfac = function IgoDownloadModule_Factory(t) { return new (t || IgoDownloadModule)(); };
    IgoDownloadModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoDownloadModule });
    IgoDownloadModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule,
                i2$1.IgoLanguageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoDownloadModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i3.MatTooltipModule,
                            i2$1.IgoLanguageModule
                        ],
                        exports: [DownloadButtonComponent],
                        declarations: [DownloadButtonComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoDownloadModule, { declarations: [DownloadButtonComponent], imports: [i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule,
                i2$1.IgoLanguageModule], exports: [DownloadButtonComponent] });
    })();

    function FeatureDetailsComponent_table_0_tr_2_td_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td");
            i0__namespace.ɵɵelement(1, "mat-icon", 7);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r4.icon);
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td");
            i0__namespace.ɵɵelementStart(1, "a", 8);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var property_r3 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("href", property_r3.value, i0__namespace.ɵɵsanitizeUrl);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate2(" ", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.targetHtmlUrl"), " ", ctx_r5.title, "");
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var property_r3 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", property_r3.key, " ");
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "td", 10);
        }
        if (rf & 2) {
            var property_r3 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵproperty("innerHTML", property_r3.value, i0__namespace.ɵɵsanitizeHtml);
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_5_img_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "img", 13);
            i0__namespace.ɵɵpipe(1, "async");
            i0__namespace.ɵɵpipe(2, "secureImage");
        }
        if (rf & 2) {
            var property_r3 = i0__namespace.ɵɵnextContext(2).$implicit;
            i0__namespace.ɵɵpropertyInterpolate("src", i0__namespace.ɵɵpipeBind1(1, 1, i0__namespace.ɵɵpipeBind1(2, 3, property_r3.value)), i0__namespace.ɵɵsanitizeUrl);
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_5_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.targetHtmlUrl"), " ");
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td");
            i0__namespace.ɵɵelementStart(1, "a", 8);
            i0__namespace.ɵɵtemplate(2, FeatureDetailsComponent_table_0_tr_2_td_5_img_2_Template, 3, 5, "img", 11);
            i0__namespace.ɵɵtemplate(3, FeatureDetailsComponent_table_0_tr_2_td_5_ng_template_3_Template, 3, 3, "ng-template", null, 12, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r14 = i0__namespace.ɵɵreference(4);
            var property_r3 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r8 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("href", property_r3.value, i0__namespace.ɵɵsanitizeUrl);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r8.isImg(property_r3.value))("ngIfElse", _r14);
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_td_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "td", 10);
            i0__namespace.ɵɵpipe(1, "json");
        }
        if (rf & 2) {
            var property_r3 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵproperty("innerHTML", i0__namespace.ɵɵpipeBind1(1, 1, property_r3.value), i0__namespace.ɵɵsanitizeHtml);
        }
    }
    function FeatureDetailsComponent_table_0_tr_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "tr");
            i0__namespace.ɵɵtemplate(1, FeatureDetailsComponent_table_0_tr_2_td_1_Template, 2, 1, "td", 4);
            i0__namespace.ɵɵtemplate(2, FeatureDetailsComponent_table_0_tr_2_td_2_Template, 4, 5, "td", 4);
            i0__namespace.ɵɵtemplate(3, FeatureDetailsComponent_table_0_tr_2_td_3_Template, 2, 1, "td", 5);
            i0__namespace.ɵɵtemplate(4, FeatureDetailsComponent_table_0_tr_2_td_4_Template, 1, 1, "td", 6);
            i0__namespace.ɵɵtemplate(5, FeatureDetailsComponent_table_0_tr_2_td_5_Template, 5, 3, "td", 4);
            i0__namespace.ɵɵtemplate(6, FeatureDetailsComponent_table_0_tr_2_td_6_Template, 2, 3, "td", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var property_r3 = ctx.$implicit;
            var ctx_r2 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === "_blank" && property_r3.key === "url");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === "_blank" && property_r3.key === "url");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === undefined);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === undefined && !ctx_r2.isObject(property_r3.value) && !ctx_r2.isUrl(property_r3.value));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === undefined && !ctx_r2.isObject(property_r3.value) && ctx_r2.isUrl(property_r3.value));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.feature.properties.target === undefined && ctx_r2.isObject(property_r3.value));
        }
    }
    function FeatureDetailsComponent_table_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "table", 2);
            i0__namespace.ɵɵelementStart(1, "tbody");
            i0__namespace.ɵɵtemplate(2, FeatureDetailsComponent_table_0_tr_2_Template, 7, 6, "tr", 3);
            i0__namespace.ɵɵpipe(3, "keyvalue");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(3, 1, ctx_r0.filterFeatureProperties(ctx_r0.feature)));
        }
    }
    function FeatureDetailsComponent_iframe_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "iframe", 14);
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("srcdoc", ctx_r1.htmlSanitizer(ctx_r1.feature.properties), i0__namespace.ɵɵsanitizeHtml)("src", ctx_r1.urlSanitizer(ctx_r1.feature.properties.url), i0__namespace.ɵɵsanitizeResourceUrl);
        }
    }
    var FeatureDetailsComponent = /** @class */ (function () {
        function FeatureDetailsComponent(cdRef, sanitizer, networkService) {
            var _this = this;
            this.cdRef = cdRef;
            this.sanitizer = sanitizer;
            this.networkService = networkService;
            this.unsubscribe$ = new rxjs.Subject();
            this.ready = false;
            this.routeEvent = new i0.EventEmitter();
            this.selectFeature = new i0.EventEmitter();
            this.htmlDisplayEvent = new i0.EventEmitter();
            this.networkService.currentState().pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (state) {
                _this.state = state;
            });
        }
        Object.defineProperty(FeatureDetailsComponent.prototype, "source", {
            get: function () {
                return this._source;
            },
            set: function (value) {
                this._source = value;
                this.cdRef.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureDetailsComponent.prototype, "feature", {
            get: function () {
                return this._feature;
            },
            set: function (value) {
                this._feature = value;
                this.cdRef.detectChanges();
                this.selectFeature.emit();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureDetailsComponent.prototype, "title", {
            /**
             * @internal
             */
            get: function () {
                return i6.getEntityTitle(this.feature);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureDetailsComponent.prototype, "icon", {
            /**
             * @internal
             */
            get: function () {
                return i6.getEntityIcon(this.feature) || 'link';
            },
            enumerable: false,
            configurable: true
        });
        FeatureDetailsComponent.prototype.ngOnInit = function () {
            this.ready = true;
        };
        FeatureDetailsComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        FeatureDetailsComponent.prototype.urlSanitizer = function (value) {
            return this.sanitizer.bypassSecurityTrustResourceUrl(value);
        };
        FeatureDetailsComponent.prototype.isHtmlDisplay = function () {
            if (this.feature && this.isObject(this.feature.properties) && this.feature.properties.target === 'iframe') {
                this.htmlDisplayEvent.emit(true);
                return true;
            }
            else {
                this.htmlDisplayEvent.emit(false);
                return false;
            }
        };
        FeatureDetailsComponent.prototype.htmlSanitizer = function (value) {
            if (!value.body || utils.userAgent.getBrowserName() === 'Internet Explorer') {
                return;
            }
            var regexBase = /<base href="[\w:\/\.]+">/;
            if (!regexBase.test(value.body)) {
                var url = new URL(value.url, window.location.origin);
                value.body = value.body.replace('<head>', "<head><base href=\"" + url.origin + "\">");
            }
            return this.sanitizer.bypassSecurityTrustHtml(value.body);
        };
        FeatureDetailsComponent.prototype.isObject = function (value) {
            return typeof value === 'object';
        };
        FeatureDetailsComponent.prototype.isUrl = function (value) {
            if (typeof value === 'string') {
                return (value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://');
            }
            else {
                return false;
            }
        };
        FeatureDetailsComponent.prototype.isImg = function (value) {
            if (this.isUrl(value)) {
                return (['jpg', 'png', 'gif'].includes(value.split('.').pop().toLowerCase()));
            }
            else {
                return false;
            }
        };
        FeatureDetailsComponent.prototype.filterFeatureProperties = function (feature) {
            var allowedFieldsAndAlias = feature.meta ? feature.meta.alias : undefined;
            var properties = {};
            var offlineButtonState;
            if (this.map) {
                this.map.offlineButtonToggle$.pipe(operators.takeUntil(this.unsubscribe$)).subscribe(function (state) {
                    offlineButtonState = state;
                });
            }
            if (feature.properties && feature.properties.Route && this.toolbox && !this.toolbox.getTool('directions')) {
                delete feature.properties.Route;
            }
            if (allowedFieldsAndAlias) {
                Object.keys(allowedFieldsAndAlias).forEach(function (field) {
                    properties[allowedFieldsAndAlias[field]] = feature.properties[field];
                });
                return properties;
            }
            else if (offlineButtonState !== undefined) {
                if (!offlineButtonState) {
                    if (this.state.connection && feature.meta && feature.meta.excludeAttribute) {
                        var excludeAttribute = feature.meta.excludeAttribute;
                        excludeAttribute.forEach(function (attribute) {
                            delete feature.properties[attribute];
                        });
                    }
                    else if (!this.state.connection && feature.meta && feature.meta.excludeAttributeOffline) {
                        var excludeAttributeOffline = feature.meta.excludeAttributeOffline;
                        excludeAttributeOffline.forEach(function (attribute) {
                            delete feature.properties[attribute];
                        });
                    }
                }
                else {
                    if (feature.meta && feature.meta.excludeAttributeOffline) {
                        var excludeAttributeOffline = feature.meta.excludeAttributeOffline;
                        excludeAttributeOffline.forEach(function (attribute) {
                            delete feature.properties[attribute];
                        });
                    }
                }
            }
            else {
                if (this.state.connection && feature.meta && feature.meta.excludeAttribute) {
                    var excludeAttribute = feature.meta.excludeAttribute;
                    excludeAttribute.forEach(function (attribute) {
                        delete feature.properties[attribute];
                    });
                }
                else if (!this.state.connection && feature.meta && feature.meta.excludeAttributeOffline) {
                    var excludeAttributeOffline = feature.meta.excludeAttributeOffline;
                    excludeAttributeOffline.forEach(function (attribute) {
                        delete feature.properties[attribute];
                    });
                }
            }
            return feature.properties;
        };
        return FeatureDetailsComponent;
    }());
    FeatureDetailsComponent.ɵfac = function FeatureDetailsComponent_Factory(t) { return new (t || FeatureDetailsComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i1__namespace$4.DomSanitizer), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.NetworkService)); };
    FeatureDetailsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: FeatureDetailsComponent, selectors: [["igo-feature-details"]], inputs: { source: "source", map: "map", toolbox: "toolbox", feature: "feature" }, outputs: { routeEvent: "routeEvent", selectFeature: "selectFeature", htmlDisplayEvent: "htmlDisplayEvent" }, decls: 2, vars: 2, consts: [["class", "igo-striped mat-typography", 4, "ngIf"], [3, "srcdoc", "src", 4, "ngIf"], [1, "igo-striped", "mat-typography"], [4, "ngFor", "ngForOf"], [4, "ngIf"], ["id", "keyValue", 4, "ngIf"], [3, "innerHTML", 4, "ngIf"], ["mat-list-avatar", "", 3, "svgIcon"], ["target", "_blank", "rel", "noopener noreferrer", 3, "href"], ["id", "keyValue"], [3, "innerHTML"], ["width", "225", "heigth", "auto", 3, "src", 4, "ngIf", "ngIfElse"], ["notImg", ""], ["width", "225", "heigth", "auto", 3, "src"], [3, "srcdoc", "src"]], template: function FeatureDetailsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, FeatureDetailsComponent_table_0_Template, 4, 3, "table", 0);
                i0__namespace.ɵɵtemplate(1, FeatureDetailsComponent_iframe_1_Template, 1, 2, "iframe", 1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.ready && ctx.feature && ctx.isObject(ctx.feature.properties) && ctx.feature.properties.target !== "iframe");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isHtmlDisplay());
            }
        }, directives: [i1__namespace$1.NgIf, i1__namespace$1.NgForOf, i4__namespace.MatIcon], pipes: [i6__namespace.KeyValuePipe, i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe, i6__namespace.SecureImagePipe, i1__namespace$1.JsonPipe], styles: ["table[_ngcontent-%COMP%]{width:100%}table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{padding:5px}#keyValue[_ngcontent-%COMP%]{width:30%}table[_ngcontent-%COMP%]     .routing{cursor:pointer}iframe[_ngcontent-%COMP%]{height:calc(100% - 4px);width:100%;border:0}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(FeatureDetailsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-feature-details',
                        templateUrl: './feature-details.component.html',
                        styleUrls: ['./feature-details.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace$4.DomSanitizer }, { type: i2__namespace$1.NetworkService }]; }, { source: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], toolbox: [{
                    type: i0.Input
                }], feature: [{
                    type: i0.Input
                }], routeEvent: [{
                    type: i0.Output
                }], selectFeature: [{
                    type: i0.Output
                }], htmlDisplayEvent: [{
                    type: i0.Output
                }] });
    })();

    var _c0$b = ["igoForm"];
    var _c1$9 = ["*", [["", "formButtons", ""]]];
    var _c2$4 = ["*", "[formButtons]"];
    /**
     * A configurable form, optionnally bound to a feature.
     * This component creates an entity form and, on submit,
     * returns a feature made out of the submitted data. It also
     * does things like managing the feature visibility while it's being updated
     * as well as disabling the selection of another feature.
     */
    var FeatureFormComponent = /** @class */ (function () {
        function FeatureFormComponent() {
            this.feature$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Event emitted when the form is submitted
             */
            this.submitForm = new i0.EventEmitter();
        }
        Object.defineProperty(FeatureFormComponent.prototype, "feature", {
            get: function () { return this.feature$.value; },
            /**
             * Feature to update
             */
            set: function (value) { this.feature$.next(value); },
            enumerable: false,
            configurable: true
        });
        /**
         * Transform the form data to a feature and emit an event
         * @param event Form submit event
         * @internal
         */
        FeatureFormComponent.prototype.onSubmit = function (data) {
            var feature = this.formDataToFeature(data);
            this.submitForm.emit(feature);
        };
        FeatureFormComponent.prototype.getData = function () {
            return this.formDataToFeature(this.igoForm.getData());
        };
        /**
         * Transform the form data to a feature
         * @param data Form data
         * @returns A feature
         */
        FeatureFormComponent.prototype.formDataToFeature = function (data) {
            var properties = {};
            var meta = {};
            if (this.feature === undefined) {
                meta.id = utils.uuid();
            }
            else {
                Object.assign(properties, this.feature.properties);
                Object.assign(meta, this.feature.meta, {
                    revision: i6.getEntityRevision(this.feature) + 1
                });
            }
            var propertyPrefix = 'properties.';
            Object.entries(data).forEach(function (entry) {
                var _a = __read(entry, 2), key = _a[0], value = _a[1];
                if (key.startsWith(propertyPrefix)) {
                    var property = key.substr(propertyPrefix.length);
                    properties[property] = value;
                }
            });
            var geometry = data.geometry;
            if (geometry === undefined && this.feature !== undefined) {
                geometry = this.feature.geometry;
            }
            return {
                meta: meta,
                type: FEATURE,
                geometry: geometry,
                projection: 'EPSG:4326',
                properties: properties
            };
        };
        return FeatureFormComponent;
    }());
    FeatureFormComponent.ɵfac = function FeatureFormComponent_Factory(t) { return new (t || FeatureFormComponent)(); };
    FeatureFormComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: FeatureFormComponent, selectors: [["igo-feature-form"]], viewQuery: function FeatureFormComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$b, 7);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.igoForm = _t.first);
            }
        }, inputs: { form: "form", feature: "feature" }, outputs: { submitForm: "submitForm" }, ngContentSelectors: _c2$4, decls: 5, vars: 4, consts: [[3, "form", "formData", "submitForm"], ["igoForm", ""]], template: function FeatureFormComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵprojectionDef(_c1$9);
                i0__namespace.ɵɵelementStart(0, "igo-form", 0, 1);
                i0__namespace.ɵɵlistener("submitForm", function FeatureFormComponent_Template_igo_form_submitForm_0_listener($event) { return ctx.onSubmit($event); });
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵprojection(3);
                i0__namespace.ɵɵprojection(4, 1, ["formButtons", ""]);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("form", ctx.form)("formData", i0__namespace.ɵɵpipeBind1(2, 2, ctx.feature$));
            }
        }, directives: [i6__namespace.FormComponent], pipes: [i1__namespace$1.AsyncPipe], styles: ["[_nghost-%COMP%]{display:block}igo-form[_ngcontent-%COMP%]{height:100%}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(FeatureFormComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-feature-form',
                        templateUrl: './feature-form.component.html',
                        styleUrls: ['./feature-form.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { form: [{
                    type: i0.Input
                }], feature: [{
                    type: i0.Input
                }], submitForm: [{
                    type: i0.Output
                }], igoForm: [{
                    type: i0.ViewChild,
                    args: ['igoForm', { static: true }]
                }] });
    })();

    exports.GeometryType = void 0;
    (function (GeometryType) {
        GeometryType["Point"] = "Point";
        GeometryType["LineString"] = "LineString";
        GeometryType["Polygon"] = "Polygon";
        GeometryType["Circle"] = "Circle";
    })(exports.GeometryType || (exports.GeometryType = {}));

    /* eslint-disable */
    // See this issue: https://github.com/Microsoft/TypeScript/issues/13965
    // And the solution: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
    // for an explanation as to why the prototype is set manually
    /* eslint-enable */
    var GeometrySliceError = /** @class */ (function (_super) {
        __extends(GeometrySliceError, _super);
        function GeometrySliceError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return GeometrySliceError;
    }(Error));
    var GeometrySliceMultiPolygonError = /** @class */ (function (_super) {
        __extends(GeometrySliceMultiPolygonError, _super);
        function GeometrySliceMultiPolygonError() {
            var _this = _super.call(this, 'Can\'t slice a MultiPolygon.') || this;
            Object.setPrototypeOf(_this, GeometrySliceMultiPolygonError.prototype);
            return _this;
        }
        return GeometrySliceMultiPolygonError;
    }(GeometrySliceError));
    var GeometrySliceLineStringError = /** @class */ (function (_super) {
        __extends(GeometrySliceLineStringError, _super);
        function GeometrySliceLineStringError() {
            var _this = _super.call(this, 'Can\'t slice with a line that has more than 2 points.') || this;
            Object.setPrototypeOf(_this, GeometrySliceLineStringError.prototype);
            return _this;
        }
        return GeometrySliceLineStringError;
    }(GeometrySliceError));
    var GeometrySliceTooManyIntersectionError = /** @class */ (function (_super) {
        __extends(GeometrySliceTooManyIntersectionError, _super);
        function GeometrySliceTooManyIntersectionError() {
            var _this = _super.call(this, 'More than 2 intersections found between the target polygon and the slicing line.') || this;
            Object.setPrototypeOf(_this, GeometrySliceTooManyIntersectionError.prototype);
            return _this;
        }
        return GeometrySliceTooManyIntersectionError;
    }(GeometrySliceError));

    /**
     * Create a default style for draw and modify interactions
     * @param color Style color (R, G, B)
     * @returns OL style
     */
    function createDrawInteractionStyle(color) {
        color = color || [0, 153, 255];
        return new olstyle__namespace.Circle({
            stroke: new olstyle__namespace.Stroke({
                color: color.concat([1]),
                width: 2
            }),
            fill: new olstyle__namespace.Fill({
                color: color.concat([0.2])
            }),
            radius: 8
        });
    }
    /**
     * Create a default style for drawing a hole
     * @returns OL style
     */
    function createDrawHoleInteractionStyle() {
        return new olstyle__namespace.Style({
            stroke: new olstyle__namespace.Stroke({
                color: [0, 153, 255, 1],
                width: 2
            })
        });
    }
    /**
     * Slice geometry into two parts
     * @param olGeometry OL geometry
     * @param olSlicer Slicing line
     * @returns New OL geometries
     */
    function sliceOlGeometry(olGeometry, olSlicer) {
        if (olGeometry instanceof OlPolygon__default["default"]) {
            return sliceOlPolygon(olGeometry, olSlicer);
        }
        else if (olGeometry instanceof OlLineString__default["default"]) {
            return sliceOlLineString(olGeometry, olSlicer);
        }
        return [];
    }
    /**
     * Slice OL LineString into one or more lines
     * @param olLineString OL line string
     * @param olSlicer Slicing line
     * @returns New OL line strings
     */
    function sliceOlLineString(olLineString, olSlicer) {
        return [];
    }
    /**
     * Slice OL Polygon into one or more polygons
     * @param olPolygon OL polygon
     * @param olSlicer Slicing line
     * @returns New OL polygons
     */
    function sliceOlPolygon(olPolygon, olSlicer) {
        if (olPolygon.getLinearRingCount() > 1) {
            throw new GeometrySliceMultiPolygonError();
        }
        if (olSlicer.getCoordinates().length > 2) {
            throw new GeometrySliceLineStringError();
        }
        var olGeoJSON = new OlGeoJSON__default["default"]();
        var slicer = olGeoJSON.writeGeometryObject(olSlicer);
        var outerCoordinates = olPolygon.getLinearRing(0).getCoordinates();
        var parts = [[], []];
        var totalIntersectionCount = 0;
        for (var i = 0, ii = outerCoordinates.length - 1; i < ii; i++) {
            var segmentCoordinates = [outerCoordinates[i], outerCoordinates[i + 1]];
            var segment = helpers.lineString(segmentCoordinates);
            var intersections = lineIntersect__default["default"](segment, slicer).features;
            var intersectionCount = intersections.length;
            totalIntersectionCount += intersectionCount;
            if (intersectionCount > 1 || totalIntersectionCount > 2) {
                throw new GeometrySliceTooManyIntersectionError();
            }
            parts[0].push(segmentCoordinates[0]);
            if (intersectionCount === 1) {
                var intersection = intersections[0].geometry.coordinates;
                parts[0].push(intersection);
                parts[1].push(intersection);
                parts.reverse();
            }
        }
        if (totalIntersectionCount <= 1) {
            return [];
        }
        parts[0].push(parts[0][0]);
        parts[1].push(parts[1][0]);
        return [new OlPolygon__default["default"]([parts[0]]), new OlPolygon__default["default"]([parts[1]])];
    }
    /**
     * Splice geometry into two parts
     * @param olGeometry OL geometry
     * @param olSlicer Slicing line
     * @returns New OL geometries
     */
    function addLinearRingToOlPolygon(olPolygon, olLinearRing) {
        // TODO: make some validation and support updating an existing linear ring
        olPolygon.appendLinearRing(olLinearRing);
    }
    function getMousePositionFromOlGeometryEvent(olEvent) {
        var olGeometry = olEvent.target;
        if (olGeometry instanceof OlPolygon__default["default"]) {
            return olGeometry.getFlatCoordinates().slice(-4, -2);
        }
        var olGeometryCast = olGeometry;
        return olGeometryCast.getFlatCoordinates().slice(-2);
    }

    /**
     * Control to draw entities
     */
    var DrawControl = /** @class */ (function () {
        function DrawControl(options) {
            this.options = options;
            /**
             * Draw start observable
             */
            this.start$ = new rxjs.Subject();
            /**
             * Draw end observable
             */
            this.end$ = new rxjs.Subject();
            /**
             * Draw changes observable (while drawing)
             */
            this.changes$ = new rxjs.Subject();
            /**
             * Draw modify observable (modify drawn features)
             */
            this.modify$ = new rxjs.Subject();
            /**
             * Draw select observable (modify drawn features)
             */
            this.select$ = new rxjs.Subject();
            /**
             * Draw abort observable (abort drawn features)
             */
            this.abort$ = new rxjs.Subject();
            /**
             * Freehand mode observable (defaults to false)
             */
            this.freehand$ = new rxjs.BehaviorSubject(false);
            this.olDrawingLayer = options.drawingLayer ? options.drawingLayer : this.createOlInnerOverlayLayer();
            this.olGeometryType = this.options.geometryType;
        }
        Object.defineProperty(DrawControl.prototype, "active", {
            /**
             * Wheter the control is active
             */
            get: function () {
                return this.olMap !== undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DrawControl.prototype, "olDrawingLayerSource", {
            /**
             * OL overlay source
             * @internal
             */
            get: function () {
                return this.olDrawingLayer.getSource();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add or remove this control to/from a map.
         * @param map OL Map
         */
        DrawControl.prototype.setOlMap = function (olMap, activateModifyAndSelect) {
            if (!olMap) {
                this.clearOlInnerOverlaySource();
                this.removeOlInnerOverlayLayer();
                this.removeOlInteractions();
                this.olMap = olMap;
                return;
            }
            this.olMap = olMap;
            this.addOlInnerOverlayLayer();
            this.addOlInteractions(activateModifyAndSelect);
        };
        /**
         * Return the drawing layer source
         */
        DrawControl.prototype.getSource = function () {
            return this.olDrawingLayerSource;
        };
        /**
         * Set the current geometry type
         * @param geometryType the geometry type
         */
        DrawControl.prototype.setGeometryType = function (geometryType) {
            this.olGeometryType = geometryType;
        };
        /**
         * Create a drawing source if none is defined in the options
         */
        DrawControl.prototype.createOlInnerOverlayLayer = function () {
            return new OlVectorLayer__default["default"]({
                source: this.options.drawingLayerSource ? this.options.drawingLayerSource : new OlVectorSource__default["default"](),
                style: this.options.drawingLayerStyle,
                zIndex: 500
            });
        };
        /**
         * Clear the drawing layer if it wasn't defined in the options
         */
        DrawControl.prototype.removeOlInnerOverlayLayer = function () {
            if (!this.options.drawingLayer && this.olMap) {
                this.olMap.removeLayer(this.olDrawingLayer);
            }
        };
        /**
         * Add the drawing layer if it wasn't defined in the options
         */
        DrawControl.prototype.addOlInnerOverlayLayer = function () {
            if (!this.options.drawingLayer) {
                this.olMap.addLayer(this.olDrawingLayer);
            }
        };
        /**
         * Clear the drawing layer source if it wasn't defined in the options
         */
        DrawControl.prototype.clearOlInnerOverlaySource = function () {
            if (!this.options.drawingLayer && !this.options.drawingLayerSource) {
                this.olDrawingLayerSource.clear(true);
            }
        };
        /**
         * Add interactions to the map an set up some listeners
         */
        DrawControl.prototype.addOlInteractions = function (activateModifyAndSelect) {
            var _this = this;
            // Create Draw interaction
            var olDrawInteraction;
            if (!this.freehand$.getValue()) {
                olDrawInteraction = new OlDraw__default["default"]({
                    type: this.olGeometryType,
                    source: this.getSource(),
                    stopClick: true,
                    style: this.options.interactionStyle,
                    maxPoints: this.options.maxPoints,
                    freehand: false,
                    freehandCondition: function () { return false; }
                });
            }
            else {
                if (this.olGeometryType === 'Point') {
                    olDrawInteraction = new OlDraw__default["default"]({
                        type: 'Circle',
                        source: this.getSource(),
                        maxPoints: this.options.maxPoints,
                        freehand: true
                    });
                }
                else {
                    olDrawInteraction = new OlDraw__default["default"]({
                        type: this.olGeometryType,
                        source: this.getSource(),
                        maxPoints: this.options.maxPoints,
                        freehand: true
                    });
                }
            }
            // Add Draw interaction to map and create listeners
            this.olMap.addInteraction(olDrawInteraction);
            this.olDrawInteraction = olDrawInteraction;
            this.onDrawStartKey = olDrawInteraction.on('drawstart', function (event) { return _this.onDrawStart(event); });
            this.onDrawEndKey = olDrawInteraction.on('drawend', function (event) { return _this.onDrawEnd(event); });
            this.onDrawAbortKey = olDrawInteraction.on('drawabort', function (event) { return _this.abort$.next(event.feature.getGeometry()); });
            if (activateModifyAndSelect) {
                // Create a Modify interaction, add it to map and create a listener
                var olModifyInteraction = new OlModify__default["default"]({
                    source: this.getSource()
                });
                this.olMap.addInteraction(olModifyInteraction);
                this.olModifyInteraction = olModifyInteraction;
                // Create a select interaction and add it to map
                if (!this.olSelectInteraction) {
                    var olSelectInteraction = new OlSelect__default["default"]({
                        condition: olCondition.doubleClick,
                        style: undefined
                    });
                    this.olMap.addInteraction(olSelectInteraction);
                    this.olSelectInteraction = olSelectInteraction;
                    this.olSelectInteraction.on('select', function (event) { return _this.onSelect(event); });
                }
            }
        };
        /**
         * Remove interactions
         */
        DrawControl.prototype.removeOlInteractions = function () {
            this.unsubscribeKeyDown();
            olObservable.unByKey([this.onDrawStartKey, this.onDrawEndKey, this.onDrawKey, this.onDrawAbortKey]);
            if (this.olMap) {
                this.olMap.removeInteraction(this.olDrawInteraction);
                this.olMap.removeInteraction(this.olModifyInteraction);
            }
            this.olDrawInteraction = undefined;
            this.olModifyInteraction = undefined;
        };
        /**
         * When drawing starts, clear the overlay and start watching for changes
         * @param event Draw start event
         */
        DrawControl.prototype.onDrawStart = function (event) {
            var _this = this;
            var olGeometry = event.feature.getGeometry();
            this.start$.next(olGeometry);
            this.clearOlInnerOverlaySource();
            this.onDrawKey = olGeometry.on('change', function (olGeometryEvent) {
                _this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);
                _this.changes$.next(olGeometryEvent.target);
            });
            this.subscribeKeyDown();
        };
        /**
         * When drawing ends, update the drawing (feature) geometry observable and add
         * @param event Draw event (drawend)
         */
        DrawControl.prototype.onDrawEnd = function (event) {
            var _this = this;
            this.unsubscribeKeyDown();
            olObservable.unByKey(this.onDrawKey);
            var olGeometry = event.feature.getGeometry();
            olGeometry.on('change', function () {
                _this.modify$.next(olGeometry);
            });
            this.end$.next(olGeometry);
        };
        /**
         * When a feature is selected, update the selected feature observable
         * @param event Modify event (modifyend)
         */
        DrawControl.prototype.onSelect = function (event) {
            if (event.selected.length === 1) {
                this.select$.next(event.selected[0]);
            }
        };
        /**
         * Subscribe to key downs used as drawing interaction shorcuts
         */
        DrawControl.prototype.subscribeKeyDown = function () {
            var _this = this;
            this.unsubscribeKeyDown();
            this.keyDown$$ = rxjs.fromEvent(document, 'keydown').subscribe(function (event) {
                // On Escape or 'c' keydowns, abort the current drawing
                if (event.key === 'Escape') {
                    _this.olDrawInteraction.abortDrawing();
                    return;
                }
                // On Backspace or 'u' keydowns, remove last vertex of current drawing
                if (event.key === 'Backspace') {
                    _this.olDrawInteraction.removeLastPoint();
                }
                // On Enter or 'f' keydowns, finish current drawing
                if (event.key === 'Enter') {
                    _this.olDrawInteraction.finishDrawing();
                }
                // On space bar key down, pan to the current mouse position
                if (event.key === ' ') {
                    _this.olMap.getView().animate({
                        center: _this.mousePosition,
                        duration: 100
                    });
                    return;
                }
            });
        };
        /**
         * Unsubscribe to key down
         */
        DrawControl.prototype.unsubscribeKeyDown = function () {
            if (this.keyDown$$) {
                this.keyDown$$.unsubscribe();
                this.keyDown$$ = undefined;
            }
        };
        return DrawControl;
    }());

    var DrawPopupComponent = /** @class */ (function () {
        function DrawPopupComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
        }
        DrawPopupComponent.prototype.noLabel = function () {
            this.dialogRef.close();
        };
        return DrawPopupComponent;
    }());
    DrawPopupComponent.ɵfac = function DrawPopupComponent_Factory(t) { return new (t || DrawPopupComponent)(i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialogRef), i0__namespace.ɵɵdirectiveInject(i1.MAT_DIALOG_DATA)); };
    DrawPopupComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DrawPopupComponent, selectors: [["igo-draw-popup-component"]], decls: 14, vars: 11, consts: [["mat-dialog-content", ""], [1, "mat-typography"], [1, "example-full-width"], ["matInput", "", 3, "placeholder", "value"], ["input", ""], ["mat-dialog-actions", ""], ["mat-raised-button", "", 3, "click"], ["mat-raised-button", "", "color", "primary", 3, "mat-dialog-close"]], template: function DrawPopupComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "p", 1);
                i0__namespace.ɵɵtext(2);
                i0__namespace.ɵɵpipe(3, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(4, "mat-form-field", 2);
                i0__namespace.ɵɵelement(5, "input", 3, 4);
                i0__namespace.ɵɵpipe(7, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(8, "div", 5);
                i0__namespace.ɵɵelementStart(9, "button", 6);
                i0__namespace.ɵɵlistener("click", function DrawPopupComponent_Template_button_click_9_listener() { return ctx.noLabel(); });
                i0__namespace.ɵɵtext(10);
                i0__namespace.ɵɵpipe(11, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(12, "button", 7);
                i0__namespace.ɵɵtext(13, "OK ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(6);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 5, "igo.geo.draw.dialogInstruction"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(7, 7, "igo.geo.draw.dialogTitle"));
                i0__namespace.ɵɵpropertyInterpolate("value", ctx.data.currentLabel);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(11, 9, "igo.geo.draw.noLabel"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("mat-dialog-close", _r0.value);
            }
        }, directives: [i1__namespace.MatDialogContent, i12__namespace.MatFormField, i5__namespace$1.MatInput, i1__namespace.MatDialogActions, i2__namespace.MatButton, i1__namespace.MatDialogClose], pipes: [i7__namespace.TranslatePipe], styles: [""] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DrawPopupComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-draw-popup-component',
                        templateUrl: './draw-popup.component.html',
                        styleUrls: ['./draw-popup.component.scss'],
                    }]
            }], function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, null);
    })();

    var DrawShorcutsComponent = /** @class */ (function () {
        function DrawShorcutsComponent() {
        }
        return DrawShorcutsComponent;
    }());
    DrawShorcutsComponent.ɵfac = function DrawShorcutsComponent_Factory(t) { return new (t || DrawShorcutsComponent)(); };
    DrawShorcutsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DrawShorcutsComponent, selectors: [["igo-draw-shorcuts"]], decls: 24, vars: 12, consts: [[1, "shortcut", "mat-typography"], ["svgIcon", "keyboard-return", 1, "shortcut-icon"], ["svgIcon", "backspace-outline", 1, "shortcut-icon"], ["svgIcon", "keyboard-esc", 1, "shortcut-icon"], ["svgIcon", "keyboard-space", 1, "shortcut-icon"], [1, "shortcuts-close"], ["mat-raised-button", "", "mat-dialog-close", "", "color", "primary"]], template: function DrawShorcutsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-dialog-content");
                i0__namespace.ɵɵelementStart(1, "div");
                i0__namespace.ɵɵelementStart(2, "span", 0);
                i0__namespace.ɵɵelement(3, "mat-icon", 1);
                i0__namespace.ɵɵtext(4);
                i0__namespace.ɵɵpipe(5, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "div");
                i0__namespace.ɵɵelementStart(7, "span", 0);
                i0__namespace.ɵɵelement(8, "mat-icon", 2);
                i0__namespace.ɵɵtext(9);
                i0__namespace.ɵɵpipe(10, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(11, "div");
                i0__namespace.ɵɵelementStart(12, "span", 0);
                i0__namespace.ɵɵelement(13, "mat-icon", 3);
                i0__namespace.ɵɵtext(14);
                i0__namespace.ɵɵpipe(15, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(16, "div");
                i0__namespace.ɵɵelementStart(17, "span", 0);
                i0__namespace.ɵɵelement(18, "mat-icon", 4);
                i0__namespace.ɵɵtext(19);
                i0__namespace.ɵɵpipe(20, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(21, "mat-dialog-actions", 5);
                i0__namespace.ɵɵelementStart(22, "button", 6);
                i0__namespace.ɵɵtext(23, "OK");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 4, "igo.geo.draw.finish"));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(10, 6, "igo.geo.draw.undo"));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(15, 8, "igo.geo.draw.abort"));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(20, 10, "igo.geo.draw.move"));
            }
        }, directives: [i1__namespace.MatDialogContent, i4__namespace.MatIcon, i1__namespace.MatDialogActions, i2__namespace.MatButton, i1__namespace.MatDialogClose], pipes: [i7__namespace.TranslatePipe], styles: [".shortcut[_ngcontent-%COMP%]{display:flex;align-items:center}.shortcut-icon[_ngcontent-%COMP%]{margin-right:10px}.shortcuts-close[_ngcontent-%COMP%]{display:flex;justify-content:center}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DrawShorcutsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-draw-shorcuts',
                        templateUrl: './draw-shorcuts.component.html',
                        styleUrls: ['./draw-shorcuts.component.scss']
                    }]
            }], null, null);
    })();

    var _a, _b;
    var MEASURE_UNIT_AUTO = 'auto';
    exports.MeasureType = void 0;
    (function (MeasureType) {
        MeasureType["Length"] = "length";
        MeasureType["Area"] = "area";
    })(exports.MeasureType || (exports.MeasureType = {}));
    exports.MeasureLengthUnit = void 0;
    (function (MeasureLengthUnit) {
        MeasureLengthUnit["Meters"] = "meters";
        MeasureLengthUnit["Kilometers"] = "kilometers";
        MeasureLengthUnit["Miles"] = "miles";
        MeasureLengthUnit["Feet"] = "feet";
    })(exports.MeasureLengthUnit || (exports.MeasureLengthUnit = {}));
    var MeasureLengthUnitAbbreviation = (_a = {},
        _a[exports.MeasureLengthUnit.Meters] = 'm',
        _a[exports.MeasureLengthUnit.Kilometers] = 'km',
        _a[exports.MeasureLengthUnit.Miles] = 'mi',
        _a[exports.MeasureLengthUnit.Feet] = 'ft',
        _a);
    exports.MeasureAreaUnit = void 0;
    (function (MeasureAreaUnit) {
        MeasureAreaUnit["SquareMeters"] = "squareMeters";
        MeasureAreaUnit["SquareKilometers"] = "squareKilometers";
        MeasureAreaUnit["SquareMiles"] = "squareMiles";
        MeasureAreaUnit["SquareFeet"] = "squareFeet";
        MeasureAreaUnit["Hectares"] = "hectares";
        MeasureAreaUnit["Acres"] = "acres";
    })(exports.MeasureAreaUnit || (exports.MeasureAreaUnit = {}));
    var MeasureAreaUnitAbbreviation = (_b = {},
        _b[exports.MeasureAreaUnit.SquareMeters] = 'm²',
        _b[exports.MeasureAreaUnit.SquareKilometers] = 'km²',
        _b[exports.MeasureAreaUnit.SquareMiles] = 'mi²',
        _b[exports.MeasureAreaUnit.SquareFeet] = 'ft²',
        _b[exports.MeasureAreaUnit.Hectares] = 'ha',
        _b[exports.MeasureAreaUnit.Acres] = 'ac',
        _b);

    /**
     * Convert value from meters to kilometers
     * @param value Value in meters
     * @returns Value in kilometers
     */
    function metersToKilometers(value) {
        return value * 0.001;
    }
    /**
     * Convert value from meters to feet
     * @param value Value in meters
     * @returns Value in feet
     */
    function metersToFeet(value) {
        return value * 3.2808;
    }
    /**
     * Convert value from meters to miles
     * @param value Value in meters
     * @returns Value in miles
     */
    function metersToMiles(value) {
        return value * 0.000621;
    }
    /**
     * Convert value from square meters to square kilometers
     * @param value Value in square meters
     * @returns Value in square kilometers
     */
    function squareMetersToSquareKilometers(value) {
        return value * 0.000001;
    }
    /**
     * Convert value from square meters to square miles
     * @param value Value in square meters
     * @returns Value in square miles
     */
    function squareMetersToSquareMiles(value) {
        return value * 0.0000003861;
    }
    /**
     * Convert value from square meters to square feet
     * @param value Value in square meters
     * @returns Value in square feet
     */
    function squareMetersToSquareFeet(value) {
        return value * 10.764;
    }
    /**
     * Convert value from square meters to hectares
     * @param value Value in square meters
     * @returns Value in hectares
     */
    function squareMetersToHectares(value) {
        return value * 0.0001;
    }
    /**
     * Convert value from square meters to acres
     * @param value Value in square meters
     * @returns Value in acres
     */
    function squareMetersToAcres(value) {
        return value * 0.00024711;
    }
    /**
     * Convert value from meters to the specified length unit
     * @param value Value in meters
     * @param unit Length unit
     * @returns Value in unit
     */
    function metersToUnit(value, unit) {
        var conversionMapper = new Map([
            [exports.MeasureLengthUnit.Meters, function (val) { return val; }],
            [exports.MeasureLengthUnit.Kilometers, metersToKilometers],
            [exports.MeasureLengthUnit.Miles, metersToMiles],
            [exports.MeasureLengthUnit.Feet, metersToFeet],
        ]);
        var conversion = conversionMapper.get(unit);
        return conversion ? conversion(value) : undefined;
    }
    /**
     * Convert value from square meters to the specified area unit
     * @param value Value in meters
     * @param unit Area unit
     * @returns Value in unit
     */
    function squareMetersToUnit(value, unit) {
        var conversionMapper = new Map([
            [exports.MeasureAreaUnit.SquareMeters, function (val) { return val; }],
            [exports.MeasureAreaUnit.SquareKilometers, squareMetersToSquareKilometers],
            [exports.MeasureAreaUnit.SquareMiles, squareMetersToSquareMiles],
            [exports.MeasureAreaUnit.SquareFeet, squareMetersToSquareFeet],
            [exports.MeasureAreaUnit.Hectares, squareMetersToHectares],
            [exports.MeasureAreaUnit.Acres, squareMetersToAcres],
        ]);
        var conversion = conversionMapper.get(unit);
        return conversion ? conversion(value) : undefined;
    }
    /**
     * This method format a measure to a readable format
     * @param measure Measure
     * @param options Formatting options
     * @returns Formatted measure
     */
    function formatMeasure(measure, options, languageService) {
        var decimal = options.decimal;
        if (decimal === undefined || decimal < 0) {
            decimal = 1;
        }
        var parts = [];
        if (options.locale !== undefined) {
            parts.push(measure.toLocaleString(options.locale, {
                minimumFractionDigits: decimal,
                maximumFractionDigits: decimal
            }));
        }
        else {
            parts.push(measure.toFixed(decimal).toString());
        }
        if (options.unit !== undefined && options.unitAbbr === true) {
            if (languageService) {
                parts.push(MeasureLengthUnitAbbreviation[options.unit] ?
                    languageService.translate.instant('igo.geo.measure.' + MeasureLengthUnitAbbreviation[options.unit]) :
                    languageService.translate.instant('igo.geo.measure.' + MeasureAreaUnitAbbreviation[options.unit]));
            }
            else {
                parts.push(MeasureLengthUnitAbbreviation[options.unit] || MeasureAreaUnitAbbreviation[options.unit]);
            }
        }
        return parts.filter(function (p) { return p !== undefined; }).join(' ');
    }
    /**
     * Compute best length measure unit for a given measure in meters
     * @param value Value in meters
     * @returns Measure unit
     */
    function computeBestLengthUnit(value) {
        var unit = exports.MeasureLengthUnit.Meters;
        var converted = value;
        var possibleUnits = [exports.MeasureLengthUnit.Kilometers];
        while (converted > 1000 && possibleUnits.length > 0) {
            unit = possibleUnits.pop();
            converted = metersToUnit(value, unit);
        }
        return unit;
    }
    /**
     * Compute best length measure unit for a given measure in square meters
     * @param value Value in meters
     * @returns Measure unit
     */
    function computeBestAreaUnit(value) {
        var unit = exports.MeasureAreaUnit.SquareMeters;
        var converted = value;
        var possibleUnits = [exports.MeasureAreaUnit.SquareKilometers];
        while (converted > 1000000 && possibleUnits.length > 0) {
            unit = possibleUnits.pop();
            converted = squareMetersToUnit(value, unit);
        }
        return unit;
    }
    /**
     * Create a default style for a measure interaction
     * @returns OL style
     */
    function createMeasureInteractionStyle() {
        return new olstyle__namespace.Style({
            stroke: new olstyle__namespace.Stroke({
                color: '#ffcc33',
                lineDash: [10, 10],
                width: 2
            }),
            fill: new olstyle__namespace.Fill({
                color: 'rgba(255, 255, 255, 0.2)'
            }),
            image: new olstyle__namespace.Circle({
                radius: 5,
                stroke: new olstyle__namespace.Stroke({
                    color: '#ffcc33',
                }),
                fill: new olstyle__namespace.Fill({
                    color: 'rgba(255, 255, 255, 0.2)'
                })
            })
        });
    }
    /**
     * Create a default style for a measure layer
     * @returns OL style
     */
    function createMeasureLayerStyle() {
        return new olstyle__namespace.Style({
            stroke: new olstyle__namespace.Stroke({
                color: '#ffcc33',
                width: 2
            }),
            fill: new olstyle__namespace.Fill({
                color: 'rgba(255, 255, 255, 0.2)'
            })
        });
    }
    /**
     * Compute the length in meters of an OL geometry with a given projection
     * @param olGeometry Ol geometry
     * @param projection olGeometry's projection
     * @returns Length in meters
     */
    function measureOlGeometryLength(olGeometry, projection) {
        if (olGeometry instanceof OlPoint__default["default"]) {
            return undefined;
        }
        if (olGeometry.getFlatCoordinates().length === 0) {
            return undefined;
        }
        return sphere.getLength(olGeometry, { projection: projection });
    }
    /**
     * Compute the area in square meters of an OL geometry with a given projection
     * @param olGeometry Ol geometry
     * @param projection olGeometry's projection
     * @returns Area in square meters
     */
    function measureOlGeometryArea(olGeometry, projection) {
        if (olGeometry instanceof OlPoint__default["default"] || olGeometry instanceof OlLineString__default["default"]) {
            return undefined;
        }
        if (olGeometry.getFlatCoordinates().length === 0) {
            return undefined;
        }
        return sphere.getArea(olGeometry, { projection: projection });
    }
    /**
     * Compute the area (square meters), length (meters) and last length (meters)
     * of an OL geometry with a given projection.
     * @param olGeometry Ol geometry
     * @param projection olGeometry's projection
     * @returns Computed measure
     */
    function measureOlGeometry(olGeometry, projection) {
        var length = measureOlGeometryLength(olGeometry, projection);
        var area = measureOlGeometryArea(olGeometry, projection);
        var lengths = [];
        var coordinates = olGeometry.getFlatCoordinates();
        var coordinatesLength = coordinates.length;
        for (var i = 0; i <= coordinatesLength - 4; i += 2) {
            var olSegment = new OlLineString__default["default"]([
                [coordinates[i], coordinates[i + 1]],
                [coordinates[i + 2], coordinates[i + 3]]
            ]);
            lengths.push(measureOlGeometryLength(olSegment, projection));
        }
        return {
            area: area,
            length: length,
            lengths: lengths
        };
    }
    /**
     * Update an OL geometry midpoints and return an array of those points
     * @param olGeometry OL Geometry
     * @returns OL points
     */
    function updateOlGeometryMidpoints(olGeometry) {
        var olMidpoints;
        if (olGeometry instanceof OlPoint__default["default"]) {
            var olMidpointPoint = new OlPoint__default["default"](olGeometry.getFlatCoordinates());
            olMidpoints = new Array(1);
            olMidpoints[0] = olMidpointPoint;
        }
        else {
            olMidpoints = getOlGeometryMidpoints(olGeometry);
            // TODO: handle multi geometries
            var coordinates = olGeometry.getFlatCoordinates();
            var midpointsLength = olMidpoints.length;
            for (var i = 0; i < midpointsLength; i++) {
                var j = i * 2;
                var olSegment = new OlLineString__default["default"]([
                    [coordinates[j], coordinates[j + 1]],
                    [coordinates[j + 2], coordinates[j + 3]]
                ]);
                var midpointCoordinate = olSegment.getCoordinateAt(0.5);
                var olMidpoint = olMidpoints[i];
                if (olMidpoint !== undefined) {
                    olMidpoint.setCoordinates(midpointCoordinate);
                }
                else {
                    olMidpoints[i] = new OlPoint__default["default"](midpointCoordinate);
                }
            }
        }
        return olMidpoints;
    }
    /**
     * Clear an OL geometry midpoints and return an array of those points
     * @param olGeometry OL Geometry
     */
    function clearOlGeometryMidpoints(olGeometry) {
        var olMidpoints = olGeometry.get('_midpoints') || [];
        var midpointsLength = olMidpoints.length;
        for (var i = 0; i < midpointsLength; i++) {
            var olMidpoint = olMidpoints[i];
            if (olMidpoint !== undefined) {
                if (olMidpoint !== undefined) {
                    clearOlMidpointTooltip(olMidpoint);
                }
            }
        }
        olGeometry.set('_midpoints', undefined, true);
        return olMidpoints;
    }
    /**
     * Return an array of  OL geometry midpoints, if any
     * @param olGeometry OL Geometry
     * @returns OL points
     */
    function getOlGeometryMidpoints(olGeometry) {
        var expectedNumber;
        if (olGeometry instanceof OlCircle__default["default"]) {
            expectedNumber = 0;
        }
        else {
            expectedNumber = Math.max((olGeometry.getFlatCoordinates().length / 2) - 1, 0);
        }
        // TODO: This works but it's quite messy. If time permits,
        // clean this. Maybe a Tooltip class could handle that
        var olMidpoints = olGeometry.get('_midpoints');
        if (olMidpoints === undefined) {
            if (olGeometry instanceof OlPoint__default["default"]) {
                olMidpoints = new Array(1);
            }
            else {
                olMidpoints = new Array(expectedNumber);
            }
            olGeometry.set('_midpoints', olMidpoints, true);
            return olMidpoints;
        }
        if (expectedNumber === 0) {
            return olMidpoints;
        }
        if (expectedNumber === olMidpoints.length) {
            return olMidpoints;
        }
        if (expectedNumber > olMidpoints.length) {
            olMidpoints.push.apply(olMidpoints, __spreadArray([], __read(new Array(expectedNumber - olMidpoints.length))));
            return olMidpoints;
        }
        for (var i = expectedNumber; i < olMidpoints.length; i++) {
            var olMidpoint = olMidpoints[expectedNumber];
            if (olMidpoint !== undefined) {
                clearOlMidpointTooltip(olMidpoint);
            }
        }
        olMidpoints.splice(expectedNumber);
        return olMidpoints;
    }
    /**
     * Remove an OL midpoint's tooltip from the map
     * @param olMidpoint OL Point
     */
    function clearOlMidpointTooltip(olMidpoint) {
        var olTooltip = olMidpoint.get('_tooltip');
        if (olTooltip !== undefined) {
            var olMap = olTooltip.getMap();
            if (olMap !== undefined) {
                olMap.removeOverlay(olTooltip);
            }
        }
    }
    /**
     * Add an OL overlay at each midpoint and return an array of those overlays
     * @param olGeometry OL Geometry
     * @returns OL overlays
     */
    function updateOlTooltipsAtMidpoints(olGeometry) {
        var olMidpoints = updateOlGeometryMidpoints(olGeometry);
        var typeGeom = '';
        if (olGeometry instanceof OlLineString__default["default"]) {
            typeGeom = 'line-';
        }
        else if (olGeometry instanceof OlPolygon__default["default"]) {
            typeGeom = 'polygone-';
        }
        var olTooltips = olMidpoints.map(function (olMidpoint) {
            var olTooltip = olMidpoint.get('_tooltip');
            if (olTooltip === undefined) {
                olTooltip = createOlTooltipAtPoint(olMidpoint, false, typeGeom);
            }
            else {
                olTooltip.setPosition(olMidpoint.getFlatCoordinates());
            }
            return olTooltip;
        });
        return olTooltips;
    }
    /**
     * Return an array of OL overlay at midspoints, if any
     * @param olGeometry OL Geometry
     * @returns OL overlays
     */
    function getOlTooltipsAtMidpoints(olGeometry) {
        var olMidpoints = getOlGeometryMidpoints(olGeometry);
        return olMidpoints.map(function (olMidpoint) {
            return olMidpoint ? olMidpoint.get('_tooltip') : undefined;
        });
    }
    /**
     * Update an OL geometry center and return it
     * @param olGeometry OL Geometry
     * @returns OL point
     */
    function updateOlGeometryCenter(olGeometry) {
        var olCenter = olGeometry.get('_center');
        var centerCoordinate = olextent.getCenter(olGeometry.getExtent());
        if (olCenter !== undefined) {
            olCenter.setCoordinates(centerCoordinate);
        }
        else {
            olCenter = new OlPoint__default["default"](centerCoordinate);
            olGeometry.set('_center', olCenter);
        }
        return olCenter;
    }
    /**
     * Add an OL overlay at the center of a geometry and return that overlay
     * @param olGeometry OL Geometry
     * @returns OL overlay
     */
    function updateOlTooltipAtCenter(olGeometry) {
        var olCenter = updateOlGeometryCenter(olGeometry);
        var olTooltip = olCenter.get('_tooltip');
        if (olTooltip === undefined) {
            olTooltip = createOlTooltipAtPoint(olCenter, true);
        }
        else {
            olTooltip.setPosition(olCenter.getFlatCoordinates());
        }
        return olTooltip;
    }
    /**
     * Return an array of OL overlay at midspoints, if any
     * @param olGeometry OL Geometry
     * @returns OL overlays
     */
    function getOlTooltipAtCenter(olGeometry) {
        var olCenter = olGeometry.get('_center');
        return olCenter ? olCenter.get('_tooltip') : undefined;
    }
    /**
     * Get all the tooltips of an OL geometry
     * @param olGeometry OL Geometry
     * @returns OL overlays
     */
    function getTooltipsOfOlGeometry(olGeometry) {
        var olTooltips = [].concat(getOlTooltipsAtMidpoints(olGeometry) || []);
        var olCenterTooltip = getOlTooltipAtCenter(olGeometry);
        if (olCenterTooltip !== undefined) {
            olTooltips.push(olCenterTooltip);
        }
        return olTooltips;
    }
    /**
     * Create an OL overlay at a point and bind the overlay to the point
     * @param olPoint OL Point
     * @returns OL overlay
     */
    function createOlTooltipAtPoint(olPoint, center, srcGeomType) {
        if (center === void 0) { center = false; }
        if (srcGeomType === void 0) { srcGeomType = ''; }
        var olTooltip = new OlOverlay__default["default"]({
            element: document.createElement('div'),
            offset: [-30, -10],
            className: (center ?
                ['igo-map-tooltip',
                    'igo-map-tooltip-measure', 'igo-map-tooltip-measure-area'] : ['igo-map-tooltip', 'igo-map-tooltip-measure', "igo-map-tooltip-measure-" + srcGeomType + "segments"]).join(' '),
            stopEvent: false
        });
        olTooltip.setPosition(olPoint.getFlatCoordinates());
        olPoint.set('_tooltip', olTooltip);
        return olTooltip;
    }

    /**
     * Create a default style
     * @param fillColor the fill color
     * @param strokeColor the stroke color
     * @param strokeWidth the stroke width
     * @param label a label
     * @returns OL style
     */
    function createInteractionStyle(fillColor, strokeColor, strokeWidth, label) {
        return new olstyle__namespace.Style({
            stroke: new olstyle__namespace.Stroke({
                color: strokeColor ? strokeColor : 'rgba(143,7,7,1)',
                width: strokeWidth ? strokeWidth : 1
            }),
            fill: new olstyle__namespace.Fill({
                color: fillColor ? fillColor : 'rgba(255,255,255,0.4)'
            }),
            image: new olstyle__namespace.Circle({
                radius: 5,
                stroke: new olstyle__namespace.Stroke({
                    color: strokeColor ? strokeColor : 'rgba(143,7,7,1)',
                    width: strokeWidth ? strokeWidth : 1
                }),
                fill: new olstyle__namespace.Fill({
                    color: fillColor ? fillColor : 'rgba(255,255,255,0.4)'
                })
            })
        });
    }
    /**
     * Add an OL overlay at each midpoint and return an array of those overlays
     * @param olGeometry OL Geometry
     * @returns OL overlays
     */
    function updateOlTooltipsDrawAtMidpoints(olGeometry) {
        var olMidpoints;
        if (olGeometry instanceof OlPoint__default["default"]) {
            var olMidpointPoint = new OlPoint__default["default"](olGeometry.getFlatCoordinates());
            olMidpoints = new Array(1);
            olMidpoints[0] = olMidpointPoint;
            olGeometry.setProperties({ _midpoints: olMidpoints }, true);
        }
        else if (olGeometry instanceof OlCircle__default["default"]) {
            var olMidpointPoint = new OlPoint__default["default"](olGeometry.getCenter());
            olMidpoints = new Array(1);
            olMidpoints[0] = olMidpointPoint;
            olGeometry.setProperties({ _midpoints: olMidpoints }, true);
        }
        else {
            olMidpoints = updateOlGeometryMidpoints(olGeometry);
        }
        var olTooltips = olMidpoints.map(function (olMidpoint) {
            var olTooltip = olMidpoint.get('_tooltip');
            if (olTooltip === undefined) {
                olTooltip = createOlTooltipDrawAtPoint(olMidpoint);
            }
            else {
                olTooltip.setPosition(olMidpoint.getFlatCoordinates());
            }
            return olTooltip;
        });
        return olTooltips;
    }
    /**
     * Add an OL overlay at the center of a geometry and return that overlay
     * @param olGeometry OL Geometry
     * @returns OL overlay
     */
    function updateOlTooltipDrawAtCenter(olGeometry) {
        var olCenter = updateOlGeometryCenter(olGeometry);
        var olTooltip = olCenter.get('_tooltip');
        if (olTooltip === undefined) {
            olTooltip = createOlTooltipDrawAtPoint(olCenter);
        }
        else {
            olTooltip.setPosition(olCenter.getFlatCoordinates());
        }
        return olTooltip;
    }
    /**
     * Create an OL overlay at a point and bind the overlay to the point
     * @param olPoint OL Point
     * @returns OL overlay
     */
    function createOlTooltipDrawAtPoint(olPoint) {
        var olTooltip = new OlOverlay__default["default"]({
            element: document.createElement('div'),
            offset: [-30, -10],
            className: [
                'igo-map-tooltip',
                'igo-map-tooltip-draw'
            ].join(' '),
            stopEvent: false
        });
        olTooltip.setPosition(olPoint.getFlatCoordinates());
        olPoint.set('_tooltip', olTooltip);
        return olTooltip;
    }

    var DrawStyleService = /** @class */ (function () {
        function DrawStyleService(mapService) {
            this.mapService = mapService;
            this.fillColor = 'rgba(255,255,255,0.4)';
            this.strokeColor = 'rgba(143,7,7,1)';
            this.strokeWidth = 1;
            this.labelsAreShown = true;
        }
        DrawStyleService.prototype.getFillColor = function () {
            return this.fillColor;
        };
        DrawStyleService.prototype.setFillColor = function (fillColor) {
            this.fillColor = fillColor;
        };
        DrawStyleService.prototype.getStrokeColor = function () {
            return this.strokeColor;
        };
        DrawStyleService.prototype.setStrokeColor = function (strokeColor) {
            this.strokeColor = strokeColor;
        };
        DrawStyleService.prototype.getStrokeWidth = function () {
            return this.strokeWidth;
        };
        DrawStyleService.prototype.getLabelsAreShown = function () {
            return this.labelsAreShown;
        };
        DrawStyleService.prototype.toggleLabelsAreShown = function () {
            this.labelsAreShown = !this.labelsAreShown;
        };
        DrawStyleService.prototype.setIcon = function (icon) {
            this.icon = icon;
        };
        DrawStyleService.prototype.getIcon = function () {
            return this.icon;
        };
        DrawStyleService.prototype.createDrawingLayerStyle = function (feature, resolution, labelsAreShown, icon) {
            var style;
            var labelsAreOffset = false;
            var proj = this.mapService.getMap().projection;
            var geom = feature.getGeometry();
            if (geom instanceof OlPoint__default["default"]) {
                labelsAreOffset = !labelsAreOffset;
            }
            // if feature is a circle
            if (feature.get('rad')) {
                var coordinates = olproj.transform(feature.getGeometry().flatCoordinates, proj, 'EPSG:4326');
                style = new olstyle__namespace.Style({
                    text: new olstyle__namespace.Text({
                        text: labelsAreShown ? feature.get('draw') : '',
                        stroke: new olstyle__namespace.Stroke({
                            color: 'white',
                            width: 0.75
                        }),
                        fill: new olstyle__namespace.Fill({
                            color: 'black'
                        }),
                        font: '20px sans-serif',
                        overflow: true
                    }),
                    image: new olstyle__namespace.Circle({
                        radius: feature.get('rad') / Math.cos((Math.PI / 180) * coordinates[1]) / resolution,
                        stroke: new olstyle__namespace.Stroke({
                            color: this.strokeColor,
                            width: this.strokeWidth
                        }),
                        fill: new olstyle__namespace.Fill({
                            color: this.fillColor
                        })
                    })
                });
                return style;
                // if feature is an icon
            }
            else if (icon) {
                style = new olstyle__namespace.Style({
                    text: new olstyle__namespace.Text({
                        text: labelsAreShown ? feature.get('draw') : '',
                        offsetY: -26,
                        stroke: new olstyle__namespace.Stroke({
                            color: 'white',
                            width: 0.75
                        }),
                        fill: new olstyle__namespace.Fill({
                            color: 'black'
                        }),
                        font: '20px sans-serif',
                        overflow: true
                    }),
                    stroke: new olstyle__namespace.Stroke({
                        color: this.strokeColor,
                        width: this.strokeWidth
                    }),
                    fill: new olstyle__namespace.Fill({
                        color: this.fillColor
                    }),
                    image: new olstyle__namespace.Icon({
                        src: icon
                    })
                });
                return style;
                // if feature is a point, a linestring or a polygon
            }
            else {
                style = new olstyle__namespace.Style({
                    text: new olstyle__namespace.Text({
                        text: labelsAreShown ? feature.get('draw') : '',
                        stroke: new olstyle__namespace.Stroke({
                            color: 'white',
                            width: 0.75
                        }),
                        fill: new olstyle__namespace.Fill({
                            color: 'black'
                        }),
                        font: '20px sans-serif',
                        overflow: true,
                        offsetY: labelsAreOffset ? -15 : 0
                    }),
                    stroke: new olstyle__namespace.Stroke({
                        color: this.strokeColor,
                        width: this.strokeWidth
                    }),
                    fill: new olstyle__namespace.Fill({
                        color: this.fillColor
                    }),
                    image: new olstyle__namespace.Circle({
                        radius: 5,
                        stroke: new olstyle__namespace.Stroke({
                            color: this.strokeColor,
                            width: this.strokeWidth
                        }),
                        fill: new olstyle__namespace.Fill({
                            color: this.fillColor
                        })
                    })
                });
                return style;
            }
        };
        return DrawStyleService;
    }());
    DrawStyleService.ɵfac = function DrawStyleService_Factory(t) { return new (t || DrawStyleService)(i0__namespace.ɵɵinject(MapService)); };
    DrawStyleService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: DrawStyleService, factory: DrawStyleService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DrawStyleService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: MapService }]; }, null);
    })();

    var DrawIconService = /** @class */ (function () {
        function DrawIconService(config) {
            this.config = config;
            this.getIconsList();
        }
        DrawIconService.prototype.getIcons = function () {
            return this.icons;
        };
        DrawIconService.prototype.getPath = function () {
            return this.config.getConfig('drawingTool.icons') || [];
        };
        DrawIconService.prototype.getIconsList = function () {
            this.icons = this.getPath();
        };
        return DrawIconService;
    }());
    DrawIconService.ɵfac = function DrawIconService_Factory(t) { return new (t || DrawIconService)(i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    DrawIconService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: DrawIconService, factory: DrawIconService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DrawIconService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, null);
    })();

    function DrawComponent_mat_form_field_46_div_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 24);
            i0__namespace.ɵɵelement(1, "img", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("src", ctx_r3.icon, i0__namespace.ɵɵsanitizeUrl);
        }
    }
    function DrawComponent_mat_form_field_46_mat_option_10_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-option", 26);
            i0__namespace.ɵɵlistener("click", function DrawComponent_mat_form_field_46_mat_option_10_Template_mat_option_click_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r7_1); var icon_html_r5 = restoredCtx.$implicit; var ctx_r6 = i0__namespace.ɵɵnextContext(2); return ctx_r6.onIconChange(icon_html_r5); });
            i0__namespace.ɵɵelementStart(1, "div", 24);
            i0__namespace.ɵɵelement(2, "img", 25);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var icon_html_r5 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", icon_html_r5);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("src", icon_html_r5, i0__namespace.ɵɵsanitizeUrl);
        }
    }
    function DrawComponent_mat_form_field_46_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field");
            i0__namespace.ɵɵelementStart(1, "mat-label");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-select");
            i0__namespace.ɵɵelementStart(5, "mat-select-trigger");
            i0__namespace.ɵɵtemplate(6, DrawComponent_mat_form_field_46_div_6_Template, 2, 1, "div", 21);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(7, "mat-option", 22);
            i0__namespace.ɵɵlistener("click", function DrawComponent_mat_form_field_46_Template_mat_option_click_7_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.onIconChange(); });
            i0__namespace.ɵɵtext(8);
            i0__namespace.ɵɵpipe(9, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(10, DrawComponent_mat_form_field_46_mat_option_10_Template, 3, 2, "mat-option", 23);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.draw.icon"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.icon);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(9, 6, "igo.geo.draw.noIcon"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r0.icons);
        }
    }
    function DrawComponent_button_49_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 27);
            i0__namespace.ɵɵlistener("click", function DrawComponent_button_49_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.deleteDrawings(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelement(3, "mat-icon", 28);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.draw.delete"))("disabled", i0__namespace.ɵɵpipeBind1(2, 4, ctx_r1.selectedFeatures$).length === 0);
        }
    }
    var DrawComponent = /** @class */ (function () {
        function DrawComponent(languageService, formBuilder, drawStyleService, dialog, drawIconService) {
            this.languageService = languageService;
            this.formBuilder = formBuilder;
            this.drawStyleService = drawStyleService;
            this.dialog = dialog;
            this.drawIconService = drawIconService;
            /**
             * Table template
             * @internal
             */
            this.tableTemplate = {
                selection: true,
                selectMany: true,
                selectionCheckbox: true,
                sort: true,
                columns: [{
                        name: 'Drawing',
                        title: this.languageService.translate.instant('igo.geo.draw.labels'),
                        valueAccessor: function (feature) {
                            return feature.properties.draw;
                        }
                    }]
            };
            this.geometryType = exports.GeometryType; // Reference to the GeometryType enum
            this.draw$ = new rxjs.BehaviorSubject({}); // Observable of draw
            this.olDrawingLayerSource = new OlVectorSource__default["default"]();
            this.selectedFeatures$ = new rxjs.BehaviorSubject([]);
            this.drawControlIsDisabled = true;
            this.drawControlIsActive = false;
            this.subscriptions$$ = [];
            this.position = 'bottom';
            this.buildForm();
            this.fillColor = this.drawStyleService.getFillColor();
            this.strokeColor = this.drawStyleService.getStrokeColor();
            this.strokeWidth = this.drawStyleService.getStrokeWidth();
            this.labelsAreShown = this.drawStyleService.getLabelsAreShown();
            this.icons = this.drawIconService.getIcons();
            this.icon = this.drawStyleService.getIcon();
        }
        // Initialize the store that will contain the entities and create the Draw control
        DrawComponent.prototype.ngOnInit = function () {
            this.initStore();
            this.drawControl = this.createDrawControl(this.fillColor, this.strokeColor, this.strokeWidth);
            this.drawControl.setGeometryType(this.geometryType.Point);
            this.toggleDrawControl();
        };
        /**
         * Remove the drawing layer and the interactions
         * @internal
         */
        DrawComponent.prototype.ngOnDestroy = function () {
            this.drawControl.setOlMap(undefined);
            this.subscriptions$$.map(function (s) { return s.unsubscribe(); });
        };
        /**
         * Create a Draw Control
         * @param fillColor the fill color
         * @param strokeColor the stroke color
         * @param strokeWidth the stroke width
         * @returns a Draw Control
         */
        DrawComponent.prototype.createDrawControl = function (fillColor, strokeColor, strokeWidth) {
            var drawControl = new DrawControl({
                geometryType: undefined,
                drawingLayerSource: this.olDrawingLayerSource,
                drawingLayerStyle: new olstyle__namespace.Style({}),
                interactionStyle: createInteractionStyle(fillColor, strokeColor, strokeWidth),
            });
            return drawControl;
        };
        /**
         * Called when the user selects a new geometry type
         * @param geometryType the geometry type selected by the user
         */
        DrawComponent.prototype.onGeometryTypeChange = function (geometryType) {
            this.drawControl.setGeometryType(geometryType);
            this.toggleDrawControl();
        };
        /**
         * Store initialization, including drawing layer creation
         */
        DrawComponent.prototype.initStore = function () {
            var _this = this;
            this.map.removeLayer(this.olDrawingLayer);
            this.olDrawingLayer = new VectorLayer({
                isIgoInternalLayer: true,
                id: 'igo-draw-layer',
                title: this.languageService.translate.instant('igo.geo.draw.drawing'),
                zIndex: 200,
                source: new FeatureDataSource(),
                style: function (feature, resolution) {
                    return _this.drawStyleService.createDrawingLayerStyle(feature, resolution, _this.labelsAreShown, _this.icon);
                },
                showInLayerList: true,
                exportable: true,
                browsable: false,
                workspace: {
                    enabled: false
                },
            });
            tryBindStoreLayer(this.store, this.olDrawingLayer);
            tryAddLoadingStrategy(this.store, new FeatureStoreLoadingStrategy({
                motion: exports.FeatureMotion.None
            }));
            tryAddSelectionStrategy(this.store, new FeatureStoreSelectionStrategy({
                map: this.map,
                motion: exports.FeatureMotion.None,
                many: true
            }));
            this.store.layer.visible = true;
            this.store.source.ol.on('removefeature', function (event) {
                var olGeometry = event.feature.getGeometry();
                _this.clearLabelsOfOlGeometry(olGeometry);
            });
            this.subscriptions$$.push(this.store.stateView.manyBy$(function (record) {
                return record.state.selected === true;
            }).pipe(operators.skip(1) // Skip initial emission
            ).subscribe(function (records) {
                _this.selectedFeatures$.next(records.map(function (record) { return record.entity; }));
            }));
            this.subscriptions$$.push(this.store.count$.subscribe(function (cnt) {
                cnt >= 1 ? _this.store.layer.options.showInLayerList = true : _this.store.layer.options.showInLayerList = false;
            }));
        };
        /**
         * Called when the user changes the color in a color picker
         * @param labelsAreShown wheter the labels are shown or not
         * @param isAnIcon wheter the feature is an icon or not
         */
        DrawComponent.prototype.onColorChange = function (labelsAreShown, isAnIcon) {
            var _this = this;
            this.fillForm = this.fillColor;
            this.strokeForm = this.strokeColor;
            this.drawStyleService.setFillColor(this.fillColor);
            this.drawStyleService.setStrokeColor(this.strokeColor);
            if (isAnIcon) {
                this.store.layer.ol.setStyle(function (feature, resolution) {
                    return _this.drawStyleService.createDrawingLayerStyle(feature, resolution, labelsAreShown, _this.icon);
                });
                this.icon = undefined;
            }
            else {
                this.store.layer.ol.setStyle(function (feature, resolution) {
                    return _this.drawStyleService.createDrawingLayerStyle(feature, resolution, labelsAreShown);
                });
            }
            this.createDrawControl();
        };
        /**
         * Called when the user toggles the Draw control is toggled
         * @internal
         */
        DrawComponent.prototype.onToggleDrawControl = function (toggleIsChecked) {
            toggleIsChecked ? this.toggleDrawControl() : this.deactivateDrawControl();
        };
        /**
         * Activate the correct control
         */
        DrawComponent.prototype.toggleDrawControl = function () {
            this.deactivateDrawControl();
            this.activateDrawControl();
        };
        /**
         * Open a dialog box to enter label and do something
         * @param olGeometry geometry at draw end or selected geometry
         * @param drawEnd event fired at drawEnd?
         */
        DrawComponent.prototype.openDialog = function (olGeometryFeature, isDrawEnd) {
            var _this = this;
            setTimeout(function () {
                // open the dialog box used to enter label
                var dialogRef = _this.dialog.open(DrawPopupComponent, {
                    disableClose: false,
                    data: { currentLabel: olGeometryFeature.get('draw') }
                });
                // when dialog box is closed, get label and set it to geometry
                dialogRef.afterClosed().subscribe(function (label) {
                    _this.updateLabelOfOlGeometry(olGeometryFeature, label);
                    // if event was fired at draw end
                    if (isDrawEnd) {
                        _this.onDrawEnd(olGeometryFeature);
                        // if event was fired at select
                    }
                    else {
                        _this.onSelectDraw(olGeometryFeature, label);
                    }
                });
            }, 250);
        };
        /**
         * Activate a given control
         */
        DrawComponent.prototype.activateDrawControl = function () {
            var _this = this;
            this.drawControlIsDisabled = false;
            this.drawControlIsActive = true;
            this.drawEnd$$ = this.drawControl.end$.subscribe(function (olGeometry) {
                _this.openDialog(olGeometry, true);
            });
            this.drawControl.modify$.subscribe(function (olGeometry) {
                _this.onModifyDraw(olGeometry);
            });
            if (!this.drawSelect$$) {
                this.drawSelect$$ = this.drawControl.select$.subscribe(function (olFeature) {
                    _this.openDialog(olFeature, false);
                });
            }
            this.drawControl.setOlMap(this.map.ol, true);
        };
        /**
         * Deactivate the active draw control
         */
        DrawComponent.prototype.deactivateDrawControl = function () {
            if (!this.drawControl) {
                return;
            }
            if (this.drawEnd$$) {
                this.drawEnd$$.unsubscribe();
            }
            this.drawControl.setOlMap(undefined);
            this.drawControlIsActive = false;
        };
        /**
         * Clear the draw source and track the geometry being draw
         * @param olGeometry Ol linestring or polygon
         */
        DrawComponent.prototype.onDrawEnd = function (olGeometry, radius) {
            this.addFeatureToStore(olGeometry, radius);
            this.clearLabelsOfOlGeometry(olGeometry);
            this.store.layer.ol.getSource().refresh();
        };
        DrawComponent.prototype.onModifyDraw = function (olGeometry) {
            var _this = this;
            var entities = this.store.all();
            entities.forEach(function (entity) {
                var entityId = entity.properties.id;
                var olGeometryId = olGeometry.ol_uid;
                if (entityId === olGeometryId) {
                    _this.updateLabelOfOlGeometry(olGeometry, entity.properties.draw);
                    _this.replaceFeatureInStore(entity, olGeometry);
                }
            });
        };
        DrawComponent.prototype.onSelectDraw = function (olFeature, label) {
            var _this = this;
            var entities = this.store.all();
            var olGeometry = olFeature.getGeometry();
            olGeometry.ol_uid = olFeature.get('id');
            var olGeometryCoordinates = JSON.stringify(olGeometry.getCoordinates()[0]);
            entities.forEach(function (entity) {
                var entityCoordinates = JSON.stringify(entity.geometry.coordinates[0]);
                if (olGeometryCoordinates === entityCoordinates) {
                    var rad = entity.properties.rad ? entity.properties.rad : undefined;
                    _this.updateLabelOfOlGeometry(olGeometry, label);
                    _this.replaceFeatureInStore(entity, olGeometry, rad);
                }
            });
        };
        /**
         * Add a feature with draw label to the store. The loading stragegy of the store
         * will trigger and add the feature to the map.
         * @internal
         */
        DrawComponent.prototype.addFeatureToStore = function (olGeometry, radius, feature) {
            var rad;
            var center4326;
            var point4326;
            var lon4326;
            var lat4326;
            var featureId = feature ? feature.properties.id : olGeometry.ol_uid;
            var projection = this.map.ol.getView().getProjection();
            var geometry = new OlGeoJSON__default["default"]().writeGeometryObject(olGeometry, {
                featureProjection: projection,
                dataProjection: projection
            });
            if (olGeometry instanceof OlCircle__default["default"] || radius) {
                if (radius) {
                    rad = radius;
                }
                else {
                    geometry.type = 'Point';
                    geometry.coordinates = olGeometry.getCenter();
                    var extent4326 = olproj.transform([olGeometry.getFlatCoordinates()[2], olGeometry.getFlatCoordinates()[3]], projection, 'EPSG:4326');
                    center4326 = olproj.transform([olGeometry.getFlatCoordinates()[0], olGeometry.getFlatCoordinates()[1]], projection, 'EPSG:4326');
                    lon4326 = center4326[0];
                    lat4326 = center4326[1];
                    rad = sphere.getDistance(center4326, extent4326);
                }
            }
            if (olGeometry instanceof OlPoint__default["default"]) {
                point4326 = olproj.transform(olGeometry.getFlatCoordinates(), projection, 'EPSG:4326');
                lon4326 = point4326[0];
                lat4326 = point4326[1];
            }
            this.store.update({
                type: FEATURE,
                geometry: geometry,
                projection: projection.getCode(),
                properties: {
                    id: featureId,
                    draw: olGeometry.get('_label'),
                    longitude: lon4326 ? lon4326 : null,
                    latitude: lat4326 ? lat4326 : null,
                    rad: rad ? rad : null
                },
                meta: {
                    id: featureId
                }
            });
        };
        /**
         * Replace the feature in the store
         * @param entity the entity to replace
         * @param olGeometry the new geometry to insert in the store
         */
        DrawComponent.prototype.replaceFeatureInStore = function (entity, olGeometry, radius) {
            this.store.delete(entity);
            this.onDrawEnd(olGeometry, radius);
        };
        DrawComponent.prototype.buildForm = function () {
            this.form = this.formBuilder.group({
                fill: [''],
                stroke: ['']
            });
        };
        DrawComponent.prototype.deleteDrawings = function () {
            var _this = this;
            this.store.deleteMany(this.selectedFeatures$.value);
            this.selectedFeatures$.value.forEach(function (selectedFeature) {
                _this.olDrawingLayerSource.getFeatures().forEach(function (drawingLayerFeature) {
                    var geometry = drawingLayerFeature.getGeometry();
                    if (selectedFeature.properties.id === geometry.ol_uid) {
                        _this.olDrawingLayerSource.removeFeature(drawingLayerFeature);
                    }
                });
            });
        };
        /**
         * Clear the tooltips of an OL geometry
         * @param olGeometry OL geometry with tooltips
         */
        DrawComponent.prototype.clearLabelsOfOlGeometry = function (olGeometry) {
            var _this = this;
            getTooltipsOfOlGeometry(olGeometry).forEach(function (olTooltip) {
                if (olTooltip && olTooltip.getMap()) {
                    _this.map.ol.removeOverlay(olTooltip);
                }
            });
        };
        /**
         * Called when the user toggles the labels toggle
         */
        DrawComponent.prototype.onToggleLabels = function () {
            this.drawStyleService.toggleLabelsAreShown();
            this.labelsAreShown = !this.labelsAreShown;
            this.icon ? this.onColorChange(this.labelsAreShown, true) : this.onColorChange(this.labelsAreShown, false);
        };
        /**
         * Update the label of a geometry when a label is entered in a dialog box
         * @param olGeometry the geometry
         * @param label the label
         */
        DrawComponent.prototype.updateLabelOfOlGeometry = function (olGeometry, label) {
            olGeometry.setProperties({
                _label: label
            }, true);
        };
        DrawComponent.prototype.onIconChange = function (event) {
            var _this = this;
            this.icon = event;
            this.drawStyleService.setIcon(this.icon);
            this.store.layer.ol.setStyle(function (feature, resolution) {
                return _this.drawStyleService.createDrawingLayerStyle(feature, resolution, true, _this.icon);
            });
        };
        DrawComponent.prototype.openShorcutsDialog = function () {
            this.dialog.open(DrawShorcutsComponent);
        };
        return DrawComponent;
    }());
    DrawComponent.ɵfac = function DrawComponent_Factory(t) { return new (t || DrawComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i16__namespace.FormBuilder), i0__namespace.ɵɵdirectiveInject(DrawStyleService), i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialog), i0__namespace.ɵɵdirectiveInject(DrawIconService)); };
    DrawComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DrawComponent, selectors: [["igo-draw"]], inputs: { map: "map", store: "store" }, outputs: { fillColor: "fillColor", strokeColor: "strokeColor", strokeWidth: "strokeWidth" }, decls: 55, vars: 78, consts: [[1, "geometry-type-toggle", "mat-typography"], [3, "value", "change"], [3, "value"], [1, "draw-options", "mat-typography"], [3, "disabled", "checked", "labelPosition", "change"], [3, "checked", "labelPosition", "change"], [1, "igo-form", 3, "formGroup"], [1, "fill-color-picker", "mat-typography"], ["svgIcon", "square", 1, "stroke-palette-icon"], ["appearance", "outline", "floatLabel", "always", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "fill-field", 3, "matTooltip"], ["formControlName", "fill", "matInput", "", "type", "text", 3, "colorPicker", "readonly", "cpWidth", "cpOutputFormat", "cpPosition", "cpPositionOffset", "cpCancelButton", "cpCancelButtonText", "cpOKButton", "colorPickerChange"], [1, "stroke-color-picker", "mat-typography"], ["svgIcon", "square-outline", 1, "stroke-palette-icon"], ["appearance", "outline", "floatLabel", "always", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "stroke-field", 3, "matTooltip"], ["formControlName", "stroke", "matInput", "", "type", "text", 3, "colorPicker", "readonly", "cpWidth", "cpPosition", "cpPositionOffset", "cpOutputFormat", "cpCancelButton", "cpCancelButtonText", "cpOKButton", "colorPickerChange"], [4, "ngIf"], ["class", "deleteBtn", "mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "disabled", "click", 4, "ngIf"], [1, "table-compact", 3, "store", "template"], ["table", ""], ["mat-icon-button", "", "color", "accent", "disableRipple", "true", 3, "click"], ["svgIcon", "keyboard-outline", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "shortcuts-icon", 3, "matTooltip"], ["class", "box", 4, "ngIf"], ["value", "", 3, "click"], [3, "value", "click", 4, "ngFor", "ngForOf"], [1, "box"], [3, "src"], [3, "value", "click"], ["mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "deleteBtn", 3, "matTooltip", "disabled", "click"], ["svgIcon", "delete"]], template: function DrawComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div");
                i0__namespace.ɵɵelementStart(1, "div", 0);
                i0__namespace.ɵɵelementStart(2, "mat-button-toggle-group", 1);
                i0__namespace.ɵɵlistener("change", function DrawComponent_Template_mat_button_toggle_group_change_2_listener($event) { return ctx.onGeometryTypeChange($event.value); });
                i0__namespace.ɵɵelementStart(3, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(4);
                i0__namespace.ɵɵpipe(5, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(7);
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(10);
                i0__namespace.ɵɵpipe(11, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(12, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(13);
                i0__namespace.ɵɵpipe(14, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(15, "div", 3);
                i0__namespace.ɵɵelementStart(16, "mat-slide-toggle", 4);
                i0__namespace.ɵɵlistener("change", function DrawComponent_Template_mat_slide_toggle_change_16_listener($event) { return ctx.onToggleDrawControl($event.checked); });
                i0__namespace.ɵɵtext(17);
                i0__namespace.ɵɵpipe(18, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(19, "mat-slide-toggle", 5);
                i0__namespace.ɵɵlistener("change", function DrawComponent_Template_mat_slide_toggle_change_19_listener() { return ctx.onToggleLabels(); });
                i0__namespace.ɵɵtext(20);
                i0__namespace.ɵɵpipe(21, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(22, "form", 6);
                i0__namespace.ɵɵelementStart(23, "div", 7);
                i0__namespace.ɵɵelementStart(24, "span");
                i0__namespace.ɵɵelement(25, "mat-icon", 8);
                i0__namespace.ɵɵtext(26);
                i0__namespace.ɵɵpipe(27, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(28, "mat-form-field", 9);
                i0__namespace.ɵɵpipe(29, "translate");
                i0__namespace.ɵɵelementStart(30, "mat-label");
                i0__namespace.ɵɵtext(31);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(32, "input", 10);
                i0__namespace.ɵɵlistener("colorPickerChange", function DrawComponent_Template_input_colorPickerChange_32_listener($event) { return ctx.fillColor = $event; })("colorPickerChange", function DrawComponent_Template_input_colorPickerChange_32_listener() { return ctx.onColorChange(ctx.labelsAreShown, false); });
                i0__namespace.ɵɵpipe(33, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(34, "div", 11);
                i0__namespace.ɵɵelementStart(35, "span");
                i0__namespace.ɵɵelement(36, "mat-icon", 12);
                i0__namespace.ɵɵtext(37);
                i0__namespace.ɵɵpipe(38, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(39, "mat-form-field", 13);
                i0__namespace.ɵɵpipe(40, "translate");
                i0__namespace.ɵɵelementStart(41, "mat-label");
                i0__namespace.ɵɵtext(42);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(43, "input", 14);
                i0__namespace.ɵɵlistener("colorPickerChange", function DrawComponent_Template_input_colorPickerChange_43_listener($event) { return ctx.strokeColor = $event; })("colorPickerChange", function DrawComponent_Template_input_colorPickerChange_43_listener() { return ctx.onColorChange(ctx.labelsAreShown, false); });
                i0__namespace.ɵɵpipe(44, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(45, "div");
                i0__namespace.ɵɵtemplate(46, DrawComponent_mat_form_field_46_Template, 11, 8, "mat-form-field", 15);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelement(47, "mat-divider");
                i0__namespace.ɵɵelementStart(48, "div");
                i0__namespace.ɵɵtemplate(49, DrawComponent_button_49_Template, 4, 6, "button", 16);
                i0__namespace.ɵɵelement(50, "igo-entity-table", 17, 18);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(52, "button", 19);
                i0__namespace.ɵɵlistener("click", function DrawComponent_Template_button_click_52_listener() { return ctx.openShorcutsDialog(); });
                i0__namespace.ɵɵelement(53, "mat-icon", 20);
                i0__namespace.ɵɵpipe(54, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.geometryType.Point);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("value", ctx.geometryType.Point);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(5, 52, "igo.geo.draw." + ctx.geometryType.Point), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.geometryType.LineString);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(8, 54, "igo.geo.draw." + ctx.geometryType.LineString), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.geometryType.Polygon);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(11, 56, "igo.geo.draw." + ctx.geometryType.Polygon), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.geometryType.Circle);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(14, 58, "igo.geo.draw." + ctx.geometryType.Circle), " ");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("disabled", ctx.drawControlIsDisabled)("checked", ctx.drawControlIsActive)("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(18, 60, "igo.geo.spatialFilter.drawControl"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("checked", ctx.labelsAreShown)("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(21, 62, "igo.geo.draw.toggleMapTooltips"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("formGroup", ctx.form);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(27, 64, "igo.geo.draw.fill"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(29, 66, "igo.geo.draw.colorPicker"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵtextInterpolate(ctx.fillColor);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵstyleProp("background", ctx.fillColor);
                i0__namespace.ɵɵproperty("colorPicker", ctx.fillColor)("readonly", true)("colorPicker", ctx.fillColor)("cpWidth", "200px")("cpOutputFormat", "rgba")("cpPosition", "bottom")("cpPositionOffset", "-75%")("cpCancelButton", true)("cpCancelButtonText", i0__namespace.ɵɵpipeBind1(33, 68, "igo.geo.draw.cancelColorPicker"))("cpOKButton", true);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(38, 70, "igo.geo.draw.stroke"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(40, 72, "igo.geo.draw.colorPicker"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵtextInterpolate(ctx.strokeColor);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵstyleProp("background", ctx.strokeColor);
                i0__namespace.ɵɵproperty("colorPicker", ctx.strokeColor)("readonly", true)("colorPicker", ctx.strokeColor)("cpWidth", "200px")("cpPosition", "bottom")("cpPositionOffset", "-75%")("cpOutputFormat", "rgba")("cpCancelButton", true)("cpCancelButtonText", i0__namespace.ɵɵpipeBind1(44, 74, "igo.geo.draw.cancelColorPicker"))("cpOKButton", true);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.icons.length >= 1);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.store.count$.getValue() > 0);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("store", ctx.store)("template", ctx.tableTemplate);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(54, 76, "igo.geo.draw.shortcuts"));
            }
        }, directives: [i18__namespace.MatButtonToggleGroup, i18__namespace.MatButtonToggle, i22__namespace.MatSlideToggle, i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.FormGroupDirective, i4__namespace.MatIcon, i12__namespace.MatFormField, i3__namespace.MatTooltip, i12__namespace.MatLabel, i16__namespace.DefaultValueAccessor, i5__namespace$1.MatInput, i16__namespace.NgControlStatus, i16__namespace.FormControlName, i12__namespace$1.ColorPickerDirective, i1__namespace$1.NgIf, i10__namespace.MatDivider, i6__namespace.EntityTableComponent, i2__namespace.MatButton, i13__namespace.MatSelect, i13__namespace.MatSelectTrigger, i9__namespace.MatOption, i1__namespace$1.NgForOf], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [".geometry-type-toggle[_ngcontent-%COMP%]{padding:10px;text-align:center}.geometry-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]{width:100%}.geometry-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]   mat-button-toggle[_ngcontent-%COMP%]{width:25%}.draw-options[_ngcontent-%COMP%]{overflow-x:hidden}.draw-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{width:100%;margin:10px}.draw-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 60px)}.igo-form[_ngcontent-%COMP%]{padding:10px}.fill-field[_ngcontent-%COMP%], .stroke-field[_ngcontent-%COMP%]{width:130px}.fill-color-picker[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{position:relative;top:7px}.fill-color-picker[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{left:8px}.stroke-color-picker[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{position:relative;top:7px}.stroke-color-picker[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{left:35px}.box[_ngcontent-%COMP%]{width:25px;height:25px}img[_ngcontent-%COMP%]{width:100%;height:100%}.deleteBtn[_ngcontent-%COMP%]{margin-left:12px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DrawComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-draw',
                        templateUrl: './draw.component.html',
                        styleUrls: ['./draw.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i2__namespace$1.LanguageService }, { type: i16__namespace.FormBuilder }, { type: DrawStyleService }, { type: i1__namespace.MatDialog }, { type: DrawIconService }]; }, { fillColor: [{
                    type: i0.Output
                }], strokeColor: [{
                    type: i0.Output
                }], strokeWidth: [{
                    type: i0.Output
                }], map: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }] });
    })();

    /**
     * @ignore
     */
    var IgoDrawModule = /** @class */ (function () {
        function IgoDrawModule() {
        }
        return IgoDrawModule;
    }());
    IgoDrawModule.ɵfac = function IgoDrawModule_Factory(t) { return new (t || IgoDrawModule)(); };
    IgoDrawModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoDrawModule });
    IgoDrawModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i10.MatDividerModule,
                i12.MatFormFieldModule,
                i4.MatIconModule,
                i3.MatTooltipModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i1$3.MatListModule,
                i13.MatSelectModule,
                i22.MatSlideToggleModule,
                i1.MatDialogModule,
                i2$1.IgoLanguageModule,
                i6.IgoEntityTableModule,
                i12$1.ColorPickerModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoDrawModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i1$1.CommonModule,
                            i2.MatButtonModule,
                            i18.MatButtonToggleModule,
                            i10.MatDividerModule,
                            i12.MatFormFieldModule,
                            i4.MatIconModule,
                            i3.MatTooltipModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i1$3.MatListModule,
                            i13.MatSelectModule,
                            i22.MatSlideToggleModule,
                            i1.MatDialogModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoEntityTableModule,
                            i12$1.ColorPickerModule
                        ],
                        declarations: [
                            DrawComponent,
                            DrawPopupComponent,
                            DrawShorcutsComponent
                        ],
                        exports: [
                            DrawComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoDrawModule, { declarations: [DrawComponent,
                DrawPopupComponent,
                DrawShorcutsComponent], imports: [i16.FormsModule,
                i16.ReactiveFormsModule,
                i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i10.MatDividerModule,
                i12.MatFormFieldModule,
                i4.MatIconModule,
                i3.MatTooltipModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i1$3.MatListModule,
                i13.MatSelectModule,
                i22.MatSlideToggleModule,
                i1.MatDialogModule,
                i2$1.IgoLanguageModule,
                i6.IgoEntityTableModule,
                i12$1.ColorPickerModule], exports: [DrawComponent] });
    })();

    var IgoDrawingToolModule = /** @class */ (function () {
        function IgoDrawingToolModule() {
        }
        return IgoDrawingToolModule;
    }());
    IgoDrawingToolModule.ɵfac = function IgoDrawingToolModule_Factory(t) { return new (t || IgoDrawingToolModule)(); };
    IgoDrawingToolModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoDrawingToolModule });
    IgoDrawingToolModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[], IgoDrawModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoDrawingToolModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [
                            IgoDrawModule
                        ]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoDrawingToolModule, { exports: [IgoDrawModule] }); })();

    var FeatureDetailsDirective = /** @class */ (function () {
        function FeatureDetailsDirective(component, el) {
            this.el = el;
            this.geolocation$ = new rxjs.BehaviorSubject(undefined);
            this.start = {
                meta: { id: 1 },
                type: FEATURE,
                geometry: {
                    type: 'Point',
                    coordinates: undefined
                },
                projection: 'EPSG:4326',
                properties: {
                    id: 1,
                    name: 'User coordinates',
                }
            };
            this.feature$ = new rxjs.BehaviorSubject(undefined);
            this.routingEvent = new i0.EventEmitter();
            this.component = component;
        }
        Object.defineProperty(FeatureDetailsDirective.prototype, "map", {
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureDetailsDirective.prototype, "feature", {
            get: function () {
                return this.component.feature;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureDetailsDirective.prototype, "geolocation", {
            get: function () {
                return this.component.map.geolocation$.getValue();
            },
            set: function (value) {
                var _this = this;
                if (value) {
                    this.geolocation = value;
                    this.geolocation.on('change', function (evt) {
                        _this.geolocation$.next(_this.geolocation);
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        FeatureDetailsDirective.prototype.setFeature = function () {
            this.feature$.next(this.feature);
        };
        FeatureDetailsDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.map.geolocation$.subscribe(function (geolocation) {
                if (!geolocation) {
                    return;
                }
                geolocation.setProjection(_this.map.projection);
                if (geolocation && geolocation.getTracking() === false) {
                    geolocation.setTracking(false);
                }
                if (geolocation.getTracking() === true) {
                    var userCoord = geolocation.getPosition();
                    userCoord = olproj__namespace.transform(userCoord, _this.map.projection, 'EPSG:4326');
                    _this.start.geometry.coordinates = userCoord;
                }
            });
            this.feature$.subscribe(function () {
                if (_this.feature.geometry) {
                    if (_this.feature.geometry.type === 'Point') {
                        _this.end = _this.feature;
                    }
                    else {
                        _this.end = pointOnFeature__default["default"](_this.feature.geometry);
                    }
                    _this.geolocation$.next(_this.geolocation);
                    _this.bindClicking();
                }
            });
        };
        FeatureDetailsDirective.prototype.bindClicking = function () {
            var _this = this;
            setTimeout(function () {
                var routeElement = _this.el.nativeElement.querySelector('span.routing');
                if (routeElement) {
                    routeElement.addEventListener('click', function () {
                        _this.activateRouting();
                    });
                }
            }, 1);
        };
        FeatureDetailsDirective.prototype.activateRouting = function () {
            this.start.geometry.coordinates ? this.routingEvent.emit([this.start, this.end]) : this.routingEvent.emit([this.end]);
        };
        return FeatureDetailsDirective;
    }());
    FeatureDetailsDirective.ɵfac = function FeatureDetailsDirective_Factory(t) { return new (t || FeatureDetailsDirective)(i0__namespace.ɵɵdirectiveInject(FeatureDetailsComponent, 2), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef)); };
    FeatureDetailsDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: FeatureDetailsDirective, selectors: [["", "igoFeatureDetailsDirective", ""]], hostBindings: function FeatureDetailsDirective_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("selectFeature", function FeatureDetailsDirective_selectFeature_HostBindingHandler() { return ctx.setFeature(); });
            }
        }, outputs: { routingEvent: "routingEvent" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(FeatureDetailsDirective, [{
                type: i0.Directive,
                args: [{
                        // This directive allow to view the route between the user coordinates and the feature
                        selector: '[igoFeatureDetailsDirective]'
                    }]
            }], function () {
            return [{ type: FeatureDetailsComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: i0__namespace.ElementRef }];
        }, { routingEvent: [{
                    type: i0.Output
                }], setFeature: [{
                    type: i0.HostListener,
                    args: ['selectFeature']
                }] });
    })();

    /**
     * @ignore
     */
    var IgoFeatureDetailsModule = /** @class */ (function () {
        function IgoFeatureDetailsModule() {
        }
        return IgoFeatureDetailsModule;
    }());
    IgoFeatureDetailsModule.ɵfac = function IgoFeatureDetailsModule_Factory(t) { return new (t || IgoFeatureDetailsModule)(); };
    IgoFeatureDetailsModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoFeatureDetailsModule });
    IgoFeatureDetailsModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i4.MatIconModule,
                i2$1.IgoLanguageModule,
                i6.IgoKeyValueModule,
                i6.IgoImageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoFeatureDetailsModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i4.MatIconModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoKeyValueModule,
                            i6.IgoImageModule
                        ],
                        exports: [
                            FeatureDetailsComponent,
                            FeatureDetailsDirective
                        ],
                        declarations: [
                            FeatureDetailsComponent,
                            FeatureDetailsDirective
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoFeatureDetailsModule, { declarations: [FeatureDetailsComponent,
                FeatureDetailsDirective], imports: [i1$1.CommonModule,
                i4.MatIconModule,
                i2$1.IgoLanguageModule,
                i6.IgoKeyValueModule,
                i6.IgoImageModule], exports: [FeatureDetailsComponent,
                FeatureDetailsDirective] });
    })();

    /**
     * @ignore
     */
    var IgoFeatureFormModule = /** @class */ (function () {
        function IgoFeatureFormModule() {
        }
        return IgoFeatureFormModule;
    }());
    IgoFeatureFormModule.ɵfac = function IgoFeatureFormModule_Factory(t) { return new (t || IgoFeatureFormModule)(); };
    IgoFeatureFormModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoFeatureFormModule });
    IgoFeatureFormModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i6.IgoFormModule
            ], i6.IgoFormModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoFeatureFormModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i6.IgoFormModule
                        ],
                        exports: [
                            i6.IgoFormModule,
                            FeatureFormComponent
                        ],
                        declarations: [
                            FeatureFormComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoFeatureFormModule, { declarations: [FeatureFormComponent], imports: [i1$1.CommonModule,
                i6.IgoFormModule], exports: [i6.IgoFormModule,
                FeatureFormComponent] });
    })();

    var IgoFeatureModule = /** @class */ (function () {
        function IgoFeatureModule() {
        }
        return IgoFeatureModule;
    }());
    IgoFeatureModule.ɵfac = function IgoFeatureModule_Factory(t) { return new (t || IgoFeatureModule)(); };
    IgoFeatureModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoFeatureModule });
    IgoFeatureModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [], imports: [[
                i1$1.CommonModule
            ], IgoFeatureDetailsModule,
            IgoFeatureFormModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoFeatureModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule
                        ],
                        exports: [
                            IgoFeatureDetailsModule,
                            IgoFeatureFormModule
                        ],
                        declarations: [],
                        providers: []
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoFeatureModule, { imports: [i1$1.CommonModule], exports: [IgoFeatureDetailsModule,
                IgoFeatureFormModule] });
    })();

    /**
     * Control to modify geometries
     */
    var ModifyControl = /** @class */ (function () {
        function ModifyControl(options) {
            this.options = options;
            /**
             * Modify start observable
             */
            this.start$ = new rxjs.Subject();
            /**
             * Modify end observable
             */
            this.end$ = new rxjs.Subject();
            /**
             * Geometry changes observable
             */
            this.changes$ = new rxjs.Subject();
            this.olModifyInteractionIsActive = false;
            this.olTranslateInteractionIsActive = false;
            this.olDrawInteractionIsActive = false;
            this.removedOlInteractions = [];
            /**
             * Whether a modify control should be available
             */
            this.modify = true;
            /**
             * Whether a translate control should be available
             */
            this.translate = true;
            if (options.modify !== undefined) {
                this.modify = options.modify;
            }
            if (options.translate !== undefined) {
                this.translate = options.translate;
            }
            if (options.layer !== undefined) {
                this.olOverlayLayer = options.layer;
            }
            else {
                this.olOverlayLayer = this.createOlInnerOverlayLayer();
            }
            this.olLinearRingsLayer = this.createOlLinearRingsLayer();
        }
        Object.defineProperty(ModifyControl.prototype, "active", {
            /**
             * Wheter the control is active
             */
            get: function () {
                return this.olMap !== undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ModifyControl.prototype, "olOverlaySource", {
            /**
             * OL overlay source
             * @internal
             */
            get: function () {
                return this.olOverlayLayer.getSource();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ModifyControl.prototype, "olLinearRingsSource", {
            /**
             * OL linear rings source
             * @internal
             */
            get: function () {
                return this.olLinearRingsLayer.getSource();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add or remove this control to/from a map.
         * @param map OL Map
         */
        ModifyControl.prototype.setOlMap = function (olMap) {
            if (olMap === undefined) {
                this.clearOlInnerOverlaySource();
                this.removeOlInnerOverlayLayer();
                this.removeOlModifyInteraction();
                this.removeOlTranslateInteraction();
                this.removeOlDrawInteraction();
                this.olMap = olMap;
                return;
            }
            this.olMap = olMap;
            this.addOlInnerOverlayLayer();
            // The order in which these interactions
            // are added is important
            if (this.modify === true) {
                this.addOlDrawInteraction();
            }
            if (this.translate === true) {
                this.addOlTranslateInteraction();
                this.activateTranslateInteraction();
            }
            if (this.modify === true) {
                this.addOlModifyInteraction();
                this.activateModifyInteraction();
            }
        };
        /**
         * Return the overlay source
         */
        ModifyControl.prototype.getSource = function () {
            return this.olOverlaySource;
        };
        /**
         * Add an OL geometry to the overlay and start modifying it
         * @param olGeometry Ol Geometry
         */
        ModifyControl.prototype.setOlGeometry = function (olGeometry) {
            var olFeature = new OlFeature__default["default"]({ geometry: olGeometry });
            this.olOverlaySource.clear();
            this.olOverlaySource.addFeature(olFeature);
        };
        /**
         * Create an overlay source if none is defined in the options
         */
        ModifyControl.prototype.createOlInnerOverlayLayer = function () {
            return new OlVectorLayer__default["default"]({
                source: this.options.source ? this.options.source : new OlVectorSource__default["default"](),
                style: this.options.layerStyle,
                zIndex: 500
            });
        };
        /**
         * Add the overlay layer if it wasn't defined in the options
         */
        ModifyControl.prototype.addOlInnerOverlayLayer = function () {
            if (this.options.layer === undefined) {
                this.olMap.addLayer(this.olOverlayLayer);
            }
        };
        /**
         * Clear the overlay layer if it wasn't defined in the options
         */
        ModifyControl.prototype.removeOlInnerOverlayLayer = function () {
            if (this.options.layer === undefined && this.olMap !== undefined) {
                this.olMap.removeLayer(this.olOverlayLayer);
            }
        };
        /**
         * Clear the overlay source if it wasn't defined in the options
         */
        ModifyControl.prototype.clearOlInnerOverlaySource = function () {
            if (this.options.layer === undefined && this.options.source === undefined) {
                this.olOverlaySource.clear(true);
            }
        };
        ModifyControl.prototype.createOlLinearRingsLayer = function () {
            return new OlVectorLayer__default["default"]({
                source: new OlVectorSource__default["default"](),
                style: createDrawHoleInteractionStyle(),
                zIndex: 500
            });
        };
        /**
         * Add the linear rings layer
         */
        ModifyControl.prototype.addOlLinearRingsLayer = function () {
            this.olMap.addLayer(this.olLinearRingsLayer);
        };
        /**
         * Clear the linear rings layer
         */
        ModifyControl.prototype.removeOlLinearRingsLayer = function () {
            this.olMap.removeLayer(this.olLinearRingsLayer);
        };
        /**
         * Clear the linear rings source
         */
        ModifyControl.prototype.clearOlLinearRingsSource = function () {
            this.olLinearRingsSource.clear(true);
        };
        /**
         * Add a modify interaction to the map an set up some listeners
         */
        ModifyControl.prototype.addOlModifyInteraction = function () {
            var olModifyInteraction = new OlModify__default["default"]({
                source: this.olOverlaySource,
                style: this.options.drawStyle
            });
            this.olModifyInteraction = olModifyInteraction;
        };
        /**
         * Remove the modify interaction
         */
        ModifyControl.prototype.removeOlModifyInteraction = function () {
            if (this.olModifyInteraction === undefined) {
                return;
            }
            this.deactivateModifyInteraction();
            this.olModifyInteraction = undefined;
        };
        ModifyControl.prototype.activateModifyInteraction = function () {
            var _this = this;
            if (this.olModifyInteractionIsActive === true) {
                return;
            }
            this.olModifyInteractionIsActive = true;
            this.onModifyStartKey = this.olModifyInteraction.on('modifystart', function (event) { return _this.onModifyStart(event); });
            this.onModifyEndKey = this.olModifyInteraction.on('modifyend', function (event) { return _this.onModifyEnd(event); });
            this.olMap.addInteraction(this.olModifyInteraction);
        };
        ModifyControl.prototype.deactivateModifyInteraction = function () {
            if (this.olModifyInteractionIsActive === false) {
                return;
            }
            this.olModifyInteractionIsActive = false;
            olObservable.unByKey([this.onModifyStartKey, this.onModifyEndKey, this.onModifyKey]);
            if (this.olMap !== undefined) {
                this.olMap.removeInteraction(this.olModifyInteraction);
            }
        };
        /**
         * When modifying starts, clear the overlay and start watching for changes
         * @param event Modify start event
         */
        ModifyControl.prototype.onModifyStart = function (event) {
            var _this = this;
            var olGeometry = event.features.item(0).getGeometry();
            this.start$.next(olGeometry);
            this.onModifyKey = olGeometry.on('change', function (olGeometryEvent) {
                _this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);
                _this.changes$.next(olGeometryEvent.target);
            });
            this.subscribeToKeyDown();
        };
        /**
         * When modifying ends, update the geometry observable and stop watching for changes
         * @param event Modify end event
         */
        ModifyControl.prototype.onModifyEnd = function (event) {
            olObservable.unByKey(this.onModifyKey);
            this.end$.next(event.features.item(0).getGeometry());
            this.unsubscribeToKeyDown();
        };
        /**
         * Subscribe to space key down to pan the map
         */
        ModifyControl.prototype.subscribeToKeyDown = function () {
            var _this = this;
            this.keyDown$$ = rxjs.fromEvent(document, 'keydown').subscribe(function (event) {
                if (event.key === ' ') {
                    // On space bar, pan to the current mouse position
                    _this.olMap.getView().animate({
                        center: _this.mousePosition,
                        duration: 0
                    });
                    return;
                }
            });
        };
        /**
         * Unsubscribe to key down
         */
        ModifyControl.prototype.unsubscribeToKeyDown = function () {
            if (this.keyDown$$ !== undefined) {
                this.keyDown$$.unsubscribe();
            }
        };
        /**
         * Add a translate interaction to the map an set up some listeners
         */
        ModifyControl.prototype.addOlTranslateInteraction = function () {
            var olTranslateInteraction = new OlTranslate__default["default"]({
                layers: [this.olOverlayLayer]
            });
            this.olTranslateInteraction = olTranslateInteraction;
        };
        /**
         * Remove the translate interaction
         */
        ModifyControl.prototype.removeOlTranslateInteraction = function () {
            if (this.olTranslateInteraction === undefined) {
                return;
            }
            this.deactivateTranslateInteraction();
            this.olTranslateInteraction = undefined;
        };
        ModifyControl.prototype.activateTranslateInteraction = function () {
            var _this = this;
            if (this.olTranslateInteractionIsActive === true) {
                return;
            }
            this.olTranslateInteractionIsActive = true;
            this.onTranslateStartKey = this.olTranslateInteraction.on('translatestart', function (event) { return _this.onTranslateStart(event); });
            this.onTranslateEndKey = this.olTranslateInteraction.on('translateend', function (event) { return _this.onTranslateEnd(event); });
            this.olMap.addInteraction(this.olTranslateInteraction);
        };
        ModifyControl.prototype.deactivateTranslateInteraction = function () {
            if (this.olTranslateInteractionIsActive === false) {
                return;
            }
            this.olTranslateInteractionIsActive = false;
            olObservable.unByKey([
                this.onTranslateStartKey,
                this.onTranslateEndKey,
                this.onTranslateKey
            ]);
            if (this.olMap !== undefined) {
                this.olMap.removeInteraction(this.olTranslateInteraction);
            }
        };
        /**
         * When translation starts, clear the overlay and start watching for changes
         * @param event Translate start event
         */
        ModifyControl.prototype.onTranslateStart = function (event) {
            var olGeometry = event.features.item(0).getGeometry();
            this.start$.next(olGeometry);
            this.onTranslateKey = olGeometry.on('change', function (olGeometryEvent) {
                // this.changes$.next(olGeometryEvent.target);
            });
        };
        /**
         * When translation ends, update the geometry observable and stop watchign for changes
         * @param event Translate end event
         */
        ModifyControl.prototype.onTranslateEnd = function (event) {
            olObservable.unByKey(this.onTranslateKey);
            this.end$.next(event.features.item(0).getGeometry());
        };
        /**
         * Add a draw interaction to the map an set up some listeners
         */
        ModifyControl.prototype.addOlDrawInteraction = function () {
            var _this = this;
            var olDrawInteraction = new OlDraw__default["default"]({
                type: 'Polygon',
                source: this.olLinearRingsSource,
                stopClick: true,
                style: createDrawHoleInteractionStyle(),
                condition: function (event) {
                    var olOuterGeometry = _this.olOuterGeometry || _this.getOlGeometry();
                    var intersects = olOuterGeometry.intersectsCoordinate(event.coordinate);
                    return intersects;
                }
            });
            this.olDrawInteraction = olDrawInteraction;
            this.subscribeToDrawKeyDown();
        };
        /**
         * Subscribe to CTRL key down to activate the draw control
         */
        ModifyControl.prototype.subscribeToDrawKeyDown = function () {
            var _this = this;
            this.drawKeyDown$$ = rxjs.fromEvent(document, 'keydown').subscribe(function (event) {
                if (event.key !== 'Control') {
                    return;
                }
                _this.unsubscribeToDrawKeyDown();
                var olGeometry = _this.getOlGeometry();
                if (!olGeometry || !(olGeometry instanceof OlPolygon__default["default"])) {
                    return;
                }
                _this.subscribeToDrawKeyUp();
                _this.deactivateModifyInteraction();
                _this.deactivateTranslateInteraction();
                _this.activateDrawInteraction();
            });
        };
        /**
         * Subscribe to CTRL key up to deactivate the draw control
         */
        ModifyControl.prototype.subscribeToDrawKeyUp = function () {
            var _this = this;
            this.drawKeyUp$$ = rxjs.fromEvent(document, 'keyup').subscribe(function (event) {
                if (event.key !== 'Control') {
                    return;
                }
                _this.unsubscribeToDrawKeyUp();
                _this.unsubscribeToKeyDown();
                _this.deactivateDrawInteraction();
                _this.activateModifyInteraction();
                if (_this.translate === true) {
                    _this.activateTranslateInteraction();
                }
                _this.subscribeToDrawKeyDown();
                _this.olOuterGeometry = undefined;
                _this.clearOlLinearRingsSource();
                _this.end$.next(_this.getOlGeometry());
            });
        };
        /**
         * Unsubscribe to draw key down
         */
        ModifyControl.prototype.unsubscribeToDrawKeyDown = function () {
            if (this.drawKeyDown$$ !== undefined) {
                this.drawKeyDown$$.unsubscribe();
            }
        };
        /**
         * Unsubscribe to key up
         */
        ModifyControl.prototype.unsubscribeToDrawKeyUp = function () {
            if (this.drawKeyUp$$ !== undefined) {
                this.drawKeyUp$$.unsubscribe();
            }
        };
        /**
         * Remove the draw interaction
         */
        ModifyControl.prototype.removeOlDrawInteraction = function () {
            if (this.olDrawInteraction === undefined) {
                return;
            }
            this.unsubscribeToKeyDown();
            this.unsubscribeToDrawKeyUp();
            this.unsubscribeToDrawKeyDown();
            this.deactivateDrawInteraction();
            this.clearOlLinearRingsSource();
            this.olDrawInteraction = undefined;
        };
        /**
         * Activate the draw interaction
         */
        ModifyControl.prototype.activateDrawInteraction = function () {
            var _this = this;
            if (this.olDrawInteractionIsActive === true) {
                return;
            }
            this.clearOlLinearRingsSource();
            this.addOlLinearRingsLayer();
            this.olMap.getInteractions().forEach(function (olInteraction) {
                if (olInteraction instanceof OlDragBoxInteraction__default["default"]) {
                    _this.olMap.removeInteraction(olInteraction);
                    _this.removedOlInteractions.push(olInteraction);
                }
            });
            this.olDrawInteractionIsActive = true;
            this.onDrawStartKey = this.olDrawInteraction.on('drawstart', function (event) { return _this.onDrawStart(event); });
            this.onDrawEndKey = this.olDrawInteraction.on('drawend', function (event) { return _this.onDrawEnd(event); });
            this.olMap.addInteraction(this.olDrawInteraction);
        };
        /**
         * Deactivate the draw interaction
         */
        ModifyControl.prototype.deactivateDrawInteraction = function () {
            var _this = this;
            if (this.olDrawInteractionIsActive === false) {
                return;
            }
            this.removeOlLinearRingsLayer();
            this.removedOlInteractions.forEach(function (olInteraction) {
                _this.olMap.addInteraction(olInteraction);
            });
            this.removedOlInteractions = [];
            this.olDrawInteractionIsActive = false;
            olObservable.unByKey([this.onDrawStartKey, this.onDrawEndKey, this.onDrawKey]);
            if (this.olMap !== undefined) {
                this.olMap.removeInteraction(this.olDrawInteraction);
            }
        };
        /**
         * When draw start, add a new linerar ring to the geometry and start watching for changes
         * @param event Draw start event
         */
        ModifyControl.prototype.onDrawStart = function (event) {
            var _this = this;
            var olGeometry = event.feature.getGeometry();
            this.olOuterGeometry = this.getOlGeometry().clone();
            var linearRingCoordinates = olGeometry.getLinearRing().getCoordinates();
            this.addLinearRingToOlGeometry(linearRingCoordinates);
            this.start$.next(this.getOlGeometry());
            this.onDrawKey = olGeometry.on('change', function (olGeometryEvent) {
                _this.mousePosition = getMousePositionFromOlGeometryEvent(olGeometryEvent);
                var olGeometryTarget = olGeometryEvent.target;
                var _linearRingCoordinates = olGeometryTarget
                    .getLinearRing(0)
                    .getCoordinates();
                _this.updateLinearRingOfOlGeometry(_linearRingCoordinates);
                _this.changes$.next(_this.getOlGeometry());
            });
            this.subscribeToKeyDown();
        };
        /**
         * When translation ends, update the geometry observable and stop watchign for changes
         * @param event Draw end event
         */
        ModifyControl.prototype.onDrawEnd = function (event) {
            olObservable.unByKey(this.onDrawKey);
            this.olOuterGeometry = undefined;
            var linearRingCoordinates = event.feature
                .getGeometry()
                .getLinearRing()
                .getCoordinates();
            this.updateLinearRingOfOlGeometry(linearRingCoordinates);
            this.clearOlLinearRingsSource();
            this.end$.next(this.getOlGeometry());
            this.unsubscribeToKeyDown();
        };
        /**
         * Add a linear ring to the geometry being modified
         * @param coordinates Linear ring coordinates
         */
        ModifyControl.prototype.addLinearRingToOlGeometry = function (coordinates) {
            var olGeometry = this.getOlGeometry();
            var olLinearRing = new OlLinearRing__default["default"](coordinates);
            addLinearRingToOlPolygon(olGeometry, olLinearRing);
        };
        /**
         * Update the last linear ring of the geometry being modified
         * @param coordinates Linear ring coordinates
         */
        ModifyControl.prototype.updateLinearRingOfOlGeometry = function (coordinates) {
            var olGeometry = this.getOlGeometry();
            // Remove the last linear ring (the one we are updating)
            var olLinearRings = olGeometry.getLinearRings().slice(0, -1);
            var newCoordinates = olLinearRings.map(function (olLinearRing) {
                return olLinearRing.getCoordinates();
            });
            newCoordinates.push(coordinates);
            olGeometry.setCoordinates(newCoordinates);
        };
        /**
         * Get the geometry being modified
         * @returns OL Geometry
         */
        ModifyControl.prototype.getOlGeometry = function () {
            var olFeatures = this.olOverlaySource.getFeatures();
            return olFeatures.length > 0 ? olFeatures[0].getGeometry() : undefined;
        };
        return ModifyControl;
    }());

    /**
     * Control to modify geometries
     */
    var SliceControl = /** @class */ (function () {
        function SliceControl(options) {
            this.options = options;
            /**
             * Slice end observable
             */
            this.end$ = new rxjs.Subject();
            /**
             * Slice error, if any
             */
            this.error$ = new rxjs.Subject();
            if (options.layer !== undefined) {
                this.olOverlayLayer = options.layer;
            }
            else {
                this.olOverlayLayer = this.createOlInnerOverlayLayer();
            }
        }
        Object.defineProperty(SliceControl.prototype, "active", {
            /**
             * Wheter the control is active
             */
            get: function () {
                return this.olMap !== undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SliceControl.prototype, "olOverlaySource", {
            /**
             * OL overlay source
             * @internal
             */
            get: function () {
                return this.olOverlayLayer.getSource();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add or remove this control to/from a map.
         * @param map OL Map
         */
        SliceControl.prototype.setOlMap = function (olMap) {
            if (olMap === undefined) {
                this.clearOlInnerOverlaySource();
                this.removeOlInnerOverlayLayer();
                this.removeDrawLineControl();
                this.olMap = olMap;
                return;
            }
            this.olMap = olMap;
            this.addOlInnerOverlayLayer();
            this.addDrawLineControl();
        };
        /**
         * Return the overlay source
         */
        SliceControl.prototype.getSource = function () {
            return this.olOverlaySource;
        };
        /**
         * Add an OL geometry to the overlay for slicing
         * @param olGeometry Ol Geometry
         */
        SliceControl.prototype.setOlGeometry = function (olGeometry) {
            var olFeature = new OlFeature__default["default"]({ geometry: olGeometry });
            this.olOverlaySource.clear(true);
            this.olOverlaySource.addFeature(olFeature);
        };
        /**
         * Create an overlay source if none is defined in the options
         */
        SliceControl.prototype.createOlInnerOverlayLayer = function () {
            return new OlVectorLayer__default["default"]({
                source: this.options.source ? this.options.source : new OlVectorSource__default["default"](),
                style: this.options.layerStyle,
                zIndex: 500
            });
        };
        /**
         * Clear the overlay layer if it wasn't defined in the options
         */
        SliceControl.prototype.removeOlInnerOverlayLayer = function () {
            if (this.options.layer === undefined && this.olMap !== undefined) {
                this.olMap.removeLayer(this.olOverlayLayer);
            }
        };
        /**
         * Add the overlay layer if it wasn't defined in the options
         */
        SliceControl.prototype.addOlInnerOverlayLayer = function () {
            if (this.options.layer === undefined) {
                this.olMap.addLayer(this.olOverlayLayer);
            }
        };
        /**
         * Clear the overlay source if it wasn't defined in the options
         */
        SliceControl.prototype.clearOlInnerOverlaySource = function () {
            if (this.options.layer === undefined && this.options.source === undefined) {
                this.olOverlaySource.clear(true);
            }
        };
        /**
         * Create a draw line control and add it to the map
         */
        SliceControl.prototype.addDrawLineControl = function () {
            var _this = this;
            this.drawLineControl = new DrawControl({
                geometryType: 'LineString',
                interactionStyle: this.options.drawStyle,
                maxPoints: 2
            });
            this.drawLineStart$$ = this.drawLineControl.start$
                .subscribe(function (olLine) { return _this.onDrawLineStart(olLine); });
            this.drawLineEnd$$ = this.drawLineControl.end$
                .subscribe(function (olLine) { return _this.onDrawLineEnd(olLine); });
            this.drawLineControl.setOlMap(this.olMap);
        };
        /**
         * Remove draw line control
         */
        SliceControl.prototype.removeDrawLineControl = function () {
            if (this.drawLineControl === undefined) {
                return;
            }
            this.drawLineStart$$.unsubscribe();
            this.drawLineEnd$$.unsubscribe();
            this.drawLineControl.getSource().clear(true);
            this.drawLineControl.setOlMap(undefined);
        };
        /**
         * Clear the draw source and track the geometry being draw
         * @param olLine Ol linestring or polygon
         */
        SliceControl.prototype.onDrawLineStart = function (olLine) {
            this.drawLineControl.getSource().clear(true);
        };
        /**
         * Slice the first geometry encountered with the drawn line
         * @param olLine Ol linestring
         */
        SliceControl.prototype.onDrawLineEnd = function (olLine) {
            var _this = this;
            var olSlicedGeometries = [];
            var lineExtent = olLine.getExtent();
            var olFeaturesToRemove = [];
            try {
                this.olOverlaySource.forEachFeatureInExtent(lineExtent, function (olFeature) {
                    var olGeometry = olFeature.getGeometry();
                    var olParts = sliceOlGeometry(olGeometry, olLine);
                    if (olParts.length > 0) {
                        olSlicedGeometries.push.apply(olSlicedGeometries, __spreadArray([], __read(olParts)));
                        olFeaturesToRemove.push(olFeature);
                    }
                });
            }
            catch (e) {
                if (e instanceof GeometrySliceError) {
                    this.error$.next(e);
                    return;
                }
                else {
                    throw e;
                }
            }
            this.drawLineControl.getSource().clear(true);
            this.olOverlaySource.addFeatures(olSlicedGeometries.map(function (olGeometry) { return new OlFeature__default["default"](olGeometry); }));
            olFeaturesToRemove.forEach(function (olFeature) {
                _this.olOverlaySource.removeFeature(olFeature);
            });
            this.error$.next(undefined);
            this.end$.next(olSlicedGeometries);
        };
        return SliceControl;
    }());

    var LAYER = 'Layer';

    exports.LayerListToolControlsEnum = void 0;
    (function (LayerListToolControlsEnum) {
        LayerListToolControlsEnum["always"] = "always";
        LayerListToolControlsEnum["never"] = "never";
        LayerListToolControlsEnum["default"] = "default";
    })(exports.LayerListToolControlsEnum || (exports.LayerListToolControlsEnum = {}));

    function MeasurerDialogComponent_table_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "table", 2);
            i0__namespace.ɵɵelementStart(1, "thead");
            i0__namespace.ɵɵelementStart(2, "tr");
            i0__namespace.ɵɵelementStart(3, "th", 3);
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "tbody");
            i0__namespace.ɵɵelementStart(7, "tr");
            i0__namespace.ɵɵelementStart(8, "td");
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵpipe(10, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "td");
            i0__namespace.ɵɵtext(12);
            i0__namespace.ɵɵpipe(13, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(14, "tr");
            i0__namespace.ɵɵelementStart(15, "td");
            i0__namespace.ɵɵtext(16);
            i0__namespace.ɵɵpipe(17, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(18, "td");
            i0__namespace.ɵɵtext(19);
            i0__namespace.ɵɵpipe(20, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(21, "tr");
            i0__namespace.ɵɵelementStart(22, "td");
            i0__namespace.ɵɵtext(23);
            i0__namespace.ɵɵpipe(24, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(25, "td");
            i0__namespace.ɵɵtext(26);
            i0__namespace.ɵɵpipe(27, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(28, "tr");
            i0__namespace.ɵɵelementStart(29, "td");
            i0__namespace.ɵɵtext(30);
            i0__namespace.ɵɵpipe(31, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(32, "td");
            i0__namespace.ɵɵtext(33);
            i0__namespace.ɵɵpipe(34, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 9, "igo.geo.measure.dialog.length.title"));
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(10, 11, ctx_r0.data.length, ctx_r0.measureLengthUnit.Meters));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(13, 14, "igo.geo.measure.dialog.lengthInMeters"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(17, 16, ctx_r0.data.length, ctx_r0.measureLengthUnit.Kilometers));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(20, 19, "igo.geo.measure.dialog.lengthInKilometers"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(24, 21, ctx_r0.data.length, ctx_r0.measureLengthUnit.Miles));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(27, 24, "igo.geo.measure.dialog.lengthInMiles"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(31, 26, ctx_r0.data.length, ctx_r0.measureLengthUnit.Feet));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(34, 29, "igo.geo.measure.dialog.lengthInFeet"));
        }
    }
    function MeasurerDialogComponent_table_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "table", 2);
            i0__namespace.ɵɵelementStart(1, "thead");
            i0__namespace.ɵɵelementStart(2, "tr");
            i0__namespace.ɵɵelementStart(3, "th", 3);
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "tbody");
            i0__namespace.ɵɵelementStart(7, "tr");
            i0__namespace.ɵɵelementStart(8, "td");
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵpipe(10, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "td");
            i0__namespace.ɵɵtext(12);
            i0__namespace.ɵɵpipe(13, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(14, "tr");
            i0__namespace.ɵɵelementStart(15, "td");
            i0__namespace.ɵɵtext(16);
            i0__namespace.ɵɵpipe(17, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(18, "td");
            i0__namespace.ɵɵtext(19);
            i0__namespace.ɵɵpipe(20, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(21, "tr");
            i0__namespace.ɵɵelementStart(22, "td");
            i0__namespace.ɵɵtext(23);
            i0__namespace.ɵɵpipe(24, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(25, "td");
            i0__namespace.ɵɵtext(26);
            i0__namespace.ɵɵpipe(27, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(28, "tr");
            i0__namespace.ɵɵelementStart(29, "td");
            i0__namespace.ɵɵtext(30);
            i0__namespace.ɵɵpipe(31, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(32, "td");
            i0__namespace.ɵɵtext(33);
            i0__namespace.ɵɵpipe(34, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(35, "tr");
            i0__namespace.ɵɵelementStart(36, "td");
            i0__namespace.ɵɵtext(37);
            i0__namespace.ɵɵpipe(38, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(39, "td");
            i0__namespace.ɵɵtext(40);
            i0__namespace.ɵɵpipe(41, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(42, "tr");
            i0__namespace.ɵɵelementStart(43, "td");
            i0__namespace.ɵɵtext(44);
            i0__namespace.ɵɵpipe(45, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(46, "td");
            i0__namespace.ɵɵtext(47);
            i0__namespace.ɵɵpipe(48, "measureFormat");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 13, "igo.geo.measure.dialog.area.title"));
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(10, 15, ctx_r1.data.area, ctx_r1.measureAreaUnit.SquareMeters));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(13, 18, "igo.geo.measure.dialog.areaInSquareMeters"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(17, 20, ctx_r1.data.area, ctx_r1.measureAreaUnit.SquareKilometers));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(20, 23, "igo.geo.measure.dialog.areaInSquareKilometers"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(24, 25, ctx_r1.data.area, ctx_r1.measureAreaUnit.SquareMiles));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(27, 28, "igo.geo.measure.dialog.areaInSquareMiles"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(31, 30, ctx_r1.data.area, ctx_r1.measureAreaUnit.Acres));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(34, 33, "igo.geo.measure.dialog.areaInAcres"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(38, 35, ctx_r1.data.area, ctx_r1.measureAreaUnit.Hectares));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(41, 38, "igo.geo.measure.dialog.areaInHectares"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(45, 40, "igo.geo.measure.dialog.perimeterInMeters"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(48, 42, ctx_r1.data.perimeter, ctx_r1.measureLengthUnit.Meters));
        }
    }
    var MeasurerDialogComponent = /** @class */ (function () {
        function MeasurerDialogComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.measureAreaUnit = exports.MeasureAreaUnit;
            this.measureLengthUnit = exports.MeasureLengthUnit;
        }
        MeasurerDialogComponent.prototype.onNoClick = function () {
            this.dialogRef.close();
        };
        return MeasurerDialogComponent;
    }());
    MeasurerDialogComponent.ɵfac = function MeasurerDialogComponent_Factory(t) { return new (t || MeasurerDialogComponent)(i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialogRef), i0__namespace.ɵɵdirectiveInject(i1.MAT_DIALOG_DATA)); };
    MeasurerDialogComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MeasurerDialogComponent, selectors: [["igo-measurer-dialog"]], decls: 5, vars: 5, consts: [["mat-dialog-title", ""], ["class", "mat-typography", 4, "ngIf"], [1, "mat-typography"], ["colspan", "2"]], template: function MeasurerDialogComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "h3", 0);
                i0__namespace.ɵɵtext(1);
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(3, MeasurerDialogComponent_table_3_Template, 35, 31, "table", 1);
                i0__namespace.ɵɵtemplate(4, MeasurerDialogComponent_table_4_Template, 49, 45, "table", 1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.measure.dialog.title"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.data.length > 0);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.data.area > 0);
            }
        }, styles: ["[_nghost-%COMP%]{font-family:Roboto,\"Helvetica Neue\",sans-serif}h3[_ngcontent-%COMP%]{text-align:center;margin:0}table[_ngcontent-%COMP%]{width:100%;padding:10px}table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-child{padding-left:10px}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MeasurerDialogComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-measurer-dialog',
                        templateUrl: 'measurer-dialog.component.html',
                        styleUrls: ['./measurer-dialog.component.scss']
                    }]
            }], function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, null);
    })();

    var _c0$a = ["table"];
    function MeasurerComponent_mat_divider_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function MeasurerComponent_mat_slide_toggle_15_Template(rf, ctx) {
        if (rf & 1) {
            var _r12_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 7);
            i0__namespace.ɵɵlistener("change", function MeasurerComponent_mat_slide_toggle_15_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r12_1); var ctx_r11 = i0__namespace.ɵɵnextContext(); return ctx_r11.onToggleDisplayLines($event.checked); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r1.displayLines)("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.measure.toggleDisplayLines"), " ");
        }
    }
    function MeasurerComponent_mat_divider_17_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function MeasurerComponent_mat_slide_toggle_20_Template(rf, ctx) {
        if (rf & 1) {
            var _r14_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 7);
            i0__namespace.ɵɵlistener("change", function MeasurerComponent_mat_slide_toggle_20_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r14_1); var ctx_r13 = i0__namespace.ɵɵnextContext(); return ctx_r13.onToggleDisplayDistance($event.checked); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r3.displayDistance)("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.measure.toggleDisplayDistance"), " ");
        }
    }
    function MeasurerComponent_mat_slide_toggle_22_Template(rf, ctx) {
        if (rf & 1) {
            var _r16_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 7);
            i0__namespace.ɵɵlistener("change", function MeasurerComponent_mat_slide_toggle_22_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r15 = i0__namespace.ɵɵnextContext(); return ctx_r15.onToggleDisplayAreas($event.checked); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r4.displayAreas)("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.measure.toggleDisplayAreas"), " ");
        }
    }
    function MeasurerComponent_mat_divider_24_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function MeasurerComponent_ng_container_29_igo_measurer_item_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r21_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-measurer-item", 14);
            i0__namespace.ɵɵlistener("measureUnitChange", function MeasurerComponent_ng_container_29_igo_measurer_item_1_Template_igo_measurer_item_measureUnitChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r21_1); var ctx_r20 = i0__namespace.ɵɵnextContext(2); return ctx_r20.onLengthUnitChange($event); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measure_r17 = i0__namespace.ɵɵnextContext().ngIf;
            var ctx_r18 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("measureType", ctx_r18.measureType.Length)("measureUnit", ctx_r18.measureLengthUnit.Meters)("measure", measure_r17.length)("auto", ctx_r18.measureUnitsAuto)("placeholder", i0__namespace.ɵɵpipeBind1(1, 5, ctx_r18.activeMeasureType === ctx_r18.measureType.Area ? "igo.geo.measure.perimeter" : "igo.geo.measure.length"));
        }
    }
    function MeasurerComponent_ng_container_29_igo_measurer_item_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r24_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-measurer-item", 14);
            i0__namespace.ɵɵlistener("measureUnitChange", function MeasurerComponent_ng_container_29_igo_measurer_item_2_Template_igo_measurer_item_measureUnitChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r24_1); var ctx_r23 = i0__namespace.ɵɵnextContext(2); return ctx_r23.onAreaUnitChange($event); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measure_r17 = i0__namespace.ɵɵnextContext().ngIf;
            var ctx_r19 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("measureType", ctx_r19.measureType.Area)("measureUnit", ctx_r19.measureAreaUnit.SquareMeters)("measure", measure_r17.area)("auto", ctx_r19.measureUnitsAuto)("placeholder", i0__namespace.ɵɵpipeBind1(1, 5, "igo.geo.measure.area"));
        }
    }
    function MeasurerComponent_ng_container_29_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, MeasurerComponent_ng_container_29_igo_measurer_item_1_Template, 2, 7, "igo-measurer-item", 13);
            i0__namespace.ɵɵtemplate(2, MeasurerComponent_ng_container_29_igo_measurer_item_2_Template, 2, 7, "igo-measurer-item", 13);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r6.activeMeasureType === ctx_r6.measureType.Length || ctx_r6.activeMeasureType === ctx_r6.measureType.Area);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r6.activeMeasureType === ctx_r6.measureType.Area);
        }
    }
    function MeasurerComponent_mat_divider_31_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function MeasurerComponent_button_35_Template(rf, ctx) {
        if (rf & 1) {
            var _r27_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 15);
            i0__namespace.ɵɵlistener("click", function MeasurerComponent_button_35_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r27_1); var ctx_r26 = i0__namespace.ɵɵnextContext(); return ctx_r26.onCalculateClick(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelement(3, "mat-icon", 16);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r8 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.measure.actionbar.calculate.tooltip"))("disabled", i0__namespace.ɵɵpipeBind1(2, 4, ctx_r8.selectedFeatures$).length === 0);
        }
    }
    function MeasurerComponent_button_38_Template(rf, ctx) {
        if (rf & 1) {
            var _r29_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 17);
            i0__namespace.ɵɵlistener("click", function MeasurerComponent_button_38_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r29_1); var ctx_r28 = i0__namespace.ɵɵnextContext(); return ctx_r28.onDeleteClick(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelement(3, "mat-icon", 18);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r9 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.measure.actionbar.delete.tooltip"))("disabled", i0__namespace.ɵɵpipeBind1(2, 4, ctx_r9.selectedFeatures$).length === 0);
        }
    }
    /**
     * Tool to measure lengths and areas
     */
    var MeasurerComponent = /** @class */ (function () {
        function MeasurerComponent(languageService, dialog, storageService) {
            var _this = this;
            this.languageService = languageService;
            this.dialog = dialog;
            this.storageService = storageService;
            /**
             * Table template
             * @internal
             */
            this.tableTemplate = {
                selection: true,
                selectMany: true,
                selectionCheckbox: true,
                sort: true,
                columns: [
                    {
                        name: 'length',
                        title: this.languageService.translate.instant('igo.geo.measure.lengthHeader'),
                        valueAccessor: function (localFeature) {
                            var unit = _this.activeLengthUnit;
                            var measure = metersToUnit(localFeature.properties.measure.length, unit);
                            return formatMeasure(measure, {
                                decimal: 1,
                                unit: unit,
                                unitAbbr: false,
                                locale: 'fr'
                            });
                        }
                    },
                    {
                        name: 'area',
                        title: this.languageService.translate.instant('igo.geo.measure.areaHeader'),
                        valueAccessor: function (localFeature) {
                            var unit = _this.activeAreaUnit;
                            var measure = squareMetersToUnit(localFeature.properties.measure.area, unit);
                            return measure ? formatMeasure(measure, {
                                decimal: 1,
                                unit: unit,
                                unitAbbr: false,
                                locale: 'fr'
                            }) : '';
                        }
                    }
                ]
            };
            this.subscriptions$$ = [];
            /**
             * Reference to the MeasureType enum
             * @internal
             */
            this.measureType = exports.MeasureType;
            /**
             * Reference to the AreaMeasureUnit enum
             * @internal
             */
            this.measureAreaUnit = exports.MeasureAreaUnit;
            /**
             * Reference to the LengthMeasureUnit enum
             * @internal
             */
            this.measureLengthUnit = exports.MeasureLengthUnit;
            /**
             * Whether measure units should be automatically determined
             * @internal
             */
            this.measureUnitsAuto = false;
            /**
             * Whether display of distances of areas
             * @internal
             */
            this.displayDistance = true;
            /**
             * Whether display of distances of lines
             * @internal
             */
            this.displayLines = true;
            /**
             * Whether display of areas
             * @internal
             */
            this.displayAreas = true;
            /**
             * Observable of line boolean
             * @internal
             */
            this.hasLine$ = new rxjs.BehaviorSubject(false);
            /**
             * Observable of area boolean
             * @internal
             */
            this.hasArea$ = new rxjs.BehaviorSubject(false);
            /**
             * Observable of area
             * @internal
             */
            this.measure$ = new rxjs.BehaviorSubject({});
            /**
             * Observable of selected features
             * @internal
             */
            this.selectedFeatures$ = new rxjs.BehaviorSubject([]);
            /**
             * OL draw source
             * @internal
             */
            this.showTooltips = true;
            /**
             * Whether draw control toggle is disabled or not
             * @internal
             */
            this.drawControlIsDisabled = true;
            /**
             * Active mlength unit
             */
            this.activeLengthUnit = exports.MeasureLengthUnit.Meters;
            /**
             * Active area unit
             */
            this.activeAreaUnit = exports.MeasureAreaUnit.SquareMeters;
            /**
             * OL draw source
             */
            this.olDrawSource = new OlVectorSource__default["default"]();
            /**
             * The minimum length a segment must have to display a tooltip.
             * It also applies to area tooltips.
             */
            this.minSegmentLength = 10;
        }
        Object.defineProperty(MeasurerComponent.prototype, "activeMeasureType", {
            get: function () { return this._activeMeasureType; },
            /**
             * Measure type
             * @internal
             */
            set: function (value) { this.setActiveMeasureType(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MeasurerComponent.prototype, "drawControlIsActive", {
            /**
             * Wheter one of the draw control is active
             * @internal
             */
            get: function () {
                return this.activeDrawControl !== undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MeasurerComponent.prototype, "projection", {
            get: function () {
                return this.map.ol.getView().getProjection().getCode();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Add draw controls and activate one
         * @internal
         */
        MeasurerComponent.prototype.ngOnInit = function () {
            this.initStore();
            this.createDrawLineControl();
            this.createDrawPolygonControl();
            this.createModifyControl();
            this.toggleDrawControl();
            this.updateTooltipsOfOlSource(this.store.source.ol);
            this.checkDistanceAreaToggle();
            this.setActiveMeasureType(exports.MeasureType.Length);
        };
        /**
         * Clear the overlay layer and any interaction added by this component.
         * @internal
         */
        MeasurerComponent.prototype.ngOnDestroy = function () {
            this.setActiveMeasureType(undefined);
            this.deactivateModifyControl();
            this.freezeStore();
            this.subscriptions$$.map(function (s) { return s.unsubscribe(); });
        };
        /**
         * Set the measure type
         * @internal
         */
        MeasurerComponent.prototype.onMeasureTypeChange = function (measureType) {
            this.activeMeasureType = measureType;
        };
        /**
         * Activate or deactivate the current draw control
         * @internal
         */
        MeasurerComponent.prototype.onToggleDrawControl = function (toggle) {
            if (toggle === true) {
                this.toggleDrawControl();
            }
            else {
                this.deactivateDrawControl();
            }
        };
        /**
         * Activate or deactivate the current draw control
         * @internal
         */
        MeasurerComponent.prototype.onToggleMeasureUnitsAuto = function (toggle) {
            this.measureUnitsAuto = toggle;
        };
        /**
         * Activate or deactivate the current display of distances of the areas
         * @internal
         */
        MeasurerComponent.prototype.onToggleDisplayDistance = function (toggle) {
            this.displayDistance = toggle;
            this.onDisplayDistance();
            toggle ? (this.storageService.set('distanceToggle', true, i2$1.StorageScope.SESSION)) :
                (this.storageService.set('distanceToggle', false, i2$1.StorageScope.SESSION));
        };
        /**
         * Activate or deactivate the current display of distances of the lines
         * @internal
         */
        MeasurerComponent.prototype.onToggleDisplayLines = function (toggle) {
            this.displayLines = toggle;
            this.onDisplayLines();
            toggle ? (this.storageService.set('linesToggle', true, i2$1.StorageScope.SESSION)) :
                (this.storageService.set('linesToggle', false, i2$1.StorageScope.SESSION));
        };
        /**
         * Activate or deactivate the current display of areas
         * @internal
         */
        MeasurerComponent.prototype.onToggleDisplayAreas = function (toggle) {
            this.displayAreas = toggle;
            this.onDisplayAreas();
            toggle ? (this.storageService.set('areasToggle', true, i2$1.StorageScope.SESSION)) :
                (this.storageService.set('areasToggle', false, i2$1.StorageScope.SESSION));
        };
        /**
         * Set display parametres in current values
         * @internal
         */
        MeasurerComponent.prototype.checkDistanceAreaToggle = function () {
            if (this.storageService.get('distanceToggle') === false) {
                this.displayDistance = false;
            }
            if (this.storageService.get('linesToggle') === false) {
                this.displayLines = false;
            }
            if (this.storageService.get('areasToggle') === false) {
                this.displayAreas = false;
            }
        };
        /**
         * Activate or deactivate the current display of distances of areas
         * @internal
         */
        MeasurerComponent.prototype.onDisplayDistance = function () {
            if (this.displayDistance) {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-polygone-segments')).map(function (value) { return value.classList.remove('igo-map-tooltip-hidden'); });
            }
            else {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-polygone-segments')).map(function (value) { return value.classList.add('igo-map-tooltip-hidden'); });
            }
        };
        /**
         * Activate or deactivate the current display of distances of lines
         * @internal
         */
        MeasurerComponent.prototype.onDisplayLines = function () {
            if (this.displayLines) {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-line-segments')).map(function (value) { return value.classList.remove('igo-map-tooltip-hidden'); });
            }
            else {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-line-segments')).map(function (value) { return value.classList.add('igo-map-tooltip-hidden'); });
            }
        };
        /**
         * Activate or deactivate the current display of areas
         * @internal
         */
        MeasurerComponent.prototype.onDisplayAreas = function () {
            if (this.displayAreas) {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-area')).map(function (value) { return value.classList.remove('igo-map-tooltip-hidden'); });
            }
            else {
                Array.from(document.getElementsByClassName('igo-map-tooltip-measure-area')).map(function (value) { return value.classList.add('igo-map-tooltip-hidden'); });
            }
        };
        /**
         * Set the measure type
         * @internal
         */
        MeasurerComponent.prototype.onLengthUnitChange = function (unit) {
            this.activeLengthUnit = unit;
            this.table.refresh();
            this.updateTooltipsOfOlSource(this.store.source.ol);
            if (this.activeOlGeometry !== undefined) {
                this.updateTooltipsOfOlGeometry(this.activeOlGeometry);
            }
        };
        /**
         * Set the measure type
         * @internal
         */
        MeasurerComponent.prototype.onAreaUnitChange = function (unit) {
            this.activeAreaUnit = unit;
            this.table.refresh();
            this.updateTooltipsOfOlSource(this.store.source.ol);
            if (this.activeOlGeometry !== undefined) {
                this.updateTooltipsOfOlGeometry(this.activeOlGeometry);
            }
        };
        MeasurerComponent.prototype.onCalculateClick = function () {
            var features = this.selectedFeatures$.value;
            var area = features.reduce(function (sum, localFeature) {
                return sum + localFeature.properties.measure.area || 0;
            }, 0);
            var length = features.reduce(function (sum, localFeature) {
                if (localFeature.geometry.type === 'Polygon') {
                    return sum;
                }
                return sum + localFeature.properties.measure.length || 0;
            }, 0);
            var perimeter = features.reduce(function (sum, localFeature) {
                if (localFeature.geometry.type === 'LineString') {
                    return sum;
                }
                return sum + localFeature.properties.measure.length || 0;
            }, 0);
            this.openDialog({
                area: area,
                length: length,
                perimeter: perimeter
            });
        };
        MeasurerComponent.prototype.onDeleteClick = function () {
            var _this = this;
            this.store.deleteMany(this.selectedFeatures$.value);
            this.selectedFeatures$.value.forEach(function (selectedFeature) {
                _this.olDrawSource.getFeatures().forEach(function (drawingLayerFeature) {
                    var geometry = drawingLayerFeature.getGeometry();
                    if (selectedFeature.properties.id === geometry.ol_uid) {
                        _this.olDrawSource.removeFeature(drawingLayerFeature);
                    }
                });
            });
        };
        MeasurerComponent.prototype.onModifyClick = function () {
            if (this.selectedFeatures$.value.length !== 1) {
                return;
            }
            if (this.modifyControl.active === true) {
                this.deactivateModifyControl();
                this.toggleDrawControl();
            }
            else {
                var localFeature_1 = this.selectedFeatures$.value[0];
                var olFeatures = this.store.layer.ol.getSource().getFeatures();
                var olFeature = olFeatures.find(function (_olFeature) {
                    return _olFeature.get('id') === localFeature_1.properties.id;
                });
                if (olFeature !== undefined) {
                    this.deactivateDrawControl();
                    this.activateModifyControl();
                    var olGeometry = olFeature.getGeometry();
                    this.clearTooltipsOfOlGeometry(olGeometry);
                    this.modifyControl.setOlGeometry(olGeometry);
                }
            }
        };
        MeasurerComponent.prototype.openDialog = function (data) {
            this.dialog.open(MeasurerDialogComponent, { data: data });
        };
        /**
         * Initialize the measure store and set up some listeners
         * @internal
         */
        MeasurerComponent.prototype.initStore = function () {
            var _this = this;
            var store = this.store;
            var layer = new VectorLayer({
                title: this.languageService.translate.instant('igo.geo.measure.layerTitle'),
                isIgoInternalLayer: true,
                id: "igo-measures-" + utils.uuid(),
                zIndex: 200,
                source: new FeatureDataSource(),
                style: createMeasureLayerStyle(),
                showInLayerList: true,
                exportable: true,
                browsable: false,
                workspace: { enabled: false }
            });
            tryBindStoreLayer(store, layer);
            store.layer.visible = true;
            layer.visible$.subscribe(function (visible) {
                if (visible) {
                    Array.from(document.getElementsByClassName('igo-map-tooltip-measure')).map(function (value) { return value.classList.remove('igo-map-tooltip-measure-by-display'); });
                }
                else {
                    Array.from(document.getElementsByClassName('igo-map-tooltip-measure')).map(function (value) { return value.classList.add('igo-map-tooltip-measure-by-display'); });
                }
            });
            tryAddLoadingStrategy(store);
            tryAddSelectionStrategy(store, new FeatureStoreSelectionStrategy({
                map: this.map,
                many: true
            }));
            this.onFeatureAddedKey = store.source.ol.on('addfeature', function (event) {
                var localFeature = event.feature;
                var olGeometry = localFeature.getGeometry();
                _this.updateMeasureOfOlGeometry(olGeometry, localFeature.get('measure'));
                _this.onDisplayDistance();
            });
            this.onFeatureRemovedKey = store.source.ol.on('removefeature', function (event) {
                var olGeometry = event.feature.getGeometry();
                _this.clearTooltipsOfOlGeometry(olGeometry);
            });
            this.selectedFeatures$$ = store.stateView.manyBy$(function (record) {
                return record.state.selected === true;
            }).pipe(operators.skip(1) // Skip initial emission
            )
                .subscribe(function (records) {
                if (_this.modifyControl.active === true) {
                    _this.deactivateModifyControl();
                }
                _this.selectedFeatures$.next(records.map(function (record) { return record.entity; }));
            });
            this.subscriptions$$.push(this.store.entities$.subscribe(function (objectsExists) {
                if (objectsExists.find(function (objectExist) { return objectExist.geometry.type === 'Polygon'; })) {
                    _this.hasArea$.next(true);
                }
                else {
                    _this.hasArea$.next(false);
                }
                if (objectsExists.find(function (objectExist) { return objectExist.geometry.type === 'LineString'; })) {
                    _this.hasLine$.next(true);
                }
                else {
                    _this.hasLine$.next(false);
                }
            }));
            this.subscriptions$$.push(this.store.count$.subscribe(function (cnt) {
                cnt >= 1 ?
                    _this.store.layer.options.showInLayerList = true :
                    _this.store.layer.options.showInLayerList = false;
            }));
        };
        /**
         * Freeze any store, meaning the layer is removed, strategies are deactivated
         * and some listener removed
         * @internal
         */
        MeasurerComponent.prototype.freezeStore = function () {
            var store = this.store;
            this.selectedFeatures$$.unsubscribe();
            olObservable.unByKey(this.onFeatureAddedKey);
            olObservable.unByKey(this.onFeatureRemovedKey);
            store.deactivateStrategyOfType(FeatureStoreLoadingStrategy);
            store.deactivateStrategyOfType(FeatureStoreSelectionStrategy);
        };
        /**
         * Create a draw line control
         */
        MeasurerComponent.prototype.createDrawLineControl = function () {
            this.drawLineControl = new DrawControl({
                geometryType: 'LineString',
                drawingLayerSource: this.olDrawSource,
                interactionStyle: createMeasureInteractionStyle(),
                drawingLayerStyle: new OlStyle__default["default"]({})
            });
        };
        /**
         * Create a draw polygon control
         */
        MeasurerComponent.prototype.createDrawPolygonControl = function () {
            this.drawPolygonControl = new DrawControl({
                geometryType: 'Polygon',
                drawingLayerSource: this.olDrawSource,
                interactionStyle: createMeasureInteractionStyle(),
                drawingLayerStyle: new OlStyle__default["default"]({})
            });
        };
        /**
         * Create a draw polygon control
         */
        MeasurerComponent.prototype.createModifyControl = function () {
            this.modifyControl = new ModifyControl({
                source: this.olDrawSource,
                drawStyle: createMeasureInteractionStyle(),
                layerStyle: new OlStyle__default["default"]({})
            });
        };
        /**
         * Activate the right control
         */
        MeasurerComponent.prototype.toggleDrawControl = function () {
            this.deactivateDrawControl();
            // this.deactivateModifyControl();
            if (this.activeMeasureType === exports.MeasureType.Length) {
                this.activateDrawControl(this.drawLineControl);
            }
            else if (this.activeMeasureType === exports.MeasureType.Area) {
                this.activateDrawControl(this.drawPolygonControl);
            }
        };
        /**
         * Activate a given control
         * @param drawControl Draw control
         */
        MeasurerComponent.prototype.activateDrawControl = function (drawControl) {
            var _this = this;
            this.drawControlIsDisabled = false;
            this.activeDrawControl = drawControl;
            this.drawStart$$ = drawControl.start$
                .subscribe(function (olGeometry) { return _this.onDrawStart(olGeometry); });
            this.drawEnd$$ = drawControl.end$
                .subscribe(function (olGeometry) { return _this.onDrawEnd(olGeometry); });
            this.drawChanges$$ = drawControl.changes$
                .subscribe(function (olGeometry) { return _this.onDrawChanges(olGeometry); });
            this.drawChanges$$ = drawControl.abort$
                .subscribe(function (olGeometry) {
                _this.clearTooltipsOfOlGeometry(olGeometry);
                _this.clearMeasures();
            });
            drawControl.setOlMap(this.map.ol, false);
        };
        /**
         * Deactivate the active draw control
         */
        MeasurerComponent.prototype.deactivateDrawControl = function () {
            if (this.activeDrawControl === undefined) {
                return;
            }
            this.olDrawSource.clear();
            if (this.drawStart$$ !== undefined) {
                this.drawStart$$.unsubscribe();
            }
            if (this.drawEnd$$ !== undefined) {
                this.drawEnd$$.unsubscribe();
            }
            if (this.drawChanges$$ !== undefined) {
                this.drawChanges$$.unsubscribe();
            }
            this.clearTooltipsOfOlSource(this.olDrawSource);
            if (this.activeOlGeometry !== undefined) {
                this.clearTooltipsOfOlGeometry(this.activeOlGeometry);
            }
            this.activeDrawControl.setOlMap(undefined);
            this.activeDrawControl = undefined;
            this.activeOlGeometry = undefined;
        };
        MeasurerComponent.prototype.setActiveMeasureType = function (measureType) {
            this._activeMeasureType = measureType;
            this.clearMeasures();
            this.toggleDrawControl();
        };
        /**
         * Clear the draw source and track the geometry being drawn
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onDrawStart = function (olGeometry) {
            this.activeOlGeometry = olGeometry;
        };
        /**
         * Clear the draw source and track the geometry being draw
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onDrawEnd = function (olGeometry) {
            this.activeOlGeometry = undefined;
            this.finalizeMeasureOfOlGeometry(olGeometry);
            this.addFeatureToStore(olGeometry);
            this.clearTooltipsOfOlGeometry(olGeometry);
            this.olDrawSource.clear(true);
        };
        /**
         * Update measures observables and map tooltips
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onDrawChanges = function (olGeometry) {
            var measure = measureOlGeometry(olGeometry, this.projection);
            this.updateMeasureOfOlGeometry(olGeometry, Object.assign({}, measure, {
                area: undefined // We don't want to display an area tooltip while drawing.
            }));
            this.measure$.next(measure);
        };
        /**
         * Activate a given control
         * @param modifyControl Modify control
         */
        MeasurerComponent.prototype.activateModifyControl = function () {
            var _this = this;
            var selection = this.store.getStrategyOfType(FeatureStoreSelectionStrategy);
            selection.deactivate();
            selection.clear();
            this.modifyStart$$ = this.modifyControl.start$
                .subscribe(function (olGeometry) { return _this.onModifyStart(olGeometry); });
            this.modifyEnd$$ = this.modifyControl.end$
                .subscribe(function (olGeometry) { return _this.onModifyEnd(olGeometry); });
            this.modifyChanges$$ = this.modifyControl.changes$
                .subscribe(function (olGeometry) { return _this.onModifyChanges(olGeometry); });
            this.modifyControl.setOlMap(this.map.ol);
        };
        /**
         * Deactivate the active modify control
         */
        MeasurerComponent.prototype.deactivateModifyControl = function () {
            if (this.modifyStart$$ !== undefined) {
                this.modifyStart$$.unsubscribe();
            }
            if (this.modifyEnd$$ !== undefined) {
                this.modifyEnd$$.unsubscribe();
            }
            if (this.modifyChanges$$ !== undefined) {
                this.modifyChanges$$.unsubscribe();
            }
            if (this.activeOlGeometry !== undefined) {
                if (this.selectedFeatures$.value.length === 1) {
                    var localFeature = this.selectedFeatures$.value[0];
                    this.addFeatureToStore(this.activeOlGeometry, localFeature);
                }
                this.finalizeMeasureOfOlGeometry(this.activeOlGeometry);
            }
            this.olDrawSource.clear();
            this.store.activateStrategyOfType(FeatureStoreSelectionStrategy);
            this.activeOlGeometry = undefined;
            this.modifyControl.setOlMap(undefined);
        };
        /**
         * Clear the draw source and track the geometry being drawn
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onModifyStart = function (olGeometry) {
            this.onDrawStart(olGeometry);
        };
        /**
         * Update measures observables and map tooltips
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onModifyChanges = function (olGeometry) {
            this.onDrawChanges(olGeometry);
        };
        /**
         * Clear the draw source and track the geometry being draw
         * @param olGeometry Ol linestring or polygon
         */
        MeasurerComponent.prototype.onModifyEnd = function (olGeometry) {
            this.finalizeMeasureOfOlGeometry(olGeometry);
        };
        MeasurerComponent.prototype.finalizeMeasureOfOlGeometry = function (olGeometry) {
            var measure = measureOlGeometry(olGeometry, this.projection);
            this.updateMeasureOfOlGeometry(olGeometry, measure);
        };
        /**
         * Update measures observables
         * @param olGeometry Ol linestring or polygon
         * @param measure Measure
         */
        MeasurerComponent.prototype.updateMeasureOfOlGeometry = function (olGeometry, measure) {
            olGeometry.setProperties({ _measure: measure }, true);
            this.updateTooltipsOfOlGeometry(olGeometry);
        };
        /**
         * Clear the measures observables
         */
        MeasurerComponent.prototype.clearMeasures = function () {
            this.measure$.next({});
        };
        /**
         * Add a feature with measures to the store. The loading stragegy of the store
         * will trigger and add the feature to the map.
         * @internal
         */
        MeasurerComponent.prototype.addFeatureToStore = function (olGeometry, localFeature) {
            var featureId = localFeature ? localFeature.properties.id : olGeometry.ol_uid;
            var projection = this.map.ol.getView().getProjection();
            var geometry = new OlGeoJSON__default["default"]().writeGeometryObject(olGeometry, {
                featureProjection: projection,
                dataProjection: projection
            });
            this.store.update({
                type: FEATURE,
                geometry: geometry,
                projection: projection.getCode(),
                properties: {
                    id: featureId,
                    measure: olGeometry.get('_measure')
                },
                meta: {
                    id: featureId
                }
            });
        };
        /**
         * Update all the tooltips of an OL geometry
         * @param olGeometry OL Geometry
         * @param lengths Lengths of the OL geometry's segments
         * @param measureUnit Display tooltip measure in those units
         */
        MeasurerComponent.prototype.updateTooltipsOfOlGeometry = function (olGeometry) {
            var measure = olGeometry.get('_measure');
            var lengths = measure.lengths;
            var area = measure.area;
            var olMidpointsTooltips = updateOlTooltipsAtMidpoints(olGeometry);
            if (lengths.length === olMidpointsTooltips.length) {
                for (var i = 0; i < olMidpointsTooltips.length; i++) {
                    var length = lengths[i];
                    if (length !== undefined) {
                        this.updateOlTooltip(olMidpointsTooltips[i], metersToUnit(length, this.activeLengthUnit), this.activeLengthUnit, exports.MeasureType.Length);
                    }
                }
            }
            if (area !== undefined) {
                this.updateOlTooltip(updateOlTooltipAtCenter(olGeometry), squareMetersToUnit(area, this.activeAreaUnit), this.activeAreaUnit, exports.MeasureType.Area);
            }
        };
        /**
         * Show the map tooltips of a geoemtry
         */
        MeasurerComponent.prototype.showTooltipsOfOlGeometry = function (olGeometry) {
            var _this = this;
            getTooltipsOfOlGeometry(olGeometry).forEach(function (olTooltip) {
                if (_this.shouldShowTooltip(olTooltip)) {
                    _this.map.ol.addOverlay(olTooltip);
                }
            });
        };
        /**
         * Clear the tooltips of an OL geometrys
         * @param olGeometry OL geometry with tooltips
         */
        MeasurerComponent.prototype.clearTooltipsOfOlGeometry = function (olGeometry) {
            var _this = this;
            getTooltipsOfOlGeometry(olGeometry).forEach(function (olTooltip) {
                if (olTooltip !== undefined && olTooltip.getMap() !== undefined) {
                    _this.map.ol.removeOverlay(olTooltip);
                }
            });
        };
        /**
         * Show the map tooltips of all the geometries of a source
         */
        MeasurerComponent.prototype.updateTooltipsOfOlSource = function (olSource) {
            var _this = this;
            olSource.forEachFeature(function (olFeature) {
                _this.updateTooltipsOfOlGeometry(olFeature.getGeometry());
            });
        };
        /**
         * Show the map tooltips of all the geometries of a source
         */
        MeasurerComponent.prototype.showTooltipsOfOlSource = function (olSource) {
            var _this = this;
            olSource.forEachFeature(function (olFeature) {
                _this.showTooltipsOfOlGeometry(olFeature.getGeometry());
            });
        };
        /**
         * Clear the map tooltips
         * @param olDrawSource OL vector source
         */
        MeasurerComponent.prototype.clearTooltipsOfOlSource = function (olSource) {
            var _this = this;
            olSource.forEachFeature(function (olFeature) {
                var olGeometry = olFeature.getGeometry();
                if (olGeometry !== undefined) {
                    _this.clearTooltipsOfOlGeometry(olFeature.getGeometry());
                }
            });
        };
        /**
         * Update an OL tooltip properties and inner HTML and add it to the map if possible
         * @param olTooltip OL tooltip
         * @param measure The measure valeu ti display
         * @param measureUnit Display tooltip measure in those units
         */
        MeasurerComponent.prototype.updateOlTooltip = function (olTooltip, measure, unit, type) {
            olTooltip.setProperties({ _measure: measure, _unit: unit, _type: type }, true);
            olTooltip.getElement().innerHTML = this.computeTooltipInnerHTML(olTooltip);
            if (this.shouldShowTooltip(olTooltip)) {
                this.map.ol.addOverlay(olTooltip);
            }
        };
        /**
         * Compute a tooltip's content
         * @param olTooltip OL overlay
         * @returns Inner HTML
         */
        MeasurerComponent.prototype.computeTooltipInnerHTML = function (olTooltip) {
            var properties = olTooltip.getProperties();
            return formatMeasure(properties._measure, {
                decimal: 1,
                unit: properties._unit,
                unitAbbr: true,
                locale: 'fr'
            }, this.languageService);
        };
        /**
         * Whether a tooltip should be showned based on the length
         * of the segment it is bound to.
         * @param olTooltip OL overlay
         * @returns True if the tooltip should be shown
         */
        MeasurerComponent.prototype.shouldShowTooltip = function (olTooltip) {
            if (this.showTooltips === false) {
                return false;
            }
            var properties = olTooltip.getProperties();
            var measure = properties._measure;
            if (measure === undefined) {
                return false;
            }
            if (properties._unit === exports.MeasureType.Length) {
                var minSegmentLength = metersToUnit(this.minSegmentLength, properties._unit) || 0;
                return measure > Math.max(minSegmentLength, 0);
            }
            return true;
        };
        return MeasurerComponent;
    }());
    MeasurerComponent.ɵfac = function MeasurerComponent_Factory(t) { return new (t || MeasurerComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialog), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.StorageService)); };
    MeasurerComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MeasurerComponent, selectors: [["igo-measurer"]], viewQuery: function MeasurerComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$a, 7);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.table = _t.first);
            }
        }, inputs: { map: "map", store: "store", activeMeasureType: "activeMeasureType", minSegmentLength: "minSegmentLength" }, decls: 43, vars: 60, consts: [[1, "measure-type-toggle", "mat-typography"], [3, "value", "change"], [3, "value"], [1, "measure-options", "mat-typography"], [3, "disabled", "checked", "labelPosition", "change"], [4, "ngIf"], [3, "checked", "labelPosition", "change", 4, "ngIf"], [3, "checked", "labelPosition", "change"], [1, "measure-store-buttons"], ["mat-icon-button", "", "color", "accent", 3, "matTooltip", "disabled", "click", 4, "ngIf"], ["mat-icon-button", "", "color", "warn", 3, "matTooltip", "disabled", "click", 4, "ngIf"], [1, "table-compact", 3, "store", "template"], ["table", ""], [3, "measureType", "measureUnit", "measure", "auto", "placeholder", "measureUnitChange", 4, "ngIf"], [3, "measureType", "measureUnit", "measure", "auto", "placeholder", "measureUnitChange"], ["mat-icon-button", "", "color", "accent", 3, "matTooltip", "disabled", "click"], ["svgIcon", "calculator"], ["mat-icon-button", "", "color", "warn", 3, "matTooltip", "disabled", "click"], ["svgIcon", "delete"]], template: function MeasurerComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div");
                i0__namespace.ɵɵelementStart(1, "div", 0);
                i0__namespace.ɵɵelementStart(2, "mat-button-toggle-group", 1);
                i0__namespace.ɵɵlistener("change", function MeasurerComponent_Template_mat_button_toggle_group_change_2_listener($event) { return ctx.onMeasureTypeChange($event.value); });
                i0__namespace.ɵɵelementStart(3, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(4);
                i0__namespace.ɵɵpipe(5, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(7);
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "div", 3);
                i0__namespace.ɵɵelementStart(10, "mat-slide-toggle", 4);
                i0__namespace.ɵɵlistener("change", function MeasurerComponent_Template_mat_slide_toggle_change_10_listener($event) { return ctx.onToggleDrawControl($event.checked); });
                i0__namespace.ɵɵtext(11);
                i0__namespace.ɵɵpipe(12, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(13, MeasurerComponent_mat_divider_13_Template, 1, 0, "mat-divider", 5);
                i0__namespace.ɵɵpipe(14, "async");
                i0__namespace.ɵɵtemplate(15, MeasurerComponent_mat_slide_toggle_15_Template, 3, 5, "mat-slide-toggle", 6);
                i0__namespace.ɵɵpipe(16, "async");
                i0__namespace.ɵɵtemplate(17, MeasurerComponent_mat_divider_17_Template, 1, 0, "mat-divider", 5);
                i0__namespace.ɵɵpipe(18, "async");
                i0__namespace.ɵɵpipe(19, "async");
                i0__namespace.ɵɵtemplate(20, MeasurerComponent_mat_slide_toggle_20_Template, 3, 5, "mat-slide-toggle", 6);
                i0__namespace.ɵɵpipe(21, "async");
                i0__namespace.ɵɵtemplate(22, MeasurerComponent_mat_slide_toggle_22_Template, 3, 5, "mat-slide-toggle", 6);
                i0__namespace.ɵɵpipe(23, "async");
                i0__namespace.ɵɵtemplate(24, MeasurerComponent_mat_divider_24_Template, 1, 0, "mat-divider", 5);
                i0__namespace.ɵɵpipe(25, "async");
                i0__namespace.ɵɵelementStart(26, "mat-slide-toggle", 7);
                i0__namespace.ɵɵlistener("change", function MeasurerComponent_Template_mat_slide_toggle_change_26_listener($event) { return ctx.onToggleMeasureUnitsAuto($event.checked); });
                i0__namespace.ɵɵtext(27);
                i0__namespace.ɵɵpipe(28, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(29, MeasurerComponent_ng_container_29_Template, 3, 2, "ng-container", 5);
                i0__namespace.ɵɵpipe(30, "async");
                i0__namespace.ɵɵtemplate(31, MeasurerComponent_mat_divider_31_Template, 1, 0, "mat-divider", 5);
                i0__namespace.ɵɵpipe(32, "async");
                i0__namespace.ɵɵpipe(33, "async");
                i0__namespace.ɵɵelementStart(34, "div", 8);
                i0__namespace.ɵɵtemplate(35, MeasurerComponent_button_35_Template, 4, 6, "button", 9);
                i0__namespace.ɵɵpipe(36, "async");
                i0__namespace.ɵɵpipe(37, "async");
                i0__namespace.ɵɵtemplate(38, MeasurerComponent_button_38_Template, 4, 6, "button", 10);
                i0__namespace.ɵɵpipe(39, "async");
                i0__namespace.ɵɵpipe(40, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelement(41, "igo-entity-table", 11, 12);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.activeMeasureType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("value", ctx.measureType.Length);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(5, 24, "igo.geo.measure." + ctx.measureType.Length), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.measureType.Area);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(8, 26, "igo.geo.measure." + ctx.measureType.Area), " ");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("disabled", ctx.drawControlIsDisabled)("checked", ctx.drawControlIsActive)("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(12, 28, "igo.geo.measure.toggleActive"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(14, 30, ctx.hasLine$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(16, 32, ctx.hasLine$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(18, 34, ctx.hasLine$) || i0__namespace.ɵɵpipeBind1(19, 36, ctx.hasArea$));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(21, 38, ctx.hasArea$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(23, 40, ctx.hasArea$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(25, 42, ctx.hasArea$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("checked", ctx.measureUnitsAuto)("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(28, 44, "igo.geo.measure.toggleAutoUnits"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(30, 46, ctx.measure$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(32, 48, ctx.hasLine$) || i0__namespace.ɵɵpipeBind1(33, 50, ctx.hasArea$));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(36, 52, ctx.hasLine$) || i0__namespace.ɵɵpipeBind1(37, 54, ctx.hasArea$));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(39, 56, ctx.hasLine$) || i0__namespace.ɵɵpipeBind1(40, 58, ctx.hasArea$));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("store", ctx.store)("template", ctx.tableTemplate);
            }
        }, styles: [".measure-type-toggle[_ngcontent-%COMP%]{padding:10px;text-align:center}.measure-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]{width:100%}.measure-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]   mat-button-toggle[_ngcontent-%COMP%]{width:50%}.measure-options[_ngcontent-%COMP%]{overflow-x:hidden}.measure-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{width:100%;margin:10px}.measure-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 60px)}.measure-store-buttons[_ngcontent-%COMP%]{margin-left:-2px}.measure-store-buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:first-of-type{margin-left:14px}.table-compact[_ngcontent-%COMP%]     .mat-header-cell.mat-column-selectionCheckbox{width:52px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MeasurerComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-measurer',
                        templateUrl: './measurer.component.html',
                        styleUrls: ['./measurer.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i2__namespace$1.LanguageService }, { type: i1__namespace.MatDialog }, { type: i2__namespace$1.StorageService }]; }, { map: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], activeMeasureType: [{
                    type: i0.Input
                }], minSegmentLength: [{
                    type: i0.Input
                }], table: [{
                    type: i0.ViewChild,
                    args: ['table', { static: true }]
                }] });
    })();

    /**
     * This pipe returns a measure converted from meters (or square meters)
     * to the specified unit. It also keeps a certain number of decimals.
     */
    var MeasureFormatPipe = /** @class */ (function () {
        function MeasureFormatPipe() {
        }
        /**
         * @ignore
         */
        MeasureFormatPipe.prototype.transform = function (value, unit, unitAbbr, decimal) {
            if (unitAbbr === void 0) { unitAbbr = false; }
            if (decimal === void 0) { decimal = 1; }
            var out;
            if (Object.values(exports.MeasureAreaUnit).indexOf(unit) >= 0) {
                out = squareMetersToUnit(value, unit);
            }
            else if (Object.values(exports.MeasureLengthUnit).indexOf(unit) >= 0) {
                out = metersToUnit(value, unit);
            }
            return out ? formatMeasure(out, {
                decimal: 1,
                unit: unit,
                unitAbbr: unitAbbr,
                locale: 'fr'
            }) : out;
        };
        return MeasureFormatPipe;
    }());
    MeasureFormatPipe.ɵfac = function MeasureFormatPipe_Factory(t) { return new (t || MeasureFormatPipe)(); };
    MeasureFormatPipe.ɵpipe = /*@__PURE__*/ i0__namespace.ɵɵdefinePipe({ name: "measureFormat", type: MeasureFormatPipe, pure: true });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MeasureFormatPipe, [{
                type: i0.Pipe,
                args: [{
                        name: 'measureFormat'
                    }]
            }], null, null);
    })();

    function GeometryFormFieldInputComponent_ng_template_0_Template(rf, ctx) { }
    /**
     * This input allows a user to draw a new geometry or to edit
     * an existing one on a map. A text input is also displayed in the
     * form with some instructions.
     * This is still WIP.
     */
    var GeometryFormFieldInputComponent = /** @class */ (function () {
        function GeometryFormFieldInputComponent(cdRef, ngControl) {
            this.cdRef = cdRef;
            this.ngControl = ngControl;
            this.olGeoJSON = new OlGeoJSON__default["default"]();
            this.ready = false;
            this.olTooltip = this.createMeasureTooltip();
            /**
             * The drawGuide around the mouse pointer to help drawing
             */
            this.drawGuide = null;
            /**
             * Whether a measure tooltip should be displayed
             */
            this.measure = false;
            this._drawControlIsActive = true;
            /**
             * Control options
             */
            this.controlOptions = {};
            this.onChange = function () { };
            this.onTouched = function () { };
            if (this.ngControl !== undefined) {
                // Setting the value accessor directly (instead of using
                // the providers) to avoid running into a circular import.
                this.ngControl.valueAccessor = this;
            }
        }
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "geometryType", {
            get: function () { return this._geometryType; },
            /**
             * The geometry type
             */
            set: function (value) {
                this._geometryType = value;
                if (this.ready === false) {
                    return;
                }
                this.deactivateControl();
                this.createDrawControl();
                this.drawControl.freehand$.next(this.freehandDrawIsActive);
                this.toggleControl();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "drawControlIsActive", {
            /**
             * Whether draw control should be active or not
             */
            get: function () { return this._drawControlIsActive; },
            set: function (value) {
                this._drawControlIsActive = value;
                if (this.ready === false) {
                    return;
                }
                this.deactivateControl();
                if (!this._drawControlIsActive) {
                    return;
                }
                else {
                    this.toggleControl();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "freehandDrawIsActive", {
            /**
             * Whether freehand draw control should be active or not
             */
            get: function () { return this._freehandDrawIsActive; },
            set: function (value) {
                this._freehandDrawIsActive = value;
                this.deactivateControl();
                this.createDrawControl();
                this.createModifyControl();
                this.drawControl.freehand$.next(this.freehandDrawIsActive);
                if (this.ready === false) {
                    return;
                }
                if (!this.drawControlIsActive) {
                    return;
                }
                this.toggleControl();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "drawStyle", {
            get: function () { return this._drawStyle; },
            /**
             * Style for the draw control (applies while the geometry is being drawn)
             */
            set: function (value) {
                if (value === undefined) {
                    value = createDrawInteractionStyle();
                }
                this._drawStyle = value;
                var olGuideStyle = this.getGuideStyleFromDrawStyle(value);
                if (olGuideStyle !== undefined) {
                    this.defaultDrawStyleRadius = olGuideStyle.getRadius();
                }
                else {
                    this.defaultDrawStyleRadius = null;
                }
                if (this.ready === false) {
                    return;
                }
                this.deactivateControl();
                this.createDrawControl();
                this.createModifyControl();
                this.drawControl.freehand$.next(this.freehandDrawIsActive);
                this.toggleControl();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "overlayStyle", {
            get: function () { return this._overlayStyle; },
            /**
             * Style for the overlay layer (applies once the geometry is added to the map)
             * If not specified, drawStyle applies
             */
            set: function (value) { this._overlayStyle = value; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "value", {
            get: function () { return this._value; },
            /**
             * The geometry value (GeoJSON)
             * Implemented as part of ControlValueAccessor.
             */
            set: function (value) {
                this._value = value;
                if (this.ready === false) {
                    return;
                }
                if (value) {
                    this.addGeoJSONToOverlay(value);
                }
                else {
                    this.olOverlaySource.clear(true);
                }
                this.onChange(value);
                this.toggleControl();
                this.cdRef.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "olOverlaySource", {
            /**
             * The vector source to add the geometry to
             * @internal
             */
            get: function () {
                return this.olOverlayLayer.getSource();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldInputComponent.prototype, "radius", {
            set: function (value) {
                var _this = this;
                if (this.ready === false) {
                    return;
                }
                if (this.modifyControl.getSource()) {
                    this.modifyControl.getSource().refresh();
                }
                if (this.freehandDrawIsActive) {
                    var olModify_1;
                    setTimeout(function () {
                        olModify_1 = _this.modifyControl.olModifyInteraction;
                        if (olModify_1) {
                            if (olModify_1.features_) {
                                olModify_1.features_.clear();
                                _this.addGeoJSONToOverlay(_this.value);
                            }
                        }
                    }, 0);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Create an overlay layer, add the initial geometry to it (if any)
         * and toggle the right interaction.
         * @internal
         */
        GeometryFormFieldInputComponent.prototype.ngOnInit = function () {
            if (this.drawStyle === undefined) {
                this.drawStyle = createDrawInteractionStyle();
            }
            if (this.overlayStyle === undefined) {
                this.overlayStyle = this.drawStyle;
            }
            this.addOlOverlayLayer();
            this.createDrawControl();
            this.createModifyControl();
            if (this.value) {
                this.addGeoJSONToOverlay(this.value);
            }
            this.toggleControl();
            this.ready = true;
        };
        /**
         * Clear the overlay layer and any interaction added by this component.
         * @internal
         */
        GeometryFormFieldInputComponent.prototype.ngOnDestroy = function () {
            // This is mandatory when the form control is reused after
            // this component has been destroyed. It seems like the control
            // keeps a reference to this component even after it's destroyed
            // and it attempts to set it's value
            this.ready = false;
            this.deactivateControl();
            this.olOverlaySource.clear();
            this.map.ol.removeLayer(this.olOverlayLayer);
        };
        /**
         * Implemented as part of ControlValueAccessor.
         */
        // eslint-disable-next-line @typescript-eslint/ban-types
        GeometryFormFieldInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Implemented as part of ControlValueAccessor.
         */
        // eslint-disable-next-line @typescript-eslint/ban-types
        GeometryFormFieldInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Implemented as part of ControlValueAccessor.
         */
        GeometryFormFieldInputComponent.prototype.writeValue = function (value) {
            this.value = value;
        };
        /**
         * Add an overlay layer to the map
         */
        GeometryFormFieldInputComponent.prototype.addOlOverlayLayer = function () {
            this.olOverlayLayer = new OlVectorLayer__default["default"]({
                source: new OlVectorSource__default["default"](),
                zIndex: 500,
                style: null
            });
            this.map.ol.addLayer(this.olOverlayLayer);
        };
        /**
         * Create a draw control and subscribe to it's geometry
         */
        GeometryFormFieldInputComponent.prototype.createDrawControl = function () {
            var _this = this;
            var controlOptions = Object.assign({}, this.controlOptions, {
                geometryType: this.geometryType || 'Point',
                drawingLayer: this.olOverlayLayer,
                interactionStyle: typeof this.drawStyle === 'function' ? this.drawStyle : function (olFeature, resolution) {
                    var style = _this.drawStyle;
                    _this.updateDrawStyleWithDrawGuide(style, resolution);
                    return style;
                }
            });
            this.drawControl = new DrawControl(controlOptions);
        };
        /**
         * Create a modify control and subscribe to it's geometry
         */
        GeometryFormFieldInputComponent.prototype.createModifyControl = function () {
            var _this = this;
            var controlOptions = Object.assign({}, this.controlOptions, {
                layer: this.olOverlayLayer,
                drawStyle: typeof this.drawStyle === 'function' ? this.drawStyle : function (olFeature, resolution) {
                    var style = _this.drawStyle;
                    _this.updateDrawStyleWithDrawGuide(style, resolution);
                    return style;
                }
            });
            this.modifyControl = new ModifyControl(controlOptions);
        };
        /**
         * Toggle the proper control (draw or modify)
         */
        GeometryFormFieldInputComponent.prototype.toggleControl = function () {
            var activate;
            if (!this.value && this.geometryType) {
                activate = this.drawControl;
            }
            else {
                activate = this.modifyControl;
            }
            // If the control that should be activated
            // is not the same as the current active control,
            // deactivate the current control and activate the new one
            // Otherwise, do nothing and keep the current control active
            if (activate !== this.activeControl) {
                this.deactivateControl();
                this.activateControl(activate);
            }
        };
        /**
         * Activate a given control
         * @param control Control
         */
        GeometryFormFieldInputComponent.prototype.activateControl = function (control) {
            var _this = this;
            this.activeControl = control;
            this.olGeometryEnds$$ = control.end$
                .subscribe(function (olGeometry) { return _this.onOlGeometryEnds(olGeometry); });
            if (this.measure === true && control === this.drawControl) {
                this.olGeometryChanges$$ = control.changes$
                    .subscribe(function (olGeometry) { return _this.onOlGeometryChanges(olGeometry); });
            }
            control.setOlMap(this.map.ol, false);
        };
        /**
         * Deactivate the active control
         */
        GeometryFormFieldInputComponent.prototype.deactivateControl = function () {
            this.removeMeasureTooltip();
            if (this.activeControl !== undefined) {
                this.activeControl.setOlMap(undefined);
            }
            if (this.olGeometryEnds$$ !== undefined) {
                this.olGeometryEnds$$.unsubscribe();
            }
            if (this.olGeometryChanges$$ !== undefined) {
                this.olGeometryChanges$$.unsubscribe();
            }
            this.activeControl = undefined;
        };
        /**
         * Update measures observables and map tooltips
         * @param olGeometry Ol linestring or polygon
         */
        GeometryFormFieldInputComponent.prototype.onOlGeometryEnds = function (olGeometry) {
            this.removeMeasureTooltip();
            this.setOlGeometry(olGeometry);
        };
        /**
         * Update measures observables and map tooltips
         * @param olGeometry Ol linestring or polygon
         */
        GeometryFormFieldInputComponent.prototype.onOlGeometryChanges = function (olGeometry) {
            if (olGeometry.getType() !== 'Point') {
                this.updateMeasureTooltip(olGeometry);
            }
        };
        /**
         * When drawing ends, convert the output value to GeoJSON and keep it.
         * Restore the double click interaction.
         * @param olGeometry OL geometry
         */
        GeometryFormFieldInputComponent.prototype.setOlGeometry = function (olGeometry) {
            var value;
            if (olGeometry === undefined) {
                return;
            }
            if (olGeometry.getType() === 'Circle') { // Because Circle doesn't exist as a GeoJSON object
                olGeometry = this.circleToPoint(olGeometry);
            }
            value = this.olGeoJSON.writeGeometryObject(olGeometry, {
                featureProjection: this.map.projection,
                dataProjection: 'EPSG:4326'
            });
            if (olGeometry.get('radius')) {
                value.radius = olGeometry.get('radius');
                olGeometry.set('radius', value.radius);
            }
            this.writeValue(value);
        };
        GeometryFormFieldInputComponent.prototype.circleToPoint = function (olGeometry) {
            var center = olGeometry.getCenter();
            var coordinates = olproj__namespace.transform(center, this.map.projection, 'EPSG:4326');
            var radius = Math.round(olGeometry.getRadius() * (Math.cos((Math.PI / 180) * coordinates[1])));
            // Convert it to a point object
            olGeometry = new OlPoint__default["default"](center);
            olGeometry.set('radius', radius, true);
            return olGeometry;
        };
        /**
         * Add a GeoJSON geometry to the overlay
         * @param geometry GeoJSON geometry
         */
        GeometryFormFieldInputComponent.prototype.addGeoJSONToOverlay = function (geometry) {
            var olGeometry = this.olGeoJSON.readGeometry(geometry, {
                dataProjection: 'EPSG:4326',
                featureProjection: this.map.projection
            });
            var olFeature = new OlFeature__default["default"]({
                geometry: olGeometry
            });
            olFeature.setStyle(this.overlayStyle);
            this.olOverlaySource.clear();
            this.olOverlaySource.addFeature(olFeature);
        };
        /**
         * Create the measure tooltip
         */
        GeometryFormFieldInputComponent.prototype.createMeasureTooltip = function () {
            return new OlOverlay__default["default"]({
                element: document.createElement('div'),
                offset: [-30, -10],
                className: [
                    'igo-map-tooltip',
                    'igo-map-tooltip-measure'
                ].join(' '),
                stopEvent: false
            });
        };
        /**
         * Update the measure tooltip of an OL geometry
         * @param olGeometry OL Geometry
         */
        GeometryFormFieldInputComponent.prototype.updateMeasureTooltip = function (olGeometry) {
            var measure = measureOlGeometry(olGeometry, this.map.projection);
            var lengths = measure.lengths;
            var lastIndex = olGeometry.getType() === 'Polygon' ? lengths.length - 2 : lengths.length - 1;
            var lastLength = lengths[lastIndex];
            var olMidpoints = updateOlGeometryMidpoints(olGeometry);
            var olLastMidpoint = olMidpoints[lastIndex];
            if (olMidpoints.length === 0 || olLastMidpoint === undefined) {
                this.removeMeasureTooltip();
                return;
            }
            this.olTooltip.setPosition(olLastMidpoint.getFlatCoordinates());
            var innerHtml = formatMeasure(lastLength, {
                decimal: 1,
                unit: exports.MeasureLengthUnit.Meters,
                unitAbbr: true,
                locale: 'fr'
            });
            this.olTooltip.getElement().innerHTML = innerHtml;
            if (this.olTooltip.getMap() === undefined) {
                this.map.ol.addOverlay(this.olTooltip);
            }
        };
        /**
         * Remove the measure tooltip from the map
         */
        GeometryFormFieldInputComponent.prototype.removeMeasureTooltip = function () {
            if (this.olTooltip.getMap && this.olTooltip.getMap() !== undefined) {
                this.map.ol.removeOverlay(this.olTooltip);
                this.olTooltip.setMap(undefined);
            }
        };
        /**
         * Adjust the draw style with the specified draw guide distance, if possible
         * @param olStyle Draw style to update
         * @param resolution Resolution (to make the screen size of symbol fit the drawGuide value)
         */
        GeometryFormFieldInputComponent.prototype.updateDrawStyleWithDrawGuide = function (olStyle, resolution) {
            var olGuideStyle = this.getGuideStyleFromDrawStyle(olStyle);
            if (olGuideStyle === undefined) {
                return;
            }
            var drawGuide = this.drawGuide;
            var radius;
            if (!drawGuide || drawGuide < 0) {
                radius = this.defaultDrawStyleRadius;
            }
            else {
                radius = drawGuide > 0 ? drawGuide / resolution : drawGuide;
            }
            olGuideStyle.setRadius(radius);
        };
        /**
         * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)
         * @param olStyle The style on which to perform the check
         */
        GeometryFormFieldInputComponent.prototype.isStyleWithRadius = function (olStyle) {
            return typeof olStyle !== 'function' && olStyle.setRadius;
        };
        /**
         * Returns wether a given Open Layers style has a radius property that can be set (used to set draw guide)
         * @param olStyle The style on which to perform the check
         */
        GeometryFormFieldInputComponent.prototype.getGuideStyleFromDrawStyle = function (olStyle) {
            if (Array.isArray(olStyle)) {
                olStyle = olStyle[0];
            }
            if (this.isStyleWithRadius(olStyle)) {
                return olStyle;
            }
            return undefined;
        };
        return GeometryFormFieldInputComponent;
    }());
    GeometryFormFieldInputComponent.ɵfac = function GeometryFormFieldInputComponent_Factory(t) { return new (t || GeometryFormFieldInputComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i16__namespace.NgControl, 10)); };
    GeometryFormFieldInputComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: GeometryFormFieldInputComponent, selectors: [["igo-geometry-form-field-input"]], inputs: { map: "map", geometryType: "geometryType", drawGuide: "drawGuide", measure: "measure", drawControlIsActive: "drawControlIsActive", freehandDrawIsActive: "freehandDrawIsActive", controlOptions: "controlOptions", drawStyle: "drawStyle", overlayStyle: "overlayStyle", value: "value", radius: "radius" }, decls: 1, vars: 0, template: function GeometryFormFieldInputComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, GeometryFormFieldInputComponent_ng_template_0_Template, 0, 0, "ng-template");
            }
        }, encapsulation: 2, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(GeometryFormFieldInputComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-geometry-form-field-input',
                        templateUrl: './geometry-form-field-input.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () {
            return [{ type: i0__namespace.ChangeDetectorRef }, { type: i16__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }];
        }, { map: [{
                    type: i0.Input
                }], geometryType: [{
                    type: i0.Input
                }], drawGuide: [{
                    type: i0.Input
                }], measure: [{
                    type: i0.Input
                }], drawControlIsActive: [{
                    type: i0.Input
                }], freehandDrawIsActive: [{
                    type: i0.Input
                }], controlOptions: [{
                    type: i0.Input
                }], drawStyle: [{
                    type: i0.Input
                }], overlayStyle: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], radius: [{
                    type: i0.Input
                }] });
    })();

    function GeometryFormFieldComponent_div_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r3_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 3);
            i0__namespace.ɵɵelementStart(1, "mat-button-toggle-group", 4);
            i0__namespace.ɵɵlistener("ngModelChange", function GeometryFormFieldComponent_div_3_Template_mat_button_toggle_group_ngModelChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r3_1); var ctx_r2 = i0__namespace.ɵɵnextContext(); return ctx_r2.geometryType = $event; });
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵelementStart(3, "mat-button-toggle", 5);
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "mat-button-toggle", 6);
            i0__namespace.ɵɵtext(7);
            i0__namespace.ɵɵpipe(8, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(9, "mat-button-toggle", 7);
            i0__namespace.ɵɵtext(10);
            i0__namespace.ɵɵpipe(11, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("disabled", i0__namespace.ɵɵpipeBind1(2, 8, ctx_r0.value$) !== undefined)("ngModel", ctx_r0.geometryType);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("disabled", ctx_r0.geometryTypes.indexOf("Point") < 0);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(5, 10, "igo.geo.geometry.point"), " ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("disabled", ctx_r0.geometryTypes.indexOf("LineString") < 0);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(8, 12, "igo.geo.geometry.line"), " ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("disabled", ctx_r0.geometryTypes.indexOf("Polygon") < 0);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(11, 14, "igo.geo.geometry.polygon"), " ");
        }
    }
    function GeometryFormFieldComponent_mat_form_field_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 8);
            i0__namespace.ɵɵelementStart(1, "input", 9);
            i0__namespace.ɵɵlistener("ngModelChange", function GeometryFormFieldComponent_mat_form_field_4_Template_input_ngModelChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.drawGuide = $event; });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(2, "mat-icon", 10);
            i0__namespace.ɵɵelementStart(3, "span", 11);
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", ctx_r1.drawGuidePlaceholder)("ngModel", ctx_r1.drawGuide);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("color", "primary");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 4, "igo.geo.measure.meters"));
        }
    }
    /**
     * This input allows a user to draw a new geometry or to edit
     * an existing one on a map.
     */
    exports.GeometryFormFieldComponent = /** @class */ (function () {
        function GeometryFormFieldComponent(cdRef) {
            this.cdRef = cdRef;
            this.value$ = new rxjs.BehaviorSubject(undefined);
            this._drawControlIsActive = true;
            this._freehandDrawIsActive = false;
            this.geometryType$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Whether a geometry type toggle should be displayed
             */
            this.geometryTypeField = false;
            /**
             * Available geometry types
             */
            this.geometryTypes = ['Point', 'LineString', 'Polygon'];
            /**
             * Whether a draw guide field should be displayed
             */
            this.drawGuideField = false;
            this.drawGuide$ = new rxjs.BehaviorSubject(0);
            /**
             * Draw guide placeholder
             */
            this.drawGuidePlaceholder = '';
            /**
             * Whether a measure tooltip should be displayed
             */
            this.measure = false;
            /**
             * Control options
             */
            this.controlOptions = {};
        }
        Object.defineProperty(GeometryFormFieldComponent.prototype, "drawControlIsActive", {
            get: function () {
                return this._drawControlIsActive;
            },
            set: function (value) {
                this._drawControlIsActive = value;
                this.cdRef.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldComponent.prototype, "freehandDrawIsActive", {
            get: function () {
                return this._freehandDrawIsActive;
            },
            set: function (value) {
                this._freehandDrawIsActive = value;
                this.cdRef.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldComponent.prototype, "geometryType", {
            get: function () { return this.geometryType$.value; },
            set: function (value) { this.geometryType$.next(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GeometryFormFieldComponent.prototype, "drawGuide", {
            get: function () { return this.drawGuide$.value; },
            /**
             * The drawGuide around the mouse pointer to help drawing
             */
            set: function (value) { this.drawGuide$.next(value); },
            enumerable: false,
            configurable: true
        });
        /**
         * Set up a value stream
         * @internal
         */
        GeometryFormFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.value$.next(this.formControl.value ? this.formControl.value : undefined);
            this.value$$ = this.formControl.valueChanges.subscribe(function (value) {
                _this.value$.next(value ? value : undefined);
            });
        };
        /**
         * Unsubscribe to the value stream
         * @internal
         */
        GeometryFormFieldComponent.prototype.ngOnDestroy = function () {
            this.value$$.unsubscribe();
        };
        return GeometryFormFieldComponent;
    }());
    exports.GeometryFormFieldComponent.ɵfac = function GeometryFormFieldComponent_Factory(t) { return new (t || exports.GeometryFormFieldComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    exports.GeometryFormFieldComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: exports.GeometryFormFieldComponent, selectors: [["igo-geometry-form-field"]], inputs: { formControl: "formControl", map: "map", geometryType: "geometryType", geometryTypeField: "geometryTypeField", geometryTypes: "geometryTypes", drawGuideField: "drawGuideField", drawGuide: "drawGuide", drawGuidePlaceholder: "drawGuidePlaceholder", measure: "measure", controlOptions: "controlOptions", drawStyle: "drawStyle", overlayStyle: "overlayStyle" }, decls: 5, vars: 16, consts: [[3, "formControl", "map", "geometryType", "drawGuide", "measure", "drawControlIsActive", "freehandDrawIsActive", "controlOptions", "drawStyle", "overlayStyle"], ["class", "geometry-type-toggle", 4, "ngIf"], ["class", "draw-guide-field", 4, "ngIf"], [1, "geometry-type-toggle"], [3, "disabled", "ngModel", "ngModelChange"], ["value", "Point", 3, "disabled"], ["value", "LineString", 3, "disabled"], ["value", "Polygon", 3, "disabled"], [1, "draw-guide-field"], ["matInput", "", "type", "number", 3, "placeholder", "ngModel", "ngModelChange"], ["matPrefix", "", "svgIcon", "adjust", 3, "color"], ["matSuffix", "", 1, "draw-guide-units"]], template: function GeometryFormFieldComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelement(0, "igo-geometry-form-field-input", 0);
                i0__namespace.ɵɵpipe(1, "async");
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵtemplate(3, GeometryFormFieldComponent_div_3_Template, 12, 16, "div", 1);
                i0__namespace.ɵɵtemplate(4, GeometryFormFieldComponent_mat_form_field_4_Template, 6, 6, "mat-form-field", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("formControl", ctx.formControl)("map", ctx.map)("geometryType", i0__namespace.ɵɵpipeBind1(1, 12, ctx.geometryType$))("drawGuide", i0__namespace.ɵɵpipeBind1(2, 14, ctx.drawGuide$))("measure", ctx.measure)("drawControlIsActive", ctx.drawControlIsActive)("freehandDrawIsActive", ctx.freehandDrawIsActive)("controlOptions", ctx.controlOptions)("drawStyle", ctx.drawStyle)("overlayStyle", ctx.overlayStyle);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.geometryTypeField);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.drawGuideField);
            }
        }, directives: [GeometryFormFieldInputComponent, i16__namespace.NgControlStatus, i16__namespace.FormControlDirective, i1__namespace$1.NgIf, i18__namespace.MatButtonToggleGroup, i16__namespace.NgModel, i18__namespace.MatButtonToggle, i12__namespace.MatFormField, i5__namespace$1.MatInput, i16__namespace.NumberValueAccessor, i16__namespace.DefaultValueAccessor, i4__namespace.MatIcon, i12__namespace.MatPrefix, i12__namespace.MatSuffix], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: ["[_nghost-%COMP%]{display:block;width:100%}.geometry-type-toggle[_ngcontent-%COMP%], .draw-guide-field[_ngcontent-%COMP%]{width:100%}.geometry-type-toggle[_ngcontent-%COMP%]{padding:10px;text-align:center}.draw-guide-field[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin:0 10px}.draw-guide-units[_ngcontent-%COMP%]{padding:10px}"], changeDetection: 0 });
    exports.GeometryFormFieldComponent = __decorate([
        i6.IgoFormFieldComponent('geometry')
    ], exports.GeometryFormFieldComponent);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(exports.GeometryFormFieldComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-geometry-form-field',
                        templateUrl: './geometry-form-field.component.html',
                        styleUrls: ['./geometry-form-field.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, { formControl: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], geometryType: [{
                    type: i0.Input
                }], geometryTypeField: [{
                    type: i0.Input
                }], geometryTypes: [{
                    type: i0.Input
                }], drawGuideField: [{
                    type: i0.Input
                }], drawGuide: [{
                    type: i0.Input
                }], drawGuidePlaceholder: [{
                    type: i0.Input
                }], measure: [{
                    type: i0.Input
                }], controlOptions: [{
                    type: i0.Input
                }], drawStyle: [{
                    type: i0.Input
                }], overlayStyle: [{
                    type: i0.Input
                }] });
    })();

    /**
     * @ignore
     */
    var IgoGeometryFormFieldModule = /** @class */ (function () {
        function IgoGeometryFormFieldModule() {
        }
        return IgoGeometryFormFieldModule;
    }());
    IgoGeometryFormFieldModule.ɵfac = function IgoGeometryFormFieldModule_Factory(t) { return new (t || IgoGeometryFormFieldModule)(); };
    IgoGeometryFormFieldModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoGeometryFormFieldModule });
    IgoGeometryFormFieldModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i2$1.IgoLanguageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoGeometryFormFieldModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i4.MatIconModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i2.MatButtonModule,
                            i18.MatButtonToggleModule,
                            i2$1.IgoLanguageModule
                        ],
                        exports: [
                            exports.GeometryFormFieldComponent,
                            GeometryFormFieldInputComponent
                        ],
                        declarations: [
                            exports.GeometryFormFieldComponent,
                            GeometryFormFieldInputComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoGeometryFormFieldModule, { declarations: [exports.GeometryFormFieldComponent,
                GeometryFormFieldInputComponent], imports: [i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i2$1.IgoLanguageModule], exports: [exports.GeometryFormFieldComponent,
                GeometryFormFieldInputComponent] });
    })();

    var IgoGeometryModule = /** @class */ (function () {
        function IgoGeometryModule() {
        }
        return IgoGeometryModule;
    }());
    IgoGeometryModule.ɵfac = function IgoGeometryModule_Factory(t) { return new (t || IgoGeometryModule)(); };
    IgoGeometryModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoGeometryModule });
    IgoGeometryModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [], imports: [[
                i1$1.CommonModule,
                IgoGeometryFormFieldModule
            ], IgoGeometryFormFieldModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoGeometryModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            IgoGeometryFormFieldModule
                        ],
                        exports: [
                            IgoGeometryFormFieldModule
                        ],
                        declarations: [],
                        providers: []
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoGeometryModule, { imports: [i1$1.CommonModule,
                IgoGeometryFormFieldModule], exports: [IgoGeometryFormFieldModule] });
    })();

    function TimeFilterButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 2);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 3);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 3, "igo.geo.filter.filterBy"))("color", ctx_r0.color);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matBadge", ctx_r0.badge);
        }
    }
    function TimeFilterButtonComponent_div_1_igo_time_filter_item_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-time-filter-item", 7);
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("header", false)("layer", ctx_r3.layer);
        }
    }
    function TimeFilterButtonComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 4, 5);
            i0__namespace.ɵɵtemplate(2, TimeFilterButtonComponent_div_1_igo_time_filter_item_2_Template, 1, 2, "igo-time-filter-item", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.timeFilterCollapse && ctx_r1.options.timeFilter);
        }
    }
    var TimeFilterButtonComponent = /** @class */ (function () {
        function TimeFilterButtonComponent() {
            this.color = 'primary';
            this.header = true;
            this.timeFilterCollapse = false;
        }
        Object.defineProperty(TimeFilterButtonComponent.prototype, "badge", {
            get: function () {
                var filter = this.options.timeFilter;
                if (filter && filter.enabled) {
                    return 1;
                }
                else {
                    return;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterButtonComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
                if (value) {
                    this.options = this.layer.dataSource.options;
                }
            },
            enumerable: false,
            configurable: true
        });
        TimeFilterButtonComponent.prototype.ngOnInit = function () {
            this.options = this.layer.dataSource.options;
        };
        return TimeFilterButtonComponent;
    }());
    TimeFilterButtonComponent.ɵfac = function TimeFilterButtonComponent_Factory(t) { return new (t || TimeFilterButtonComponent)(); };
    TimeFilterButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TimeFilterButtonComponent, selectors: [["igo-time-filter-button"]], inputs: { layer: "layer", map: "map", color: "color", header: "header" }, decls: 2, vars: 2, consts: [["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", 4, "ngIf"], ["class", "igo-layer-actions-container", 4, "ngIf"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color"], ["matBadgeColor", "warn", "matBadgeSize", "medium", "svgIcon", "history", 3, "matBadge"], [1, "igo-layer-actions-container"], ["ogcFilter", ""], ["igoListItem", "", 3, "header", "layer", 4, "ngIf"], ["igoListItem", "", 3, "header", "layer"]], template: function TimeFilterButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, TimeFilterButtonComponent_button_0_Template, 3, 5, "button", 0);
                i0__namespace.ɵɵtemplate(1, TimeFilterButtonComponent_div_1_Template, 3, 1, "div", 1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.header && ctx.options.timeFilterable && ctx.options.timeFilter);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.header && ctx.options.timeFilterable && ctx.options.timeFilter);
            }
        }, styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-time-filter-button',
                        templateUrl: './time-filter-button.component.html',
                        styleUrls: ['./time-filter-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layer: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }] });
    })();

    function TimeFilterFormComponent_div_0_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r8_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 3);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelement(2, "mat-datetimepicker-toggle", 4);
            i0__namespace.ɵɵelement(3, "mat-datetimepicker", 5, 6);
            i0__namespace.ɵɵelementStart(5, "input", 7);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_0_div_1_Template_input_ngModelChange_5_listener($event) { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r7 = i0__namespace.ɵɵnextContext(2); return ctx_r7.date = $event; })("dateChange", function TimeFilterFormComponent_div_0_div_1_Template_input_dateChange_5_listener($event) { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r9 = i0__namespace.ɵɵnextContext(2); return ctx_r9.handleDateChange($event); });
            i0__namespace.ɵɵpipe(6, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r6 = i0__namespace.ɵɵreference(4);
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("for", _r6);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("type", ctx_r4.type);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(6, 7, "igo.geo.timeFilter.date"));
            i0__namespace.ɵɵproperty("matDatetimepicker", _r6)("ngModel", ctx_r4.date)("min", ctx_r4.min)("max", ctx_r4.max);
        }
    }
    function TimeFilterFormComponent_div_0_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelementStart(1, "div", 8);
            i0__namespace.ɵɵelementStart(2, "mat-form-field");
            i0__namespace.ɵɵelement(3, "mat-datetimepicker-toggle", 4);
            i0__namespace.ɵɵelement(4, "mat-datetimepicker", 5, 9);
            i0__namespace.ɵɵelementStart(6, "input", 10);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_0_div_2_Template_input_ngModelChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r12 = i0__namespace.ɵɵnextContext(2); return ctx_r12.startDate = $event; })("input", function TimeFilterFormComponent_div_0_div_2_Template_input_input_6_listener() { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r14 = i0__namespace.ɵɵnextContext(2); return ctx_r14.startDate; })("dateChange", function TimeFilterFormComponent_div_0_div_2_Template_input_dateChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r15 = i0__namespace.ɵɵnextContext(2); return ctx_r15.handleDateChange($event); });
            i0__namespace.ɵɵpipe(7, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(8, "div", 8);
            i0__namespace.ɵɵelementStart(9, "mat-form-field");
            i0__namespace.ɵɵelement(10, "mat-datetimepicker-toggle", 4);
            i0__namespace.ɵɵelement(11, "mat-datetimepicker", 5, 11);
            i0__namespace.ɵɵelementStart(13, "input", 7);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_0_div_2_Template_input_ngModelChange_13_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r16 = i0__namespace.ɵɵnextContext(2); return ctx_r16.endDate = $event; })("dateChange", function TimeFilterFormComponent_div_0_div_2_Template_input_dateChange_13_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r17 = i0__namespace.ɵɵnextContext(2); return ctx_r17.handleDateChange($event); });
            i0__namespace.ɵɵpipe(14, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r10 = i0__namespace.ɵɵreference(5);
            var _r11 = i0__namespace.ɵɵreference(12);
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("for", _r10);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("type", ctx_r5.type);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(7, 14, "igo.geo.timeFilter.startDate"));
            i0__namespace.ɵɵproperty("matDatetimepicker", _r10)("ngModel", ctx_r5.startDate)("min", ctx_r5.min)("max", ctx_r5.getRangeMaxDate());
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("for", _r11);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("type", ctx_r5.type);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(14, 16, "igo.geo.timeFilter.endDate"));
            i0__namespace.ɵɵproperty("matDatetimepicker", _r11)("ngModel", ctx_r5.endDate)("min", ctx_r5.getRangeMinDate())("max", ctx_r5.max);
        }
    }
    function TimeFilterFormComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, TimeFilterFormComponent_div_0_div_1_Template, 7, 9, "div", 2);
            i0__namespace.ɵɵtemplate(2, TimeFilterFormComponent_div_0_div_2_Template, 15, 18, "div", 0);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r0.isRange);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.isRange);
        }
    }
    function TimeFilterFormComponent_div_1_div_1_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 14);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var year_r21 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", year_r21);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(year_r21);
        }
    }
    function TimeFilterFormComponent_div_1_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r23_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 3);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 12);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_1_div_1_Template_mat_select_ngModelChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r23_1); var ctx_r22 = i0__namespace.ɵɵnextContext(2); return ctx_r22.year = $event; })("selectionChange", function TimeFilterFormComponent_div_1_div_1_Template_mat_select_selectionChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r23_1); var ctx_r24 = i0__namespace.ɵɵnextContext(2); return ctx_r24.handleYearChange($event); });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, TimeFilterFormComponent_div_1_div_1_mat_option_4_Template, 2, 2, "mat-option", 13);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r18 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.timeFilter.date"));
            i0__namespace.ɵɵproperty("ngModel", ctx_r18.year);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r18.listYears);
        }
    }
    function TimeFilterFormComponent_div_1_div_2_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 14);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var startYear_r27 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", startYear_r27);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(startYear_r27);
        }
    }
    function TimeFilterFormComponent_div_1_div_2_mat_option_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 14);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var endYear_r28 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", endYear_r28);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(endYear_r28);
        }
    }
    function TimeFilterFormComponent_div_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r30_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelementStart(1, "div", 8);
            i0__namespace.ɵɵelementStart(2, "mat-form-field");
            i0__namespace.ɵɵelementStart(3, "mat-select", 12);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_1_div_2_Template_mat_select_ngModelChange_3_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r29 = i0__namespace.ɵɵnextContext(2); return ctx_r29.startYear = $event; })("selectionChange", function TimeFilterFormComponent_div_1_div_2_Template_mat_select_selectionChange_3_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r31 = i0__namespace.ɵɵnextContext(2); return ctx_r31.handleYearChange($event); });
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵtemplate(5, TimeFilterFormComponent_div_1_div_2_mat_option_5_Template, 2, 2, "mat-option", 13);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "div", 8);
            i0__namespace.ɵɵelementStart(7, "mat-form-field");
            i0__namespace.ɵɵelementStart(8, "mat-select", 12);
            i0__namespace.ɵɵlistener("ngModelChange", function TimeFilterFormComponent_div_1_div_2_Template_mat_select_ngModelChange_8_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r32 = i0__namespace.ɵɵnextContext(2); return ctx_r32.endYear = $event; })("selectionChange", function TimeFilterFormComponent_div_1_div_2_Template_mat_select_selectionChange_8_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r33 = i0__namespace.ɵɵnextContext(2); return ctx_r33.handleYearChange($event); });
            i0__namespace.ɵɵpipe(9, "translate");
            i0__namespace.ɵɵtemplate(10, TimeFilterFormComponent_div_1_div_2_mat_option_10_Template, 2, 2, "mat-option", 13);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r19 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(4, 6, "igo.geo.timeFilter.startDate"));
            i0__namespace.ɵɵproperty("ngModel", ctx_r19.startYear);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r19.startListYears);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(9, 8, "igo.geo.timeFilter.endDate"));
            i0__namespace.ɵɵproperty("ngModel", ctx_r19.endYear);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r19.endListYears);
        }
    }
    function TimeFilterFormComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, TimeFilterFormComponent_div_1_div_1_Template, 5, 5, "div", 2);
            i0__namespace.ɵɵtemplate(2, TimeFilterFormComponent_div_1_div_2_Template, 11, 10, "div", 0);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r1.isRange);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.isRange);
        }
    }
    function TimeFilterFormComponent_div_3_p_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 23);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r34 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r34.year);
        }
    }
    function TimeFilterFormComponent_div_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r37_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 15);
            i0__namespace.ɵɵelementStart(1, "span");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-slider", 16);
            i0__namespace.ɵɵlistener("input", function TimeFilterFormComponent_div_3_Template_mat_slider_input_3_listener($event) { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r36 = i0__namespace.ɵɵnextContext(); return ctx_r36.handleSliderYearChange($event); })("change", function TimeFilterFormComponent_div_3_Template_mat_slider_change_3_listener($event) { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r38 = i0__namespace.ɵɵnextContext(); return ctx_r38.handleSliderYearChange($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "span");
            i0__namespace.ɵɵtext(5);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(6, TimeFilterFormComponent_div_3_p_6_Template, 2, 1, "p", 17);
            i0__namespace.ɵɵelementStart(7, "div", 18, 19);
            i0__namespace.ɵɵelementStart(9, "mat-slide-toggle", 20);
            i0__namespace.ɵɵlistener("change", function TimeFilterFormComponent_div_3_Template_mat_slide_toggle_change_9_listener() { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r39 = i0__namespace.ɵɵnextContext(); return ctx_r39.toggleFilterState(); });
            i0__namespace.ɵɵpipe(10, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "button", 21);
            i0__namespace.ɵɵlistener("click", function TimeFilterFormComponent_div_3_Template_button_click_11_listener($event) { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r40 = i0__namespace.ɵɵnextContext(); return ctx_r40.playYear($event); });
            i0__namespace.ɵɵelement(12, "mat-icon", 22);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(13, "button", 21);
            i0__namespace.ɵɵlistener("click", function TimeFilterFormComponent_div_3_Template_button_click_13_listener($event) { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r41 = i0__namespace.ɵɵnextContext(); return ctx_r41.resetFilter($event); });
            i0__namespace.ɵɵelement(14, "mat-icon", 22);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r2.startYear);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("step", ctx_r2.step);
            i0__namespace.ɵɵproperty("min", ctx_r2.startYear)("max", ctx_r2.endYear)("value", ctx_r2.handleSliderValue())("color", ctx_r2.color)("disabled", !ctx_r2.options.enabled || !ctx_r2.layer.visible);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r2.endYear);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.options.enabled);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(10, 17, "igo.geo.filter.toggleFilterState"))("color", ctx_r2.color)("checked", ctx_r2.options.enabled)("disabled", !ctx_r2.layer.visible);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r2.options.enabled || !ctx_r2.layer.visible);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r2.playIcon);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("disabled", !ctx_r2.options.enabled || !ctx_r2.layer.visible);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r2.resetIcon);
        }
    }
    function TimeFilterFormComponent_div_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r43_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 3);
            i0__namespace.ɵɵelementStart(1, "mat-slider", 24);
            i0__namespace.ɵɵlistener("input", function TimeFilterFormComponent_div_4_Template_mat_slider_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r43_1); var ctx_r42 = i0__namespace.ɵɵnextContext(); return ctx_r42.handleSliderDateChange($event); })("selectionChange", function TimeFilterFormComponent_div_4_Template_mat_slider_selectionChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r43_1); var ctx_r44 = i0__namespace.ɵɵnextContext(); return ctx_r44.handleSliderDateChange($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(2, "p", 23);
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "button", 25);
            i0__namespace.ɵɵlistener("click", function TimeFilterFormComponent_div_4_Template_button_click_4_listener($event) { i0__namespace.ɵɵrestoreView(_r43_1); var ctx_r45 = i0__namespace.ɵɵnextContext(); return ctx_r45.playFilter($event); });
            i0__namespace.ɵɵelement(5, "mat-icon", 22);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("step", ctx_r3.step);
            i0__namespace.ɵɵproperty("min", ctx_r3.dateToNumber(ctx_r3.min))("max", ctx_r3.dateToNumber(ctx_r3.max))("value", ctx_r3.handleSliderValue());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r3.handleSliderTooltip());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r3.playIcon);
        }
    }
    var TimeFilterFormComponent = /** @class */ (function () {
        function TimeFilterFormComponent(dateAdapter) {
            this.dateAdapter = dateAdapter;
            this.color = 'primary';
            this.listYears = [];
            this.startListYears = [];
            this.endListYears = [];
            this.playIcon = 'play-circle';
            this.resetIcon = 'replay';
            this.change = new i0.EventEmitter();
            this.yearChange = new i0.EventEmitter();
            this.dateAdapter.setLocale('fr');
        }
        Object.defineProperty(TimeFilterFormComponent.prototype, "currentValue", {
            set: function (value) {
                if (value) {
                    if (this.type !== exports.TimeFilterType.YEAR) {
                        var valueArray = value.split('/');
                        if (valueArray.length > 0) {
                            var startDate = new Date(valueArray[0]);
                            var endDate = new Date(valueArray[1]);
                            if (!isNaN(startDate.valueOf())) {
                                this.startDate = startDate;
                            }
                            if (!isNaN(endDate.valueOf())) {
                                this.endDate = endDate;
                            }
                        }
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "type", {
            get: function () {
                return this.options.type === undefined
                    ? exports.TimeFilterType.DATE
                    : this.options.type;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "isRange", {
            get: function () {
                return this.options.range === undefined ||
                    this.options.style === exports.TimeFilterStyle.SLIDER
                    ? false
                    : this.options.range;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "style", {
            get: function () {
                return this.options.style === undefined
                    ? exports.TimeFilterStyle.SLIDER
                    : this.options.style;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "step", {
            get: function () {
                var step = 10800000;
                if (this.options.step === undefined) {
                    switch (this.type) {
                        case exports.TimeFilterType.DATE:
                        case exports.TimeFilterType.DATETIME:
                            step = 10800000;
                            break;
                        case exports.TimeFilterType.TIME:
                            step = 3600000;
                            break;
                        case exports.TimeFilterType.YEAR:
                            step = 31536000000;
                            break;
                        default:
                            step = 10800000;
                    }
                }
                else {
                    step = this.getStepDefinition(this.options.step);
                }
                return step;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "timeInterval", {
            get: function () {
                return this.options.timeInterval === undefined
                    ? 2000
                    : this.options.timeInterval;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "min", {
            get: function () {
                if (this.options.min) {
                    var min = new Date(this.options.min);
                    return new Date(min.getTime() + min.getTimezoneOffset() * 60000);
                }
                else {
                    return undefined;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "max", {
            get: function () {
                if (this.options.max) {
                    var max = new Date(this.options.max);
                    return new Date(max.getTime() + max.getTimezoneOffset() * 60000);
                }
                else {
                    return undefined;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TimeFilterFormComponent.prototype, "is", {
            get: function () {
                return this.options.range === undefined ? false : this.options.range;
            },
            enumerable: false,
            configurable: true
        });
        TimeFilterFormComponent.prototype.ngOnInit = function () {
            if (this.startDate === undefined) {
                this.startDate = new Date(this.min);
            }
            if (this.endDate === undefined) {
                this.endDate = new Date(this.max);
            }
            if (this.startYear === undefined) {
                this.startYear = new Date(this.startDate).getFullYear();
                this.initStartYear = this.startYear;
            }
            if (this.endYear === undefined) {
                this.endYear = new Date(this.endDate).getFullYear();
                this.initEndYear = this.endYear;
            }
            if (!this.isRange) {
                for (var i = this.startYear; i <= this.endYear + 1; i++) {
                    this.listYears.push(i);
                }
            }
            else {
                for (var i = this.startYear; i < this.endYear; i++) {
                    this.startListYears.push(i);
                }
                for (var i = this.startYear + 1; i <= this.endYear; i++) {
                    this.endListYears.push(i);
                }
            }
            this.options.enabled =
                this.options.enabled === undefined ? true : this.options.enabled;
            this.checkFilterValue();
            if (this.options.enabled) {
                if (!this.isRange && this.style === 'slider' && this.type === 'year') {
                    this.yearChange.emit(this.year);
                }
            }
            else {
                this.storeCurrentFilterValue();
                this.yearChange.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.
            }
        };
        TimeFilterFormComponent.prototype.storeCurrentFilterValue = function () {
            // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.
            if (!this.isRange &&
                this.style === exports.TimeFilterStyle.SLIDER &&
                this.type === exports.TimeFilterType.YEAR) {
                this.options.value = this.year.toString();
            }
        };
        TimeFilterFormComponent.prototype.checkFilterValue = function () {
            var olSource = this.layer.dataSource.ol;
            var timeFromWms = olSource.getParams().TIME;
            if (!this.isRange &&
                this.style === exports.TimeFilterStyle.SLIDER &&
                this.type === exports.TimeFilterType.YEAR) {
                if (timeFromWms) {
                    this.year = new Date(timeFromWms.toString()).getFullYear() + 1;
                }
                else if (this.options.value) {
                    this.year = new Date(this.options.value.toString()).getFullYear() + 1;
                }
                else {
                    this.year = new Date(this.min).getFullYear() + 1;
                }
            }
            else if (this.isRange &&
                this.style === exports.TimeFilterStyle.CALENDAR &&
                this.type === exports.TimeFilterType.YEAR) {
                if (timeFromWms) {
                    this.startYear = parseInt(timeFromWms.substr(0, 4), 10);
                    this.endYear = parseInt(timeFromWms.substr(5, 4), 10);
                    var newStartListYears = [];
                    var newEndListYears = [];
                    for (var i = this.initStartYear; i < this.endYear; i++) {
                        newStartListYears.push(i);
                    }
                    for (var i = this.startYear + 1; i <= this.initEndYear; i++) {
                        newEndListYears.push(i);
                    }
                    this.startListYears = newStartListYears;
                    this.endListYears = newEndListYears;
                }
            }
            // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.
        };
        TimeFilterFormComponent.prototype.handleDateChange = function (event) {
            this.setupDateOutput();
            this.applyTypeChange();
            // Only if is range, use 2 dates to make the range
            if (this.isRange) {
                this.change.emit([this.startDate, this.endDate]);
            }
            else {
                this.change.emit(this.startDate);
            }
        };
        TimeFilterFormComponent.prototype.handleYearChange = function (event) {
            if (this.isRange) {
                this.endListYears = [];
                for (var i = this.startYear + 1; i <= this.initEndYear; i++) {
                    this.endListYears.push(i);
                }
                this.startListYears = [];
                for (var i = this.initStartYear + 1; i < this.endYear; i++) {
                    this.startListYears.push(i);
                }
                this.yearChange.emit([this.startYear, this.endYear]);
            }
            else {
                this.yearChange.emit(this.year);
            }
        };
        TimeFilterFormComponent.prototype.handleListYearChange = function (event) {
            this.handleYearChange([this.startYear, this.endYear]);
        };
        TimeFilterFormComponent.prototype.handleListYearStartChange = function (event) {
            this.change.emit([this.startDate, this.endDate]);
        };
        TimeFilterFormComponent.prototype.dateToNumber = function (date) {
            var newDate;
            if (date) {
                newDate = new Date(date);
            }
            else {
                newDate = new Date(this.min);
            }
            return newDate.getTime();
        };
        TimeFilterFormComponent.prototype.setSliderThumbLabel = function (label) {
            var thumbLabel = this.findThumbLabel(this.mySlider._elementRef.nativeElement.childNodes);
            if (thumbLabel) {
                thumbLabel.textContent = label;
            }
        };
        TimeFilterFormComponent.prototype.findThumbLabel = function (test) {
            var _this = this;
            var thumbLabel;
            test.forEach(function (value) {
                if (value.className === 'mat-slider-thumb-label-text') {
                    thumbLabel = value;
                }
                if (value.children.length > 0 && !thumbLabel) {
                    thumbLabel = _this.findThumbLabel(value.childNodes);
                }
            }, this);
            return thumbLabel;
        };
        TimeFilterFormComponent.prototype.toggleFilterState = function () {
            this.options.enabled = !this.options.enabled;
            if (this.options.enabled) {
                if (!this.isRange &&
                    exports.TimeFilterStyle.SLIDER &&
                    this.type === exports.TimeFilterType.YEAR) {
                    this.yearChange.emit(this.year);
                }
            }
            else {
                this.stopFilter();
                this.storeCurrentFilterValue();
                this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.
            }
        };
        TimeFilterFormComponent.prototype.resetFilter = function (event) {
            this.date = new Date(this.min);
            this.year = this.date.getFullYear();
            if (!this.isRange &&
                exports.TimeFilterStyle.SLIDER &&
                this.type === exports.TimeFilterType.YEAR) {
                this.yearChange.emit(this.year);
            }
            else {
                this.setupDateOutput();
                this.change.emit(undefined); // TODO: FIX THIS for ALL OTHER TYPES STYLES OR RANGE.
            }
        };
        TimeFilterFormComponent.prototype.playFilter = function (event) {
            if (this.interval) {
                this.stopFilter();
            }
            else {
                this.playIcon = 'pause-circle';
                this.interval = setInterval(function (that) {
                    var newMinDateNumber;
                    var maxDateNumber = new Date(that.max);
                    newMinDateNumber =
                        that.date === undefined ? that.min.getTime() : that.date.getTime();
                    newMinDateNumber += that.mySlider.step;
                    that.date = new Date(newMinDateNumber);
                    if (newMinDateNumber > maxDateNumber.getTime()) {
                        that.stopFilter();
                    }
                    that.handleDateChange({ value: that.date, date: that.date });
                }, this.timeInterval, this);
            }
        };
        TimeFilterFormComponent.prototype.playYear = function (event) {
            var _this = this;
            if (this.year + this.mySlider.step >
                this.max.getFullYear() + this.mySlider.step) {
                this.stopFilter();
                this.resetFilter(event);
            }
            if (this.interval) {
                this.stopFilter();
            }
            else {
                this.playIcon = 'pause-circle';
                this.interval = setInterval(function () {
                    if ((_this.year + _this.mySlider.step) > _this.max.getFullYear()) {
                        _this.stopFilter();
                    }
                    else {
                        _this.year = _this.year + _this.mySlider.step;
                    }
                    _this.yearChange.emit(_this.year);
                }, this.timeInterval, this);
            }
        };
        TimeFilterFormComponent.prototype.stopFilter = function () {
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.interval = undefined;
            this.playIcon = 'play-circle';
        };
        TimeFilterFormComponent.prototype.handleSliderDateChange = function (event) {
            this.date = new Date(event.value);
            this.setSliderThumbLabel(this.handleSliderTooltip());
            this.handleDateChange(event);
        };
        TimeFilterFormComponent.prototype.handleSliderYearChange = function (event) {
            this.year = event.value;
            this.yearChange.emit(this.year);
        };
        TimeFilterFormComponent.prototype.handleSliderValue = function () {
            if (this.options.current === true || !this.min) {
                var currentDate = new Date();
                this.date = this.getRoundedDate(currentDate);
            }
            if (this.type === exports.TimeFilterType.YEAR) {
                return this.year;
            }
            else {
                return this.date === undefined ? this.min.getTime() : this.date.getTime();
            }
        };
        TimeFilterFormComponent.prototype.handleSliderTooltip = function () {
            var label;
            switch (this.type) {
                case exports.TimeFilterType.DATE:
                    label =
                        this.date === undefined
                            ? this.min.toDateString()
                            : this.date.toDateString();
                    break;
                case exports.TimeFilterType.TIME:
                    label =
                        this.date === undefined
                            ? this.min.toTimeString()
                            : this.date.toTimeString();
                    break;
                // datetime
                default:
                    label =
                        this.date === undefined
                            ? this.min.toUTCString()
                            : this.date.toUTCString();
                    break;
            }
            return label;
        };
        TimeFilterFormComponent.prototype.setupDateOutput = function () {
            if (this.style === exports.TimeFilterStyle.SLIDER) {
                this.startDate = new Date(this.date);
                this.startDate.setSeconds(-(this.step / 1000));
                this.endDate = new Date(this.startDate);
                this.endDate.setSeconds(this.step / 1000);
            }
            else if (!this.isRange && !!this.date) {
                this.endDate = new Date(this.date);
                this.startDate = new Date(this.date);
            }
            else if (this.isRange && (!!this.date || !this.date)) {
                this.startDate =
                    this.startDate === undefined ? new Date(this.min) : this.startDate;
                this.endDate =
                    this.endDate === undefined ? new Date(this.max) : this.endDate;
            }
            else if (!this.date) {
                this.startDate =
                    this.startDate === undefined ? new Date(this.min) : this.startDate;
                this.endDate =
                    this.endDate === undefined ? new Date(this.max) : this.endDate;
            }
        };
        TimeFilterFormComponent.prototype.applyTypeChange = function () {
            switch (this.type) {
                case exports.TimeFilterType.DATE:
                    if (this.startDate !== undefined || this.endDate !== undefined) {
                        this.startDate.setHours(0);
                        this.startDate.setMinutes(0);
                        this.startDate.setSeconds(0);
                        this.endDate.setHours(23);
                        this.endDate.setMinutes(59);
                        this.endDate.setSeconds(59);
                    }
                    break;
                case exports.TimeFilterType.TIME:
                    if (this.style === exports.TimeFilterStyle.CALENDAR) {
                        if (this.startDate.getDay() !== this.min.getDay()) {
                            var selectedHour = this.startDate.getHours();
                            var selectedMinute = this.startDate.getMinutes();
                            this.startDate = this.min;
                            this.startDate.setHours(selectedHour);
                            this.startDate.setMinutes(selectedMinute);
                        }
                        if (this.endDate.getDay() !== this.min.getDay()) {
                            var selectedHour = this.endDate.getHours();
                            var selectedMinute = this.endDate.getMinutes();
                            this.endDate = this.min;
                            this.endDate.setHours(selectedHour);
                            this.endDate.setMinutes(selectedMinute);
                        }
                    }
                    if (!this.isRange && this.step > 60 * 60 * 1000) {
                        this.startDate.setMinutes(0);
                        this.startDate.setSeconds(0);
                        this.endDate.setMinutes(59);
                        this.endDate.setSeconds(59);
                    }
                    break;
                // datetime
                default:
                // do nothing
            }
        };
        TimeFilterFormComponent.prototype.getRangeMinDate = function () {
            return this.startDate === undefined ? this.min : this.startDate;
        };
        TimeFilterFormComponent.prototype.getRangeMaxDate = function () {
            return this.endDate === undefined ? this.max : this.endDate;
        };
        /**
         * Round date at a certain time, 10 minutes by Default
         * @param date - Date to Round
         * @param atMinute - round to closest 'atMinute' minute, rounded 10 by default
         * @return the rounded date
         */
        TimeFilterFormComponent.prototype.getRoundedDate = function (date, atMinute) {
            if (atMinute === void 0) { atMinute = 10; }
            var coeff = 1000 * 60 * atMinute;
            return new Date(Math.round(date.getTime() / coeff) * coeff);
        };
        /**
         * Get the step (period) definition from the layer dimension tag
         * @param step The step as ISO 8601 example: PT10M for 10 Minutes
         * @return the duration in milliseconds
         */
        TimeFilterFormComponent.prototype.getStepDefinition = function (step) {
            return moment___namespace.duration(step).asMilliseconds();
        };
        return TimeFilterFormComponent;
    }());
    TimeFilterFormComponent.ɵfac = function TimeFilterFormComponent_Factory(t) { return new (t || TimeFilterFormComponent)(i0__namespace.ɵɵdirectiveInject(i9__namespace.DateAdapter)); };
    TimeFilterFormComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TimeFilterFormComponent, selectors: [["igo-time-filter-form"]], viewQuery: function TimeFilterFormComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(i13$1.MatSlider, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.mySlider = _t.first);
            }
        }, inputs: { layer: "layer", options: "options", currentValue: "currentValue" }, outputs: { change: "change", yearChange: "yearChange" }, decls: 5, vars: 4, consts: [[4, "ngIf"], ["class", "igo-col igo-col-100 igo-col-100-m mat-typography", 4, "ngIf"], ["class", "igo-col igo-col-100 igo-col-100-m", 4, "ngIf"], [1, "igo-col", "igo-col-100", "igo-col-100-m"], ["matSuffix", "", 3, "for"], ["openOnFocus", "true", "timeInterval", "5", 3, "type"], ["datetimePicker", ""], ["matInput", "", "autocomplete", "false", "readonly", "readonly", 3, "placeholder", "matDatetimepicker", "ngModel", "min", "max", "ngModelChange", "dateChange"], [1, "igo-col", "igo-col-100"], ["minDatetimePicker", ""], ["matInput", "", "autocomplete", "false", "readonly", "readonly", 3, "placeholder", "matDatetimepicker", "ngModel", "min", "max", "ngModelChange", "input", "dateChange"], ["maxDatetimePicker", ""], [3, "placeholder", "ngModel", "ngModelChange", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "igo-col", "igo-col-100", "igo-col-100-m", "mat-typography"], ["id", "time-slider", "tickInterval", "auto", "thumbLabel", "", 3, "step", "min", "max", "value", "color", "disabled", "input", "change"], ["class", "date-below", 4, "ngIf"], [1, "igo-layer-actions-container"], ["actions", ""], ["tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "checked", "disabled", "change"], ["mat-icon-button", "", "color", "primary", 3, "disabled", "click"], [3, "svgIcon"], [1, "date-below"], ["id", "time-slider", "tickInterval", "auto", "thumbLabel", "", 3, "step", "min", "max", "value", "input", "selectionChange"], ["mat-icon-button", "", "color", "primary", 3, "click"]], template: function TimeFilterFormComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, TimeFilterFormComponent_div_0_Template, 3, 2, "div", 0);
                i0__namespace.ɵɵtemplate(1, TimeFilterFormComponent_div_1_Template, 3, 2, "div", 0);
                i0__namespace.ɵɵelement(2, "br");
                i0__namespace.ɵɵtemplate(3, TimeFilterFormComponent_div_3_Template, 15, 19, "div", 1);
                i0__namespace.ɵɵtemplate(4, TimeFilterFormComponent_div_4_Template, 6, 6, "div", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.style === "calendar" && ctx.type !== "year");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.style === "calendar" && ctx.type === "year");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", !ctx.isRange && ctx.style === "slider" && ctx.type === "year");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.style === "slider" && ctx.type !== "year");
            }
        }, directives: [i1__namespace$1.NgIf, i12__namespace.MatFormField, i4__namespace$1.MatDatetimepickerToggle, i12__namespace.MatSuffix, i4__namespace$1.MatDatetimepicker, i5__namespace$1.MatInput, i4__namespace$1.MatDatetimepickerInput, i16__namespace.DefaultValueAccessor, i16__namespace.NgControlStatus, i16__namespace.NgModel, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i9__namespace.MatOption, i13__namespace$1.MatSlider, i22__namespace.MatSlideToggle, i3__namespace.MatTooltip, i2__namespace.MatButton, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [".igo-layer-filters-container[_ngcontent-%COMP%]{padding-left:5px}mat-slider[_ngcontent-%COMP%]     div.mat-slider-thumb-label{width:32px;height:32px;margin:0 auto}mat-slider[_ngcontent-%COMP%]     span.mat-slider-thumb-label-text{font-size:10px}#time-slider[_ngcontent-%COMP%]{width:70%;margin:0 auto}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){#time-slider[_ngcontent-%COMP%]{width:60%;margin:0 auto}}.date-below[_ngcontent-%COMP%]{margin:0}mat-form-field[_ngcontent-%COMP%]{text-align:center}mat-datetimepicker-toggle[_ngcontent-%COMP%]     .mat-icon{padding-bottom:30px}.igo-layer-actions-container[_ngcontent-%COMP%] > .mat-slide-toggle[_ngcontent-%COMP%]{vertical-align:middle}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterFormComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-time-filter-form',
                        templateUrl: './time-filter-form.component.html',
                        styleUrls: ['./time-filter-form.component.scss']
                    }]
            }], function () { return [{ type: i9__namespace.DateAdapter }]; }, { layer: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], currentValue: [{
                    type: i0.Input
                }], change: [{
                    type: i0.Output
                }], yearChange: [{
                    type: i0.Output
                }], mySlider: [{
                    type: i0.ViewChild,
                    args: [i13$1.MatSlider]
                }] });
    })();

    var _c0$9 = function (a0) { return { disabled: a0 }; };
    function TimeFilterItemComponent_mat_list_item_0_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r6_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵlistener("click", function TimeFilterItemComponent_mat_list_item_0_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r6_1); var ctx_r5 = i0__namespace.ɵɵnextContext(2); return ctx_r5.layer.visible = !ctx_r5.layer.visible; });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 11);
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("color", ctx_r4.layer.visible ? "primary" : "default")("matTooltip", ctx_r4.layer.visible ? i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.layer.hideLayer") : i0__namespace.ɵɵpipeBind1(2, 6, "igo.geo.layer.showLayer"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(10, _c0$9, i0__namespace.ɵɵpipeBind1(4, 8, ctx_r4.inResolutionRange$) === false))("svgIcon", ctx_r4.layer.visible ? "eye" : "eye-off");
        }
    }
    var _c1$8 = function (a0) { return { "cursor": a0 }; };
    function TimeFilterItemComponent_mat_list_item_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r8_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-list-item");
            i0__namespace.ɵɵelementStart(1, "mat-icon", 7);
            i0__namespace.ɵɵlistener("click", function TimeFilterItemComponent_mat_list_item_0_Template_mat_icon_click_1_listener() { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r7 = i0__namespace.ɵɵnextContext(); return ctx_r7.toggleFiltersCollapsed(); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(2, "h4", 8);
            i0__namespace.ɵɵlistener("click", function TimeFilterItemComponent_mat_list_item_0_Template_h4_click_2_listener() { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r9 = i0__namespace.ɵɵnextContext(); return ctx_r9.toggleLegendOnClick(); });
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(4, TimeFilterItemComponent_mat_list_item_0_button_4_Template, 5, 12, "button", 9);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            var _r1 = i0__namespace.ɵɵreference(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("target", _r1)("collapsed", ctx_r0.filtersCollapsed);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngStyle", i0__namespace.ɵɵpureFunction1(5, _c1$8, ctx_r0.filtersCollapsed ? "default" : "pointer"));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.layer.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.header);
        }
    }
    function TimeFilterItemComponent_igo_layer_legend_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-layer-legend", 12);
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("layer", ctx_r3.layer);
        }
    }
    var TimeFilterItemComponent = /** @class */ (function () {
        function TimeFilterItemComponent(timeFilterService) {
            this.timeFilterService = timeFilterService;
            this.color = 'primary';
            this.showLegend$ = new rxjs.BehaviorSubject(false);
            this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            this.filtersCollapsed = false;
            this.header = true;
        }
        Object.defineProperty(TimeFilterItemComponent.prototype, "datasource", {
            get: function () {
                return this.layer.dataSource;
            },
            enumerable: false,
            configurable: true
        });
        TimeFilterItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            var resolution$ = this.layer.map.viewController.resolution$;
            this.resolution$$ = resolution$.subscribe(function () {
                _this.inResolutionRange$.next(_this.layer.isInResolutionsRange);
            });
        };
        TimeFilterItemComponent.prototype.ngOnDestroy = function () {
            this.resolution$$.unsubscribe();
        };
        TimeFilterItemComponent.prototype.handleYearChange = function (year) {
            this.timeFilterService.filterByYear(this.datasource, year);
        };
        TimeFilterItemComponent.prototype.handleDateChange = function (date) {
            this.timeFilterService.filterByDate(this.datasource, date);
        };
        TimeFilterItemComponent.prototype.toggleLegend = function (collapsed) {
            this.layer.legendCollapsed = collapsed;
            this.showLegend$.next(!collapsed);
        };
        TimeFilterItemComponent.prototype.toggleLegendOnClick = function () {
            if (!this.filtersCollapsed) {
                this.toggleLegend(this.showLegend$.value);
            }
        };
        TimeFilterItemComponent.prototype.setVisible = function () {
            this.layer.visible = true;
        };
        TimeFilterItemComponent.prototype.toggleFiltersCollapsed = function () {
            this.filtersCollapsed = !this.filtersCollapsed;
        };
        return TimeFilterItemComponent;
    }());
    TimeFilterItemComponent.ɵfac = function TimeFilterItemComponent_Factory(t) { return new (t || TimeFilterItemComponent)(i0__namespace.ɵɵdirectiveInject(TimeFilterService)); };
    TimeFilterItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TimeFilterItemComponent, selectors: [["igo-time-filter-item"]], inputs: { header: "header", layer: "layer" }, decls: 8, vars: 7, consts: [[4, "ngIf"], [1, "igo-datasource-filters-container"], ["filters", ""], [1, "igo-layer-legend-container"], ["legend", ""], [3, "layer", 4, "ngIf"], [3, "layer", "options", "currentValue", "change", "yearChange"], ["mat-list-avatar", "", "igoCollapse", "", "svgIcon", "chevron-up", 1, "igo-chevron", 3, "target", "collapsed", "click"], ["matLine", "", 3, "ngStyle", "click"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click"], [3, "ngClass", "svgIcon"], [3, "layer"]], template: function TimeFilterItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, TimeFilterItemComponent_mat_list_item_0_Template, 5, 7, "mat-list-item", 0);
                i0__namespace.ɵɵelementStart(1, "div", 1, 2);
                i0__namespace.ɵɵelementStart(3, "div", 3, 4);
                i0__namespace.ɵɵtemplate(5, TimeFilterItemComponent_igo_layer_legend_5_Template, 1, 1, "igo-layer-legend", 5);
                i0__namespace.ɵɵpipe(6, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(7, "igo-time-filter-form", 6);
                i0__namespace.ɵɵlistener("change", function TimeFilterItemComponent_Template_igo_time_filter_form_change_7_listener($event) { return ctx.handleDateChange($event); })("yearChange", function TimeFilterItemComponent_Template_igo_time_filter_form_yearChange_7_listener($event) { return ctx.handleYearChange($event); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.header);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(6, 5, ctx.showLegend$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("layer", ctx.layer)("options", ctx.datasource.options.timeFilter)("currentValue", ctx.datasource.options.params.TIME);
            }
        }, styles: ["[_nghost-%COMP%]{overflow:hidden}.igo-datasource-filters-container[_ngcontent-%COMP%]{text-align:center;width:100%;display:inline-block;padding-top:5px}.igo-layer-legend-container[_ngcontent-%COMP%]{padding-left:1.125em;width:calc(100% - 18px)}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-time-filter-item',
                        templateUrl: './time-filter-item.component.html',
                        styleUrls: ['./time-filter-item.component.scss']
                    }]
            }], function () { return [{ type: TimeFilterService }]; }, { header: [{
                    type: i0.Input
                }], layer: [{
                    type: i0.Input
                }] });
    })();

    function TimeFilterListComponent_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-time-filter-item", 2);
        }
        if (rf & 2) {
            var layer_r1 = ctx.$implicit;
            i0__namespace.ɵɵproperty("header", true)("layer", layer_r1);
        }
    }
    var TimeFilterListComponent = /** @class */ (function () {
        function TimeFilterListComponent(cdRef) {
            this.cdRef = cdRef;
            this._layers = [];
        }
        Object.defineProperty(TimeFilterListComponent.prototype, "layers", {
            get: function () {
                return this._layers;
            },
            set: function (value) {
                this._layers = value;
                this.cdRef.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        return TimeFilterListComponent;
    }());
    TimeFilterListComponent.ɵfac = function TimeFilterListComponent_Factory(t) { return new (t || TimeFilterListComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    TimeFilterListComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TimeFilterListComponent, selectors: [["igo-time-filter-list"]], inputs: { layers: "layers" }, decls: 3, vars: 6, consts: [[3, "navigation", "selection"], ["ngFor", "", 3, "ngForOf"], ["igoListItem", "", 3, "header", "layer"]], template: function TimeFilterListComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-list", 0);
                i0__namespace.ɵɵtemplate(1, TimeFilterListComponent_ng_template_1_Template, 1, 2, "ng-template", 1);
                i0__namespace.ɵɵpipe(2, "filterableDataSource");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("navigation", false)("selection", false);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind2(2, 3, ctx.layers, "time"));
            }
        }, encapsulation: 2, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-time-filter-list',
                        templateUrl: './time-filter-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, { layers: [{
                    type: i0.Input
                }] });
    })();

    var TimeFilterListBindingDirective = /** @class */ (function () {
        function TimeFilterListBindingDirective(component, mapService) {
            this.mapService = mapService;
            this.component = component;
        }
        TimeFilterListBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // Override input layers
            this.component.layers = [];
            this.layers$$ = this.mapService.getMap().layers$.subscribe(function (layers) {
                _this.component.layers = layers;
            });
        };
        TimeFilterListBindingDirective.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
        };
        return TimeFilterListBindingDirective;
    }());
    TimeFilterListBindingDirective.ɵfac = function TimeFilterListBindingDirective_Factory(t) { return new (t || TimeFilterListBindingDirective)(i0__namespace.ɵɵdirectiveInject(TimeFilterListComponent, 2), i0__namespace.ɵɵdirectiveInject(MapService)); };
    TimeFilterListBindingDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: TimeFilterListBindingDirective, selectors: [["", "igoTimeFilterListBinding", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TimeFilterListBindingDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoTimeFilterListBinding]'
                    }]
            }], function () {
            return [{ type: TimeFilterListComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: MapService }];
        }, null);
    })();

    var WktService = /** @class */ (function () {
        function WktService() {
        }
        WktService.prototype.wktToFeature = function (wkt, wktProj, featureProj) {
            return new olWKT__default["default"]().readFeature(wkt, {
                dataProjection: wktProj,
                featureProjection: featureProj
            });
        };
        WktService.prototype.extentToWkt = function (epsgTO, extent, extentProj) {
            var currentExtent = olproj__namespace.transformExtent(extent, extentProj, epsgTO);
            currentExtent = this.roundCoordinateArray(currentExtent, epsgTO, 0);
            var wktPoly = "POLYGON((\n      " + extent[0] + " " + extent[1] + ",\n      " + extent[0] + " " + extent[3] + ",\n      " + extent[2] + " " + extent[3] + ",\n      " + extent[2] + " " + extent[1] + ",\n      " + extent[0] + " " + extent[1] + "))";
            var wktLine = "LINESTRING(\n      " + extent[0] + " " + extent[1] + ",\n      " + extent[0] + " " + extent[3] + ",\n      " + extent[2] + " " + extent[3] + ",\n      " + extent[2] + " " + extent[1] + ",\n      " + extent[0] + " " + extent[1] + ")";
            var wktMultiPoints = "MULTIPOINT(\n        " + extent[0] + " " + extent[1] + ",\n        " + extent[0] + " " + extent[3] + ",\n        " + extent[2] + " " + extent[3] + ",\n        " + extent[2] + " " + extent[1] + ")";
            return {
                wktPoly: wktPoly,
                wktLine: wktLine,
                wktMultiPoints: wktMultiPoints
            };
        };
        WktService.prototype.roundCoordinateArray = function (coordinateArray, projection, decimal) {
            if (decimal === void 0) { decimal = 0; }
            var lproj = olproj__namespace.get(projection);
            var units = lproj.getUnits();
            var olUnits = ['ft', 'm', 'us-ft'];
            if (olUnits.indexOf(units) !== -1) {
                coordinateArray = this.roundArray(coordinateArray, decimal);
            }
            return coordinateArray;
        };
        WktService.prototype.roundArray = function (array, decimal) {
            if (decimal === void 0) { decimal = 0; }
            var x = 0;
            while (x < array.length) {
                array[x] = array[x].toFixed(decimal);
                x++;
            }
            return array;
        };
        WktService.prototype.snrcToWkt = function (snrc, epsgTO) {
            snrc = snrc.toLowerCase();
            var wktPoly;
            var ew = {
                1: { from: -56, to: -64 },
                2: { from: -64, to: -72 },
                3: { from: -72, to: -80 },
                4: { from: -80, to: -88 },
                5: { from: -88, to: -96 },
                6: { from: -96, to: -104 },
                7: { from: -104, to: -112 },
                8: { from: -112, to: -120 },
                9: { from: -120, to: -128 },
                10: { from: -128, to: -136 }
            };
            var sn = {
                1: { from: 44, to: 48 },
                2: { from: 48, to: 52 },
                3: { from: 52, to: 56 },
                4: { from: 56, to: 60 },
                5: { from: 60, to: 64 },
                6: { from: 64, to: 68 },
                7: { from: 68, to: 72 },
                8: { from: 72, to: 76 },
                9: { from: 76, to: -128 }
            };
            var snrc250kIndex = [
                ['m', 'n', 'o', 'p'],
                ['l', 'k', 'j', 'i'],
                ['e', 'f', 'g', 'h'],
                ['d', 'c', 'b', 'a']
            ];
            var snrc50kIndex = [
                ['13', '14', '15', '16'],
                ['12', '11', '10', '09'],
                ['05', '06', '07', '08'],
                ['04', '03', '02', '01']
            ];
            var checkSNRC50k = /\d{2,3}[a-p][0,1][0-9]/gi;
            var checkSNRC250k = /\d{2,3}[a-p]/gi;
            var checkSNRC1m = /\d{2,3}/gi;
            var snrc1m = false;
            var snrc250k = false;
            var snrc50k = false;
            if (checkSNRC50k.test(snrc)) {
                snrc50k = true;
            }
            else {
                if (checkSNRC250k.test(snrc)) {
                    snrc250k = true;
                }
                else {
                    if (checkSNRC1m.test(snrc)) {
                        snrc1m = true;
                    }
                }
            }
            if (snrc1m) {
                snrc += 'a01';
            }
            else if (snrc250k) {
                snrc += '01';
            }
            if (/\d{2,3}[a-p][0,1][0-9]/gi.test(snrc)) {
                var regex1m = /(?=[a-p])/gi;
                var ar1m = snrc.split(regex1m);
                var part1m = ar1m[0];
                var part250k_1 = ar1m[1][0];
                var part50k_1 = ar1m[1].split(part250k_1)[1];
                var separator = 1;
                if (part1m.length === 3) {
                    separator = 2;
                }
                var partEW = part1m.substring(0, separator);
                var partSN = part1m.substring(separator);
                var unit1mEW = 8;
                var unit1mSN = 4;
                var unit250kEW = 2;
                var unit250kSN = 1;
                var unit50kEW = 0.5;
                var unit50kSN = 0.25;
                var index250kEW_1 = 0;
                var index250kSN_1 = 0;
                var index50kEW_1 = 0;
                var index50kSN_1 = 0;
                snrc250kIndex.forEach(function (element) {
                    if (element.indexOf(part250k_1) !== -1) {
                        index250kSN_1 = snrc250kIndex.indexOf(element);
                        index250kEW_1 = element.indexOf(part250k_1);
                    }
                });
                snrc50kIndex.forEach(function (element) {
                    if (element.indexOf(part50k_1) !== -1) {
                        index50kSN_1 = snrc50kIndex.indexOf(element);
                        index50kEW_1 = element.indexOf(part50k_1);
                    }
                });
                var increment250kEW = 0;
                var increment250kSN = 0;
                var increment50kEW = 0;
                var increment50kSN = 0;
                var unitPerTypeEW = unit1mEW;
                var unitPerTypeSN = unit1mSN;
                if (snrc250k) {
                    increment250kEW = index250kEW_1 * unit250kEW;
                    increment250kSN = index250kSN_1 * unit250kSN;
                    increment50kEW = 0;
                    increment50kSN = 0;
                    unitPerTypeEW = unit250kEW;
                    unitPerTypeSN = unit250kSN;
                }
                else if (snrc50k) {
                    increment250kEW = index250kEW_1 * unit250kEW;
                    increment250kSN = index250kSN_1 * unit250kSN;
                    increment50kEW = index50kEW_1 * unit50kEW;
                    increment50kSN = index50kSN_1 * unit50kSN;
                    unitPerTypeEW = unit50kEW;
                    unitPerTypeSN = unit50kSN;
                }
                var coord = {
                    ul: [
                        ew[partEW].to + increment250kEW + increment50kEW,
                        sn[partSN].to - increment250kSN - increment50kSN
                    ]
                };
                coord.lr = [
                    coord.ul[0] + unitPerTypeEW,
                    coord.ul[1] - unitPerTypeSN
                ];
                coord.ur = [coord.ul[0], coord.ul[1] - unitPerTypeSN];
                coord.ll = [coord.ul[0] + unitPerTypeEW, coord.ul[1]];
                coord.ul = olproj__namespace.transform([coord.ul[0], coord.ul[1]], 'EPSG:4326', epsgTO);
                coord.lr = olproj__namespace.transform([coord.lr[0], coord.lr[1]], 'EPSG:4326', epsgTO);
                coord.ur = olproj__namespace.transform([coord.ur[0], coord.ur[1]], 'EPSG:4326', epsgTO);
                coord.ll = olproj__namespace.transform([coord.ll[0], coord.ll[1]], 'EPSG:4326', epsgTO);
                // Rounded coordinate to shorten url in get
                coord.ul = this.roundCoordinateArray(coord.ul, epsgTO, 0);
                coord.lr = this.roundCoordinateArray(coord.lr, epsgTO, 0);
                coord.ur = this.roundCoordinateArray(coord.ur, epsgTO, 0);
                coord.ll = this.roundCoordinateArray(coord.ll, epsgTO, 0);
                wktPoly =
                    'POLYGON((' +
                        [
                            coord.ul.join(' '),
                            coord.ur.join(' '),
                            coord.lr.join(' '),
                            coord.ll.join(' '),
                            coord.ul.join(' ')
                        ].join(',') +
                        '))';
                var wktLine = 'LINESTRING(' +
                    [
                        coord.ul.join(' '),
                        coord.ur.join(' '),
                        coord.lr.join(' '),
                        coord.ll.join(' '),
                        coord.ul.join(' ')
                    ].join(',') +
                    ')';
                var wktMultiPoints = 'MULTIPOINT(' +
                    [
                        coord.ul.join(' '),
                        coord.ur.join(' '),
                        coord.lr.join(' '),
                        coord.ll.join(' ')
                    ].join(',') +
                    ')';
                return {
                    wktPoly: wktPoly,
                    wktLine: wktLine,
                    wktMultiPoints: wktMultiPoints
                };
            }
        };
        return WktService;
    }());
    WktService.ɵfac = function WktService_Factory(t) { return new (t || WktService)(); };
    WktService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: WktService, factory: WktService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WktService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return []; }, null);
    })();

    function OgcFilterFormComponent_mat_form_field_13_mat_option_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 23);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var field_r12 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", field_r12.alias)("id", field_r12.name)("matTooltip", field_r12.alias);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", field_r12.alias, " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_13_button_12_Template(rf, ctx) {
        if (rf & 1) {
            var _r14_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_mat_form_field_13_button_12_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r14_1); var ctx_r13 = i0__namespace.ɵɵnextContext(2); return ctx_r13.clearSelectedField(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r11 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r11.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_13_Template(rf, ctx) {
        if (rf & 1) {
            var _r16_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 17);
            i0__namespace.ɵɵlistener("mouseenter", function OgcFilterFormComponent_mat_form_field_13_Template_mat_form_field_mouseenter_0_listener() { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r15 = i0__namespace.ɵɵnextContext(); return ctx_r15.inputClearable = "selectField"; })("mouseleave", function OgcFilterFormComponent_mat_form_field_13_Template_mat_form_field_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r17 = i0__namespace.ɵɵnextContext(); return ctx_r17.inputClearable = undefined; });
            i0__namespace.ɵɵelementStart(1, "input", 18);
            i0__namespace.ɵɵlistener("input", function OgcFilterFormComponent_mat_form_field_13_Template_input_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r18 = i0__namespace.ɵɵnextContext(); return ctx_r18.updateFieldsList($event.target.value); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵpipe(5, "async");
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵpipe(7, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(8, "mat-autocomplete", 19, 20);
            i0__namespace.ɵɵlistener("optionSelected", function OgcFilterFormComponent_mat_form_field_13_Template_mat_autocomplete_optionSelected_8_listener($event) { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r19 = i0__namespace.ɵɵnextContext(); return ctx_r19.changeField($event.option.id); });
            i0__namespace.ɵɵtemplate(10, OgcFilterFormComponent_mat_form_field_13_mat_option_10_Template, 2, 4, "mat-option", 21);
            i0__namespace.ɵɵpipe(11, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(12, OgcFilterFormComponent_mat_form_field_13_button_12_Template, 2, 1, "button", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r9 = i0__namespace.ɵɵreference(9);
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("floatLabel", ctx_r0.floatLabel);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(2, 8, "igo.geo.sourceFields.selectField"))("disabled", !ctx_r0.currentFilter.active)("matAutocomplete", _r9)("value", i0__namespace.ɵɵpipeBind1(3, 10, ctx_r0.selectedField$) ? i0__namespace.ɵɵpipeBind1(4, 12, ctx_r0.selectedField$).alias : "")("matTooltip", i0__namespace.ɵɵpipeBind1(5, 14, ctx_r0.selectedField$) ? i0__namespace.ɵɵpipeBind1(6, 16, ctx_r0.selectedField$).alias : i0__namespace.ɵɵpipeBind1(7, 18, "igo.geo.sourceFields.selectField"));
            i0__namespace.ɵɵadvance(9);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(11, 20, ctx_r0.filteredFields$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.currentFilter.propertyName && ctx_r0.inputClearable === "selectField" && ctx_r0.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_option_24_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 3);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var operator_r20 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", operator_r20.key)("matTooltip", i0__namespace.ɵɵpipeBind1(1, 3, "igo.geo.operators.tooltip." + operator_r20.key));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 5, "igo.geo.operators." + operator_r20.key), " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_27_mat_option_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 29);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var igoSpatialSelector_r22 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", igoSpatialSelector_r22.type);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.spatialSelector." + igoSpatialSelector_r22.type), " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_27_Template(rf, ctx) {
        if (rf & 1) {
            var _r24_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 26);
            i0__namespace.ɵɵelementStart(1, "mat-select", 27);
            i0__namespace.ɵɵlistener("selectionChange", function OgcFilterFormComponent_mat_form_field_27_Template_mat_select_selectionChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r24_1); var ctx_r23 = i0__namespace.ɵɵnextContext(); return ctx_r23.changeSpatialSelector($event.value); });
            i0__namespace.ɵɵtemplate(2, OgcFilterFormComponent_mat_form_field_27_mat_option_2_Template, 3, 4, "mat-option", 28);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("disabled", !ctx_r2.currentFilter.active)("value", ctx_r2.currentFilter.igoSpatialSelector);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r2.igoSpatialSelectors);
        }
    }
    function OgcFilterFormComponent_mat_form_field_29_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 33);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var value_r28 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", value_r28)("matTooltip", value_r28);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", value_r28, " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_29_button_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r30_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_mat_form_field_29_button_7_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r29 = i0__namespace.ɵɵnextContext(2); return ctx_r29.clearProperty(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r27 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r27.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_29_Template(rf, ctx) {
        if (rf & 1) {
            var _r32_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 30);
            i0__namespace.ɵɵlistener("mouseenter", function OgcFilterFormComponent_mat_form_field_29_Template_mat_form_field_mouseenter_0_listener() { i0__namespace.ɵɵrestoreView(_r32_1); var ctx_r31 = i0__namespace.ɵɵnextContext(); return ctx_r31.inputClearable = "selectProperty"; })("mouseleave", function OgcFilterFormComponent_mat_form_field_29_Template_mat_form_field_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r32_1); var ctx_r33 = i0__namespace.ɵɵnextContext(); return ctx_r33.inputClearable = undefined; });
            i0__namespace.ɵɵelementStart(1, "input", 18);
            i0__namespace.ɵɵlistener("input", function OgcFilterFormComponent_mat_form_field_29_Template_input_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r32_1); var ctx_r34 = i0__namespace.ɵɵnextContext(); return ctx_r34.updateValuesList($event.target.value); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-autocomplete", 19, 31);
            i0__namespace.ɵɵlistener("optionSelected", function OgcFilterFormComponent_mat_form_field_29_Template_mat_autocomplete_optionSelected_3_listener($event) { i0__namespace.ɵɵrestoreView(_r32_1); var ctx_r35 = i0__namespace.ɵɵnextContext(); return ctx_r35.changeProperty($event.option.value); });
            i0__namespace.ɵɵtemplate(5, OgcFilterFormComponent_mat_form_field_29_mat_option_5_Template, 2, 3, "mat-option", 32);
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(7, OgcFilterFormComponent_mat_form_field_29_button_7_Template, 2, 1, "button", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r25 = i0__namespace.ɵɵreference(4);
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("floatLabel", ctx_r3.floatLabel);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(2, 8, "igo.geo.filter.placeholder"))("disabled", !ctx_r3.currentFilter.active)("matAutocomplete", _r25)("value", ctx_r3.detectProperty() === "expression" ? ctx_r3.currentFilter.expression : ctx_r3.currentFilter.pattern)("matTooltip", ctx_r3.detectProperty() === "expression" ? ctx_r3.currentFilter.expression || "" : ctx_r3.currentFilter.pattern || "");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(6, 10, ctx_r3.filteredValues$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.isClearable() && ctx_r3.inputClearable === "selectProperty" && ctx_r3.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_34_button_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r38_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_mat_form_field_34_button_3_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r38_1); var ctx_r37 = i0__namespace.ɵɵnextContext(2); return ctx_r37.currentFilter.igoSNRC = ""; });
            i0__namespace.ɵɵelement(1, "mat-icon", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r36 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r36.currentFilter.active && ctx_r36.inputClearable === "selectSNRC" && ctx_r36.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_34_Template(rf, ctx) {
        if (rf & 1) {
            var _r40_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 34);
            i0__namespace.ɵɵlistener("mouseenter", function OgcFilterFormComponent_mat_form_field_34_Template_mat_form_field_mouseenter_0_listener() { i0__namespace.ɵɵrestoreView(_r40_1); var ctx_r39 = i0__namespace.ɵɵnextContext(); return ctx_r39.inputClearable = "selectSNRC"; })("mouseleave", function OgcFilterFormComponent_mat_form_field_34_Template_mat_form_field_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r40_1); var ctx_r41 = i0__namespace.ɵɵnextContext(); return ctx_r41.inputClearable = undefined; });
            i0__namespace.ɵɵelementStart(1, "input", 35);
            i0__namespace.ɵɵlistener("input", function OgcFilterFormComponent_mat_form_field_34_Template_input_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r40_1); var ctx_r42 = i0__namespace.ɵɵnextContext(); return ctx_r42.changeSNRC($event.target.value); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(3, OgcFilterFormComponent_mat_form_field_34_button_3_Template, 2, 1, "button", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("floatLabel", ctx_r4.floatLabel);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(2, 5, "igo.geo.filter.placeholderSnrc"))("value", ctx_r4.currentFilter.igoSNRC)("matTooltip", ctx_r4.currentFilter.igoSNRC ? ctx_r4.currentFilter.igoSNRC : "");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r4.currentFilter.igoSNRC);
        }
    }
    function OgcFilterFormComponent_ng_container_36_button_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r45_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 37);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_ng_container_36_button_1_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r45_1); var ctx_r44 = i0__namespace.ɵɵnextContext(2); return ctx_r44.changeMapExtentGeometry(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 38);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r43 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r43.currentFilter.active)("disabled", !ctx_r43.currentFilter.active)("matTooltip", i0__namespace.ɵɵpipeBind1(1, 3, "igo.geo.spatialSelector.btnSetExtent"));
        }
    }
    function OgcFilterFormComponent_ng_container_36_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, OgcFilterFormComponent_ng_container_36_button_1_Template, 3, 5, "button", 36);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.currentFilter.igoSpatialSelector === "fixedExtent");
        }
    }
    function OgcFilterFormComponent_mat_form_field_39_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 33);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var value_r49 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", value_r49)("matTooltip", value_r49);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", value_r49, " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_39_button_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r51_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_mat_form_field_39_button_7_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r51_1); var ctx_r50 = i0__namespace.ɵɵnextContext(2); return ctx_r50.clearProperty(1); });
            i0__namespace.ɵɵelement(1, "mat-icon", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r48 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r48.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_39_Template(rf, ctx) {
        if (rf & 1) {
            var _r53_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 39);
            i0__namespace.ɵɵlistener("mouseenter", function OgcFilterFormComponent_mat_form_field_39_Template_mat_form_field_mouseenter_0_listener() { i0__namespace.ɵɵrestoreView(_r53_1); var ctx_r52 = i0__namespace.ɵɵnextContext(); return ctx_r52.inputClearable = "selectProperty1"; })("mouseleave", function OgcFilterFormComponent_mat_form_field_39_Template_mat_form_field_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r53_1); var ctx_r54 = i0__namespace.ɵɵnextContext(); return ctx_r54.inputClearable = undefined; });
            i0__namespace.ɵɵelementStart(1, "input", 40);
            i0__namespace.ɵɵlistener("input", function OgcFilterFormComponent_mat_form_field_39_Template_input_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r53_1); var ctx_r55 = i0__namespace.ɵɵnextContext(); return ctx_r55.updateValuesList($event.target.value, 1); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-autocomplete", 19, 41);
            i0__namespace.ɵɵlistener("optionSelected", function OgcFilterFormComponent_mat_form_field_39_Template_mat_autocomplete_optionSelected_3_listener($event) { i0__namespace.ɵɵrestoreView(_r53_1); var ctx_r56 = i0__namespace.ɵɵnextContext(); return ctx_r56.changeNumericProperty($event.option.value, 1); });
            i0__namespace.ɵɵtemplate(5, OgcFilterFormComponent_mat_form_field_39_mat_option_5_Template, 2, 3, "mat-option", 32);
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(7, OgcFilterFormComponent_mat_form_field_39_button_7_Template, 2, 1, "button", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r46 = i0__namespace.ɵɵreference(4);
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("floatLabel", ctx_r6.floatLabel);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(2, 7, "igo.geo.filter.placeholder"))("disabled", !ctx_r6.currentFilter.active)("matAutocomplete", _r46)("value", ctx_r6.detectProperty(1) === "lowerBoundary" ? ctx_r6.currentFilter.lowerBoundary : ctx_r6.currentFilter.begin);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(6, 9, ctx_r6.filteredValues$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r6.isClearable(1) && ctx_r6.inputClearable === "selectProperty1" && ctx_r6.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_40_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 33);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var value_r60 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", value_r60)("matTooltip", value_r60);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", value_r60, " ");
        }
    }
    function OgcFilterFormComponent_mat_form_field_40_button_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r62_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_mat_form_field_40_button_7_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r62_1); var ctx_r61 = i0__namespace.ɵɵnextContext(2); return ctx_r61.clearProperty(2); });
            i0__namespace.ɵɵelement(1, "mat-icon", 25);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r59 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r59.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_mat_form_field_40_Template(rf, ctx) {
        if (rf & 1) {
            var _r64_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 39);
            i0__namespace.ɵɵlistener("mouseenter", function OgcFilterFormComponent_mat_form_field_40_Template_mat_form_field_mouseenter_0_listener() { i0__namespace.ɵɵrestoreView(_r64_1); var ctx_r63 = i0__namespace.ɵɵnextContext(); return ctx_r63.inputClearable = "selectProperty2"; })("mouseleave", function OgcFilterFormComponent_mat_form_field_40_Template_mat_form_field_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r64_1); var ctx_r65 = i0__namespace.ɵɵnextContext(); return ctx_r65.inputClearable = undefined; });
            i0__namespace.ɵɵelementStart(1, "input", 40);
            i0__namespace.ɵɵlistener("input", function OgcFilterFormComponent_mat_form_field_40_Template_input_input_1_listener($event) { i0__namespace.ɵɵrestoreView(_r64_1); var ctx_r66 = i0__namespace.ɵɵnextContext(); return ctx_r66.updateValuesList($event.target.value, 2); });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-autocomplete", 19, 42);
            i0__namespace.ɵɵlistener("optionSelected", function OgcFilterFormComponent_mat_form_field_40_Template_mat_autocomplete_optionSelected_3_listener($event) { i0__namespace.ɵɵrestoreView(_r64_1); var ctx_r67 = i0__namespace.ɵɵnextContext(); return ctx_r67.changeNumericProperty($event.option.value, 2); });
            i0__namespace.ɵɵtemplate(5, OgcFilterFormComponent_mat_form_field_40_mat_option_5_Template, 2, 3, "mat-option", 32);
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(7, OgcFilterFormComponent_mat_form_field_40_button_7_Template, 2, 1, "button", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r57 = i0__namespace.ɵɵreference(4);
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("floatLabel", ctx_r7.floatLabel);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("placeholder", i0__namespace.ɵɵpipeBind1(2, 7, "igo.geo.filter.placeholder"))("disabled", !ctx_r7.currentFilter.active)("matAutocomplete", _r57)("value", ctx_r7.detectProperty(2) === "upperBoundary" ? ctx_r7.currentFilter.upperBoundary : ctx_r7.currentFilter.end);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(6, 9, ctx_r7.filteredValues$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.isClearable(2) && ctx_r7.inputClearable === "selectProperty2" && ctx_r7.currentFilter.active);
        }
    }
    function OgcFilterFormComponent_igo_ogc_filter_time_41_Template(rf, ctx) {
        if (rf & 1) {
            var _r69_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-ogc-filter-time", 43);
            i0__namespace.ɵɵlistener("datasourceChange", function OgcFilterFormComponent_igo_ogc_filter_time_41_Template_igo_ogc_filter_time_datasourceChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r69_1); var ctx_r68 = i0__namespace.ɵɵnextContext(); return ctx_r68.datasource = $event; })("currentFilterChange", function OgcFilterFormComponent_igo_ogc_filter_time_41_Template_igo_ogc_filter_time_currentFilterChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r69_1); var ctx_r70 = i0__namespace.ɵɵnextContext(); return ctx_r70.currentFilter = $event; })("changeProperty", function OgcFilterFormComponent_igo_ogc_filter_time_41_Template_igo_ogc_filter_time_changeProperty_0_listener($event) { i0__namespace.ɵɵrestoreView(_r69_1); var ctx_r71 = i0__namespace.ɵɵnextContext(); return ctx_r71.changeProperty($event.value, $event.pos); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r8 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("datasource", ctx_r8.datasource)("currentFilter", ctx_r8.currentFilter);
        }
    }
    var _c0$8 = function (a0, a1) { return { "logical": a0, "logicalHidden": a1 }; };
    var _c1$7 = function (a0, a1) { return { "operator": a0, "dualInput": a1 }; };
    var _c2$3 = function () { return ["expression", "pattern"]; };
    var _c3$1 = function () { return ["lowerBoundary", "begin"]; };
    var _c4 = function () { return ["upperBoundary", "end"]; };
    var OgcFilterFormComponent = /** @class */ (function () {
        function OgcFilterFormComponent(wktService) {
            this.wktService = wktService;
            this.ogcFilterOperator = exports.OgcFilterOperator;
            this.ogcFilterOperators$ = new rxjs.BehaviorSubject(undefined);
            this.value = '';
            this.selectedField$ = new rxjs.BehaviorSubject(undefined);
            this.fields$ = new rxjs.BehaviorSubject([]);
            this.color = 'primary';
            this.currentFilterIsSpatial$ = new rxjs.BehaviorSubject(false);
            this.defaultStepMillisecond = 6000;
            this._snrc = '';
            this.floatLabel = 'never';
            // TODO: Filter permitted operator based on wfscapabilities
            // Need to work on regex on XML capabilities because
            // comaparison operator's name varies between WFS servers...
            // Ex: IsNull vs PropertyIsNull vs IsNil ...
            this.allOgcFilterOperators = new OgcFilterWriter().operators;
            this.ogcFilterOperators$.next(this.allOgcFilterOperators);
            this.igoSpatialSelectors = [
                {
                    type: 'fixedExtent'
                },
                {
                    type: 'snrc'
                }
            ];
            // TODO: selectFeature & drawFeature
        }
        Object.defineProperty(OgcFilterFormComponent.prototype, "snrc", {
            get: function () {
                return this._snrc;
            },
            set: function (value) {
                var checkSNRC50k = /^\d{2}[a-l][0,1][0-9]$/gi;
                var checkSNRC250k = /^\d{2}[a-p]$/gi;
                var checkSNRC1m = /^\d{2}$/gi;
                if (checkSNRC1m.test(value) ||
                    checkSNRC250k.test(value) ||
                    checkSNRC50k.test(value)) {
                    this._snrc = value;
                    this.currentFilter.igoSNRC = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterFormComponent.prototype, "activeFilters", {
            get: function () {
                return this.datasource.options.ogcFilters.interfaceOgcFilters.filter(function (f) { return f.active === true; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterFormComponent.prototype, "allowedOperators", {
            get: function () {
                return new OgcFilterWriter().computeAllowedOperators(this.fields$.value, this.currentFilter.propertyName, this.datasource.options.ogcFilters.allowedOperatorsType);
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.datasource.options.sourceFields) {
                var sFields = this.datasource.options.sourceFields.filter(function (sf) { return sf.excludeFromOgcFilters === undefined || !sf.excludeFromOgcFilters; });
                sFields.map(function (sfs) {
                    if (sfs.values) {
                        sfs.values.sort();
                    }
                });
                this.fields$.next(sFields);
            }
            this.updateFieldsList();
            this.selectedField$.next(this.fields$.value.find(function (f) { return f.name === _this.currentFilter.propertyName; }));
            this.updateValuesList();
            this.selectedField$.subscribe(function (f) {
                _this.ogcFilterOperators$.next(_this.allowedOperators);
                if (Object.keys(_this.allowedOperators).indexOf(_this.currentFilter.operator) === -1) {
                    _this.currentFilter.operator = Object.keys(_this.allowedOperators)[0];
                    _this.currentFilter.operator = Object.keys(_this.allowedOperators)[0];
                }
                _this.updateValuesList();
            });
            this.currentFilterIsSpatial();
        };
        OgcFilterFormComponent.prototype.updateFieldsList = function (value) {
            this.filteredFields$ =
                value && value.length > 0 ? rxjs.of(this._filterFields(value)) : this.fields$;
            if (this.fields$.value.find(function (f) { return f.name === value; })) {
                this.changeField(value);
            }
        };
        OgcFilterFormComponent.prototype.updateValuesList = function (value, pos) {
            this.filteredValues$ =
                value && value.length > 0
                    ? rxjs.of(this._filterValues(value))
                    : this.selectedField$.value
                        ? rxjs.of(this.selectedField$.value.values)
                        : rxjs.of([]);
            if (value && value.length >= 1) {
                this.changeProperty(value, pos);
            }
        };
        OgcFilterFormComponent.prototype._filterFields = function (value) {
            var keywordRegex = new RegExp(value.normalize('NFD').replace(/[\u0300-\u036f]/g, ''), 'gi');
            return this.fields$.value.filter(function (val) { return keywordRegex.test(val.alias.normalize('NFD').replace(/[\u0300-\u036f]/g, '')); });
        };
        OgcFilterFormComponent.prototype._filterValues = function (value) {
            var keywordRegex = new RegExp(value
                .toString()
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, ''), 'gi');
            return this.selectedField$.value.values.filter(function (val) { return val && keywordRegex.test(val
                .toString()
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '')); });
        };
        OgcFilterFormComponent.prototype.clearSelectedField = function () {
            this.currentFilter.propertyName = '';
            this.selectedField$.next(undefined);
            this.clearProperty();
        };
        OgcFilterFormComponent.prototype.isClearable = function (pos) {
            var detectedProperty = this.detectProperty(pos);
            if (detectedProperty) {
                return this.currentFilter[detectedProperty];
            }
        };
        OgcFilterFormComponent.prototype.clearProperty = function (pos) {
            // this.autoCompleteInputValues.closePanel();
            var detectedProperty = this.detectProperty(pos);
            if (detectedProperty) {
                return (this.currentFilter[detectedProperty] = '');
            }
        };
        OgcFilterFormComponent.prototype.toggleFilterState = function (event) {
            var _this = this;
            this.datasource.options.ogcFilters.interfaceOgcFilters.find(function (f) { return f.filterid === _this.currentFilter.filterid; }).active = event.checked;
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.deleteFilter = function () {
            var _this = this;
            var ogcFilters = this.datasource.options.ogcFilters;
            ogcFilters.interfaceOgcFilters = ogcFilters.interfaceOgcFilters.filter(function (f) { return f.filterid !== _this.currentFilter.filterid; });
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.changeLogical = function (logical) {
            this.currentFilter.parentLogical = logical;
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.changeOperator = function (operator) {
            this.currentFilter.operator = operator;
            this.currentFilterIsSpatial();
            if (this.currentFilterIsSpatial$.value &&
                this.currentFilter.wkt_geometry.length === 0) {
                this.changeSpatialSelector(this.currentFilter.igoSpatialSelector);
            }
            else {
                this.refreshFilters();
            }
        };
        OgcFilterFormComponent.prototype.changeField = function (field) {
            var _this = this;
            this.currentFilter.propertyName = field;
            this.selectedField$.next(this.fields$.value.find(function (f) { return f.name === _this.currentFilter.propertyName; }));
            this.refreshFilters();
        };
        // Issue with mapserver 7.2 and Postgis layers. Fixed in 7.4
        // Due to this issue, the checkbox is hide.
        OgcFilterFormComponent.prototype.changeCaseSensitive = function (matchCase) {
            this.currentFilter.matchCase = matchCase.checked;
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.changeProperty = function (value, pos, refreshFilter) {
            var _this = this;
            if (refreshFilter === void 0) { refreshFilter = true; }
            var detectedProperty = this.detectProperty(pos);
            if (detectedProperty) {
                this.datasource.options.ogcFilters.interfaceOgcFilters.find(function (f) { return f.filterid === _this.currentFilter.filterid; })[detectedProperty] = value;
                if (refreshFilter) {
                    this.refreshFilters();
                }
            }
        };
        OgcFilterFormComponent.prototype.changeNumericProperty = function (value, pos) {
            this.changeProperty(parseFloat(value), pos);
        };
        OgcFilterFormComponent.prototype.changeSpatialSelector = function (value) {
            this.currentFilter.igoSpatialSelector = value;
            if (value === 'fixedExtent') {
                this.changeMapExtentGeometry(false);
            }
            this.currentFilterIsSpatial();
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.changeSNRC = function (value) {
            this.snrc = value;
            this.changeSNRCGeometry();
        };
        OgcFilterFormComponent.prototype.changeSNRCGeometry = function () {
            var _this = this;
            var interfaceOgcFilter = this.datasource.options.ogcFilters.interfaceOgcFilters.find(function (f) { return f.filterid === _this.currentFilter.filterid; });
            if (!interfaceOgcFilter) {
                return;
            }
            if (this.snrc && this.currentFilter.igoSpatialSelector === 'snrc') {
                this.currentFilter.wkt_geometry = this.wktService.snrcToWkt(this.snrc, this.map.projection).wktPoly;
            }
            this.refreshFilters();
        };
        OgcFilterFormComponent.prototype.changeMapExtentGeometry = function (refresh) {
            var _this = this;
            if (refresh === void 0) { refresh = true; }
            var interfaceOgcFilter = this.datasource.options.ogcFilters.interfaceOgcFilters.find(function (f) { return f.filterid === _this.currentFilter.filterid; });
            if (!interfaceOgcFilter) {
                return;
            }
            if (this.currentFilter.igoSpatialSelector === 'fixedExtent') {
                this.currentFilter.wkt_geometry = this.wktService.extentToWkt(this.map.projection, this.map.viewController.getExtent(), this.map.projection).wktPoly;
            }
            if (refresh) {
                this.refreshFilters();
            }
        };
        OgcFilterFormComponent.prototype.detectProperty = function (pos) {
            switch (this.currentFilter.operator) {
                case exports.OgcFilterOperator.PropertyIsNotEqualTo:
                case exports.OgcFilterOperator.PropertyIsEqualTo:
                case exports.OgcFilterOperator.PropertyIsGreaterThan:
                case exports.OgcFilterOperator.PropertyIsGreaterThanOrEqualTo:
                case exports.OgcFilterOperator.PropertyIsLessThan:
                case exports.OgcFilterOperator.PropertyIsLessThanOrEqualTo:
                    return 'expression';
                case exports.OgcFilterOperator.PropertyIsLike:
                    return 'pattern';
                case exports.OgcFilterOperator.PropertyIsBetween:
                    return pos && pos === 1
                        ? 'lowerBoundary'
                        : pos && pos === 2
                            ? 'upperBoundary'
                            : undefined;
                case exports.OgcFilterOperator.During:
                    return pos && pos === 1
                        ? 'begin'
                        : pos && pos === 2
                            ? 'end'
                            : undefined;
                default:
                    return;
            }
        };
        OgcFilterFormComponent.prototype.currentFilterIsSpatial = function () {
            var isSpatial = false;
            if (this.currentFilter) {
                isSpatial =
                    [
                        exports.OgcFilterOperator.Contains,
                        exports.OgcFilterOperator.Intersects,
                        exports.OgcFilterOperator.Within
                    ].indexOf(this.currentFilter.operator) !== -1;
            }
            this.currentFilterIsSpatial$.next(isSpatial);
        };
        OgcFilterFormComponent.prototype.isTemporalOperator = function () {
            return (this.currentFilter.operator.toLowerCase() ===
                this.ogcFilterOperator.During.toLowerCase());
        };
        return OgcFilterFormComponent;
    }());
    OgcFilterFormComponent.ɵfac = function OgcFilterFormComponent_Factory(t) { return new (t || OgcFilterFormComponent)(i0__namespace.ɵɵdirectiveInject(WktService)); };
    OgcFilterFormComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterFormComponent, selectors: [["igo-ogc-filter-form"]], inputs: { refreshFilters: "refreshFilters", datasource: "datasource", map: "map", currentFilter: "currentFilter", floatLabel: "floatLabel" }, decls: 42, vars: 76, consts: [["tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "checked", "click", "change"], [3, "ngClass"], ["tooltip-position", "above", "matTooltipShowDelay", "500", 3, "disabled", "value", "matTooltip", "selectionChange"], ["tooltip-position", "above", "matTooltipShowDelay", "500", 3, "value", "matTooltip"], ["class", "field", 3, "floatLabel", "mouseenter", "mouseleave", 4, "ngIf"], [3, "ngClass", "floatLabel"], ["tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "disabled", "value", "selectionChange"], ["tooltip-position", "above", "matTooltipShowDelay", "500", 3, "value", "matTooltip", 4, "ngFor", "ngForOf"], ["class", "spatialSelector", 4, "ngIf"], ["class", "singleInput", 3, "floatLabel", "mouseenter", "mouseleave", 4, "ngIf"], [1, "igo-layer-button-group"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click"], ["svgIcon", "delete"], ["class", "snrc", 3, "floatLabel", "mouseenter", "mouseleave", 4, "ngIf"], [4, "ngIf"], ["class", "dualInput", 3, "floatLabel", "mouseenter", "mouseleave", 4, "ngIf"], [3, "datasource", "currentFilter", "datasourceChange", "currentFilterChange", "changeProperty", 4, "ngIf"], [1, "field", 3, "floatLabel", "mouseenter", "mouseleave"], ["matInput", "", "tooltip-position", "above", "matTooltipShowDelay", "500", 3, "placeholder", "disabled", "matAutocomplete", "value", "matTooltip", "input"], [3, "optionSelected"], ["autoCompleteField", "matAutocomplete"], ["matTooltipShowDelay", "500", 3, "value", "id", "matTooltip", 4, "ngFor", "ngForOf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "disabled", "click", 4, "ngIf"], ["matTooltipShowDelay", "500", 3, "value", "id", "matTooltip"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "aria-label", "Clear", 3, "disabled", "click"], ["svgIcon", "close"], [1, "spatialSelector"], [3, "disabled", "value", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "singleInput", 3, "floatLabel", "mouseenter", "mouseleave"], ["autoCompleteValues", "matAutocomplete"], ["matTooltipShowDelay", "500", 3, "value", "matTooltip", 4, "ngFor", "ngForOf"], ["matTooltipShowDelay", "500", 3, "value", "matTooltip"], [1, "snrc", 3, "floatLabel", "mouseenter", "mouseleave"], ["matInput", "", "tooltip-position", "above", "matTooltipShowDelay", "500", 3, "placeholder", "value", "matTooltip", "input"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "disabled", "matTooltip", "click", 4, "ngIf"], ["mat-button", "", "matSuffix", "", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "disabled", "matTooltip", "click"], ["svgIcon", "arrow-expand-all"], [1, "dualInput", 3, "floatLabel", "mouseenter", "mouseleave"], ["matInput", "", "type", "number", 3, "placeholder", "disabled", "matAutocomplete", "value", "input"], ["autoDualValueOperator1", "matAutocomplete"], ["autoDualValueOperator2", "matAutocomplete"], [3, "datasource", "currentFilter", "datasourceChange", "currentFilterChange", "changeProperty"]], template: function OgcFilterFormComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-checkbox", 0);
                i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_Template_mat_checkbox_click_0_listener($event) { return $event.stopPropagation(); })("change", function OgcFilterFormComponent_Template_mat_checkbox_change_0_listener($event) { return ctx.toggleFilterState($event); });
                i0__namespace.ɵɵpipe(1, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(2, "mat-form-field", 1);
                i0__namespace.ɵɵelementStart(3, "mat-select", 2);
                i0__namespace.ɵɵlistener("selectionChange", function OgcFilterFormComponent_Template_mat_select_selectionChange_3_listener($event) { return ctx.changeLogical($event.value); });
                i0__namespace.ɵɵpipe(4, "translate");
                i0__namespace.ɵɵelementStart(5, "mat-option", 3);
                i0__namespace.ɵɵpipe(6, "translate");
                i0__namespace.ɵɵtext(7);
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "mat-option", 3);
                i0__namespace.ɵɵpipe(10, "translate");
                i0__namespace.ɵɵtext(11);
                i0__namespace.ɵɵpipe(12, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(13, OgcFilterFormComponent_mat_form_field_13_Template, 13, 22, "mat-form-field", 4);
                i0__namespace.ɵɵpipe(14, "async");
                i0__namespace.ɵɵpipe(15, "async");
                i0__namespace.ɵɵpipe(16, "async");
                i0__namespace.ɵɵpipe(17, "async");
                i0__namespace.ɵɵelementStart(18, "mat-form-field", 5);
                i0__namespace.ɵɵpipe(19, "async");
                i0__namespace.ɵɵpipe(20, "async");
                i0__namespace.ɵɵelementStart(21, "mat-select", 6);
                i0__namespace.ɵɵlistener("selectionChange", function OgcFilterFormComponent_Template_mat_select_selectionChange_21_listener($event) { return ctx.changeOperator($event.value); });
                i0__namespace.ɵɵpipe(22, "translate");
                i0__namespace.ɵɵpipe(23, "translate");
                i0__namespace.ɵɵtemplate(24, OgcFilterFormComponent_mat_option_24_Template, 4, 7, "mat-option", 7);
                i0__namespace.ɵɵpipe(25, "keyvalue");
                i0__namespace.ɵɵpipe(26, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(27, OgcFilterFormComponent_mat_form_field_27_Template, 3, 3, "mat-form-field", 8);
                i0__namespace.ɵɵpipe(28, "async");
                i0__namespace.ɵɵtemplate(29, OgcFilterFormComponent_mat_form_field_29_Template, 8, 12, "mat-form-field", 9);
                i0__namespace.ɵɵelementStart(30, "div", 10);
                i0__namespace.ɵɵelementStart(31, "button", 11);
                i0__namespace.ɵɵlistener("click", function OgcFilterFormComponent_Template_button_click_31_listener() { return ctx.deleteFilter(); });
                i0__namespace.ɵɵpipe(32, "translate");
                i0__namespace.ɵɵelement(33, "mat-icon", 12);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(34, OgcFilterFormComponent_mat_form_field_34_Template, 4, 7, "mat-form-field", 13);
                i0__namespace.ɵɵpipe(35, "async");
                i0__namespace.ɵɵtemplate(36, OgcFilterFormComponent_ng_container_36_Template, 2, 1, "ng-container", 14);
                i0__namespace.ɵɵpipe(37, "async");
                i0__namespace.ɵɵelement(38, "br");
                i0__namespace.ɵɵtemplate(39, OgcFilterFormComponent_mat_form_field_39_Template, 8, 11, "mat-form-field", 15);
                i0__namespace.ɵɵtemplate(40, OgcFilterFormComponent_mat_form_field_40_Template, 8, 11, "mat-form-field", 15);
                i0__namespace.ɵɵtemplate(41, OgcFilterFormComponent_igo_ogc_filter_time_41_Template, 1, 2, "igo-ogc-filter-time", 16);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 27, "igo.geo.filter.toggleFilterState"))("checked", ctx.currentFilter.active);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction2(67, _c0$8, ctx.activeFilters.indexOf(ctx.currentFilter) !== 0 && ctx.currentFilter.active === true, ctx.activeFilters.indexOf(ctx.currentFilter) === 0 || ctx.currentFilter.active !== true));
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("disabled", !ctx.currentFilter.active)("value", ctx.currentFilter.parentLogical)("matTooltip", ctx.currentFilter.parentLogical ? i0__namespace.ɵɵpipeBind1(4, 29, "igo.geo.operators.tooltip." + ctx.currentFilter.parentLogical) : "");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.ogcFilterOperator.And)("matTooltip", i0__namespace.ɵɵpipeBind1(6, 31, "igo.geo.operators.tooltip.And"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(8, 33, "igo.geo.operators.And"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.ogcFilterOperator.Or)("matTooltip", i0__namespace.ɵɵpipeBind1(10, 35, "igo.geo.operators.tooltip.Or"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(12, 37, "igo.geo.operators.Or"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(14, 39, ctx.currentFilterIsSpatial$) === false && i0__namespace.ɵɵpipeBind1(15, 41, ctx.fields$) && i0__namespace.ɵɵpipeBind1(16, 43, ctx.fields$).length > 0 && i0__namespace.ɵɵpipeBind1(17, 45, ctx.fields$)[0].name !== "");
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction2(70, _c1$7, i0__namespace.ɵɵpipeBind1(19, 47, ctx.currentFilterIsSpatial$) === false, i0__namespace.ɵɵpipeBind1(20, 49, ctx.currentFilterIsSpatial$)))("floatLabel", ctx.floatLabel);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("matTooltip", ctx.currentFilter.operator ? i0__namespace.ɵɵpipeBind1(22, 51, "igo.geo.operators.tooltip." + ctx.currentFilter.operator) : i0__namespace.ɵɵpipeBind1(23, 53, "igo.geo.filter.selectOperator"))("disabled", !ctx.currentFilter.active)("value", ctx.currentFilter.operator);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(25, 55, i0__namespace.ɵɵpipeBind1(26, 57, ctx.ogcFilterOperators$)));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(28, 59, ctx.currentFilterIsSpatial$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpureFunction0(73, _c2$3).indexOf(ctx.detectProperty()) !== -1);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(32, 61, "igo.geo.filter.removeFilter"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(35, 63, ctx.currentFilterIsSpatial$) && ctx.currentFilter.igoSpatialSelector === "snrc");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(37, 65, ctx.currentFilterIsSpatial$) && ctx.currentFilter.igoSpatialSelector === "fixedExtent");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !ctx.isTemporalOperator() && i0__namespace.ɵɵpureFunction0(74, _c3$1).indexOf(ctx.detectProperty(1)) !== -1);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.isTemporalOperator() && i0__namespace.ɵɵpureFunction0(75, _c4).indexOf(ctx.detectProperty(2)) !== -1);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isTemporalOperator());
            }
        }, styles: ["[_nghost-%COMP%]{width:100%;padding:5px 10px}  .mat-form-field .mat-icon svg{width:1em;height:1em;color:#d3d3d3}.mat-form-field[_ngcontent-%COMP%]{width:100%}.mat-select-arrow[_ngcontent-%COMP%]{visibility:hidden}.mat-slide-toggle[_ngcontent-%COMP%]{margin-top:10px}.logical[_ngcontent-%COMP%]{flex-flow:column nowrap;width:10%;max-width:45px;margin-left:5px}.logicalHidden[_ngcontent-%COMP%]{flex-flow:column nowrap;width:10%;visibility:hidden;max-width:45px;margin-left:5px}  .logical .mat-select-arrow{visibility:hidden}  .logicalHidden .mat-select-arrow{visibility:hidden}.field[_ngcontent-%COMP%]{width:20%;margin-left:5px}  .field .mat-select-arrow{visibility:hidden}.operator[_ngcontent-%COMP%]{width:12%;margin-left:10px;text-align:center}  .operator .mat-select-arrow{visibility:hidden}.spatialSelector[_ngcontent-%COMP%]{width:15%;margin-left:5px}  .spatialSelector .mat-select-arrow{visibility:hidden}.singleInput[_ngcontent-%COMP%]{width:30%;margin-left:5px}.snrc[_ngcontent-%COMP%]{width:20%;margin-left:5px}  .singleInput .mat-select-arrow{visibility:hidden}.dualInput[_ngcontent-%COMP%]{width:20%;margin-left:5px}  .dualInput .mat-select-arrow{visibility:hidden}.igo-layer-button-group[_ngcontent-%COMP%]{display:flex;float:right;padding-top:5px}.container[_ngcontent-%COMP%]{display:flex}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterFormComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter-form',
                        templateUrl: './ogc-filter-form.component.html',
                        styleUrls: ['./ogc-filter-form.component.scss']
                    }]
            }], function () { return [{ type: WktService }]; }, { refreshFilters: [{
                    type: i0.Input
                }], datasource: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], currentFilter: [{
                    type: i0.Input
                }], floatLabel: [{
                    type: i0.Input
                }] });
    })();

    function OgcFilterableFormComponent_igo_ogc_filter_selection_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-ogc-filter-selection", 2);
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("refreshFilters", ctx_r0.refreshFunc)("datasource", ctx_r0.datasource)("map", ctx_r0.map)("currentFilter", ctx_r0.currentFilter);
        }
    }
    function OgcFilterableFormComponent_1_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-ogc-filter-form", 4);
        }
        if (rf & 2) {
            var currentFilter_r3 = ctx.$implicit;
            var ctx_r2 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("currentFilter", currentFilter_r3)("refreshFilters", ctx_r2.refreshFunc)("datasource", ctx_r2.datasource)("map", ctx_r2.map);
        }
    }
    function OgcFilterableFormComponent_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, OgcFilterableFormComponent_1_ng_template_0_Template, 1, 4, "ng-template", 3);
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngForOf", ctx_r1.datasource.options.ogcFilters.interfaceOgcFilters);
        }
    }
    var OgcFilterableFormComponent = /** @class */ (function () {
        function OgcFilterableFormComponent() {
            this.color = 'primary';
        }
        Object.defineProperty(OgcFilterableFormComponent.prototype, "refreshFunc", {
            get: function () {
                return this.refreshFilters;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterableFormComponent.prototype, "advancedOgcFilters", {
            get: function () {
                if (this.datasource.options.ogcFilters) {
                    return this.datasource.options.ogcFilters.advancedOgcFilters;
                }
                return;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterableFormComponent.prototype, "currentFilter", {
            get: function () {
                return this.datasource.options.ogcFilters.interfaceOgcFilters ?
                    this.datasource.options.ogcFilters.interfaceOgcFilters[0] : undefined;
            },
            enumerable: false,
            configurable: true
        });
        return OgcFilterableFormComponent;
    }());
    OgcFilterableFormComponent.ɵfac = function OgcFilterableFormComponent_Factory(t) { return new (t || OgcFilterableFormComponent)(); };
    OgcFilterableFormComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterableFormComponent, selectors: [["igo-ogc-filterable-form"]], inputs: { datasource: "datasource", map: "map", refreshFilters: "refreshFilters" }, decls: 2, vars: 2, consts: [["igoListItem", "", 3, "refreshFilters", "datasource", "map", "currentFilter", 4, "ngIf"], [4, "ngIf"], ["igoListItem", "", 3, "refreshFilters", "datasource", "map", "currentFilter"], ["ngFor", "", 3, "ngForOf"], [3, "currentFilter", "refreshFilters", "datasource", "map"]], template: function OgcFilterableFormComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, OgcFilterableFormComponent_igo_ogc_filter_selection_0_Template, 1, 4, "igo-ogc-filter-selection", 0);
                i0__namespace.ɵɵtemplate(1, OgcFilterableFormComponent_1_Template, 1, 1, undefined, 1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", !ctx.advancedOgcFilters);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.advancedOgcFilters && ctx.datasource.options.ogcFilters.editable);
            }
        }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterableFormComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filterable-form',
                        templateUrl: './ogc-filterable-form.component.html'
                    }]
            }], function () { return []; }, { datasource: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], refreshFilters: [{
                    type: i0.Input
                }] });
    })();

    function OgcFilterableItemComponent_mat_icon_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r8_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-icon", 8);
            i0__namespace.ɵɵlistener("click", function OgcFilterableItemComponent_mat_icon_1_Template_mat_icon_click_0_listener() { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r7 = i0__namespace.ɵɵnextContext(); return ctx_r7.toggleFiltersCollapsed(); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            var _r4 = i0__namespace.ɵɵreference(6);
            i0__namespace.ɵɵproperty("target", _r4)("collapsed", ctx_r0.filtersCollapsed);
        }
    }
    var _c0$7 = function (a0) { return { "cursor": a0 }; };
    function OgcFilterableItemComponent_h4_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r10_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "h4", 9);
            i0__namespace.ɵɵlistener("click", function OgcFilterableItemComponent_h4_2_Template_h4_click_0_listener() { i0__namespace.ɵɵrestoreView(_r10_1); var ctx_r9 = i0__namespace.ɵɵnextContext(); return ctx_r9.toggleLegendOnClick(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", i0__namespace.ɵɵpureFunction1(3, _c0$7, ctx_r1.filtersCollapsed ? "default" : "pointer"))("matTooltip", ctx_r1.layer.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r1.layer.title);
        }
    }
    function OgcFilterableItemComponent_button_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r12_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵlistener("click", function OgcFilterableItemComponent_button_3_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r12_1); var ctx_r11 = i0__namespace.ɵɵnextContext(); return ctx_r11.addFilterToSequence(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 11);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("disabled", ctx_r2.addFilterDisabled())("matTooltip", i0__namespace.ɵɵpipeBind1(1, 3, "igo.geo.filter.addFilter"))("color", ctx_r2.color);
        }
    }
    var _c1$6 = function (a0) { return { disabled: a0 }; };
    function OgcFilterableItemComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r14_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 12);
            i0__namespace.ɵɵlistener("click", function OgcFilterableItemComponent_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r14_1); var ctx_r13 = i0__namespace.ɵɵnextContext(); return ctx_r13.layer.visible = !ctx_r13.layer.visible; });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 13);
            i0__namespace.ɵɵpipe(4, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("color", ctx_r3.layer.visible ? "primary" : "default")("matTooltip", ctx_r3.layer.visible ? i0__namespace.ɵɵpipeBind1(1, 4, "igo.geo.layer.hideLayer") : i0__namespace.ɵɵpipeBind1(2, 6, "igo.geo.layer.showLayer"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(10, _c1$6, i0__namespace.ɵɵpipeBind1(4, 8, ctx_r3.inResolutionRange$) === false))("svgIcon", ctx_r3.layer.visible ? "eye" : "eye-off");
        }
    }
    function OgcFilterableItemComponent_div_7_igo_layer_legend_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-layer-legend", 17);
        }
        if (rf & 2) {
            var ctx_r16 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("layer", ctx_r16.layer);
        }
    }
    function OgcFilterableItemComponent_div_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 14, 15);
            i0__namespace.ɵɵtemplate(2, OgcFilterableItemComponent_div_7_igo_layer_legend_2_Template, 1, 1, "igo-layer-legend", 16);
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(3, 1, ctx_r5.showLegend$));
        }
    }
    function OgcFilterableItemComponent_section_9_Template(rf, ctx) {
        if (rf & 1) {
            var _r18_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "section", 18);
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵelementStart(2, "mat-checkbox", 19);
            i0__namespace.ɵɵlistener("change", function OgcFilterableItemComponent_section_9_Template_mat_checkbox_change_2_listener($event) { i0__namespace.ɵɵrestoreView(_r18_1); var ctx_r17 = i0__namespace.ɵɵnextContext(); return ctx_r17.changeOgcFilterType($event); })("ngModelChange", function OgcFilterableItemComponent_section_9_Template_mat_checkbox_ngModelChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r18_1); var ctx_r19 = i0__namespace.ɵɵnextContext(); return ctx_r19.datasource.options.ogcFilters.advancedOgcFilters = $event; });
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngModel", ctx_r6.datasource.options.ogcFilters.advancedOgcFilters);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(4, 2, "igo.geo.filter.advancedOgcFilters"), " ");
        }
    }
    var OgcFilterableItemComponent = /** @class */ (function () {
        function OgcFilterableItemComponent(ogcFilterService) {
            this.ogcFilterService = ogcFilterService;
            this.color = 'primary';
            this.defaultLogicalParent = exports.OgcFilterOperator.And;
            this.hasActiveSpatialFilter = false;
            this.filtersAreEditable = true;
            this.filtersCollapsed = true;
            this.hasSelector = false;
            this.showLegend$ = new rxjs.BehaviorSubject(false);
            this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            this.header = true;
            this.ogcFilterWriter = new OgcFilterWriter();
        }
        Object.defineProperty(OgcFilterableItemComponent.prototype, "refreshFunc", {
            get: function () {
                return this.refreshFilters.bind(this);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterableItemComponent.prototype, "datasource", {
            get: function () {
                return this.layer.dataSource;
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterableItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            var ogcFilters = this.datasource.options.ogcFilters;
            if ((ogcFilters.pushButtons && ogcFilters.pushButtons.bundles.length > 0) ||
                (ogcFilters.checkboxes && ogcFilters.checkboxes.bundles.length > 0) ||
                (ogcFilters.radioButtons && ogcFilters.radioButtons.bundles.length > 0) ||
                (ogcFilters.select && ogcFilters.select.bundles.length > 0)) {
                if (ogcFilters.advancedOgcFilters === undefined) {
                    ogcFilters.advancedOgcFilters = false;
                }
                this.hasSelector = true;
            }
            switch (this.datasource.options.type) {
                case 'wms':
                    this.ogcFilterService.setOgcWMSFiltersOptions(this.datasource);
                    break;
                case 'wfs':
                    this.ogcFilterService.setOgcWFSFiltersOptions(this.datasource);
                    break;
                default:
                    break;
            }
            if (ogcFilters) {
                if (ogcFilters.interfaceOgcFilters) {
                    this.lastRunOgcFilter = JSON.parse(JSON.stringify(ogcFilters.interfaceOgcFilters));
                    if (ogcFilters.interfaceOgcFilters.filter(function (f) { return f.wkt_geometry; }).length >= 1) {
                        this.hasActiveSpatialFilter = true;
                    }
                }
                this.filtersAreEditable = ogcFilters.editable
                    ? ogcFilters.editable
                    : false;
            }
            var resolution$ = this.layer.map.viewController.resolution$;
            this.resolution$$ = resolution$.subscribe(function () {
                _this.inResolutionRange$.next(_this.layer.isInResolutionsRange);
            });
        };
        OgcFilterableItemComponent.prototype.ngOnDestroy = function () {
            this.resolution$$.unsubscribe();
        };
        OgcFilterableItemComponent.prototype.addFilterToSequence = function () {
            this.filtersCollapsed = false;
            var interfaceOgcFilters = this.datasource
                .options.ogcFilters.interfaceOgcFilters;
            var arr = interfaceOgcFilters || [];
            var lastLevel = arr.length === 0 ? 0 : arr[arr.length - 1].level;
            var firstFieldName = '';
            var includedFields = this.datasource.options.sourceFields.filter(function (f) { return !f.excludeFromOgcFilters; });
            if (includedFields.length > 0) {
                firstFieldName =
                    includedFields[0].name === undefined ? '' : includedFields[0].name;
            }
            var fieldNameGeometry;
            var datasourceOptions = this.datasource
                .options;
            if (datasourceOptions.fieldNameGeometry) {
                fieldNameGeometry = datasourceOptions.fieldNameGeometry;
            }
            else if (this.datasource.options.paramsWFS &&
                this.datasource.options.paramsWFS.fieldNameGeometry) {
                fieldNameGeometry = this.datasource.options.paramsWFS
                    .fieldNameGeometry;
            }
            var allowedOperators = this.ogcFilterWriter.computeAllowedOperators(this.datasource.options.sourceFields, firstFieldName, this.datasource.options.ogcFilters.allowedOperatorsType);
            var firstOperatorName = Object.keys(allowedOperators)[0];
            arr.push(this.ogcFilterWriter.addInterfaceFilter({
                propertyName: firstFieldName,
                operator: firstOperatorName,
                active: true,
                igoSpatialSelector: 'fixedExtent',
                srsName: this.map.projection,
            }, fieldNameGeometry, lastLevel, this.defaultLogicalParent));
            this.datasource.options.ogcFilters.interfaceOgcFilters = arr;
        };
        OgcFilterableItemComponent.prototype.refreshFilters = function (force) {
            if (force === true) {
                this.lastRunOgcFilter = undefined;
            }
            var ogcFilters = this.datasource.options.ogcFilters;
            var activeFilters = ogcFilters.interfaceOgcFilters ?
                ogcFilters.interfaceOgcFilters.filter(function (f) { return f.active === true; }) : [];
            if (activeFilters.length === 0) {
                ogcFilters.filters = undefined;
                ogcFilters.filtered = false;
            }
            if (activeFilters.length > 1) {
                activeFilters[0].parentLogical = activeFilters[1].parentLogical;
            }
            if (activeFilters.filter(function (af) { return ['Contains', 'Intersects', 'Within'].indexOf(af.operator) !== -1; }).length === 0) {
                this.hasActiveSpatialFilter = false;
            }
            else {
                this.hasActiveSpatialFilter = true;
            }
            if (!(JSON.stringify(this.lastRunOgcFilter) === JSON.stringify(activeFilters))) {
                if (this.layer.dataSource.options.type === 'wfs') {
                    var ogcDataSource = this.layer.dataSource;
                    var ogcLayer = ogcDataSource.options.ogcFilters;
                    ogcLayer.filters = this.ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(activeFilters);
                    this.layer.dataSource.ol.refresh();
                }
                else if (this.layer.dataSource.options.type === 'wms' &&
                    ogcFilters.enabled) {
                    var rebuildFilter = '';
                    if (activeFilters.length >= 1) {
                        var ogcDataSource = this.layer.dataSource;
                        var ogcLayer = ogcDataSource.options.ogcFilters;
                        ogcLayer.filters = this.ogcFilterWriter.rebuiltIgoOgcFilterObjectFromSequence(activeFilters);
                        rebuildFilter = this.ogcFilterWriter.buildFilter(ogcLayer.filters, undefined, undefined, this.layer.dataSource.options.fieldNameGeometry, ogcDataSource.options);
                    }
                    this.ogcFilterService.filterByOgc(this.datasource, rebuildFilter);
                    this.datasource.options.ogcFilters.filtered =
                        activeFilters.length === 0 ? false : true;
                }
                this.lastRunOgcFilter = JSON.parse(JSON.stringify(activeFilters));
            }
            else {
                // identical filter. Nothing triggered
            }
            this.layer.dataSource.setOgcFilters(ogcFilters, true);
        };
        OgcFilterableItemComponent.prototype.setVisible = function () {
            this.layer.visible = true;
        };
        OgcFilterableItemComponent.prototype.isAdvancedOgcFilters = function () {
            return this.datasource.options.ogcFilters.advancedOgcFilters;
        };
        OgcFilterableItemComponent.prototype.addFilterDisabled = function () {
            return (!this.datasource.options.sourceFields ||
                this.datasource.options.sourceFields.length === 0);
        };
        OgcFilterableItemComponent.prototype.changeOgcFiltersAdvancedOgcFilters = function (value) {
            this.datasource.options.ogcFilters.advancedOgcFilters = value;
        };
        OgcFilterableItemComponent.prototype.changeOgcFilterType = function (isAdvancedOgcFilters) {
            this.changeOgcFiltersAdvancedOgcFilters(isAdvancedOgcFilters.checked);
            if (isAdvancedOgcFilters.checked) {
                this.refreshFilters(true);
            }
        };
        OgcFilterableItemComponent.prototype.toggleLegend = function (collapsed) {
            this.layer.legendCollapsed = collapsed;
            this.showLegend$.next(!collapsed);
        };
        OgcFilterableItemComponent.prototype.toggleLegendOnClick = function () {
            if (!this.filtersCollapsed) {
                this.toggleLegend(this.showLegend$.value);
            }
        };
        OgcFilterableItemComponent.prototype.toggleFiltersCollapsed = function () {
            this.filtersCollapsed = !this.filtersCollapsed;
        };
        return OgcFilterableItemComponent;
    }());
    OgcFilterableItemComponent.ɵfac = function OgcFilterableItemComponent_Factory(t) { return new (t || OgcFilterableItemComponent)(i0__namespace.ɵɵdirectiveInject(OGCFilterService)); };
    OgcFilterableItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterableItemComponent, selectors: [["igo-ogc-filterable-item"]], inputs: { layer: "layer", map: "map", header: "header" }, decls: 10, vars: 9, consts: [["class", "igo-chevron", "mat-list-avatar", "", "igoCollapse", "", "svgIcon", "chevron-up", 3, "target", "collapsed", "click", 4, "ngIf"], ["matLine", "", "matTooltipShowDelay", "500", 3, "ngStyle", "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "disabled", "matTooltip", "color", "click", 4, "ngIf"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click", 4, "ngIf"], ["ogcFilters", ""], ["class", "igo-layer-legend-container", 4, "ngIf"], [3, "datasource", "map", "refreshFilters"], ["class", "mat-typography advancedOgcFilters", 4, "ngIf"], ["mat-list-avatar", "", "igoCollapse", "", "svgIcon", "chevron-up", 1, "igo-chevron", 3, "target", "collapsed", "click"], ["matLine", "", "matTooltipShowDelay", "500", 3, "ngStyle", "matTooltip", "click"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "disabled", "matTooltip", "color", "click"], ["svgIcon", "plus"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "color", "matTooltip", "click"], [3, "ngClass", "svgIcon"], [1, "igo-layer-legend-container"], ["legend", ""], [3, "layer", 4, "ngIf"], [3, "layer"], [1, "mat-typography", "advancedOgcFilters"], ["labelPosition", "before", 3, "ngModel", "change", "ngModelChange"]], template: function OgcFilterableItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵtemplate(1, OgcFilterableItemComponent_mat_icon_1_Template, 1, 2, "mat-icon", 0);
                i0__namespace.ɵɵtemplate(2, OgcFilterableItemComponent_h4_2_Template, 2, 5, "h4", 1);
                i0__namespace.ɵɵtemplate(3, OgcFilterableItemComponent_button_3_Template, 3, 5, "button", 2);
                i0__namespace.ɵɵtemplate(4, OgcFilterableItemComponent_button_4_Template, 5, 12, "button", 3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(5, "div", null, 4);
                i0__namespace.ɵɵtemplate(7, OgcFilterableItemComponent_div_7_Template, 4, 3, "div", 5);
                i0__namespace.ɵɵelement(8, "igo-ogc-filterable-form", 6);
                i0__namespace.ɵɵtemplate(9, OgcFilterableItemComponent_section_9_Template, 5, 4, "section", 7);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.header);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.header);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isAdvancedOgcFilters() && ctx.filtersAreEditable);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.header);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.header);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("datasource", ctx.datasource)("map", ctx.map)("refreshFilters", ctx.refreshFunc);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.hasSelector && ctx.filtersAreEditable);
            }
        }, styles: ["[_nghost-%COMP%]{overflow:hidden}.advancedOgcFilters[_ngcontent-%COMP%]{text-align:center;width:100%;display:inline-block}.mat-list-item[_ngcontent-%COMP%]{height:auto}.igo-layer-legend-container[_ngcontent-%COMP%]{padding-left:1.125em;width:calc(100% - 18px)}mat-icon.disabled[_ngcontent-%COMP%]{color:#00000061}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterableItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filterable-item',
                        templateUrl: './ogc-filterable-item.component.html',
                        styleUrls: ['./ogc-filterable-item.component.scss']
                    }]
            }], function () { return [{ type: OGCFilterService }]; }, { layer: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }] });
    })();

    function OgcFilterableListComponent_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-ogc-filterable-item", 2);
        }
        if (rf & 2) {
            var layer_r1 = ctx.$implicit;
            i0__namespace.ɵɵproperty("header", true)("layer", layer_r1)("map", layer_r1.map);
        }
    }
    var OgcFilterableListComponent = /** @class */ (function () {
        function OgcFilterableListComponent() {
        }
        return OgcFilterableListComponent;
    }());
    OgcFilterableListComponent.ɵfac = function OgcFilterableListComponent_Factory(t) { return new (t || OgcFilterableListComponent)(); };
    OgcFilterableListComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterableListComponent, selectors: [["igo-ogc-filterable-list"]], inputs: { layers: "layers", map: "map" }, decls: 3, vars: 6, consts: [[3, "navigation", "selection"], ["ngFor", "", 3, "ngForOf"], ["igoListItem", "", 3, "header", "layer", "map"]], template: function OgcFilterableListComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-list", 0);
                i0__namespace.ɵɵtemplate(1, OgcFilterableListComponent_ng_template_1_Template, 1, 3, "ng-template", 1);
                i0__namespace.ɵɵpipe(2, "filterableDataSource");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("navigation", false)("selection", false);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind2(2, 3, ctx.layers, "ogc"));
            }
        }, encapsulation: 2, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterableListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filterable-list',
                        templateUrl: './ogc-filterable-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layers: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }] });
    })();

    var OgcFilterableListBindingDirective = /** @class */ (function () {
        function OgcFilterableListBindingDirective(component, mapService) {
            this.mapService = mapService;
            this.component = component;
        }
        OgcFilterableListBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // Override input layers
            this.component.layers = [];
            this.layers$$ = this.mapService.getMap().layers$.subscribe(function (layers) {
                _this.component.layers = layers.filter(function (layer) { return layer.showInLayerList; });
            });
        };
        OgcFilterableListBindingDirective.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
        };
        return OgcFilterableListBindingDirective;
    }());
    OgcFilterableListBindingDirective.ɵfac = function OgcFilterableListBindingDirective_Factory(t) { return new (t || OgcFilterableListBindingDirective)(i0__namespace.ɵɵdirectiveInject(OgcFilterableListComponent, 2), i0__namespace.ɵɵdirectiveInject(MapService)); };
    OgcFilterableListBindingDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: OgcFilterableListBindingDirective, selectors: [["", "igoOgcFilterableListBinding", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterableListBindingDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoOgcFilterableListBinding]'
                    }]
            }], function () {
            return [{ type: OgcFilterableListComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: MapService }];
        }, null);
    })();

    function OgcFilterButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 2);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 3);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 3, "igo.geo.filter.filterBy"))("color", ctx_r0.color);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matBadge", ctx_r0.badge);
        }
    }
    function OgcFilterButtonComponent_div_1_igo_ogc_filterable_item_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "igo-ogc-filterable-item", 7);
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("header", false)("map", ctx_r3.layer.map)("layer", ctx_r3.layer);
        }
    }
    function OgcFilterButtonComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 4, 5);
            i0__namespace.ɵɵtemplate(2, OgcFilterButtonComponent_div_1_igo_ogc_filterable_item_2_Template, 1, 3, "igo-ogc-filterable-item", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.ogcFilterCollapse && ctx_r1.options.ogcFilters.enabled);
        }
    }
    var OgcFilterButtonComponent = /** @class */ (function () {
        function OgcFilterButtonComponent() {
            this.color = 'primary';
            this.ogcFilterCollapse = false;
        }
        Object.defineProperty(OgcFilterButtonComponent.prototype, "badge", {
            get: function () {
                var filter = this.options.ogcFilters;
                var cnt = 0;
                if (filter && !filter.advancedOgcFilters) {
                    if (filter.pushButtons) {
                        var pushButtons = filter.pushButtons;
                        var currentPushButtonGroup = pushButtons.groups.find(function (gr) { return gr.enabled; });
                        var cntPushButtons_1 = 0;
                        if (currentPushButtonGroup) {
                            currentPushButtonGroup.computedSelectors.map(function (cb) { return cntPushButtons_1 += cb.selectors.filter(function (button) { return button.enabled; }).length; });
                        }
                        cnt += cntPushButtons_1;
                    }
                    if (filter.checkboxes) {
                        var checkboxes = filter.checkboxes;
                        var currentCheckboxGroup = checkboxes.groups.find(function (gr) { return gr.enabled; });
                        var cntCheckboxes_1 = 0;
                        if (currentCheckboxGroup) {
                            currentCheckboxGroup.computedSelectors.map(function (cb) { return cntCheckboxes_1 += cb.selectors.filter(function (checkbox) { return checkbox.enabled; }).length; });
                        }
                        cnt += cntCheckboxes_1;
                    }
                    if (filter.radioButtons) {
                        var radioButtons = filter.radioButtons;
                        var currentRadioButtonsGroup = radioButtons.groups.find(function (gr) { return gr.enabled; });
                        var cntRadioButtons_1 = 0;
                        if (currentRadioButtonsGroup) {
                            currentRadioButtonsGroup.computedSelectors.map(function (cb) { return cntRadioButtons_1 += cb.selectors.filter(function (radio) { return radio.enabled; }).length; });
                        }
                        cnt += cntRadioButtons_1;
                    }
                    if (filter.select) {
                        var select = filter.select;
                        var currentSelectGroup = select.groups.find(function (gr) { return gr.enabled; });
                        var cntSelect_1 = 0;
                        if (currentSelectGroup) {
                            currentSelectGroup.computedSelectors.map(function (cb) { return cntSelect_1 += cb.selectors.filter(function (multi) { return multi.enabled; }).length; });
                        }
                        cnt += cntSelect_1;
                    }
                }
                else if (filter && filter.filters && !filter.filters.filters) {
                    return 1;
                }
                else if (filter && filter.filters && filter.filters.filters) {
                    return filter.filters.filters.length;
                }
                if (filter.filters && filter.filters.operator === 'During' && filter.filters.active &&
                    filter.interfaceOgcFilters && filter.interfaceOgcFilters[0].active) {
                    var filterActiveValue = filter.interfaceOgcFilters[0];
                    if (filter.filters.calendarModeYear) {
                        // year mode check just year
                        if ((filterActiveValue.begin.substring(0, 4) !== this.options.minDate.substring(0, 4)) ||
                            (filterActiveValue.end.substring(0, 4) !== this.options.maxDate.substring(0, 4))) {
                            cnt += 1;
                        }
                    }
                    else if ((filterActiveValue.begin !== this.options.minDate) || (filterActiveValue.end !== this.options.maxDate)) {
                        cnt += 1;
                    }
                }
                return cnt > 0 ? cnt : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterButtonComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
                if (value) {
                    this.options = this.layer.dataSource.options;
                }
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterButtonComponent.prototype.ngOnInit = function () {
            this.options = this.layer.dataSource.options;
        };
        return OgcFilterButtonComponent;
    }());
    OgcFilterButtonComponent.ɵfac = function OgcFilterButtonComponent_Factory(t) { return new (t || OgcFilterButtonComponent)(); };
    OgcFilterButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterButtonComponent, selectors: [["igo-ogc-filter-button"]], inputs: { layer: "layer", map: "map", color: "color", header: "header" }, decls: 2, vars: 2, consts: [["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", 4, "ngIf"], ["class", "igo-layer-actions-container", 4, "ngIf"], ["mat-icon-button", "", "collapsibleButton", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color"], ["matBadgeColor", "warn", "matBadgeSize", "medium", "svgIcon", "filter", 3, "matBadge"], [1, "igo-layer-actions-container"], ["ogcFilter", ""], ["igoListItem", "", 3, "header", "map", "layer", 4, "ngIf"], ["igoListItem", "", 3, "header", "map", "layer"]], template: function OgcFilterButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, OgcFilterButtonComponent_button_0_Template, 3, 5, "button", 0);
                i0__namespace.ɵɵtemplate(1, OgcFilterButtonComponent_div_1_Template, 3, 1, "div", 1);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.header && ctx.options.ogcFilters && ctx.options.ogcFilters.enabled && (ctx.options.ogcFilters.pushButtons || ctx.options.ogcFilters.checkboxes || ctx.options.ogcFilters.radioButtons || ctx.options.ogcFilters.select || ctx.options.ogcFilters.editable));
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.options.ogcFilters && ctx.options.ogcFilters.enabled && (ctx.options.ogcFilters.pushButtons || ctx.options.ogcFilters.checkboxes || ctx.options.ogcFilters.radioButtons || ctx.options.ogcFilters.select || ctx.options.ogcFilters.editable));
            }
        }, styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter-button',
                        templateUrl: './ogc-filter-button.component.html',
                        styleUrls: ['./ogc-filter-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layer: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }] });
    })();

    var moment$2 = moment___namespace;
    var OGCFilterTimeService = /** @class */ (function () {
        function OGCFilterTimeService() {
            this.defaultStepMillisecond = 60000;
        }
        OGCFilterTimeService.prototype.step = function (datasource, currentFilter) {
            return datasource.options.stepDate
                ? datasource.options.stepDate
                : currentFilter.step;
        };
        OGCFilterTimeService.prototype.stepMillisecond = function (dataSource, currentFilter) {
            var step = moment$2.duration(this.step(dataSource, currentFilter)).asMilliseconds();
            return step === 0 ? this.defaultStepMillisecond : step;
        };
        OGCFilterTimeService.prototype.stepIsYearDuration = function (step) {
            var year = moment$2.duration(step);
            return (year.years() !== 0 &&
                year.months() === 0 &&
                year.weeks() === 0 &&
                year.days() === 0 &&
                year.hours() === 0 &&
                year.minutes() === 0);
        };
        OGCFilterTimeService.prototype.stepIsMonthDuration = function (step) {
            var month = moment$2.duration(step);
            return (month.months() !== 0 &&
                month.weeks() === 0 &&
                month.days() === 0 &&
                month.hours() === 0 &&
                month.minutes() === 0);
        };
        OGCFilterTimeService.prototype.stepIsWeekDuration = function (step) {
            var week = moment$2.duration(step);
            return (week.weeks() !== 0 &&
                week.days() === 7 &&
                week.hours() === 0 &&
                week.minutes() === 0);
        };
        OGCFilterTimeService.prototype.stepIsDayDuration = function (step) {
            var day = moment$2.duration(step);
            return day.days() !== 0 && day.hours() === 0 && day.minutes() === 0;
        };
        OGCFilterTimeService.prototype.stepIsHourDuration = function (step) {
            var hour = moment$2.duration(step);
            return hour.hours() !== 0 && hour.minutes() === 0;
        };
        OGCFilterTimeService.prototype.stepIsMinuteDuration = function (step) {
            var minute = moment$2.duration(step);
            return minute.minutes() !== 0;
        };
        OGCFilterTimeService.prototype.dateToNumber = function (date) {
            var newDate = new Date();
            if (date) {
                newDate = new Date(date);
            }
            return newDate.getTime();
        };
        OGCFilterTimeService.prototype.addStep = function (value, stepMillisecond) {
            return moment$2(value).add(stepMillisecond, 'milliseconds').toDate();
        };
        OGCFilterTimeService.prototype.subtractStep = function (value, stepMillisecond) {
            return moment$2(value).subtract(stepMillisecond, 'milliseconds').toDate();
        };
        return OGCFilterTimeService;
    }());
    OGCFilterTimeService.ɵfac = function OGCFilterTimeService_Factory(t) { return new (t || OGCFilterTimeService)(); };
    OGCFilterTimeService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: OGCFilterTimeService, factory: OGCFilterTimeService.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OGCFilterTimeService, [{
                type: i0.Injectable
            }], function () { return []; }, null);
    })();

    var _c0$6 = ["selection"];
    function OgcFilterSelectionComponent_div_1_div_1_div_2_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 12);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var selectorGroup_r10 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", selectorGroup_r10);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", selectorGroup_r10.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r12_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 10);
            i0__namespace.ɵɵlistener("valueChange", function OgcFilterSelectionComponent_div_1_div_1_div_2_Template_mat_select_valueChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r12_1); var ctx_r11 = i0__namespace.ɵɵnextContext(3); return ctx_r11.currentPushButtonsGroup = $event; });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_1_div_2_mat_option_4_Template, 2, 2, "mat-option", 11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r7 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.layer.legend.selectStyle"))("value", ctx_r7.currentPushButtonsGroup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r7.getPushButtonsGroups());
        }
    }
    function OgcFilterSelectionComponent_div_1_div_1_ng_container_3_mat_button_toggle_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r17_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-button-toggle", 15);
            i0__namespace.ɵɵlistener("change", function OgcFilterSelectionComponent_div_1_div_1_ng_container_3_mat_button_toggle_4_Template_mat_button_toggle_change_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r17_1); var ogcPushButton_r15 = restoredCtx.$implicit; var selector_r2 = i0__namespace.ɵɵnextContext(3).$implicit; var ctx_r16 = i0__namespace.ɵɵnextContext(); return ctx_r16.onSelectionChange(ogcPushButton_r15, selector_r2.selectorType); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ogcPushButton_r15 = ctx.$implicit;
            var ctx_r14 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r14.getToolTip(ogcPushButton_r15))("ngStyle", ctx_r14.getButtonColor(ogcPushButton_r15))("checked", ogcPushButton_r15.enabled)("value", ogcPushButton_r15);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ogcPushButton_r15.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_1_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-button-toggle-group", 13);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_1_ng_container_3_mat_button_toggle_4_Template, 2, 5, "mat-button-toggle", 14);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var bundle_r13 = ctx.$implicit;
            var ctx_r8 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(bundle_r13.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("vertical", ctx_r8.bundleIsVertical(bundle_r13));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", bundle_r13.selectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 7);
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_1_div_2_Template, 5, 5, "div", 8);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_1_div_1_ng_container_3_Template, 5, 3, "ng-container", 1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.getPushButtonsGroups().length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r3.currentPushButtonsGroup.computedSelectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_div_2_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 12);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var selectorGroup_r22 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", selectorGroup_r22);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", selectorGroup_r22.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r24_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 17);
            i0__namespace.ɵɵlistener("valueChange", function OgcFilterSelectionComponent_div_1_div_2_div_2_Template_mat_select_valueChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r24_1); var ctx_r23 = i0__namespace.ɵɵnextContext(3); return ctx_r23.currentCheckboxesGroup = $event; });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_2_div_2_mat_option_4_Template, 2, 2, "mat-option", 11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r19 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.layer.legend.selectStyle"))("value", ctx_r19.currentCheckboxesGroup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r19.getCheckboxesGroups());
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_mat_checkbox_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r30_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-checkbox", 20);
            i0__namespace.ɵɵlistener("change", function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_mat_checkbox_4_Template_mat_checkbox_change_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r30_1); var ogcCheckbox_r28 = restoredCtx.$implicit; var selector_r2 = i0__namespace.ɵɵnextContext(3).$implicit; var ctx_r29 = i0__namespace.ɵɵnextContext(); return ctx_r29.onSelectionChange(ogcCheckbox_r28, selector_r2.selectorType); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ogcCheckbox_r28 = ctx.$implicit;
            var ctx_r26 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r26.getToolTip(ogcCheckbox_r28))("checked", ogcCheckbox_r28.enabled)("value", ogcCheckbox_r28);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ogcCheckbox_r28.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r35_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "u", 23);
            i0__namespace.ɵɵlistener("click", function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_1_Template_u_click_0_listener() { i0__namespace.ɵɵrestoreView(_r35_1); var ctx_r34 = i0__namespace.ɵɵnextContext(5); return ctx_r34.displayLessResults("checkbox"); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.filter.displayLessResults"), " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r37_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "u", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_2_Template_u_click_0_listener() { i0__namespace.ɵɵrestoreView(_r37_1); var ctx_r36 = i0__namespace.ɵɵnextContext(5); return ctx_r36.displayMoreResults("checkbox"); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.filter.displayMoreResults"), " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p");
            i0__namespace.ɵɵtemplate(1, OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_1_Template, 3, 3, "u", 21);
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_u_2_Template, 3, 3, "u", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var bundle_r25 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r27 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r27.isLessResults(bundle_r25, "checkbox"));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r27.isMoreResults(bundle_r25, "checkbox"));
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "div", 18);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_2_ng_container_3_mat_checkbox_4_Template, 2, 4, "mat-checkbox", 19);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(5, OgcFilterSelectionComponent_div_1_div_2_ng_container_3_p_5_Template, 3, 2, "p", 2);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var bundle_r25 = ctx.$implicit;
            var ctx_r20 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(bundle_r25.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", bundle_r25.selectors);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r20.isLessResults(bundle_r25, "checkbox") || ctx_r20.isMoreResults(bundle_r25, "checkbox"));
        }
    }
    function OgcFilterSelectionComponent_div_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 16);
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_2_div_2_Template, 5, 5, "div", 8);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_1_div_2_ng_container_3_Template, 6, 3, "ng-container", 1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r4.getCheckboxesGroups().length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r4.currentCheckboxesGroup.computedSelectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_div_2_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 12);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var selectorGroup_r42 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", selectorGroup_r42);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", selectorGroup_r42.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r44_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 26);
            i0__namespace.ɵɵlistener("valueChange", function OgcFilterSelectionComponent_div_1_div_3_div_2_Template_mat_select_valueChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r44_1); var ctx_r43 = i0__namespace.ɵɵnextContext(3); return ctx_r43.currentRadioButtonsGroup = $event; });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_3_div_2_mat_option_4_Template, 2, 2, "mat-option", 11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r39 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.layer.legend.selectStyle"))("value", ctx_r39.currentRadioButtonsGroup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r39.getRadioButtonsGroups());
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r50_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-radio-button", 29);
            i0__namespace.ɵɵlistener("change", function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_4_Template_mat_radio_button_change_0_listener() { i0__namespace.ɵɵrestoreView(_r50_1); var ctx_r49 = i0__namespace.ɵɵnextContext(4); return ctx_r49.emptyRadioButtons(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.filter.resetFilters"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.filter.resetFilters"), " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r53_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-radio-button", 20);
            i0__namespace.ɵɵlistener("change", function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_5_Template_mat_radio_button_change_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r53_1); var ogcRadioButton_r51 = restoredCtx.$implicit; var selector_r2 = i0__namespace.ɵɵnextContext(3).$implicit; var ctx_r52 = i0__namespace.ɵɵnextContext(); return ctx_r52.onSelectionChange(ogcRadioButton_r51, selector_r2.selectorType); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ogcRadioButton_r51 = ctx.$implicit;
            var ctx_r47 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r47.getToolTip(ogcRadioButton_r51))("checked", ogcRadioButton_r51.enabled)("value", ogcRadioButton_r51);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ogcRadioButton_r51.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r58_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "u", 23);
            i0__namespace.ɵɵlistener("click", function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_1_Template_u_click_0_listener() { i0__namespace.ɵɵrestoreView(_r58_1); var ctx_r57 = i0__namespace.ɵɵnextContext(5); return ctx_r57.displayLessResults("radio"); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.filter.displayLessResults"), " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r60_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "u", 24);
            i0__namespace.ɵɵlistener("click", function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_2_Template_u_click_0_listener() { i0__namespace.ɵɵrestoreView(_r60_1); var ctx_r59 = i0__namespace.ɵɵnextContext(5); return ctx_r59.displayMoreResults("radio"); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.filter.displayMoreResults"), " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p");
            i0__namespace.ɵɵtemplate(1, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_1_Template, 3, 3, "u", 21);
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_u_2_Template, 3, 3, "u", 22);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var bundle_r45 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r48 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r48.isLessResults(bundle_r45, "radio"));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r48.isMoreResults(bundle_r45, "radio"));
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "mat-radio-group", 27);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_4_Template, 4, 6, "mat-radio-button", 28);
            i0__namespace.ɵɵtemplate(5, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_mat_radio_button_5_Template, 2, 4, "mat-radio-button", 19);
            i0__namespace.ɵɵtemplate(6, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_p_6_Template, 3, 2, "p", 2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var bundle_r45 = ctx.$implicit;
            var ctx_r40 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(bundle_r45.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", bundle_r45.unfiltered);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", bundle_r45.selectors);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r40.isLessResults(bundle_r45, "radio") || ctx_r40.isMoreResults(bundle_r45, "radio"));
        }
    }
    function OgcFilterSelectionComponent_div_1_div_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 25);
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_3_div_2_Template, 5, 5, "div", 8);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_1_div_3_ng_container_3_Template, 7, 4, "ng-container", 1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.getRadioButtonsGroups().length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r5.currentRadioButtonsGroup.computedSelectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_div_2_mat_option_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 12);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var selectorGroup_r65 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", selectorGroup_r65);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", selectorGroup_r65.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r67_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-select", 31);
            i0__namespace.ɵɵlistener("valueChange", function OgcFilterSelectionComponent_div_1_div_4_div_2_Template_mat_select_valueChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r67_1); var ctx_r66 = i0__namespace.ɵɵnextContext(3); return ctx_r66.currentSelectGroup = $event; });
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_4_div_2_mat_option_4_Template, 2, 2, "mat-option", 11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r62 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(3, 3, "igo.geo.layer.legend.selectStyle"))("value", ctx_r62.currentSelectGroup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r62.getSelectGroups());
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_mat_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r74_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-button", 35);
            i0__namespace.ɵɵlistener("click", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_mat_button_4_Template_mat_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r74_1); var ctx_r73 = i0__namespace.ɵɵnextContext(4); return ctx_r73.emptySelect(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 36);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.filter.resetFilters"));
        }
    }
    var _c1$5 = function () { return { standalone: true }; };
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_checkbox_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r79_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-checkbox", 41);
            i0__namespace.ɵɵlistener("ngModelChange", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_checkbox_4_Template_mat_checkbox_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r79_1); var ctx_r78 = i0__namespace.ɵɵnextContext(5); return ctx_r78.allSelected = $event; })("change", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_checkbox_4_Template_mat_checkbox_change_0_listener() { i0__namespace.ɵɵrestoreView(_r79_1); var ctx_r80 = i0__namespace.ɵɵnextContext(5); return ctx_r80.toggleAllSelection(); });
            i0__namespace.ɵɵtext(1, "Tous ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r76 = i0__namespace.ɵɵnextContext(5);
            i0__namespace.ɵɵproperty("ngModel", ctx_r76.allSelected)("ngModelOptions", i0__namespace.ɵɵpureFunction0(2, _c1$5));
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r83_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-option", 42);
            i0__namespace.ɵɵlistener("onSelectionChange", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_option_5_Template_mat_option_onSelectionChange_0_listener() { i0__namespace.ɵɵrestoreView(_r83_1); var ctx_r82 = i0__namespace.ɵɵnextContext(5); return ctx_r82.optionClick(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ogcSelect_r81 = ctx.$implicit;
            var ctx_r77 = i0__namespace.ɵɵnextContext(5);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r77.getToolTip(ogcSelect_r81))("value", ogcSelect_r81);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ogcSelect_r81.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r85_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelementStart(1, "mat-select", 37, 38);
            i0__namespace.ɵɵlistener("ngModelChange", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_Template_mat_select_ngModelChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r85_1); var ctx_r84 = i0__namespace.ɵɵnextContext(4); return ctx_r84.enableds = $event; });
            i0__namespace.ɵɵelementStart(3, "div", 18);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_checkbox_4_Template, 2, 3, "mat-checkbox", 39);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(5, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_mat_option_5_Template, 2, 3, "mat-option", 40);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var bundle_r68 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r70 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("multiple", bundle_r68.multiple)("placeholder", bundle_r68.title)("formControl", ctx_r70.select)("ngModel", ctx_r70.enableds);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", bundle_r68.multiple);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", bundle_r68.selectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_ng_template_7_mat_option_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 45);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ogcSelect_r88 = ctx.$implicit;
            var ctx_r87 = i0__namespace.ɵɵnextContext(5);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r87.getToolTip(ogcSelect_r88))("value", ogcSelect_r88);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ogcSelect_r88.title, " ");
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_ng_template_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r90_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-select", 43);
            i0__namespace.ɵɵlistener("ngModelChange", function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_ng_template_7_Template_mat_select_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r90_1); var ctx_r89 = i0__namespace.ɵɵnextContext(4); return ctx_r89.enabled = $event; });
            i0__namespace.ɵɵtemplate(1, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_ng_template_7_mat_option_1_Template, 2, 3, "mat-option", 44);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var bundle_r68 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r72 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("placeholder", bundle_r68.title)("formControl", ctx_r72.select)("ngModel", ctx_r72.enabled);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", bundle_r68.selectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "div", 9);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_mat_button_4_Template, 3, 3, "mat-button", 32);
            i0__namespace.ɵɵelementStart(5, "mat-form-field");
            i0__namespace.ɵɵtemplate(6, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_div_6_Template, 6, 6, "div", 33);
            i0__namespace.ɵɵtemplate(7, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_ng_template_7_Template, 2, 4, "ng-template", null, 34, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var bundle_r68 = ctx.$implicit;
            var _r71 = i0__namespace.ɵɵreference(8);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(bundle_r68.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", bundle_r68.unfiltered && !bundle_r68.multiple);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", bundle_r68.multiple)("ngIfElse", _r71);
        }
    }
    function OgcFilterSelectionComponent_div_1_div_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 30);
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_4_div_2_Template, 5, 5, "div", 8);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_1_div_4_ng_container_3_Template, 9, 4, "ng-container", 1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r6.getSelectGroups().length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r6.currentSelectGroup.computedSelectors);
        }
    }
    function OgcFilterSelectionComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, OgcFilterSelectionComponent_div_1_div_1_Template, 4, 2, "div", 3);
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_1_div_2_Template, 4, 2, "div", 4);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_1_div_3_Template, 4, 2, "div", 5);
            i0__namespace.ɵɵtemplate(4, OgcFilterSelectionComponent_div_1_div_4_Template, 4, 2, "div", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var selector_r2 = ctx.$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", selector_r2.selectorType === "pushButton");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", selector_r2.selectorType === "checkbox");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", selector_r2.selectorType === "radioButton");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", selector_r2.selectorType === "select");
        }
    }
    function OgcFilterSelectionComponent_div_2_h4_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "h4");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.filter.reportingDate"));
        }
    }
    function OgcFilterSelectionComponent_div_2_h4_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "h4");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r93 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r93.currentFilter.title);
        }
    }
    function OgcFilterSelectionComponent_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r95_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_2_h4_2_Template, 3, 3, "h4", 2);
            i0__namespace.ɵɵtemplate(3, OgcFilterSelectionComponent_div_2_h4_3_Template, 2, 1, "h4", 2);
            i0__namespace.ɵɵelementStart(4, "igo-ogc-filter-time", 46);
            i0__namespace.ɵɵlistener("datasourceChange", function OgcFilterSelectionComponent_div_2_Template_igo_ogc_filter_time_datasourceChange_4_listener($event) { i0__namespace.ɵɵrestoreView(_r95_1); var ctx_r94 = i0__namespace.ɵɵnextContext(); return ctx_r94.datasource = $event; })("currentFilterChange", function OgcFilterSelectionComponent_div_2_Template_igo_ogc_filter_time_currentFilterChange_4_listener($event) { i0__namespace.ɵɵrestoreView(_r95_1); var ctx_r96 = i0__namespace.ɵɵnextContext(); return ctx_r96.currentFilter = $event; })("changeProperty", function OgcFilterSelectionComponent_div_2_Template_igo_ogc_filter_time_changeProperty_4_listener($event) { i0__namespace.ɵɵrestoreView(_r95_1); var ctx_r97 = i0__namespace.ɵɵnextContext(); return ctx_r97.changeProperty($event.value, $event.pos); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r1.currentFilter.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.currentFilter.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("datasource", ctx_r1.datasource)("currentFilter", ctx_r1.currentFilter);
        }
    }
    var OgcFilterSelectionComponent = /** @class */ (function () {
        function OgcFilterSelectionComponent(ogcFilterService, formBuilder) {
            this.ogcFilterService = ogcFilterService;
            this.formBuilder = formBuilder;
            this.checkboxesIndex = 5;
            this.radioButtonsIndex = 5;
            this.baseIndex = 5;
            this.ogcFilterOperator = exports.OgcFilterOperator;
            this.color = 'primary';
            this.allSelected = false;
            this.select = new i16.FormControl();
            this.enabled$ = new rxjs.BehaviorSubject(undefined);
            this.enableds$ = new rxjs.BehaviorSubject([]);
            this.ogcFilterWriter = new OgcFilterWriter();
            this.buildForm();
        }
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "currentFilter", {
            get: function () {
                return this._currentFilter;
            },
            set: function (value) {
                var _a;
                this._currentFilter = value;
                if ((_a = this._currentFilter) === null || _a === void 0 ? void 0 : _a.sliderOptions) {
                    this._currentFilter.sliderOptions.enabled = false; // remove slider toggle (animation temporelle)
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "ogcFiltersSelectors", {
            get: function () {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
                var ogcSelector = [];
                if ((_c = (_b = (_a = this.datasource) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.ogcFilters) === null || _c === void 0 ? void 0 : _c.pushButtons) {
                    ogcSelector.push((_f = (_e = (_d = this.datasource) === null || _d === void 0 ? void 0 : _d.options) === null || _e === void 0 ? void 0 : _e.ogcFilters) === null || _f === void 0 ? void 0 : _f.pushButtons);
                }
                if ((_j = (_h = (_g = this.datasource) === null || _g === void 0 ? void 0 : _g.options) === null || _h === void 0 ? void 0 : _h.ogcFilters) === null || _j === void 0 ? void 0 : _j.checkboxes) {
                    ogcSelector.push((_m = (_l = (_k = this.datasource) === null || _k === void 0 ? void 0 : _k.options) === null || _l === void 0 ? void 0 : _l.ogcFilters) === null || _m === void 0 ? void 0 : _m.checkboxes);
                }
                if ((_q = (_p = (_o = this.datasource) === null || _o === void 0 ? void 0 : _o.options) === null || _p === void 0 ? void 0 : _p.ogcFilters) === null || _q === void 0 ? void 0 : _q.radioButtons) {
                    ogcSelector.push((_t = (_s = (_r = this.datasource) === null || _r === void 0 ? void 0 : _r.options) === null || _s === void 0 ? void 0 : _s.ogcFilters) === null || _t === void 0 ? void 0 : _t.radioButtons);
                }
                if ((_w = (_v = (_u = this.datasource) === null || _u === void 0 ? void 0 : _u.options) === null || _v === void 0 ? void 0 : _v.ogcFilters) === null || _w === void 0 ? void 0 : _w.select) {
                    ogcSelector.push((_z = (_y = (_x = this.datasource) === null || _x === void 0 ? void 0 : _x.options) === null || _y === void 0 ? void 0 : _y.ogcFilters) === null || _z === void 0 ? void 0 : _z.select);
                }
                ogcSelector.sort(function (a, b) {
                    if (a.order < b.order) {
                        return -1;
                    }
                    if (a.order > b.order) {
                        return 1;
                    }
                    return 0;
                });
                return ogcSelector;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "currentPushButtonsGroup", {
            get: function () {
                return this.form.get('pushButtonsGroup').value;
            },
            set: function (value) {
                this.form.patchValue({ pushButtonsGroup: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "currentCheckboxesGroup", {
            get: function () {
                return this.form.get('checkboxesGroup').value;
            },
            set: function (value) {
                this.form.patchValue({ checkboxesGroup: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "currentRadioButtonsGroup", {
            get: function () {
                return this.form.get('radioButtonsGroup').value;
            },
            set: function (value) {
                this.form.patchValue({ radioButtonsGroup: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "currentSelectGroup", {
            get: function () {
                return this.form.get('selectGroup').value;
            },
            set: function (value) {
                this.form.patchValue({ selectGroup: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "enabled", {
            get: function () {
                return this.enabled$.value;
            },
            set: function (value) {
                var _this = this;
                this.enabled$.next(value);
                clearTimeout(this.applyFiltersTimeout);
                this.currentSelectGroup.computedSelectors.forEach(function (compSelect) {
                    compSelect.selectors.forEach(function (selector) {
                        value === selector ? selector.enabled = true : selector.enabled = false;
                    });
                });
                this.applyFiltersTimeout = setTimeout(function () {
                    _this.applyFilters();
                }, 750);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterSelectionComponent.prototype, "enableds", {
            get: function () {
                return this.enableds$.value;
            },
            set: function (value) {
                var _this = this;
                this.enableds$.next(value);
                clearTimeout(this.applyFiltersTimeout);
                this.currentSelectGroup.computedSelectors.forEach(function (compSelect) {
                    compSelect.selectors.forEach(function (selector) {
                        value.includes(selector) ? selector.enabled = true : selector.enabled = false;
                    });
                });
                this.applyFiltersTimeout = setTimeout(function () {
                    _this.applyFilters();
                }, 750);
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterSelectionComponent.prototype.buildForm = function () {
            this.form = this.formBuilder.group({
                pushButtons: ['', [i16.Validators.required]],
                radioButtons: ['', [i16.Validators.required]],
                pushButtonsGroup: ['', [i16.Validators.required]],
                checkboxesGroup: ['', [i16.Validators.required]],
                radioButtonsGroup: ['', [i16.Validators.required]],
                selectGroup: ['', [i16.Validators.required]],
            });
        };
        OgcFilterSelectionComponent.prototype.getPushButtonsGroups = function () {
            var _a, _b, _c;
            if ((_c = (_b = (_a = this.datasource) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.ogcFilters) === null || _c === void 0 ? void 0 : _c.pushButtons) {
                return this.datasource.options.ogcFilters.pushButtons.groups;
            }
        };
        OgcFilterSelectionComponent.prototype.getCheckboxesGroups = function () {
            var _a, _b, _c;
            if ((_c = (_b = (_a = this.datasource) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.ogcFilters) === null || _c === void 0 ? void 0 : _c.checkboxes) {
                return this.datasource.options.ogcFilters.checkboxes.groups;
            }
        };
        OgcFilterSelectionComponent.prototype.getRadioButtonsGroups = function () {
            var _a, _b, _c;
            if ((_c = (_b = (_a = this.datasource) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.ogcFilters) === null || _c === void 0 ? void 0 : _c.radioButtons) {
                return this.datasource.options.ogcFilters.radioButtons.groups;
            }
        };
        OgcFilterSelectionComponent.prototype.getSelectGroups = function () {
            var _a, _b, _c;
            if ((_c = (_b = (_a = this.datasource) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.ogcFilters) === null || _c === void 0 ? void 0 : _c.select) {
                return this.datasource.options.ogcFilters.select.groups;
            }
        };
        OgcFilterSelectionComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.datasource.options.ogcFilters) {
                if (this.datasource.options.ogcFilters.pushButtons) {
                    this.currentPushButtonsGroup =
                        this.datasource.options.ogcFilters.pushButtons.groups.find(function (group) { return group.enabled; }) ||
                            this.datasource.options.ogcFilters.pushButtons.groups[0];
                }
                if (this.datasource.options.ogcFilters.checkboxes) {
                    this.currentCheckboxesGroup =
                        this.datasource.options.ogcFilters.checkboxes.groups.find(function (group) { return group.enabled; }) ||
                            this.datasource.options.ogcFilters.checkboxes.groups[0];
                }
                if (this.datasource.options.ogcFilters.radioButtons) {
                    this.currentRadioButtonsGroup =
                        this.datasource.options.ogcFilters.radioButtons.groups.find(function (group) { return group.enabled; }) ||
                            this.datasource.options.ogcFilters.radioButtons.groups[0];
                }
                if (this.datasource.options.ogcFilters.select) {
                    this.currentSelectGroup =
                        this.datasource.options.ogcFilters.select.groups.find(function (group) { return group.enabled; }) ||
                            this.datasource.options.ogcFilters.select.groups[0];
                    this.getSelectEnabled();
                }
                this.applyFilters();
            }
            this.form
                .get('pushButtonsGroup')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.onPushButtonsChangeGroup();
                _this.applyFilters();
            });
            this.form
                .get('checkboxesGroup')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.onCheckboxesChangeGroup();
                _this.applyFilters();
            });
            this.form
                .get('radioButtonsGroup')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.onRadioButtonsChangeGroup();
                _this.applyFilters();
            });
            this.form
                .get('selectGroup')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.onSelectChangeGroup();
                _this.applyFilters();
            });
            this.form
                .get('pushButtons')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.applyFilters();
            });
            this.form
                .get('radioButtons')
                .valueChanges
                .pipe(operators.debounceTime(750))
                .subscribe(function () {
                _this.applyFilters();
            });
        };
        OgcFilterSelectionComponent.prototype.getSelectEnabled = function () {
            var _this = this;
            var enableds = [];
            var enabled;
            this.currentSelectGroup.computedSelectors.forEach(function (compSelect) {
                if (compSelect.multiple) {
                    compSelect.selectors.forEach(function (selector) {
                        if (selector.enabled) {
                            enableds.push(selector);
                        }
                    });
                    _this.enableds = enableds;
                }
                else {
                    compSelect.selectors.forEach(function (selector) {
                        if (selector.enabled) {
                            enabled = selector;
                        }
                    });
                    _this.enabled = enabled;
                }
            });
        };
        OgcFilterSelectionComponent.prototype.getToolTip = function (selector) {
            var toolTip;
            if (selector.tooltip) {
                if (Array.isArray(selector.tooltip)) {
                    toolTip = selector.tooltip.join('\n');
                }
                else {
                    toolTip = selector.tooltip;
                }
            }
            return toolTip || '';
        };
        // getButtonStyle(pb: OgcPushButton): {} {
        //   let styles;
        //   if (pb.color) {
        //     styles = {
        //       'background-color': pb.enabled ? `rgba(${pb.color})` : `rgba(255,255,255,0)`
        //     };
        //   } else {
        //     styles = {
        //       'background-color': pb.enabled ? 'accent': `rgba(255,255,255,0)`,
        //       'color': pb.enabled ? `rgba(0,0,0,0.9)` : `rgba(33,33,33,0.38)`
        //     }
        //   }
        //   return styles;
        // }
        OgcFilterSelectionComponent.prototype.getButtonColor = function (pushButton) {
            var styles;
            if (pushButton.color && pushButton.enabled) {
                styles = {
                    'background-color': "rgba(" + pushButton.color + ")"
                };
            }
            return styles;
        };
        OgcFilterSelectionComponent.prototype.bundleIsVertical = function (bundle) {
            return bundle.vertical ? bundle.vertical : false;
        };
        OgcFilterSelectionComponent.prototype.onPushButtonsChangeGroup = function () {
            var _this = this;
            this.getPushButtonsGroups().map(function (group) { return group.enabled = false; });
            this.getPushButtonsGroups().find(function (group) { return group === _this.currentPushButtonsGroup; }).enabled = true;
        };
        OgcFilterSelectionComponent.prototype.onCheckboxesChangeGroup = function () {
            var _this = this;
            this.getCheckboxesGroups().map(function (group) { return group.enabled = false; });
            this.getCheckboxesGroups().find(function (group) { return group === _this.currentCheckboxesGroup; }).enabled = true;
        };
        OgcFilterSelectionComponent.prototype.onRadioButtonsChangeGroup = function () {
            var _this = this;
            this.getRadioButtonsGroups().map(function (group) { return group.enabled = false; });
            this.getRadioButtonsGroups().find(function (group) { return group === _this.currentRadioButtonsGroup; }).enabled = true;
        };
        OgcFilterSelectionComponent.prototype.onSelectChangeGroup = function () {
            var _this = this;
            this.getSelectGroups().map(function (group) { return group.enabled = false; });
            this.getSelectGroups().find(function (group) { return group === _this.currentSelectGroup; }).enabled = true;
        };
        OgcFilterSelectionComponent.prototype.onSelectionChange = function (currentOgcSelection, selectorType) {
            var _this = this;
            clearTimeout(this.applyFiltersTimeout);
            if (selectorType === 'radioButton') {
                this.emptyRadioButtons();
            }
            if (currentOgcSelection) {
                currentOgcSelection.enabled = !currentOgcSelection.enabled;
            }
            this.applyFiltersTimeout = setTimeout(function () {
                _this.applyFilters();
            }, 750);
        };
        OgcFilterSelectionComponent.prototype.emptyRadioButtons = function () {
            var _this = this;
            this.currentRadioButtonsGroup.computedSelectors.forEach(function (compSelect) {
                compSelect.selectors.map(function (selector) { return selector.enabled = false; });
                _this.applyFiltersTimeout = setTimeout(function () {
                    _this.applyFilters();
                }, 750);
            });
        };
        OgcFilterSelectionComponent.prototype.emptySelect = function () {
            this.enabled = [];
        };
        OgcFilterSelectionComponent.prototype.toggleAllSelection = function () {
            if (this.allSelected) {
                this.sel.options.forEach(function (item) { return item.select(); });
            }
            else {
                this.sel.options.forEach(function (item) { return item.deselect(); });
            }
        };
        OgcFilterSelectionComponent.prototype.optionClick = function () {
            var newStatus = true;
            this.sel.options.forEach(function (item) {
                if (!item.selected) {
                    newStatus = false;
                }
            });
            this.allSelected = newStatus;
        };
        OgcFilterSelectionComponent.prototype.applyFilters = function () {
            var e_1, _0;
            var filterQueryString = '';
            var conditions = [];
            var currentGroups = [this.currentPushButtonsGroup, this.currentCheckboxesGroup,
                this.currentRadioButtonsGroup, this.currentSelectGroup];
            try {
                for (var currentGroups_1 = __values(currentGroups), currentGroups_1_1 = currentGroups_1.next(); !currentGroups_1_1.done; currentGroups_1_1 = currentGroups_1.next()) {
                    var currentGroup = currentGroups_1_1.value;
                    if (currentGroup.computedSelectors) {
                        currentGroup.computedSelectors.map(function (selectorBundle) {
                            var bundleCondition = [];
                            selectorBundle.selectors
                                .filter(function (ogcSelector) { return ogcSelector.enabled === true; })
                                .forEach(function (enabledSelector) { return bundleCondition.push(enabledSelector.filters); });
                            if (bundleCondition.length >= 1) {
                                if (bundleCondition.length === 1) {
                                    conditions.push(bundleCondition[0]);
                                }
                                else {
                                    conditions.push({ logical: selectorBundle.logical, filters: bundleCondition });
                                }
                            }
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (currentGroups_1_1 && !currentGroups_1_1.done && (_0 = currentGroups_1.return)) _0.call(currentGroups_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.isTemporalOperator() && this._currentFilter.active) {
                conditions.push(this.datasource.options.ogcFilters.interfaceOgcFilters[0]);
            }
            if (conditions.length >= 1) {
                filterQueryString = this.ogcFilterWriter
                    .buildFilter(conditions.length === 1 ?
                    conditions[0] : { logical: 'And', filters: conditions });
            }
            if (this.datasource.options.type === 'wms') {
                this.ogcFilterService.filterByOgc(this.datasource, filterQueryString);
            }
            if (this.datasource.options.type === 'wfs') {
                // TODO: Check how to prevent wfs to refresh when filter icon is pushed...
                this.datasource.ol.refresh();
            }
            this.datasource.setOgcFilters(this.datasource.options.ogcFilters, true);
        };
        OgcFilterSelectionComponent.prototype.isMoreResults = function (bundle, type) {
            var e_2, _0;
            var selectorsLength = 0;
            try {
                for (var _1 = __values(bundle.selectors), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                    var selectors = _2.value;
                    selectorsLength++;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_2 && !_2.done && (_0 = _1.return)) _0.call(_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var index = type === 'radio' ? this.radioButtonsIndex : this.checkboxesIndex;
            return selectorsLength > index;
        };
        OgcFilterSelectionComponent.prototype.displayMoreResults = function (type) {
            type === 'radio' ? this.radioButtonsIndex += 5 : this.checkboxesIndex += 5;
            return;
        };
        OgcFilterSelectionComponent.prototype.isLessResults = function (bundle, type) {
            var e_3, _0;
            var selectorsLength = 0;
            try {
                for (var _1 = __values(bundle.selectors), _2 = _1.next(); !_2.done; _2 = _1.next()) {
                    var selectors = _2.value;
                    selectorsLength++;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_2 && !_2.done && (_0 = _1.return)) _0.call(_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            var index = type === 'radio' ? this.radioButtonsIndex : this.checkboxesIndex;
            return this.baseIndex !== index && selectorsLength > this.baseIndex;
        };
        OgcFilterSelectionComponent.prototype.displayLessResults = function (type) {
            type === 'radio' ? this.radioButtonsIndex = this.baseIndex : this.checkboxesIndex = this.baseIndex;
            return;
        };
        OgcFilterSelectionComponent.prototype.isTemporalOperator = function () {
            var _a, _b;
            return (((_b = (_a = this.currentFilter) === null || _a === void 0 ? void 0 : _a.operator) === null || _b === void 0 ? void 0 : _b.toLowerCase()) ===
                this.ogcFilterOperator.During.toLowerCase());
        };
        OgcFilterSelectionComponent.prototype.changeProperty = function (value, pos, refreshFilter) {
            var _this = this;
            if (refreshFilter === void 0) { refreshFilter = true; }
            var detectedProperty = this.detectProperty(pos);
            if (detectedProperty) {
                this.datasource.options.ogcFilters.interfaceOgcFilters.find(function (filter) { return filter.filterid === _this.currentFilter.filterid; })[detectedProperty] = value;
                if (refreshFilter) {
                    this.applyFilters();
                }
            }
        };
        OgcFilterSelectionComponent.prototype.detectProperty = function (pos) {
            switch (this.currentFilter.operator) {
                case exports.OgcFilterOperator.PropertyIsNotEqualTo:
                case exports.OgcFilterOperator.PropertyIsEqualTo:
                case exports.OgcFilterOperator.PropertyIsGreaterThan:
                case exports.OgcFilterOperator.PropertyIsGreaterThanOrEqualTo:
                case exports.OgcFilterOperator.PropertyIsLessThan:
                case exports.OgcFilterOperator.PropertyIsLessThanOrEqualTo:
                    return 'expression';
                case exports.OgcFilterOperator.PropertyIsLike:
                    return 'pattern';
                case exports.OgcFilterOperator.PropertyIsBetween:
                    return pos && pos === 1
                        ? 'lowerBoundary'
                        : pos && pos === 2
                            ? 'upperBoundary'
                            : undefined;
                case exports.OgcFilterOperator.During:
                    return pos && pos === 1
                        ? 'begin'
                        : pos && pos === 2
                            ? 'end'
                            : undefined;
                default:
                    return;
            }
        };
        return OgcFilterSelectionComponent;
    }());
    OgcFilterSelectionComponent.ɵfac = function OgcFilterSelectionComponent_Factory(t) { return new (t || OgcFilterSelectionComponent)(i0__namespace.ɵɵdirectiveInject(OGCFilterService), i0__namespace.ɵɵdirectiveInject(i16__namespace.FormBuilder)); };
    OgcFilterSelectionComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterSelectionComponent, selectors: [["igo-ogc-filter-selection"]], viewQuery: function OgcFilterSelectionComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$6, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.sel = _t.first);
            }
        }, inputs: { refreshFilters: "refreshFilters", datasource: "datasource", map: "map", checkboxesIndex: "checkboxesIndex", radioButtonsIndex: "radioButtonsIndex", baseIndex: "baseIndex", currentFilter: "currentFilter" }, decls: 3, vars: 3, consts: [[3, "formGroup"], [4, "ngFor", "ngForOf"], [4, "ngIf"], ["class", "pushButtonGroups", 4, "ngIf"], ["class", "checkboxGroups", 4, "ngIf"], ["class", "radioButtonGroups", 4, "ngIf"], ["class", "selectGroups", 4, "ngIf"], [1, "pushButtonGroups"], ["class", "groupsSelector", 4, "ngIf"], [1, "groupsSelector"], ["formControlName", "pushButtonsGroup", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "value", "valueChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["formControlName", "pushButtons", "appearance", "legacy", "multiple", "true", 1, "mat-typography", 3, "vertical"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "ngStyle", "checked", "value", "change", 4, "ngFor", "ngForOf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "ngStyle", "checked", "value", "change"], [1, "checkboxGroups"], ["formControlName", "checkboxesGroup", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "value", "valueChange"], [1, "checkboxes", "mat-typography"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "checked", "value", "change", 4, "ngFor", "ngForOf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "checked", "value", "change"], ["class", "lessResults mat-typography", 3, "click", 4, "ngIf"], ["class", "moreResults mat-typography", 3, "click", 4, "ngIf"], [1, "lessResults", "mat-typography", 3, "click"], [1, "moreResults", "mat-typography", 3, "click"], [1, "radioButtonGroups"], ["formControlName", "radioButtonsGroup", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "value", "valueChange"], ["formControlName", "radioButtons", 1, "mat-typography"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "change", 4, "ngIf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "change"], [1, "selectGroups"], ["formControlName", "selectGroup", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "value", "valueChange"], ["mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "click", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["notMulti", ""], ["mat-icon-button", "", "color", "warn", "tooltip-position", "below", "matTooltipShowDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "click"], ["svgIcon", "filter-remove"], [3, "multiple", "placeholder", "formControl", "ngModel", "ngModelChange"], ["selection", ""], [3, "ngModel", "ngModelOptions", "ngModelChange", "change", 4, "ngIf"], ["tooltip-position", "below", "matTooltipDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "value", "onSelectionChange", 4, "ngFor", "ngForOf"], [3, "ngModel", "ngModelOptions", "ngModelChange", "change"], ["tooltip-position", "below", "matTooltipDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "value", "onSelectionChange"], [3, "placeholder", "formControl", "ngModel", "ngModelChange"], ["tooltip-position", "below", "matTooltipDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "value", 4, "ngFor", "ngForOf"], ["tooltip-position", "below", "matTooltipDelay", "500", "matTooltipClass", "material-tooltip", 3, "matTooltip", "value"], [3, "datasource", "currentFilter", "datasourceChange", "currentFilterChange", "changeProperty"]], template: function OgcFilterSelectionComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "form", 0);
                i0__namespace.ɵɵtemplate(1, OgcFilterSelectionComponent_div_1_Template, 5, 4, "div", 1);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(2, OgcFilterSelectionComponent_div_2_Template, 5, 4, "div", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("formGroup", ctx.form);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.ogcFiltersSelectors);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isTemporalOperator());
            }
        }, styles: [".mat-button-toggle-group[_ngcontent-%COMP%]{margin:5px;flex-wrap:wrap;box-shadow:none}.checkboxes[_ngcontent-%COMP%]{flex-wrap:wrap;box-shadow:none}.groupsSelector[_ngcontent-%COMP%]{text-align:center}mat-button-toggle[_ngcontent-%COMP%]{display:inline-flex;border:1.5px solid black;border-radius:5px;margin:5px;white-space:normal;min-height:40px;height:auto;width:150px}mat-button-toggle[_ngcontent-%COMP%]     .mat-button-toggle-label-content{line-height:unset;font-size:small;display:block}  .material-tooltip{white-space:pre-wrap}mat-checkbox[_ngcontent-%COMP%], mat-radio-button[_ngcontent-%COMP%]{margin:7px;width:95%;display:inline-flex;font-size:larger}mat-checkbox[_ngcontent-%COMP%]     label, mat-radio-button[_ngcontent-%COMP%]     label{white-space:normal}mat-checkbox[_ngcontent-%COMP%]{vertical-align:middle}mat-button[_ngcontent-%COMP%]{padding-right:10px}h4[_ngcontent-%COMP%]{margin:7px;text-align:left}u[_ngcontent-%COMP%]{cursor:pointer;color:#00f;margin:5px}p[_ngcontent-%COMP%]{margin:unset}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterSelectionComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter-selection',
                        templateUrl: './ogc-filter-selection.component.html',
                        styleUrls: ['./ogc-filter-selection.component.scss']
                    }]
            }], function () { return [{ type: OGCFilterService }, { type: i16__namespace.FormBuilder }]; }, { sel: [{
                    type: i0.ViewChild,
                    args: ['selection']
                }], refreshFilters: [{
                    type: i0.Input
                }], datasource: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], checkboxesIndex: [{
                    type: i0.Input
                }], radioButtonsIndex: [{
                    type: i0.Input
                }], baseIndex: [{
                    type: i0.Input
                }], currentFilter: [{
                    type: i0.Input
                }] });
    })();

    function SpatialFilterTypeComponent_mat_option_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 10);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var queryType_r1 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", queryType_r1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.terrapi." + queryType_r1), " ");
        }
    }
    /**
     * Spatial Filter Type
     */
    var SpatialFilterTypeComponent = /** @class */ (function () {
        function SpatialFilterTypeComponent() {
            this.queryType = ['Arrond', 'CircFed', 'CircProv', 'DirReg', 'Mun', 'MRC', 'AdmRegion', 'RegTour'];
            this.selectedTypeIndex = new i16.FormControl(0);
            /**
             * Reference to the SpatialFIlterType enum
             * @internal
             */
            this.spatialType = exports.SpatialFilterType;
            this.activeDrawType = this.spatialType.Polygon;
            this.layers = [];
            this.eventType = new i0.EventEmitter();
            this.eventQueryType = new i0.EventEmitter();
            this.zoneChange = new i0.EventEmitter();
            this.zoneWithBufferChange = new i0.EventEmitter();
            this.bufferChange = new i0.EventEmitter();
            this.measureUnitChange = new i0.EventEmitter();
        }
        Object.defineProperty(SpatialFilterTypeComponent.prototype, "store", {
            get: function () {
                return this._store;
            },
            set: function (store) {
                this._store = store;
            },
            enumerable: false,
            configurable: true
        });
        SpatialFilterTypeComponent.prototype.ngOnInit = function () {
            if (this.selectedTypeIndex.value === 0) {
                this.type = this.spatialType.Predefined;
            }
            if (this.selectedTypeIndex.value === 1) {
                this.type = this.activeDrawType;
            }
            this.eventType.emit(this.type);
        };
        SpatialFilterTypeComponent.prototype.onTypeChange = function (event) {
            if (this.selectedTypeIndex.value === 0) {
                this.type = exports.SpatialFilterType.Predefined;
            }
            if (this.selectedTypeIndex.value === 1) {
                this.type = this.activeDrawType;
            }
            this.eventType.emit(this.type);
        };
        SpatialFilterTypeComponent.prototype.onDrawTypeChange = function (spatialType) {
            this.activeDrawType = spatialType;
            this.eventType.emit(this.activeDrawType);
        };
        SpatialFilterTypeComponent.prototype.onSelectionChange = function () {
            this.eventQueryType.emit(this.selectedQueryType);
            this.zoneChange.emit(undefined);
        };
        return SpatialFilterTypeComponent;
    }());
    SpatialFilterTypeComponent.ɵfac = function SpatialFilterTypeComponent_Factory(t) { return new (t || SpatialFilterTypeComponent)(); };
    SpatialFilterTypeComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SpatialFilterTypeComponent, selectors: [["igo-spatial-filter-type"]], inputs: { store: "store", selectedQueryType: "selectedQueryType", zone: "zone", layers: "layers" }, outputs: { eventType: "eventType", eventQueryType: "eventQueryType", zoneChange: "zoneChange", zoneWithBufferChange: "zoneWithBufferChange", bufferChange: "bufferChange", measureUnitChange: "measureUnitChange" }, decls: 20, vars: 25, consts: [[3, "selectedIndex", "selectedIndexChange", "selectedTabChange"], [3, "label"], [3, "value", "selectionChange", "valueChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "store", "queryType", "zone", "layers", "zoneChange", "zoneWithBufferChange", "bufferChange", "measureUnitChange"], [1, "spatial-type-toggle"], [3, "value", "change"], [3, "value", "matTooltip"], ["svgIcon", "pentagon-outline"], ["svgIcon", "record-circle-outline"], [3, "value"]], template: function SpatialFilterTypeComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-tab-group", 0);
                i0__namespace.ɵɵlistener("selectedIndexChange", function SpatialFilterTypeComponent_Template_mat_tab_group_selectedIndexChange_0_listener($event) { return ctx.selectedTypeIndex.setValue($event); })("selectedTabChange", function SpatialFilterTypeComponent_Template_mat_tab_group_selectedTabChange_0_listener($event) { return ctx.onTypeChange($event); });
                i0__namespace.ɵɵelementStart(1, "mat-tab", 1);
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelementStart(3, "mat-form-field");
                i0__namespace.ɵɵelementStart(4, "mat-label");
                i0__namespace.ɵɵtext(5);
                i0__namespace.ɵɵpipe(6, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(7, "mat-select", 2);
                i0__namespace.ɵɵlistener("selectionChange", function SpatialFilterTypeComponent_Template_mat_select_selectionChange_7_listener() { return ctx.onSelectionChange(); })("valueChange", function SpatialFilterTypeComponent_Template_mat_select_valueChange_7_listener($event) { return ctx.selectedQueryType = $event; });
                i0__namespace.ɵɵtemplate(8, SpatialFilterTypeComponent_mat_option_8_Template, 3, 4, "mat-option", 3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "igo-spatial-filter-list", 4);
                i0__namespace.ɵɵlistener("zoneChange", function SpatialFilterTypeComponent_Template_igo_spatial_filter_list_zoneChange_9_listener($event) { return ctx.zoneChange.emit($event); })("zoneWithBufferChange", function SpatialFilterTypeComponent_Template_igo_spatial_filter_list_zoneWithBufferChange_9_listener($event) { return ctx.zoneWithBufferChange.emit($event); })("bufferChange", function SpatialFilterTypeComponent_Template_igo_spatial_filter_list_bufferChange_9_listener($event) { return ctx.bufferChange.emit($event); })("measureUnitChange", function SpatialFilterTypeComponent_Template_igo_spatial_filter_list_measureUnitChange_9_listener($event) { return ctx.measureUnitChange.emit($event); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(10, "mat-tab", 1);
                i0__namespace.ɵɵpipe(11, "translate");
                i0__namespace.ɵɵelementStart(12, "div", 5);
                i0__namespace.ɵɵelementStart(13, "mat-button-toggle-group", 6);
                i0__namespace.ɵɵlistener("change", function SpatialFilterTypeComponent_Template_mat_button_toggle_group_change_13_listener($event) { return ctx.onDrawTypeChange($event.value); });
                i0__namespace.ɵɵelementStart(14, "mat-button-toggle", 7);
                i0__namespace.ɵɵpipe(15, "translate");
                i0__namespace.ɵɵelement(16, "mat-icon", 8);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(17, "mat-button-toggle", 7);
                i0__namespace.ɵɵpipe(18, "translate");
                i0__namespace.ɵɵelement(19, "mat-icon", 9);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("selectedIndex", ctx.selectedTypeIndex.value);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("label", i0__namespace.ɵɵpipeBind1(2, 15, "igo.geo.spatialFilter.predefined"));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(6, 17, "igo.geo.spatialFilter.searchLabel"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.selectedQueryType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.queryType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("store", ctx.store)("queryType", ctx.selectedQueryType)("zone", ctx.zone)("layers", ctx.layers);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("label", i0__namespace.ɵɵpipeBind1(11, 19, "igo.geo.spatialFilter.draw"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("value", ctx.activeDrawType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("value", ctx.spatialType.Polygon)("matTooltip", i0__namespace.ɵɵpipeBind1(15, 21, "igo.geo.spatialFilter.drawPolygon"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("value", ctx.spatialType.Point)("matTooltip", i0__namespace.ɵɵpipeBind1(18, 23, "igo.geo.spatialFilter.drawCircle"));
            }
        }, styles: [".mat-form-field[_ngcontent-%COMP%]{padding:5px;width:95%;margin-left:2px}.mat-tab-group[_ngcontent-%COMP%]     .mat-tab-body-content{overflow:hidden}.mat-tab-group[_ngcontent-%COMP%]     .mat-tab-label{padding:10px}.mat-tab-group[_ngcontent-%COMP%]     .mat-tab-body-wrapper{margin-top:5px}.spatial-type-toggle[_ngcontent-%COMP%]{padding:10px;text-align:center}.spatial-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]{width:50%}.spatial-type-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]   mat-button-toggle[_ngcontent-%COMP%]{width:50%}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SpatialFilterTypeComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-spatial-filter-type',
                        templateUrl: './spatial-filter-type.component.html',
                        styleUrls: ['./spatial-filter-type.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { store: [{
                    type: i0.Input
                }], selectedQueryType: [{
                    type: i0.Input
                }], zone: [{
                    type: i0.Input
                }], layers: [{
                    type: i0.Input
                }], eventType: [{
                    type: i0.Output
                }], eventQueryType: [{
                    type: i0.Output
                }], zoneChange: [{
                    type: i0.Output
                }], zoneWithBufferChange: [{
                    type: i0.Output
                }], bufferChange: [{
                    type: i0.Output
                }], measureUnitChange: [{
                    type: i0.Output
                }] });
    })();

    function SpatialFilterListComponent_mat_option_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 13);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var entities_r4 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", entities_r4);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", entities_r4.properties.nom, " ");
        }
    }
    function SpatialFilterListComponent_mat_option_17_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 13);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measureUnit_r5 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", measureUnit_r5);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.measure." + measureUnit_r5), " ");
        }
    }
    var SpatialFilterListComponent = /** @class */ (function () {
        function SpatialFilterListComponent(spatialFilterService, messageService, languageService) {
            this.spatialFilterService = spatialFilterService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.layers = [];
            this.measureUnit = exports.MeasureLengthUnit.Meters;
            this.formControl = new i16.FormControl();
            this.bufferFormControl = new i16.FormControl();
            this.zoneChange = new i0.EventEmitter();
            this.zoneWithBufferChange = new i0.EventEmitter();
            this.bufferChange = new i0.EventEmitter();
            this.measureUnitChange = new i0.EventEmitter();
        }
        Object.defineProperty(SpatialFilterListComponent.prototype, "store", {
            get: function () {
                return this._store;
            },
            set: function (store) {
                this._store = store;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterListComponent.prototype, "queryType", {
            get: function () {
                return this._queryType;
            },
            set: function (queryType) {
                this.formControl.setValue('');
                this._queryType = queryType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterListComponent.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
                if (!value) {
                    this.zoneWithBuffer = undefined;
                    this.bufferFormControl.setValue(0);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterListComponent.prototype, "measureUnits", {
            /**
             * Available measure units for the measure type given
             * @internal
             */
            get: function () {
                return [exports.MeasureLengthUnit.Meters, exports.MeasureLengthUnit.Kilometers];
            },
            enumerable: false,
            configurable: true
        });
        SpatialFilterListComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.formValueChanges$$ = this.formControl.valueChanges.subscribe(function (value) {
                if (value.length) {
                    _this.store.view.filter(function (feature) {
                        var filterNormalized = value.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                        var featureNameNormalized = feature.properties.nom.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                        return featureNameNormalized.includes(filterNormalized);
                    });
                }
            });
            this.bufferValueChanges$$ = this.bufferFormControl.valueChanges
                .pipe(operators.debounceTime(500), operators.distinctUntilChanged())
                .subscribe(function (value) {
                if (_this.measureUnit === exports.MeasureLengthUnit.Meters && value > 0 && value <= 100000) {
                    _this.bufferChange.emit(value);
                    _this.spatialFilterService.loadBufferGeometry(_this.selectedZone, exports.SpatialFilterType.Predefined, value, _this.queryType).subscribe(function (featureGeom) {
                        _this.zoneWithBuffer = featureGeom;
                        _this.zoneWithBufferChange.emit(_this.zoneWithBuffer);
                    });
                }
                else if (_this.measureUnit === exports.MeasureLengthUnit.Kilometers && value > 0 && value <= 100) {
                    _this.bufferChange.emit(value);
                    _this.spatialFilterService.loadBufferGeometry(_this.selectedZone, exports.SpatialFilterType.Predefined, value * 1000, _this.queryType).subscribe(function (featureGeom) {
                        _this.zoneWithBuffer = featureGeom;
                        _this.zoneWithBufferChange.emit(_this.zoneWithBuffer);
                    });
                }
                else if (value === 0 && _this.layers.length > 0) {
                    _this.bufferChange.emit(value);
                    _this.zoneWithBufferChange.emit(_this.selectedZone);
                }
                else if (value < 0 ||
                    (_this.measureUnit === exports.MeasureLengthUnit.Meters && value > 100000) ||
                    (_this.measureUnit === exports.MeasureLengthUnit.Kilometers && value > 100)) {
                    _this.bufferFormControl.setValue(0);
                    _this.messageService.alert(_this.languageService.translate.instant('igo.geo.spatialFilter.bufferAlert'), _this.languageService.translate.instant('igo.geo.spatialFilter.warning'));
                }
            });
        };
        SpatialFilterListComponent.prototype.ngOnDestroy = function () {
            this.formValueChanges$$.unsubscribe();
        };
        SpatialFilterListComponent.prototype.displayFn = function (feature) {
            return feature ? feature.properties.nom : undefined;
        };
        SpatialFilterListComponent.prototype.onZoneChange = function (feature) {
            var _this = this;
            if (feature && this.queryType) {
                this.spatialFilterService.loadItemById(feature, this.queryType)
                    .subscribe(function (featureGeom) {
                    _this.selectedZone = featureGeom;
                    _this.zoneChange.emit(featureGeom);
                });
            }
        };
        /**
         * Set the measure unit
         * @internal
         */
        SpatialFilterListComponent.prototype.onMeasureUnitChange = function (unit) {
            if (unit === this.measureUnit) {
                return;
            }
            else {
                this.measureUnit = unit;
                this.measureUnitChange.emit(this.measureUnit);
                this.measureUnit === exports.MeasureLengthUnit.Meters ?
                    this.bufferFormControl.setValue(this.bufferFormControl.value * 1000) :
                    this.bufferFormControl.setValue(this.bufferFormControl.value / 1000);
            }
        };
        return SpatialFilterListComponent;
    }());
    SpatialFilterListComponent.ɵfac = function SpatialFilterListComponent_Factory(t) { return new (t || SpatialFilterListComponent)(i0__namespace.ɵɵdirectiveInject(SpatialFilterService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService)); };
    SpatialFilterListComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SpatialFilterListComponent, selectors: [["igo-spatial-filter-list"]], inputs: { store: "store", queryType: "queryType", zone: "zone", layers: "layers" }, outputs: { zoneChange: "zoneChange", zoneWithBufferChange: "zoneWithBufferChange", bufferChange: "bufferChange", measureUnitChange: "measureUnitChange" }, decls: 18, vars: 17, consts: [[1, "form-list"], [1, "zone-list"], ["type", "text", "matInput", "", 3, "placeholder", "formControl", "matAutocomplete"], ["input", ""], [3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [3, "value", 4, "ngFor", "ngForOf"], [1, "buffer-div"], [1, "buffer-form"], [1, "buffer"], ["type", "number", "matInput", "", 3, "placeholder", "formControl", "value", "readonly"], [1, "unit-field"], [3, "value", "selectionChange"], [3, "value"]], template: function SpatialFilterListComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "form", 0);
                i0__namespace.ɵɵelementStart(1, "mat-form-field", 1);
                i0__namespace.ɵɵelement(2, "input", 2, 3);
                i0__namespace.ɵɵpipe(4, "translate");
                i0__namespace.ɵɵelementStart(5, "mat-autocomplete", 4, 5);
                i0__namespace.ɵɵlistener("optionSelected", function SpatialFilterListComponent_Template_mat_autocomplete_optionSelected_5_listener($event) { return ctx.onZoneChange($event.option.value); });
                i0__namespace.ɵɵtemplate(7, SpatialFilterListComponent_mat_option_7_Template, 2, 2, "mat-option", 6);
                i0__namespace.ɵɵpipe(8, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "form");
                i0__namespace.ɵɵelementStart(10, "div", 7);
                i0__namespace.ɵɵelementStart(11, "form", 8);
                i0__namespace.ɵɵelementStart(12, "mat-form-field", 9);
                i0__namespace.ɵɵelement(13, "input", 10);
                i0__namespace.ɵɵpipe(14, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(15, "mat-form-field", 11);
                i0__namespace.ɵɵelementStart(16, "mat-select", 12);
                i0__namespace.ɵɵlistener("selectionChange", function SpatialFilterListComponent_Template_mat_select_selectionChange_16_listener($event) { return ctx.onMeasureUnitChange($event.value); });
                i0__namespace.ɵɵtemplate(17, SpatialFilterListComponent_mat_option_17_Template, 3, 4, "mat-option", 6);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r1 = i0__namespace.ɵɵreference(6);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(4, 11, "igo.geo.spatialFilter.listLabel"));
                i0__namespace.ɵɵproperty("formControl", ctx.formControl)("matAutocomplete", _r1);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("displayWith", ctx.displayFn);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(8, 13, ctx.store.view.all$()));
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(14, 15, "igo.geo.spatialFilter.buffer"));
                i0__namespace.ɵɵproperty("formControl", ctx.bufferFormControl)("value", 0)("readonly", !ctx.zone);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("value", ctx.measureUnit);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.measureUnits);
            }
        }, directives: [i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.NgForm, i12__namespace.MatFormField, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor, i6__namespace$1.MatAutocompleteTrigger, i16__namespace.NgControlStatus, i16__namespace.FormControlDirective, i6__namespace$1.MatAutocomplete, i1__namespace$1.NgForOf, i16__namespace.NumberValueAccessor, i13__namespace.MatSelect, i9__namespace.MatOption], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [".buffer-div[_ngcontent-%COMP%]{display:flex;width:100%;margin-left:2px;padding:5px}.zone-list[_ngcontent-%COMP%]{padding:5px;width:95%;margin-left:2px}.buffer[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;width:110%}.unit-field[_ngcontent-%COMP%]{width:110px;margin-left:30px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SpatialFilterListComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-spatial-filter-list',
                        templateUrl: './spatial-filter-list.component.html',
                        styleUrls: ['./spatial-filter-list.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: SpatialFilterService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }]; }, { store: [{
                    type: i0.Input
                }], queryType: [{
                    type: i0.Input
                }], zone: [{
                    type: i0.Input
                }], layers: [{
                    type: i0.Input
                }], zoneChange: [{
                    type: i0.Output
                }], zoneWithBufferChange: [{
                    type: i0.Output
                }], bufferChange: [{
                    type: i0.Output
                }], measureUnitChange: [{
                    type: i0.Output
                }] });
    })();

    function SpatialFilterItemComponent_mat_slide_toggle_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 17);
            i0__namespace.ɵɵlistener("change", function SpatialFilterItemComponent_mat_slide_toggle_5_Template_mat_slide_toggle_change_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.onDrawControlChange(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r0.drawControlIsActive)("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.spatialFilter.drawControl"), " ");
        }
    }
    function SpatialFilterItemComponent_mat_slide_toggle_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 17);
            i0__namespace.ɵɵlistener("change", function SpatialFilterItemComponent_mat_slide_toggle_6_Template_mat_slide_toggle_change_0_listener() { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r12 = i0__namespace.ɵɵnextContext(); return ctx_r12.onfreehandControlChange(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("checked", ctx_r1.freehandDrawIsActive)("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.spatialFilter.freehandControl"), " ");
        }
    }
    function SpatialFilterItemComponent_div_7_mat_option_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 6);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measureUnit_r15 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", measureUnit_r15);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.measure." + measureUnit_r15), " ");
        }
    }
    function SpatialFilterItemComponent_div_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r17_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 18);
            i0__namespace.ɵɵelementStart(1, "form", 19);
            i0__namespace.ɵɵelementStart(2, "mat-form-field", 20);
            i0__namespace.ɵɵelement(3, "input", 21);
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(5, "mat-form-field", 22);
            i0__namespace.ɵɵelementStart(6, "mat-select", 23);
            i0__namespace.ɵɵlistener("selectionChange", function SpatialFilterItemComponent_div_7_Template_mat_select_selectionChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r17_1); var ctx_r16 = i0__namespace.ɵɵnextContext(); return ctx_r16.onMeasureUnitChange($event.value); });
            i0__namespace.ɵɵtemplate(7, SpatialFilterItemComponent_div_7_mat_option_7_Template, 3, 4, "mat-option", 24);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(4, 6, "igo.geo.spatialFilter.buffer"));
            i0__namespace.ɵɵproperty("formControl", ctx_r2.bufferFormControl)("value", 0)("readonly", ctx_r2.formControl.value === null);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("value", ctx_r2.measureUnit);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r2.measureUnits);
        }
    }
    function SpatialFilterItemComponent_div_8_mat_option_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 6);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measureUnit_r19 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", measureUnit_r19);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.measure." + measureUnit_r19), " ");
        }
    }
    function SpatialFilterItemComponent_div_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r21_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 25);
            i0__namespace.ɵɵelementStart(1, "form", 26);
            i0__namespace.ɵɵelementStart(2, "mat-form-field", 27);
            i0__namespace.ɵɵelementStart(3, "input", 28);
            i0__namespace.ɵɵlistener("input", function SpatialFilterItemComponent_div_8_Template_input_input_3_listener() { i0__namespace.ɵɵrestoreView(_r21_1); var ctx_r20 = i0__namespace.ɵɵnextContext(); return ctx_r20.getRadius(); });
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(5, "mat-form-field", 22);
            i0__namespace.ɵɵelementStart(6, "mat-select", 23);
            i0__namespace.ɵɵlistener("selectionChange", function SpatialFilterItemComponent_div_8_Template_mat_select_selectionChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r21_1); var ctx_r22 = i0__namespace.ɵɵnextContext(); return ctx_r22.onMeasureUnitChange($event.value); });
            i0__namespace.ɵɵtemplate(7, SpatialFilterItemComponent_div_8_mat_option_7_Template, 3, 4, "mat-option", 24);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(4, 6, "igo.geo.spatialFilter.radius"));
            i0__namespace.ɵɵproperty("formControl", ctx_r3.radiusFormControl)("value", 1000)("readonly", ctx_r3.freehandDrawIsActive && ctx_r3.formControl.value === null);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("value", ctx_r3.measureUnit);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r3.measureUnits);
        }
    }
    function SpatialFilterItemComponent_mat_radio_button_13_Template(rf, ctx) {
        if (rf & 1) {
            var _r25_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-radio-button", 29);
            i0__namespace.ɵɵlistener("change", function SpatialFilterItemComponent_mat_radio_button_13_Template_mat_radio_button_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r25_1); var ctx_r24 = i0__namespace.ɵɵnextContext(); return ctx_r24.onItemTypeChange($event); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var item_r23 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", item_r23);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.spatialFilter." + item_r23), " ");
        }
    }
    function SpatialFilterItemComponent_div_14_mat_header_cell_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-header-cell", 40);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.spatialFilter.Thematics"));
        }
    }
    function SpatialFilterItemComponent_div_14_mat_header_cell_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r33_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-header-cell", 41);
            i0__namespace.ɵɵelementStart(1, "mat-checkbox", 42);
            i0__namespace.ɵɵlistener("change", function SpatialFilterItemComponent_div_14_mat_header_cell_5_Template_mat_checkbox_change_1_listener($event) { i0__namespace.ɵɵrestoreView(_r33_1); var ctx_r32 = i0__namespace.ɵɵnextContext(2); return $event ? ctx_r32.masterToggle() : null; });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r27 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("checked", ctx_r27.isAllSelected())("indeterminate", ctx_r27.selectedThematics.hasValue() && !ctx_r27.isAllSelected());
        }
    }
    function SpatialFilterItemComponent_div_14_mat_header_row_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-header-row");
        }
    }
    function SpatialFilterItemComponent_div_14_mat_row_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-row");
        }
    }
    function SpatialFilterItemComponent_div_14_mat_tree_node_9_Template(rf, ctx) {
        if (rf & 1) {
            var _r38_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-tree-node", 43);
            i0__namespace.ɵɵelementStart(1, "li", 44);
            i0__namespace.ɵɵelement(2, "button", 45);
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵelementStart(4, "mat-checkbox", 46);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_div_14_mat_tree_node_9_Template_mat_checkbox_click_4_listener($event) { return $event.stopPropagation(); })("change", function SpatialFilterItemComponent_div_14_mat_tree_node_9_Template_mat_checkbox_change_4_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r38_1); var node_r35 = restoredCtx.$implicit; var ctx_r37 = i0__namespace.ɵɵnextContext(2); return $event ? ctx_r37.onToggleChange(node_r35) : null; });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var node_r35 = ctx.$implicit;
            var ctx_r30 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate1(" ", node_r35.name, " ");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("checked", ctx_r30.selectedThematics.isSelected(node_r35));
        }
    }
    function SpatialFilterItemComponent_div_14_mat_nested_tree_node_10_Template(rf, ctx) {
        if (rf & 1) {
            var _r41_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-nested-tree-node");
            i0__namespace.ɵɵelementStart(1, "div", 44);
            i0__namespace.ɵɵelementStart(2, "button", 47);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_div_14_mat_nested_tree_node_10_Template_button_click_2_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r41_1); var node_r39 = restoredCtx.$implicit; var ctx_r40 = i0__namespace.ɵɵnextContext(2); return ctx_r40.onToggleClick(node_r39); });
            i0__namespace.ɵɵelement(3, "mat-icon", 48);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵelementStart(5, "mat-checkbox", 49);
            i0__namespace.ɵɵlistener("change", function SpatialFilterItemComponent_div_14_mat_nested_tree_node_10_Template_mat_checkbox_change_5_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r41_1); var node_r39 = restoredCtx.$implicit; var ctx_r42 = i0__namespace.ɵɵnextContext(2); return $event ? ctx_r42.childrensToggle(node_r39) : null; });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "ul", 50);
            i0__namespace.ɵɵelementContainer(7, 51);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var node_r39 = ctx.$implicit;
            var ctx_r31 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("svgIcon", ctx_r31.treeControl.isExpanded(node_r39) ? "chevron-down" : "chevron-right");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", node_r39.name, " ");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("checked", ctx_r31.isAllSelected(node_r39))("indeterminate", ctx_r31.hasChildrenSelected(node_r39) && !ctx_r31.isAllSelected(node_r39));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵclassProp("example-tree-invisible", !ctx_r31.treeControl.isExpanded(node_r39));
        }
    }
    function SpatialFilterItemComponent_div_14_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 30);
            i0__namespace.ɵɵelementStart(1, "mat-table");
            i0__namespace.ɵɵelementContainerStart(2, 31);
            i0__namespace.ɵɵtemplate(3, SpatialFilterItemComponent_div_14_mat_header_cell_3_Template, 3, 3, "mat-header-cell", 32);
            i0__namespace.ɵɵelementContainerEnd();
            i0__namespace.ɵɵelementContainerStart(4, 33);
            i0__namespace.ɵɵtemplate(5, SpatialFilterItemComponent_div_14_mat_header_cell_5_Template, 2, 2, "mat-header-cell", 34);
            i0__namespace.ɵɵelementContainerEnd();
            i0__namespace.ɵɵtemplate(6, SpatialFilterItemComponent_div_14_mat_header_row_6_Template, 1, 0, "mat-header-row", 35);
            i0__namespace.ɵɵtemplate(7, SpatialFilterItemComponent_div_14_mat_row_7_Template, 1, 0, "mat-row", 36);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(8, "mat-tree", 37);
            i0__namespace.ɵɵtemplate(9, SpatialFilterItemComponent_div_14_mat_tree_node_9_Template, 5, 2, "mat-tree-node", 38);
            i0__namespace.ɵɵtemplate(10, SpatialFilterItemComponent_div_14_mat_nested_tree_node_10_Template, 8, 6, "mat-nested-tree-node", 39);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵproperty("matHeaderRowDef", ctx_r5.displayedColumns);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matRowDefColumns", ctx_r5.displayedColumns);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("dataSource", ctx_r5.dataSource)("treeControl", ctx_r5.treeControl);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTreeNodeDefWhen", ctx_r5.hasChild);
        }
    }
    function SpatialFilterItemComponent_button_16_Template(rf, ctx) {
        if (rf & 1) {
            var _r44_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 52);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_button_16_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r44_1); var ctx_r43 = i0__namespace.ɵɵnextContext(); return ctx_r43.clearSearch(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("disabled", ctx_r6.disabledClearSearch());
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.spatialFilter.clearSearch"), " ");
        }
    }
    function SpatialFilterItemComponent_button_17_Template(rf, ctx) {
        if (rf & 1) {
            var _r46_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 53);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_button_17_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r46_1); var ctx_r45 = i0__namespace.ɵɵnextContext(); return ctx_r45.clearDrawZone(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("disabled", ctx_r7.formControl.value === null);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.spatialFilter.clearForm"), " ");
        }
    }
    function SpatialFilterItemComponent_button_27_Template(rf, ctx) {
        if (rf & 1) {
            var _r48_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 54);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_button_27_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r48_1); var ctx_r47 = i0__namespace.ɵɵnextContext(); return ctx_r47.toggleVisibleList(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 55);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.spatialFilter.showSearchResults"));
        }
    }
    function SpatialFilterItemComponent_div_28_button_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r51_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 59);
            i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_div_28_button_1_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r51_1); var ctx_r50 = i0__namespace.ɵɵnextContext(2); return ctx_r50.toggleVisibleList(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 60);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.spatialFilter.hideSearchResults"));
        }
    }
    function SpatialFilterItemComponent_div_28_Template(rf, ctx) {
        if (rf & 1) {
            var _r53_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 56);
            i0__namespace.ɵɵtemplate(1, SpatialFilterItemComponent_div_28_button_1_Template, 3, 3, "button", 57);
            i0__namespace.ɵɵelementStart(2, "igo-entity-table", 58);
            i0__namespace.ɵɵlistener("entitySelectChange", function SpatialFilterItemComponent_div_28_Template_igo_entity_table_entitySelectChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r53_1); var ctx_r52 = i0__namespace.ɵɵnextContext(); return ctx_r52.entityChange.emit($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r9 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r9.listIsVisible);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("template", ctx_r9.tableTemplate)("store", ctx_r9.store);
        }
    }
    /**
     * Spatial-Filter-Item (search parameters)
     */
    var SpatialFilterItemComponent = /** @class */ (function () {
        function SpatialFilterItemComponent(cdRef, spatialFilterService, messageService, languageService) {
            this.cdRef = cdRef;
            this.spatialFilterService = spatialFilterService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.layers = [];
            this.allLayers = [];
            this.toggleSearch = new i0.EventEmitter();
            this.itemTypeChange = new i0.EventEmitter();
            this.thematicChange = new i0.EventEmitter();
            this.drawZoneEvent = new i0.EventEmitter();
            this.bufferEvent = new i0.EventEmitter();
            this.zoneWithBufferChange = new i0.EventEmitter();
            this.measureUnitChange = new i0.EventEmitter();
            this.radiusEvent = new i0.EventEmitter();
            this.freehandControl = new i0.EventEmitter();
            this.clearButtonEvent = new i0.EventEmitter();
            this.clearSearchEvent = new i0.EventEmitter();
            this.export = new i0.EventEmitter();
            this.openWorkspace = new i0.EventEmitter();
            this.entityChange = new i0.EventEmitter();
            this.itemType = [exports.SpatialFilterItemType.Address, exports.SpatialFilterItemType.Thematics];
            this.selectedItemType = exports.SpatialFilterItemType.Address;
            this.treeControl = new tree.NestedTreeControl(function (node) { return node.children; });
            // For thematics and results tables
            this.displayedColumns = ['name', 'select'];
            this.childrens = [];
            this.groups = [];
            this.thematics = [];
            this.dataSource = new i24.MatTreeNestedDataSource();
            this.selectedThematics = new collections.SelectionModel(true, []);
            // For geometry form field input
            this.value$ = new rxjs.BehaviorSubject(undefined);
            this.drawGuide$ = new rxjs.BehaviorSubject(null);
            this.overlayStyle$ = new rxjs.BehaviorSubject(undefined);
            this.drawStyle$ = new rxjs.BehaviorSubject(undefined);
            this.formControl = new i16.FormControl();
            this.geometryTypeField = false;
            this.geometryTypes = ['Point', 'Polygon'];
            this.drawGuideField = false;
            this.drawGuide = null;
            this.drawGuidePlaceholder = '';
            this.measure = false;
            this.drawControlIsActive = true;
            this.freehandDrawIsActive = false;
            this.buffer = 0;
            this.radiusFormControl = new i16.FormControl();
            this.bufferFormControl = new i16.FormControl();
            this.measureUnit = exports.MeasureLengthUnit.Meters;
            this.listIsVisible = true;
        }
        Object.defineProperty(SpatialFilterItemComponent.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                var _this = this;
                this._type = type;
                var index = this.geometryTypes.findIndex(function (geom) { return geom === _this.type; });
                this.geometryType = this.geometryTypes[index];
                this.formControl.reset();
                this.radius = undefined;
                this.drawGuide$.next(null);
                this.drawStyle$.next(undefined);
                // Necessary to keep reference to the geometry form field input
                if (this.type === exports.SpatialFilterType.Predefined) {
                    var geojson = {
                        type: 'Point',
                        coordinates: ''
                    };
                    this.formControl.setValue(geojson);
                }
                // Necessary to apply the right style when geometry type is Point
                if (this.type === exports.SpatialFilterType.Point) {
                    this.radius = 1000; // Base radius
                    this.radiusFormControl.setValue(this.radius);
                    this.PointStyle = function (feature, resolution) {
                        var geom = feature.getGeometry();
                        var coordinates = olproj__namespace.transform(geom.getCoordinates(), _this.map.projection, 'EPSG:4326');
                        return new olstyle__namespace.Style({
                            image: new olstyle__namespace.Circle({
                                radius: _this.radius / (Math.cos((Math.PI / 180) * coordinates[1])) / resolution,
                                stroke: new olstyle__namespace.Stroke({
                                    width: 2,
                                    color: 'rgba(0, 153, 255)'
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: 'rgba(0, 153, 255, 0.2)'
                                })
                            })
                        });
                    };
                    this.overlayStyle = this.PointStyle;
                    this.drawStyle$.next(this.overlayStyle);
                }
                else {
                    // If geometry types is Polygon
                    this.radius = undefined;
                    this.PolyStyle = function () {
                        return new olstyle__namespace.Style({
                            stroke: new olstyle__namespace.Stroke({
                                width: 2,
                                color: 'rgba(0, 153, 255)'
                            }),
                            fill: new olstyle__namespace.Fill({
                                color: 'rgba(0, 153, 255, 0.2)'
                            })
                        });
                    };
                    var color_1 = [0, 153, 255];
                    var drawStyle = function () {
                        return new olstyle__namespace.Style({
                            image: new olstyle__namespace.Circle({
                                radius: 8,
                                stroke: new olstyle__namespace.Stroke({
                                    width: 2,
                                    color: 'rgba(0, 153, 255)'
                                }),
                                fill: new olstyle__namespace.Fill({
                                    color: 'rgba(0, 153, 255, 0.2)'
                                })
                            }),
                            stroke: new olstyle__namespace.Stroke({
                                color: color_1.concat([1]),
                                width: 2
                            }),
                            fill: new olstyle__namespace.Fill({
                                color: color_1.concat([0.2])
                            })
                        });
                    };
                    this.overlayStyle = this.PolyStyle;
                    this.drawStyle$.next(drawStyle);
                }
                this.overlayStyle$.next(this.overlayStyle);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterItemComponent.prototype, "store", {
            get: function () {
                return this._store;
            },
            set: function (store) {
                var _this = this;
                this._store = store;
                this._store.entities$.subscribe(function () { _this.cdRef.detectChanges(); });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterItemComponent.prototype, "measureUnits", {
            /**
             * Available measure units for the measure type given
             * @internal
             */
            get: function () {
                return [exports.MeasureLengthUnit.Meters, exports.MeasureLengthUnit.Kilometers];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SpatialFilterItemComponent.prototype, "thematicLength", {
            get: function () {
                return this._thematicLength;
            },
            set: function (value) {
                this._thematicLength = value;
            },
            enumerable: false,
            configurable: true
        });
        SpatialFilterItemComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.spatialFilterService.loadThematicsList()
                .subscribe(function (items) {
                var e_1, _a;
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        _this.childrens.push(item);
                        _this.childrens.sort(function (a, b) {
                            return a.name.localeCompare(b.name);
                        });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                _this.groups.push(_this.languageService.translate.instant('igo.geo.terrapi.limites'));
                var limits = {
                    name: _this.groups[0],
                    children: []
                };
                _this.thematics.push(limits);
                _this.childrens.forEach(function (child) {
                    if (child.group && (_this.groups.indexOf(child.group) === -1)) {
                        _this.groups.push(child.group);
                        var thematic = {
                            name: child.group,
                            children: []
                        };
                        _this.thematics.push(thematic);
                    }
                    if (!child.group) {
                        if (child.name === _this.languageService.translate.instant('igo.geo.terrapi.AdmRegion') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.Mun') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.Arrond') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.CircFed') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.CircProv') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.DirReg') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.MRC') ||
                            child.name === _this.languageService.translate.instant('igo.geo.terrapi.RegTour')) {
                            child.group = limits.name;
                        }
                        else if (child.name === _this.languageService.translate.instant('igo.geo.terrapi.routes')) {
                            child.group = _this.languageService.translate.instant('igo.geo.spatialFilter.group.transport');
                        }
                        else {
                            var thematic = {
                                name: child.name,
                                children: [],
                                source: child.source
                            };
                            _this.thematics.push(thematic);
                        }
                    }
                    _this.thematics.sort(function (a, b) {
                        return a.name.localeCompare(b.name);
                    });
                });
                _this.thematics.forEach(function (thematic) {
                    var e_2, _a;
                    try {
                        for (var _b = __values(_this.childrens), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var child = _c.value;
                            if (child.group === thematic.name) {
                                thematic.children.push(child);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                });
            });
            this.dataSource.data = this.thematics;
            this.drawGuide$.next(null);
            this.value$.next(this.formControl.value ? this.formControl.value : undefined);
            this.value$$ = this.formControl.valueChanges.subscribe(function (value) {
                if (value) {
                    _this.value$.next(value);
                    _this.drawZone = _this.formControl.value;
                    if (_this.buffer !== 0) {
                        _this.drawZoneEvent.emit(_this.drawZone);
                        _this.bufferFormControl.setValue(_this.buffer);
                    }
                }
                else {
                    _this.value$.next(undefined);
                    _this.drawZone = undefined;
                }
            });
            this.value$.subscribe(function () {
                _this.getRadius();
                _this.cdRef.detectChanges();
            });
            this.radiusChanges$$ = this.radiusFormControl.valueChanges.subscribe(function () {
                _this.getRadius();
                _this.cdRef.detectChanges();
            });
            this.bufferChanges$$ = this.bufferFormControl.valueChanges
                .pipe(operators.debounceTime(500))
                .subscribe(function (value) {
                if (_this.measureUnit === exports.MeasureLengthUnit.Meters && value > 0 && value <= 100000) {
                    _this.buffer = value;
                    _this.bufferEvent.emit(value);
                    _this.spatialFilterService.loadBufferGeometry(_this.drawZone, exports.SpatialFilterType.Polygon, value).subscribe(function (featureGeom) {
                        _this.zoneWithBuffer = featureGeom;
                        _this.zoneWithBufferChange.emit(_this.zoneWithBuffer);
                    });
                }
                else if (_this.measureUnit === exports.MeasureLengthUnit.Kilometers && value > 0 && value <= 100) {
                    _this.buffer = value;
                    _this.bufferEvent.emit(value);
                    _this.spatialFilterService.loadBufferGeometry(_this.drawZone, exports.SpatialFilterType.Polygon, value * 1000).subscribe(function (featureGeom) {
                        _this.zoneWithBuffer = featureGeom;
                        _this.zoneWithBufferChange.emit(_this.zoneWithBuffer);
                    });
                }
                else if (value === 0) {
                    _this.buffer = value;
                    _this.bufferEvent.emit(value);
                    _this.drawZoneEvent.emit(_this.drawZone);
                }
                else if (value < 0 ||
                    (_this.measureUnit === exports.MeasureLengthUnit.Meters && value > 100000) ||
                    (_this.measureUnit === exports.MeasureLengthUnit.Kilometers && value > 100)) {
                    _this.bufferFormControl.setValue(0);
                    _this.buffer = 0;
                    _this.messageService.alert(_this.languageService.translate.instant('igo.geo.spatialFilter.bufferAlert'), _this.languageService.translate.instant('igo.geo.spatialFilter.warning'));
                }
            });
            var selectedRecordStrategy = new i6.EntityStoreFilterSelectionStrategy({});
            var selectionStrategy = new FeatureStoreSelectionStrategy({
                layer: new VectorLayer({
                    zIndex: 300,
                    source: new FeatureDataSource(),
                    style: undefined,
                    showInLayerList: false,
                    exportable: false,
                    browsable: false
                }),
                map: this.map,
                hitTolerance: 15,
                motion: exports.FeatureMotion.Default,
                many: true,
                dragBox: true
            });
            this.store.addStrategy(selectionStrategy, true);
            this.store.addStrategy(selectedRecordStrategy, false);
        };
        /**
         * Unsubscribe to the value stream
         * @internal
         */
        SpatialFilterItemComponent.prototype.ngOnDestroy = function () {
            this.value$$.unsubscribe();
            this.radiusChanges$$.unsubscribe();
            this.bufferChanges$$.unsubscribe();
            this.cdRef.detach();
            if (this.radiusChanges$$) {
                this.radiusChanges$$.unsubscribe();
            }
            if (this.value$$) {
                this.value$$.unsubscribe();
            }
        };
        SpatialFilterItemComponent.prototype.onItemTypeChange = function (event) {
            this.selectedItemType = event.value;
            this.itemTypeChange.emit(this.selectedItemType);
        };
        /**
         * Set the measure unit
         * @internal
         */
        SpatialFilterItemComponent.prototype.onMeasureUnitChange = function (unit) {
            if (unit === this.measureUnit) {
                return;
            }
            else {
                this.measureUnit = unit;
                this.measureUnitChange.emit(this.measureUnit);
                if (this.isPolygon()) {
                    this.measureUnit === exports.MeasureLengthUnit.Meters ?
                        this.bufferFormControl.setValue(this.bufferFormControl.value * 1000) :
                        this.bufferFormControl.setValue(this.bufferFormControl.value / 1000);
                }
                else if (this.isPoint()) {
                    this.measureUnit === exports.MeasureLengthUnit.Meters ?
                        this.radiusFormControl.setValue(this.radiusFormControl.value * 1000) :
                        this.radiusFormControl.setValue(this.radiusFormControl.value / 1000);
                }
            }
        };
        SpatialFilterItemComponent.prototype.isPredefined = function () {
            return this.type === exports.SpatialFilterType.Predefined;
        };
        SpatialFilterItemComponent.prototype.isPolygon = function () {
            return this.type === exports.SpatialFilterType.Polygon;
        };
        SpatialFilterItemComponent.prototype.isPoint = function () {
            return this.type === exports.SpatialFilterType.Point;
        };
        SpatialFilterItemComponent.prototype.hasChild = function (_, node) {
            if (node.children) {
                return node.children.length;
            }
            return false;
        };
        SpatialFilterItemComponent.prototype.onToggleClick = function (node) {
            this.treeControl.isExpanded(node) ? this.treeControl.collapse(node) : this.treeControl.expand(node);
        };
        SpatialFilterItemComponent.prototype.isAllSelected = function (node) {
            var _this = this;
            var numSelected;
            var numNodes = 0;
            if (!node) {
                numSelected = this.selectedThematics.selected.length;
                this.thematics.forEach(function (thematic) {
                    if (_this.groups.indexOf(thematic.name) === -1) {
                        numNodes++;
                    }
                });
                this.childrens.forEach(function (children) {
                    if (!_this.thematics.find(function (thematic) { return thematic.source === children.source; })) {
                        numNodes++;
                    }
                });
            }
            else {
                numSelected = node.children.length;
                node.children.forEach(function (children) {
                    if (_this.selectedThematics.selected.find(function (thematic) { return thematic === children; })) {
                        numNodes++;
                    }
                });
            }
            if (numNodes >= 1) {
                return numSelected === numNodes;
            }
            else {
                return false;
            }
        };
        SpatialFilterItemComponent.prototype.hasChildrenSelected = function (node) {
            var _this = this;
            var bool = false;
            node.children.forEach(function (child) {
                if (_this.selectedThematics.selected.find(function (thematic) { return thematic.source === child.source; })) {
                    bool = true;
                }
            });
            return bool;
        };
        /**
         * Apply header checkbox
         */
        SpatialFilterItemComponent.prototype.masterToggle = function () {
            var e_3, _a;
            var _this = this;
            this.isAllSelected() ?
                this.selectedThematics.clear() :
                this.selectAll();
            var selectedThematicsName = [];
            try {
                for (var _b = __values(this.selectedThematics.selected), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var thematic = _c.value;
                    selectedThematicsName.push(thematic);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.isAllSelected()) {
                this.thematics.forEach(function (thematic) {
                    if (_this.hasChild(0, thematic)) {
                        _this.treeControl.expand(thematic);
                    }
                });
            }
            else {
                this.thematics.forEach(function (thematic) {
                    if (_this.hasChild(0, thematic)) {
                        _this.treeControl.collapse(thematic);
                    }
                });
            }
            this.thematicChange.emit(selectedThematicsName);
        };
        SpatialFilterItemComponent.prototype.selectAll = function (node) {
            var _this = this;
            if (!node) {
                this.thematics.forEach(function (thematic) {
                    if (_this.groups.indexOf(thematic.name) === -1) {
                        _this.selectedThematics.select(thematic);
                    }
                });
                this.childrens.forEach(function (children) {
                    if (!_this.selectedThematics.selected.find(function (thematic) { return thematic.source === children.source; })) {
                        _this.selectedThematics.select(children);
                    }
                });
            }
            else {
                if (this.hasChild(0, node)) {
                    node.children.forEach(function (children) { return _this.selectedThematics.select(children); });
                }
            }
        };
        SpatialFilterItemComponent.prototype.childrensToggle = function (node) {
            var e_4, _a;
            var _this = this;
            this.isAllSelected(node) ?
                node.children.forEach(function (child) { return _this.selectedThematics.deselect(child); }) :
                this.selectAll(node);
            var selectedThematicsName = [];
            try {
                for (var _b = __values(this.selectedThematics.selected), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var thematic = _c.value;
                    selectedThematicsName.push(thematic);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.treeControl.expand(node);
            this.thematicChange.emit(selectedThematicsName);
        };
        /**
         * Apply changes to the thematics selected tree and emit event
         */
        SpatialFilterItemComponent.prototype.onToggleChange = function (nodeSelected) {
            var e_5, _a;
            var _this = this;
            var selected = false;
            if (this.selectedThematics.selected.find(function (thematic) { return thematic.source === nodeSelected.source; }) !== undefined) {
                selected = true;
            }
            this.childrens.forEach(function (children) {
                if (children === nodeSelected && selected === false) {
                    _this.selectedThematics.select(children);
                }
                if (children === nodeSelected && selected === true) {
                    _this.selectedThematics.deselect(children);
                }
            });
            this.thematics.forEach(function (thematic) {
                if (thematic === nodeSelected && selected === false) {
                    _this.selectedThematics.select(thematic);
                }
                if (thematic === nodeSelected && selected === true) {
                    _this.selectedThematics.deselect(thematic);
                }
            });
            var selectedThematicsName = [];
            try {
                for (var _b = __values(this.selectedThematics.selected), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var thematic = _c.value;
                    selectedThematicsName.push(thematic);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            this.thematicChange.emit(selectedThematicsName);
        };
        SpatialFilterItemComponent.prototype.onDrawControlChange = function () {
            this.drawControlIsActive = !this.drawControlIsActive;
        };
        SpatialFilterItemComponent.prototype.onfreehandControlChange = function () {
            this.freehandDrawIsActive = !this.freehandDrawIsActive;
            this.freehandControl.emit(this.freehandDrawIsActive);
        };
        /**
         * Launch search button
         */
        SpatialFilterItemComponent.prototype.toggleSearchButton = function () {
            var _this = this;
            if (!this.isPredefined()) {
                if (this.buffer > 0) {
                    this.zoneWithBuffer.meta = {
                        id: undefined,
                        title: 'Zone'
                    };
                    this.zoneWithBuffer.properties = {
                        nom: 'Zone',
                        type: this.type
                    };
                    this.drawZoneEvent.emit(this.zoneWithBuffer);
                }
                else {
                    this.drawZone.meta = {
                        id: undefined,
                        title: 'Zone'
                    };
                    this.drawZone.properties = {
                        nom: 'Zone',
                        type: this.type
                    };
                    this.drawZoneEvent.emit(this.drawZone);
                }
            }
            if (this.isPoint()) {
                this.radiusEvent.emit(this.radius);
            }
            else if (this.isPolygon()) {
                this.bufferEvent.emit(this.buffer);
            }
            this.toggleSearch.emit();
            this.store.entities$.pipe(operators.debounceTime(500)).subscribe(function (value) {
                if (value.length && _this.layers.length === _this.thematicLength + 1) {
                    _this.openWorkspace.emit();
                    _this.createTableTemplate();
                }
            });
        };
        /**
         * Launch clear button (clear store and map layers)
         */
        SpatialFilterItemComponent.prototype.clearButton = function () {
            this.loading = true;
            if (this.store) {
                this.store.clear();
            }
            if (this.isPoint() || this.isPolygon()) {
                this.drawZone = undefined;
                this.formControl.reset();
            }
            this.bufferFormControl.setValue(0);
            this.buffer = 0;
            this.bufferEvent.emit(0);
            this.clearButtonEvent.emit();
            this.loading = false;
            this.tableTemplate = undefined;
        };
        SpatialFilterItemComponent.prototype.clearDrawZone = function () {
            this.formControl.reset();
            this.bufferFormControl.setValue(0);
            this.buffer = 0;
        };
        /**
         * Launch clear search (clear field if type is predefined)
         */
        SpatialFilterItemComponent.prototype.clearSearch = function () {
            this.selectedThematics.clear();
            this.bufferFormControl.setValue(0);
            this.buffer = 0;
            this.bufferEvent.emit(0);
            this.thematicChange.emit([]);
            this.clearSearchEvent.emit();
        };
        /**
         * Verify conditions of incomplete fields or busy service
         */
        SpatialFilterItemComponent.prototype.disableSearchButton = function () {
            if (this.type === exports.SpatialFilterType.Predefined) {
                if (this.selectedItemType === exports.SpatialFilterItemType.Address) {
                    if (this.queryType !== undefined && this.zone !== undefined) {
                        return this.loading;
                    }
                }
                if (this.selectedItemType === exports.SpatialFilterItemType.Thematics) {
                    if (this.queryType !== undefined && this.zone !== undefined && this.selectedThematics.selected.length > 0) {
                        return this.loading;
                    }
                }
            }
            if (this.type === exports.SpatialFilterType.Polygon || this.type === exports.SpatialFilterType.Point) {
                if (this.selectedItemType === exports.SpatialFilterItemType.Address && this.formControl.value !== null) {
                    return this.loading;
                }
                if (this.selectedItemType === exports.SpatialFilterItemType.Thematics) {
                    if (this.selectedThematics.selected.length > 0 && this.formControl.value !== null) {
                        return this.loading;
                    }
                }
            }
            return true;
        };
        SpatialFilterItemComponent.prototype.disabledClearSearch = function () {
            var disable = true;
            this.selectedItemType === exports.SpatialFilterItemType.Address ?
                disable = this.queryType === undefined :
                disable = this.queryType === undefined && this.selectedThematics.selected.length === 0;
            return disable;
        };
        /**
         * Manage radius value at user change
         */
        SpatialFilterItemComponent.prototype.getRadius = function () {
            var formValue;
            if (this.formControl.value !== null) {
                this.measureUnit === exports.MeasureLengthUnit.Meters ?
                    formValue = this.formControl.value.radius :
                    formValue = this.formControl.value.radius / 1000;
            }
            else {
                formValue = undefined;
            }
            if (this.type === exports.SpatialFilterType.Point) {
                if (!this.freehandDrawIsActive) {
                    if (this.radiusFormControl.value < 0 ||
                        (this.measureUnit === exports.MeasureLengthUnit.Meters && this.radiusFormControl.value >= 100000) ||
                        (this.measureUnit === exports.MeasureLengthUnit.Kilometers && this.radiusFormControl.value >= 100)) {
                        this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'), this.languageService.translate.instant('igo.geo.spatialFilter.warning'));
                        this.radius = 1000;
                        this.measureUnit === exports.MeasureLengthUnit.Meters ?
                            this.radiusFormControl.setValue(this.radius) :
                            this.radiusFormControl.setValue(this.radius / 1000);
                        this.drawGuide$.next(this.radius);
                        return;
                    }
                }
                else {
                    if (formValue) {
                        if (formValue >= 100000) {
                            this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.radiusAlert'), this.languageService.translate.instant('igo.geo.spatialFilter.warning'));
                            this.formControl.reset();
                            return;
                        }
                        if (formValue !== this.radiusFormControl.value) {
                            this.radiusFormControl.setValue(formValue);
                            return;
                        }
                    }
                }
                if (this.measureUnit === exports.MeasureLengthUnit.Meters) {
                    this.radius = this.radiusFormControl.value;
                    this.drawGuide$.next(this.radius);
                }
                else {
                    this.radius = this.radiusFormControl.value * 1000;
                    this.drawGuide$.next(this.radius * 1000);
                }
                this.overlayStyle$.next(this.PointStyle);
                this.drawStyle$.next(this.PointStyle);
            }
        };
        SpatialFilterItemComponent.prototype.toggleVisibleList = function () {
            this.listIsVisible = !this.listIsVisible;
        };
        SpatialFilterItemComponent.prototype.createTableTemplate = function () {
            var typeColumn = {
                name: 'meta.title',
                title: this.languageService.translate.instant('igo.geo.spatialFilter.type'),
                renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML
            };
            var nameColumn = {
                name: 'properties.nom',
                title: this.languageService.translate.instant('igo.geo.spatialFilter.searchResults'),
                renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML
            };
            var columns = [typeColumn, nameColumn];
            this.tableTemplate = {
                selection: true,
                sort: true,
                columns: columns
            };
        };
        return SpatialFilterItemComponent;
    }());
    SpatialFilterItemComponent.ɵfac = function SpatialFilterItemComponent_Factory(t) { return new (t || SpatialFilterItemComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(SpatialFilterService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService)); };
    SpatialFilterItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SpatialFilterItemComponent, selectors: [["igo-spatial-filter-item"]], inputs: { map: "map", type: "type", queryType: "queryType", zone: "zone", loading: "loading", store: "store", layers: "layers", allLayers: "allLayers", thematicLength: "thematicLength" }, outputs: { toggleSearch: "toggleSearch", itemTypeChange: "itemTypeChange", thematicChange: "thematicChange", drawZoneEvent: "drawZoneEvent", bufferEvent: "bufferEvent", zoneWithBufferChange: "zoneWithBufferChange", measureUnitChange: "measureUnitChange", radiusEvent: "radiusEvent", freehandControl: "freehandControl", clearButtonEvent: "clearButtonEvent", clearSearchEvent: "clearSearchEvent", export: "export", openWorkspace: "openWorkspace", entityChange: "entityChange" }, decls: 29, vars: 42, consts: [[3, "formControl", "map", "geometryType", "drawGuide", "measure", "drawControlIsActive", "freehandDrawIsActive", "drawStyle", "overlayStyle", "radius"], [1, "header"], [3, "checked", "labelPosition", "change", 4, "ngIf"], ["class", "buffer-unit", 4, "ngIf"], ["class", "radius-unit", 4, "ngIf"], [1, "title", "mat-typography"], [3, "value"], [3, "value", "change", 4, "ngFor", "ngForOf"], ["class", "thematics", 4, "ngIf"], [1, "buttons"], ["mat-raised-button", "", "class", "clear-search-button", 3, "disabled", "click", 4, "ngIf"], ["mat-raised-button", "", "class", "clear-form-button", 3, "disabled", "click", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", 1, "search-button", 3, "disabled", "click"], ["mat-raised-button", "", 1, "remove-button", 3, "disabled", "click"], ["mat-raised-button", "", 1, "export-button", 3, "disabled", "click"], ["class", "chevron-down", "mat-icon-button", "", "matTooltipShowDelay", "500", 3, "matTooltip", "click", 4, "ngIf"], ["class", "results", 4, "ngIf"], [3, "checked", "labelPosition", "change"], [1, "buffer-unit"], [1, "buffer-form"], [1, "buffer"], ["type", "number", "matInput", "", 3, "placeholder", "formControl", "value", "readonly"], [1, "unit-field"], [3, "value", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [1, "radius-unit"], [1, "radius-form"], [1, "radius"], ["type", "number", "matInput", "", 3, "placeholder", "formControl", "value", "readonly", "input"], [3, "value", "change"], [1, "thematics"], ["matColumnDef", "name"], ["class", "thematics-header", 4, "matHeaderCellDef"], ["matColumnDef", "select"], ["class", "checks-header", 4, "matHeaderCellDef"], [4, "matHeaderRowDef"], [4, "matRowDef", "matRowDefColumns"], [3, "dataSource", "treeControl"], ["matTreeNodeToggle", "", 4, "matTreeNodeDef"], [4, "matTreeNodeDef", "matTreeNodeDefWhen"], [1, "thematics-header"], [1, "checks-header"], [3, "checked", "indeterminate", "change"], ["matTreeNodeToggle", ""], [1, "mat-tree-node"], ["mat-icon-button", "", "disabled", ""], [1, "tree-check", 3, "checked", "click", "change"], ["mat-icon-button", "", 3, "click"], [3, "svgIcon"], [1, "tree-check-2", 3, "checked", "indeterminate", "change"], [1, "tree-ul"], ["matTreeNodeOutlet", ""], ["mat-raised-button", "", 1, "clear-search-button", 3, "disabled", "click"], ["mat-raised-button", "", 1, "clear-form-button", 3, "disabled", "click"], ["mat-icon-button", "", "matTooltipShowDelay", "500", 1, "chevron-down", 3, "matTooltip", "click"], ["svgIcon", "chevron-down"], [1, "results"], ["mat-icon-button", "", "matTooltipShowDelay", "500", 3, "matTooltip", "click", 4, "ngIf"], [1, "results-list", 3, "template", "store", "entitySelectChange"], ["mat-icon-button", "", "matTooltipShowDelay", "500", 3, "matTooltip", "click"], ["svgIcon", "chevron-up"]], template: function SpatialFilterItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelement(0, "igo-geometry-form-field-input", 0);
                i0__namespace.ɵɵpipe(1, "async");
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵpipe(3, "async");
                i0__namespace.ɵɵelementStart(4, "div", 1);
                i0__namespace.ɵɵtemplate(5, SpatialFilterItemComponent_mat_slide_toggle_5_Template, 3, 5, "mat-slide-toggle", 2);
                i0__namespace.ɵɵtemplate(6, SpatialFilterItemComponent_mat_slide_toggle_6_Template, 3, 5, "mat-slide-toggle", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(7, SpatialFilterItemComponent_div_7_Template, 8, 8, "div", 3);
                i0__namespace.ɵɵtemplate(8, SpatialFilterItemComponent_div_8_Template, 8, 8, "div", 4);
                i0__namespace.ɵɵelementStart(9, "mat-label", 5);
                i0__namespace.ɵɵtext(10);
                i0__namespace.ɵɵpipe(11, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(12, "mat-radio-group", 6);
                i0__namespace.ɵɵtemplate(13, SpatialFilterItemComponent_mat_radio_button_13_Template, 3, 4, "mat-radio-button", 7);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(14, SpatialFilterItemComponent_div_14_Template, 11, 5, "div", 8);
                i0__namespace.ɵɵelementStart(15, "div", 9);
                i0__namespace.ɵɵtemplate(16, SpatialFilterItemComponent_button_16_Template, 3, 4, "button", 10);
                i0__namespace.ɵɵtemplate(17, SpatialFilterItemComponent_button_17_Template, 3, 4, "button", 11);
                i0__namespace.ɵɵelementStart(18, "button", 12);
                i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_Template_button_click_18_listener() { return ctx.toggleSearchButton(); });
                i0__namespace.ɵɵtext(19);
                i0__namespace.ɵɵpipe(20, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(21, "button", 13);
                i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_Template_button_click_21_listener() { return ctx.clearButton(); });
                i0__namespace.ɵɵtext(22);
                i0__namespace.ɵɵpipe(23, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(24, "button", 14);
                i0__namespace.ɵɵlistener("click", function SpatialFilterItemComponent_Template_button_click_24_listener() { return ctx.export.emit(); });
                i0__namespace.ɵɵtext(25);
                i0__namespace.ɵɵpipe(26, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(27, SpatialFilterItemComponent_button_27_Template, 3, 3, "button", 15);
                i0__namespace.ɵɵtemplate(28, SpatialFilterItemComponent_div_28_Template, 3, 3, "div", 16);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("formControl", ctx.formControl)("map", ctx.map)("geometryType", ctx.geometryType)("drawGuide", i0__namespace.ɵɵpipeBind1(1, 28, ctx.drawGuide$))("measure", ctx.measure)("drawControlIsActive", ctx.drawControlIsActive)("freehandDrawIsActive", ctx.freehandDrawIsActive)("drawStyle", i0__namespace.ɵɵpipeBind1(2, 30, ctx.drawStyle$))("overlayStyle", i0__namespace.ɵɵpipeBind1(3, 32, ctx.overlayStyle$))("radius", ctx.radius);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngIf", !ctx.isPredefined());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.isPredefined());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isPolygon());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isPoint());
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate1("", i0__namespace.ɵɵpipeBind1(11, 34, "igo.geo.spatialFilter.search"), " : ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", ctx.selectedItemType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.itemType);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.selectedItemType === "Thematics" && !ctx.tableTemplate || ctx.selectedItemType === "Thematics" && ctx.tableTemplate && !ctx.listIsVisible);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.isPredefined());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.isPolygon() || ctx.isPoint());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("disabled", ctx.disableSearchButton());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(20, 36, "igo.geo.spatialFilter.goSearch"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("disabled", ctx.allLayers.length === 0);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(23, 38, "igo.geo.spatialFilter.removeLayer"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("disabled", !ctx.store.entities$.getValue().length);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(26, 40, "igo.geo.spatialFilter.exportLayer"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.store.all().length && ctx.tableTemplate && !ctx.listIsVisible);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.store.all().length && ctx.tableTemplate && ctx.listIsVisible);
            }
        }, styles: [".header[_ngcontent-%COMP%]{margin-top:5px;width:100%}.mat-slide-toggle[_ngcontent-%COMP%]{padding:5px;margin-bottom:15px;width:98%}.mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 20px)}.title[_ngcontent-%COMP%]{margin-left:5px;font-size:medium;font-size:initial}.mat-radio-group[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding-top:10px}.mat-radio-button[_ngcontent-%COMP%]{display:inline-flex;position:relative;margin-left:16px;margin-top:10px}.mat-form-field[_ngcontent-%COMP%]{margin-top:5px}.mat-column-select[_ngcontent-%COMP%]{overflow:auto}.buttons[_ngcontent-%COMP%]{margin-top:15px}.search-button[_ngcontent-%COMP%]{left:15px;width:46%}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.search-button[_ngcontent-%COMP%]{left:10px;width:45%;min-height:35px;white-space:normal;line-height:normal}}.export-button[_ngcontent-%COMP%]{left:15px;width:46%;margin-bottom:5px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.export-button[_ngcontent-%COMP%]{left:10px;margin-top:10px;width:45%;min-height:35px;white-space:normal;line-height:normal}}.remove-button[_ngcontent-%COMP%]{margin-top:12px;left:5px;width:46%}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.remove-button[_ngcontent-%COMP%]{margin:0;width:45%;min-height:35px;white-space:normal;line-height:normal}}.clear-form-button[_ngcontent-%COMP%]{left:5px;width:46%}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.clear-form-button[_ngcontent-%COMP%]{width:45%;min-height:35px;white-space:normal;line-height:normal}}.clear-search-button[_ngcontent-%COMP%]{left:5px;width:46%}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.clear-search-button[_ngcontent-%COMP%]{width:45%;min-height:35px;white-space:normal;line-height:normal}}.thematics[_ngcontent-%COMP%]{max-height:35%;overflow:auto;margin-top:5px;width:98%}.results[_ngcontent-%COMP%]{overflow:auto;max-height:250px;width:98%}.mat-column-typeResults[_ngcontent-%COMP%]{max-width:100px;margin-right:5px}.buffer-unit[_ngcontent-%COMP%], .radius-unit[_ngcontent-%COMP%]{display:flex;width:100%;margin-left:2px;padding:5px}.radius[_ngcontent-%COMP%], .buffer[_ngcontent-%COMP%]{display:flex;flex-flow:column nowrap;width:110%}.unit-field[_ngcontent-%COMP%]{width:110px;margin-left:30px}.example-tree-invisible[_ngcontent-%COMP%]{display:none}.tree-ul[_ngcontent-%COMP%]{margin:0;padding:0 0 0 20px;list-style-type:none}.tree-check[_ngcontent-%COMP%], .tree-check-2[_ngcontent-%COMP%]{position:relative;margin-left:auto;margin-right:5px}.thematics-header[_ngcontent-%COMP%]{max-width:250px}.checks-header[_ngcontent-%COMP%]{padding:none;max-width:calc(100% - 316px);overflow:hidden}.mat-checkbox[_ngcontent-%COMP%]{padding:5px}.mat-tree-node[_ngcontent-%COMP%]{position:relative;min-height:42px;width:280px}.mat-header-cell[_ngcontent-%COMP%]{height:56px}.results[_ngcontent-%COMP%]{max-height:45%;width:98%}.results[_ngcontent-%COMP%]   igo-entity-table[_ngcontent-%COMP%]     div.table-container{overflow:unset}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SpatialFilterItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-spatial-filter-item',
                        templateUrl: './spatial-filter-item.component.html',
                        styleUrls: ['./spatial-filter-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: SpatialFilterService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }]; }, { map: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], queryType: [{
                    type: i0.Input
                }], zone: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], layers: [{
                    type: i0.Input
                }], allLayers: [{
                    type: i0.Input
                }], thematicLength: [{
                    type: i0.Input
                }], toggleSearch: [{
                    type: i0.Output
                }], itemTypeChange: [{
                    type: i0.Output
                }], thematicChange: [{
                    type: i0.Output
                }], drawZoneEvent: [{
                    type: i0.Output
                }], bufferEvent: [{
                    type: i0.Output
                }], zoneWithBufferChange: [{
                    type: i0.Output
                }], measureUnitChange: [{
                    type: i0.Output
                }], radiusEvent: [{
                    type: i0.Output
                }], freehandControl: [{
                    type: i0.Output
                }], clearButtonEvent: [{
                    type: i0.Output
                }], clearSearchEvent: [{
                    type: i0.Output
                }], export: [{
                    type: i0.Output
                }], openWorkspace: [{
                    type: i0.Output
                }], entityChange: [{
                    type: i0.Output
                }] });
    })();

    var _c0$5 = ["endDatepickerTime"];
    var _c1$4 = ["beginDatepickerTime"];
    var _c2$2 = ["beginTime"];
    var _c3 = ["endTime"];
    function OgcFilterTimeComponent_mat_slide_toggle_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r4_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 4);
            i0__namespace.ɵɵlistener("ngModelChange", function OgcFilterTimeComponent_mat_slide_toggle_1_Template_mat_slide_toggle_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r4_1); var ctx_r3 = i0__namespace.ɵɵnextContext(); return ctx_r3.sliderMode = $event; })("change", function OgcFilterTimeComponent_mat_slide_toggle_1_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r4_1); var ctx_r5 = i0__namespace.ɵɵnextContext(); return ctx_r5.modeChange($event); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngModel", ctx_r0.sliderMode);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.filter.sliderModeTitle"), " ");
        }
    }
    function OgcFilterTimeComponent_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 5);
            i0__namespace.ɵɵelementStart(1, "igo-ogc-filter-time-slider", 6);
            i0__namespace.ɵɵlistener("changeProperty", function OgcFilterTimeComponent_div_2_Template_igo_ogc_filter_time_slider_changeProperty_1_listener($event) { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.changePropertyByPass($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("begin", ctx_r1.beginValue)("max", ctx_r1.restrictedToStep() ? ctx_r1.maxDate : ctx_r1.endValue)("currentFilter", ctx_r1.currentFilter)("datasource", ctx_r1.datasource);
        }
    }
    function OgcFilterTimeComponent_div_3_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r15_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵelementStart(1, "mat-form-field", 10);
            i0__namespace.ɵɵelementStart(2, "mat-label");
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(5, "input", 11);
            i0__namespace.ɵɵlistener("change", function OgcFilterTimeComponent_div_3_div_1_Template_input_change_5_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var _r10 = i0__namespace.ɵɵreference(8); var ctx_r14 = i0__namespace.ɵɵnextContext(2); return ctx_r14.yearOnlyInputChange($event, _r10, "begin"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(6, "mat-datepicker-toggle", 12);
            i0__namespace.ɵɵelementStart(7, "mat-datepicker", 13, 14);
            i0__namespace.ɵɵlistener("yearSelected", function OgcFilterTimeComponent_div_3_div_1_Template_mat_datepicker_yearSelected_7_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var _r10 = i0__namespace.ɵɵreference(8); var ctx_r16 = i0__namespace.ɵɵnextContext(2); return ctx_r16.yearSelected($event, _r10, "begin"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(9, "input", 15, 16);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "mat-form-field", 10);
            i0__namespace.ɵɵelementStart(12, "mat-label");
            i0__namespace.ɵɵtext(13);
            i0__namespace.ɵɵpipe(14, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(15, "input", 11);
            i0__namespace.ɵɵlistener("change", function OgcFilterTimeComponent_div_3_div_1_Template_input_change_15_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var _r12 = i0__namespace.ɵɵreference(18); var ctx_r17 = i0__namespace.ɵɵnextContext(2); return ctx_r17.yearOnlyInputChange($event, _r12, "end"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(16, "mat-datepicker-toggle", 12);
            i0__namespace.ɵɵelementStart(17, "mat-datepicker", 13, 17);
            i0__namespace.ɵɵlistener("yearSelected", function OgcFilterTimeComponent_div_3_div_1_Template_mat_datepicker_yearSelected_17_listener($event) { i0__namespace.ɵɵrestoreView(_r15_1); var _r12 = i0__namespace.ɵɵreference(18); var ctx_r18 = i0__namespace.ɵɵnextContext(2); return ctx_r18.yearSelected($event, _r12, "end"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(19, "input", 15, 18);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(21, "button", 19);
            i0__namespace.ɵɵlistener("click", function OgcFilterTimeComponent_div_3_div_1_Template_button_click_21_listener() { i0__namespace.ɵɵrestoreView(_r15_1); var ctx_r19 = i0__namespace.ɵɵnextContext(2); return ctx_r19.resetFilter(); });
            i0__namespace.ɵɵpipe(22, "translate");
            i0__namespace.ɵɵelement(23, "mat-icon", 20);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(24, "mat-slide-toggle", 21);
            i0__namespace.ɵɵlistener("change", function OgcFilterTimeComponent_div_3_div_1_Template_mat_slide_toggle_change_24_listener() { i0__namespace.ɵɵrestoreView(_r15_1); var ctx_r20 = i0__namespace.ɵɵnextContext(2); return ctx_r20.toggleFilterState(); });
            i0__namespace.ɵɵpipe(25, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r10 = i0__namespace.ɵɵreference(8);
            var _r12 = i0__namespace.ɵɵreference(18);
            var ctx_r8 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(4, 27, "igo.geo.timeFilter.startYear"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("value", ctx_r8.onlyYearBegin);
            i0__namespace.ɵɵproperty("disabled", ctx_r8.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("for", _r10)("disabled", ctx_r8.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("startView", ctx_r8.calendarView())("startAt", ctx_r8.beginValue);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matDatepicker", _r10)("value", ctx_r8.beginValue ? ctx_r8.beginValue : ctx_r8.handleDate(ctx_r8.datasource.options.minDate))("min", ctx_r8.handleDate(ctx_r8.datasource.options.minDate))("max", ctx_r8.endValue && !ctx_r8.restrictedToStep() ? ctx_r8.endValue : ctx_r8.handleDate(ctx_r8.datasource.options.maxDate));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(14, 29, "igo.geo.timeFilter.endYear"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("value", ctx_r8.onlyYearEnd);
            i0__namespace.ɵɵproperty("disabled", ctx_r8.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("for", _r12)("disabled", ctx_r8.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("startView", ctx_r8.calendarView())("startAt", ctx_r8.endValue);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matDatepicker", _r12)("value", ctx_r8.endValue ? ctx_r8.endValue : ctx_r8.handleDate(ctx_r8.datasource.options.maxDate))("min", ctx_r8.beginValue ? ctx_r8.beginValue : ctx_r8.handleDate(ctx_r8.datasource.options.minDate))("max", ctx_r8.handleDate(ctx_r8.datasource.options.maxDate));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(22, 31, "igo.geo.filter.resetFilters"))("disabled", ctx_r8.filterStateDisable);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r8.resetIcon);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(25, 33, "igo.geo.filter.toggleFilterState"))("checked", !ctx_r8.filterStateDisable);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_mat_form_field_11_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 36);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var hour_r27 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", hour_r27);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(hour_r27);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_mat_form_field_11_Template(rf, ctx) {
        if (rf & 1) {
            var _r29_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 33);
            i0__namespace.ɵɵelementStart(1, "mat-label");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-select", 34);
            i0__namespace.ɵɵlistener("selectionChange", function OgcFilterTimeComponent_div_3_div_2_mat_form_field_11_Template_mat_select_selectionChange_4_listener() { i0__namespace.ɵɵrestoreView(_r29_1); i0__namespace.ɵɵnextContext(); var _r21 = i0__namespace.ɵɵreference(5); var ctx_r28 = i0__namespace.ɵɵnextContext(2); return ctx_r28.changeTemporalProperty(_r21.value, 1); });
            i0__namespace.ɵɵtemplate(5, OgcFilterTimeComponent_div_3_div_2_mat_form_field_11_mat_option_5_Template, 2, 2, "mat-option", 35);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r23 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.timeFilter.hour"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("formControl", ctx_r23.beginHourFormControl);
            i0__namespace.ɵɵattribute("disabled", !ctx_r23.currentFilter.active);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r23.beginHours);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_mat_form_field_12_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 36);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var minute_r31 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", minute_r31);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(minute_r31);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_mat_form_field_12_Template(rf, ctx) {
        if (rf & 1) {
            var _r33_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 37);
            i0__namespace.ɵɵelementStart(1, "mat-label");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-select", 34);
            i0__namespace.ɵɵlistener("selectionChange", function OgcFilterTimeComponent_div_3_div_2_mat_form_field_12_Template_mat_select_selectionChange_4_listener() { i0__namespace.ɵɵrestoreView(_r33_1); i0__namespace.ɵɵnextContext(); var _r21 = i0__namespace.ɵɵreference(5); var ctx_r32 = i0__namespace.ɵɵnextContext(2); return ctx_r32.changeTemporalProperty(_r21.value, 1); });
            i0__namespace.ɵɵtemplate(5, OgcFilterTimeComponent_div_3_div_2_mat_form_field_12_mat_option_5_Template, 2, 2, "mat-option", 35);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r24 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.timeFilter.minute"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("formControl", ctx_r24.beginMinuteFormControl);
            i0__namespace.ɵɵattribute("disabled", !ctx_r24.currentFilter.active);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r24.beginMinutes);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_10_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 36);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var hour_r39 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", hour_r39);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(hour_r39);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_10_Template(rf, ctx) {
        if (rf & 1) {
            var _r41_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 33);
            i0__namespace.ɵɵelementStart(1, "mat-label");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-select", 34);
            i0__namespace.ɵɵlistener("selectionChange", function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_10_Template_mat_select_selectionChange_4_listener() { i0__namespace.ɵɵrestoreView(_r41_1); i0__namespace.ɵɵnextContext(); var _r34 = i0__namespace.ɵɵreference(4); var ctx_r40 = i0__namespace.ɵɵnextContext(3); return ctx_r40.changeTemporalProperty(_r34.value, 2); });
            i0__namespace.ɵɵtemplate(5, OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_10_mat_option_5_Template, 2, 2, "mat-option", 35);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r36 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.timeFilter.hour"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("formControl", ctx_r36.endHourFormControl);
            i0__namespace.ɵɵattribute("disabled", !ctx_r36.currentFilter.active);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r36.endHours);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_11_mat_option_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 36);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var minute_r43 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", minute_r43);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(minute_r43);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_11_Template(rf, ctx) {
        if (rf & 1) {
            var _r45_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field", 37);
            i0__namespace.ɵɵelementStart(1, "mat-label");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-select", 34);
            i0__namespace.ɵɵlistener("selectionChange", function OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_11_Template_mat_select_selectionChange_4_listener() { i0__namespace.ɵɵrestoreView(_r45_1); i0__namespace.ɵɵnextContext(); var _r34 = i0__namespace.ɵɵreference(4); var ctx_r44 = i0__namespace.ɵɵnextContext(3); return ctx_r44.changeTemporalProperty(_r34.value, 2); });
            i0__namespace.ɵɵtemplate(5, OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_11_mat_option_5_Template, 2, 2, "mat-option", 35);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r37 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.timeFilter.minute"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("formControl", ctx_r37.endMinuteFormControl);
            i0__namespace.ɵɵattribute("disabled", !ctx_r37.currentFilter.active);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r37.endMinutes);
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_div_13_Template(rf, ctx) {
        if (rf & 1) {
            var _r47_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 23);
            i0__namespace.ɵɵelementStart(1, "mat-form-field", 24);
            i0__namespace.ɵɵelement(2, "mat-datepicker-toggle", 12);
            i0__namespace.ɵɵelementStart(3, "input", 25, 38);
            i0__namespace.ɵɵlistener("dateChange", function OgcFilterTimeComponent_div_3_div_2_div_13_Template_input_dateChange_3_listener() { i0__namespace.ɵɵrestoreView(_r47_1); var _r34 = i0__namespace.ɵɵreference(4); var ctx_r46 = i0__namespace.ɵɵnextContext(3); return ctx_r46.changeTemporalProperty(_r34.value, 2); });
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(6, "span", 27);
            i0__namespace.ɵɵelementStart(7, "mat-datepicker", 28, 17);
            i0__namespace.ɵɵlistener("yearSelected", function OgcFilterTimeComponent_div_3_div_2_div_13_Template_mat_datepicker_yearSelected_7_listener($event) { i0__namespace.ɵɵrestoreView(_r47_1); var _r35 = i0__namespace.ɵɵreference(8); var ctx_r48 = i0__namespace.ɵɵnextContext(3); return ctx_r48.yearSelected($event, _r35, "end"); })("monthSelected", function OgcFilterTimeComponent_div_3_div_2_div_13_Template_mat_datepicker_monthSelected_7_listener($event) { i0__namespace.ɵɵrestoreView(_r47_1); var _r35 = i0__namespace.ɵɵreference(8); var ctx_r49 = i0__namespace.ɵɵnextContext(3); return ctx_r49.monthSelected($event, _r35, "end"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(9, "div", 29);
            i0__namespace.ɵɵtemplate(10, OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_10_Template, 6, 6, "mat-form-field", 30);
            i0__namespace.ɵɵtemplate(11, OgcFilterTimeComponent_div_3_div_2_div_13_mat_form_field_11_Template, 6, 6, "mat-form-field", 31);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r35 = i0__namespace.ɵɵreference(8);
            var ctx_r25 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("for", _r35)("disabled", ctx_r25.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matDatepicker", _r35)("placeholder", i0__namespace.ɵɵpipeBind1(5, 14, "igo.geo.timeFilter.endDate"))("matDatepickerFilter", ctx_r25.dateFilter.bind(ctx_r25, "end"))("value", ctx_r25.endValue ? ctx_r25.endValue : ctx_r25.handleDate(ctx_r25.datasource.options.maxDate))("min", ctx_r25.beginValue ? ctx_r25.beginValue : ctx_r25.handleDate(ctx_r25.datasource.options.minDate))("max", ctx_r25.handleDate(ctx_r25.datasource.options.maxDate))("disabled", ctx_r25.filterStateDisable);
            i0__namespace.ɵɵattribute("disabled", !ctx_r25.currentFilter.active);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("startView", ctx_r25.calendarView())("startAt", ctx_r25.endValue);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r25.calendarType() === "datetime");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r25.calendarType() === "datetime");
        }
    }
    function OgcFilterTimeComponent_div_3_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r51_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 22);
            i0__namespace.ɵɵelementStart(1, "div", 23);
            i0__namespace.ɵɵelementStart(2, "mat-form-field", 24);
            i0__namespace.ɵɵelement(3, "mat-datepicker-toggle", 12);
            i0__namespace.ɵɵelementStart(4, "input", 25, 26);
            i0__namespace.ɵɵlistener("dateChange", function OgcFilterTimeComponent_div_3_div_2_Template_input_dateChange_4_listener() { i0__namespace.ɵɵrestoreView(_r51_1); var _r21 = i0__namespace.ɵɵreference(5); var ctx_r50 = i0__namespace.ɵɵnextContext(2); return ctx_r50.changeTemporalProperty(_r21.value, 1); });
            i0__namespace.ɵɵpipe(6, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(7, "span", 27);
            i0__namespace.ɵɵelementStart(8, "mat-datepicker", 28, 14);
            i0__namespace.ɵɵlistener("yearSelected", function OgcFilterTimeComponent_div_3_div_2_Template_mat_datepicker_yearSelected_8_listener($event) { i0__namespace.ɵɵrestoreView(_r51_1); var _r22 = i0__namespace.ɵɵreference(9); var ctx_r52 = i0__namespace.ɵɵnextContext(2); return ctx_r52.yearSelected($event, _r22, "begin"); })("monthSelected", function OgcFilterTimeComponent_div_3_div_2_Template_mat_datepicker_monthSelected_8_listener($event) { i0__namespace.ɵɵrestoreView(_r51_1); var _r22 = i0__namespace.ɵɵreference(9); var ctx_r53 = i0__namespace.ɵɵnextContext(2); return ctx_r53.monthSelected($event, _r22, "begin"); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(10, "div", 29);
            i0__namespace.ɵɵtemplate(11, OgcFilterTimeComponent_div_3_div_2_mat_form_field_11_Template, 6, 6, "mat-form-field", 30);
            i0__namespace.ɵɵtemplate(12, OgcFilterTimeComponent_div_3_div_2_mat_form_field_12_Template, 6, 6, "mat-form-field", 31);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(13, OgcFilterTimeComponent_div_3_div_2_div_13_Template, 12, 16, "div", 32);
            i0__namespace.ɵɵelementStart(14, "button", 19);
            i0__namespace.ɵɵlistener("click", function OgcFilterTimeComponent_div_3_div_2_Template_button_click_14_listener() { i0__namespace.ɵɵrestoreView(_r51_1); var ctx_r54 = i0__namespace.ɵɵnextContext(2); return ctx_r54.resetFilter(); });
            i0__namespace.ɵɵpipe(15, "translate");
            i0__namespace.ɵɵelement(16, "mat-icon", 20);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(17, "mat-slide-toggle", 21);
            i0__namespace.ɵɵlistener("change", function OgcFilterTimeComponent_div_3_div_2_Template_mat_slide_toggle_change_17_listener() { i0__namespace.ɵɵrestoreView(_r51_1); var ctx_r55 = i0__namespace.ɵɵnextContext(2); return ctx_r55.toggleFilterState(); });
            i0__namespace.ɵɵpipe(18, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r22 = i0__namespace.ɵɵreference(9);
            var ctx_r9 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("for", _r22)("disabled", ctx_r9.filterStateDisable);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matDatepicker", _r22)("placeholder", i0__namespace.ɵɵpipeBind1(6, 20, "igo.geo.timeFilter.startDate"))("matDatepickerFilter", ctx_r9.dateFilter.bind(ctx_r9, "begin"))("value", ctx_r9.beginValue ? ctx_r9.beginValue : ctx_r9.handleDate(ctx_r9.datasource.options.minDate))("min", ctx_r9.handleDate(ctx_r9.datasource.options.minDate))("max", ctx_r9.endValue && !ctx_r9.restrictedToStep() ? ctx_r9.endValue : ctx_r9.handleDate(ctx_r9.datasource.options.maxDate))("disabled", ctx_r9.filterStateDisable);
            i0__namespace.ɵɵattribute("disabled", !ctx_r9.currentFilter.active);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("startView", ctx_r9.calendarView())("startAt", ctx_r9.beginValue);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r9.calendarType() === "datetime");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r9.calendarType() === "datetime");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r9.restrictedToStep());
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(15, 22, "igo.geo.filter.resetFilters"))("disabled", ctx_r9.filterStateDisable);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r9.resetIcon);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(18, 24, "igo.geo.filter.toggleFilterState"))("checked", !ctx_r9.filterStateDisable);
        }
    }
    function OgcFilterTimeComponent_div_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtemplate(1, OgcFilterTimeComponent_div_3_div_1_Template, 26, 35, "div", 7);
            i0__namespace.ɵɵtemplate(2, OgcFilterTimeComponent_div_3_div_2_Template, 19, 26, "div", 8);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.calendarTypeYear);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.calendarType() !== "year");
        }
    }
    var moment$1 = moment___namespace;
    var OgcFilterTimeComponent = /** @class */ (function () {
        function OgcFilterTimeComponent(ogcFilterTimeService) {
            this.ogcFilterTimeService = ogcFilterTimeService;
            this.changeProperty = new i0.EventEmitter();
            this.beginHourFormControl = new i16.FormControl();
            this.beginMinuteFormControl = new i16.FormControl();
            this.endHourFormControl = new i16.FormControl();
            this.endMinuteFormControl = new i16.FormControl();
            this._defaultMin = '1900-01-01';
            this._defaultMax = '2052-01-06';
            this._defaultDisplayFormat = 'DD/MM/YYYY HH:mm A';
            this._defaultSliderModeEnabled = true;
            this.ogcFilterOperator = exports.OgcFilterOperator;
            this.sliderMode = false;
            this.defaultStepMillisecond = 60000;
            this.calendarTypeYear = false;
            this.resetIcon = 'replay';
        }
        Object.defineProperty(OgcFilterTimeComponent.prototype, "step", {
            get: function () {
                return this.datasource.options.stepDate
                    ? this.datasource.options.stepDate
                    : this.currentFilter.step;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "stepMilliseconds", {
            get: function () {
                var step = moment$1.duration(this.step).asMilliseconds();
                return step === 0 ? this.defaultStepMillisecond : step;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "beginValue", {
            get: function () {
                return this._beginValue;
            },
            set: function (begin) {
                this._beginValue = begin;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "endValue", {
            get: function () {
                return this._endValue;
            },
            set: function (end) {
                this._endValue = end;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "sliderInterval", {
            get: function () {
                return this.currentFilter.sliderInterval === undefined
                    ? 2000
                    : this.currentFilter.sliderInterval;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "maxDate", {
            get: function () {
                return this.datasource.options.maxDate ? this.datasource.options.maxDate : this._defaultMax;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeComponent.prototype, "displayFormat", {
            get: function () {
                return this.currentFilter.displayFormat ? this.currentFilter.displayFormat : this._defaultDisplayFormat;
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterTimeComponent.prototype.ngOnInit = function () {
            if (this.currentFilter.sliderOptions) {
                this.currentFilter.sliderOptions.enabled = this.currentFilter.sliderOptions.enabled !== undefined ?
                    this.currentFilter.sliderOptions.enabled : this._defaultSliderModeEnabled;
            }
            this.beginValue = this.parseFilter(this.handleMin());
            this.endValue = this.parseFilter(this.handleMax());
            this.onlyYearBegin = this.beginValue.getUTCFullYear();
            this.onlyYearEnd = this.endValue.getUTCFullYear();
            this.calendarTypeYear = this.isCalendarYearMode();
            this.setFilterStateDisable();
            this.updateHoursMinutesArray();
            // update value for now value
            this.updateValues();
        };
        OgcFilterTimeComponent.prototype.parseFilter = function (filter) {
            if (!filter) {
                return new Date();
            }
            else if (isNaN(new Date(filter).getTime())) {
                if (filter.search('now') >= 0) {
                    var interval = filter.match(/years|months|weeks|days|hours|seconds/);
                    if (filter.match(/\+/)) {
                        var intervalInt = parseInt(filter.substring(filter.search('+') + 1, interval.index), 10);
                        return moment$1().add(intervalInt, interval[0]).toDate();
                    }
                    if (filter.match(/\-/)) {
                        var intervalInt = parseInt(filter.substring(filter.search('-') + 1, interval.index), 10);
                        return moment$1().subtract(intervalInt, interval[0]).toDate();
                    }
                    return new Date();
                }
                if (filter.search('today') >= 0) {
                    var _now = moment$1().endOf('day').toDate();
                    var interval = filter.match(/years|months|weeks|days|hours|seconds/);
                    if (filter.match(/\+/)) {
                        var intervalInt = parseInt(filter.substring(filter.search('+') + 1, interval.index), 10);
                        return moment$1(_now).add(intervalInt, interval[0]).toDate();
                    }
                    if (filter.match(/\-/)) {
                        var intervalInt = parseInt(filter.substring(filter.search('-') + 1, interval.index), 10);
                        return moment$1(_now).subtract(intervalInt, interval[0]).toDate();
                    }
                    return _now;
                }
                return new Date();
            }
            if (this.currentFilter.calendarModeYear) {
                var date = this.getDateFromStringWithoutTime(filter);
                return date;
            }
            else {
                return filter ? new Date(filter) : new Date();
            }
        };
        OgcFilterTimeComponent.prototype.changeTemporalProperty = function (value, position, refreshFilter) {
            if (refreshFilter === void 0) { refreshFilter = true; }
            var valueTmp = this.getDateTime(value, position);
            if (this.isCalendarYearMode()) {
                var dateStringFromYearNotime = void 0;
                if (position === 1) {
                    this.beginValue = value;
                    this.onlyYearBegin = this.beginValue.getFullYear();
                    dateStringFromYearNotime = this.onlyYearBegin + "-01-01";
                }
                else {
                    this.endValue = value;
                    this.onlyYearEnd = this.endValue.getFullYear();
                    dateStringFromYearNotime = this.onlyYearEnd + "-01-01";
                }
                // call service with string date without time
                this.changeProperty.next({ value: dateStringFromYearNotime, pos: position, refreshFilter: refreshFilter });
                return;
            }
            if (position === 2 && this.calendarType() === 'date' && !this.sliderMode) {
                /* Above month: see yearSelected or monthSelected */
                valueTmp = moment$1(valueTmp).endOf('day').toDate();
            }
            if (position === 1) {
                this.beginValue = valueTmp;
                if (this.restrictedToStep()) {
                    this.changeTemporalProperty(this.ogcFilterTimeService.addStep(valueTmp, this.stepMilliseconds), 2, refreshFilter);
                }
            }
            else {
                this.endValue = valueTmp;
            }
            this.updateHoursMinutesArray();
            this.changeProperty.next({ value: valueTmp.toISOString(), pos: position, refreshFilter: refreshFilter });
        };
        OgcFilterTimeComponent.prototype.handleDate = function (value) {
            if (!value || value === '') {
                return undefined;
            }
            if (typeof (value) === 'string' && this.currentFilter.calendarModeYear) {
                return this.getDateFromStringWithoutTime(value);
            }
            return new Date(value);
        };
        OgcFilterTimeComponent.prototype.calendarType = function () {
            if (this.currentFilter.calendarModeYear) {
                return 'year';
            }
            if (this.stepMilliseconds < 86400000) {
                return 'datetime';
            }
            return 'date';
        };
        OgcFilterTimeComponent.prototype.isCalendarYearMode = function () {
            if (this.calendarType() === 'year') {
                return true;
            }
            else {
                return false;
            }
        };
        OgcFilterTimeComponent.prototype.yearOnlyInputChange = function (changeEvent, datePicker, property) {
            var year = changeEvent.target.value;
            var date = this.getDateFromStringWithoutTime(year);
            this.yearSelected(date, datePicker, property);
        };
        OgcFilterTimeComponent.prototype.yearSelected = function (year, datePicker, property, refreshFilter) {
            if (refreshFilter === void 0) { refreshFilter = true; }
            if (this.ogcFilterTimeService.stepIsYearDuration(this.step)) {
                if (datePicker) {
                    datePicker.close();
                }
                if (property === 'end') {
                    // change value 01 jan to 31 dec same year
                    year = moment$1(year).endOf('year').toDate();
                }
                else if (property === 'begin' && this.restrictedToStep() && !this.calendarTypeYear) {
                    this.yearSelected(year, undefined, 'end');
                }
                this.changeTemporalProperty(year, property === 'begin' ? 1 : 2, refreshFilter);
            }
        };
        OgcFilterTimeComponent.prototype.monthSelected = function (month, datePicker, property, refreshFilter) {
            if (refreshFilter === void 0) { refreshFilter = true; }
            if (this.ogcFilterTimeService.stepIsMonthDuration(this.step)) {
                if (datePicker) {
                    datePicker.close();
                }
                if (property === 'end') {
                    month = moment$1(month).endOf('month').toDate();
                }
                else if (property === 'begin' && this.restrictedToStep()) {
                    this.monthSelected(month, undefined, 'end');
                }
                this.changeTemporalProperty(month, property === 'begin' ? 1 : 2, refreshFilter);
            }
        };
        OgcFilterTimeComponent.prototype.calendarView = function () {
            var test = this.stepMilliseconds;
            var diff = Math.abs(this.parseFilter(this.currentFilter.end).getTime() -
                this.parseFilter(this.currentFilter.begin).getTime());
            if (this.ogcFilterTimeService.stepIsYearDuration(this.step)) {
                return 'multi-year';
            }
            else if (this.ogcFilterTimeService.stepIsMonthDuration(this.step)) {
                return 'year';
            }
            else if (test < 86400000 && diff < 86400000) {
                return 'clock';
            }
            else {
                return 'month';
            }
        };
        OgcFilterTimeComponent.prototype.dateFilter = function (type, date) {
            var dateValue = new Date(date);
            var diff = dateValue.getTime() - new Date(this.handleMin()).getTime();
            if (this.ogcFilterTimeService.stepIsYearDuration(this.step)) {
                var monthDiff = moment$1(dateValue).diff(moment$1(this.handleMin()), 'years', true);
                if (type === 'end') {
                    var dateValuePlus1 = moment$1(dateValue).add(1, 'd');
                    var monthDiffPlus1 = moment$1(dateValuePlus1).diff(moment$1(this.handleMin()), 'years', true);
                    return (monthDiffPlus1 % moment$1.duration(this.step).asYears()) === 0;
                }
                else if (type === 'begin') {
                    return (monthDiff % moment$1.duration(this.step).asYears()) === 0;
                }
            }
            else if (this.ogcFilterTimeService.stepIsMonthDuration(this.step)) {
                var monthDiff = moment$1(dateValue).diff(moment$1(this.handleMin()), 'months', true);
                if (type === 'end') {
                    var dateValuePlus1 = moment$1(dateValue).add(1, 'd');
                    var monthDiffPlus1 = moment$1(dateValuePlus1).diff(moment$1(this.handleMin()), 'months', true);
                    return (monthDiffPlus1 % moment$1.duration(this.step).asMonths()) === 0;
                }
                else if (type === 'begin') {
                    return (monthDiff % moment$1.duration(this.step).asMonths()) === 0;
                }
            }
            else if (this.ogcFilterTimeService.stepIsWeekDuration(this.step)) {
                var weekDiff = moment$1(dateValue).diff(moment$1(this.handleMin()), 'weeks', true);
                if (type === 'end') {
                    var dateValuePlus1 = moment$1(dateValue).add(1, 'd');
                    var weekDiffPlus1 = moment$1(dateValuePlus1).diff(moment$1(this.handleMin()), 'weeks', true);
                    return (weekDiffPlus1 % moment$1.duration(this.step).asWeeks()) === 0;
                }
                else if (type === 'begin') {
                    return (weekDiff % moment$1.duration(this.step).asWeeks()) === 0;
                }
            }
            else if (this.ogcFilterTimeService.stepIsDayDuration(this.step)) {
                var dayDiff = moment$1(dateValue).diff(moment$1(this.handleMin()), 'days', true);
                if (type === 'end') {
                    var dateValuePlus1 = moment$1(dateValue).add(1, 'd');
                    var dayDiffPlus1 = moment$1(dateValuePlus1).diff(moment$1(this.handleMin()), 'days', true);
                    var _mod = (dayDiffPlus1 % moment$1.duration(this.step).asDays());
                    return (_mod < 0.0000001 && _mod > -0.0000001) || _mod === 0; // 1 millisecond = 1.1574074074074076e-8
                }
                else if (type === 'begin') {
                    var _mod = ((dayDiff % moment$1.duration(this.step).asDays()) + 1);
                    return (_mod < 0.0000001 && _mod > -0.0000001 && _mod !== 0) || _mod === 1; // 1 millisecond = 1.1574074074074076e-8
                }
            }
            else if (this.ogcFilterTimeService.stepIsHourDuration(this.step)) {
                var hourDiff = moment$1(dateValue).diff(moment$1(this.handleMin()), 'hours', true);
                return (hourDiff % moment$1.duration(this.step).asHours()) === 0;
            }
            else if (this.ogcFilterTimeService.stepIsMinuteDuration(this.step)) {
                return true;
            }
            return diff % this.stepMilliseconds === 0;
        };
        OgcFilterTimeComponent.prototype.getDateTime = function (date, pos) {
            var valuetmp = new Date(date);
            var valuetmp2;
            if (!this.sliderMode) {
                switch (pos) {
                    case 1: {
                        if (this.currentFilter.calendarModeYear) {
                            valuetmp2 = valuetmp.setHours(0, 0);
                            break;
                        }
                        else {
                            valuetmp2 = valuetmp.setHours(this.beginHourFormControl.value, this.beginMinuteFormControl.value);
                            break;
                        }
                    }
                    case 2: {
                        if (this.currentFilter.calendarModeYear) {
                            valuetmp2 = valuetmp.setHours(0, 0);
                            break;
                        }
                        else {
                            valuetmp2 = valuetmp.setHours(this.endHourFormControl.value, this.endMinuteFormControl.value);
                            break;
                        }
                    }
                }
            }
            return new Date(valuetmp2 ? valuetmp2 : valuetmp);
        };
        OgcFilterTimeComponent.prototype.handleMinuteIncrement = function () {
            if (this.ogcFilterTimeService.stepIsMinuteDuration(this.step)) {
                if (this.stepMilliseconds < 3600000) {
                    return this.stepMilliseconds / 1000 === 60 ? 1 : this.stepMilliseconds / 1000;
                }
                else {
                    return (this.stepMilliseconds % 3600000) / 60;
                }
            }
            else if (this.ogcFilterTimeService.stepIsHourDuration(this.step)) {
                return 60;
            }
            return 1;
        };
        OgcFilterTimeComponent.prototype.handleHourIncrement = function () {
            if (this.ogcFilterTimeService.stepIsHourDuration(this.step)) {
                return this.stepMilliseconds / 1000 / 60 / 60;
            }
            return 1;
        };
        OgcFilterTimeComponent.prototype.fullBeginHoursArray = function (checkEndValue) {
            var _this = this;
            if (checkEndValue) {
                this.beginHours = Array.from({
                    length: (this.endHourFormControl.value - 0) / this.handleHourIncrement() + 1
                }, function (_, i) { return 0 + i * _this.handleHourIncrement(); });
            }
            else {
                this.beginHours = Array.from({ length: (23 - 0) / this.handleHourIncrement() + 1 }, function (_, i) { return 0 + i * _this.handleHourIncrement(); });
            }
            this.beginHourFormControl.setValue(this.beginValue.getHours());
        };
        OgcFilterTimeComponent.prototype.fullEndHoursArray = function (checkEndValue) {
            var _this = this;
            if (checkEndValue) {
                this.endHours = Array.from({
                    length: (23 - this.beginHourFormControl.value) /
                        this.handleHourIncrement() +
                        1
                }, function (_, i) { return _this.beginHourFormControl.value + i * _this.handleHourIncrement(); });
            }
            else {
                this.endHours = Array.from({ length: (23 - 0) / this.handleHourIncrement() + 1 }, function (_, i) { return 0 + i * _this.handleHourIncrement(); });
            }
            this.endHourFormControl.setValue(this.endValue.getHours());
        };
        OgcFilterTimeComponent.prototype.fullBeginMinutesArray = function (checkEndValue) {
            var _this = this;
            if (checkEndValue) {
                this.beginMinutes = Array.from({
                    length: (this.endMinuteFormControl.value - 0) /
                        this.handleMinuteIncrement() +
                        1
                }, function (_, i) { return 0 + i * _this.handleMinuteIncrement(); });
            }
            else {
                this.beginMinutes = Array.from({ length: (59 - 0) / this.handleMinuteIncrement() + 1 }, function (_, i) { return 0 + i * _this.handleMinuteIncrement(); });
            }
            this.beginMinuteFormControl.setValue(this.beginValue.getMinutes());
        };
        OgcFilterTimeComponent.prototype.fullEndMinutesArray = function (checkEndValue) {
            var _this = this;
            if (checkEndValue) {
                this.endMinutes = Array.from({
                    length: (59 - this.beginMinuteFormControl.value) /
                        this.handleMinuteIncrement() +
                        1
                }, function (_, i) { return _this.beginMinuteFormControl.value + i * _this.handleMinuteIncrement(); });
            }
            else {
                this.endMinutes = Array.from({ length: (59 - 0) / this.handleMinuteIncrement() + 1 }, function (_, i) { return 0 + i * _this.handleMinuteIncrement(); });
            }
            this.endMinuteFormControl.setValue(this.endValue.getMinutes());
        };
        OgcFilterTimeComponent.prototype.updateHoursMinutesArray = function () {
            var beginTmp = new Date(this.beginValue);
            var endTmp = new Date(this.endValue);
            if (beginTmp.setHours(0, 0) === endTmp.setHours(0, 0)) {
                this.fullBeginHoursArray(true);
                this.fullEndHoursArray(true);
                if (this.beginValue.getHours() === this.endValue.getHours()) {
                    this.fullBeginMinutesArray(true);
                    this.fullEndMinutesArray(true);
                }
            }
            else {
                this.fullBeginHoursArray();
                this.fullEndHoursArray();
                this.fullBeginMinutesArray();
                this.fullEndMinutesArray();
            }
        };
        OgcFilterTimeComponent.prototype.updateValues = function () {
            this.changeTemporalProperty(this.beginValue, 1, false);
            this.changeTemporalProperty(this.endValue, 2, true);
        };
        OgcFilterTimeComponent.prototype.restrictedToStep = function () {
            return this.currentFilter.restrictToStep
                ? this.currentFilter.restrictToStep : false;
        };
        OgcFilterTimeComponent.prototype.handleMin = function () {
            return this.currentFilter.begin ? this.currentFilter.begin :
                (this.datasource.options.minDate ? this.datasource.options.minDate : this._defaultMin);
        };
        OgcFilterTimeComponent.prototype.handleMax = function () {
            return this.currentFilter.end ? this.currentFilter.end :
                (this.datasource.options.maxDate ? this.datasource.options.maxDate : this._defaultMax);
        };
        OgcFilterTimeComponent.prototype.changePropertyByPass = function (event) {
            this.changeProperty.next(event);
        };
        OgcFilterTimeComponent.prototype.modeChange = function (event) {
            if (!event.checked) {
                this.updateValues();
            }
        };
        OgcFilterTimeComponent.prototype.setFilterStateDisable = function () {
            if (this.currentFilter) {
                this.filterStateDisable = !this.currentFilter.active;
            }
            else {
                this.filterStateDisable = false;
            }
            if (this.calendarType() === 'datetime') {
                if (this.filterStateDisable === true) {
                    this.beginHourFormControl.disable();
                    this.beginMinuteFormControl.disable();
                    this.endHourFormControl.disable();
                    this.endMinuteFormControl.disable();
                }
                else {
                    this.beginHourFormControl.enable();
                    this.beginMinuteFormControl.enable();
                    this.endHourFormControl.enable();
                    this.endMinuteFormControl.enable();
                }
            }
        };
        OgcFilterTimeComponent.prototype.getDateFromStringWithoutTime = function (stringDate) {
            // warning create date with no time make a date UTC with TZ and the date create maybe not the same year, month and day
            // exemple:
            // new Date('2022-01-01') -> Fri Dec 31 2021 19:00:00 GMT-0500 (heure normale de l’Est nord-américain)
            // to create same date as string, add time 00 in the creation
            // new Date('2022-01-01 00:00:00') -> Sat Jan 01 2022 00:00:00 GMT-0500 (heure normale de l’Est nord-américain)
            var year;
            var month = '01';
            var day = '01';
            if (stringDate.length === 10) {
                var dateItems = stringDate.split('-');
                if (dateItems.length !== 3) {
                    throw new Error('Error in config date begin-end for ogcFilter: Date without time format need to be YYYY-MM-DD or YYYY');
                }
                else {
                    year = dateItems[0];
                    month = dateItems[1];
                    day = dateItems[2];
                }
            }
            else if (stringDate.length === 4) {
                year = stringDate;
            }
            else {
                return new Date(stringDate);
            }
            return new Date(year + "-" + month + "-" + day + " 00:00:00");
        };
        OgcFilterTimeComponent.prototype.resetFilter = function () {
            var filterOriginConfig = this.datasource.options.ogcFilters.filters;
            var minDefaultDate;
            var maxDefaultDate;
            var minDefaultISOString;
            var maxDefaultISOString;
            if (this.calendarTypeYear) {
                if (filterOriginConfig.end === 'today') {
                    var todayDateStringNoTime = new Date().toLocaleDateString('en-CA'); // '2022-02-13'
                    maxDefaultISOString = todayDateStringNoTime.substring(0, 4) + "-01-01";
                }
                else {
                    maxDefaultISOString = filterOriginConfig.end.substring(0, 4) + "-01-01";
                }
                minDefaultISOString = filterOriginConfig.begin.substring(0, 4) + "-01-01";
                minDefaultDate = this.getDateFromStringWithoutTime(minDefaultISOString);
                maxDefaultDate = this.getDateFromStringWithoutTime(maxDefaultISOString);
            }
            else {
                minDefaultDate = this.parseFilter(filterOriginConfig.begin);
                maxDefaultDate = this.parseFilter(filterOriginConfig.end);
                minDefaultISOString = minDefaultDate.toISOString();
                maxDefaultISOString = maxDefaultDate.toISOString();
            }
            if ((this.currentFilter.begin !== minDefaultISOString) ||
                (this.currentFilter.end !== maxDefaultISOString)) {
                this.beginValue = minDefaultDate;
                this.endValue = maxDefaultDate;
                this.updateValues();
            }
        };
        OgcFilterTimeComponent.prototype.toggleFilterState = function () {
            if (this.currentFilter.active === true) {
                this.currentFilter.active = false;
            }
            else {
                this.currentFilter.active = true;
            }
            this.setFilterStateDisable();
            this.updateValues();
        };
        return OgcFilterTimeComponent;
    }());
    OgcFilterTimeComponent.ɵfac = function OgcFilterTimeComponent_Factory(t) { return new (t || OgcFilterTimeComponent)(i0__namespace.ɵɵdirectiveInject(OGCFilterTimeService)); };
    OgcFilterTimeComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterTimeComponent, selectors: [["igo-ogc-filter-time"]], viewQuery: function OgcFilterTimeComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$5, 5);
                i0__namespace.ɵɵviewQuery(_c1$4, 5);
                i0__namespace.ɵɵviewQuery(_c2$2, 5);
                i0__namespace.ɵɵviewQuery(_c3, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.endDatepickerTime = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.beginDatepickerTime = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.beginTime = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.endTime = _t.first);
            }
        }, inputs: { datasource: "datasource", currentFilter: "currentFilter" }, outputs: { changeProperty: "changeProperty" }, decls: 4, vars: 3, consts: [[1, "datetime-container"], [3, "ngModel", "ngModelChange", "change", 4, "ngIf"], ["class", "slider-container", 4, "ngIf"], [4, "ngIf"], [3, "ngModel", "ngModelChange", "change"], [1, "slider-container"], [3, "begin", "max", "currentFilter", "datasource", "changeProperty"], ["class", "year-input-container", 4, "ngIf"], ["class", "datetime-input-container", 4, "ngIf"], [1, "year-input-container"], [1, "year-input"], ["matInput", "", 1, "year-input-only-year", 3, "value", "disabled", "change"], ["matSuffix", "", 3, "for", "disabled"], ["panelClass", "datepicker-year", 3, "startView", "startAt", "yearSelected"], ["beginDatepicker", ""], ["matInput", "", "enabled", "false", "readonly", "true", 1, "year-input-hide", 3, "matDatepicker", "value", "min", "max"], ["beginYear", ""], ["endDatepicker", ""], ["endYear", ""], ["mat-icon-button", "", "color", "primary", 1, "reset-button", 3, "matTooltip", "disabled", "click"], [3, "svgIcon"], ["tooltip-position", "below", "matTooltipShowDelay", "500", 1, "toggle-filter-state", 3, "matTooltip", "checked", "change"], [1, "datetime-input-container"], [1, "datetime-input"], [1, "date-input"], ["matInput", "", 3, "matDatepicker", "placeholder", "matDatepickerFilter", "value", "min", "max", "disabled", "dateChange"], ["begin", ""], [1, "filler"], [3, "startView", "startAt", "yearSelected", "monthSelected"], [1, "time-input"], ["class", "hour-input", 4, "ngIf"], ["class", "minute-input", 4, "ngIf"], ["class", "datetime-input", 4, "ngIf"], [1, "hour-input"], [3, "formControl", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [1, "minute-input"], ["end", ""]], template: function OgcFilterTimeComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵtemplate(1, OgcFilterTimeComponent_mat_slide_toggle_1_Template, 3, 4, "mat-slide-toggle", 1);
                i0__namespace.ɵɵtemplate(2, OgcFilterTimeComponent_div_2_Template, 2, 4, "div", 2);
                i0__namespace.ɵɵtemplate(3, OgcFilterTimeComponent_div_3_Template, 3, 2, "div", 3);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.currentFilter.sliderOptions == null ? null : ctx.currentFilter.sliderOptions.enabled);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.sliderMode);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.sliderMode);
            }
        }, styles: ["input{text-align:center!important;margin:auto 5px!important}.slider-container[_ngcontent-%COMP%]{text-align:center}.datetime-input[_ngcontent-%COMP%]{display:inline-block;width:117px;margin:10px 0 5px 10px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.datetime-input[_ngcontent-%COMP%]{width:36%;margin:0}}.date-input[_ngcontent-%COMP%]{width:100px;margin-right:25px}.time-input[_ngcontent-%COMP%]{margin-right:25px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.time-input[_ngcontent-%COMP%]{margin-right:5px}}.hour-input[_ngcontent-%COMP%], .minute-input[_ngcontent-%COMP%]{width:35px;margin-left:7px}.year-input[_ngcontent-%COMP%]{width:98px;margin:10px 18px 5px 12px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.year-input[_ngcontent-%COMP%]{width:33%;margin:0 0 0 10px}}.year-input-hide[_ngcontent-%COMP%]{width:120px;margin-right:25px;display:none}.year-input-only-year[_ngcontent-%COMP%]{width:120px;margin-right:25px}.reset-button[_ngcontent-%COMP%]{width:25px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.reset-button[_ngcontent-%COMP%]{padding-left:6px}}.toggle-filter-state[_ngcontent-%COMP%]{padding-left:15px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){.toggle-filter-state[_ngcontent-%COMP%]{padding-left:7px}}  .datepicker-year   .mat-calendar-arrow{display:none}  .datepicker-year   .mat-calendar-period-button{pointer-events:none}  .datepicker-year   .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover{background-color:#0000001f;border-radius:999px}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterTimeComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter-time',
                        templateUrl: './ogc-filter-time.component.html',
                        styleUrls: ['./ogc-filter-time.component.scss']
                    }]
            }], function () { return [{ type: OGCFilterTimeService }]; }, { datasource: [{
                    type: i0.Input
                }], currentFilter: [{
                    type: i0.Input
                }], changeProperty: [{
                    type: i0.Output
                }], endDatepickerTime: [{
                    type: i0.ViewChild,
                    args: ['endDatepickerTime']
                }], beginDatepickerTime: [{
                    type: i0.ViewChild,
                    args: ['beginDatepickerTime']
                }], beginTime: [{
                    type: i0.ViewChild,
                    args: ['beginTime']
                }], endTime: [{
                    type: i0.ViewChild,
                    args: ['endTime']
                }] });
    })();

    var moment = moment___namespace;
    var OgcFilterTimeSliderComponent = /** @class */ (function () {
        function OgcFilterTimeSliderComponent(ogcFilterTimeService) {
            this.ogcFilterTimeService = ogcFilterTimeService;
            this.changeProperty = new i0.EventEmitter();
            this.sliderValue = 1;
            this.calculatedStep = 0;
            this._defaultDisplayFormat = 'DD/MM/YYYY HH:mm A';
            this._defaultSliderInterval = 2000;
            this.playIcon = 'play-circle';
            this.resetIcon = 'replay';
            this.sliderDisplayWith = this.sliderDisplayWith.bind(this);
        }
        Object.defineProperty(OgcFilterTimeSliderComponent.prototype, "sliderInterval", {
            get: function () {
                return this.currentFilter.sliderInterval === undefined
                    ? this._defaultSliderInterval
                    : this.currentFilter.sliderInterval;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeSliderComponent.prototype, "displayFormat", {
            get: function () {
                var _a;
                if ((_a = this.currentFilter.sliderOptions) === null || _a === void 0 ? void 0 : _a.displayFormat) {
                    return this.currentFilter.sliderOptions.displayFormat;
                }
                if (this.currentFilter.displayFormat) {
                    return this.currentFilter.displayFormat;
                }
                return this._defaultDisplayFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeSliderComponent.prototype, "beginMillisecond", {
            get: function () {
                return this.ogcFilterTimeService.dateToNumber(this.begin);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeSliderComponent.prototype, "maxMillisecond", {
            get: function () {
                return this.ogcFilterTimeService.dateToNumber(this.max);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(OgcFilterTimeSliderComponent.prototype, "stepMillisecond", {
            get: function () {
                return this.ogcFilterTimeService.stepMillisecond(this.datasource, this.currentFilter);
            },
            enumerable: false,
            configurable: true
        });
        OgcFilterTimeSliderComponent.prototype.ngOnInit = function () {
            this.calculateStep();
            this.handleSliderInput({ value: 1 });
        };
        OgcFilterTimeSliderComponent.prototype.sliderDisplayWith = function (value) {
            var dateTmp = new Date(this.beginMillisecond + ((value - 1) * this.stepMillisecond));
            if (this.ogcFilterTimeService.stepIsYearDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter))) {
                var toAdd = moment.duration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)).years();
                dateTmp = moment(this.beginMillisecond).add((value - 1) * toAdd, 'year').toDate();
            }
            else if (this.ogcFilterTimeService.stepIsMonthDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter))) {
                var toAdd = moment.duration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)).months();
                dateTmp = moment(this.beginMillisecond).add((value - 1) * toAdd, 'month').toDate();
            }
            return moment(dateTmp).format(this.displayFormat);
        };
        OgcFilterTimeSliderComponent.prototype.playFilter = function (event) {
            var _this = this;
            if (this.interval) {
                this.stopFilter();
            }
            else {
                this.playIcon = 'pause-circle';
                this.interval = setInterval(function (that) {
                    if (_this.slider.value < _this.calculatedStep) {
                        var _increment = '_increment';
                        var _emitInputEvent = '_emitInputEvent';
                        _this.slider[_increment](1);
                        _this.slider[_emitInputEvent]();
                    }
                    else {
                        _this.stopFilter();
                    }
                }, this.sliderInterval, this);
            }
        };
        OgcFilterTimeSliderComponent.prototype.stopFilter = function () {
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.interval = undefined;
            this.playIcon = 'play-circle';
        };
        OgcFilterTimeSliderComponent.prototype.resetFilter = function (event) {
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.interval = undefined;
            this.playIcon = 'play-circle';
            this.slider.value = 1;
            var _increment = '_increment';
            var _emitInputEvent = '_emitInputEvent';
            this.slider[_emitInputEvent]();
        };
        OgcFilterTimeSliderComponent.prototype.handleSliderInput = function (matSliderChange) {
            if (matSliderChange) {
                if (this.ogcFilterTimeService.stepIsYearDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter))) {
                    var toAdd = moment.duration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)).years();
                    var dateBeginTmp = moment(this.beginMillisecond).add((matSliderChange.value - 1) * toAdd, 'year').toDate();
                    var dateEndTmp = moment(dateBeginTmp).add(toAdd, 'year').toDate();
                    this.changeProperty.next({ value: moment(dateBeginTmp).toDate().toISOString(),
                        pos: 1, refreshFilter: false });
                    this.changeProperty.next({ value: moment(dateEndTmp).toDate().toISOString(),
                        pos: 2, refreshFilter: true });
                }
                else if (this.ogcFilterTimeService.stepIsMonthDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter))) {
                    var toAdd = moment.duration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)).months();
                    var dateBeginTmp = moment(this.beginMillisecond).add((matSliderChange.value - 1) * toAdd, 'month').toDate();
                    var dateEndTmp = moment(dateBeginTmp).add(toAdd, 'month').toDate();
                    this.changeProperty.next({ value: moment(dateBeginTmp).startOf('month').toDate().toISOString(),
                        pos: 1, refreshFilter: false });
                    this.changeProperty.next({ value: moment(dateEndTmp).toDate().toISOString(),
                        pos: 2, refreshFilter: true });
                }
                else if (this.ogcFilterTimeService.stepIsDayDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)) ||
                    this.ogcFilterTimeService.stepIsHourDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter)) ||
                    this.ogcFilterTimeService.stepIsMinuteDuration(this.ogcFilterTimeService.step(this.datasource, this.currentFilter))) {
                    var dateTmp = new Date(this.beginMillisecond + (this.stepMillisecond * (matSliderChange.value - 1)));
                    this.changeProperty.next({ value: dateTmp.toISOString(), pos: 1, refreshFilter: false });
                    this.changeProperty.next({ value: new Date(this.ogcFilterTimeService.addStep(dateTmp.toISOString(), this.stepMillisecond)).toISOString(),
                        pos: 2, refreshFilter: true });
                }
            }
        };
        OgcFilterTimeSliderComponent.prototype.calculateStep = function () {
            for (var i = 1; (this.maxMillisecond - (this.beginMillisecond + (i * this.stepMillisecond))) >= -1; i++) {
                this.calculatedStep = i;
            }
        };
        return OgcFilterTimeSliderComponent;
    }());
    OgcFilterTimeSliderComponent.ɵfac = function OgcFilterTimeSliderComponent_Factory(t) { return new (t || OgcFilterTimeSliderComponent)(i0__namespace.ɵɵdirectiveInject(OGCFilterTimeService)); };
    OgcFilterTimeSliderComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterTimeSliderComponent, selectors: [["igo-ogc-filter-time-slider"]], viewQuery: function OgcFilterTimeSliderComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(i13$1.MatSlider, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.slider = _t.first);
            }
        }, inputs: { currentFilter: "currentFilter", begin: "begin", max: "max", datasource: "datasource" }, outputs: { changeProperty: "changeProperty" }, decls: 6, vars: 7, consts: [[1, "slider-container"], ["id", "time-slider", "thumbLabel", "", 3, "step", "min", "max", "ngModel", "displayWith", "ngModelChange", "input"], ["mat-icon-button", "", "color", "primary", 3, "click"], [3, "svgIcon"]], template: function OgcFilterTimeSliderComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "mat-slider", 1);
                i0__namespace.ɵɵlistener("ngModelChange", function OgcFilterTimeSliderComponent_Template_mat_slider_ngModelChange_1_listener($event) { return ctx.sliderValue = $event; })("input", function OgcFilterTimeSliderComponent_Template_mat_slider_input_1_listener($event) { return ctx.handleSliderInput($event); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(2, "button", 2);
                i0__namespace.ɵɵlistener("click", function OgcFilterTimeSliderComponent_Template_button_click_2_listener($event) { return ctx.playFilter($event); });
                i0__namespace.ɵɵelement(3, "mat-icon", 3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(4, "button", 2);
                i0__namespace.ɵɵlistener("click", function OgcFilterTimeSliderComponent_Template_button_click_4_listener($event) { return ctx.resetFilter($event); });
                i0__namespace.ɵɵelement(5, "mat-icon", 3);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("step", 1)("min", 1)("max", ctx.calculatedStep)("ngModel", ctx.sliderValue)("displayWith", ctx.sliderDisplayWith);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("svgIcon", ctx.playIcon);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx.resetIcon);
            }
        }, directives: [i13__namespace$1.MatSlider, i16__namespace.NgControlStatus, i16__namespace.NgModel, i2__namespace.MatButton, i4__namespace.MatIcon], styles: ["input{text-align:center!important;margin:auto 5px!important}  .mat-slider-thumb{transform:scale(0)!important}  .mat-slider-thumb-label{transform:rotate(45deg)!important;border-radius:50% 50% 0!important;background-color:#ffd740!important}  .mat-slider-thumb-label-text{opacity:1!important;transform:rotate(135deg)!important}  .mat-slider-horizontal .mat-slider-thumb-label{top:10px!important;transform:rotate(225deg)!important}  .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(225deg)!important}.datetime-container[_ngcontent-%COMP%]{text-align:center}.slider-container[_ngcontent-%COMP%]{text-align:center}.datetime-input[_ngcontent-%COMP%]{display:inline-block;margin:5px 25px}.date-input[_ngcontent-%COMP%]{width:120px;margin-right:25px}.time-input[_ngcontent-%COMP%]{display:inherit;margin-right:25px}.hour-input[_ngcontent-%COMP%], .minute-input[_ngcontent-%COMP%]{width:40px}.minute-input[_ngcontent-%COMP%]{margin-left:10px}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterTimeSliderComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter-time-slider',
                        templateUrl: './ogc-filter-time-slider.component.html',
                        styleUrls: ['./ogc-filter-time-slider.component.scss']
                    }]
            }], function () { return [{ type: OGCFilterTimeService }]; }, { currentFilter: [{
                    type: i0.Input
                }], begin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], datasource: [{
                    type: i0.Input
                }], changeProperty: [{
                    type: i0.Output
                }], slider: [{
                    type: i0.ViewChild,
                    args: [i13$1.MatSlider]
                }] });
    })();

    var IgoFilterModule = /** @class */ (function () {
        function IgoFilterModule() {
        }
        IgoFilterModule.forRoot = function () {
            return {
                ngModule: IgoFilterModule,
                providers: [
                    {
                        provide: i9.MAT_DATE_LOCALE,
                        useValue: 'fr-FR'
                    }
                ]
            };
        };
        return IgoFilterModule;
    }());
    IgoFilterModule.ɵfac = function IgoFilterModule_Factory(t) { return new (t || IgoFilterModule)(); };
    IgoFilterModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoFilterModule });
    IgoFilterModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [TimeFilterService, OGCFilterService, OGCFilterTimeService, SpatialFilterService], imports: [[
                i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i6$1.MatAutocompleteModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i20.MatTabsModule,
                i19.MatRadioModule,
                i5$2.MatMenuModule,
                i23.MatTableModule,
                i24.MatTreeModule,
                i18.MatButtonToggleModule,
                i11.MatCheckboxModule,
                i13$1.MatSliderModule,
                i22.MatSlideToggleModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i9.MatOptionModule,
                i13.MatSelectModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i25.MatDatepickerModule,
                i9.MatNativeDateModule,
                i4$1.MatDatetimepickerModule,
                i4$1.MatNativeDatetimeModule,
                i2$1.IgoLanguageModule,
                IgoLayerModule,
                i6.IgoCollapsibleModule,
                i6.IgoListModule,
                i6.IgoEntityModule,
                i6.IgoKeyValueModule,
                IgoGeometryModule,
                i9$1.MatBadgeModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoFilterModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i6$1.MatAutocompleteModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i20.MatTabsModule,
                            i19.MatRadioModule,
                            i5$2.MatMenuModule,
                            i23.MatTableModule,
                            i24.MatTreeModule,
                            i18.MatButtonToggleModule,
                            i11.MatCheckboxModule,
                            i13$1.MatSliderModule,
                            i22.MatSlideToggleModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i9.MatOptionModule,
                            i13.MatSelectModule,
                            i1$3.MatListModule,
                            i3.MatTooltipModule,
                            i25.MatDatepickerModule,
                            i9.MatNativeDateModule,
                            i4$1.MatDatetimepickerModule,
                            i4$1.MatNativeDatetimeModule,
                            i2$1.IgoLanguageModule,
                            IgoLayerModule,
                            i6.IgoCollapsibleModule,
                            i6.IgoListModule,
                            i6.IgoEntityModule,
                            i6.IgoKeyValueModule,
                            IgoGeometryModule,
                            i9$1.MatBadgeModule
                        ],
                        exports: [
                            FilterableDataSourcePipe,
                            TimeFilterButtonComponent,
                            TimeFilterFormComponent,
                            TimeFilterItemComponent,
                            TimeFilterListComponent,
                            TimeFilterListBindingDirective,
                            OgcFilterFormComponent,
                            OgcFilterButtonComponent,
                            OgcFilterSelectionComponent,
                            OgcFilterableFormComponent,
                            OgcFilterableItemComponent,
                            OgcFilterableListComponent,
                            OgcFilterableListBindingDirective,
                            SpatialFilterTypeComponent,
                            SpatialFilterListComponent,
                            SpatialFilterItemComponent,
                            OgcFilterTimeComponent,
                            OgcFilterTimeSliderComponent
                        ],
                        declarations: [
                            FilterableDataSourcePipe,
                            TimeFilterButtonComponent,
                            TimeFilterFormComponent,
                            TimeFilterItemComponent,
                            TimeFilterListComponent,
                            TimeFilterListBindingDirective,
                            OgcFilterFormComponent,
                            OgcFilterButtonComponent,
                            OgcFilterSelectionComponent,
                            OgcFilterableFormComponent,
                            OgcFilterableItemComponent,
                            OgcFilterableListComponent,
                            OgcFilterableListBindingDirective,
                            SpatialFilterTypeComponent,
                            SpatialFilterListComponent,
                            SpatialFilterItemComponent,
                            OgcFilterTimeComponent,
                            OgcFilterTimeSliderComponent
                        ],
                        providers: [TimeFilterService, OGCFilterService, OGCFilterTimeService, SpatialFilterService]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoFilterModule, { declarations: [FilterableDataSourcePipe,
                TimeFilterButtonComponent,
                TimeFilterFormComponent,
                TimeFilterItemComponent,
                TimeFilterListComponent,
                TimeFilterListBindingDirective,
                OgcFilterFormComponent,
                OgcFilterButtonComponent,
                OgcFilterSelectionComponent,
                OgcFilterableFormComponent,
                OgcFilterableItemComponent,
                OgcFilterableListComponent,
                OgcFilterableListBindingDirective,
                SpatialFilterTypeComponent,
                SpatialFilterListComponent,
                SpatialFilterItemComponent,
                OgcFilterTimeComponent,
                OgcFilterTimeSliderComponent], imports: [i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i6$1.MatAutocompleteModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i20.MatTabsModule,
                i19.MatRadioModule,
                i5$2.MatMenuModule,
                i23.MatTableModule,
                i24.MatTreeModule,
                i18.MatButtonToggleModule,
                i11.MatCheckboxModule,
                i13$1.MatSliderModule,
                i22.MatSlideToggleModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i9.MatOptionModule,
                i13.MatSelectModule,
                i1$3.MatListModule,
                i3.MatTooltipModule,
                i25.MatDatepickerModule,
                i9.MatNativeDateModule,
                i4$1.MatDatetimepickerModule,
                i4$1.MatNativeDatetimeModule,
                i2$1.IgoLanguageModule,
                IgoLayerModule,
                i6.IgoCollapsibleModule,
                i6.IgoListModule,
                i6.IgoEntityModule,
                i6.IgoKeyValueModule,
                IgoGeometryModule,
                i9$1.MatBadgeModule], exports: [FilterableDataSourcePipe,
                TimeFilterButtonComponent,
                TimeFilterFormComponent,
                TimeFilterItemComponent,
                TimeFilterListComponent,
                TimeFilterListBindingDirective,
                OgcFilterFormComponent,
                OgcFilterButtonComponent,
                OgcFilterSelectionComponent,
                OgcFilterableFormComponent,
                OgcFilterableItemComponent,
                OgcFilterableListComponent,
                OgcFilterableListBindingDirective,
                SpatialFilterTypeComponent,
                SpatialFilterListComponent,
                SpatialFilterItemComponent,
                OgcFilterTimeComponent,
                OgcFilterTimeSliderComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(TimeFilterButtonComponent, [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i9__namespace$1.MatBadge, TimeFilterItemComponent, i6__namespace.ListItemDirective], [i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(TimeFilterItemComponent, [i1__namespace$1.NgIf, i1__namespace$3.MatListItem, i4__namespace.MatIcon, i1__namespace$3.MatListAvatarCssMatStyler, i6__namespace.CollapseDirective, i9__namespace.MatLine, i1__namespace$1.NgStyle, i2__namespace.MatButton, i3__namespace.MatTooltip, i1__namespace$1.NgClass, LayerLegendComponent, TimeFilterFormComponent], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe]);
    i0__namespace.ɵɵsetComponentScope(TimeFilterListComponent, [i6__namespace.ListComponent, i1__namespace$1.NgForOf, TimeFilterItemComponent, i6__namespace.ListItemDirective], [FilterableDataSourcePipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterFormComponent, [i11__namespace.MatCheckbox, i3__namespace.MatTooltip, i12__namespace.MatFormField, i1__namespace$1.NgClass, i13__namespace.MatSelect, i9__namespace.MatOption, i1__namespace$1.NgIf, i5__namespace$1.MatInput, i6__namespace$1.MatAutocompleteTrigger, i6__namespace$1.MatAutocomplete, i1__namespace$1.NgForOf, i2__namespace.MatButton, i12__namespace.MatSuffix, i4__namespace.MatIcon, OgcFilterTimeComponent], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe, i6__namespace.KeyValuePipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterButtonComponent, [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i9__namespace$1.MatBadge, OgcFilterableItemComponent, i6__namespace.ListItemDirective], [i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterSelectionComponent, [i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.FormGroupDirective, i1__namespace$1.NgForOf, i1__namespace$1.NgIf, i10__namespace.MatDivider, i12__namespace.MatFormField, i13__namespace.MatSelect, i16__namespace.NgControlStatus, i16__namespace.FormControlName, i3__namespace.MatTooltip, i9__namespace.MatOption, i18__namespace.MatButtonToggleGroup, i18__namespace.MatButtonToggle, i1__namespace$1.NgStyle, i11__namespace.MatCheckbox, i19__namespace.MatRadioGroup, i19__namespace.MatRadioButton, i4__namespace.MatIcon, i16__namespace.FormControlDirective, i16__namespace.NgModel, OgcFilterTimeComponent], [i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterableFormComponent, [i1__namespace$1.NgIf, OgcFilterSelectionComponent, i6__namespace.ListItemDirective, i1__namespace$1.NgForOf, OgcFilterFormComponent], []);
    i0__namespace.ɵɵsetComponentScope(OgcFilterableItemComponent, [i1__namespace$3.MatListItem, i1__namespace$1.NgIf, i4__namespace.MatIcon, i1__namespace$3.MatListAvatarCssMatStyler, i6__namespace.CollapseDirective, i9__namespace.MatLine, i1__namespace$1.NgStyle, i3__namespace.MatTooltip, i2__namespace.MatButton, i1__namespace$1.NgClass, LayerLegendComponent, OgcFilterableFormComponent, i10__namespace.MatDivider, i11__namespace.MatCheckbox, i16__namespace.NgControlStatus, i16__namespace.NgModel], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterableListComponent, [i6__namespace.ListComponent, i1__namespace$1.NgForOf, OgcFilterableItemComponent, i6__namespace.ListItemDirective], [FilterableDataSourcePipe]);
    i0__namespace.ɵɵsetComponentScope(SpatialFilterTypeComponent, [i20__namespace.MatTabGroup, i20__namespace.MatTab, i12__namespace.MatFormField, i12__namespace.MatLabel, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i9__namespace.MatOption, SpatialFilterListComponent, i18__namespace.MatButtonToggleGroup, i18__namespace.MatButtonToggle, i3__namespace.MatTooltip, i4__namespace.MatIcon], [i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(SpatialFilterItemComponent, [GeometryFormFieldInputComponent, i16__namespace.NgControlStatus, i16__namespace.FormControlDirective, i1__namespace$1.NgIf, i22__namespace.MatSlideToggle, i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.NgForm, i12__namespace.MatFormField, i16__namespace.NumberValueAccessor, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i9__namespace.MatOption, i12__namespace.MatLabel, i19__namespace.MatRadioGroup, i19__namespace.MatRadioButton, i23__namespace.MatTable, i23__namespace.MatColumnDef, i23__namespace.MatHeaderCellDef, i23__namespace.MatHeaderCell, i11__namespace.MatCheckbox, i23__namespace.MatHeaderRowDef, i23__namespace.MatHeaderRow, i23__namespace.MatRowDef, i23__namespace.MatRow, i24__namespace.MatTree, i24__namespace.MatTreeNodeDef, i24__namespace.MatTreeNode, i24__namespace.MatTreeNodeToggle, i2__namespace.MatButton, i24__namespace.MatNestedTreeNode, i4__namespace.MatIcon, i24__namespace.MatTreeNodeOutlet, i3__namespace.MatTooltip, i6__namespace.EntityTableComponent], [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(OgcFilterTimeComponent, [i1__namespace$1.NgIf, i22__namespace.MatSlideToggle, i16__namespace.NgControlStatus, i16__namespace.NgModel, OgcFilterTimeSliderComponent, i12__namespace.MatFormField, i12__namespace.MatLabel, i5__namespace$1.MatInput, i25__namespace.MatDatepickerToggle, i12__namespace.MatSuffix, i25__namespace.MatDatepicker, i25__namespace.MatDatepickerInput, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i13__namespace.MatSelect, i16__namespace.FormControlDirective, i1__namespace$1.NgForOf, i9__namespace.MatOption], [i7__namespace.TranslatePipe]);

    function ExportButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 2);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 2, "igo.geo.download.action"))("color", ctx_r0.color);
        }
    }
    var ExportButtonComponent = /** @class */ (function () {
        function ExportButtonComponent() {
            this._color = 'primary';
        }
        Object.defineProperty(ExportButtonComponent.prototype, "layer", {
            get: function () {
                return this._layer;
            },
            set: function (value) {
                this._layer = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ExportButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ExportButtonComponent.prototype, "options", {
            get: function () {
                if (!this.layer) {
                    return;
                }
                return this.layer.dataSource.options;
            },
            enumerable: false,
            configurable: true
        });
        ExportButtonComponent.prototype.layerIsExportable = function () {
            var _a, _b;
            if ((this.layer instanceof VectorLayer && this.layer.exportable === true) ||
                (this.layer.dataSource.options.download && this.layer.dataSource.options.download.url) ||
                (((_a = this.layer.options.workspace) === null || _a === void 0 ? void 0 : _a.enabled) &&
                    ((_b = this.layer.options.workspace) === null || _b === void 0 ? void 0 : _b.workspaceId) !== this.layer.id)) {
                return true;
            }
            return false;
        };
        return ExportButtonComponent;
    }());
    ExportButtonComponent.ɵfac = function ExportButtonComponent_Factory(t) { return new (t || ExportButtonComponent)(); };
    ExportButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ExportButtonComponent, selectors: [["igo-export-button"]], inputs: { layer: "layer", color: "color" }, decls: 1, vars: 1, consts: [["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color"], ["svgIcon", "file-export"]], template: function ExportButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, ExportButtonComponent_button_0_Template, 3, 4, "button", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.layerIsExportable());
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon], pipes: [i7__namespace.TranslatePipe], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ExportButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-export-button',
                        templateUrl: './export-button.component.html',
                        styleUrls: ['./export-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { layer: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    var ExportError = /** @class */ (function (_super) {
        __extends(ExportError, _super);
        function ExportError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ExportError;
    }(Error));
    var ExportInvalidFileError = /** @class */ (function (_super) {
        __extends(ExportInvalidFileError, _super);
        function ExportInvalidFileError() {
            var _this = _super.call(this, 'Invalid file') || this;
            Object.setPrototypeOf(_this, ExportInvalidFileError.prototype);
            return _this;
        }
        return ExportInvalidFileError;
    }(ExportError));
    var ExportNothingToExportError = /** @class */ (function (_super) {
        __extends(ExportNothingToExportError, _super);
        function ExportNothingToExportError() {
            var _this = _super.call(this, 'Nothing to export') || this;
            Object.setPrototypeOf(_this, ExportNothingToExportError.prototype);
            return _this;
        }
        return ExportNothingToExportError;
    }(ExportError));

    function handleFileExportError(error, messageService, languageService) {
        if (error instanceof ExportNothingToExportError) {
            handleNothingToExportError(messageService, languageService);
            return;
        }
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.export.failed.title');
        var message = translate.instant('igo.geo.export.failed.text');
        messageService.error(message, title);
    }
    function handleFileExportSuccess(messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.export.success.title');
        var message = translate.instant('igo.geo.export.success.text');
        messageService.success(message, title);
    }
    function handleNothingToExportError(messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.export.nothing.title');
        var message = translate.instant('igo.geo.export.nothing.text');
        messageService.error(message, title);
    }
    /**
     * Export array to CSV
     *
     * @param rows Array of arrays to export as CSV
     * @param separator Cell separator
     */
    function exportToCSV(rows, fileName, separator) {
        if (separator === void 0) { separator = ';'; }
        var lines = rows.map(function (row, index) { return row.join(separator); });
        var csvContent = lines.join('\n');
        utils.downloadContent(csvContent, 'text/csv;charset=utf-8', fileName);
    }
    /**
     * Return an array of values from an array of entities.
     *
     * @param entities Array of entities
     * @param scolumns Columns definition of the output data
     */
    function entitiesToRowData(entities, columns) {
        return entities.map(function (entity) {
            return columns.map(function (column) {
                var valueAccessor;
                if (column.renderer === undefined || column.renderer === i6.EntityTableColumnRenderer.Default) {
                    valueAccessor = column.valueAccessor;
                }
                valueAccessor = valueAccessor ? valueAccessor : i6.getEntityProperty;
                return valueAccessor(entity, column.name);
            });
        });
    }

    var ExportFormat = utils.strEnum(['URL', 'GeoJSON', 'GML', 'GPX', 'KML', 'Shapefile', 'CSVcomma', 'CSVsemicolon']);
    var EncodingFormat = utils.strEnum(['UTF8', 'LATIN1']);

    var ExportService = /** @class */ (function () {
        function ExportService(config) {
            this.config = config;
            this.aggregateInComment = true;
            this.ogreUrl = this.config.getConfig('importExport.url');
            var gpxAggregateInComment = this.config.getConfig('importExport.gpxAggregateInComment');
            if (gpxAggregateInComment !== undefined) {
                this.aggregateInComment = gpxAggregateInComment;
            }
        }
        ExportService.prototype.export = function (olFeatures, format, title, encoding, projectionIn, projectionOut) {
            if (projectionIn === void 0) { projectionIn = 'EPSG:4326'; }
            if (projectionOut === void 0) { projectionOut = 'EPSG:4326'; }
            var exportOlFeatures = this.generateFeature(olFeatures, format);
            return this.exportAsync(exportOlFeatures, format, title, encoding, projectionIn, projectionOut);
        };
        ExportService.prototype.generateFeature = function (olFeatures, format) {
            if (format === ExportFormat.GPX && this.aggregateInComment) {
                return this.generateAggregatedFeature(olFeatures);
            }
            return olFeatures.map(function (olFeature) {
                var keys = olFeature
                    .getKeys()
                    .filter(function (key) { return !key.startsWith('_'); });
                var properties = keys.reduce(function (acc, key) {
                    acc[key] = olFeature.get(key);
                    return acc;
                }, { geometry: olFeature.getGeometry() });
                return new OlFeature__default["default"](properties);
            });
        };
        ExportService.prototype.generateAggregatedFeature = function (olFeatures) {
            return olFeatures.map(function (olFeature) {
                var keys = olFeature.getKeys().filter(function (key) { return !key.startsWith('_'); });
                var comment = '';
                var properties = keys.reduce(function (acc, key) {
                    if (key && key !== 'geometry') {
                        key === 'id' && olFeature.get('draw') ? comment += key + ':' + olFeature.get('draw') + '   \r\n'
                            : comment += key + ':' + olFeature.get(key) + '   \r\n';
                    }
                    acc[key] = olFeature.get(key);
                    return acc;
                }, {
                    geometry: olFeature.getGeometry()
                });
                var newFeature = new OlFeature__default["default"](properties);
                newFeature.set('name', olFeature.getId());
                newFeature.set('cmt', comment);
                return newFeature;
            });
        };
        ExportService.prototype.exportAsync = function (olFeatures, format, title, encoding, projectionIn, projectionOut) {
            var _this = this;
            var doExport = function (observer) {
                var nothingToExport = _this.nothingToExport(olFeatures, format);
                if (nothingToExport) {
                    observer.error(new ExportNothingToExportError());
                    return;
                }
                var ogreFormats = Object.keys(ExportService.ogreFormats);
                if (ogreFormats.indexOf(format) >= 0) {
                    if (!_this.ogreUrl) {
                        if (ExportService.noOgreFallbacks.indexOf(format) >= 0) {
                            _this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);
                        }
                        else {
                            observer.error(new ExportInvalidFileError());
                        }
                        return;
                    }
                    _this.exportWithOgre(olFeatures, observer, format, title, encoding, projectionIn, projectionOut);
                }
                else {
                    _this.exportToFile(olFeatures, observer, format, title, projectionIn, projectionOut);
                }
            };
            return new rxjs.Observable(doExport);
        };
        ExportService.prototype.exportToFile = function (olFeatures, observer, format, title, projectionIn, projectionOut) {
            var olFormat = new olformat__namespace[format]();
            var featuresText = olFormat.writeFeatures(olFeatures, {
                dataProjection: projectionOut,
                featureProjection: projectionIn,
                featureType: 'feature',
                featureNS: 'http://example.com/feature'
            });
            var fileName = title + "." + format.toLowerCase();
            utils.downloadContent(featuresText, 'text/plain;charset=utf-8', fileName);
            observer.complete();
        };
        ExportService.prototype.exportWithOgre = function (olFeatures, observer, format, title, encodingType, projectionIn, projectionOut) {
            var featuresText = new olformat__namespace.GeoJSON().writeFeatures(olFeatures, {
                dataProjection: projectionOut,
                featureProjection: projectionIn
            });
            var url = this.ogreUrl + "/convertJson";
            var form = document.createElement('form');
            form.style.display = 'none';
            document.body.appendChild(form);
            form.setAttribute('method', 'post');
            form.setAttribute('target', '_blank');
            form.setAttribute('action', url);
            if (encodingType === EncodingFormat.UTF8) {
                form.acceptCharset = 'UTF-8';
                form.enctype = 'application/x-www-form-urlencoded; charset=utf-8;';
            }
            else if (encodingType === EncodingFormat.LATIN1) {
                var enctype = 'ISO-8859-1';
                var encoding = document.createElement('input');
                encoding.setAttribute('type', 'hidden');
                encoding.setAttribute('name', 'encoding');
                encoding.setAttribute('value', enctype);
                form.appendChild(encoding);
            }
            if (format === 'CSVsemicolon') {
                var options = document.createElement('input');
                options.setAttribute('type', 'hidden');
                options.setAttribute('name', 'lco');
                options.setAttribute('value', 'SEPARATOR=SEMICOLON');
                form.appendChild(options);
            }
            var geojsonField = document.createElement('input');
            geojsonField.setAttribute('type', 'hidden');
            geojsonField.setAttribute('name', 'json');
            geojsonField.setAttribute('value', featuresText);
            form.appendChild(geojsonField);
            var outputNameField = document.createElement('input');
            var outputName = format === 'Shapefile' ? title + ".zip" : title + "." + format.toLowerCase();
            if (format === 'CSVcomma' || format === 'CSVsemicolon') {
                outputName = title + ".csv";
            }
            outputName = outputName.replace(' ', '_');
            outputName = outputName.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
            outputNameField.setAttribute('type', 'hidden');
            outputNameField.setAttribute('name', 'outputName');
            outputNameField.setAttribute('value', outputName);
            form.appendChild(outputNameField);
            var ogreFormat = ExportService.ogreFormats[format];
            if (format === 'CSVcomma' || format === 'CSVsemicolon') {
                ogreFormat = 'CSV';
            }
            var outputFormatField = document.createElement('input');
            outputFormatField.setAttribute('type', 'hidden');
            outputFormatField.setAttribute('name', 'format');
            outputFormatField.setAttribute('value', ogreFormat);
            form.appendChild(outputFormatField);
            form.submit();
            document.body.removeChild(form);
            observer.complete();
        };
        ExportService.prototype.nothingToExport = function (olFeatures, format) {
            if (olFeatures.length === 0) {
                return true;
            }
            if (format === 'GPX') {
                var pointOrLine = olFeatures.find(function (olFeature) {
                    return (['Point', 'LineString', 'MultiLineString'].indexOf(olFeature.getGeometry().getType()) >= 0);
                });
                return pointOrLine === undefined;
            }
            return false;
        };
        return ExportService;
    }());
    ExportService.ogreFormats = {
        GML: 'gml',
        GPX: 'gpx',
        KML: 'kml',
        Shapefile: 'ESRI Shapefile',
        CSVcomma: 'CSVcomma',
        CSVsemicolon: 'CSVsemicolon'
    };
    ExportService.noOgreFallbacks = ['GML', 'GPX', 'KML'];
    ExportService.ɵfac = function ExportService_Factory(t) { return new (t || ExportService)(i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    ExportService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: ExportService, factory: ExportService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ExportService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.ConfigService }]; }, null);
    })();

    function addLayerAndFeaturesToMap(features, map, layerTitle) {
        var olFeatures = features.map(function (feature) { return featureToOl(feature, map.projection); });
        var r = Math.floor(Math.random() * 255);
        var g = Math.floor(Math.random() * 255);
        var b = Math.floor(Math.random() * 255);
        var stroke = new olstyle__namespace.Stroke({
            color: [r, g, b, 1],
            width: 2
        });
        var fill = new olstyle__namespace.Fill({
            color: [r, g, b, 0.4]
        });
        var sourceOptions = {
            type: 'vector',
            queryable: true
        };
        var source = new FeatureDataSource(sourceOptions);
        source.ol.addFeatures(olFeatures);
        var layer = new VectorLayer({
            title: layerTitle,
            source: source,
            style: new olstyle__namespace.Style({
                stroke: stroke,
                fill: fill,
                image: new olstyle__namespace.Circle({
                    radius: 5,
                    stroke: stroke,
                    fill: fill
                })
            })
        });
        map.addLayer(layer);
        moveToOlFeatures(map, olFeatures);
        return layer;
    }
    function addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService) {
        var olFeatures = features.map(function (feature) { return featureToOl(feature, map.projection); });
        var style;
        var distance;
        if (styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute')) {
            var styleByAttribute_1 = styleListService.getStyleList(layerTitle.toString() + '.styleByAttribute');
            style = function (feature) {
                return styleService.createStyleByAttribute(feature, styleByAttribute_1);
            };
        }
        else if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {
            var clusterParam_1 = styleListService.getStyleList(layerTitle.toString() + '.clusterParam');
            distance = styleListService.getStyleList(layerTitle.toString() + '.distance');
            var baseStyle_1 = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.clusterStyle'));
            style = function (feature) {
                return styleService.createClusterStyle(feature, clusterParam_1, baseStyle_1);
            };
        }
        else if (styleListService.getStyleList(layerTitle.toString() + '.style')) {
            style = styleService.createStyle(styleListService.getStyleList(layerTitle.toString() + '.style'));
        }
        else if (styleListService.getStyleList('default.clusterStyle') &&
            features[0].geometry.type === 'Point') {
            var clusterParam_2 = styleListService.getStyleList('default.clusterParam');
            distance = styleListService.getStyleList('default.distance');
            var baseStyle_2 = styleService.createStyle(styleListService.getStyleList('default.clusterStyle'));
            style = function (feature) {
                return styleService.createClusterStyle(feature, clusterParam_2, baseStyle_2);
            };
        }
        else {
            style = styleService.createStyle(styleListService.getStyleList('default.style'));
        }
        var source;
        if (styleListService.getStyleList(layerTitle.toString() + '.clusterStyle')) {
            var sourceOptions = {
                distance: distance,
                type: 'cluster',
                queryable: true
            };
            source = new ClusterDataSource(sourceOptions);
            source.ol.source.addFeatures(olFeatures);
        }
        else if (styleListService.getStyleList(layerTitle.toString())) {
            var sourceOptions = {
                type: 'vector',
                queryable: true
            };
            source = new FeatureDataSource(sourceOptions);
            source.ol.addFeatures(olFeatures);
        }
        else if (styleListService.getStyleList('default.clusterStyle') &&
            features[0].geometry.type === 'Point') {
            var sourceOptions = {
                distance: distance,
                type: 'cluster',
                queryable: true
            };
            source = new ClusterDataSource(sourceOptions);
            source.ol.source.addFeatures(olFeatures);
        }
        else {
            var sourceOptions = {
                type: 'vector',
                queryable: true
            };
            source = new FeatureDataSource(sourceOptions);
            source.ol.addFeatures(olFeatures);
        }
        var layer = new VectorLayer({
            title: layerTitle,
            source: source,
            style: style
        });
        map.addLayer(layer);
        moveToOlFeatures(map, olFeatures);
        return layer;
    }
    function handleFileImportSuccess(file, features, map, messageService, languageService, styleListService, styleService) {
        if (features.length === 0) {
            handleNothingToImportError(file, messageService, languageService);
            return;
        }
        var layerTitle = computeLayerTitleFromFile(file);
        if (!styleListService) {
            addLayerAndFeaturesToMap(features, map, layerTitle);
        }
        else {
            addLayerAndFeaturesStyledToMap(features, map, layerTitle, styleListService, styleService);
        }
        var translate = languageService.translate;
        var messageTitle = translate.instant('igo.geo.dropGeoFile.success.title');
        var message = translate.instant('igo.geo.dropGeoFile.success.text', {
            value: layerTitle
        });
        messageService.success(message, messageTitle);
    }
    function handleFileImportError(file, error, messageService, languageService, sizeMb) {
        sizeMb = sizeMb ? sizeMb : 30;
        var errMapping = {
            'Invalid file': handleInvalidFileImportError,
            'File is too large': handleSizeFileImportError,
            'Failed to read file': handleUnreadbleFileImportError,
            'Invalid SRS definition': handleSRSImportError,
            'Error 500 with OGRE': handleOgreServerImportError
        };
        errMapping[error.message](file, error, messageService, languageService, sizeMb);
    }
    function handleInvalidFileImportError(file, error, messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.dropGeoFile.invalid.title');
        var message = translate.instant('igo.geo.dropGeoFile.invalid.text', {
            value: file.name,
            mimeType: file.type
        });
        messageService.error(message, title);
    }
    function handleUnreadbleFileImportError(file, error, messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.dropGeoFile.unreadable.title');
        var message = translate.instant('igo.geo.dropGeoFile.unreadable.text', {
            value: file.name
        });
        messageService.error(message, title);
    }
    function handleSizeFileImportError(file, error, messageService, languageService, sizeMb) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.dropGeoFile.tooLarge.title');
        var message = translate.instant('igo.geo.dropGeoFile.tooLarge.text', {
            value: file.name,
            size: sizeMb
        });
        messageService.error(message, title);
    }
    function handleNothingToImportError(file, messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.dropGeoFile.empty.title');
        var message = translate.instant('igo.geo.dropGeoFile.empty.text', {
            value: file.name,
            mimeType: file.type
        });
        messageService.error(message, title);
    }
    function handleSRSImportError(file, messageService, languageService) {
        var translate = languageService.translate;
        var title = translate.instant('igo.geo.dropGeoFile.invalidSRS.title');
        var message = translate.instant('igo.geo.dropGeoFile.invalidSRS.text', {
            value: file.name,
            mimeType: file.type
        });
        messageService.error(message, title);
    }
    function handleOgreServerImportError(file, error, messageService, languageService) {
        var title = languageService.translate.instant('igo.geo.dropGeoFile.ogreServer.title');
        var message = languageService.translate.instant('igo.geo.dropGeoFile.ogreServer.text');
        messageService.error(message, title);
    }
    function getFileExtension(file) {
        return file.name
            .split('.')
            .pop()
            .toLowerCase();
    }
    function computeLayerTitleFromFile(file) {
        return file.name.substr(0, file.name.lastIndexOf('.'));
    }

    var ImportError = /** @class */ (function (_super) {
        __extends(ImportError, _super);
        function ImportError() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ImportError;
    }(Error));
    var ImportInvalidFileError = /** @class */ (function (_super) {
        __extends(ImportInvalidFileError, _super);
        function ImportInvalidFileError() {
            var _this = _super.call(this, 'Invalid file') || this;
            Object.setPrototypeOf(_this, ImportInvalidFileError.prototype);
            return _this;
        }
        return ImportInvalidFileError;
    }(ImportError));
    var ImportUnreadableFileError = /** @class */ (function (_super) {
        __extends(ImportUnreadableFileError, _super);
        function ImportUnreadableFileError() {
            var _this = _super.call(this, 'Failed to read file') || this;
            Object.setPrototypeOf(_this, ImportUnreadableFileError.prototype);
            return _this;
        }
        return ImportUnreadableFileError;
    }(ImportError));
    var ImportNothingToImportError = /** @class */ (function (_super) {
        __extends(ImportNothingToImportError, _super);
        function ImportNothingToImportError() {
            var _this = _super.call(this, 'Nothing to import') || this;
            Object.setPrototypeOf(_this, ImportNothingToImportError.prototype);
            return _this;
        }
        return ImportNothingToImportError;
    }(ImportError));
    var ImportSizeError = /** @class */ (function (_super) {
        __extends(ImportSizeError, _super);
        function ImportSizeError() {
            var _this = _super.call(this, 'File is too large') || this;
            Object.setPrototypeOf(_this, ImportNothingToImportError.prototype);
            return _this;
        }
        return ImportSizeError;
    }(ImportError));
    var ImportSRSError = /** @class */ (function (_super) {
        __extends(ImportSRSError, _super);
        function ImportSRSError() {
            var _this = _super.call(this, 'Invalid SRS definition') || this;
            Object.setPrototypeOf(_this, ImportNothingToImportError.prototype);
            return _this;
        }
        return ImportSRSError;
    }(ImportError));
    var ImportOgreServerError = /** @class */ (function (_super) {
        __extends(ImportOgreServerError, _super);
        function ImportOgreServerError() {
            var _this = _super.call(this, 'Error 500 with OGRE') || this;
            Object.setPrototypeOf(_this, ImportOgreServerError.prototype);
            return _this;
        }
        return ImportOgreServerError;
    }(ImportError));

    var ImportService = /** @class */ (function () {
        function ImportService(http, config) {
            this.http = http;
            this.config = config;
            this.ogreUrl = this.config.getConfig('importExport.url');
            var configFileSizeMb = this.config.getConfig('importExport.clientSideFileSizeMaxMb');
            this.clientSideFileSizeMax = (configFileSizeMb ? configFileSizeMb : 30) * Math.pow(1024, 2);
        }
        ImportService.prototype.import = function (file, projectionIn, projectionOut) {
            if (projectionIn === void 0) { projectionIn = 'EPSG:4326'; }
            if (projectionOut === void 0) { projectionOut = 'EPSG:4326'; }
            return this.importAsync(file, projectionIn, projectionOut);
        };
        ImportService.prototype.getFileImporter = function (file) {
            var extension = getFileExtension(file);
            var mimeType = file.type;
            var allowedMimeTypes = __spreadArray(__spreadArray([], __read(ImportService.allowedMimeTypes)), __read(ImportService.allowedZipMimeTypes));
            var allowedExtensions = ImportService.allowedExtensions;
            if (allowedMimeTypes.indexOf(mimeType) < 0 &&
                allowedExtensions.indexOf(extension) < 0) {
                return undefined;
            }
            else if (mimeType === 'application/json' ||
                ['json', 'geojson', 'kml', 'gpx'].indexOf(extension) >= 0) {
                return this.importFile;
            }
            else if (this.ogreUrl !== undefined) {
                return this.importFileWithOgre;
            }
            return undefined;
        };
        ImportService.prototype.importAsync = function (file, projectionIn, projectionOut) {
            var _this = this;
            var doImport = function (observer) {
                if (file.size >= _this.clientSideFileSizeMax) {
                    observer.error(new ImportSizeError());
                    return;
                }
                var importer = _this.getFileImporter(file);
                if (importer === undefined) {
                    observer.error(new ImportInvalidFileError());
                    return;
                }
                importer.call(_this, file, observer, projectionIn, projectionOut);
            };
            return new rxjs.Observable(doImport);
        };
        ImportService.prototype.importFile = function (file, observer, projectionIn, projectionOut) {
            var _this = this;
            var reader = new FileReader();
            reader.onload = function (event) {
                try {
                    var features = _this.parseFeaturesFromFile(file, event.target.result, projectionIn, projectionOut);
                    observer.next(features);
                }
                catch (e) {
                    observer.error(new ImportUnreadableFileError());
                }
                observer.complete();
            };
            reader.onerror = function (evt) {
                observer.error(new ImportUnreadableFileError());
            };
            reader.readAsText(file, 'UTF-8');
        };
        ImportService.prototype.importFileWithOgre = function (file, observer, projectionIn, projectionOut) {
            var _this = this;
            var url = this.ogreUrl + "/convert";
            var formData = new FormData();
            formData.append('upload', file);
            formData.append('sourceSrs', projectionIn);
            formData.append('targetSrs', projectionOut);
            formData.append('formatOutput', 'GEOJSON');
            formData.append('skipFailures', '');
            this.http.post(url, formData, { headers: new i1$2.HttpHeaders() })
                .subscribe(function (response) {
                if (response === null) {
                    observer.error(new ImportUnreadableFileError());
                    return;
                }
                var errors = response.errors || [];
                if (errors.length > 0) {
                    observer.error(new ImportUnreadableFileError());
                }
                else {
                    var features = _this.parseFeaturesFromGeoJSON(file, response, projectionOut);
                    observer.next(features);
                    observer.complete();
                }
            }, function (error) {
                error.error.caught = true;
                var errMsg = error.error.msg || '';
                if (errMsg === 'No valid files found') {
                    observer.error(new ImportInvalidFileError());
                }
                else if (errMsg && errMsg.startWith('ERROR 1: Failed to process SRS definition')) {
                    observer.error(new ImportSRSError());
                }
                else if (error.status === 500) {
                    observer.error(new ImportOgreServerError());
                }
                else {
                    observer.error(new ImportUnreadableFileError());
                }
            });
        };
        ImportService.prototype.parseFeaturesFromFile = function (file, data, projectionIn, projectionOut) {
            var extension = getFileExtension(file);
            var mimeType = file.type;
            var GeoJSON = new olformat__namespace.GeoJSON();
            var format;
            if (mimeType === 'application/vnd.google-earth.kml+xml') {
                format = new olformat__namespace.KML();
            }
            else if (mimeType === 'application/gml+xml') {
                format = new olformat__namespace.GML();
            }
            else if (mimeType === 'application/gpx+xml') {
                format = new olformat__namespace.GPX();
            }
            else {
                switch (extension) {
                    case 'kml':
                        format = new olformat__namespace.KML();
                        break;
                    case 'gpx':
                        format = new olformat__namespace.GPX();
                        break;
                    case 'gml':
                        format = new olformat__namespace.GML();
                        break;
                    default:
                        format = GeoJSON;
                        break;
                }
            }
            var olFeatures = format.readFeatures(data, {
                dataProjection: projectionIn,
                featureProjection: projectionOut
            });
            var features = olFeatures.map(function (olFeature) {
                return Object.assign(GeoJSON.writeFeatureObject(olFeature), {
                    projection: projectionOut,
                    meta: {
                        id: utils.uuid(),
                        title: computeLayerTitleFromFile(file)
                    }
                });
            });
            return features;
        };
        ImportService.prototype.parseFeaturesFromGeoJSON = function (file, data, projectionOut) {
            var olFormat = new olformat__namespace.GeoJSON();
            var olFeatures = olFormat.readFeatures(data);
            var features = olFeatures.map(function (olFeature) {
                return Object.assign(olFormat.writeFeatureObject(olFeature), {
                    projection: projectionOut,
                    meta: {
                        id: utils.uuid(),
                        title: computeLayerTitleFromFile(file)
                    }
                });
            });
            return features;
        };
        return ImportService;
    }());
    ImportService.allowedMimeTypes = [
        'application/gml+xml',
        'application/vnd.google-earth.kml+xml',
        'application/gpx+xml',
        'application/json'
    ];
    ImportService.allowedZipMimeTypes = [
        'application/zip',
        'application/x-zip-compressed',
        'application/x-zip'
    ];
    ImportService.allowedExtensions = ['geojson', 'kml', 'gpx', 'json', 'gml'];
    ImportService.ɵfac = function ImportService_Factory(t) { return new (t || ImportService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    ImportService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: ImportService, factory: ImportService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ImportService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.ConfigService }]; }, null);
    })();

    var StyleListService = /** @class */ (function () {
        function StyleListService(injector) {
            this.injector = injector;
            this.styleList = {};
        }
        /**
         * Use to get the data found in styleList file
         */
        StyleListService.prototype.getStyleList = function (key) {
            return utils.ObjectUtils.resolve(this.styleList, key);
        };
        /**
         * This method loads "[path]" to get all styleList's variables
         */
        StyleListService.prototype.load = function (options) {
            var _this = this;
            var baseStyleList = options.default || {};
            if (!options.path) {
                this.styleList = baseStyleList;
                return true;
            }
            var http = this.injector.get(i1$2.HttpClient);
            return new Promise(function (resolve, _reject) {
                http
                    .get(options.path)
                    .pipe(operators.catchError(function (error) {
                    console.log("StyleList file " + options.path + " could not be read");
                    resolve(true);
                    return rxjs.throwError(error.error || 'Server error');
                }))
                    .subscribe(function (styleListResponse) {
                    _this.styleList = utils.ObjectUtils.mergeDeep(baseStyleList, styleListResponse);
                    resolve(true);
                });
            });
        };
        return StyleListService;
    }());
    StyleListService.ɵfac = function StyleListService_Factory(t) { return new (t || StyleListService)(i0__namespace.ɵɵinject(i0__namespace.Injector)); };
    StyleListService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: StyleListService, factory: StyleListService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(StyleListService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i0__namespace.Injector }]; }, null);
    })();

    function ImportExportComponent_form_8_mat_option_7_p_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 16);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var projection_r6 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(2, 1, "igo.geo.importExportForm.projections." + projection_r6.translateKey, projection_r6));
        }
    }
    function ImportExportComponent_form_8_mat_option_7_p_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "p", 16);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var projection_r6 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(projection_r6.alias);
        }
    }
    function ImportExportComponent_form_8_mat_option_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 14);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_8_mat_option_7_Template_mat_option_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵtemplate(1, ImportExportComponent_form_8_mat_option_7_p_1_Template, 3, 4, "p", 15);
            i0__namespace.ɵɵtemplate(2, ImportExportComponent_form_8_mat_option_7_p_2_Template, 2, 1, "p", 15);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var projection_r6 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", projection_r6);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", projection_r6.translateKey);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !projection_r6.translateKey);
        }
    }
    function ImportExportComponent_form_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "form", 5);
            i0__namespace.ɵɵelementStart(1, "div", 6);
            i0__namespace.ɵɵelementStart(2, "mat-form-field");
            i0__namespace.ɵɵelementStart(3, "mat-label");
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "mat-select", 7);
            i0__namespace.ɵɵlistener("valueChange", function ImportExportComponent_form_8_Template_mat_select_valueChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r12 = i0__namespace.ɵɵnextContext(); return ctx_r12.inputProj = $event; });
            i0__namespace.ɵɵtemplate(7, ImportExportComponent_form_8_mat_option_7_Template, 3, 3, "mat-option", 8);
            i0__namespace.ɵɵpipe(8, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(9, "div", 9);
            i0__namespace.ɵɵpipe(10, "translate");
            i0__namespace.ɵɵpipe(11, "translate");
            i0__namespace.ɵɵelementStart(12, "button", 10);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_8_Template_button_click_12_listener() { i0__namespace.ɵɵrestoreView(_r13_1); var _r5 = i0__namespace.ɵɵreference(19); return _r5.click(); });
            i0__namespace.ɵɵpipe(13, "async");
            i0__namespace.ɵɵtext(14);
            i0__namespace.ɵɵpipe(15, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(16, "igo-spinner", 11);
            i0__namespace.ɵɵpipe(17, "async");
            i0__namespace.ɵɵelementStart(18, "input", 12, 13);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_8_Template_input_click_18_listener() { i0__namespace.ɵɵrestoreView(_r13_1); var _r5 = i0__namespace.ɵɵreference(19); return _r5.value = null; })("change", function ImportExportComponent_form_8_Template_input_change_18_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var ctx_r16 = i0__namespace.ɵɵnextContext(); return ctx_r16.importFiles($event.target.files); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("formGroup", ctx_r0.importForm);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 10, "igo.geo.importExportForm.importProjPlaceholder"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("value", ctx_r0.inputProj);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(8, 12, ctx_r0.projections$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", ctx_r0.importForm.invalid ? i0__namespace.ɵɵpipeBind1(10, 14, "igo.geo.importExportForm.projections.choose") : i0__namespace.ɵɵpipeBind1(11, 16, "igo.geo.importExportForm.importButton"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("disabled", ctx_r0.importForm.invalid || i0__namespace.ɵɵpipeBind1(13, 18, ctx_r0.loading$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(15, 20, "igo.geo.importExportForm.importButton"), " ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("shown", i0__namespace.ɵɵpipeBind1(17, 22, ctx_r0.loading$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵstyleProp("display", "none");
        }
    }
    var _c0$4 = function (a0) { return { size: a0 }; };
    function ImportExportComponent_section_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "section", 17);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "ul");
            i0__namespace.ɵɵelementStart(5, "li");
            i0__namespace.ɵɵtext(6);
            i0__namespace.ɵɵpipe(7, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(8, "li");
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵpipe(10, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(11, "li");
            i0__namespace.ɵɵtext(12);
            i0__namespace.ɵɵpipe(13, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 4, "igo.geo.importExportForm.importClarifications"));
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind2(7, 6, "igo.geo.importExportForm.importSizeMax", i0__namespace.ɵɵpureFunction1(13, _c0$4, ctx_r1.fileSizeMb)));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(10, 9, "igo.geo.importExportForm.importFormatAuthorized"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(13, 11, "igo.geo.importExportForm.importShpZip"));
        }
    }
    function ImportExportComponent_section_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "section", 17);
            i0__namespace.ɵɵelementStart(1, "h4");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 1, "igo.geo.importExportForm.exportNoLayersExportable"));
        }
    }
    function ImportExportComponent_form_12_span_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 29);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r17 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate2(" (+", ctx_r17.layers.length - 1, " ", i0__namespace.ɵɵpipeBind1(2, 2, (ctx_r17.layers == null ? null : ctx_r17.layers.length) === 2 ? "igo.geo.importExportForm.other" : "igo.geo.importExportForm.others"), ") ");
        }
    }
    function ImportExportComponent_form_12_mat_option_10_mat_slide_toggle_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r30_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-slide-toggle", 32);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_12_mat_option_10_mat_slide_toggle_4_Template_mat_slide_toggle_click_0_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var layer_r26 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r28 = i0__namespace.ɵɵnextContext(2); return ctx_r28.onlySelectedClick($event, layer_r26.id); })("checked", function ImportExportComponent_form_12_mat_option_10_mat_slide_toggle_4_Template_mat_slide_toggle_checked_0_listener() { i0__namespace.ɵɵrestoreView(_r30_1); var layer_r26 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r31 = i0__namespace.ɵɵnextContext(2); return ctx_r31.inLayersIdToExportSelectionOnly(layer_r26); })("change", function ImportExportComponent_form_12_mat_option_10_mat_slide_toggle_4_Template_mat_slide_toggle_change_0_listener($event) { i0__namespace.ɵɵrestoreView(_r30_1); var layer_r26 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r33 = i0__namespace.ɵɵnextContext(2); return ctx_r33.onlySelected($event, layer_r26.id); });
            i0__namespace.ɵɵelementStart(1, "small");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("labelPosition", "after");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 2, "igo.geo.importExportForm.exportSelectedFeature"));
        }
    }
    var _c1$3 = function (a0) { return { "igo-export-layer-mat-option": a0 }; };
    function ImportExportComponent_form_12_mat_option_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 30);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_12_mat_option_10_Template_mat_option_click_0_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵelementStart(1, "p", 16);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(3, "p", 16);
            i0__namespace.ɵɵtemplate(4, ImportExportComponent_form_12_mat_option_10_mat_slide_toggle_4_Template, 4, 4, "mat-slide-toggle", 31);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var layer_r26 = ctx.$implicit;
            var ctx_r18 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(4, _c1$3, ctx_r18.layerHasSelectedFeatures(layer_r26)))("value", layer_r26.id);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(layer_r26.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r18.layerHasSelectedFeatures(layer_r26));
        }
    }
    function ImportExportComponent_form_12_ng_container_18_mat_option_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 2);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var format_r37 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", format_r37.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.export.format." + format_r37.value), " ");
        }
    }
    function ImportExportComponent_form_12_ng_container_18_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, ImportExportComponent_form_12_ng_container_18_mat_option_1_Template, 3, 4, "mat-option", 33);
            i0__namespace.ɵɵpipe(2, "keyvalue");
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r19 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(2, 1, i0__namespace.ɵɵpipeBind1(3, 3, ctx_r19.formats$)));
        }
    }
    function ImportExportComponent_form_12_mat_option_20_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 34);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 1, "igo.geo.export.noFormat.title"), " ");
        }
    }
    function ImportExportComponent_form_12_div_22_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 6);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelement(2, "input", 35);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(3, 1, "igo.geo.importExportForm.exportFileNamePlaceholder"));
        }
    }
    function ImportExportComponent_form_12_div_23_ng_container_6_mat_option_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 2);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var encoding_r40 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", encoding_r40.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.export.encoding." + encoding_r40.value), " ");
        }
    }
    function ImportExportComponent_form_12_div_23_ng_container_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtemplate(1, ImportExportComponent_form_12_div_23_ng_container_6_mat_option_1_Template, 3, 4, "mat-option", 33);
            i0__namespace.ɵɵpipe(2, "keyvalue");
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r38 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(2, 1, i0__namespace.ɵɵpipeBind1(3, 3, ctx_r38.encodings$)));
        }
    }
    function ImportExportComponent_form_12_div_23_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 6);
            i0__namespace.ɵɵelementStart(1, "mat-form-field");
            i0__namespace.ɵɵelementStart(2, "mat-label");
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(5, "mat-select", 36);
            i0__namespace.ɵɵtemplate(6, ImportExportComponent_form_12_div_23_ng_container_6_Template, 4, 5, "ng-container", 22);
            i0__namespace.ɵɵpipe(7, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r22 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(4, 2, "igo.geo.importExportForm.encodingPlaceholder"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(7, 4, ctx_r22.encodings$).length !== 0);
        }
    }
    function ImportExportComponent_form_12_div_24_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 37);
            i0__namespace.ɵɵelementStart(1, "mat-slide-toggle", 38);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 2, "igo.geo.importExportForm.exportCombineResults"), " ");
        }
    }
    function ImportExportComponent_form_12_div_25_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 39);
            i0__namespace.ɵɵelementStart(1, "mat-slide-toggle", 40);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 2, "igo.geo.importExportForm.exportSeparator"), " ");
        }
    }
    function ImportExportComponent_form_12_div_26_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 41);
            i0__namespace.ɵɵelementStart(1, "mat-slide-toggle", 42);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("labelPosition", "before");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 2, "igo.geo.importExportForm.exportFeatureInExtent"), " ");
        }
    }
    function ImportExportComponent_form_12_Template(rf, ctx) {
        if (rf & 1) {
            var _r42_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "form", 5);
            i0__namespace.ɵɵelementStart(1, "div", 6);
            i0__namespace.ɵɵelementStart(2, "mat-form-field");
            i0__namespace.ɵɵelementStart(3, "mat-label");
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵpipe(5, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "mat-select", 18);
            i0__namespace.ɵɵlistener("valueChange", function ImportExportComponent_form_12_Template_mat_select_valueChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r42_1); var ctx_r41 = i0__namespace.ɵɵnextContext(); return ctx_r41.layers = $event; });
            i0__namespace.ɵɵelementStart(7, "mat-select-trigger");
            i0__namespace.ɵɵtext(8);
            i0__namespace.ɵɵtemplate(9, ImportExportComponent_form_12_span_9_Template, 3, 4, "span", 19);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(10, ImportExportComponent_form_12_mat_option_10_Template, 5, 6, "mat-option", 20);
            i0__namespace.ɵɵpipe(11, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(12, "div", 6);
            i0__namespace.ɵɵelementStart(13, "mat-form-field");
            i0__namespace.ɵɵelementStart(14, "mat-label");
            i0__namespace.ɵɵtext(15);
            i0__namespace.ɵɵpipe(16, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(17, "mat-select", 21);
            i0__namespace.ɵɵtemplate(18, ImportExportComponent_form_12_ng_container_18_Template, 4, 5, "ng-container", 22);
            i0__namespace.ɵɵpipe(19, "async");
            i0__namespace.ɵɵtemplate(20, ImportExportComponent_form_12_mat_option_20_Template, 3, 3, "mat-option", 23);
            i0__namespace.ɵɵpipe(21, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(22, ImportExportComponent_form_12_div_22_Template, 4, 3, "div", 24);
            i0__namespace.ɵɵtemplate(23, ImportExportComponent_form_12_div_23_Template, 8, 6, "div", 24);
            i0__namespace.ɵɵtemplate(24, ImportExportComponent_form_12_div_24_Template, 4, 4, "div", 25);
            i0__namespace.ɵɵtemplate(25, ImportExportComponent_form_12_div_25_Template, 4, 4, "div", 26);
            i0__namespace.ɵɵtemplate(26, ImportExportComponent_form_12_div_26_Template, 4, 4, "div", 27);
            i0__namespace.ɵɵelementStart(27, "div", 28);
            i0__namespace.ɵɵelementStart(28, "button", 10);
            i0__namespace.ɵɵlistener("click", function ImportExportComponent_form_12_Template_button_click_28_listener() { i0__namespace.ɵɵrestoreView(_r42_1); var ctx_r43 = i0__namespace.ɵɵnextContext(); return ctx_r43.handleExportFormSubmit(ctx_r43.form.value); });
            i0__namespace.ɵɵpipe(29, "async");
            i0__namespace.ɵɵtext(30);
            i0__namespace.ɵɵpipe(31, "translate");
            i0__namespace.ɵɵpipe(32, "translate");
            i0__namespace.ɵɵpipe(33, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelement(34, "igo-spinner", 11);
            i0__namespace.ɵɵpipe(35, "async");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("formGroup", ctx_r3.form);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(5, 17, "igo.geo.importExportForm.exportLayerPlaceholder"));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("value", ctx_r3.layers);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", ctx_r3.layers.length ? ctx_r3.getLayerTitleById(ctx_r3.layers[0]) : "", " ");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.layers.length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(11, 19, ctx_r3.exportableLayers$));
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(16, 21, "igo.geo.importExportForm.exportFormatPlaceholder"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(19, 23, ctx_r3.formats$).length !== 0);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(21, 25, ctx_r3.formats$).length === 0);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.forceNaming && ctx_r3.form.value.format !== "URL");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.form.value.format === "CSVcomma" || ctx_r3.form.value.format === "CSVsemicolon");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.layers.length > 1 && (ctx_r3.form.value.format === "CSVcomma" || ctx_r3.form.value.format === "CSVsemicolon"));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.layers.length > 1 && (ctx_r3.form.value.format === "CSVcomma" || ctx_r3.form.value.format === "CSVsemicolon") && ctx_r3.form.value.combineLayers);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.form.value.format !== "URL");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("disabled", !ctx_r3.form.valid || i0__namespace.ɵɵpipeBind1(29, 27, ctx_r3.loading$));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", ctx_r3.form.value.format !== "URL" ? i0__namespace.ɵɵpipeBind1(31, 29, "igo.geo.importExportForm.exportButton") : ctx_r3.form.value.layers.length > 1 ? i0__namespace.ɵɵpipeBind1(32, 31, "igo.geo.importExportForm.exportButtonLinks") : i0__namespace.ɵɵpipeBind1(33, 33, "igo.geo.importExportForm.exportButtonLink"), " ");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("shown", i0__namespace.ɵɵpipeBind1(35, 35, ctx_r3.loading$));
        }
    }
    var ImportExportComponent = /** @class */ (function () {
        function ImportExportComponent(importService, exportService, languageService, messageService, styleListService, styleService, formBuilder, config, cdRef, storageService, downloadService) {
            this.importService = importService;
            this.exportService = exportService;
            this.languageService = languageService;
            this.messageService = messageService;
            this.styleListService = styleListService;
            this.styleService = styleService;
            this.formBuilder = formBuilder;
            this.config = config;
            this.cdRef = cdRef;
            this.storageService = storageService;
            this.downloadService = downloadService;
            this.formats$ = new rxjs.BehaviorSubject(undefined);
            this.encodings$ = new rxjs.BehaviorSubject(undefined);
            this.exportableLayers$ = new rxjs.BehaviorSubject([]);
            this.loading$ = new rxjs.BehaviorSubject(false);
            this.forceNaming = false;
            this.controlFormat = 'format';
            this.espgCodeRegex = new RegExp('^\\d{4,6}');
            this.projections$ = new rxjs.BehaviorSubject([]);
            this.popupChecked = false;
            this.previousLayerSpecs$ = new rxjs.BehaviorSubject(undefined);
            this.selectFirstProj = false;
            this._projectionsLimitations = {};
            this.selectedMode = 'import';
            this.selectMode = new i0.EventEmitter();
            this.exportOptions$ = new rxjs.BehaviorSubject(undefined);
            this.exportOptionsChange = new i0.EventEmitter();
            this.loadConfig();
            this.buildForm();
            this.computeProjections();
        }
        Object.defineProperty(ImportExportComponent.prototype, "projectionsLimitations", {
            get: function () {
                return this._projectionsLimitations || {};
            },
            set: function (value) {
                this._projectionsLimitations = value;
                this.computeProjections();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImportExportComponent.prototype, "layers", {
            get: function () {
                return this.form.get('layers').value;
            },
            set: function (value) {
                this.form.patchValue({ layers: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImportExportComponent.prototype, "inputProj", {
            get: function () {
                return this.importForm.get('inputProj').value;
            },
            set: function (value) {
                this.importForm.patchValue({ inputProj: value });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImportExportComponent.prototype, "popupAllowed", {
            get: function () {
                return this.storageService.get('importExportPopupAllowed') || false;
            },
            set: function (value) {
                this.storageService.set('importExportPopupAllowed', value);
            },
            enumerable: false,
            configurable: true
        });
        ImportExportComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.layers$$ = this.map.layers$.subscribe(function (layers) {
                _this.exportableLayers$.next(layers.filter(function (layer) {
                    return ((layer instanceof VectorLayer && layer.exportable === true) ||
                        (layer.dataSource.options.download &&
                            layer.dataSource.options.download.url));
                }));
            });
            var configFileSizeMb = this.config.getConfig('importExport.clientSideFileSizeMaxMb');
            this.clientSideFileSizeMax =
                (configFileSizeMb ? configFileSizeMb : 30) * Math.pow(1024, 2);
            this.fileSizeMb = this.clientSideFileSizeMax / Math.pow(1024, 2);
            this.exportOptions$$ = this.exportOptions$
                .pipe(operators.skipWhile(function (exportOptions) { return !exportOptions; }))
                .subscribe(function (exportOptions) {
                _this.form.patchValue(exportOptions, { emitEvent: true });
                if (exportOptions.layers) {
                    _this.computeFormats(exportOptions.layers.map(function (l) { return _this.map.getLayerById(l); }));
                }
            });
            this.formLayer$$ = this.form
                .get('format')
                .valueChanges
                .subscribe(function (format) {
                var _a;
                var ogreFormats = Object.keys(ExportService.ogreFormats);
                if (!_this.popupChecked &&
                    ((_a = _this.form.get('layers').value) === null || _a === void 0 ? void 0 : _a.length) > 1 &&
                    (ogreFormats.indexOf(format) >= 0 || format === ExportFormat.URL)) {
                    if (!_this.handlePopup(true)) {
                        _this.form.patchValue({ format: undefined }, { emitEvent: false });
                    }
                }
            });
            this.formLayer$$ = this.form
                .get('layers')
                .valueChanges.subscribe(function (layersId) {
                _this.handlePreviousLayerSpecs();
                var selectedLayers = layersId instanceof Array ? layersId : [layersId];
                _this.form.patchValue({ layers: selectedLayers }, { emitEvent: false });
                var layers = selectedLayers.map(function (l) { return _this.map.getLayerById(l); });
                _this.computeFormats(layers);
                if (Object.keys(_this.formats$.value).indexOf(_this.form.value.format) ===
                    -1) {
                    _this.form.patchValue({ format: undefined });
                }
                _this.loading$.next(true);
                var previousSpecs = [];
                layers.forEach(function (layer) {
                    if (layer instanceof VectorLayer &&
                        layer.dataSource.ol.getFeatures().length === 0) {
                        previousSpecs.push({
                            id: layer.id,
                            visible: layer.visible,
                            opacity: layer.opacity,
                            queryable: layer.queryable
                        });
                        layer.opacity = 0;
                        layer.visible = true;
                    }
                });
                _this.previousLayerSpecs$.next(previousSpecs);
                setTimeout(function () {
                    _this.loading$.next(false);
                }, 500);
            });
            this.formats$$ = this.formats$
                .pipe(operators.skipWhile(function (formats) { return !formats; }))
                .subscribe(function (formats) {
                if (Object.keys(formats).length === 1) {
                    _this.form.patchValue({ format: formats[Object.keys(formats)[0]] });
                }
            });
            this.encodings$$ = this.encodings$
                .pipe(operators.skipWhile(function (encodings) { return !encodings; }))
                .subscribe(function (encodings) {
                if (Object.keys(encodings).length === 1) {
                    _this.form.patchValue({ encoding: encodings[Object.keys(encodings)[0]] });
                }
            });
            this.exportableLayers$$ = this.exportableLayers$
                .pipe(operators.skipWhile(function (layers) { return !layers; }))
                .subscribe(function (layers) {
                if (layers.length === 1) {
                    _this.form.patchValue({ layers: layers[0].id });
                }
            });
            this.form.controls[this.controlFormat].valueChanges.subscribe(function (format) {
                if (format === ExportFormat.CSVcomma || format === ExportFormat.CSVsemicolon) {
                    _this.form.patchValue({ encoding: EncodingFormat.LATIN1 });
                }
                else {
                    _this.form.patchValue({ encoding: EncodingFormat.UTF8 });
                }
                _this.cdRef.detectChanges();
            });
            if (this.selectFirstProj) {
                if (this.projections$.value.length === 0) {
                    this.importForm.patchValue({ inputProj: { translateKey: 'nad83', alias: 'NAD83', code: 'EPSG:4326', zone: '' } });
                }
                else {
                    this.importForm.patchValue({ inputProj: this.projections$.value[0] });
                }
            }
            else {
                this.importForm.patchValue({ inputProj: undefined });
            }
        };
        ImportExportComponent.prototype.computeProjections = function () {
            this.projectionsConstraints = computeProjectionsConstraints(this.projectionsLimitations);
            var projections = [];
            if (this.projectionsConstraints.nad83) {
                projections.push({ translateKey: 'nad83', alias: 'NAD83', code: 'EPSG:4269', zone: '' });
            }
            if (this.projectionsConstraints.wgs84) {
                projections.push({ translateKey: 'wgs84', alias: 'WGS84', code: 'EPSG:4326', zone: '' });
            }
            if (this.projectionsConstraints.webMercator) {
                projections.push({ translateKey: 'webMercator', alias: 'Web Mercator', code: 'EPSG:3857', zone: '' });
            }
            if (this.projectionsConstraints.mtm) {
                // all mtm zones
                var minZone = this.projectionsConstraints.mtmZone.minZone;
                var maxZone = this.projectionsConstraints.mtmZone.maxZone;
                for (var mtmZone = minZone; mtmZone <= maxZone; mtmZone++) {
                    var code = mtmZone < 10 ? "EPSG:3218" + mtmZone : "EPSG:321" + (80 + mtmZone);
                    projections.push({ translateKey: 'mtm', alias: "MTM " + mtmZone, code: code, zone: "" + mtmZone });
                }
            }
            if (this.projectionsConstraints.utm) {
                // all utm zones
                var minZone = this.projectionsConstraints.utmZone.minZone;
                var maxZone = this.projectionsConstraints.utmZone.maxZone;
                for (var utmZone = minZone; utmZone <= maxZone; utmZone++) {
                    var code = utmZone < 10 ? "EPSG:3260" + utmZone : "EPSG:326" + utmZone;
                    projections.push({ translateKey: 'utm', alias: "UTM " + utmZone, code: code, zone: "" + utmZone });
                }
            }
            var configProjection = [];
            if (this.projectionsConstraints.projFromConfig) {
                configProjection = this.config.getConfig('projections') || [];
            }
            this.projections$.next(configProjection.concat(projections));
        };
        ImportExportComponent.prototype.getWorkspaceByLayerId = function (id) {
            var wksFromLayerId = this.store
                .all()
                .find(function (workspace) { return workspace.layer.id === id; });
            if (wksFromLayerId) {
                return wksFromLayerId;
            }
            return;
        };
        ImportExportComponent.prototype.getLayerTitleById = function (id) {
            var _a;
            return (_a = this.map.getLayerById(id)) === null || _a === void 0 ? void 0 : _a.title;
        };
        ImportExportComponent.prototype.layerHasSelectedFeatures = function (layer) {
            var wksFromLayer = this.getWorkspaceByLayerId(layer.id);
            if (wksFromLayer) {
                var recs = wksFromLayer.entityStore.stateView
                    .firstBy(function (record) {
                    return record.state.selected === true;
                });
                return recs ? true : false;
            }
        };
        ImportExportComponent.prototype.onlySelected = function (event, id) {
            var layersWithSelection = this.form.value.layersWithSelection;
            if (event.checked) {
                layersWithSelection.push(id);
            }
            else {
                layersWithSelection = layersWithSelection.filter(function (layerId) { return layerId !== id; });
            }
            this.form.patchValue({ layersWithSelection: layersWithSelection });
        };
        ImportExportComponent.prototype.onlySelectedClick = function (event, id) {
            if (this.form.value.layers.find(function (layerId) { return layerId === id; })) {
                event.stopPropagation();
            }
        };
        ImportExportComponent.prototype.inLayersIdToExportSelectionOnly = function (layer) {
            return this.form.value.layersWithSelection.find(function (layerId) { return layerId === layer.id; }) ? true : false;
        };
        ImportExportComponent.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
            this.exportableLayers$$.unsubscribe();
            this.formats$$.unsubscribe();
            this.encodings$$.unsubscribe();
            this.formLayer$$.unsubscribe();
            if (this.exportOptions$$) {
                this.exportOptions$$.unsubscribe();
            }
            this.exportOptionsChange.emit(this.form.value);
            this.handlePreviousLayerSpecs();
        };
        ImportExportComponent.prototype.handlePreviousLayerSpecs = function () {
            var _this = this;
            var previousSpecs = this.previousLayerSpecs$.value;
            if (previousSpecs && previousSpecs.length) {
                previousSpecs.forEach(function (specs) {
                    var previousLayer = _this.map.getLayerById(specs.id);
                    previousLayer.visible = specs.visible;
                    previousLayer.opacity = specs.opacity;
                    previousLayer.queryable = specs.queryable;
                });
            }
            this.previousLayerSpecs$.next(undefined);
        };
        ImportExportComponent.prototype.importFiles = function (files) {
            var e_1, _b;
            var _this = this;
            var inputProj = this.inputProj.code;
            if (this.espgCodeRegex.test(inputProj)) {
                inputProj = "EPSG:" + inputProj;
            }
            this.loading$.next(true);
            var _loop_1 = function (file) {
                this_1.importService.import(file, inputProj).subscribe(function (features) { return _this.onFileImportSuccess(file, features); }, function (error) { return _this.onFileImportError(file, error); }, function () {
                    _this.loading$.next(false);
                });
            };
            var this_1 = this;
            try {
                for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                    var file = files_1_1.value;
                    _loop_1(file);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (files_1_1 && !files_1_1.done && (_b = files_1.return)) _b.call(files_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        ImportExportComponent.prototype.handlePopup = function (preCheck) {
            if (preCheck === void 0) { preCheck = true; }
            var p1 = window.open('', 'popup', 'width=1, height=1');
            p1.close();
            var p2 = window.open('', 'popup', 'width=1, height=1');
            if (!p2 || p2.closed || typeof p2.closed === 'undefined' || p2 === null) {
                this.onPopupBlockedError(preCheck);
                this.popupAllowed = false;
            }
            else {
                p2.close();
                this.popupAllowed = true;
                this.popupChecked = true;
            }
            return this.popupAllowed;
        };
        ImportExportComponent.prototype.handleExportFormSubmit = function (data) {
            var e_2, _b;
            var _this = this;
            this.loading$.next(true);
            var ogreFormats = Object.keys(ExportService.ogreFormats);
            if (!this.popupChecked && data.layers.length > 1 &&
                (ogreFormats.indexOf(data.format) >= 0 || data.format === ExportFormat.URL) && !this.popupAllowed) {
                this.handlePopup();
            }
            var geomTypesCSV = [];
            var featuresCSV = [];
            var filename = "";
            var _loop_2 = function (layerIndex, layer) {
                var lay = this_2.map.getLayerById(layer);
                if (!(data.format === ExportFormat.CSVsemicolon || data.format === ExportFormat.CSVcomma)
                    || !data.combineLayers || data.layers.length === 1) {
                    filename = lay.title;
                    if (data.name) {
                        filename = data.name;
                    }
                }
                else {
                    filename = this_2.languageService.translate.instant('igo.geo.export.combinedLayers');
                }
                var dSOptions = lay.dataSource.options;
                if (data.format === ExportFormat.URL && dSOptions.download && (dSOptions.download.url || dSOptions.download.dynamicUrl)) {
                    setTimeout(function () {
                        // better look an feel
                        var url = dSOptions.download.url || dSOptions.download.dynamicUrl;
                        url.match(/service=wfs/gi) ? _this.downloadService.open(lay) : window.open(url, '_blank');
                        _this.loading$.next(false);
                    }, 500);
                    return { value: void 0 };
                }
                var wks = this_2.getWorkspaceByLayerId(layer);
                var olFeatures = void 0;
                if (wks && wks.entityStore && wks.entityStore.stateView.all().length) {
                    if (data.layersWithSelection.indexOf(layer) !== -1 && data.featureInMapExtent) {
                        // Only export selected feature && into map extent
                        olFeatures = wks.entityStore.stateView.all()
                            .filter(function (e) { return e.state.inMapExtent && e.state.selected; }).map(function (e) { return e.entity.ol; });
                    }
                    else if (data.layersWithSelection.indexOf(layer) !== -1 && !data.featureInMapExtent) {
                        // Only export selected feature &&  (into map extent OR not)
                        olFeatures = wks.entityStore.stateView.all()
                            .filter(function (e) { return e.state.selected; }).map(function (e) { return e.entity.ol; });
                    }
                    else if (data.featureInMapExtent) {
                        // Only into map extent
                        olFeatures = wks.entityStore.stateView.all()
                            .filter(function (e) { return e.state.inMapExtent; }).map(function (e) { return e.entity.ol; });
                    }
                    else {
                        // All features
                        olFeatures = wks.entityStore.stateView.all().map(function (e) { return e.entity.ol; });
                    }
                }
                else {
                    var ol = lay.dataSource.ol;
                    if (data.featureInMapExtent) {
                        olFeatures = ol.getFeaturesInExtent(lay.map.viewController.getExtent());
                    }
                    else {
                        olFeatures = ol.getFeatures();
                    }
                    if (lay.dataSource instanceof ClusterDataSource) {
                        olFeatures = olFeatures.flatMap(function (cluster) { return cluster.get('features'); });
                    }
                }
                var translate = this_2.languageService.translate;
                var geomTypes = [];
                if (data.format === ExportFormat.Shapefile || data.format === ExportFormat.GPX) {
                    olFeatures.forEach(function (olFeature) {
                        var featureGeomType = olFeature.getGeometry().getType();
                        var currentGeomType = geomTypes.find(function (geomType) { return geomType.geometryType === featureGeomType; });
                        if (currentGeomType) {
                            currentGeomType.features.push(olFeature);
                        }
                        else {
                            geomTypes.push({ geometryType: featureGeomType, features: [olFeature] });
                        }
                    });
                }
                else {
                    geomTypes = [{ geometryType: '', features: olFeatures }];
                }
                geomTypes.forEach(function (geomType) {
                    geomType.features.forEach(function (feature) {
                        var radius = feature.get('rad');
                        if (radius) {
                            var center4326 = [feature.get('longitude'), feature.get('latitude')];
                            var circle = OlPolygon.circular(center4326, radius, 500);
                            circle.transform('EPSG:4326', feature.get('_projection'));
                            feature.setGeometry(circle);
                        }
                    });
                });
                if (data.format === ExportFormat.GPX) {
                    var gpxFeatureCnt = geomTypes.length;
                    geomTypes = geomTypes.filter(function (geomType) { return ['LineString', 'Point'].includes(geomType.geometryType); });
                    var gpxFeatureCntPointOrPoly = geomTypes.length;
                    if (gpxFeatureCnt > gpxFeatureCntPointOrPoly) {
                        var title = translate.instant('igo.geo.export.gpx.error.poly.title');
                        var message = translate.instant('igo.geo.export.gpx.error.poly.text');
                        this_2.messageService.error(message, title, { timeOut: 20000 });
                    }
                }
                else if ((data.format === ExportFormat.CSVsemicolon || data.format === ExportFormat.CSVcomma) && data.combineLayers) {
                    geomTypes.forEach(function (geomType) { return geomTypesCSV.push(geomType); });
                    if (layerIndex !== data.layers.length - 1) {
                        return "continue";
                    }
                    else {
                        var previousFeature_1 = undefined;
                        geomTypesCSV.forEach(function (geomType) {
                            geomType.features.forEach(function (currentFeature) {
                                if (data.separator) {
                                    if (previousFeature_1) {
                                        if (currentFeature.get('_featureStore').layer.options.title !==
                                            previousFeature_1.get('_featureStore').layer.options.title) {
                                            var titleEmptyRows = _this.createTitleEmptyRows(previousFeature_1, currentFeature);
                                            featuresCSV.push(titleEmptyRows[2]);
                                            featuresCSV.push(titleEmptyRows[0]);
                                            featuresCSV.push(titleEmptyRows[1]);
                                        }
                                    }
                                    else {
                                        var titleEmptyRows = _this.createTitleEmptyRows(currentFeature, currentFeature);
                                        featuresCSV.push(titleEmptyRows[0]);
                                    }
                                }
                                featuresCSV.push(currentFeature);
                                previousFeature_1 = currentFeature;
                            });
                        });
                    }
                }
                if (geomTypes.length === 0) {
                    this_2.loading$.next(false);
                    var title = translate.instant('igo.geo.export.nothing.title');
                    var message = translate.instant('igo.geo.export.nothing.text');
                    this_2.messageService.error(message, title, { timeOut: 20000 });
                }
                else {
                    if (!(data.format === ExportFormat.CSVsemicolon || data.format === ExportFormat.CSVcomma) || !data.combineLayers) {
                        geomTypes.map(function (geomType) { return _this.exportService.export(geomType.features, data.format, filename + geomType.geometryType, data.encoding, _this.map.projection)
                            .subscribe(function () { }, function (error) { return _this.onFileExportError(error); }, function () {
                            _this.onFileExportSuccess();
                            geomType.features.forEach(function (feature) {
                                _this.circleToPoint(feature);
                            });
                            _this.loading$.next(false);
                        }); });
                    }
                }
            };
            var this_2 = this;
            try {
                for (var _c = __values(data.layers.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), layerIndex = _e[0], layer = _e[1];
                    var state_1 = _loop_2(layerIndex, layer);
                    if (typeof state_1 === "object")
                        return state_1.value;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            ;
            if ((data.format === ExportFormat.CSVsemicolon || data.format === ExportFormat.CSVcomma) && data.combineLayers) {
                this.exportService.export(featuresCSV, data.format, filename, data.encoding, this.map.projection)
                    .subscribe(function () { }, function (error) { return _this.onFileExportError(error); }, function () {
                    _this.onFileExportSuccess();
                    featuresCSV.forEach(function (feature) {
                        _this.circleToPoint(feature);
                    });
                    _this.loading$.next(false);
                });
            }
        };
        ImportExportComponent.prototype.createTitleEmptyRows = function (previousFeature, currentFeature) {
            var titleRow = currentFeature.clone();
            var headerRow = currentFeature.clone();
            var emptyRow = currentFeature.clone();
            var previousFeatureKeys = previousFeature.getKeys();
            var firstKeyPrevious = '';
            for (var key in previousFeatureKeys) {
                if (previousFeatureKeys[key] !== 'geometry') {
                    firstKeyPrevious = previousFeatureKeys[key];
                    break;
                }
            }
            var currentFeatureKeys = currentFeature.getKeys();
            var firstKeyCurrent = '';
            for (var key in currentFeatureKeys) {
                if (currentFeatureKeys[key] !== 'geometry') {
                    firstKeyCurrent = currentFeatureKeys[key];
                    break;
                }
            }
            var allKeys = currentFeature.getKeys();
            previousFeatureKeys.forEach(function (previousKey) {
                if (allKeys.includes(previousKey) && previousKey !== firstKeyPrevious) {
                    allKeys.push(previousKey);
                }
            });
            allKeys.unshift(firstKeyPrevious);
            var firstKeyAll = '';
            for (var key in allKeys) {
                if (allKeys[key] !== 'geometry') {
                    firstKeyAll = allKeys[key];
                    break;
                }
            }
            allKeys.forEach(function (key) {
                var sameKeys = previousFeatureKeys.length === currentFeatureKeys.length &&
                    previousFeatureKeys.every(function (value, index) { return value === currentFeatureKeys[index]; });
                if (key === firstKeyAll && !sameKeys) {
                    titleRow.set(key, currentFeature.get('_featureStore').layer.options.title + " ===============>", true);
                    headerRow.set(key, key, true);
                    emptyRow.unset(key, true);
                }
                else if (key === firstKeyAll && sameKeys) {
                    titleRow.set(key, currentFeature.get('_featureStore').layer.options.title, true);
                    headerRow.set(key, key, true);
                    emptyRow.unset(key, true);
                }
                else if (key === firstKeyCurrent) {
                    titleRow.set(key, currentFeature.get('_featureStore').layer.options.title, true);
                    headerRow.set(key, key, true);
                    emptyRow.unset(key, true);
                }
                else if (key !== 'geometry') {
                    titleRow.unset(key, true);
                    headerRow.set(key, key, true);
                    emptyRow.unset(key, true);
                }
                else {
                    titleRow.unset(key, true);
                    emptyRow.unset(key, true);
                }
                if (!(currentFeatureKeys.includes(key))) {
                    headerRow.unset(key, true);
                }
            });
            var titleEmptyRows = [titleRow, headerRow, emptyRow];
            return titleEmptyRows;
        };
        ImportExportComponent.prototype.circleToPoint = function (feature) {
            var radius = feature.get('rad');
            if (radius) {
                var point = new OlPoint__default["default"]([feature.get('longitude'), feature.get('latitude')]);
                point.transform('EPSG:4326', feature.get('_projection'));
                feature.setGeometry(point);
            }
        };
        ImportExportComponent.prototype.buildForm = function () {
            this.importForm = this.formBuilder.group({
                inputProj: ['', [i16.Validators.required]]
            });
            if (this.forceNaming) {
                this.form = this.formBuilder.group({
                    format: ['', [i16.Validators.required]],
                    layers: [[], [i16.Validators.required]],
                    layersWithSelection: [[]],
                    encoding: [EncodingFormat.UTF8, [i16.Validators.required]],
                    combineLayers: [true, [i16.Validators.required]],
                    separator: [false, [i16.Validators.required]],
                    featureInMapExtent: [false, [i16.Validators.required]],
                    name: ['', [i16.Validators.required]]
                });
            }
            else {
                this.form = this.formBuilder.group({
                    format: ['', [i16.Validators.required]],
                    layers: [[], [i16.Validators.required]],
                    layersWithSelection: [[]],
                    encoding: [EncodingFormat.UTF8, [i16.Validators.required]],
                    combineLayers: [true, [i16.Validators.required]],
                    separator: [false, [i16.Validators.required]],
                    featureInMapExtent: [false, [i16.Validators.required]],
                });
            }
        };
        ImportExportComponent.prototype.onFileImportSuccess = function (file, features) {
            if (!this.config.getConfig('importWithStyle')) {
                handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);
            }
            else {
                handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService, this.styleListService, this.styleService);
            }
        };
        ImportExportComponent.prototype.onFileImportError = function (file, error) {
            this.loading$.next(false);
            handleFileImportError(file, error, this.messageService, this.languageService, this.fileSizeMb);
        };
        ImportExportComponent.prototype.onPopupBlockedError = function (preCheck) {
            if (preCheck === void 0) { preCheck = true; }
            this.loading$.next(false);
            var translate = this.languageService.translate;
            var title = translate.instant('igo.geo.export.popupBlocked.title');
            var extraMessage = preCheck ?
                translate.instant('igo.geo.export.popupBlocked.selectAgain') :
                translate.instant('igo.geo.export.popupBlocked.retry');
            var message = translate.instant('igo.geo.export.popupBlocked.text', { extraMessage: extraMessage });
            this.messageService.error(message, title, { timeOut: 20000 });
        };
        ImportExportComponent.prototype.onFileExportError = function (error) {
            this.loading$.next(false);
            handleFileExportError(error, this.messageService, this.languageService);
        };
        ImportExportComponent.prototype.loadConfig = function () {
            if (this.config.getConfig('importExport.forceNaming') !== undefined) {
                this.forceNaming = this.config.getConfig('importExport.forceNaming');
            }
            this.computeFormats();
            this.loadEncodings();
        };
        ImportExportComponent.prototype.encodingDefaultValue = function (format) {
            if (format === ExportFormat.CSVcomma || format === ExportFormat.CSVsemicolon) {
                this.form.patchValue({ encoding: EncodingFormat.LATIN1 });
                return EncodingFormat.LATIN1;
            }
            else {
                this.form.patchValue({ encoding: EncodingFormat.UTF8 });
                return EncodingFormat.UTF8;
            }
        };
        ImportExportComponent.prototype.loadEncodings = function () {
            this.encodings$.next(EncodingFormat);
        };
        ImportExportComponent.prototype.computeFormats = function (layers) {
            var _this = this;
            var appliedformats = Object.keys(ExportFormat);
            var formatsType = {
                onlyUrl: false,
                onlyVector: false,
                vectorAndUrl: false,
                customList: false
            };
            var customList = [];
            if (layers && layers.length) {
                layers.forEach(function (layer) {
                    var _a;
                    if (!layer) {
                        return;
                    }
                    if ((_a = layer.dataSource.options.download) === null || _a === void 0 ? void 0 : _a.allowedFormats) {
                        formatsType.customList = true;
                        customList.push({ layer: layer.title, formats: _this.validateListFormat(layer.dataSource.options.download.allowedFormats) });
                    }
                    else if (!(layer instanceof VectorLayer) &&
                        layer.dataSource.options.download &&
                        layer.dataSource.options.download.url) {
                        formatsType.onlyUrl = true;
                    }
                    else if (layer.dataSource.options.download &&
                        (layer.dataSource.options.download.url || layer.dataSource.options.download.dynamicUrl)) {
                        formatsType.vectorAndUrl = true;
                    }
                    else if (layer instanceof VectorLayer) {
                        formatsType.onlyVector = true;
                    }
                });
                if (formatsType.onlyUrl === true && formatsType.onlyVector === false) {
                    appliedformats = ['URL'];
                }
                else if (formatsType.onlyVector === true &&
                    formatsType.onlyUrl === false) {
                    this.computeFormats(); // reset
                    if (ExportFormat.URL in this.formats$.value) {
                        var keys = Object.keys(this.formats$.value).filter(function (key) { return key !== 'URL'; });
                        appliedformats = keys;
                    }
                }
                else if (formatsType.vectorAndUrl === true &&
                    formatsType.onlyUrl === false &&
                    formatsType.onlyVector === false) {
                    this.computeFormats(); // reset
                    if (!(ExportFormat.URL in this.formats$.value)) {
                        var keys = Object.keys(this.formats$.value);
                        keys.push('URL');
                        appliedformats = keys;
                    }
                }
            }
            if (this.config.getConfig('importExport.formats') !== undefined) {
                var validatedListFormat = this.validateListFormat(this.config.getConfig('importExport.formats'));
                appliedformats = validatedListFormat;
            }
            if (formatsType.customList) {
                var commonFormats_1;
                var layersWithCustomFormats_1 = [];
                var previousCustomListFormats_1 = customList[0].formats;
                customList.map(function (list) {
                    layersWithCustomFormats_1.push(list.layer);
                    commonFormats_1 = list.formats.filter(function (value) { return previousCustomListFormats_1.includes(value); });
                    previousCustomListFormats_1 = list.formats;
                });
                var finalFormats = commonFormats_1.filter(function (value) { return appliedformats.includes(value); });
                if (finalFormats.length > 0) {
                    this.formats$.next(utils.strEnum(finalFormats));
                    if (layers && layers.length) {
                        if (layers.length > 1) {
                            this.messageService.alert(this.languageService.translate.instant('igo.geo.export.customList.text', { value: layersWithCustomFormats_1.join() }), this.languageService.translate.instant('igo.geo.export.customList.title'));
                        }
                    }
                }
                else {
                    this.formats$.next([]);
                    this.messageService.alert(this.languageService.translate.instant('igo.geo.export.noFormat.text'), this.languageService.translate.instant('igo.geo.export.noFormat.title'));
                }
                return;
            }
            else {
                this.formats$.next(utils.strEnum(appliedformats));
            }
        };
        ImportExportComponent.prototype.validateListFormat = function (formats) {
            return formats
                .filter(function (format) {
                if (format.toUpperCase() === ExportFormat.CSVcomma.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.CSVsemicolon.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.GML.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.GPX.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.GeoJSON.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.KML.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.Shapefile.toUpperCase() ||
                    format.toUpperCase() === ExportFormat.URL.toUpperCase()) {
                    return format;
                }
            })
                .map(function (format) {
                if (format.toUpperCase() === ExportFormat.CSVcomma.toUpperCase()) {
                    format = ExportFormat.CSVcomma;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.CSVsemicolon.toUpperCase()) {
                    format = ExportFormat.CSVsemicolon;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.GML.toUpperCase()) {
                    format = ExportFormat.GML;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.GPX.toUpperCase()) {
                    format = ExportFormat.GPX;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.GeoJSON.toUpperCase()) {
                    format = ExportFormat.GeoJSON;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.KML.toUpperCase()) {
                    format = ExportFormat.KML;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.Shapefile.toUpperCase()) {
                    format = ExportFormat.Shapefile;
                    return format;
                }
                if (format.toUpperCase() === ExportFormat.URL.toUpperCase()) {
                    format = ExportFormat.URL;
                    return format;
                }
            });
        };
        ImportExportComponent.prototype.modeChanged = function (mode) {
            this.selectMode.emit(mode);
        };
        ImportExportComponent.prototype.onFileExportSuccess = function () {
            handleFileExportSuccess(this.messageService, this.languageService);
        };
        ImportExportComponent.prototype.onImportExportChange = function (event) {
            this.selectedMode = event.value;
        };
        return ImportExportComponent;
    }());
    ImportExportComponent.ɵfac = function ImportExportComponent_Factory(t) { return new (t || ImportExportComponent)(i0__namespace.ɵɵdirectiveInject(ImportService), i0__namespace.ɵɵdirectiveInject(ExportService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(StyleListService), i0__namespace.ɵɵdirectiveInject(StyleService), i0__namespace.ɵɵdirectiveInject(i16__namespace.FormBuilder), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.StorageService), i0__namespace.ɵɵdirectiveInject(DownloadService)); };
    ImportExportComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ImportExportComponent, selectors: [["igo-import-export"]], inputs: { selectFirstProj: "selectFirstProj", map: "map", projectionsLimitations: "projectionsLimitations", store: "store", selectedMode: "selectedMode", exportOptions$: "exportOptions$" }, outputs: { selectMode: "selectMode", exportOptionsChange: "exportOptionsChange" }, decls: 14, vars: 17, consts: [[1, "import-export-toggle", "mat-typography"], [3, "value", "change"], [3, "value"], ["class", "igo-form", 3, "formGroup", 4, "ngIf"], ["class", "mat-typography", 4, "ngIf"], [1, "igo-form", 3, "formGroup"], [1, "igo-input-container"], [3, "value", "valueChange"], [3, "value", "click", 4, "ngFor", "ngForOf"], ["tooltip-position", "below", "matTooltipShowDelay", "500", 1, "igo-form-button-group", 3, "matTooltip"], ["mat-raised-button", "", "type", "button", 3, "disabled", "click"], [3, "shown"], ["hidden", "", "type", "file", 3, "click", "change"], ["fileInput", ""], [3, "value", "click"], ["mat-line", "", 4, "ngIf"], ["mat-line", ""], [1, "mat-typography"], ["multiple", "", 3, "value", "valueChange"], ["class", "export-select-trigger", 4, "ngIf"], [3, "ngClass", "value", "click", 4, "ngFor", "ngForOf"], ["formControlName", "format"], [4, "ngIf"], ["disabled", "true", 4, "ngIf"], ["class", "igo-input-container", 4, "ngIf"], ["class", "export-combine-layers mat-typography", 4, "ngIf"], ["class", "export-separator mat-typography", 4, "ngIf"], ["class", "export-options mat-typography", 4, "ngIf"], [1, "igo-form-button-group"], [1, "export-select-trigger"], [3, "ngClass", "value", "click"], [3, "labelPosition", "click", "checked", "change", 4, "ngIf"], [3, "labelPosition", "click", "checked", "change"], [3, "value", 4, "ngFor", "ngForOf"], ["disabled", "true"], ["matInput", "", "formControlName", "name", 3, "placeholder"], ["formControlName", "encoding"], [1, "export-combine-layers", "mat-typography"], ["formControlName", "combineLayers", 3, "labelPosition"], [1, "export-separator", "mat-typography"], ["formControlName", "separator", 3, "labelPosition"], [1, "export-options", "mat-typography"], ["formControlName", "featureInMapExtent", 3, "labelPosition"]], template: function ImportExportComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "mat-button-toggle-group", 1);
                i0__namespace.ɵɵlistener("change", function ImportExportComponent_Template_mat_button_toggle_group_change_1_listener($event) { return ctx.onImportExportChange($event); });
                i0__namespace.ɵɵelementStart(2, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(3);
                i0__namespace.ɵɵpipe(4, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(5, "mat-button-toggle", 2);
                i0__namespace.ɵɵtext(6);
                i0__namespace.ɵɵpipe(7, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(8, ImportExportComponent_form_8_Template, 20, 24, "form", 3);
                i0__namespace.ɵɵtemplate(9, ImportExportComponent_section_9_Template, 14, 15, "section", 4);
                i0__namespace.ɵɵtemplate(10, ImportExportComponent_section_10_Template, 4, 3, "section", 4);
                i0__namespace.ɵɵpipe(11, "async");
                i0__namespace.ɵɵtemplate(12, ImportExportComponent_form_12_Template, 36, 37, "form", 3);
                i0__namespace.ɵɵpipe(13, "async");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("value", ctx.selectedMode);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("value", "import");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(4, 9, "igo.geo.importExportForm.importTabTitle"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("value", "export");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(7, 11, "igo.geo.importExportForm.exportTabTitle"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.selectedMode === "import");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.selectedMode === "import");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(11, 13, ctx.exportableLayers$).length === 0 && ctx.selectedMode === "export");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(13, 15, ctx.exportableLayers$).length > 0 && ctx.selectedMode === "export");
            }
        }, directives: [i18__namespace.MatButtonToggleGroup, i18__namespace.MatButtonToggle, i1__namespace$1.NgIf, i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.FormGroupDirective, i12__namespace.MatFormField, i12__namespace.MatLabel, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i3__namespace.MatTooltip, i2__namespace.MatButton, i6__namespace.SpinnerComponent, i9__namespace.MatOption, i13__namespace.MatSelectTrigger, i16__namespace.NgControlStatus, i16__namespace.FormControlName, i1__namespace$1.NgClass, i22__namespace.MatSlideToggle, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe, i6__namespace.KeyValuePipe], styles: ["mat-option.igo-export-layer-mat-option[_ngcontent-%COMP%]{height:5em;line-height:1em}.import-export-toggle[_ngcontent-%COMP%]{padding:10px;text-align:center}.import-export-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]{width:100%}.import-export-toggle[_ngcontent-%COMP%]   mat-button-toggle-group[_ngcontent-%COMP%]   mat-button-toggle[_ngcontent-%COMP%]{width:50%}h4[_ngcontent-%COMP%]{padding:0 5px}.igo-form[_ngcontent-%COMP%]{padding:15px 5px}.igo-input-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.igo-form-button-group[_ngcontent-%COMP%]{text-align:center;padding-top:10px}igo-spinner[_ngcontent-%COMP%]{position:absolute;padding-left:10px}.export-options[_ngcontent-%COMP%], .export-combine-layers[_ngcontent-%COMP%], .export-separator[_ngcontent-%COMP%]{overflow-x:hidden}.export-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%], .export-combine-layers[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%], .export-separator[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{width:100%;margin:10px}.export-options[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content, .export-combine-layers[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content, .export-separator[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 60px)}.export-select-trigger[_ngcontent-%COMP%]{opacity:.75;font-size:.75em}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ImportExportComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-import-export',
                        templateUrl: './import-export.component.html',
                        styleUrls: ['./import-export.component.scss']
                    }]
            }], function () { return [{ type: ImportService }, { type: ExportService }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.MessageService }, { type: StyleListService }, { type: StyleService }, { type: i16__namespace.FormBuilder }, { type: i2__namespace$1.ConfigService }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace$1.StorageService }, { type: DownloadService }]; }, { selectFirstProj: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], projectionsLimitations: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], selectedMode: [{
                    type: i0.Input
                }], selectMode: [{
                    type: i0.Output
                }], exportOptions$: [{
                    type: i0.Input
                }], exportOptionsChange: [{
                    type: i0.Output
                }] });
    })();

    var DropGeoFileDirective = /** @class */ (function (_super) {
        __extends(DropGeoFileDirective, _super);
        function DropGeoFileDirective(component, importService, languageService, styleListService, styleService, config, messageService) {
            var _this = _super.call(this) || this;
            _this.component = component;
            _this.importService = importService;
            _this.languageService = languageService;
            _this.styleListService = styleListService;
            _this.styleService = styleService;
            _this.config = config;
            _this.messageService = messageService;
            _this.filesDropped = new i0.EventEmitter();
            _this.filesInvalid = new i0.EventEmitter();
            _this.epsgCode$ = new rxjs.BehaviorSubject(undefined);
            _this.epsgCode$$ = [];
            return _this;
        }
        Object.defineProperty(DropGeoFileDirective.prototype, "map", {
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        DropGeoFileDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.filesDropped$$ = this.filesDropped.subscribe(function (files) {
                _this.onFilesDropped(files);
            });
        };
        DropGeoFileDirective.prototype.ngOnDestroy = function () {
            this.filesDropped$$.unsubscribe();
        };
        DropGeoFileDirective.prototype.onDragOver = function (evt) {
            _super.prototype.onDragOver.call(this, evt);
        };
        DropGeoFileDirective.prototype.onDragLeave = function (evt) {
            _super.prototype.onDragLeave.call(this, evt);
        };
        DropGeoFileDirective.prototype.onDrop = function (evt) {
            _super.prototype.onDrop.call(this, evt);
        };
        DropGeoFileDirective.prototype.onFilesDropped = function (files) {
            var e_1, _c;
            var _this = this;
            var _loop_1 = function (file) {
                this_1.detectEPSG(file);
                this_1.epsgCode$$.push(this_1.epsgCode$.pipe(operators.skipWhile(function (code) { return !code; }), operators.first(), operators.concatMap(function (epsgCode) {
                    var epsg = epsgCode === 'epsgNotDefined' ? undefined : epsgCode;
                    _this.epsgCode$.next(undefined);
                    return _this.importService.import(file, epsg);
                })).subscribe(function (features) { return _this.onFileImportSuccess(file, features); }, function (error) { return _this.onFileImportError(file, error); }));
            };
            var this_1 = this;
            try {
                for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                    var file = files_1_1.value;
                    _loop_1(file);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (files_1_1 && !files_1_1.done && (_c = files_1.return)) _c.call(files_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        DropGeoFileDirective.prototype.detectEPSG = function (file, nbLines) {
            var _this = this;
            if (nbLines === void 0) { nbLines = 500; }
            if (!file.name.toLowerCase().endsWith('.geojson') && !file.name.toLowerCase().endsWith('.gml')) {
                this.epsgCode$.next('epsgNotDefined');
                return;
            }
            var reader = new FileReader();
            reader.onload = function (e) {
                var _a, _b;
                if (file.name.toLowerCase().endsWith('.geojson')) {
                    var geojson = JSON.parse(reader.result);
                    if ((_b = (_a = geojson.crs) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.name) {
                        var epsg = geojson.crs.properties.name.match(/EPSG:{1,2}\d{0,6}/gm);
                        if (epsg !== null && epsg.length) {
                            _this.epsgCode$.next(epsg[0].replace(/::/g, ':'));
                            return;
                        }
                        else {
                            _this.epsgCode$.next('epsgNotDefined');
                            return;
                        }
                    }
                    else {
                        _this.epsgCode$.next('epsgNotDefined');
                        return;
                    }
                }
                else if (file.name.toLowerCase().endsWith('.gml')) {
                    var text = reader.result;
                    var lines = text.split('\n');
                    for (var line = 0; line <= nbLines; line++) {
                        var epsg = lines[line].match(/EPSG:\d{0,6}/gm);
                        if (epsg !== null && epsg.length) {
                            _this.epsgCode$.next(epsg[0]);
                            break;
                        }
                        else {
                            _this.epsgCode$.next(undefined);
                            return;
                        }
                    }
                }
                else {
                    _this.epsgCode$.next('epsgNotDefined');
                    return;
                }
            };
            reader.readAsText(file, 'UTF-8');
        };
        DropGeoFileDirective.prototype.onFileImportSuccess = function (file, features) {
            if (!this.config.getConfig('importWithStyle')) {
                handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService);
            }
            else {
                handleFileImportSuccess(file, features, this.map, this.messageService, this.languageService, this.styleListService, this.styleService);
            }
        };
        DropGeoFileDirective.prototype.onFileImportError = function (file, error) {
            handleFileImportError(file, error, this.messageService, this.languageService, this.config.getConfig('importExport.clientSideFileSizeMaxMb'));
        };
        return DropGeoFileDirective;
    }(i6.DragAndDropDirective));
    DropGeoFileDirective.ɵfac = function DropGeoFileDirective_Factory(t) { return new (t || DropGeoFileDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent), i0__namespace.ɵɵdirectiveInject(ImportService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(StyleListService), i0__namespace.ɵɵdirectiveInject(StyleService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.ConfigService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService)); };
    DropGeoFileDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: DropGeoFileDirective, selectors: [["", "igoDropGeoFile", ""]], hostBindings: function DropGeoFileDirective_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("dragover", function DropGeoFileDirective_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); })("dragleave", function DropGeoFileDirective_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); })("drop", function DropGeoFileDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
            }
        }, features: [i0__namespace.ɵɵInheritDefinitionFeature] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DropGeoFileDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoDropGeoFile]'
                    }]
            }], function () { return [{ type: MapBrowserComponent }, { type: ImportService }, { type: i2__namespace$1.LanguageService }, { type: StyleListService }, { type: StyleService }, { type: i2__namespace$1.ConfigService }, { type: i2__namespace$1.MessageService }]; }, { onDragOver: [{
                    type: i0.HostListener,
                    args: ['dragover', ['$event']]
                }], onDragLeave: [{
                    type: i0.HostListener,
                    args: ['dragleave', ['$event']]
                }], onDrop: [{
                    type: i0.HostListener,
                    args: ['drop', ['$event']]
                }] });
    })();

    var STYLELIST_OPTIONS = new i0.InjectionToken('styleListOptions');
    function provideStyleListOptions(options) {
        return {
            provide: STYLELIST_OPTIONS,
            useValue: options
        };
    }
    function styleListFactory(styleListService, options) {
        return function () { return styleListService.load(options); };
    }
    function provideStyleListLoader() {
        return {
            provide: i0.APP_INITIALIZER,
            useFactory: styleListFactory,
            multi: true,
            deps: [StyleListService, STYLELIST_OPTIONS]
        };
    }

    var IgoStyleListModule = /** @class */ (function () {
        function IgoStyleListModule() {
        }
        IgoStyleListModule.forRoot = function () {
            return {
                ngModule: IgoStyleListModule,
                providers: [provideStyleListOptions({}), provideStyleListLoader()]
            };
        };
        return IgoStyleListModule;
    }());
    IgoStyleListModule.ɵfac = function IgoStyleListModule_Factory(t) { return new (t || IgoStyleListModule)(); };
    IgoStyleListModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoStyleListModule });
    IgoStyleListModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoStyleListModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: []
                    }]
            }], null, null);
    })();

    var IgoImportExportModule = /** @class */ (function () {
        function IgoImportExportModule() {
        }
        IgoImportExportModule.forRoot = function () {
            return {
                ngModule: IgoImportExportModule
            };
        };
        return IgoImportExportModule;
    }());
    IgoImportExportModule.ɵfac = function IgoImportExportModule_Factory(t) { return new (t || IgoImportExportModule)(); };
    IgoImportExportModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoImportExportModule });
    IgoImportExportModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i4.MatIconModule,
                i3.MatTooltipModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i20.MatTabsModule,
                i13.MatSelectModule,
                i9.MatOptionModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule,
                i6.IgoSpinnerModule,
                i6.IgoKeyValueModule,
                i6.IgoDrapDropModule,
                IgoStyleListModule.forRoot()
            ], IgoStyleListModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoImportExportModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.MatIconModule,
                            i3.MatTooltipModule,
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i1$1.CommonModule,
                            i2.MatButtonModule,
                            i18.MatButtonToggleModule,
                            i20.MatTabsModule,
                            i13.MatSelectModule,
                            i9.MatOptionModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i22.MatSlideToggleModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoSpinnerModule,
                            i6.IgoKeyValueModule,
                            i6.IgoDrapDropModule,
                            IgoStyleListModule.forRoot()
                        ],
                        exports: [ImportExportComponent, DropGeoFileDirective, IgoStyleListModule, ExportButtonComponent],
                        declarations: [ImportExportComponent, DropGeoFileDirective, ExportButtonComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoImportExportModule, { declarations: [ImportExportComponent, DropGeoFileDirective, ExportButtonComponent], imports: [i4.MatIconModule,
                i3.MatTooltipModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i20.MatTabsModule,
                i13.MatSelectModule,
                i9.MatOptionModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule,
                i6.IgoSpinnerModule,
                i6.IgoKeyValueModule,
                i6.IgoDrapDropModule, IgoStyleListModule], exports: [ImportExportComponent, DropGeoFileDirective, IgoStyleListModule, ExportButtonComponent] });
    })();

    var IgoMapModule = /** @class */ (function () {
        function IgoMapModule() {
        }
        return IgoMapModule;
    }());
    IgoMapModule.ɵfac = function IgoMapModule_Factory(t) { return new (t || IgoMapModule)(); };
    IgoMapModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoMapModule });
    IgoMapModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i2$1.IgoLanguageModule,
                i6.IgoConfirmDialogModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoMapModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoConfirmDialogModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i3.MatTooltipModule
                        ],
                        exports: [
                            MapBrowserComponent,
                            ZoomButtonComponent,
                            GeolocateButtonComponent,
                            HomeExtentButtonComponent,
                            RotationButtonComponent,
                            InfoSectionComponent,
                            BaseLayersSwitcherComponent,
                            MiniBaseMapComponent,
                            MapOfflineDirective,
                            OfflineButtonComponent,
                            PointerPositionDirective,
                            HoverFeatureDirective,
                            SwipeControlComponent,
                            MapCenterComponent,
                            MenuButtonComponent
                        ],
                        declarations: [
                            MapBrowserComponent,
                            ZoomButtonComponent,
                            GeolocateButtonComponent,
                            HomeExtentButtonComponent,
                            RotationButtonComponent,
                            InfoSectionComponent,
                            BaseLayersSwitcherComponent,
                            MiniBaseMapComponent,
                            MapOfflineDirective,
                            OfflineButtonComponent,
                            PointerPositionDirective,
                            HoverFeatureDirective,
                            SwipeControlComponent,
                            MapCenterComponent,
                            MenuButtonComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoMapModule, { declarations: [MapBrowserComponent,
                ZoomButtonComponent,
                GeolocateButtonComponent,
                HomeExtentButtonComponent,
                RotationButtonComponent,
                InfoSectionComponent,
                BaseLayersSwitcherComponent,
                MiniBaseMapComponent,
                MapOfflineDirective,
                OfflineButtonComponent,
                PointerPositionDirective,
                HoverFeatureDirective,
                SwipeControlComponent,
                MapCenterComponent,
                MenuButtonComponent], imports: [i1$1.CommonModule,
                i2$1.IgoLanguageModule,
                i6.IgoConfirmDialogModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i3.MatTooltipModule], exports: [MapBrowserComponent,
                ZoomButtonComponent,
                GeolocateButtonComponent,
                HomeExtentButtonComponent,
                RotationButtonComponent,
                InfoSectionComponent,
                BaseLayersSwitcherComponent,
                MiniBaseMapComponent,
                MapOfflineDirective,
                OfflineButtonComponent,
                PointerPositionDirective,
                HoverFeatureDirective,
                SwipeControlComponent,
                MapCenterComponent,
                MenuButtonComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(BaseLayersSwitcherComponent, [i1__namespace$1.NgIf, i1__namespace$1.NgClass, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i1__namespace$1.NgForOf, MiniBaseMapComponent], [i7__namespace.TranslatePipe]);
    i0__namespace.ɵɵsetComponentScope(MiniBaseMapComponent, [i1__namespace$1.NgIf, MapBrowserComponent], []);

    function MeasurerItemComponent_mat_option_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 5);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var measureUnit_r1 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", measureUnit_r1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.measure." + measureUnit_r1), " ");
        }
    }
    /**
     * Measurer item
     */
    var MeasurerItemComponent = /** @class */ (function () {
        function MeasurerItemComponent() {
            /**
             * Measure observable
             * @internal
             */
            this.measure$ = new rxjs.BehaviorSubject(undefined);
            this._auto = false;
            /**
             * Event emitted when the measure unit changes
             */
            this.measureUnitChange = new i0.EventEmitter();
        }
        Object.defineProperty(MeasurerItemComponent.prototype, "measure", {
            get: function () { return this.measure$.value; },
            /**
             * Measure
             */
            set: function (value) {
                this.measure$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MeasurerItemComponent.prototype, "auto", {
            get: function () { return this._auto; },
            /**
             * Whther measure units should be automatically determined
             */
            set: function (value) { this.toggleAutoUnit(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MeasurerItemComponent.prototype, "measureUnits", {
            /**
             * Available measure units for the measure type given
             * @internal
             */
            get: function () {
                if (this.measureType === exports.MeasureType.Area) {
                    return Object.values(exports.MeasureAreaUnit);
                }
                return Object.values(exports.MeasureLengthUnit);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Toggle the auto unit off
         * @internal
         */
        MeasurerItemComponent.prototype.ngOnDestroy = function () {
            this.toggleAutoUnit(false);
        };
        /**
         * Set the measure unit
         * @internal
         */
        MeasurerItemComponent.prototype.onMeasureUnitChange = function (unit) {
            this.measureUnit = unit;
            this.measureUnitChange.emit(unit);
        };
        MeasurerItemComponent.prototype.toggleAutoUnit = function (toggle) {
            var _this = this;
            if (this.measure$$ !== undefined) {
                this.measure$$.unsubscribe();
            }
            if (toggle === true) {
                this.measure$$ = this.measure$.subscribe(function (measure) {
                    _this.computeBestMeasureUnit(measure);
                });
            }
            this._auto = toggle;
        };
        MeasurerItemComponent.prototype.computeBestMeasureUnit = function (measure) {
            var measureUnit = this.measureUnit;
            if (this.measureType === exports.MeasureType.Area) {
                measureUnit = computeBestAreaUnit(measure);
            }
            else if (this.measureType === exports.MeasureType.Length) {
                measureUnit = computeBestLengthUnit(measure);
            }
            if (measureUnit !== this.measureUnit) {
                this.onMeasureUnitChange(measureUnit);
            }
        };
        return MeasurerItemComponent;
    }());
    MeasurerItemComponent.ɵfac = function MeasurerItemComponent_Factory(t) { return new (t || MeasurerItemComponent)(); };
    MeasurerItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: MeasurerItemComponent, selectors: [["igo-measurer-item"]], inputs: { measureType: "measureType", measureUnit: "measureUnit", measure: "measure", auto: "auto", placeholder: "placeholder" }, outputs: { measureUnitChange: "measureUnitChange" }, decls: 9, vars: 11, consts: [["appearance", "outline", "floatLabel", "always", 1, "measure-field"], ["matInput", "", 3, "readonly", "value"], [1, "unit-field"], [3, "value", "disabled", "selectionChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]], template: function MeasurerItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "mat-form-field", 0);
                i0__namespace.ɵɵelementStart(1, "mat-label");
                i0__namespace.ɵɵtext(2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelement(3, "input", 1);
                i0__namespace.ɵɵpipe(4, "measureFormat");
                i0__namespace.ɵɵpipe(5, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "mat-form-field", 2);
                i0__namespace.ɵɵelementStart(7, "mat-select", 3);
                i0__namespace.ɵɵlistener("selectionChange", function MeasurerItemComponent_Template_mat_select_selectionChange_7_listener($event) { return ctx.onMeasureUnitChange($event.value); });
                i0__namespace.ɵɵtemplate(8, MeasurerItemComponent_mat_option_8_Template, 3, 4, "mat-option", 4);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate(ctx.placeholder);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("readonly", true)("value", i0__namespace.ɵɵpipeBind2(4, 6, i0__namespace.ɵɵpipeBind1(5, 9, ctx.measure$) || 0, ctx.measureUnit));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("value", ctx.measureUnit)("disabled", ctx.auto);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.measureUnits);
            }
        }, directives: [i12__namespace.MatFormField, i12__namespace.MatLabel, i5__namespace$1.MatInput, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i9__namespace.MatOption], pipes: [MeasureFormatPipe, i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: ["[_nghost-%COMP%]{display:flex;width:100%;padding:5px 10px}.measure-field[_ngcontent-%COMP%]{pointer-events:none;display:flex;flex-flow:column nowrap;width:100%}.unit-field[_ngcontent-%COMP%]{width:50px;margin-left:10px;margin-top:10px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(MeasurerItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-measurer-item',
                        templateUrl: './measurer-item.component.html',
                        styleUrls: ['./measurer-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { measureType: [{
                    type: i0.Input
                }], measureUnit: [{
                    type: i0.Input
                }], measure: [{
                    type: i0.Input
                }], auto: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], measureUnitChange: [{
                    type: i0.Output
                }] });
    })();

    /**
     * @ignore
     */
    var IgoMeasurerModule = /** @class */ (function () {
        function IgoMeasurerModule() {
        }
        return IgoMeasurerModule;
    }());
    IgoMeasurerModule.ɵfac = function IgoMeasurerModule_Factory(t) { return new (t || IgoMeasurerModule)(); };
    IgoMeasurerModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoMeasurerModule });
    IgoMeasurerModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i4.MatIconModule,
                i3.MatTooltipModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i13.MatSelectModule,
                i22.MatSlideToggleModule,
                i10.MatDividerModule,
                i2$1.IgoLanguageModule,
                i6.IgoEntityTableModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoMeasurerModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2.MatButtonModule,
                            i18.MatButtonToggleModule,
                            i4.MatIconModule,
                            i3.MatTooltipModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i13.MatSelectModule,
                            i22.MatSlideToggleModule,
                            i10.MatDividerModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoEntityTableModule
                        ],
                        declarations: [
                            MeasureFormatPipe,
                            MeasurerItemComponent,
                            MeasurerComponent,
                            MeasurerDialogComponent
                        ],
                        exports: [
                            MeasureFormatPipe,
                            MeasurerComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoMeasurerModule, { declarations: [MeasureFormatPipe,
                MeasurerItemComponent,
                MeasurerComponent,
                MeasurerDialogComponent], imports: [i1$1.CommonModule,
                i2.MatButtonModule,
                i18.MatButtonToggleModule,
                i4.MatIconModule,
                i3.MatTooltipModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i13.MatSelectModule,
                i22.MatSlideToggleModule,
                i10.MatDividerModule,
                i2$1.IgoLanguageModule,
                i6.IgoEntityTableModule], exports: [MeasureFormatPipe,
                MeasurerComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(MeasurerComponent, [i18__namespace.MatButtonToggleGroup, i18__namespace.MatButtonToggle, i22__namespace.MatSlideToggle, i1__namespace$1.NgIf, i10__namespace.MatDivider, MeasurerItemComponent, i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i6__namespace.EntityTableComponent], [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe]);
    i0__namespace.ɵɵsetComponentScope(MeasurerDialogComponent, [i1__namespace$1.NgIf], [i7__namespace.TranslatePipe, MeasureFormatPipe]);

    var IgoMeasureModule = /** @class */ (function () {
        function IgoMeasureModule() {
        }
        return IgoMeasureModule;
    }());
    IgoMeasureModule.ɵfac = function IgoMeasureModule_Factory(t) { return new (t || IgoMeasureModule)(); };
    IgoMeasureModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoMeasureModule });
    IgoMeasureModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[], IgoMeasurerModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoMeasureModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [
                            IgoMeasurerModule
                        ]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoMeasureModule, { exports: [IgoMeasurerModule] }); })();

    exports.OverlayAction = void 0;
    (function (OverlayAction) {
        OverlayAction[OverlayAction["None"] = 0] = "None";
        OverlayAction[OverlayAction["Move"] = 1] = "Move";
        OverlayAction[OverlayAction["Zoom"] = 2] = "Zoom";
        OverlayAction[OverlayAction["ZoomIfOutMapExtent"] = 3] = "ZoomIfOutMapExtent";
    })(exports.OverlayAction || (exports.OverlayAction = {}));

    var OverlayService = /** @class */ (function () {
        function OverlayService() {
            this.features$ = new rxjs.BehaviorSubject([
                [],
                undefined
            ]);
        }
        OverlayService.prototype.setFeatures = function (features, action) {
            if (action === void 0) { action = exports.OverlayAction.None; }
            this.features$.next([features, action]);
        };
        OverlayService.prototype.clear = function () {
            this.features$.next([[], exports.OverlayAction.None]);
        };
        return OverlayService;
    }());
    OverlayService.ɵfac = function OverlayService_Factory(t) { return new (t || OverlayService)(); };
    OverlayService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: OverlayService, factory: OverlayService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OverlayService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return []; }, null);
    })();

    var OverlayDirective = /** @class */ (function () {
        function OverlayDirective(component, overlayService) {
            this.component = component;
            this.overlayService = overlayService;
            this.format = new OlGeoJSON__default["default"]();
        }
        Object.defineProperty(OverlayDirective.prototype, "map", {
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        OverlayDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.features$$ = this.overlayService.features$.subscribe(function (res) { return _this.handleFeatures(res[0], res[1]); });
        };
        OverlayDirective.prototype.ngOnDestroy = function () {
            this.features$$.unsubscribe();
        };
        OverlayDirective.prototype.handleFeatures = function (features, action) { };
        return OverlayDirective;
    }());
    OverlayDirective.ɵfac = function OverlayDirective_Factory(t) { return new (t || OverlayDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent, 2), i0__namespace.ɵɵdirectiveInject(OverlayService)); };
    OverlayDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: OverlayDirective, selectors: [["", "igoOverlay", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OverlayDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoOverlay]'
                    }]
            }], function () {
            return [{ type: MapBrowserComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: OverlayService }];
        }, null);
    })();

    var IgoOverlayModule = /** @class */ (function () {
        function IgoOverlayModule() {
        }
        IgoOverlayModule.forRoot = function () {
            return {
                ngModule: IgoOverlayModule
            };
        };
        return IgoOverlayModule;
    }());
    IgoOverlayModule.ɵfac = function IgoOverlayModule_Factory(t) { return new (t || IgoOverlayModule)(); };
    IgoOverlayModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoOverlayModule });
    IgoOverlayModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoOverlayModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        exports: [OverlayDirective],
                        declarations: [OverlayDirective]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoOverlayModule, { declarations: [OverlayDirective], exports: [OverlayDirective] }); })();

    var PrintService = /** @class */ (function () {
        function PrintService(http, messageService, activityService, languageService) {
            this.http = http;
            this.messageService = messageService;
            this.activityService = activityService;
            this.languageService = languageService;
        }
        PrintService.prototype.print = function (map, options) {
            var _this = this;
            var status$ = new rxjs.Subject();
            var paperFormat = options.paperFormat;
            var resolution = +options.resolution; // Default is 96
            var orientation = options.orientation;
            var legendPostion = options.legendPosition;
            this.activityId = this.activityService.register();
            var doc = new jspdf__default["default"]({
                orientation: orientation,
                format: paperFormat.toLowerCase()
            });
            var dimensions = [
                doc.internal.pageSize.width,
                doc.internal.pageSize.height
            ];
            var margins = [10, 10, 10, 10];
            var width = dimensions[0] - margins[3] - margins[1];
            var height = dimensions[1] - margins[0] - margins[2];
            var size = [width, height];
            var titleSizeResults = [0, 0];
            if (options.title !== undefined) {
                titleSizeResults = this.getTitleSize(options.title, width, height, doc); // return : size(pt) and left margin (mm)
                this.addTitle(doc, options.title, titleSizeResults[0], margins[3] + titleSizeResults[1], titleSizeResults[0] * (25.4 / 72));
            }
            if (options.subtitle !== undefined) {
                var subtitleSizeResult = 0;
                var titleH = titleSizeResults[0];
                subtitleSizeResult = this.getSubTitleSize(options.subtitle, width, height, doc); // return : size(pt) and left margin (mm)
                this.addSubTitle(doc, options.subtitle, titleH * 0.7, margins[3] + subtitleSizeResult, titleH * 1.7 * (25.4 / 72));
                margins[0] = margins[0] + titleSizeResults[0] * 0.7 * (25.4 / 72);
            }
            if (options.showProjection === true || options.showScale === true) {
                this.addProjScale(doc, map, resolution, options.showProjection, options.showScale);
            }
            if (options.comment !== '') {
                this.addComment(doc, options.comment);
            }
            this.addMap(doc, map, resolution, size, margins).subscribe(function (status) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(status === utils.SubjectStatus.Done)) return [3 /*break*/, 9];
                            return [4 /*yield*/, this.addScale(doc, map, margins)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.handleMeasureLayer(doc, map, margins)];
                        case 2:
                            _a.sent();
                            if (!(options.legendPosition !== 'none')) return [3 /*break*/, 7];
                            if (!(['topleft', 'topright', 'bottomleft', 'bottomright'].indexOf(options.legendPosition) > -1)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.addLegendSamePage(doc, map, margins, resolution, options.legendPosition)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 4:
                            if (!(options.legendPosition === 'newpage')) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.addLegend(doc, map, margins, resolution)];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [3 /*break*/, 9];
                        case 7: return [4 /*yield*/, this.saveDoc(doc)];
                        case 8:
                            _a.sent();
                            _a.label = 9;
                        case 9:
                            if (status === utils.SubjectStatus.Done || status === utils.SubjectStatus.Error) {
                                this.activityService.unregister(this.activityId);
                                status$.next(utils.SubjectStatus.Done);
                            }
                            return [2 /*return*/];
                    }
                });
            }); });
            return status$;
        };
        /**
         * Add measure overlay on the map on the document when the measure layer is present
         * @param  doc - Pdf document where measure tooltip will be added
         * @param  map - Map of the app
         * @param  margins - Page margins
         */
        PrintService.prototype.handleMeasureLayer = function (doc, map, margins) {
            return __awaiter(this, void 0, void 0, function () {
                var canvasOverlayHTMLMeasures_1, mapOverlayMeasuresHTML;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!map.layers.find(function (layer) { return layer.visible && layer.id.startsWith('igo-measures-'); })) return [3 /*break*/, 2];
                            mapOverlayMeasuresHTML = map.ol.getOverlayContainer();
                            return [4 /*yield*/, html2canvas__default["default"](mapOverlayMeasuresHTML, {
                                    scale: 1,
                                    backgroundColor: null
                                }).then(function (e) {
                                    canvasOverlayHTMLMeasures_1 = e;
                                })];
                        case 1:
                            _a.sent();
                            this.addCanvas(doc, canvasOverlayHTMLMeasures_1, margins); // this adds measure overlays
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get html code for all layers legend
         * @param  map IgoMap
         * @param  width The width that the legend need to be
         * @return Html code for the legend
         */
        PrintService.prototype.getLayersLegendHtml = function (map, width, resolution) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                var html = '';
                var legends = getLayersLegends(map.layers, {
                    resolution: map.viewController.getResolution(),
                    extent: map.viewController.getExtent(),
                    projection: map.viewController.getOlProjection().getCode(),
                    scale: map.viewController.getScale(resolution),
                    size: map.ol.getSize()
                });
                if (legends.length === 0) {
                    observer.next(html);
                    observer.complete();
                    return;
                }
                // Define important style to be sure that all container is convert
                // to image not just visible part
                html += '<style media="screen" type="text/css">';
                html += '.html2canvas-container { width: ' + width + 'mm !important; height: 2000px !important; }';
                html += 'table.tableLegend {table-layout: auto;}';
                html += 'div.styleLegend {padding-top: 5px; padding-right:5px;padding-left:5px;padding-bottom:5px;}';
                html += '</style>';
                // The font size will also be lowered afterwards (globally along the legend size)
                // this allows having a good relative font size here and to keep ajusting the legend size
                // while keeping good relative font size
                html += '<font size="3" face="Times" >';
                html += '<div class="styleLegend">';
                html += '<table class="tableLegend" >';
                // For each legend, define an html table cell
                var images$ = legends.map(function (legend) { return _this.getDataImage(legend.url).pipe(operators.map(function (dataImage) {
                    var htmlImg = '<tr><td>' + legend.title.toUpperCase() + '</td></tr>';
                    htmlImg += '<tr><td><img src="' + dataImage + '"></td></tr>';
                    return htmlImg;
                })); });
                rxjs.forkJoin(images$).subscribe(function (dataImages) {
                    html = dataImages.reduce(function (acc, current) { return (acc += current); }, html);
                    html += '</table>';
                    html += '</div>';
                    observer.next(html);
                    observer.complete();
                });
            });
        };
        PrintService.prototype.getDataImage = function (url) {
            var secureIMG = new i6.SecureImagePipe(this.http);
            return secureIMG.transform(url);
        };
        /**
         * Get all the legend in a single image
         * * @param  format - Image format. default value to "png"
         * @return The image of the legend
         */
        PrintService.prototype.getLayersLegendImage = function (map, format, doZipFile, resolution) {
            if (format === void 0) { format = 'png'; }
            return __awaiter(this, void 0, void 0, function () {
                var status$, width, html, div, canvas, status;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            status$ = new rxjs.Subject();
                            width = 200;
                            return [4 /*yield*/, this.getLayersLegendHtml(map, width, resolution).toPromise()];
                        case 1:
                            html = _a.sent();
                            format = format.toLowerCase();
                            // If no legend show No LEGEND in an image
                            if (html.length === 0) {
                                html = '<font size="12" face="Courier New" >';
                                html += '<div align="center"><b>NO LEGEND</b></div>';
                            }
                            div = window.document.createElement('div');
                            div.style.position = 'absolute';
                            div.style.top = '0';
                            // Add html code to convert in the new window
                            window.document.body.appendChild(div);
                            div.innerHTML = html;
                            return [4 /*yield*/, this.timeout(1)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, html2canvas__default["default"](div, { useCORS: true }).catch(function (e) {
                                    console.log(e);
                                })];
                        case 3:
                            canvas = _a.sent();
                            if (canvas) {
                                status = utils.SubjectStatus.Done;
                                try {
                                    if (!doZipFile) {
                                        // Save the canvas as file
                                        this.saveCanvasImageAsFile(canvas, 'legendImage', format);
                                    }
                                    else {
                                        // Add the canvas to zip
                                        this.generateCanvaFileToZip(canvas, 'legendImage' + '.' + format);
                                    }
                                    div.parentNode.removeChild(div); // remove temp div (IE)
                                }
                                catch (err) {
                                    status = utils.SubjectStatus.Error;
                                }
                                status$.next(status);
                            }
                            return [2 /*return*/, status$];
                    }
                });
            });
        };
        PrintService.prototype.getTitleSize = function (title, pageWidth, pageHeight, doc) {
            var pdfResolution = 96;
            var titleSize = Math.round(2 * (pageHeight + 145) * 0.05) / 2;
            doc.setFont('Times', 'bold');
            var width = doc.getTextWidth(title);
            var titleWidth = doc.getStringUnitWidth(title) * titleSize / doc.internal.scaleFactor;
            var titleTailleMinimale = Math.round(2 * (pageHeight + 150) * 0.037) / 2;
            var titleFontSize = 0;
            var titleMarginLeft;
            if (titleWidth >= (pageWidth)) {
                titleMarginLeft = 0;
                titleFontSize = Math.round(((pageWidth / title.length) * pdfResolution) / 25.4);
                // If the formula to find the font size gives below the defined minimum size
                if (titleFontSize < titleTailleMinimale) {
                    titleFontSize = titleTailleMinimale;
                }
            }
            else {
                titleMarginLeft = (pageWidth - titleWidth) / 2;
                titleFontSize = titleSize;
            }
            return [titleFontSize, titleMarginLeft];
        };
        PrintService.prototype.getSubTitleSize = function (subtitle, pageWidth, pageHeight, doc) {
            var subtitleSize = 0.7 * Math.round(2 * (pageHeight + 145) * 0.05) / 2; // 70% of the title's font size
            doc.setFont('Times', 'bold');
            var subtitleWidth = doc.getStringUnitWidth(subtitle) * subtitleSize / doc.internal.scaleFactor;
            var subtitleMarginLeft;
            if (subtitleWidth >= (pageWidth)) {
                subtitleMarginLeft = 0;
            }
            else {
                subtitleMarginLeft = (pageWidth - subtitleWidth) / 2;
            }
            return subtitleMarginLeft;
        };
        PrintService.prototype.addTitle = function (doc, title, titleFontSize, titleMarginLeft, titleMarginTop) {
            doc.setFont('Times', 'bold');
            doc.setFontSize(titleFontSize);
            doc.text(title, titleMarginLeft, titleMarginTop);
        };
        PrintService.prototype.addSubTitle = function (doc, subtitle, subtitleFontSize, subtitleMarginLeft, subtitleMarginTop) {
            doc.setFont('Times', 'bold');
            doc.setFontSize(subtitleFontSize);
            doc.text(subtitle, subtitleMarginLeft, subtitleMarginTop);
        };
        /**
         * Add comment to the document
         * * @param  doc - pdf document
         * * @param  comment - Comment to add in the document
         * * @param  size - Size of the document
         */
        PrintService.prototype.addComment = function (doc, comment) {
            var commentSize = 16;
            var commentMarginLeft = 20;
            var marginBottom = 5;
            var heightPixels = doc.internal.pageSize.height - marginBottom;
            doc.setFont('courier');
            doc.setFontSize(commentSize);
            doc.text(comment, commentMarginLeft, heightPixels);
        };
        /**
         * Add projection and/or scale to the document
         * @param  doc - pdf document
         * @param  map - Map of the app
         * @param  dpi - DPI resolution of the document
         * @param  projection - Bool to indicate if projection need to be added
         * @param  scale - Bool to indicate if scale need to be added
         */
        PrintService.prototype.addProjScale = function (doc, map, dpi, projection, scale) {
            var translate = this.languageService.translate;
            var projScaleSize = 16;
            var projScaleMarginLeft = 20;
            var marginBottom = 15;
            var heightPixels = doc.internal.pageSize.height - marginBottom;
            var textProjScale = '';
            if (projection === true) {
                var projText = translate.instant('igo.geo.printForm.projection');
                textProjScale += projText + ': ' + map.projection;
            }
            if (scale === true) {
                if (projection === true) {
                    textProjScale += '   ';
                }
                var scaleText = translate.instant('igo.geo.printForm.scale');
                var mapScale = map.viewController.getScale(dpi);
                textProjScale += scaleText + ': ~ 1 / ' + formatScale(mapScale);
            }
            doc.setFont('courier');
            doc.setFontSize(projScaleSize);
            doc.text(textProjScale, projScaleMarginLeft, heightPixels);
        };
        /**
         * Add the legend to the document
         * @param  doc - Pdf document where legend will be added
         * @param  map - Map of the app
         * @param  margins - Page margins
         */
        PrintService.prototype.addLegend = function (doc, map, margins, resolution) {
            return __awaiter(this, void 0, void 0, function () {
                var width, html, div, canvas, pourcentageReduction, imageSize, imgData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            width = doc.internal.pageSize.width;
                            return [4 /*yield*/, this.getLayersLegendHtml(map, width, resolution).toPromise()];
                        case 1:
                            html = _a.sent();
                            if (!(html === '')) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.saveDoc(doc)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            div = window.document.createElement('div');
                            div.style.position = 'absolute';
                            div.style.top = '0';
                            // Add html code to convert in the new window
                            window.document.body.appendChild(div);
                            div.innerHTML = html;
                            return [4 /*yield*/, this.timeout(1)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, html2canvas__default["default"](div, { useCORS: true }).catch(function (e) {
                                    console.log(e);
                                })];
                        case 5:
                            canvas = _a.sent();
                            if (canvas) {
                                pourcentageReduction = 0.85;
                                imageSize = [pourcentageReduction * (25.4 * canvas.width) / resolution, pourcentageReduction
                                        * (25.4 * canvas.height) / resolution];
                                imgData = void 0;
                                doc.addPage();
                                imgData = canvas.toDataURL('image/png');
                                doc.addImage(imgData, 'PNG', 10, 10, imageSize[0], imageSize[1]);
                                div.parentNode.removeChild(div); // remove temp div (IE style)
                            }
                            return [4 /*yield*/, this.saveDoc(doc)];
                        case 6:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Add the legend to the document
         * @param  doc - Pdf document where legend will be added
         * @param  map - Map of the app
         * @param  margins - Page margins
         */
        PrintService.prototype.addLegendSamePage = function (doc, map, margins, resolution, legendPosition) {
            return __awaiter(this, void 0, void 0, function () {
                var width, html, div, canvas, marginsLegend, pourcentageReduction, imageSize;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            width = doc.internal.pageSize.width;
                            return [4 /*yield*/, this.getLayersLegendHtml(map, width, resolution).toPromise()];
                        case 1:
                            html = _a.sent();
                            if (!(html === '')) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.saveDoc(doc)];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            div = window.document.createElement('div');
                            div.style.position = 'absolute';
                            div.style.top = '0';
                            // Add html code to convert in the new window
                            window.document.body.appendChild(div);
                            div.innerHTML = html;
                            return [4 /*yield*/, this.timeout(1)];
                        case 4:
                            _a.sent();
                            return [4 /*yield*/, html2canvas__default["default"](div, { useCORS: true }).catch(function (e) {
                                    console.log(e);
                                })];
                        case 5:
                            canvas = _a.sent();
                            if (!canvas) return [3 /*break*/, 7];
                            pourcentageReduction = 0.85;
                            imageSize = [pourcentageReduction * (25.4 * canvas.width) / resolution,
                                pourcentageReduction * (25.4 * canvas.height) / resolution];
                            // Move the legend to the correct position on the page
                            if (legendPosition === 'bottomright') {
                                marginsLegend = [doc.internal.pageSize.height - margins[2] - imageSize[1], margins[1],
                                    margins[2], doc.internal.pageSize.width - margins[1] - imageSize[0]];
                            }
                            else if (legendPosition === 'topright') {
                                marginsLegend = [margins[0], margins[1], doc.internal.pageSize.height - margins[0] - imageSize[1],
                                    doc.internal.pageSize.width - margins[1] - imageSize[0]];
                            }
                            else if (legendPosition === 'bottomleft') {
                                // When the legend is in the bottom left, raise the legend slightly upward so that attributions are visible
                                marginsLegend = [doc.internal.pageSize.height - margins[2] - imageSize[1] - 15,
                                    doc.internal.pageSize.width - margins[3] - imageSize[0], margins[2] + 15, margins[3]];
                            }
                            else if (legendPosition === 'topleft') {
                                marginsLegend = [margins[0], doc.internal.pageSize.width - margins[3] - imageSize[0],
                                    doc.internal.pageSize.height - margins[0] - imageSize[1], margins[3]];
                            }
                            this.addCanvas(doc, canvas, marginsLegend); // this adds the legend
                            div.parentNode.removeChild(div); // remove temp div (IE style)
                            return [4 /*yield*/, this.saveDoc(doc)];
                        case 6:
                            _a.sent();
                            _a.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Add scale and attributions on the map on the document
         * @param  doc - Pdf document where legend will be added
         * @param  map - Map of the app
         * @param  margins - Page margins
         */
        PrintService.prototype.addScale = function (doc, map, margins) {
            return __awaiter(this, void 0, void 0, function () {
                var mapSize, extent, canvasOverlayHTML, mapOverlayHTML, OverlayHTMLButtons, OverlayHTMLButtonsarr, OverlayHTMLButtonsarr_1, OverlayHTMLButtonsarr_1_1, OverlayHTMLButton, canvas;
                var e_1, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            mapSize = map.ol.getSize();
                            extent = map.ol.getView().calculateExtent(mapSize);
                            mapOverlayHTML = map.ol.getOverlayContainerStopEvent();
                            OverlayHTMLButtons = mapOverlayHTML.getElementsByTagName('button');
                            OverlayHTMLButtonsarr = Array.from(OverlayHTMLButtons);
                            try {
                                for (OverlayHTMLButtonsarr_1 = __values(OverlayHTMLButtonsarr), OverlayHTMLButtonsarr_1_1 = OverlayHTMLButtonsarr_1.next(); !OverlayHTMLButtonsarr_1_1.done; OverlayHTMLButtonsarr_1_1 = OverlayHTMLButtonsarr_1.next()) {
                                    OverlayHTMLButton = OverlayHTMLButtonsarr_1_1.value;
                                    OverlayHTMLButton.setAttribute('data-html2canvas-ignore', 'true');
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (OverlayHTMLButtonsarr_1_1 && !OverlayHTMLButtonsarr_1_1.done && (_a = OverlayHTMLButtonsarr_1.return)) _a.call(OverlayHTMLButtonsarr_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            return [4 /*yield*/, html2canvas__default["default"](mapOverlayHTML, {
                                    scale: 1,
                                    backgroundColor: null,
                                    allowTaint: true,
                                    useCORS: true,
                                }).then(function (e) {
                                    canvasOverlayHTML = e;
                                })];
                        case 1:
                            canvas = _b.sent();
                            this.addCanvas(doc, canvasOverlayHTML, margins); // this adds scales and attributions
                            return [2 /*return*/];
                    }
                });
            });
        };
        PrintService.prototype.defineNbFileToProcess = function (nbFileToProcess) {
            this.nbFileToProcess = nbFileToProcess;
        };
        PrintService.prototype.timeout = function (ms) {
            return new Promise(function (resolve) { return setTimeout(resolve, ms); });
        };
        PrintService.prototype.addCanvas = function (doc, canvas, margins) {
            var image;
            if (canvas) {
                image = canvas.toDataURL('image/png');
            }
            if (image !== undefined) {
                var imageSize = this.getImageSizeToFitPdf(doc, canvas, margins);
                doc.addImage(image, 'PNG', margins[3], margins[0], imageSize[0], imageSize[1]);
                doc.rect(margins[3], margins[0], imageSize[0], imageSize[1]);
            }
        };
        // TODO fix printing with image resolution
        PrintService.prototype.addMap = function (doc, map, resolution, size, margins) {
            var _this = this;
            var status$ = new rxjs.Subject();
            var mapSize = map.ol.getSize();
            var extent = map.ol.getView().calculateExtent(mapSize);
            var widthPixels = Math.round((size[0] * resolution) / 25.4);
            var heightPixels = Math.round((size[1] * resolution) / 25.4);
            var timeout;
            map.ol.once('rendercomplete', function (event) {
                var canvases = event.target.getViewport().getElementsByTagName('canvas');
                var mapStatus$$ = map.status$.subscribe(function (mapStatus) {
                    var e_2, _a;
                    clearTimeout(timeout);
                    if (mapStatus !== utils.SubjectStatus.Done) {
                        return;
                    }
                    mapStatus$$.unsubscribe();
                    var status = utils.SubjectStatus.Done;
                    try {
                        try {
                            for (var canvases_1 = __values(canvases), canvases_1_1 = canvases_1.next(); !canvases_1_1.done; canvases_1_1 = canvases_1.next()) {
                                var canvas = canvases_1_1.value;
                                if (canvas.width !== 0) {
                                    _this.addCanvas(doc, canvas, margins);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (canvases_1_1 && !canvases_1_1.done && (_a = canvases_1.return)) _a.call(canvases_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    catch (err) {
                        status = utils.SubjectStatus.Error;
                        _this.messageService.error(_this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageBody'), _this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageHeader'));
                    }
                    _this.renderMap(map, mapSize, extent);
                    status$.next(status);
                });
                // If no loading as started after 200ms, then probably no loading
                // is required.
                timeout = window.setTimeout(function () {
                    var e_3, _a;
                    mapStatus$$.unsubscribe();
                    var status = utils.SubjectStatus.Done;
                    try {
                        try {
                            for (var canvases_2 = __values(canvases), canvases_2_1 = canvases_2.next(); !canvases_2_1.done; canvases_2_1 = canvases_2.next()) {
                                var canvas = canvases_2_1.value;
                                if (canvas.width !== 0) {
                                    _this.addCanvas(doc, canvas, margins);
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (canvases_2_1 && !canvases_2_1.done && (_a = canvases_2.return)) _a.call(canvases_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                    catch (err) {
                        status = utils.SubjectStatus.Error;
                        _this.messageService.error(_this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageBody'), _this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageHeader'));
                    }
                    _this.renderMap(map, mapSize, extent);
                    status$.next(status);
                }, 200);
            });
            this.renderMap(map, [widthPixels, heightPixels], extent);
            return status$;
        };
        /**
         * Download an image of the map with addition of informations
         * @param  map - Map of the app
         * @param  format - Image format. default value to "png"
         * @param  projection - Indicate if projection need to be add. Default to false
         * @param  scale - Indicate if scale need to be add. Default to false
         * @param  legend - Indicate if the legend of layers need to be download. Default to false
         * @param  title - Title to add for the map - Default to blank
         * @param  subtitle - Subtitle to add for the map - Default to blank
         * @param  comment - Comment to add for the map - Default to blank
         * @param  doZipFile - Indicate if we do a zip with the file
         * @return Image file of the map with extension format given as parameter
         */
        PrintService.prototype.downloadMapImage = function (map, resolution, format, projection, scale, legend, title, subtitle, comment, doZipFile) {
            var _this = this;
            if (format === void 0) { format = 'png'; }
            if (projection === void 0) { projection = false; }
            if (scale === void 0) { scale = false; }
            if (legend === void 0) { legend = false; }
            if (title === void 0) { title = ''; }
            if (subtitle === void 0) { subtitle = ''; }
            if (comment === void 0) { comment = ''; }
            if (doZipFile === void 0) { doZipFile = true; }
            var status$ = new rxjs.Subject();
            // const resolution = map.ol.getView().getResolution();
            this.activityId = this.activityService.register();
            var translate = this.languageService.translate;
            map.ol.once('rendercomplete', function (event) {
                format = format.toLowerCase();
                var oldCanvas = event.target
                    .getViewport()
                    .getElementsByTagName('canvas')[0];
                var newCanvas = document.createElement('canvas');
                var newContext = newCanvas.getContext('2d');
                // Postion in height to set the canvas in new canvas
                var positionHCanvas = 0;
                // Position in width to set the Proj/Scale in new canvas
                var positionWProjScale = 10;
                // Get height/width of map canvas
                var width = oldCanvas.width;
                var height = oldCanvas.height;
                // Set Font to calculate comment width
                newContext.font = '20px Calibri';
                var commentWidth = newContext.measureText(comment).width;
                // Add height for title if defined
                height = title !== '' ? height + 30 : height;
                // Add height for title if defined
                height = subtitle !== '' ? height + 30 : height;
                // Add height for projection or scale (same line) if defined
                height = projection !== false || scale !== false ? height + 30 : height;
                var positionHProjScale = height - 10;
                // Define number of line depending of the comment length
                var commentNbLine = Math.ceil(commentWidth / width);
                // Add height for multiline comment if defined
                height = comment !== '' ? height + commentNbLine * 30 : height;
                var positionHComment = height - commentNbLine * 20 + 5;
                // Set the new canvas with the new calculated size
                newCanvas.width = width;
                newCanvas.height = height;
                // Patch Jpeg default black background to white
                if (format === 'jpeg') {
                    newContext.fillStyle = '#ffffff';
                    newContext.fillRect(0, 0, width, height);
                    newContext.fillStyle = '#000000';
                }
                // If a title need to be added to canvas
                if (title !== '') {
                    // Set font for title
                    // Adjust according to title length
                    newContext.font = '26px Calibri';
                    positionHCanvas = 30;
                    newContext.textAlign = 'center';
                    newContext.fillText(title, width / 2, 20, width * 0.9);
                }
                if (subtitle !== '') {
                    // Set font for subtitle
                    // Adjust according to title length
                    newContext.font = '26px Calibri';
                    positionHCanvas = 60;
                    newContext.textAlign = 'center';
                    newContext.fillText(subtitle, width / 2, 50, width * 0.9);
                }
                // Set font for next section
                newContext.font = '20px Calibri';
                // If projection need to be added to canvas
                if (projection !== false) {
                    var projText = translate.instant('igo.geo.printForm.projection');
                    newContext.textAlign = 'start';
                    newContext.fillText(projText + ': ' + map.projection, positionWProjScale, positionHProjScale);
                    positionWProjScale += 200; // Width position change for scale position
                }
                // If scale need to be added to canvas
                if (scale !== false) {
                    var scaleText = translate.instant('igo.geo.printForm.scale');
                    var mapScale = map.viewController.getScale(resolution);
                    newContext.textAlign = 'start';
                    newContext.fillText(scaleText + ': ~ 1 / ' + formatScale(mapScale), positionWProjScale, positionHProjScale);
                }
                // If a comment need to be added to canvas
                if (comment !== '') {
                    newContext.textAlign = 'center';
                    // If only one line, no need to multiline the comment
                    if (commentNbLine === 1) {
                        newContext.fillText(comment, width / 2, positionHComment);
                    }
                    else {
                        // Separate the setenses to be approx. the same length
                        var nbCommentChar = comment.length;
                        var CommentLengthToCut = Math.floor(nbCommentChar / commentNbLine);
                        var commentCurrentLine = '';
                        var positionFirstCutChar = 0;
                        var positionLastBlank = void 0;
                        // Loop for the number of line calculated
                        for (var i = 0; i < commentNbLine; i++) {
                            // For all line except last
                            if (commentNbLine - 1 > i) {
                                // Get comment current line to find the right place tu cut comment
                                commentCurrentLine = comment.substr(positionFirstCutChar, CommentLengthToCut);
                                // Cut the setence at blank
                                positionLastBlank = commentCurrentLine.lastIndexOf(' ');
                                newContext.fillText(commentCurrentLine.substr(0, positionLastBlank), width / 2, positionHComment);
                                positionFirstCutChar += positionLastBlank;
                                // Go to next line for insertion
                                positionHComment += 20;
                            }
                            else {
                                // Don't cut last part
                                newContext.fillText(comment.substr(positionFirstCutChar), width / 2, positionHComment);
                            }
                        }
                    }
                }
                // Add map to new canvas
                newContext.drawImage(oldCanvas, 0, positionHCanvas);
                var status = utils.SubjectStatus.Done;
                try {
                    // Save the canvas as file
                    if (!doZipFile) {
                        _this.saveCanvasImageAsFile(newCanvas, 'map', format);
                    }
                    else if (format.toLowerCase() === 'tiff') {
                        // Add the canvas to zip
                        _this.generateCanvaFileToZip(newCanvas, 'map' + map.projection.replace(':', '_') + '.' + format);
                    }
                    else {
                        // Add the canvas to zip
                        _this.generateCanvaFileToZip(newCanvas, 'map' + '.' + format);
                    }
                }
                catch (err) {
                    status = utils.SubjectStatus.Error;
                }
                status$.next(status);
                if (format.toLowerCase() === 'tiff') {
                    var tiwContent = _this.getWorldFileInformation(map);
                    var blob = new Blob([tiwContent], {
                        type: 'text/plain;charset=utf-8'
                    });
                    if (!doZipFile) {
                        // saveAs automaticly replace ':' for '_'
                        fileSaver.saveAs(blob, 'map' + map.projection + '.tfw');
                        _this.saveFileProcessing();
                    }
                    else {
                        // Add the canvas to zip
                        _this.addFileToZip('map' + map.projection.replace(':', '_') + '.tfw', blob);
                    }
                }
            });
            map.ol.renderSync();
            return status$;
        };
        PrintService.prototype.renderMap = function (map, size, extent) {
            map.ol.updateSize();
            map.ol.renderSync();
        };
        /**
         * Save document
         * @param  doc - Document to save
         */
        PrintService.prototype.saveDoc = function (doc) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, doc.save('map.pdf', { returnPromise: true })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Calculate the best Image size to fit in pdf
         * @param doc - Pdf Document
         * @param canvas - Canvas of image
         * @param margins - Page margins
         */
        PrintService.prototype.getImageSizeToFitPdf = function (doc, canvas, margins) {
            // Define variable to calculate best size to fit in one page
            var pageHeight = doc.internal.pageSize.getHeight() - (margins[0] + margins[2]);
            var pageWidth = doc.internal.pageSize.getWidth() - (margins[1] + margins[3]);
            var canHeight = canvas.height;
            var canWidth = canvas.width;
            var heightRatio = canHeight / pageHeight;
            var widthRatio = canWidth / pageWidth;
            var maxRatio = heightRatio > widthRatio ? heightRatio : widthRatio;
            var imgHeigh = maxRatio > 1 ? canHeight / maxRatio : canHeight;
            var imgWidth = maxRatio > 1 ? canWidth / maxRatio : canWidth;
            return [imgWidth, imgHeigh];
        };
        /**
         * Get a world file information for tiff
         * @param  map - Map of the app
         */
        PrintService.prototype.getWorldFileInformation = function (map) {
            var currentResolution = map.viewController.getResolution();
            var currentExtent = map.viewController.getExtent(); // Return [minx, miny, maxx, maxy]
            return [
                currentResolution,
                0,
                0,
                -currentResolution,
                currentExtent[0] + currentResolution / 0.5,
                currentExtent[3] - currentResolution / 0.5
            ].join('\n');
        };
        /**
         * Save canvas image as file
         * @param canvas - Canvas to save
         * @param name - Name of the file
         * @param format - file format
         */
        PrintService.prototype.saveCanvasImageAsFile = function (canvas, name, format) {
            var blobFormat = 'image/' + format;
            var that = this;
            try {
                canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched
                // If navigator is Internet Explorer
                if (navigator.msSaveBlob) {
                    navigator.msSaveBlob(canvas.msToBlob(), name + '.' + format);
                    this.saveFileProcessing();
                }
                else {
                    canvas.toBlob(function (blob) {
                        // download image
                        fileSaver.saveAs(blob, name + '.' + format);
                        that.saveFileProcessing();
                    }, blobFormat);
                }
            }
            catch (err) {
                this.messageService.error(this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageBody'), this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageHeader'));
            }
        };
        /**
         * Add file to a zip
         * @param canvas - File to add to the zip
         * @param  name -Name of the fileoverview
         */
        PrintService.prototype.generateCanvaFileToZip = function (canvas, name) {
            var blobFormat = 'image/' + 'jpeg';
            var that = this;
            if (!this.hasOwnProperty('zipFile') ||
                typeof this.zipFile === 'undefined') {
                this.zipFile = new JSZip__namespace();
            }
            try {
                canvas.toDataURL(); // Just to make the catch trigger wihtout toBlob Error throw not catched
                if (navigator.msSaveBlob) {
                    this.addFileToZip(name, canvas.msToBlob());
                }
                else {
                    canvas.toBlob(function (blob) {
                        that.addFileToZip(name, blob);
                    }, blobFormat);
                }
            }
            catch (err) {
                this.messageService.error(this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageBody'), this.languageService.translate.instant('igo.geo.printForm.corsErrorMessageHeader'));
            }
        };
        /**
         * Add file to zip, if all file are zipped, download
         * @param name - Name of the files
         * @param blob - Contain of file
         */
        PrintService.prototype.addFileToZip = function (name, blob) {
            // add file to zip
            this.zipFile.file(name, blob);
            this.nbFileToProcess--;
            // If all files are proccessed
            if (this.nbFileToProcess === 0) {
                // Download zip file
                this.getZipFile();
                // Stop loading
                this.activityService.unregister(this.activityId);
            }
        };
        PrintService.prototype.saveFileProcessing = function () {
            this.nbFileToProcess--;
            // If all files are proccessed
            if (this.nbFileToProcess === 0) {
                // Stop loading
                this.activityService.unregister(this.activityId);
            }
        };
        /**
         * Get the zipped file
         * @return Retun a zip file
         */
        PrintService.prototype.getZipFile = function () {
            var that = this;
            this.zipFile.generateAsync({ type: 'blob' }).then(function (blob) {
                // 1) generate the zip file
                fileSaver.saveAs(blob, 'map.zip');
                delete that.zipFile;
            });
        };
        return PrintService;
    }());
    PrintService.ɵfac = function PrintService_Factory(t) { return new (t || PrintService)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(i2__namespace$1.ActivityService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService)); };
    PrintService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: PrintService, factory: PrintService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(PrintService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.ActivityService }, { type: i2__namespace$1.LanguageService }]; }, null);
    })();

    var PrintOutputFormat = utils.strEnum(['Pdf', 'Image']);
    var PrintPaperFormat = utils.strEnum([
        'A0',
        'A1',
        'A2',
        'A3',
        'A4',
        'A5',
        'Letter',
        'Legal'
    ]);
    var PrintOrientation = utils.strEnum(['landscape', 'portrait']);
    var PrintResolution = utils.strEnum(['72', '96', '150', '300']);
    var PrintSaveImageFormat = utils.strEnum([
        'Bmp',
        'Gif',
        'Jpeg',
        'Png',
        'Tiff'
    ]);
    var PrintLegendPosition = utils.strEnum([
        'none',
        'topright',
        'topleft',
        'bottomleft',
        'bottomright',
        'newpage'
    ]);

    function PrintFormComponent_mat_option_28_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var legendPosition_r6 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", legendPosition_r6.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.printForm.legendPositions." + legendPosition_r6.value), " ");
        }
    }
    function PrintFormComponent_mat_option_34_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var outputFormat_r7 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", outputFormat_r7.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", outputFormat_r7.value, " ");
        }
    }
    function PrintFormComponent_mat_option_40_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var paperFormat_r8 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", paperFormat_r8.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.printForm.paperFormats." + paperFormat_r8.value), " ");
        }
    }
    function PrintFormComponent_mat_option_46_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var imageFormat_r9 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", imageFormat_r9.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", imageFormat_r9.value, " ");
        }
    }
    function PrintFormComponent_mat_option_52_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var resolution_r10 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", resolution_r10.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", resolution_r10.value + " PPI", " ");
        }
    }
    function PrintFormComponent_mat_option_58_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 19);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var orientation_r11 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", orientation_r11.key);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, "igo.geo.printForm." + orientation_r11.value), " ");
        }
    }
    var PrintFormComponent = /** @class */ (function () {
        function PrintFormComponent(formBuilder) {
            this.formBuilder = formBuilder;
            this.outputFormats = PrintOutputFormat;
            this.paperFormats = PrintPaperFormat;
            this.orientations = PrintOrientation;
            this.resolutions = PrintResolution;
            this.imageFormats = PrintSaveImageFormat;
            this.legendPositions = PrintLegendPosition;
            this.isPrintService = true;
            this.submit = new i0.EventEmitter();
            this.form = this.formBuilder.group({
                title: ['', []],
                subtitle: ['', []],
                comment: ['', []],
                outputFormat: ['', [i16.Validators.required]],
                paperFormat: ['', [i16.Validators.required]],
                imageFormat: ['', [i16.Validators.required]],
                resolution: ['', [i16.Validators.required]],
                orientation: ['', [i16.Validators.required]],
                legendPosition: ['', [i16.Validators.required]],
                showProjection: false,
                showScale: false,
                showLegend: false,
                doZipFile: [{ hidden: this.isPrintService }]
            });
        }
        Object.defineProperty(PrintFormComponent.prototype, "imageFormat", {
            get: function () {
                return this.imageFormatField.value;
            },
            set: function (value) {
                this.imageFormatField.setValue(value || PrintSaveImageFormat.Jpeg, {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "outputFormat", {
            get: function () {
                return this.outputFormatField.value;
            },
            set: function (value) {
                this.outputFormatField.setValue(value || PrintOutputFormat.Pdf, {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "paperFormat", {
            get: function () {
                return this.paperFormatField.value;
            },
            set: function (value) {
                this.paperFormatField.setValue(value || PrintPaperFormat.Letter, {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "orientation", {
            get: function () {
                return this.orientationField.value;
            },
            set: function (value) {
                this.orientationField.setValue(value || PrintOrientation.landscape, {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "resolution", {
            get: function () {
                return this.resolutionField.value;
            },
            set: function (value) {
                this.resolutionField.setValue(value || PrintResolution['96'], {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "legendPosition", {
            get: function () {
                return this.legendPositionField.value;
            },
            set: function (value) {
                this.legendPositionField.setValue(value || PrintLegendPosition.none, {
                    onlySelf: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "title", {
            get: function () {
                return this.titleField.value;
            },
            set: function (value) {
                this.titleField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "subtitle", {
            get: function () {
                return this.subtitleField.value;
            },
            set: function (value) {
                this.subtitleField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "comment", {
            get: function () {
                return this.commentField.value;
            },
            set: function (value) {
                this.commentField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showProjection", {
            get: function () {
                return this.showProjectionField.value;
            },
            set: function (value) {
                this.showProjectionField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showScale", {
            get: function () {
                return this.showScaleField.value;
            },
            set: function (value) {
                this.showScaleField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showLegend", {
            get: function () {
                return this.showLegendField.value;
            },
            set: function (value) {
                this.showLegendField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "doZipFile", {
            get: function () {
                return this.doZipFileField.value;
            },
            set: function (value) {
                this.doZipFileField.setValue(value, { onlySelf: true });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "outputFormatField", {
            get: function () {
                return this.form.controls.outputFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "paperFormatField", {
            get: function () {
                return this.form.controls.paperFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "imageFormatField", {
            get: function () {
                return this.form.controls.imageFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "orientationField", {
            get: function () {
                return this.form.controls.orientation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "resolutionField", {
            get: function () {
                return this.form.controls.resolution;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "commentField", {
            get: function () {
                return this.form.controls.comment;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showProjectionField", {
            get: function () {
                return this.form.controls.showProjection;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showScaleField", {
            get: function () {
                return this.form.controls.showScale;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "showLegendField", {
            get: function () {
                return this.form.controls.showLegend;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "doZipFileField", {
            get: function () {
                return this.form.controls.doZipFile;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "titleField", {
            get: function () {
                return this.form.controls.title;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "subtitleField", {
            get: function () {
                return this.form.controls.subtitle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintFormComponent.prototype, "legendPositionField", {
            get: function () {
                return this.form.controls.legendPosition;
            },
            enumerable: false,
            configurable: true
        });
        PrintFormComponent.prototype.ngOnInit = function () {
            this.doZipFileField.setValue(false);
        };
        PrintFormComponent.prototype.handleFormSubmit = function (data, isValid) {
            data.isPrintService = this.isPrintService;
            if (isValid) {
                this.submit.emit(data);
            }
        };
        PrintFormComponent.prototype.toggleImageSaveProp = function () {
            if (this.outputFormatField.value === 'Image') {
                this.isPrintService = false;
            }
            else {
                this.isPrintService = true;
            }
        };
        return PrintFormComponent;
    }());
    PrintFormComponent.ɵfac = function PrintFormComponent_Factory(t) { return new (t || PrintFormComponent)(i0__namespace.ɵɵdirectiveInject(i16__namespace.FormBuilder)); };
    PrintFormComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: PrintFormComponent, selectors: [["igo-print-form"]], inputs: { disabled$: "disabled$", imageFormat: "imageFormat", outputFormat: "outputFormat", paperFormat: "paperFormat", orientation: "orientation", resolution: "resolution", legendPosition: "legendPosition", title: "title", subtitle: "subtitle", comment: "comment", showProjection: "showProjection", showScale: "showScale", showLegend: "showLegend", doZipFile: "doZipFile" }, outputs: { submit: "submit" }, decls: 65, vars: 72, consts: [[1, "igo-form", 3, "formGroup"], [1, "igo-input-container"], ["matInput", "", "formControlName", "title", 3, "placeholder"], ["matInput", "", "formControlName", "subtitle", 3, "placeholder"], ["matInput", "", "formControlName", "comment", 3, "placeholder"], [1, "print-slide-toggle-container", "mat-typography"], ["formControlName", "showProjection", 1, "print-option", 3, "labelPosition"], ["formControlName", "showScale", 1, "print-option", 3, "labelPosition"], ["formControlName", "doZipFile", 1, "print-option", 3, "labelPosition"], ["formControlName", "legendPosition", 3, "placeholder"], [3, "value", 4, "ngFor", "ngForOf"], ["formControlName", "outputFormat", 3, "placeholder", "selectionChange"], ["formControlName", "paperFormat", 3, "placeholder"], ["formControlName", "imageFormat", 3, "placeholder"], [1, "igo-input-container", 2, "display", "none"], ["formControlName", "resolution", 3, "placeholder"], ["formControlName", "orientation", 3, "placeholder"], [1, "igo-form-button-group", "print-button-top-padding"], ["mat-raised-button", "", "type", "button", 3, "disabled", "click"], [3, "value"]], template: function PrintFormComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "form", 0);
                i0__namespace.ɵɵelementStart(1, "div", 1);
                i0__namespace.ɵɵelementStart(2, "mat-form-field");
                i0__namespace.ɵɵelement(3, "input", 2);
                i0__namespace.ɵɵpipe(4, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(5, "div", 1);
                i0__namespace.ɵɵelementStart(6, "mat-form-field");
                i0__namespace.ɵɵelement(7, "input", 3);
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(9, "div", 1);
                i0__namespace.ɵɵelementStart(10, "mat-form-field");
                i0__namespace.ɵɵelement(11, "input", 4);
                i0__namespace.ɵɵpipe(12, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(13, "div", 1);
                i0__namespace.ɵɵelementStart(14, "div", 5);
                i0__namespace.ɵɵelementStart(15, "mat-slide-toggle", 6);
                i0__namespace.ɵɵtext(16);
                i0__namespace.ɵɵpipe(17, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(18, "mat-slide-toggle", 7);
                i0__namespace.ɵɵtext(19);
                i0__namespace.ɵɵpipe(20, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(21, "mat-slide-toggle", 8);
                i0__namespace.ɵɵtext(22);
                i0__namespace.ɵɵpipe(23, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(24, "div", 1);
                i0__namespace.ɵɵelementStart(25, "mat-form-field");
                i0__namespace.ɵɵelementStart(26, "mat-select", 9);
                i0__namespace.ɵɵpipe(27, "translate");
                i0__namespace.ɵɵtemplate(28, PrintFormComponent_mat_option_28_Template, 3, 4, "mat-option", 10);
                i0__namespace.ɵɵpipe(29, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(30, "div", 1);
                i0__namespace.ɵɵelementStart(31, "mat-form-field");
                i0__namespace.ɵɵelementStart(32, "mat-select", 11);
                i0__namespace.ɵɵlistener("selectionChange", function PrintFormComponent_Template_mat_select_selectionChange_32_listener() { return ctx.toggleImageSaveProp(); });
                i0__namespace.ɵɵpipe(33, "translate");
                i0__namespace.ɵɵtemplate(34, PrintFormComponent_mat_option_34_Template, 2, 2, "mat-option", 10);
                i0__namespace.ɵɵpipe(35, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(36, "div", 1);
                i0__namespace.ɵɵelementStart(37, "mat-form-field");
                i0__namespace.ɵɵelementStart(38, "mat-select", 12);
                i0__namespace.ɵɵpipe(39, "translate");
                i0__namespace.ɵɵtemplate(40, PrintFormComponent_mat_option_40_Template, 3, 4, "mat-option", 10);
                i0__namespace.ɵɵpipe(41, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(42, "div", 1);
                i0__namespace.ɵɵelementStart(43, "mat-form-field");
                i0__namespace.ɵɵelementStart(44, "mat-select", 13);
                i0__namespace.ɵɵpipe(45, "translate");
                i0__namespace.ɵɵtemplate(46, PrintFormComponent_mat_option_46_Template, 2, 2, "mat-option", 10);
                i0__namespace.ɵɵpipe(47, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(48, "div", 14);
                i0__namespace.ɵɵelementStart(49, "mat-form-field");
                i0__namespace.ɵɵelementStart(50, "mat-select", 15);
                i0__namespace.ɵɵpipe(51, "translate");
                i0__namespace.ɵɵtemplate(52, PrintFormComponent_mat_option_52_Template, 2, 2, "mat-option", 10);
                i0__namespace.ɵɵpipe(53, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(54, "div", 1);
                i0__namespace.ɵɵelementStart(55, "mat-form-field");
                i0__namespace.ɵɵelementStart(56, "mat-select", 16);
                i0__namespace.ɵɵpipe(57, "translate");
                i0__namespace.ɵɵtemplate(58, PrintFormComponent_mat_option_58_Template, 3, 4, "mat-option", 10);
                i0__namespace.ɵɵpipe(59, "keyvalue");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(60, "div", 17);
                i0__namespace.ɵɵelementStart(61, "button", 18);
                i0__namespace.ɵɵlistener("click", function PrintFormComponent_Template_button_click_61_listener() { return ctx.handleFormSubmit(ctx.form.value, ctx.form.valid); });
                i0__namespace.ɵɵpipe(62, "async");
                i0__namespace.ɵɵtext(63);
                i0__namespace.ɵɵpipe(64, "translate");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("formGroup", ctx.form);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(4, 32, "igo.geo.printForm.title"));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(8, 34, "igo.geo.printForm.subtitle"));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(12, 36, "igo.geo.printForm.comment"));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(17, 38, "igo.geo.printForm.showProjection"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(20, 40, "igo.geo.printForm.showScale"), " ");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵstyleProp("display", ctx.isPrintService ? "none" : "");
                i0__namespace.ɵɵproperty("labelPosition", "before");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(23, 42, "igo.geo.printForm.doZipFile"), " ");
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(27, 44, "igo.geo.printForm.legendPosition"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(29, 46, ctx.legendPositions));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(33, 48, "igo.geo.printForm.outputFormat"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(35, 50, ctx.outputFormats));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵstyleProp("display", ctx.isPrintService ? "block" : "none");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(39, 52, "igo.geo.printForm.paperFormat"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(41, 54, ctx.paperFormats));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵstyleProp("display", ctx.isPrintService ? "none" : "block");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(45, 56, "igo.geo.printForm.imageFormat"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(47, 58, ctx.imageFormats));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(51, 60, "igo.geo.printForm.resolution"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(53, 62, ctx.resolutions));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵstyleProp("display", ctx.isPrintService ? "block" : "none");
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(57, 64, "igo.geo.printForm.orientation"));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(59, 66, ctx.orientations));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("disabled", !ctx.form.valid || i0__namespace.ɵɵpipeBind1(62, 68, ctx.disabled$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(64, 70, "igo.geo.printForm.saveBtn"), " ");
            }
        }, directives: [i16__namespace.ɵNgNoValidate, i16__namespace.NgControlStatusGroup, i16__namespace.FormGroupDirective, i12__namespace.MatFormField, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor, i16__namespace.NgControlStatus, i16__namespace.FormControlName, i22__namespace.MatSlideToggle, i13__namespace.MatSelect, i1__namespace$1.NgForOf, i2__namespace.MatButton, i9__namespace.MatOption], pipes: [i7__namespace.TranslatePipe, i6__namespace.KeyValuePipe, i1__namespace$1.AsyncPipe], styles: ["mat-form-field[_ngcontent-%COMP%]{width:100%}.print-slide-toggle-container[_ngcontent-%COMP%]{overflow-x:hidden}.print-slide-toggle-container[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{width:100%;margin:10px}.print-slide-toggle-container[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]     .mat-slide-toggle-content{width:calc(100% - 60px)}.print-option[_ngcontent-%COMP%]{display:block;margin-right:10px;margin-bottom:15px}.print-button-top-padding[_ngcontent-%COMP%]{padding-top:25px}.igo-form[_ngcontent-%COMP%]{padding:10px 5px 5px}.igo-form-button-group[_ngcontent-%COMP%]{text-align:center}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(PrintFormComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-print-form',
                        templateUrl: './print-form.component.html',
                        styleUrls: ['./print-form.component.scss']
                    }]
            }], function () { return [{ type: i16__namespace.FormBuilder }]; }, { disabled$: [{
                    type: i0.Input
                }], imageFormat: [{
                    type: i0.Input
                }], outputFormat: [{
                    type: i0.Input
                }], paperFormat: [{
                    type: i0.Input
                }], orientation: [{
                    type: i0.Input
                }], resolution: [{
                    type: i0.Input
                }], legendPosition: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], subtitle: [{
                    type: i0.Input
                }], comment: [{
                    type: i0.Input
                }], showProjection: [{
                    type: i0.Input
                }], showScale: [{
                    type: i0.Input
                }], showLegend: [{
                    type: i0.Input
                }], doZipFile: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }] });
    })();

    var PrintComponent = /** @class */ (function () {
        function PrintComponent(printService) {
            this.printService = printService;
            this.disabled$ = new rxjs.BehaviorSubject(false);
        }
        Object.defineProperty(PrintComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "outputFormat", {
            get: function () {
                return this._outputFormat;
            },
            set: function (value) {
                this._outputFormat = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "paperFormat", {
            get: function () {
                return this._paperFormat;
            },
            set: function (value) {
                this._paperFormat = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "orientation", {
            get: function () {
                return this._orientation;
            },
            set: function (value) {
                this._orientation = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "imageFormat", {
            get: function () {
                return this._imageFormat;
            },
            set: function (value) {
                this._imageFormat = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "legendPosition", {
            get: function () {
                return this._legendPosition;
            },
            set: function (value) {
                this._legendPosition = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrintComponent.prototype, "resolution", {
            get: function () {
                return this._resolution;
            },
            set: function (value) {
                this._resolution = value;
            },
            enumerable: false,
            configurable: true
        });
        PrintComponent.prototype.handleFormSubmit = function (data) {
            var _this = this;
            this.disabled$.next(true);
            if (data.isPrintService === true) {
                this.printService
                    .print(this.map, data)
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    _this.disabled$.next(false);
                });
            }
            else {
                var nbFileToProcess = 1;
                if (data.showLegend) {
                    nbFileToProcess++;
                }
                if (data.imageFormat.toLowerCase() === 'tiff') {
                    nbFileToProcess++;
                }
                this.printService.defineNbFileToProcess(nbFileToProcess);
                var resolution = +data.resolution;
                var nbRequests_1 = data.showLegend ? 2 : 1;
                this.printService
                    .downloadMapImage(this.map, resolution, data.imageFormat, data.showProjection, data.showScale, data.showLegend, data.title, data.subtitle, data.comment, data.doZipFile)
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    nbRequests_1--;
                    if (!nbRequests_1) {
                        _this.disabled$.next(false);
                    }
                });
                if (data.showLegend) {
                    this.printService
                        .getLayersLegendImage(this.map, data.imageFormat, data.doZipFile, +resolution)
                        .then(function () {
                        nbRequests_1--;
                        if (!nbRequests_1) {
                            _this.disabled$.next(false);
                        }
                    });
                }
            }
        };
        return PrintComponent;
    }());
    PrintComponent.ɵfac = function PrintComponent_Factory(t) { return new (t || PrintComponent)(i0__namespace.ɵɵdirectiveInject(PrintService)); };
    PrintComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: PrintComponent, selectors: [["igo-print"]], inputs: { map: "map", outputFormat: "outputFormat", paperFormat: "paperFormat", orientation: "orientation", imageFormat: "imageFormat", legendPosition: "legendPosition", resolution: "resolution" }, decls: 1, vars: 7, consts: [[3, "outputFormat", "paperFormat", "orientation", "imageFormat", "resolution", "legendPosition", "disabled$", "submit"]], template: function PrintComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-print-form", 0);
                i0__namespace.ɵɵlistener("submit", function PrintComponent_Template_igo_print_form_submit_0_listener($event) { return ctx.handleFormSubmit($event); });
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("outputFormat", ctx.outputFormat)("paperFormat", ctx.paperFormat)("orientation", ctx.orientation)("imageFormat", ctx.imageFormat)("resolution", ctx.resolution)("legendPosition", ctx.legendPosition)("disabled$", ctx.disabled$);
            }
        }, directives: [PrintFormComponent], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(PrintComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-print',
                        templateUrl: './print.component.html'
                    }]
            }], function () { return [{ type: PrintService }]; }, { map: [{
                    type: i0.Input
                }], outputFormat: [{
                    type: i0.Input
                }], paperFormat: [{
                    type: i0.Input
                }], orientation: [{
                    type: i0.Input
                }], imageFormat: [{
                    type: i0.Input
                }], legendPosition: [{
                    type: i0.Input
                }], resolution: [{
                    type: i0.Input
                }] });
    })();

    var IgoPrintModule = /** @class */ (function () {
        function IgoPrintModule() {
        }
        return IgoPrintModule;
    }());
    IgoPrintModule.ɵfac = function IgoPrintModule_Factory(t) { return new (t || IgoPrintModule)(); };
    IgoPrintModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoPrintModule });
    IgoPrintModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i13.MatSelectModule,
                i9.MatOptionModule,
                i5$1.MatInputModule,
                i12.MatFormFieldModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule,
                i6.IgoKeyValueModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoPrintModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i13.MatSelectModule,
                            i9.MatOptionModule,
                            i5$1.MatInputModule,
                            i12.MatFormFieldModule,
                            i22.MatSlideToggleModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoKeyValueModule
                        ],
                        exports: [PrintComponent, PrintFormComponent],
                        declarations: [PrintComponent, PrintFormComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoPrintModule, { declarations: [PrintComponent, PrintFormComponent], imports: [i1$1.CommonModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i13.MatSelectModule,
                i9.MatOptionModule,
                i5$1.MatInputModule,
                i12.MatFormFieldModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule,
                i6.IgoKeyValueModule], exports: [PrintComponent, PrintFormComponent] });
    })();

    /**
     * Map search source factory
     * @ignore
     */
    function querySearchSourceFactory(config) {
        return new QuerySearchSource(config.getConfig("searchSources." + QuerySearchSource.id) || {});
    }
    /**
     * Function that returns a provider for the map search source
     */
    function provideQuerySearchSource() {
        return {
            provide: SearchSource,
            useFactory: querySearchSourceFactory,
            multi: true,
            deps: [i2$1.ConfigService]
        };
    }

    var IgoQueryModule = /** @class */ (function () {
        function IgoQueryModule() {
        }
        IgoQueryModule.forRoot = function () {
            return {
                ngModule: IgoQueryModule,
                providers: [provideQuerySearchSource()]
            };
        };
        return IgoQueryModule;
    }());
    IgoQueryModule.ɵfac = function IgoQueryModule_Factory(t) { return new (t || IgoQueryModule)(); };
    IgoQueryModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoQueryModule });
    IgoQueryModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [QueryService], imports: [[i1$1.CommonModule]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoQueryModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$1.CommonModule],
                        exports: [QueryDirective],
                        declarations: [QueryDirective],
                        providers: [QueryService]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoQueryModule, { declarations: [QueryDirective], imports: [i1$1.CommonModule], exports: [QueryDirective] }); })();

    var DirectionsSource = /** @class */ (function () {
        function DirectionsSource() {
        }
        return DirectionsSource;
    }());

    var DirectionsSourceService = /** @class */ (function () {
        function DirectionsSourceService(sources) {
            this.sources = sources;
        }
        return DirectionsSourceService;
    }());
    function directionsSourceServiceFactory(sources) {
        return new DirectionsSourceService(sources);
    }
    function provideDirectionsSourceService() {
        return {
            provide: DirectionsSourceService,
            useFactory: directionsSourceServiceFactory,
            deps: [DirectionsSource]
        };
    }

    exports.DirectionsFormat = void 0;
    (function (DirectionsFormat) {
        DirectionsFormat[DirectionsFormat["GeoJSON"] = 0] = "GeoJSON";
        DirectionsFormat[DirectionsFormat["JSON"] = 1] = "JSON";
    })(exports.DirectionsFormat || (exports.DirectionsFormat = {}));
    exports.SourceDirectionsType = void 0;
    (function (SourceDirectionsType) {
        SourceDirectionsType["Route"] = "route";
        SourceDirectionsType["Trip"] = "trip";
    })(exports.SourceDirectionsType || (exports.SourceDirectionsType = {}));
    exports.ProposalType = void 0;
    (function (ProposalType) {
        ProposalType["Coord"] = "coord";
        ProposalType["Text"] = "text";
    })(exports.ProposalType || (exports.ProposalType = {}));
    exports.DirectionType = void 0;
    (function (DirectionType) {
        DirectionType["Stop"] = "stop";
        DirectionType["Route"] = "route";
        DirectionType["Vertex"] = "vertex";
    })(exports.DirectionType || (exports.DirectionType = {}));
    exports.DirectionRelativePositionType = void 0;
    (function (DirectionRelativePositionType) {
        DirectionRelativePositionType["Start"] = "start";
        DirectionRelativePositionType["Intermediate"] = "intermediate";
        DirectionRelativePositionType["End"] = "end";
    })(exports.DirectionRelativePositionType || (exports.DirectionRelativePositionType = {}));

    /**
     * Function that updat the sort of the list base on the provided field.
     * @param source stop store
     * @param direction asc / desc sort order
     * @param field the field to use to sort the view
     */
    function updateStoreSorting(stopsStore, direction, field) {
        if (direction === void 0) { direction = 'asc'; }
        if (field === void 0) { field = 'position'; }
        stopsStore.view.sort({
            direction: direction,
            valueAccessor: function (entity) { return entity[field]; }
        });
    }
    function computeRelativePosition(index, totalLength) {
        var relativePosition = exports.DirectionRelativePositionType.Intermediate;
        if (index === 0) {
            relativePosition = exports.DirectionRelativePositionType.Start;
        }
        else if (index === totalLength - 1) {
            relativePosition = exports.DirectionRelativePositionType.End;
        }
        return relativePosition;
    }
    function computeStopsPosition(stopsStore) {
        var stopsToComputePosition = __spreadArray([], __read(stopsStore.all()));
        stopsToComputePosition.sort(function (a, b) { return a.position - b.position; });
        stopsToComputePosition.map(function (stop, i) {
            stop.position = i;
            stop.relativePosition = computeRelativePosition(stop.position, stopsToComputePosition.length);
        });
        if (stopsToComputePosition) {
            stopsStore.updateMany(stopsToComputePosition);
        }
    }
    /**
     * Function that add a stop to the stop store. Stop are always added before the last stop.
     * @param stopsStore stop store as an EntityStore
     */
    function addStopToStore(stopsStore) {
        var id = utils.uuid();
        var stops = stopsStore.all();
        var positions;
        if (stopsStore.count === 0) {
            positions = [0];
        }
        else {
            positions = stops.map(function (stop) { return stop.position; });
        }
        var maxPosition = Math.max.apply(Math, __spreadArray([], __read(positions)));
        var insertPosition = maxPosition;
        var lastPosition = maxPosition + 1;
        var stopToUpdate = stopsStore.all().find(function (stop) { return stop.position === maxPosition; });
        if (stopToUpdate) {
            stopToUpdate.position = lastPosition;
            stopToUpdate.relativePosition = computeRelativePosition(lastPosition, stopsStore.count + 1);
        }
        stopsStore.insert({ id: id, position: insertPosition, relativePosition: computeRelativePosition(insertPosition, stopsStore.count + 1) });
        updateStoreSorting(stopsStore);
        return stopsStore.get(id);
    }
    function removeStopFromStore(stopsStore, stop) {
        stopsStore.delete(stop);
        computeStopsPosition(stopsStore);
    }
    /**
     * Create a style for the directions stops and routes
     * @param feature OlFeature
     * @returns OL style function
     */
    function directionsStyle(feature, resolution) {
        var vertexStyle = [
            new olstyle__namespace.Style({
                geometry: feature.getGeometry(),
                image: new olstyle__namespace.Circle({
                    radius: 7,
                    stroke: new olstyle__namespace.Stroke({ color: '#FF0000', width: 3 })
                })
            })
        ];
        var stopStyle = createOverlayMarkerStyle({
            text: feature.get('stopText'),
            opacity: feature.get('stopOpacity'),
            markerColor: feature.get('stopColor'),
            markerOutlineColor: [255, 255, 255]
        });
        var routeStyle = [
            new olstyle__namespace.Style({
                stroke: new olstyle__namespace.Stroke({ color: "rgba(106, 121, 130, " + (feature.get('active') ? 0.75 : 0) + ")", width: 10 })
            }),
            new olstyle__namespace.Style({
                stroke: new olstyle__namespace.Stroke({ color: "rgba(79, 169, 221, " + (feature.get('active') ? 0.75 : 0) + ")", width: 6 })
            })
        ];
        if (feature.get('type') === exports.DirectionType.Stop) {
            return stopStyle;
        }
        if (feature.get('type') === 'vertex') {
            return vertexStyle;
        }
        if (feature.get('type') === exports.DirectionType.Route) {
            return routeStyle;
        }
    }
    function initStopsFeatureStore(stopsFeatureStore, languageService) {
        var loadingStrategy = new FeatureStoreLoadingStrategy({
            motion: exports.FeatureMotion.None
        });
        var stopsLayer = new VectorLayer({
            isIgoInternalLayer: true,
            id: 'igo-direction-stops-layer',
            title: languageService.translate.instant('igo.geo.directionsForm.stopLayer'),
            zIndex: 911,
            source: new FeatureDataSource(),
            showInLayerList: true,
            workspace: {
                enabled: false,
            },
            linkedLayers: {
                linkId: 'igo-direction-stops-layer',
                links: [
                    {
                        bidirectionnal: false,
                        syncedDelete: true,
                        linkedIds: ['igo-direction-route-layer'],
                        properties: []
                    }
                ]
            },
            exportable: true,
            browsable: false,
            style: directionsStyle
        });
        tryBindStoreLayer(stopsFeatureStore, stopsLayer);
        stopsFeatureStore.layer.visible = true;
        tryAddLoadingStrategy(stopsFeatureStore, loadingStrategy);
    }
    function initRoutesFeatureStore(routesFeatureStore, languageService) {
        var loadingStrategy = new FeatureStoreLoadingStrategy({
            motion: exports.FeatureMotion.None
        });
        var routeLayer = new VectorLayer({
            isIgoInternalLayer: true,
            id: 'igo-direction-route-layer',
            title: languageService.translate.instant('igo.geo.directionsForm.routeLayer'),
            zIndex: 910,
            source: new FeatureDataSource(),
            showInLayerList: true,
            workspace: {
                enabled: false,
            },
            linkedLayers: {
                linkId: 'igo-direction-route-layer'
            },
            exportable: true,
            browsable: false,
            style: directionsStyle
        });
        tryBindStoreLayer(routesFeatureStore, routeLayer);
        routesFeatureStore.layer.visible = true;
        tryAddLoadingStrategy(routesFeatureStore, loadingStrategy);
    }
    function initStepFeatureStore(stepFeatureStore) {
        var loadingStrategy = new FeatureStoreLoadingStrategy({
            motion: exports.FeatureMotion.None
        });
        var stepLayer = new VectorLayer({
            isIgoInternalLayer: true,
            id: 'igo-direction-step-layer',
            title: '',
            zIndex: 910,
            source: new FeatureDataSource(),
            showInLayerList: false,
            workspace: {
                enabled: false,
            },
            linkedLayers: {
                linkId: 'igo-direction-route-layer'
            },
            exportable: false,
            browsable: false,
            style: directionsStyle
        });
        tryBindStoreLayer(stepFeatureStore, stepLayer);
        stepFeatureStore.layer.visible = true;
        tryAddLoadingStrategy(stepFeatureStore, loadingStrategy);
    }
    function addStopToStopsFeatureStore(stop, stopsStore, stopsFeatureStore, projection, languageService) {
        var stopColor;
        var stopText;
        switch (stop.relativePosition) {
            case exports.DirectionRelativePositionType.Start:
                stopColor = '#008000';
                stopText = languageService.translate.instant('igo.geo.directionsForm.start');
                break;
            case exports.DirectionRelativePositionType.End:
                stopColor = '#f64139';
                stopText = languageService.translate.instant('igo.geo.directionsForm.end');
                break;
            default:
                stopColor = '#ffd700';
                stopText = languageService.translate.instant('igo.geo.directionsForm.intermediate') + ' #' + stop.position;
                break;
        }
        var geometry = new olgeom__namespace.Point(olproj__namespace.transform(stop.coordinates, projection, stopsFeatureStore.map.projection));
        var geojsonGeom = new OlGeoJSON__default["default"]().writeGeometryObject(geometry, {
            featureProjection: stopsFeatureStore.map.projection,
            dataProjection: stopsFeatureStore.map.projection
        });
        var previousStop = stopsFeatureStore.get(stop.id);
        var previousStopRevision = previousStop ? previousStop.meta.revision : 0;
        var stopFeatureStore = {
            type: FEATURE,
            geometry: geojsonGeom,
            projection: stopsFeatureStore.map.projection,
            properties: {
                id: stop.id,
                type: exports.DirectionType.Stop,
                stopText: stopText,
                stopColor: stopColor,
                stopOpacity: 1,
                stop: stop
            },
            meta: {
                id: stop.id,
                revision: previousStopRevision + 1
            },
            ol: new OlFeature__default["default"]({ geometry: geometry })
        };
        stopsFeatureStore.update(stopFeatureStore);
    }
    function addDirectionToRoutesFeatureStore(routesFeatureStore, direction, projection, active, moveToExtent) {
        if (active === void 0) { active = false; }
        if (moveToExtent === void 0) { moveToExtent = false; }
        var geom = direction.geometry.coordinates;
        var geometry4326 = new olgeom__namespace.LineString(geom);
        var geometry = geometry4326.transform(projection, routesFeatureStore.map.projection);
        var geojsonGeom = new OlGeoJSON__default["default"]().writeGeometryObject(geometry, {
            featureProjection: routesFeatureStore.map.projection,
            dataProjection: routesFeatureStore.map.projection
        });
        var previousRoute = routesFeatureStore.get(direction.id);
        var previousRouteRevision = previousRoute
            ? previousRoute.meta.revision
            : 0;
        var routeFeatureStore = {
            type: FEATURE,
            geometry: geojsonGeom,
            projection: routesFeatureStore.map.projection,
            properties: {
                id: direction.id,
                type: exports.DirectionType.Route,
                active: active,
                direction: direction
            },
            meta: {
                id: direction.id,
                revision: previousRouteRevision + 1
            },
            ol: new OlFeature__default["default"]({ geometry: geometry })
        };
        routesFeatureStore.update(routeFeatureStore);
    }
    function formatDistance(distance) {
        if (distance === 0) {
            return;
        }
        if (distance >= 100000) {
            return utils.NumberUtils.roundToNDecimal(Math.round(distance) / 1000, 1) + ' km';
        }
        if (distance >= 10000) {
            return utils.NumberUtils.roundToNDecimal(Math.round(distance) / 100 / 10, 1) + ' km';
        }
        if (distance >= 1000) {
            return utils.NumberUtils.roundToNDecimal(Math.round(distance) / 100 / 10, 1) + ' km';
        }
        return utils.NumberUtils.roundToNDecimal(distance, 0) + ' m';
    }
    function formatDuration(duration) {
        if (duration >= 3600) {
            var hour = Math.floor(duration / 3600);
            var minute = Math.round((duration / 3600 - hour) * 60);
            if (minute === 60) {
                return hour + 1 + ' h';
            }
            return hour + ' h ' + minute + ' min';
        }
        if (duration >= 60) {
            return Math.round(duration / 60) + ' min';
        }
        return duration + ' s';
    }
    function formatInstruction(type, modifier, route, direction, stepPosition, exit, languageService, lastStep) {
        if (lastStep === void 0) { lastStep = false; }
        var translate = languageService.translate;
        var directive;
        var image = 'forward';
        var cssClass = 'rotate-270';
        var translatedDirection = translateBearing(direction, languageService);
        var translatedModifier = translateModifier(modifier, languageService);
        var prefix = modifier === 'straight' ? '' : translate.instant('igo.geo.directions.modifier.prefix');
        var aggregatedDirection = prefix + translatedModifier;
        if ((modifier === null || modifier === void 0 ? void 0 : modifier.search('slight')) >= 0) {
            aggregatedDirection = translatedModifier;
        }
        if (modifier === 'uturn') {
            image = 'forward';
            cssClass = 'rotate-90';
        }
        else if (modifier === 'sharp right') {
            image = 'subdirectory-arrow-right';
            cssClass = 'icon-flipped';
        }
        else if (modifier === 'right') {
            image = 'subdirectory-arrow-right';
            cssClass = 'icon-flipped';
        }
        else if (modifier === 'slight right') {
            image = 'forward';
            cssClass = 'rotate-290';
        }
        else if (modifier === 'straight') {
            image = 'forward';
        }
        else if (modifier === 'slight left') {
            image = 'forward';
            cssClass = 'rotate-250';
        }
        else if (modifier === 'left') {
            image = 'subdirectory-arrow-left';
            cssClass = 'icon-flipped';
        }
        else if (modifier === 'sharp left') {
            image = 'subdirectory-arrow-left';
            cssClass = 'icon-flipped';
        }
        if (type === 'turn') {
            if (modifier === 'straight') {
                directive = translate.instant('igo.geo.directions.turn.straight', { route: route });
            }
            else if (modifier === 'uturn') {
                directive = translate.instant('igo.geo.directions.turn.uturn', { route: route });
            }
            else {
                directive = translate.instant('igo.geo.directions.turn.else', { route: route, aggregatedDirection: aggregatedDirection, translatedModifier: translatedModifier });
            }
        }
        else if (type === 'new name') {
            directive = translate.instant('igo.geo.directions.new name', { route: route, translatedDirection: translatedDirection });
            image = 'compass';
            cssClass = '';
        }
        else if (type === 'depart') {
            directive = translate.instant('igo.geo.directions.depart', { route: route, translatedDirection: translatedDirection });
            image = 'compass';
            cssClass = '';
        }
        else if (type === 'arrive') {
            if (lastStep) {
                var coma = !translatedModifier ? '' : ', ';
                aggregatedDirection = !translatedModifier ? '' : aggregatedDirection;
                directive = translate.instant('igo.geo.directions.arrive.lastStep', { coma: coma, aggregatedDirection: aggregatedDirection });
            }
            else {
                directive = translate.instant('igo.geo.directions.arrive.intermediate', { route: route });
                image = 'map-marker';
                cssClass = '';
            }
        }
        else if (type === 'merge') {
            directive = translate.instant('igo.geo.directions.merge', { route: route });
            image = 'forward';
            cssClass = 'rotate-270';
        }
        else if (type === 'on ramp') {
            directive = translate.instant('igo.geo.directions.on ramp', { aggregatedDirection: aggregatedDirection });
        }
        else if (type === 'off ramp') {
            directive = translate.instant('igo.geo.directions.off ramp', { aggregatedDirection: aggregatedDirection });
        }
        else if (type === 'fork') {
            if (modifier.search('left') >= 0) {
                directive = translate.instant('igo.geo.directions.fork.left', { route: route });
            }
            else if (modifier.search('right') >= 0) {
                directive = translate.instant('igo.geo.directions.fork.right', { route: route });
            }
            else {
                directive = translate.instant('igo.geo.directions.fork.else', { route: route });
            }
        }
        else if (type === 'end of road') {
            directive = translate.instant('igo.geo.directions.end of road', { translatedModifier: translatedModifier, route: route });
        }
        else if (type === 'use lane') {
            directive = translate.instant('igo.geo.directions.use lane');
        }
        else if (type === 'continue' && modifier !== 'uturn') {
            directive = translate.instant('igo.geo.directions.continue.notUturn', { route: route });
            image = 'forward';
            cssClass = 'rotate-270';
        }
        else if (type === 'roundabout') {
            var cntSuffix = exit === 1 ?
                translate.instant('igo.geo.directions.cntSuffix.first') :
                translate.instant('igo.geo.directions.cntSuffix.secondAndMore');
            directive = translate.instant('igo.geo.directions.roundabout', { exit: exit, cntSuffix: cntSuffix, route: route });
            image = 'chart-donut';
            cssClass = '';
        }
        else if (type === 'rotary') {
            directive = translate.instant('igo.geo.directions.rotary');
            image = 'chart-donut';
            cssClass = '';
        }
        else if (type === 'roundabout turn') {
            directive = translate.instant('igo.geo.directions.roundabout turn');
            image = 'chart-donut';
            cssClass = '';
        }
        else if (type === 'exit roundabout') {
            directive = translate.instant('igo.geo.directions.exit roundabout', { route: route });
            image = 'forward';
            cssClass = 'rotate-270';
        }
        else if (type === 'notification') {
            directive = translate.instant('igo.geo.directions.notification');
        }
        else if (modifier === 'uturn') {
            directive = translate.instant('igo.geo.directions.uturnText', { translatedDirection: translatedDirection, route: route });
        }
        else {
            directive = translate.instant('igo.geo.directions.unknown');
        }
        image = lastStep ? 'flag-variant' : image;
        cssClass = lastStep ? '' : cssClass;
        image = stepPosition === 0 ? 'compass' : image;
        cssClass = stepPosition === 0 ? '' : cssClass;
        return { instruction: directive, image: image, cssClass: cssClass };
    }
    function translateModifier(modifier, languageService) {
        var translate = languageService.translate;
        if (modifier === 'uturn') {
            return translate.instant('igo.geo.directions.uturn');
        }
        else if (modifier === 'sharp right') {
            return translate.instant('igo.geo.directions.sharp right');
        }
        else if (modifier === 'right') {
            return translate.instant('igo.geo.directions.right');
        }
        else if (modifier === 'slight right') {
            return translate.instant('igo.geo.directions.slight right');
        }
        else if (modifier === 'sharp left') {
            return languageService.translate.instant('igo.geo.directions.sharp left');
        }
        else if (modifier === 'left') {
            return languageService.translate.instant('igo.geo.directions.left');
        }
        else if (modifier === 'slight left') {
            return languageService.translate.instant('igo.geo.directions.slight left');
        }
        else if (modifier === 'straight') {
            return languageService.translate.instant('igo.geo.directions.straight');
        }
        else {
            return modifier;
        }
    }
    function translateBearing(bearing, languageService) {
        var translate = languageService.translate;
        if (bearing >= 337 || bearing < 23) {
            return translate.instant('igo.geo.cardinalPoints.n');
        }
        else if (bearing < 67) {
            return translate.instant('igo.geo.cardinalPoints.ne');
        }
        else if (bearing < 113) {
            return translate.instant('igo.geo.cardinalPoints.e');
        }
        else if (bearing < 157) {
            return translate.instant('igo.geo.cardinalPoints.se');
        }
        else if (bearing < 203) {
            return translate.instant('igo.geo.cardinalPoints.s');
        }
        else if (bearing < 247) {
            return translate.instant('igo.geo.cardinalPoints.sw');
        }
        else if (bearing < 293) {
            return translate.instant('igo.geo.cardinalPoints.w');
        }
        else if (bearing < 337) {
            return translate.instant('igo.geo.cardinalPoints.nw');
        }
        else {
            return;
        }
    }

    function DirectionsInputsComponent_div_1_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵlistener("click", function DirectionsInputsComponent_div_1_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var stop_r1 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r7 = i0__namespace.ɵɵnextContext(); return ctx_r7.clearStop(stop_r1); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 11);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.clearStop"));
        }
    }
    function DirectionsInputsComponent_div_1_mat_optgroup_7_mat_option_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 14);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var result_r12 = ctx.$implicit;
            i0__namespace.ɵɵproperty("value", result_r12)("matTooltip", result_r12.meta ? result_r12.meta.title : "");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", result_r12.meta ? result_r12.meta.title : "", " ");
        }
    }
    function DirectionsInputsComponent_div_1_mat_optgroup_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-optgroup", 12);
            i0__namespace.ɵɵtemplate(1, DirectionsInputsComponent_div_1_mat_optgroup_7_mat_option_1_Template, 2, 3, "mat-option", 13);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var source_r10 = ctx.$implicit;
            i0__namespace.ɵɵproperty("label", source_r10.source.title)("disabled", source_r10.source.enabled === false);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", source_r10.results);
        }
    }
    function DirectionsInputsComponent_div_1_div_8_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r17_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 20);
            i0__namespace.ɵɵlistener("click", function DirectionsInputsComponent_div_1_div_8_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r17_1); var stop_r1 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r15 = i0__namespace.ɵɵnextContext(); return ctx_r15.removeStop(stop_r1); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 21);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.removeStop"));
        }
    }
    function DirectionsInputsComponent_div_1_div_8_button_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 22);
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 23);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.removeStop"));
        }
    }
    function DirectionsInputsComponent_div_1_div_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 15);
            i0__namespace.ɵɵelementStart(1, "button", 16);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelement(3, "mat-icon", 17);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(4, DirectionsInputsComponent_div_1_div_8_button_4_Template, 3, 3, "button", 18);
            i0__namespace.ɵɵpipe(5, "async");
            i0__namespace.ɵɵtemplate(6, DirectionsInputsComponent_div_1_div_8_button_6_Template, 3, 3, "button", 19);
            i0__namespace.ɵɵpipe(7, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.directionsForm.moveStop"));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(5, 5, ctx_r6.stopsStore.count$) > 2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(7, 7, ctx_r6.stopsStore.count$) <= 2);
        }
    }
    function DirectionsInputsComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r19_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 2);
            i0__namespace.ɵɵlistener("touchenter", function DirectionsInputsComponent_div_1_Template_div_touchenter_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; var ctx_r18 = i0__namespace.ɵɵnextContext(); return ctx_r18.onStopEnter(stop_r1); })("touchleave", function DirectionsInputsComponent_div_1_Template_div_touchleave_0_listener() { i0__namespace.ɵɵrestoreView(_r19_1); var ctx_r20 = i0__namespace.ɵɵnextContext(); return ctx_r20.onStopLeave(); })("mouseover", function DirectionsInputsComponent_div_1_Template_div_mouseover_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; var ctx_r21 = i0__namespace.ɵɵnextContext(); return ctx_r21.onStopEnter(stop_r1); })("mouseleave", function DirectionsInputsComponent_div_1_Template_div_mouseleave_0_listener() { i0__namespace.ɵɵrestoreView(_r19_1); var ctx_r22 = i0__namespace.ɵɵnextContext(); return ctx_r22.onStopLeave(); })("cdkDragStarted", function DirectionsInputsComponent_div_1_Template_div_cdkDragStarted_0_listener() { i0__namespace.ɵɵrestoreView(_r19_1); var ctx_r23 = i0__namespace.ɵɵnextContext(); return ctx_r23.stopIsDragged = true; })("cdkDragEnded", function DirectionsInputsComponent_div_1_Template_div_cdkDragEnded_0_listener() { i0__namespace.ɵɵrestoreView(_r19_1); var ctx_r24 = i0__namespace.ɵɵnextContext(); return ctx_r24.stopIsDragged = false; });
            i0__namespace.ɵɵelementStart(1, "div", 3);
            i0__namespace.ɵɵelementStart(2, "mat-form-field");
            i0__namespace.ɵɵelementStart(3, "input", 4);
            i0__namespace.ɵɵlistener("focus", function DirectionsInputsComponent_div_1_Template_input_focus_3_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; var ctx_r25 = i0__namespace.ɵɵnextContext(); return ctx_r25.onInputFocus(stop_r1); })("ngModelChange", function DirectionsInputsComponent_div_1_Template_input_ngModelChange_3_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; return stop_r1.text = $event; })("keyup", function DirectionsInputsComponent_div_1_Template_input_keyup_3_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; var ctx_r27 = i0__namespace.ɵɵnextContext(); return ctx_r27.setStopText($event, stop_r1); })("keydown.enter", function DirectionsInputsComponent_div_1_Template_input_keydown_enter_3_listener($event) { return $event.preventDefault(); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(4, DirectionsInputsComponent_div_1_button_4_Template, 3, 3, "button", 5);
            i0__namespace.ɵɵelementStart(5, "mat-autocomplete", 6, 7);
            i0__namespace.ɵɵlistener("optionSelected", function DirectionsInputsComponent_div_1_Template_mat_autocomplete_optionSelected_5_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r19_1); var stop_r1 = restoredCtx.$implicit; var ctx_r29 = i0__namespace.ɵɵnextContext(); return ctx_r29.chooseProposal($event, stop_r1); });
            i0__namespace.ɵɵtemplate(7, DirectionsInputsComponent_div_1_mat_optgroup_7_Template, 2, 3, "mat-optgroup", 8);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(8, DirectionsInputsComponent_div_1_div_8_Template, 8, 9, "div", 9);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var stop_r1 = ctx.$implicit;
            var _r4 = i0__namespace.ɵɵreference(6);
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngClass", ctx_r0.getNgClass(stop_r1));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵpropertyInterpolate("id", stop_r1.id);
            i0__namespace.ɵɵproperty("placeholder", ctx_r0.getPlaceholder(stop_r1))("matTooltip", stop_r1.text)("ngModel", stop_r1.text)("matAutocomplete", _r4);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", (stop_r1.text || stop_r1.coordinates) && ctx_r0.stopWithHover && stop_r1.id === ctx_r0.stopWithHover.id);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("displayWith", ctx_r0.getOptionText);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", stop_r1.searchProposals);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r0.stopIsDragged && ctx_r0.stopWithHover && stop_r1.id === ctx_r0.stopWithHover.id);
        }
    }
    var DirectionsInputsComponent = /** @class */ (function () {
        function DirectionsInputsComponent(languageService) {
            this.languageService = languageService;
            this.invalidKeys = ['Control', 'Shift', 'Alt'];
            this.onMapClickEventKeys = [];
            this.stopIsDragged = false;
            this.coordRoundedDecimals = 6;
            this.debounce = 200;
            this.length = 2;
            this.stopInputHasFocus = new i0.EventEmitter(false);
        }
        DirectionsInputsComponent.prototype.ngOnDestroy = function () {
            this.unlistenMapSingleClick();
        };
        DirectionsInputsComponent.prototype.onStopEnter = function (stop) {
            this.stopWithHover = stop;
        };
        DirectionsInputsComponent.prototype.onStopLeave = function () {
            this.stopWithHover = undefined;
        };
        DirectionsInputsComponent.prototype.getOptionText = function (option) {
            if (option instanceof Object) {
                return (option === null || option === void 0 ? void 0 : option.meta) ? option.meta.title : '';
            }
            return option;
        };
        DirectionsInputsComponent.prototype.chooseProposal = function (event, stop) {
            var result = event.option.value;
            if (result) {
                var geomCoord = void 0;
                var geom = result.geometry;
                if (geom.type === 'Point') {
                    geomCoord = geom.coordinates;
                }
                else {
                    var point = pointOnFeature__default["default"](result.geometry);
                    geomCoord = [
                        point.geometry.coordinates[0],
                        point.geometry.coordinates[1]
                    ];
                }
                if (geomCoord) {
                    stop.coordinates = geomCoord;
                    stop.text = result.meta.title;
                    this.stopsStore.update(stop);
                }
            }
        };
        DirectionsInputsComponent.prototype.setStopText = function (event, stop) {
            this.unlistenMapSingleClick();
            var term = event.target.value;
            if (term.length === 0) {
                this.clearStop(stop);
            }
            else if (this.validateTerm(term)) {
                stop.text = term;
                this.stopsStore.update(stop);
            }
        };
        DirectionsInputsComponent.prototype.validateTerm = function (term) {
            if (this.keyIsValid(term) &&
                (term.length >= this.length || term.length === 0)) {
                return true;
            }
            return false;
        };
        DirectionsInputsComponent.prototype.keyIsValid = function (key) {
            return this.invalidKeys.find(function (value) { return value === key; }) === undefined;
        };
        DirectionsInputsComponent.prototype.getNgClass = function (stop) {
            if (!this.stopWithHover) {
                return 'igo-input-container';
            }
            else if (stop.id === this.stopWithHover.id) {
                return 'igo-input-container reduce';
            }
            else {
                return 'igo-input-container';
            }
        };
        DirectionsInputsComponent.prototype.getPlaceholder = function (stop) {
            var extra = '';
            if (stop.relativePosition) {
                if (stop.relativePosition === exports.DirectionRelativePositionType.Intermediate) {
                    extra = ' #' + stop.position;
                }
                return this.languageService.translate.instant('igo.geo.directionsForm.' + stop.relativePosition) + extra;
            }
            else {
                return '';
            }
        };
        DirectionsInputsComponent.prototype.removeStop = function (stop) {
            removeStopFromStore(this.stopsStore, stop);
        };
        DirectionsInputsComponent.prototype.clearStop = function (stop) {
            this.stopsStore.update({ id: stop.id, relativePosition: stop.relativePosition, position: stop.position });
        };
        DirectionsInputsComponent.prototype.drop = function (event) {
            this.moveStops(event.previousIndex, event.currentIndex);
        };
        DirectionsInputsComponent.prototype.moveStops = function (fromIndex, toIndex) {
            if (fromIndex !== toIndex) {
                var stops_1 = __spreadArray([], __read(this.stopsStore.view.all()));
                i2$2.moveItemInArray(stops_1, fromIndex, toIndex);
                stops_1.map(function (stop, i) {
                    stop.relativePosition = computeRelativePosition(i, stops_1.length);
                    stop.position = i;
                });
                this.stopsStore.updateMany(stops_1);
                updateStoreSorting(this.stopsStore);
            }
        };
        DirectionsInputsComponent.prototype.onInputFocus = function (stop) {
            var _a;
            if (!stop.text || ((_a = stop.text) === null || _a === void 0 ? void 0 : _a.length) === 0) {
                this.unlistenMapSingleClick();
                this.stopInputHasFocus.emit(true);
                this.listenMapSingleClick(stop);
            }
        };
        DirectionsInputsComponent.prototype.listenMapSingleClick = function (stop) {
            var _this = this;
            var key = this.stopsFeatureStore.layer.map.ol.once('singleclick', function (event) {
                var clickCoordinates = olproj__namespace.transform(event.coordinate, _this.stopsFeatureStore.layer.map.projection, _this.projection);
                var roundedCoord = roundCoordTo(clickCoordinates, _this.coordRoundedDecimals);
                stop.text = roundedCoord.join(',');
                stop.coordinates = roundedCoord;
                _this.stopsStore.update(stop);
                setTimeout(function () {
                    _this.stopInputHasFocus.emit(false);
                }, 500);
            });
            this.onMapClickEventKeys.push(key);
        };
        DirectionsInputsComponent.prototype.unlistenMapSingleClick = function () {
            this.onMapClickEventKeys.map(function (key) {
                olObservable__namespace.unByKey(key);
            });
            this.onMapClickEventKeys = [];
        };
        return DirectionsInputsComponent;
    }());
    DirectionsInputsComponent.ɵfac = function DirectionsInputsComponent_Factory(t) { return new (t || DirectionsInputsComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService)); };
    DirectionsInputsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DirectionsInputsComponent, selectors: [["igo-directions-inputs"]], inputs: { stopsStore: "stopsStore", stopsFeatureStore: "stopsFeatureStore", projection: "projection", coordRoundedDecimals: "coordRoundedDecimals", debounce: "debounce", length: "length" }, outputs: { stopInputHasFocus: "stopInputHasFocus" }, decls: 3, vars: 3, consts: [["cdkDropList", "", 1, "stops-list", 3, "cdkDropListDropped"], ["touchleave", "", "cdkDragLockAxis", "y", "class", "stop-box mat-typography", "cdkDrag", "", 3, "touchenter", "touchleave", "mouseover", "mouseleave", "cdkDragStarted", "cdkDragEnded", 4, "ngFor", "ngForOf"], ["touchleave", "", "cdkDragLockAxis", "y", "cdkDrag", "", 1, "stop-box", "mat-typography", 3, "touchenter", "touchleave", "mouseover", "mouseleave", "cdkDragStarted", "cdkDragEnded"], [3, "ngClass"], ["type", "text", "matTooltipShowDelay", "500", "aria-label", "Number", "matInput", "", 3, "id", "placeholder", "matTooltip", "ngModel", "matAutocomplete", "focus", "ngModelChange", "keyup", "keydown.enter"], ["mat-button", "", "matTooltipShowDelay", "500", "matSuffix", "", "mat-icon-button", "", "color", "warn", "aria-label", "Clear", 3, "matTooltip", "click", 4, "ngIf"], [3, "displayWith", "optionSelected"], ["auto", "matAutocomplete"], [3, "label", "disabled", 4, "ngFor", "ngForOf"], ["class", "igo-form-button-group", 4, "ngIf"], ["mat-button", "", "matTooltipShowDelay", "500", "matSuffix", "", "mat-icon-button", "", "color", "warn", "aria-label", "Clear", 3, "matTooltip", "click"], ["svgIcon", "close"], [3, "label", "disabled"], ["matTooltipShowDelay", "500", 3, "value", "matTooltip", 4, "ngFor", "ngForOf"], ["matTooltipShowDelay", "500", 3, "value", "matTooltip"], [1, "igo-form-button-group"], ["cdkDragHandle", "", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", 1, "swipe-vertical", 3, "matTooltip"], ["svgIcon", "gesture-swipe-vertical"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click", 4, "ngIf"], ["disabled", "true", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click"], ["svgIcon", "delete"], ["disabled", "true", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip"], ["svgIcon", "blank"]], template: function DirectionsInputsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵlistener("cdkDropListDropped", function DirectionsInputsComponent_Template_div_cdkDropListDropped_0_listener($event) { return ctx.drop($event); });
                i0__namespace.ɵɵtemplate(1, DirectionsInputsComponent_div_1_Template, 9, 10, "div", 1);
                i0__namespace.ɵɵpipe(2, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(2, 1, ctx.stopsStore.view.all$()));
            }
        }, directives: [i2__namespace$2.CdkDropList, i1__namespace$1.NgForOf, i2__namespace$2.CdkDrag, i1__namespace$1.NgClass, i12__namespace.MatFormField, i5__namespace$1.MatInput, i16__namespace.DefaultValueAccessor, i6__namespace$1.MatAutocompleteTrigger, i3__namespace.MatTooltip, i16__namespace.NgControlStatus, i16__namespace.NgModel, i1__namespace$1.NgIf, i6__namespace$1.MatAutocomplete, i2__namespace.MatButton, i12__namespace.MatSuffix, i4__namespace.MatIcon, i9__namespace.MatOptgroup, i9__namespace.MatOption, i2__namespace$2.CdkDragHandle], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: [".igo-input-container[_ngcontent-%COMP%]{width:100%}.igo-input-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.igo-input-container.reduce[_ngcontent-%COMP%]{width:70%}.igo-input-container.reduce[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.stops-list[_ngcontent-%COMP%]{max-width:100%;min-height:60px;display:block;background:white;border-radius:4px;overflow:hidden;padding:20px 10px}.swipe-vertical[_ngcontent-%COMP%]{cursor:move}.stop-box[_ngcontent-%COMP%]{height:60px;padding:20px 10px;color:#000000de;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;background:white}.cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder[_ngcontent-%COMP%]{opacity:0}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.stops-list.cdk-drop-list-dragging[_ngcontent-%COMP%]   .stop-box[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DirectionsInputsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-directions-inputs',
                        templateUrl: './directions-inputs.component.html',
                        styleUrls: ['./directions-inputs.component.scss']
                    }]
            }], function () { return [{ type: i2__namespace$1.LanguageService }]; }, { stopsStore: [{
                    type: i0.Input
                }], stopsFeatureStore: [{
                    type: i0.Input
                }], projection: [{
                    type: i0.Input
                }], coordRoundedDecimals: [{
                    type: i0.Input
                }], debounce: [{
                    type: i0.Input
                }], length: [{
                    type: i0.Input
                }], stopInputHasFocus: [{
                    type: i0.Output
                }] });
    })();

    var DirectionsService = /** @class */ (function () {
        function DirectionsService(directionsSourceService) {
            this.directionsSourceService = directionsSourceService;
        }
        DirectionsService.prototype.route = function (coordinates, directionsOptions) {
            var _this = this;
            if (directionsOptions === void 0) { directionsOptions = {}; }
            if (coordinates.length === 0) {
                return;
            }
            return this.directionsSourceService.sources
                .filter(function (source) { return source.enabled; })
                .map(function (source) { return _this.routeSource(source, coordinates, directionsOptions); });
        };
        DirectionsService.prototype.routeSource = function (source, coordinates, directionsOptions) {
            if (directionsOptions === void 0) { directionsOptions = {}; }
            var request = source.route(coordinates, directionsOptions);
            return request;
        };
        return DirectionsService;
    }());
    DirectionsService.ɵfac = function DirectionsService_Factory(t) { return new (t || DirectionsService)(i0__namespace.ɵɵinject(DirectionsSourceService)); };
    DirectionsService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: DirectionsService, factory: DirectionsService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DirectionsService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: DirectionsSourceService }]; }, null);
    })();

    /**
     * Function that checks whether a search source implements TextSearch
     * @param source Search source
     * @returns True if the search source implements TextSearch
     */
    function sourceCanSearch(source) {
        return source.search !== undefined;
    }
    /**
     * Function that checks whether a search source implements ReverseSearch
     * @param source Search source
     * @returns True if the search source implements ReverseSearch
     */
    function sourceCanReverseSearch(source) {
        return source.reverseSearch !== undefined;
    }
    /**
     * Function that checks whether a search source implements ReverseSearch AND is shown in the pointer summary
     * @param source Search source
     * @returns True if the search source implements ReverseSearch AND is shown in the pointer summary
     */
    function sourceCanReverseSearchAsSummary(source) {
        return source.reverseSearch !== undefined && source.showInPointerSummary === true;
    }
    /**
     * Return a search result out of an Feature. This is used to adapt
     * the IGO query module to the new Feature/SearchResult interfaces
     * @param feature feature
     * @param source Search source
     * @returns SearchResult
     */
    function featureToSearchResult(feature, source) {
        feature.sourceId = source.getId();
        return {
            source: source,
            data: feature,
            meta: {
                dataType: FEATURE,
                id: feature.meta.id,
                title: feature.meta.title,
                icon: feature.meta.icon || 'map-marker'
            }
        };
    }
    function findDiff(str1, str2) {
        var diff = '';
        str2.split('').forEach(function (val, i) {
            if (val !== str1.charAt(i)) {
                diff += val;
            }
        });
        return diff;
    }
    /**
     * Return a score calculation based on "from" term with the "to" term,
     * where the perfect match is 100 and a total difference is 0 or under.
     * @param from string
     * @param to string
     * @param caseSensitive boolean
     * @returns number
     */
    function computeTermSimilarity(from, to, caseSensitive) {
        if (caseSensitive === void 0) { caseSensitive = false; }
        if (!from || !to) {
            return 0;
        }
        var termFrom = caseSensitive ? from : from.toLowerCase();
        var termTo = caseSensitive ? to : to.toLowerCase();
        var fromToDiff = findDiff(termFrom, termTo);
        var toFromDiff = findDiff(termTo, termFrom);
        var totalDiff = fromToDiff + toFromDiff;
        var delta = 0;
        if (totalDiff.length) {
            delta = totalDiff.length / termFrom.length * 100;
        }
        return 100 - Math.floor(delta);
    }

    /**
     * Service where all available search sources are registered.
     */
    var SearchSourceService = /** @class */ (function () {
        function SearchSourceService(sources) {
            this.sources = sources;
        }
        /**
         * Return available search sources
         * @returns Search sources
         */
        SearchSourceService.prototype.getSources = function () {
            return this.sources;
        };
        /**
         * Return enabled search sources
         * @returns Search sources
         */
        SearchSourceService.prototype.getEnabledSources = function () {
            return this.getSources().filter(function (source) { return source.enabled === true; });
        };
        /**
         * Enable search sources of given type
         * @param type Search type
         * @todo It would be better to track the enabled search sources
         *  without updating their 'enabled' property.
         */
        SearchSourceService.prototype.enableSourcesByType = function (type) {
            this.getSources().forEach(function (source) {
                if (source.constructor.type === type) {
                    source.enabled = true;
                }
                else {
                    source.enabled = false;
                }
            });
        };
        /**
         * Set Param from the selected settings
         * @param source search-source
         * @param setting settings
         */
        SearchSourceService.prototype.setParamFromSetting = function (source, setting) {
            source.setParamFromSetting(setting);
        };
        return SearchSourceService;
    }());

    /**
     * This service perform researches in all the search sources enabled.
     * It returns Research objects who's 'request' property needs to be
     * subscribed to in order to trigger the research. This services has
     * keeps internal state of the researches it performed
     * and the results they yielded.
     */
    var SearchService = /** @class */ (function () {
        function SearchService(searchSourceService, mapService) {
            this.searchSourceService = searchSourceService;
            this.mapService = mapService;
        }
        /**
         * Perform a research by text
         * @param term Any text
         * @returns Researches
         */
        SearchService.prototype.search = function (term, options) {
            if (options === void 0) { options = {}; }
            var _a, _b;
            if (!this.termIsValid(term)) {
                return [];
            }
            var proj = ((_a = this.mapService.getMap()) === null || _a === void 0 ? void 0 : _a.projection) || 'EPSG:3857';
            var response = stringToLonLat(term, proj, {
                forceNA: options.forceNA
            });
            if (response.lonLat) {
                return this.reverseSearch(response.lonLat, { distance: response.radius, conf: response.conf });
            }
            else if (response.message) {
                console.log(response.message);
            }
            options.extent = (_b = this.mapService
                .getMap()) === null || _b === void 0 ? void 0 : _b.viewController.getExtent('EPSG:4326');
            var sources;
            if (options.getEnabledOnly || options.getEnabledOnly === undefined) {
                sources = this.searchSourceService.getEnabledSources();
            }
            else {
                sources = this.searchSourceService.getSources();
            }
            if (options.sourceId) {
                sources = sources.filter(function (source) { return source.getId() === options.sourceId; });
            }
            else if (options.searchType) {
                sources = sources.filter(function (source) { return source.getType() === options.searchType; });
            }
            sources = sources.filter(sourceCanSearch);
            return this.searchSources(sources, term, options);
        };
        /**
         * Perform a research by lon/lat
         * @param lonLat Any lon/lat coordinates
         * @returns Researches
         */
        SearchService.prototype.reverseSearch = function (lonLat, options, asPointerSummary) {
            if (asPointerSummary === void 0) { asPointerSummary = false; }
            var reverseSourceFonction = asPointerSummary
                ? sourceCanReverseSearchAsSummary
                : sourceCanReverseSearch;
            var sources = this.searchSourceService
                .getEnabledSources()
                .filter(reverseSourceFonction);
            return this.reverseSearchSources(sources, lonLat, options || {});
        };
        /**
         * Create a text research out of all given search sources
         * @param sources Search sources that implement TextSearch
         * @param term Search term
         * @returns Observable of Researches
         */
        SearchService.prototype.searchSources = function (sources, term, options) {
            return sources.map(function (source) {
                return {
                    request: source.search(term, options),
                    reverse: false,
                    source: source
                };
            });
        };
        /**
         * Create a reverse research out of all given search sources
         * @param sources Search sources that implement ReverseSearch
         * @param lonLat Any lon/lat coordinates
         * @returns Observable of Researches
         */
        SearchService.prototype.reverseSearchSources = function (sources, lonLat, options) {
            return sources.map(function (source) {
                return {
                    request: source.reverseSearch(lonLat, options),
                    reverse: true,
                    source: source
                };
            });
        };
        /**
         * Validate that a search term is valid
         * @param term Search term
         * @returns True if the search term is valid
         */
        SearchService.prototype.termIsValid = function (term) {
            return typeof term === 'string' && term !== '';
        };
        return SearchService;
    }());
    SearchService.ɵfac = function SearchService_Factory(t) { return new (t || SearchService)(i0__namespace.ɵɵinject(SearchSourceService), i0__namespace.ɵɵinject(MapService)); };
    SearchService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: SearchService, factory: SearchService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: SearchSourceService }, { type: MapService }]; }, null);
    })();

    function DirectionsButtonsComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 5);
            i0__namespace.ɵɵlistener("click", function DirectionsButtonsComponent_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.resetStops(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 6);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.resetDirectionsBtn"));
        }
    }
    function DirectionsButtonsComponent_button_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function DirectionsButtonsComponent_button_7_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.zoomRoute(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 7);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.zoomRoute"));
        }
    }
    function DirectionsButtonsComponent_button_9_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function DirectionsButtonsComponent_button_9_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.copyDirectionsToClipboard(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.copy"));
        }
    }
    function DirectionsButtonsComponent_button_11_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("click", function DirectionsButtonsComponent_button_11_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.copyLinkToClipboard(); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵelement(2, "mat-icon", 9);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 1, "igo.geo.directionsForm.link"));
        }
    }
    var DirectionsButtonsComponent = /** @class */ (function () {
        function DirectionsButtonsComponent(languageService, messageService, route) {
            this.languageService = languageService;
            this.messageService = messageService;
            this.route = route;
            this.zoomToActiveRoute$ = new rxjs.Subject();
        }
        Object.defineProperty(DirectionsButtonsComponent.prototype, "activeRoute", {
            get: function () {
                return this.routesFeatureStore.all().find(function (route) { return route.properties.active; });
            },
            enumerable: false,
            configurable: true
        });
        DirectionsButtonsComponent.prototype.resetStops = function () {
            this.stopsStore.clearStops();
        };
        // stop are always added before the last stop.
        DirectionsButtonsComponent.prototype.addStop = function () {
            addStopToStore(this.stopsStore);
        };
        DirectionsButtonsComponent.prototype.copyLinkToClipboard = function () {
            var successful = utils.Clipboard.copy(this.getUrl());
            if (successful) {
                var translate = this.languageService.translate;
                var title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');
                var msg = translate.instant('igo.geo.directionsForm.dialog.copyMsgLink');
                this.messageService.success(msg, title);
            }
        };
        DirectionsButtonsComponent.prototype.zoomRoute = function () {
            this.zoomToActiveRoute$.next();
        };
        DirectionsButtonsComponent.prototype.copyDirectionsToClipboard = function () {
            var directionsBody = this.directionsToText();
            var successful = utils.Clipboard.copy(directionsBody);
            if (successful) {
                var translate = this.languageService.translate;
                var title = translate.instant('igo.geo.directionsForm.dialog.copyTitle');
                var msg = translate.instant('igo.geo.directionsForm.dialog.copyMsg');
                this.messageService.success(msg, title);
            }
        };
        DirectionsButtonsComponent.prototype.directionsToText = function () {
            var _this = this;
            var indent = '\t';
            var activeRouteDirective = this.languageService.translate.instant('igo.geo.directionsForm.instructions') + ':\n';
            var wayPointList = '';
            var summary = this.languageService.translate.instant('igo.geo.directionsForm.summary') +
                ': \n' +
                indent +
                this.activeRoute.properties.direction.title +
                '\n' +
                indent +
                formatDistance(this.activeRoute.properties.direction.distance) +
                '\n' +
                indent +
                formatDuration(this.activeRoute.properties.direction.duration) +
                '\n\n' +
                this.languageService.translate.instant('igo.geo.directionsForm.stopsList') +
                ':\n';
            var url = this.languageService.translate.instant('igo.geo.directionsForm.link') +
                ':\n' +
                indent +
                this.getUrl();
            var wayPointsCnt = 1;
            this.stopsStore.view.all().forEach(function (stop) {
                var coord = '';
                var stopText = '';
                if (stop.text !== roundCoordTo(stop.coordinates).join(',')) {
                    stopText = stop.text;
                    coord = " ( " + roundCoordTo(stop.coordinates).join(',') + " )";
                }
                else {
                    stopText = roundCoordTo(stop.coordinates).join(',');
                }
                wayPointList =
                    wayPointList +
                        indent +
                        wayPointsCnt.toLocaleString() +
                        '. ' +
                        stopText +
                        coord +
                        '\n';
                wayPointsCnt++;
            });
            var localCnt = 0;
            this.activeRoute.properties.direction.steps.forEach(function (step) {
                var instruction = _this.formatStep(step, localCnt).instruction;
                var distance = formatDistance(step.distance) === undefined
                    ? ''
                    : ' (' + formatDistance(step.distance) + ')';
                activeRouteDirective =
                    activeRouteDirective +
                        indent +
                        (localCnt + 1).toLocaleString() +
                        '. ' +
                        instruction +
                        distance +
                        '\n';
                localCnt++;
            });
            var directionsBody = summary + wayPointList + '\n' + url + '\n\n' + activeRouteDirective;
            return directionsBody;
        };
        DirectionsButtonsComponent.prototype.formatStep = function (step, cnt) {
            return formatInstruction(step.maneuver.type, step.maneuver.modifier, step.name, step.maneuver.bearing_after, cnt, step.maneuver.exit, this.languageService, cnt === this.activeRoute.properties.direction.steps.length - 1);
        };
        DirectionsButtonsComponent.prototype.getUrl = function () {
            if (!this.route) {
                return;
            }
            var context = '';
            if (this.contextUri) {
                context = "context=" + this.contextUri + "&";
            }
            var pos = this.routesFeatureStore.all()
                .map(function (direction) { return direction.properties.id; }).indexOf(this.activeRoute.properties.id);
            var routingOptions = '';
            if (pos !== 0) {
                var routingOptionsKey = this.route.options.directionsOptionsKey;
                routingOptions = "&" + routingOptionsKey + "=result:" + pos;
            }
            var directionsKey = this.route.options.directionsCoordKey;
            var stopsCoordinates = this.stopsStore.view.all().map(function (stop) { return roundCoordTo(stop.coordinates, 6); });
            var directionsUrl = '';
            if (stopsCoordinates.length >= 2) {
                directionsUrl = directionsKey + "=" + stopsCoordinates.join(';');
                return "" + location.origin + location.pathname + "?" + context + "tool=directions&sidenav=1&" + directionsUrl + routingOptions;
            }
            return;
        };
        return DirectionsButtonsComponent;
    }());
    DirectionsButtonsComponent.ɵfac = function DirectionsButtonsComponent_Factory(t) { return new (t || DirectionsButtonsComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MessageService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.RouteService, 8)); };
    DirectionsButtonsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DirectionsButtonsComponent, selectors: [["igo-directions-buttons"]], inputs: { contextUri: "contextUri", zoomToActiveRoute$: "zoomToActiveRoute$", stopsStore: "stopsStore", routesFeatureStore: "routesFeatureStore" }, decls: 13, vars: 17, consts: [[1, "igo-form-button-group"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", 3, "matTooltip", "click"], ["svgIcon", "map-marker-plus"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "primary", 3, "matTooltip", "click", 4, "ngIf"], ["mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", "color", "warn", 3, "matTooltip", "click"], ["svgIcon", "file-restore"], ["svgIcon", "magnify-plus-outline"], ["svgIcon", "content-copy"], ["svgIcon", "link"]], template: function DirectionsButtonsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵlistener("click", function DirectionsButtonsComponent_Template_button_click_1_listener() { return ctx.addStop(); });
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(4, DirectionsButtonsComponent_button_4_Template, 3, 3, "button", 3);
                i0__namespace.ɵɵpipe(5, "async");
                i0__namespace.ɵɵpipe(6, "async");
                i0__namespace.ɵɵtemplate(7, DirectionsButtonsComponent_button_7_Template, 3, 3, "button", 4);
                i0__namespace.ɵɵpipe(8, "async");
                i0__namespace.ɵɵtemplate(9, DirectionsButtonsComponent_button_9_Template, 3, 3, "button", 4);
                i0__namespace.ɵɵpipe(10, "async");
                i0__namespace.ɵɵtemplate(11, DirectionsButtonsComponent_button_11_Template, 3, 3, "button", 4);
                i0__namespace.ɵɵpipe(12, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 5, "igo.geo.directionsForm.addStop"));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(5, 7, ctx.routesFeatureStore.count$) >= 1 || i0__namespace.ɵɵpipeBind1(6, 9, ctx.stopsStore.count$) >= 1);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(8, 11, ctx.routesFeatureStore.count$) >= 1);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(10, 13, ctx.routesFeatureStore.count$) >= 1);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(12, 15, ctx.routesFeatureStore.count$) >= 1);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i4__namespace.MatIcon, i1__namespace$1.NgIf], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [""] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DirectionsButtonsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-directions-buttons',
                        templateUrl: './directions-buttons.component.html',
                        styleUrls: ['./directions-buttons.component.scss']
                    }]
            }], function () {
            return [{ type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.RouteService, decorators: [{
                            type: i0.Optional
                        }] }];
        }, { contextUri: [{
                    type: i0.Input
                }], zoomToActiveRoute$: [{
                    type: i0.Input
                }], stopsStore: [{
                    type: i0.Input
                }], routesFeatureStore: [{
                    type: i0.Input
                }] });
    })();

    function DirectionsResultsComponent_div_0_mat_form_field_1_mat_option_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-option", 9);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var direction_r5 = ctx.$implicit;
            var cnt_r6 = ctx.index;
            var ctx_r4 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("value", direction_r5);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate3(" Option ", cnt_r6 + 1, " : ", ctx_r4.formatDistance(direction_r5.distance), " (", ctx_r4.formatDuration(direction_r5.duration), ") ");
        }
    }
    function DirectionsResultsComponent_div_0_mat_form_field_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r8_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-form-field");
            i0__namespace.ɵɵelementStart(1, "mat-select", 7);
            i0__namespace.ɵɵlistener("selectionChange", function DirectionsResultsComponent_div_0_mat_form_field_1_Template_mat_select_selectionChange_1_listener() { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r7 = i0__namespace.ɵɵnextContext(2); return ctx_r7.changeRoute(); })("ngModelChange", function DirectionsResultsComponent_div_0_mat_form_field_1_Template_mat_select_ngModelChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r8_1); var ctx_r9 = i0__namespace.ɵɵnextContext(2); return ctx_r9.activeDirection = $event; });
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵtemplate(3, DirectionsResultsComponent_div_0_mat_form_field_1_mat_option_3_Template, 2, 4, "mat-option", 8);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("placeholder", i0__namespace.ɵɵpipeBind1(2, 3, "igo.geo.directionsForm.drivingOptions"));
            i0__namespace.ɵɵproperty("ngModel", ctx_r1.activeDirection);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r1.directions);
        }
    }
    function DirectionsResultsComponent_div_0_mat_divider_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-divider");
        }
    }
    function DirectionsResultsComponent_div_0_mat_list_item_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-list-item", 10);
            i0__namespace.ɵɵlistener("mouseenter", function DirectionsResultsComponent_div_0_mat_list_item_8_Template_mat_list_item_mouseenter_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r13_1); var step_r10 = restoredCtx.$implicit; var ctx_r12 = i0__namespace.ɵɵnextContext(2); return ctx_r12.showSegment(step_r10); })("click", function DirectionsResultsComponent_div_0_mat_list_item_8_Template_mat_list_item_click_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r13_1); var step_r10 = restoredCtx.$implicit; var ctx_r14 = i0__namespace.ɵɵnextContext(2); return ctx_r14.showSegment(step_r10, true); });
            i0__namespace.ɵɵelement(1, "mat-icon", 11);
            i0__namespace.ɵɵelementStart(2, "h4", 12);
            i0__namespace.ɵɵtext(3);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "h4", 13);
            i0__namespace.ɵɵtext(5);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var step_r10 = ctx.$implicit;
            var cnt_r11 = ctx.index;
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r3.formatStep(step_r10, cnt_r11).image);
            i0__namespace.ɵɵproperty("ngClass", ctx_r3.formatStep(step_r10, cnt_r11).cssClass);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate2("", cnt_r11 + 1, ". ", ctx_r3.formatStep(step_r10, cnt_r11).instruction, "");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(ctx_r3.formatDistance(step_r10.distance));
        }
    }
    function DirectionsResultsComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r16_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1);
            i0__namespace.ɵɵtemplate(1, DirectionsResultsComponent_div_0_mat_form_field_1_Template, 4, 5, "mat-form-field", 2);
            i0__namespace.ɵɵtemplate(2, DirectionsResultsComponent_div_0_mat_divider_2_Template, 1, 0, "mat-divider", 2);
            i0__namespace.ɵɵelementStart(3, "mat-list", 3);
            i0__namespace.ɵɵlistener("mouseleave", function DirectionsResultsComponent_div_0_Template_mat_list_mouseleave_3_listener() { i0__namespace.ɵɵrestoreView(_r16_1); var ctx_r15 = i0__namespace.ɵɵnextContext(); return ctx_r15.onStepsListBlur(); });
            i0__namespace.ɵɵelementStart(4, "h2", 4);
            i0__namespace.ɵɵtext(5);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(6, "h2", 5);
            i0__namespace.ɵɵtext(7);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(8, DirectionsResultsComponent_div_0_mat_list_item_8_Template, 6, 5, "mat-list-item", 6);
            i0__namespace.ɵɵelement(9, "mat-divider");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.directions && ctx_r0.directions.length > 1);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.directions && ctx_r0.directions.length === 0);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.activeDirection.title);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate2("", ctx_r0.formatDistance(ctx_r0.activeDirection.distance), ", ", ctx_r0.formatDuration(ctx_r0.activeDirection.duration), "");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r0.activeDirection.steps);
        }
    }
    var DirectionsResultsComponent = /** @class */ (function () {
        function DirectionsResultsComponent(languageService, cdRef) {
            this.languageService = languageService;
            this.cdRef = cdRef;
        }
        DirectionsResultsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.entities$$ = this.routesFeatureStore.entities$
                .pipe(operators.debounceTime(200))
                .subscribe(function (entities) {
                var activeFeatureWithDirection = entities.find(function (entity) { return entity.properties.active; });
                _this.directions = entities.map(function (entity) { return entity.properties.direction; });
                if (activeFeatureWithDirection) {
                    _this.activeDirection = activeFeatureWithDirection.properties.direction;
                }
                else {
                    _this.activeDirection = undefined;
                }
                _this.cdRef.detectChanges();
            });
        };
        DirectionsResultsComponent.prototype.ngOnDestroy = function () {
            this.entities$$.unsubscribe();
        };
        DirectionsResultsComponent.prototype.changeRoute = function () {
            this.routesFeatureStore.entities$.value.map(function (entity) { return entity.properties.active = !entity.properties.active; });
            this.routesFeatureStore.layer.ol.getSource().getFeatures().map(function (feature) { return feature.set('active', !feature.get('active')); });
        };
        DirectionsResultsComponent.prototype.formatDistance = function (distance) {
            return formatDistance(distance);
        };
        DirectionsResultsComponent.prototype.formatDuration = function (duration) {
            return formatDuration(duration);
        };
        DirectionsResultsComponent.prototype.formatStep = function (step, cnt) {
            return formatInstruction(step.maneuver.type, step.maneuver.modifier, step.name, step.maneuver.bearing_after, cnt, step.maneuver.exit, this.languageService, cnt === this.activeDirection.steps.length - 1);
        };
        DirectionsResultsComponent.prototype.onStepsListBlur = function () {
            this.stepFeatureStore.clear();
        };
        DirectionsResultsComponent.prototype.showSegment = function (step, zoomToExtent) {
            if (zoomToExtent === void 0) { zoomToExtent = false; }
            this.showRouteSegmentGeometry(step, zoomToExtent);
        };
        DirectionsResultsComponent.prototype.showRouteSegmentGeometry = function (step, zoomToExtent) {
            if (zoomToExtent === void 0) { zoomToExtent = false; }
            var coordinates = step.geometry.coordinates;
            var vertexId = 'vertex';
            var geometry4326 = new olgeom__namespace.LineString(coordinates);
            var geometryMapProjection = geometry4326.transform('EPSG:4326', this.stepFeatureStore.layer.map.projection);
            var routeSegmentCoordinates = geometryMapProjection.getCoordinates();
            var lastPoint = routeSegmentCoordinates[0];
            var geometry = new olgeom__namespace.Point(lastPoint);
            var feature = new OlFeature__default["default"]({ geometry: geometry });
            var geojsonGeom = new OlGeoJSON__default["default"]().writeGeometryObject(geometry, {
                featureProjection: this.stepFeatureStore.layer.map.projection,
                dataProjection: this.stepFeatureStore.layer.map.projection
            });
            var previousVertex = this.stepFeatureStore.get(vertexId);
            var previousVertexRevision = previousVertex
                ? previousVertex.meta.revision
                : 0;
            var stepFeature = {
                type: FEATURE,
                geometry: geojsonGeom,
                projection: this.stepFeatureStore.layer.map.projection,
                properties: {
                    id: vertexId,
                    step: step,
                    type: exports.DirectionType.Vertex
                },
                meta: {
                    id: vertexId,
                    revision: previousVertexRevision + 1
                },
                ol: feature
            };
            this.stepFeatureStore.update(stepFeature);
            if (zoomToExtent) {
                this.stepFeatureStore.layer.map.viewController.zoomToExtent(feature.getGeometry().getExtent());
            }
        };
        return DirectionsResultsComponent;
    }());
    DirectionsResultsComponent.ɵfac = function DirectionsResultsComponent_Factory(t) { return new (t || DirectionsResultsComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    DirectionsResultsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DirectionsResultsComponent, selectors: [["igo-directions-results"]], inputs: { routesFeatureStore: "routesFeatureStore", stepFeatureStore: "stepFeatureStore" }, decls: 1, vars: 1, consts: [["class", "igo-input-container", 4, "ngIf"], [1, "igo-input-container"], [4, "ngIf"], [3, "mouseleave"], ["mat-header", "", 1, "igo-route-title", "mat-typography"], ["mat-subheader", ""], ["class", "igo-steps", "igoListItem", "", 3, "mouseenter", "click", 4, "ngFor", "ngForOf"], [3, "placeholder", "ngModel", "selectionChange", "ngModelChange"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["igoListItem", "", 1, "igo-steps", 3, "mouseenter", "click"], ["mat-list-icon", "", 3, "ngClass", "svgIcon"], ["mat-line", ""], ["mat-line", "", 1, "right"]], template: function DirectionsResultsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, DirectionsResultsComponent_div_0_Template, 10, 6, "div", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.directions && ctx.activeDirection);
            }
        }, directives: [i1__namespace$1.NgIf, i1__namespace$3.MatList, i1__namespace$3.MatListSubheaderCssMatStyler, i1__namespace$1.NgForOf, i10__namespace.MatDivider, i12__namespace.MatFormField, i13__namespace.MatSelect, i16__namespace.NgControlStatus, i16__namespace.NgModel, i9__namespace.MatOption, i1__namespace$3.MatListItem, i4__namespace.MatIcon, i1__namespace$3.MatListIconCssMatStyler, i1__namespace$1.NgClass, i9__namespace.MatLine], pipes: [i7__namespace.TranslatePipe], styles: [".igo-input-container[_ngcontent-%COMP%]{width:100%;padding:20px 10px}.igo-input-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:70%}.igo-route-title[_ngcontent-%COMP%]{font-weight:bold}.igo-steps[_ngcontent-%COMP%]{cursor:pointer}.mat-line[_ngcontent-%COMP%]{word-wrap:break-word!important;white-space:pre-wrap!important}.mat-line.right[_ngcontent-%COMP%]{text-align:right}.rotate-90[_ngcontent-%COMP%]{transform:rotate(90deg)}.rotate-45[_ngcontent-%COMP%]{transform:rotate(45deg)}.rotate-270[_ngcontent-%COMP%]{transform:rotate(270deg)}.rotate-250[_ngcontent-%COMP%]{transform:rotate(250deg)}.rotate-290[_ngcontent-%COMP%]{transform:rotate(290deg)}.icon-flipped[_ngcontent-%COMP%]{transform:scaleY(-1)}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DirectionsResultsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-directions-results',
                        templateUrl: './directions-results.component.html',
                        styleUrls: ['./directions-results.component.scss']
                    }]
            }], function () { return [{ type: i2__namespace$1.LanguageService }, { type: i0__namespace.ChangeDetectorRef }]; }, { routesFeatureStore: [{
                    type: i0.Input
                }], stepFeatureStore: [{
                    type: i0.Input
                }] });
    })();

    var DirectionsComponent = /** @class */ (function () {
        function DirectionsComponent(cdRef, languageService, directionsService, searchService, queryService) {
            this.cdRef = cdRef;
            this.languageService = languageService;
            this.directionsService = directionsService;
            this.searchService = searchService;
            this.queryService = queryService;
            this.projection = 'EPSG:4326';
            this.routesQueries$$ = [];
            this.focusOnStop = false;
            this.isTranslating = false;
            this.previousStops = [];
            this.searchs$$ = [];
            this.debounce = 200;
            this.length = 2;
            this.coordRoundedDecimals = 6;
            this.zoomToActiveRoute$ = new rxjs.Subject();
        }
        DirectionsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.queryService.queryEnabled = false;
            this.initEntityStores();
            setTimeout(function () {
                initStopsFeatureStore(_this.stopsFeatureStore, _this.languageService);
                initRoutesFeatureStore(_this.routesFeatureStore, _this.languageService);
                initStepFeatureStore(_this.stepFeatureStore);
                _this.initOlInteraction();
            }, 1);
        };
        DirectionsComponent.prototype.ngOnDestroy = function () {
            this.queryService.queryEnabled = true;
            this.storeEmpty$$.unsubscribe();
            this.storeChange$$.unsubscribe();
            this.routesQueries$$.map(function (u) { return u.unsubscribe(); });
            this.zoomRoute$$.unsubscribe();
            this.freezeStores();
        };
        DirectionsComponent.prototype.freezeStores = function () {
            this.stopsFeatureStore.layer.map.ol.removeInteraction(this.selectStopInteraction);
            this.stopsFeatureStore.layer.map.ol.removeInteraction(this.translateStop);
            this.routesFeatureStore.layer.map.ol.removeInteraction(this.selectedRoute);
            this.stopsFeatureStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);
            this.routesFeatureStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);
            this.stepFeatureStore.deactivateStrategyOfType(FeatureStoreLoadingStrategy);
        };
        DirectionsComponent.prototype.initEntityStores = function () {
            this.watcher = new i6.EntityStoreWatcher(this.stopsStore, this.cdRef);
            this.monitorEmptyEntityStore();
            this.monitorEntityStoreChange();
            this.monitorActiveRouteZoom();
        };
        DirectionsComponent.prototype.monitorActiveRouteZoom = function () {
            var _this = this;
            this.zoomRoute$$ = this.zoomToActiveRoute$.subscribe(function () {
                if (_this.routesFeatureStore.count >= 1) {
                    var activeRoute = _this.routesFeatureStore.all().find(function (route) { return route.properties.active; });
                    if (activeRoute) {
                        activeRoute.ol.getGeometry();
                        var routeExtent = activeRoute.ol.getGeometry().getExtent();
                        _this.routesFeatureStore.layer.map.viewController.zoomToExtent(routeExtent);
                    }
                }
            });
        };
        DirectionsComponent.prototype.initOlInteraction = function () {
            var _this = this;
            this.selectStopInteraction = new olInteraction__namespace.Select({
                layers: [this.stopsFeatureStore.layer.ol],
                hitTolerance: 7,
                condition: function (event) {
                    return event.type === 'pointermove' && !event.dragging;
                }
            });
            this.translateStop = new olInteraction__namespace.Translate({
                features: this.selectStopInteraction.getFeatures()
            });
            this.translateStop.on('translating', function (evt) {
                _this.isTranslating = true;
                _this.executeStopTranslation(evt.features);
            });
            this.translateStop.on('translateend', function (evt) {
                _this.isTranslating = false;
                _this.executeStopTranslation(evt.features);
            });
            this.selectedRoute = new olInteraction__namespace.Select({
                layers: [this.routesFeatureStore.layer.ol],
                condition: olCondition__namespace.click,
                hitTolerance: 7,
                filter: function (feature) {
                    return feature.get('type') === exports.DirectionType.Route &&
                        feature.get('active') &&
                        !_this.isTranslating;
                }
            });
            this.selectedRoute.on('select', function (evt) {
                if (_this.focusOnStop === false) {
                    var selectCoordinates = roundCoordTo(olproj__namespace.transform(evt.mapBrowserEvent.coordinate, _this.routesFeatureStore.layer.map.projection, _this.projection), _this.coordRoundedDecimals);
                    var addedStop = addStopToStore(_this.stopsStore);
                    addedStop.text = selectCoordinates.join(',');
                    addedStop.coordinates = [selectCoordinates[0], selectCoordinates[1]];
                }
            });
            this.stopsFeatureStore.layer.map.ol.addInteraction(this.selectStopInteraction);
            this.stopsFeatureStore.layer.map.ol.addInteraction(this.translateStop);
            this.routesFeatureStore.layer.map.ol.addInteraction(this.selectedRoute);
        };
        DirectionsComponent.prototype.onStopInputHasFocusChange = function (stopInputHasFocus) {
            stopInputHasFocus ?
                this.routesFeatureStore.layer.map.ol.removeInteraction(this.selectedRoute) :
                this.routesFeatureStore.layer.map.ol.addInteraction(this.selectedRoute);
        };
        DirectionsComponent.prototype.executeStopTranslation = function (features) {
            if (features.getLength() === 0) {
                return;
            }
            var firstFeature = features.getArray()[0];
            var translatedStopId = firstFeature.getId();
            var translationCoordinates = olproj__namespace.transform(firstFeature.getGeometry().getCoordinates(), this.stopsFeatureStore.layer.map.projection, this.projection);
            var translatedStop = this.stopsStore.get(translatedStopId);
            var roundedCoord = roundCoordTo(translationCoordinates, this.coordRoundedDecimals);
            translatedStop.coordinates = roundedCoord;
            translatedStop.text = roundedCoord.join(',');
            this.stopsStore.update(translatedStop);
        };
        DirectionsComponent.prototype.monitorEmptyEntityStore = function () {
            var _this = this;
            // Watch if the store is empty to reset it
            this.storeEmpty$$ = this.stopsStore.count$
                .pipe(operators.distinctUntilChanged()).subscribe(function (count) {
                if (count < 2) {
                    addStopToStore(_this.stopsStore);
                    if (_this.stopsStore.count === 2) {
                        _this.stopsStore.storeInitialized$.next(true);
                        return;
                    }
                    _this.stopsStore.storeInitialized$.next(false);
                }
                _this.routesQueries$$.map(function (u) { return u.unsubscribe(); });
            });
        };
        DirectionsComponent.prototype.monitorEntityStoreChange = function () {
            var _this = this;
            this.storeChange$$ = this.stopsStore.entities$
                .pipe(operators.debounceTime(this.debounce))
                .subscribe(function (stops) {
                _this.handleStopDiff(stops);
                updateStoreSorting(_this.stopsStore);
                _this.handleStopsFeature();
                _this.getRoutes(_this.isTranslating);
            });
        };
        DirectionsComponent.prototype.cancelSearch = function () {
            this.searchs$$.map(function (s) { return s.unsubscribe(); });
        };
        DirectionsComponent.prototype.handleStopDiff = function (stops) {
            var _this = this;
            var simplifiedStops = stops.map(function (stop) {
                return utils.ObjectUtils.removeUndefined(Object.assign({ id: stop.id, text: stop.text, coordinates: stop.coordinates }));
            });
            var diff = utils.ChangeUtils.findChanges(this.previousStops, simplifiedStops, ['coordinates']);
            var stopIdToProcess = diff.added.concat(diff.modified);
            if (stopIdToProcess) {
                stopIdToProcess.map(function (change) {
                    var changedStop = change.newValue;
                    if (changedStop) {
                        var stop_1 = _this.stopsStore.get(changedStop.id);
                        var term = stop_1.text;
                        if (!term || term.length === 0) {
                            return;
                        }
                        var response = stringToLonLat(term, _this.stopsFeatureStore.layer.map.projection);
                        var researches = void 0;
                        var isCoord_1 = false;
                        if (response.lonLat) {
                            isCoord_1 = true;
                        }
                        researches = _this.searchService.search(term, { searchType: 'Feature' });
                        _this.cancelSearch();
                        var requests$ = researches.map(function (res) { return res.request
                            .pipe(operators.map(function (results) { return results.filter(function (r) { return isCoord_1 ? r.data.geometry.type === 'Point' && r.data.geometry : r.data.geometry; }); })); });
                        _this.searchs$$ = requests$.map(function (request) {
                            return request.pipe(operators.map(function (results) { return results.filter(function (r) { return isCoord_1 ? r.data.geometry.type === 'Point' && r.data.geometry : r.data.geometry; }); }))
                                .subscribe(function (res) {
                                if (res.length > 0) {
                                    var source_1 = res[0].source;
                                    var meta = res[0].meta;
                                    var results = res.map(function (r) { return r.data; });
                                    if (!stop_1.searchProposals) {
                                        stop_1.searchProposals = [];
                                    }
                                    stop_1.searchProposals = stop_1.searchProposals.filter(function (sp) { return sp.type === (isCoord_1 ? exports.ProposalType.Coord : exports.ProposalType.Text); });
                                    var storedSource = stop_1.searchProposals.find(function (sp) { return sp.source === source_1; });
                                    if (storedSource) {
                                        storedSource.results = results;
                                    }
                                    else {
                                        stop_1.searchProposals.push({
                                            type: isCoord_1 ? exports.ProposalType.Coord : exports.ProposalType.Text,
                                            source: source_1,
                                            meta: meta,
                                            results: results
                                        });
                                    }
                                }
                                _this.cdRef.detectChanges();
                            });
                        });
                    }
                });
            }
            this.previousStops = simplifiedStops;
        };
        DirectionsComponent.prototype.handleStopsFeature = function () {
            var _this = this;
            var stops = this.stopsStore.all();
            var stopsWithCoordinates = stops.filter(function (stop) { return stop.coordinates; });
            stopsWithCoordinates.map(function (stop) { return _this.addStopOverlay(stop); });
            this.stopsFeatureStore.all().map(function (stopFeature) {
                if (!_this.stopsStore.get(stopFeature.properties.id)) {
                    _this.stopsFeatureStore.delete(stopFeature);
                }
            });
            var stopsWithoutCoordinates = stops.filter(function (stop) { return !stop.coordinates; });
            stopsWithoutCoordinates.map(function (stop) {
                var stopFeature = _this.stopsFeatureStore.get(stop.id);
                if (stopFeature) {
                    _this.stopsFeatureStore.delete(stopFeature);
                }
            });
        };
        DirectionsComponent.prototype.getRoutes = function (isOverview) {
            var _this = this;
            if (isOverview === void 0) { isOverview = false; }
            var stopsWithCoordinates = this.stopsStore.view
                .all()
                .filter(function (stop) { return stop.coordinates; });
            if (stopsWithCoordinates.length < 2) {
                this.routesFeatureStore.deleteMany(this.routesFeatureStore.all());
                return;
            }
            var roundedCoordinates = stopsWithCoordinates.map(function (stop) {
                var roundedCoord = roundCoordTo(stop.coordinates, _this.coordRoundedDecimals);
                return roundedCoord;
            });
            var overviewDirectionsOptions = {
                overview: true,
                steps: false,
                alternatives: false,
                continue_straight: false
            };
            this.routesQueries$$.map(function (u) { return u.unsubscribe(); });
            var routeResponse = this.directionsService.route(roundedCoordinates, isOverview ? overviewDirectionsOptions : undefined);
            if (routeResponse) {
                routeResponse.map(function (res) { return _this.routesQueries$$.push(res.subscribe(function (directions) {
                    _this.routesFeatureStore.deleteMany(_this.routesFeatureStore.all());
                    directions.map(function (direction) { return addDirectionToRoutesFeatureStore(_this.routesFeatureStore, direction, _this.projection, direction === directions[0] ? true : false); });
                })); });
            }
        };
        DirectionsComponent.prototype.addStopOverlay = function (stop) {
            addStopToStopsFeatureStore(stop, this.stopsStore, this.stopsFeatureStore, this.projection, this.languageService);
        };
        return DirectionsComponent;
    }());
    DirectionsComponent.ɵfac = function DirectionsComponent_Factory(t) { return new (t || DirectionsComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(DirectionsService), i0__namespace.ɵɵdirectiveInject(SearchService), i0__namespace.ɵɵdirectiveInject(QueryService)); };
    DirectionsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: DirectionsComponent, selectors: [["igo-directions"]], inputs: { contextUri: "contextUri", stopsStore: "stopsStore", stopsFeatureStore: "stopsFeatureStore", routesFeatureStore: "routesFeatureStore", stepFeatureStore: "stepFeatureStore", debounce: "debounce", length: "length", coordRoundedDecimals: "coordRoundedDecimals", zoomToActiveRoute$: "zoomToActiveRoute$" }, decls: 4, vars: 12, consts: [[3, "contextUri", "zoomToActiveRoute$", "routesFeatureStore", "stopsStore"], [3, "coordRoundedDecimals", "projection", "stopsFeatureStore", "stopsStore", "debounce", "length", "stopInputHasFocus"], [3, "stepFeatureStore", "routesFeatureStore"]], template: function DirectionsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelement(0, "igo-directions-buttons", 0);
                i0__namespace.ɵɵelementStart(1, "igo-directions-inputs", 1);
                i0__namespace.ɵɵlistener("stopInputHasFocus", function DirectionsComponent_Template_igo_directions_inputs_stopInputHasFocus_1_listener($event) { return ctx.onStopInputHasFocusChange($event); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelement(2, "br");
                i0__namespace.ɵɵelement(3, "igo-directions-results", 2);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("contextUri", ctx.contextUri)("zoomToActiveRoute$", ctx.zoomToActiveRoute$)("routesFeatureStore", ctx.routesFeatureStore)("stopsStore", ctx.stopsStore);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("coordRoundedDecimals", ctx.coordRoundedDecimals)("projection", ctx.projection)("stopsFeatureStore", ctx.stopsFeatureStore)("stopsStore", ctx.stopsStore)("debounce", ctx.debounce)("length", ctx.length);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("stepFeatureStore", ctx.stepFeatureStore)("routesFeatureStore", ctx.routesFeatureStore);
            }
        }, directives: [DirectionsButtonsComponent, DirectionsInputsComponent, DirectionsResultsComponent], styles: [""] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(DirectionsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-directions',
                        templateUrl: './directions.component.html',
                        styleUrls: ['./directions.component.scss']
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace$1.LanguageService }, { type: DirectionsService }, { type: SearchService }, { type: QueryService }]; }, { contextUri: [{
                    type: i0.Input
                }], stopsStore: [{
                    type: i0.Input
                }], stopsFeatureStore: [{
                    type: i0.Input
                }], routesFeatureStore: [{
                    type: i0.Input
                }], stepFeatureStore: [{
                    type: i0.Input
                }], debounce: [{
                    type: i0.Input
                }], length: [{
                    type: i0.Input
                }], coordRoundedDecimals: [{
                    type: i0.Input
                }], zoomToActiveRoute$: [{
                    type: i0.Input
                }] });
    })();

    var IgoDirectionsModule = /** @class */ (function () {
        function IgoDirectionsModule() {
        }
        IgoDirectionsModule.forRoot = function () {
            return {
                ngModule: IgoDirectionsModule
            };
        };
        return IgoDirectionsModule;
    }());
    IgoDirectionsModule.ɵfac = function IgoDirectionsModule_Factory(t) { return new (t || IgoDirectionsModule)(); };
    IgoDirectionsModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoDirectionsModule });
    IgoDirectionsModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [provideDirectionsSourceService()], imports: [[
                i1$1.CommonModule,
                i2$2.DragDropModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i1$3.MatListModule,
                i10.MatDividerModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i9.MatOptionModule,
                i13.MatSelectModule,
                i3.MatTooltipModule,
                i6$1.MatAutocompleteModule,
                i2$1.IgoLanguageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoDirectionsModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2$2.DragDropModule,
                            i16.FormsModule,
                            i16.ReactiveFormsModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i1$3.MatListModule,
                            i10.MatDividerModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i9.MatOptionModule,
                            i13.MatSelectModule,
                            i3.MatTooltipModule,
                            i6$1.MatAutocompleteModule,
                            i2$1.IgoLanguageModule
                        ],
                        exports: [
                            DirectionsComponent,
                            DirectionsInputsComponent,
                            DirectionsButtonsComponent,
                            DirectionsResultsComponent
                        ],
                        declarations: [
                            DirectionsComponent,
                            DirectionsInputsComponent,
                            DirectionsButtonsComponent,
                            DirectionsResultsComponent
                        ],
                        providers: [provideDirectionsSourceService()]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoDirectionsModule, { declarations: [DirectionsComponent,
                DirectionsInputsComponent,
                DirectionsButtonsComponent,
                DirectionsResultsComponent], imports: [i1$1.CommonModule,
                i2$2.DragDropModule,
                i16.FormsModule,
                i16.ReactiveFormsModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i1$3.MatListModule,
                i10.MatDividerModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i9.MatOptionModule,
                i13.MatSelectModule,
                i3.MatTooltipModule,
                i6$1.MatAutocompleteModule,
                i2$1.IgoLanguageModule], exports: [DirectionsComponent,
                DirectionsInputsComponent,
                DirectionsButtonsComponent,
                DirectionsResultsComponent] });
    })();

    /**
     * Search source factory
     * @ignore
     */
    function searchSourceServiceFactory(sources) {
        return new SearchSourceService(sources);
    }
    /**
     * Function that returns a provider for the SearchSource service
     */
    function provideSearchSourceService() {
        return {
            provide: SearchSourceService,
            useFactory: searchSourceServiceFactory,
            deps: [SearchSource]
        };
    }

    var IChercheSearchResultFormatter = /** @class */ (function () {
        function IChercheSearchResultFormatter(languageService) {
            this.languageService = languageService;
        }
        IChercheSearchResultFormatter.prototype.formatResult = function (result) {
            return result;
        };
        return IChercheSearchResultFormatter;
    }());
    IChercheSearchResultFormatter.ɵfac = function IChercheSearchResultFormatter_Factory(t) { return new (t || IChercheSearchResultFormatter)(i0__namespace.ɵɵinject(i2__namespace$1.LanguageService)); };
    IChercheSearchResultFormatter.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: IChercheSearchResultFormatter, factory: IChercheSearchResultFormatter.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IChercheSearchResultFormatter, [{
                type: i0.Injectable
            }], function () { return [{ type: i2__namespace$1.LanguageService }]; }, null);
    })();
    // Fix the "+" is replaced with space " " in a query string
    // https://github.com/angular/angular/issues/11058
    var IgoHttpParameterCodec = /** @class */ (function () {
        function IgoHttpParameterCodec() {
        }
        IgoHttpParameterCodec.prototype.encodeKey = function (key) {
            return encodeURIComponent(key);
        };
        IgoHttpParameterCodec.prototype.encodeValue = function (value) {
            return encodeURIComponent(value);
        };
        IgoHttpParameterCodec.prototype.decodeKey = function (key) {
            return decodeURIComponent(key);
        };
        IgoHttpParameterCodec.prototype.decodeValue = function (value) {
            return decodeURIComponent(value);
        };
        return IgoHttpParameterCodec;
    }());
    /**
     * ICherche search source
     */
    var IChercheSearchSource = /** @class */ (function (_super) {
        __extends(IChercheSearchSource, _super);
        function IChercheSearchSource(http, languageService, storageService, options, formatter, injector) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            _this.formatter = formatter;
            _this.title$ = new rxjs.BehaviorSubject('');
            _this.hashtagsLieuxToKeep = [];
            _this.languageService.translate
                .get(_this.options.title)
                .subscribe(function (title) { return _this.title$.next(title); });
            var authService = injector.get(i5.AuthService);
            if (_this.settings.length) {
                if (!authService) {
                    _this.getAllowedTypes();
                }
                else {
                    authService.authenticate$.subscribe(function () {
                        _this.getAllowedTypes();
                    });
                }
            }
            return _this;
        }
        Object.defineProperty(IChercheSearchSource.prototype, "title", {
            get: function () {
                return this.title$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        IChercheSearchSource.prototype.getId = function () {
            return IChercheSearchSource.id;
        };
        IChercheSearchSource.prototype.getType = function () {
            return IChercheSearchSource.type;
        };
        IChercheSearchSource.prototype.getDefaultOptions = function () {
            var _a;
            var limit = this.options.params && this.options.params.limit
                ? Number(this.options.params.limit)
                : undefined;
            var ecmax = this.options.params && this.options.params.ecmax
                ? Number(this.options.params.ecmax)
                : undefined;
            var types = ((_a = this.options.params) === null || _a === void 0 ? void 0 : _a.type)
                ? this.options.params.type.replace(/\s/g, '').toLowerCase().split(',')
                : [
                    'adresses',
                    'codes-postaux',
                    'routes',
                    'intersections',
                    'municipalites',
                    'mrc',
                    'regadmin',
                    'lieux'
                ];
            return {
                title: 'igo.geo.search.icherche.name',
                searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/icherche',
                settings: [
                    {
                        type: 'checkbox',
                        title: 'results type',
                        name: 'type',
                        values: [
                            {
                                title: 'igo.geo.search.icherche.type.address',
                                value: 'adresses',
                                enabled: types.indexOf('adresses') !== -1,
                                hashtags: ['adresse']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.oldAddress',
                                value: 'anciennes-adresses',
                                enabled: types.indexOf('anciennes-adresses') !== -1,
                                hashtags: ['anciennes-adresses']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.postalCode',
                                value: 'codes-postaux',
                                enabled: types.indexOf('codes-postaux') !== -1,
                                hashtags: ['code-postal']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.road',
                                value: 'routes',
                                enabled: types.indexOf('routes') !== -1,
                                hashtags: ['route']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.intersection',
                                value: 'intersections',
                                enabled: types.indexOf('intersections') !== -1,
                                hashtags: ['intersection', '+']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.city',
                                value: 'municipalites',
                                enabled: types.indexOf('municipalites') !== -1,
                                hashtags: ['municipalité', 'mun']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.oldCity',
                                value: 'anciennes-municipalites',
                                enabled: types.indexOf('anciennes-municipalites') !== -1,
                                hashtags: ['anciennes-municipalites']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.mrc',
                                value: 'mrc',
                                enabled: types.indexOf('mrc') !== -1,
                                hashtags: ['mrc']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.regadmin',
                                value: 'regadmin',
                                enabled: types.indexOf('regadmin') !== -1,
                                hashtags: ['région-administrative', 'regadmin']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.entreprise',
                                value: 'entreprises',
                                enabled: types.indexOf('entreprises') !== -1,
                                available: false,
                                hashtags: ['entreprise']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.place',
                                value: 'lieux',
                                enabled: types.indexOf('lieux') !== -1,
                                hashtags: ['lieu']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.exit',
                                value: 'sorties-autoroute',
                                enabled: types.indexOf('sorties-autoroute') !== -1,
                                hashtags: ['sortie', 'sorties', 'exit']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.km',
                                value: 'bornes-km',
                                enabled: types.indexOf('bornes-km') !== -1,
                                hashtags: ['borne', 'bornes', 'repère', 'km']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.gcc',
                                value: 'bornes-gcc',
                                enabled: types.indexOf('bornes-gcc') !== -1,
                                hashtags: ['borne', 'bornes', 'repère', 'gcc', 'ccg']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.cn',
                                value: 'bornes-cn',
                                enabled: types.indexOf('bornes-cn') !== -1,
                                hashtags: ['borne', 'bornes', 'cn']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.sumi',
                                value: 'bornes-sumi',
                                enabled: types.indexOf('bornes-sumi') !== -1,
                                hashtags: ['borne', 'bornes', 'sumi']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.hq',
                                value: 'hq',
                                enabled: types.indexOf('hq') !== -1,
                                hashtags: ['hq']
                            },
                            {
                                title: 'igo.geo.search.icherche.type.cadastre',
                                value: 'cadastre',
                                enabled: types.indexOf('cadastre') !== -1,
                                hashtags: ['cadastre']
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'results limit',
                        name: 'limit',
                        values: [
                            {
                                title: '1',
                                value: 1,
                                enabled: limit === 1
                            },
                            {
                                title: '5',
                                value: 5,
                                enabled: limit === 5 || !limit
                            },
                            {
                                title: '10',
                                value: 10,
                                enabled: limit === 10
                            },
                            {
                                title: '25',
                                value: 25,
                                enabled: limit === 25
                            },
                            {
                                title: '50',
                                value: 50,
                                enabled: limit === 50
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'ecmax',
                        name: 'ecmax',
                        values: [
                            {
                                title: '10 %',
                                value: 10,
                                enabled: ecmax === 10
                            },
                            {
                                title: '30 %',
                                value: 30,
                                enabled: ecmax === 30 || !ecmax
                            },
                            {
                                title: '50 %',
                                value: 50,
                                enabled: ecmax === 50
                            },
                            {
                                title: '75 %',
                                value: 75,
                                enabled: ecmax === 75
                            },
                            {
                                title: '100 %',
                                value: 100,
                                enabled: ecmax === 100
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'restrictExtent',
                        name: 'loc',
                        values: [
                            {
                                title: 'igo.geo.search.icherche.restrictExtent.map',
                                value: 'true',
                                enabled: false
                            },
                            {
                                title: 'igo.geo.search.icherche.restrictExtent.quebec',
                                value: 'false',
                                enabled: true
                            }
                        ]
                    }
                ]
            };
        };
        /**
         * Search a location by name or keyword
         * @param term Location name or keyword
         * @returns Observable of <SearchResult<Feature>[]
         */
        IChercheSearchSource.prototype.search = function (term, options) {
            var _this = this;
            var params = this.computeRequestParams(term, options || {});
            if (!params.get('type').length) {
                return rxjs.of([]);
            }
            this.options.params.page = params.get('page') || '1';
            return this.http.get(this.searchUrl + "/geocode", { params: params }).pipe(operators.map(function (response) { return _this.extractResults(response, term); }), operators.catchError(function (err) {
                err.error.toDisplay = true;
                err.error.title = _this.languageService.translate.instant(_this.getDefaultOptions().title);
                throw err;
            }));
        };
        IChercheSearchSource.prototype.getAllowedTypes = function () {
            var _this = this;
            return this.http
                .get(this.searchUrl + "/types")
                .subscribe(function (types) {
                var typeSetting = _this.settings.find(function (s) { return s.name === 'type'; });
                typeSetting.values.forEach(function (v) {
                    var regex = new RegExp("^" + v.value + "(\\.|$)");
                    var typesMatched = types.filter(function (value) { return regex.test(value); });
                    v.available = typesMatched.length > 0;
                    if (v.value === 'lieux') {
                        _this.hashtagsLieuxToKeep = __spreadArray([], __read(new Set(typesMatched
                            .map(function (t) { return t.split('.'); })
                            .reduce(function (a, b) { return a.concat(b); })
                            .filter(function (t) { return t !== 'lieux'; }))));
                    }
                });
                _this.setParamFromSetting(typeSetting, false);
            });
        };
        IChercheSearchSource.prototype.computeRequestParams = function (term, options) {
            var queryParams = Object.assign({
                geometry: true,
                bbox: true,
                icon: true,
                type: 'adresses,codes-postaux,municipalites,mrc,regadmin,lieux,entreprises,bornes-sumi'
            }, this.params, this.computeOptionsParam(term, options || {}).params, {
                q: this.computeTerm(term),
                page: options.page
            });
            if (queryParams.loc === 'true') {
                var _b = __read(options.extent, 4), xMin = _b[0], yMin = _b[1], xMax = _b[2], yMax = _b[3];
                queryParams.loc = xMin + "," + yMin + ";" + xMax + "," + yMin + ";" + xMax + "," + yMax + ";" + xMin + "," + yMax + ";" + xMin + "," + yMin;
            }
            else if (queryParams.loc === 'false') {
                delete queryParams.loc;
            }
            if (/#[A-Za-z]+/.test(queryParams.q)) {
                queryParams.type = 'lieux';
            }
            return new i1$2.HttpParams({
                fromObject: utils.ObjectUtils.removeUndefined(queryParams),
                encoder: new IgoHttpParameterCodec()
            });
        };
        IChercheSearchSource.prototype.extractResults = function (response, term) {
            var _this = this;
            return response.features.map(function (data) {
                return _this.formatter.formatResult(_this.dataToResult(data, term, response));
            });
        };
        IChercheSearchSource.prototype.dataToResult = function (data, term, response) {
            var properties = this.computeProperties(data);
            var id = [this.getId(), properties.type, properties.code].join('.');
            var titleHtml = data.highlight.title || data.properties.nom;
            var subtitleHtml = data.highlight.title2
                ? ' <small> ' + data.highlight.title2 + '</small>'
                : '';
            var subtitleHtml2 = data.highlight.title3
                ? '<br><small> ' + data.highlight.title3 + '</small>'
                : '';
            return {
                source: this,
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: data.geometry,
                    extent: data.bbox,
                    properties: properties,
                    meta: {
                        id: id,
                        title: data.properties.nom
                    }
                },
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: data.properties.nom,
                    titleHtml: titleHtml + subtitleHtml + subtitleHtml2,
                    icon: data.icon || 'map-marker',
                    score: data.score || computeTermSimilarity(term.trim(), data.properties.nom),
                    nextPage: response.features.length % +this.options.params.limit === 0 &&
                        +this.options.params.page < 10
                }
            };
        };
        IChercheSearchSource.prototype.computeProperties = function (data) {
            var properties = utils.ObjectUtils.removeKeys(data.properties, IChercheSearchSource.propertiesBlacklist);
            if (!data.geometry) {
                return Object.assign({ type: data.index }, properties);
            }
            var googleLinksProperties = {
                GoogleMaps: ''
            };
            var googleMaps;
            if (data.geometry.type === 'Point') {
                googleMaps = GoogleLinks.getGoogleMapsCoordLink(data.geometry.coordinates[0], data.geometry.coordinates[1]);
            }
            else {
                var point = pointOnFeature__default["default"](data.geometry);
                googleMaps = GoogleLinks.getGoogleMapsCoordLink(point.geometry.coordinates[0], point.geometry.coordinates[1]);
            }
            var googleMapsNom;
            if (data.index === 'routes') {
                googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom + ', ' + data.properties.municipalite);
            }
            else if (data.index === 'municipalites') {
                googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom + ', ' + 'ville');
            }
            else if (data.index === 'mrc') {
                googleMapsNom = GoogleLinks.getGoogleMapsNameLink('mrc+' + data.properties.nom);
            }
            else if (data.index === 'regadmin') {
                googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom + ',+QC');
            }
            else {
                googleMapsNom = GoogleLinks.getGoogleMapsNameLink(data.properties.nom || data.highlight.title);
            }
            googleLinksProperties.GoogleMaps =
                '<a href=' +
                    googleMaps +
                    ' target="_blank">' +
                    this.languageService.translate.instant('igo.geo.searchByCoord') +
                    '</a> <br /> <a href=' +
                    googleMapsNom +
                    ' target="_blank">' +
                    this.languageService.translate.instant('igo.geo.searchByName') +
                    '</a>';
            if (data.geometry.type === 'Point') {
                googleLinksProperties.GoogleStreetView = GoogleLinks.getGoogleStreetViewLink(data.geometry.coordinates[0], data.geometry.coordinates[1]);
            }
            var routing = {
                Route: '<span class="routing"> <u>' +
                    this.languageService.translate.instant('igo.geo.seeRouting') +
                    '</u> </span>'
            };
            return Object.assign({ type: data.index }, properties, googleLinksProperties, routing);
        };
        /**
         * Remove hashtag from query
         * @param term Query with hashtag
         */
        IChercheSearchSource.prototype.computeTerm = function (term) {
            var _this = this;
            // Keep hashtags for "lieux"
            var hashtags = term.match(/(#[A-Za-z]+)/g) || [];
            var keep = false;
            keep = hashtags.some(function (hashtag) {
                var hashtagKey = hashtag.substring(1);
                return _this.hashtagsLieuxToKeep.some(function (h) { return h
                    .toLowerCase()
                    .normalize('NFD')
                    .replace(/[\u0300-\u036f]/g, '') ===
                    hashtagKey
                        .toLowerCase()
                        .normalize('NFD')
                        .replace(/[\u0300-\u036f]/g, ''); });
            });
            if (!keep) {
                term = term.replace(/(#[A-Za-z]+)/g, '');
            }
            return term.replace(/[^\wÀ-ÿ !\-\+\(\)\.\/½¼¾,'#]+/g, '');
        };
        /**
         * Add hashtag to param if valid
         * @param term Query with hashtag
         * @param options TextSearchOptions
         */
        IChercheSearchSource.prototype.computeOptionsParam = function (term, options) {
            var hashtags = _super.prototype.getHashtagsValid.call(this, term, 'type');
            if (hashtags) {
                options.params = Object.assign(options.params || {}, {
                    type: hashtags.join(',')
                });
            }
            return options;
        };
        return IChercheSearchSource;
    }(SearchSource));
    IChercheSearchSource.id = 'icherche';
    IChercheSearchSource.type = FEATURE;
    IChercheSearchSource.propertiesBlacklist = [];
    IChercheSearchSource.ɵfac = function IChercheSearchSource_Factory(t) { return new (t || IChercheSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options'), i0__namespace.ɵɵinject(IChercheSearchResultFormatter), i0__namespace.ɵɵinject(i0__namespace.Injector)); };
    IChercheSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: IChercheSearchSource, factory: IChercheSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], IChercheSearchSource.prototype, "search", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IChercheSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }, { type: IChercheSearchResultFormatter, decorators: [{
                            type: i0.Inject,
                            args: [IChercheSearchResultFormatter]
                        }] }, { type: i0__namespace.Injector }];
        }, { search: [] });
    })();
    /**
     * IChercheReverse search source
     */
    var IChercheReverseSearchSource = /** @class */ (function (_super) {
        __extends(IChercheReverseSearchSource, _super);
        function IChercheReverseSearchSource(http, languageService, storageService, options, injector) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            _this.title$ = new rxjs.BehaviorSubject('');
            _this.languageService.translate
                .get(_this.options.title)
                .subscribe(function (title) { return _this.title$.next(title); });
            var authService = injector.get(i5.AuthService);
            if (_this.settings.length) {
                if (!authService) {
                    _this.getAllowedTypes();
                }
                else {
                    authService.authenticate$.subscribe(function () {
                        _this.getAllowedTypes();
                    });
                }
            }
            return _this;
        }
        Object.defineProperty(IChercheReverseSearchSource.prototype, "title", {
            get: function () {
                return this.title$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        IChercheReverseSearchSource.prototype.getId = function () {
            return IChercheReverseSearchSource.id;
        };
        IChercheReverseSearchSource.prototype.getType = function () {
            return IChercheReverseSearchSource.type;
        };
        IChercheReverseSearchSource.prototype.getDefaultOptions = function () {
            var types = this.options.params && this.options.params.type
                ? this.options.params.type.replace(/\s/g, '').toLowerCase().split(',')
                : ['adresses', 'municipalites', 'mrc', 'regadmin'];
            return {
                title: 'igo.geo.search.ichercheReverse.name',
                searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/terrapi',
                settings: [
                    {
                        type: 'checkbox',
                        title: 'results type',
                        name: 'type',
                        values: [
                            {
                                title: 'igo.geo.search.icherche.type.address',
                                value: 'adresses',
                                enabled: types.indexOf('adresses') !== -1
                            },
                            {
                                title: 'igo.geo.search.icherche.type.road',
                                value: 'routes',
                                enabled: types.indexOf('routes') !== -1,
                                available: false
                            },
                            {
                                title: 'igo.geo.search.icherche.type.district',
                                value: 'arrondissements',
                                enabled: types.indexOf('arrondissements') !== -1
                            },
                            {
                                title: 'igo.geo.search.icherche.type.city',
                                value: 'municipalites',
                                enabled: types.indexOf('municipalites') !== -1
                            },
                            {
                                title: 'igo.geo.search.icherche.type.mrc',
                                value: 'mrc',
                                enabled: types.indexOf('mrc') !== -1
                            },
                            {
                                title: 'igo.geo.search.icherche.type.regadmin',
                                value: 'regadmin',
                                enabled: types.indexOf('regadmin') !== -1
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'radius',
                        name: 'bufferInput',
                        values: [
                            {
                                title: '100 m',
                                value: 100,
                                enabled: !this.options.distance || this.options.distance === 100
                            },
                            {
                                title: '500 m',
                                value: 500,
                                enabled: this.options.distance === 500
                            },
                            {
                                title: '1 km',
                                value: 1000,
                                enabled: this.options.distance === 1000
                            },
                            {
                                title: '2 km',
                                value: 2000,
                                enabled: this.options.distance === 2000
                            },
                            {
                                title: '5 km',
                                value: 5000,
                                enabled: this.options.distance === 5000
                            }
                        ]
                    }
                ]
            };
        };
        /**
         * Search a location by coordinates
         * @param lonLat Location coordinates
         * @param distance Search raidus around lonLat
         * @returns Observable of <SearchResult<Feature>[]
         */
        IChercheReverseSearchSource.prototype.reverseSearch = function (lonLat, options) {
            var _this = this;
            var params = this.computeRequestParams(lonLat, options || {});
            if (!params.get('type').length) {
                return rxjs.of([]);
            }
            return this.http.get(this.searchUrl + "/locate", { params: params }).pipe(operators.map(function (response) {
                return _this.extractResults(response);
            }));
        };
        IChercheReverseSearchSource.prototype.getAllowedTypes = function () {
            var _this = this;
            return this.http
                .get(this.searchUrl + "/types")
                .subscribe(function (types) {
                var typeSetting = _this.settings.find(function (s) { return s.name === 'type'; });
                typeSetting.values.forEach(function (v) {
                    v.available = types.indexOf(v.value) > -1;
                });
                _this.setParamFromSetting(typeSetting, false);
            });
        };
        IChercheReverseSearchSource.prototype.computeRequestParams = function (lonLat, options) {
            if (options.distance || this.options.distance) {
                options.params = Object.assign(options.params || {}, {
                    bufferInput: options.distance || this.options.distance
                });
            }
            return new i1$2.HttpParams({
                fromObject: Object.assign({
                    loc: lonLat.join(','),
                    sort: 'distance',
                    geometry: true,
                    icon: true
                }, options.params || {}, this.params)
            });
        };
        IChercheReverseSearchSource.prototype.extractResults = function (response) {
            var _this = this;
            return response.features.map(function (data) {
                return _this.dataToResult(data);
            });
        };
        IChercheReverseSearchSource.prototype.getSubtitle = function (data) {
            if (!this.settings.length) {
                return '';
            }
            var subtitle = '';
            switch (data.properties.type) {
                case 'arrondissements':
                    subtitle = data.properties.municipalite + ' (Arrondissement)';
                    break;
                default:
                    var typeSetting = this.settings.find(function (s) { return s.name === 'type'; });
                    var type = typeSetting.values.find(function (t) { return t.value === data.properties.type; });
                    if (type) {
                        subtitle = this.languageService.translate.instant(type.title);
                    }
            }
            return subtitle;
        };
        IChercheReverseSearchSource.prototype.dataToResult = function (data) {
            var properties = this.computeProperties(data);
            var extent = this.computeExtent(data);
            var id = [this.getId(), properties.type, properties.code].join('.');
            var titleHtml = data.properties.nom;
            var subtitleHtml = ' <small> ' + this.getSubtitle(data) + '</small>';
            return {
                source: this,
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: data.geometry,
                    extent: extent,
                    properties: properties,
                    meta: {
                        id: id,
                        title: data.properties.nom
                    }
                },
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: data.properties.nom,
                    titleHtml: titleHtml + subtitleHtml,
                    icon: data.icon || 'map-marker',
                    pointerSummaryTitle: this.getSubtitle(data) + ': ' + data.properties.nom
                }
            };
        };
        IChercheReverseSearchSource.prototype.computeProperties = function (data) {
            var properties = utils.ObjectUtils.removeKeys(data.properties, IChercheReverseSearchSource.propertiesBlacklist);
            var routing = {
                Route: '<span class="routing"> <u>' +
                    this.languageService.translate.instant('igo.geo.seeRouting') +
                    '</u> </span>'
            };
            return Object.assign(properties, routing);
        };
        IChercheReverseSearchSource.prototype.computeExtent = function (data) {
            return data.bbox
                ? [data.bbox[0], data.bbox[2], data.bbox[1], data.bbox[3]]
                : undefined;
        };
        return IChercheReverseSearchSource;
    }(SearchSource));
    IChercheReverseSearchSource.id = 'icherchereverse';
    IChercheReverseSearchSource.type = FEATURE;
    IChercheReverseSearchSource.propertiesBlacklist = [];
    IChercheReverseSearchSource.ɵfac = function IChercheReverseSearchSource_Factory(t) { return new (t || IChercheReverseSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options'), i0__namespace.ɵɵinject(i0__namespace.Injector)); };
    IChercheReverseSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: IChercheReverseSearchSource, factory: IChercheReverseSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], IChercheReverseSearchSource.prototype, "reverseSearch", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IChercheReverseSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }, { type: i0__namespace.Injector }];
        }, { reverseSearch: [] });
    })();

    /**
     * ICherche search result formatter factory
     * @ignore
     */
    function defaultIChercheSearchResultFormatterFactory(languageService) {
        return new IChercheSearchResultFormatter(languageService);
    }
    /**
     * Function that returns a provider for the ICherche search result formatter
     */
    function provideDefaultIChercheSearchResultFormatter() {
        return {
            provide: IChercheSearchResultFormatter,
            useFactory: defaultIChercheSearchResultFormatterFactory,
            deps: [i2$1.LanguageService]
        };
    }
    /**
     * ICherche search source factory
     * @ignore
     */
    function ichercheSearchSourceFactory(http, languageService, storageService, config, formatter, injector) {
        return new IChercheSearchSource(http, languageService, storageService, config.getConfig("searchSources." + IChercheSearchSource.id), formatter, injector);
    }
    /**
     * Function that returns a provider for the ICherche search source
     */
    function provideIChercheSearchSource() {
        return {
            provide: SearchSource,
            useFactory: ichercheSearchSourceFactory,
            multi: true,
            deps: [
                i1$2.HttpClient,
                i2$1.LanguageService,
                i2$1.StorageService,
                i2$1.ConfigService,
                IChercheSearchResultFormatter,
                i0.Injector
            ]
        };
    }
    /**
     * IChercheReverse search source factory
     * @ignore
     */
    function ichercheReverseSearchSourceFactory(http, languageService, storageService, config, injector) {
        return new IChercheReverseSearchSource(http, languageService, storageService, config.getConfig("searchSources." + IChercheReverseSearchSource.id), injector);
    }
    /**
     * Function that returns a provider for the IChercheReverse search source
     */
    function provideIChercheReverseSearchSource() {
        return {
            provide: SearchSource,
            useFactory: ichercheReverseSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.LanguageService, i2$1.StorageService, i2$1.ConfigService, i0.Injector]
        };
    }

    var CoordinatesSearchResultFormatter = /** @class */ (function () {
        function CoordinatesSearchResultFormatter(languageService) {
            this.languageService = languageService;
        }
        CoordinatesSearchResultFormatter.prototype.formatResult = function (result) {
            return result;
        };
        return CoordinatesSearchResultFormatter;
    }());
    CoordinatesSearchResultFormatter.ɵfac = function CoordinatesSearchResultFormatter_Factory(t) { return new (t || CoordinatesSearchResultFormatter)(i0__namespace.ɵɵinject(i2__namespace$1.LanguageService)); };
    CoordinatesSearchResultFormatter.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: CoordinatesSearchResultFormatter, factory: CoordinatesSearchResultFormatter.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CoordinatesSearchResultFormatter, [{
                type: i0.Injectable
            }], function () { return [{ type: i2__namespace$1.LanguageService }]; }, null);
    })();
    /**
     * CoordinatesReverse search source
     */
    var CoordinatesReverseSearchSource = /** @class */ (function (_super) {
        __extends(CoordinatesReverseSearchSource, _super);
        function CoordinatesReverseSearchSource(options, languageService, storageService, projections) {
            var _this = _super.call(this, options, storageService) || this;
            _this.languageService = languageService;
            _this.title$ = new rxjs.BehaviorSubject('');
            _this.projections = projections;
            _this.languageService.translate
                .get(_this.options.title)
                .subscribe(function (title) { return _this.title$.next(title); });
            return _this;
        }
        Object.defineProperty(CoordinatesReverseSearchSource.prototype, "title", {
            get: function () {
                return this.title$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        CoordinatesReverseSearchSource.prototype.getId = function () {
            return CoordinatesReverseSearchSource.id;
        };
        CoordinatesReverseSearchSource.prototype.getType = function () {
            return CoordinatesReverseSearchSource.type;
        };
        CoordinatesReverseSearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'igo.geo.search.coordinates.name',
                order: 1,
                showInSettings: false
            };
        };
        /**
         * Search a location by coordinates
         * @param lonLat Location coordinates
         * @param options options of ReverseSearchOptions (distance, conf, zoom, params)
         * @returns Observable of <SearchResult<Feature>[]
         */
        CoordinatesReverseSearchSource.prototype.reverseSearch = function (lonLat, options) {
            return rxjs.of([this.dataToResult(lonLat, options)]);
        };
        CoordinatesReverseSearchSource.prototype.dataToResult = function (data, options) {
            var dataDMS = convertDDToDMS(data);
            var convertedCoord = lonLatConversion(data, this.projections);
            var coords = convertedCoord.reduce(function (obj, item) { return (obj[item.alias] = item.igo2CoordFormat, obj); }, {});
            var roundedCoordString = roundCoordTo(data, 6).join(', ');
            var roundedCoordStringDMS = dataDMS.join(', ');
            var geometry = {
                type: 'Point',
                coordinates: [data[0], data[1]]
            };
            var properties = {};
            var subtitleHtml = '';
            if (options.distance) {
                var radiusKey = this.languageService.translate.instant('igo.geo.search.coordinates.radius');
                properties[radiusKey] = options.distance;
                subtitleHtml = '<br><small>Rayon: ' + options.distance + ' m</small>';
                // Create polygon
                var center = olproj__namespace.transform([data[0], data[1]], 'EPSG:4326', 'EPSG:3857');
                var circleGeometry = new OlCircle__default["default"](center, options.distance);
                var polygonGeometry = OlPolygon.fromCircle(circleGeometry);
                var writer = new olformat__namespace.GeoJSON();
                geometry = JSON.parse(writer.writeGeometry(polygonGeometry.transform('EPSG:3857', 'EPSG:4326')));
            }
            if (options.conf) {
                var confKey = this.languageService.translate.instant('igo.geo.search.coordinates.conf');
                properties[confKey] = options.conf;
                subtitleHtml += subtitleHtml === '' ? '<br>' : '<small> - </small>';
                subtitleHtml += '<small>Confiance: ' + options.conf + '%</small>';
            }
            var coordKey = this.languageService.translate.instant('igo.geo.search.coordinates.coord');
            properties[coordKey] = roundedCoordString;
            var coordKeyDMS = this.languageService.translate.instant('igo.geo.search.coordinates.coordDMS');
            properties[coordKeyDMS] = roundedCoordStringDMS;
            return {
                source: this,
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: geometry,
                    extent: undefined,
                    properties: Object.assign(properties, coords, {
                        GoogleMaps: GoogleLinks.getGoogleMapsCoordLink(data[0], data[1]),
                        GoogleStreetView: GoogleLinks.getGoogleStreetViewLink(data[0], data[1]),
                        OpenStreetMap: OsmLinks.getOpenStreetMapLink(data[0], data[1], 14),
                        Route: '<span class="routing"> <u>' + this.languageService.translate.instant('igo.geo.seeRouting') + '</u> </span>'
                    }),
                    meta: {
                        id: data[0].toString() + ',' + data[1].toString(),
                        title: roundedCoordString
                    }
                },
                meta: {
                    dataType: FEATURE,
                    id: data[0].toString() + ',' + data[1].toString(),
                    title: roundedCoordString,
                    titleHtml: roundedCoordString + subtitleHtml,
                    icon: 'map-marker',
                    score: 100, // every coord exists
                }
            };
        };
        return CoordinatesReverseSearchSource;
    }(SearchSource));
    CoordinatesReverseSearchSource.id = 'coordinatesreverse';
    CoordinatesReverseSearchSource.type = FEATURE;
    CoordinatesReverseSearchSource.ɵfac = function CoordinatesReverseSearchSource_Factory(t) { return new (t || CoordinatesReverseSearchSource)(i0__namespace.ɵɵinject('options'), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('projections')); };
    CoordinatesReverseSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: CoordinatesReverseSearchSource, factory: CoordinatesReverseSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], CoordinatesReverseSearchSource.prototype, "reverseSearch", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CoordinatesReverseSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['projections']
                        }] }];
        }, { reverseSearch: [] });
    })();

    /**
     * ICherche search result formatter factory
     * @ignore
     */
    function defaultCoordinatesSearchResultFormatterFactory(languageService) {
        return new CoordinatesSearchResultFormatter(languageService);
    }
    /**
     * Function that returns a provider for the ICherche search result formatter
     */
    function provideDefaultCoordinatesSearchResultFormatter() {
        return {
            provide: CoordinatesSearchResultFormatter,
            useFactory: defaultCoordinatesSearchResultFormatterFactory,
            deps: [i2$1.LanguageService]
        };
    }
    /**
     * CoordinatesReverse search source factory
     * @ignore
     */
    function CoordinatesReverseSearchSourceFactory(config, languageService, storageService, _projectionService) {
        return new CoordinatesReverseSearchSource(config.getConfig("searchSources." + CoordinatesReverseSearchSource.id), languageService, storageService, config.getConfig('projections') || []);
    }
    /**
     * Function that returns a provider for the IChercheReverse search source
     */
    function provideCoordinatesReverseSearchSource() {
        return {
            provide: SearchSource,
            useFactory: CoordinatesReverseSearchSourceFactory,
            multi: true,
            deps: [i2$1.ConfigService, i2$1.LanguageService, i2$1.StorageService, ProjectionService]
        };
    }

    var ILayerSearchResultFormatter = /** @class */ (function () {
        function ILayerSearchResultFormatter(languageService) {
            this.languageService = languageService;
        }
        ILayerSearchResultFormatter.prototype.formatResult = function (data) {
            var _this = this;
            var allowedKey = [
                'title',
                'abstract',
                'groupTitle',
                'metadataUrl',
                'downloadUrl',
                'urlInfo',
                'name'
            ];
            var property = Object.entries(data.properties)
                .filter(function (_a) {
                var _b = __read(_a, 1), key = _b[0];
                return allowedKey.indexOf(key) !== -1;
            })
                .reduce(function (out, entries) {
                var _a = __read(entries, 2), key = _a[0], value = _a[1];
                var newKey;
                try {
                    newKey = _this.languageService.translate.instant('igo.geo.search.ilayer.properties.' + key);
                }
                catch (e) {
                    newKey = key;
                }
                out[newKey] = value ? value : '';
                return out;
            }, {});
            var dataR = Object.assign({}, data);
            dataR.properties = property;
            return dataR;
        };
        return ILayerSearchResultFormatter;
    }());
    ILayerSearchResultFormatter.ɵfac = function ILayerSearchResultFormatter_Factory(t) { return new (t || ILayerSearchResultFormatter)(i0__namespace.ɵɵinject(i2__namespace$1.LanguageService)); };
    ILayerSearchResultFormatter.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: ILayerSearchResultFormatter, factory: ILayerSearchResultFormatter.ɵfac });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ILayerSearchResultFormatter, [{
                type: i0.Injectable
            }], function () { return [{ type: i2__namespace$1.LanguageService }]; }, null);
    })();
    /**
     * ILayer search source
     */
    var ILayerSearchSource = /** @class */ (function (_super) {
        __extends(ILayerSearchSource, _super);
        function ILayerSearchSource(http, languageService, storageService, options, formatter) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            _this.formatter = formatter;
            _this.title$ = new rxjs.BehaviorSubject('');
            _this.languageService.translate
                .get(_this.options.title)
                .subscribe(function (title) { return _this.title$.next(title); });
            return _this;
        }
        Object.defineProperty(ILayerSearchSource.prototype, "title", {
            get: function () {
                return this.title$.getValue();
            },
            enumerable: false,
            configurable: true
        });
        ILayerSearchSource.prototype.getId = function () {
            return ILayerSearchSource.id;
        };
        ILayerSearchSource.prototype.getType = function () {
            return ILayerSearchSource.type;
        };
        ILayerSearchSource.prototype.getDefaultOptions = function () {
            var limit = this.options.params && this.options.params.limit
                ? Number(this.options.params.limit)
                : undefined;
            var ecmax = this.options.params && this.options.params.ecmax
                ? Number(this.options.params.ecmax)
                : undefined;
            return {
                title: 'igo.geo.search.ilayer.name',
                searchUrl: 'https://geoegl.msp.gouv.qc.ca/apis/layers/search',
                settings: [
                    {
                        type: 'checkbox',
                        title: 'results type',
                        name: 'type',
                        values: [
                            {
                                title: 'igo.geo.search.ilayer.type.layer',
                                value: 'layer',
                                enabled: true,
                                hashtags: ['layer', 'layers', 'couche', 'couches']
                            },
                            {
                                title: 'igo.geo.search.ilayer.type.groupLayer',
                                value: 'group',
                                enabled: false,
                                hashtags: ['gr-layer', 'gr-layers', 'gr-couche', 'gr-couches']
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'results limit',
                        name: 'limit',
                        values: [
                            {
                                title: '1',
                                value: 1,
                                enabled: limit === 1
                            },
                            {
                                title: '5',
                                value: 5,
                                enabled: limit === 5 || !limit
                            },
                            {
                                title: '10',
                                value: 10,
                                enabled: limit === 10
                            },
                            {
                                title: '25',
                                value: 25,
                                enabled: limit === 25
                            },
                            {
                                title: '50',
                                value: 50,
                                enabled: limit === 50
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'ecmax',
                        name: 'ecmax',
                        values: [
                            {
                                title: '10 %',
                                value: 10,
                                enabled: ecmax === 10
                            },
                            {
                                title: '30 %',
                                value: 30,
                                enabled: ecmax === 30
                            },
                            {
                                title: '50 %',
                                value: 50,
                                enabled: ecmax === 50 || !ecmax
                            },
                            {
                                title: '75 %',
                                value: 75,
                                enabled: ecmax === 75
                            },
                            {
                                title: '100 %',
                                value: 100,
                                enabled: ecmax === 100
                            }
                        ]
                    }
                ]
            };
        };
        /**
         * Search a layer by name or keyword
         * @param term Layer name or keyword
         * @returns Observable of <SearchResult<LayerOptions>[]
         */
        ILayerSearchSource.prototype.search = function (term, options) {
            var _this = this;
            var params = this.computeSearchRequestParams(term, options || {});
            if (!params.get('q') || !params.get('type')) {
                return rxjs.of([]);
            }
            this.options.params.page = params.get('page') || '1';
            return this.http
                .get(this.searchUrl, { params: params })
                .pipe(operators.map(function (response) { return _this.extractResults(response, term); }));
        };
        ILayerSearchSource.prototype.computeSearchRequestParams = function (term, options) {
            return new i1$2.HttpParams({
                fromObject: utils.ObjectUtils.removeUndefined(Object.assign({
                    q: this.computeTerm(term)
                }, this.params, this.computeOptionsParam(term, options || {}).params, {
                    page: options.page
                }))
            });
        };
        /**
         * Remove hashtag from query
         * @param term Query with hashtag
         */
        ILayerSearchSource.prototype.computeTerm = function (term) {
            return term.replace(/(#[^\s]*)/g, '').replace(/[^\wÀ-ÿ !\-\(\),'#]+/g, '');
        };
        /**
         * Add hashtag to param if valid
         * @param term Query with hashtag
         * @param options TextSearchOptions
         */
        ILayerSearchSource.prototype.computeOptionsParam = function (term, options) {
            var hashtags = _super.prototype.getHashtagsValid.call(this, term, 'type');
            if (hashtags) {
                options.params = Object.assign(options.params || {}, {
                    type: hashtags.join(',')
                });
            }
            return options;
        };
        ILayerSearchSource.prototype.extractResults = function (response, term) {
            var _this = this;
            return response.items.map(function (data) { return _this.dataToResult(data, term, response); });
        };
        ILayerSearchSource.prototype.dataToResult = function (data, term, response) {
            var layerOptions = this.computeLayerOptions(data);
            var titleHtml = data.highlight.title || data.properties.title;
            var groupTitle = data.highlight.groupTitle || data.properties.groupTitle;
            var subtitleHtml = groupTitle
                ? ' <small style="color: #6f6969"> ' + groupTitle + '</small>'
                : '';
            return {
                source: this,
                meta: {
                    dataType: LAYER,
                    id: [this.getId(), data.properties.id].join('.'),
                    title: data.properties.title,
                    titleHtml: titleHtml + subtitleHtml,
                    icon: data.properties.type === 'Layer' ? 'layers' : 'map',
                    score: data.score || computeTermSimilarity(term.trim(), data.properties.name),
                    nextPage: response.items.length % +this.options.params.limit === 0 &&
                        +this.options.params.page < 10
                },
                data: layerOptions
            };
        };
        ILayerSearchSource.prototype.computeLayerOptions = function (data) {
            var url = data.properties.url;
            var queryParams = this.extractQueryParamsFromSourceUrl(url);
            return utils.ObjectUtils.removeUndefined({
                sourceOptions: {
                    id: data.properties.id,
                    type: data.properties.format,
                    url: url,
                    queryFormat: queryParams.queryFormat,
                    queryHtmlTarget: queryParams.queryHtmlTarget,
                    params: data.properties.format === 'wms' ? { LAYERS: data.properties.name } : undefined,
                    layer: data.properties.format === 'wms' ? undefined : data.properties.name,
                    optionsFromCapabilities: true,
                    crossOrigin: 'anonymous'
                },
                title: data.properties.title,
                maxResolution: getResolutionFromScale(Number(data.properties.maxScaleDenom)),
                minResolution: getResolutionFromScale(Number(data.properties.minScaleDenom)),
                metadata: {
                    url: data.properties.metadataUrl,
                    extern: data.properties.metadataUrl ? true : undefined,
                    abstract: data.properties.abstract || undefined
                },
                properties: this.formatter.formatResult(data).properties
            });
        };
        ILayerSearchSource.prototype.extractQueryParamsFromSourceUrl = function (url) {
            var e_1, _a;
            var queryFormat;
            var queryHtmlTarget;
            var formatOpt = this.options.queryFormat;
            if (formatOpt) {
                var _loop_1 = function (key) {
                    var value = formatOpt[key];
                    if (value === '*') {
                        queryFormat = exports.QueryFormat[key.toUpperCase()];
                        return "break";
                    }
                    var urls = value.urls;
                    if (Array.isArray(urls)) {
                        urls.forEach(function (urlOpt) {
                            if (url.indexOf(urlOpt) !== -1) {
                                queryFormat = exports.QueryFormat[key.toUpperCase()];
                            }
                        });
                        return "break";
                    }
                };
                try {
                    for (var _b = __values(Object.keys(formatOpt)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        var state_1 = _loop_1(key);
                        if (state_1 === "break")
                            break;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (queryFormat === exports.QueryFormat.HTML ||
                    queryFormat === exports.QueryFormat.HTMLGML2) {
                    queryHtmlTarget = 'iframe';
                }
            }
            return {
                queryFormat: queryFormat,
                queryHtmlTarget: queryHtmlTarget
            };
        };
        return ILayerSearchSource;
    }(SearchSource));
    ILayerSearchSource.id = 'ilayer';
    ILayerSearchSource.type = LAYER;
    ILayerSearchSource.ɵfac = function ILayerSearchSource_Factory(t) { return new (t || ILayerSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options'), i0__namespace.ɵɵinject(ILayerSearchResultFormatter)); };
    ILayerSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: ILayerSearchSource, factory: ILayerSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], ILayerSearchSource.prototype, "search", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ILayerSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }, { type: ILayerSearchResultFormatter, decorators: [{
                            type: i0.Inject,
                            args: [ILayerSearchResultFormatter]
                        }] }];
        }, { search: [] });
    })();

    /**
     * ILayer search result formatter factory
     * @ignore
     */
    function ilayerSearchResultFormatterFactory(languageService) {
        return new ILayerSearchResultFormatter(languageService);
    }
    /**
     * Function that returns a provider for the ILayer search result formatter
     */
    function provideILayerSearchResultFormatter() {
        return {
            provide: ILayerSearchResultFormatter,
            useFactory: ilayerSearchResultFormatterFactory,
            deps: [i2$1.LanguageService]
        };
    }
    /**
     * ILayer search source factory
     * @ignore
     */
    function ilayerSearchSourceFactory(http, languageService, storageService, config, formatter) {
        return new ILayerSearchSource(http, languageService, storageService, config.getConfig("searchSources." + ILayerSearchSource.id), formatter);
    }
    /**
     * Function that returns a provider for the ILayer search source
     */
    function provideILayerSearchSource() {
        return {
            provide: SearchSource,
            useFactory: ilayerSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.LanguageService, i2$1.StorageService, i2$1.ConfigService, ILayerSearchResultFormatter]
        };
    }

    var SEARCH_TYPES = [FEATURE, LAYER];

    function SearchSelectorComponent_mat_radio_button_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-radio-button", 7);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var searchType_r2 = ctx.$implicit;
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("value", searchType_r2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 2, ctx_r1.getSearchTypeTitle(searchType_r2)), " ");
        }
    }
    /**
     * This component allows a user to select a search type yo enable. In it's
     * current version, only one search type can be selected at once (radio). If
     * this component were to support more than one search source enabled (checkbox),
     * the searchbar component would require a small change to it's
     * placeholder getter. The search source service already supports having
     * more than one search source enabled.
     */
    var SearchSelectorComponent = /** @class */ (function () {
        function SearchSelectorComponent(searchSourceService) {
            this.searchSourceService = searchSourceService;
            this.searchType$ = new rxjs.BehaviorSubject(undefined);
            /**
             * List of available search types
             */
            this.searchTypes = SEARCH_TYPES;
            /**
             * Event emitted when the enabled search type changes
             */
            this.searchTypeChange = new i0.EventEmitter();
        }
        Object.defineProperty(SearchSelectorComponent.prototype, "searchType", {
            get: function () { return this.searchType$.value; },
            /**
             * The search type enabled
             */
            set: function (value) { this.setSearchType(value); },
            enumerable: false,
            configurable: true
        });
        SearchSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchType$$ = this.searchType$
                .pipe(operators.distinctUntilChanged())
                .subscribe(function (searchType) { return _this.onSetSearchType(searchType); });
        };
        SearchSelectorComponent.prototype.ngOnDestroy = function () {
            this.searchType$$.unsubscribe();
        };
        /**
         * Enable the selected search type
         * @param searchType Search type
         * @internal
         */
        SearchSelectorComponent.prototype.onSearchTypeChange = function (searchType) {
            this.setSearchType(searchType);
        };
        /**
         * Get a search type's title. The title
         * for all availables search typers needs to be defined in the locale
         * files or an error will be thrown.
         * @param searchType Search type
         * @internal
         */
        SearchSelectorComponent.prototype.getSearchTypeTitle = function (searchType) {
            return "igo.geo.search." + searchType.toLowerCase() + ".title";
        };
        /**
         * Emit an event and enable the search sources of the given type.
         * @param searchType Search type
         */
        SearchSelectorComponent.prototype.setSearchType = function (searchType) {
            this.searchType$.next(searchType);
        };
        SearchSelectorComponent.prototype.onSetSearchType = function (searchType) {
            if (searchType === undefined || searchType === null) {
                return;
            }
            this.searchSourceService.enableSourcesByType(searchType);
            this.searchTypeChange.emit(searchType);
        };
        return SearchSelectorComponent;
    }());
    SearchSelectorComponent.ɵfac = function SearchSelectorComponent_Factory(t) { return new (t || SearchSelectorComponent)(i0__namespace.ɵɵdirectiveInject(SearchSourceService)); };
    SearchSelectorComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchSelectorComponent, selectors: [["igo-search-selector"]], inputs: { searchTypes: "searchTypes", searchType: "searchType" }, outputs: { searchTypeChange: "searchTypeChange" }, decls: 9, vars: 8, consts: [[1, "igo-search-selector"], ["mat-icon-button", "", "color", "primary", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "igo-search-selector-button", 3, "matTooltip", "matMenuTriggerFor"], ["svgIcon", "menu-down"], ["xPosition", "before", "yPosition", "above", 1, "no-border-radius"], ["searchSelectorMenu", "matMenu"], [1, "igo-search-selector-radio-group", 3, "value", "change"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]], template: function SearchSelectorComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(4, "mat-menu", 3, 4);
                i0__namespace.ɵɵelementStart(6, "mat-radio-group", 5);
                i0__namespace.ɵɵlistener("change", function SearchSelectorComponent_Template_mat_radio_group_change_6_listener($event) { return ctx.onSearchTypeChange($event.value); });
                i0__namespace.ɵɵpipe(7, "async");
                i0__namespace.ɵɵtemplate(8, SearchSelectorComponent_mat_radio_button_8_Template, 3, 4, "mat-radio-button", 6);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(5);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 4, "igo.geo.search.menu.tooltip"))("matMenuTriggerFor", _r0);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("value", i0__namespace.ɵɵpipeBind1(7, 6, ctx.searchType$));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", ctx.searchTypes);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i5__namespace$2.MatMenuTrigger, i4__namespace.MatIcon, i5__namespace$2.MatMenu, i19__namespace.MatRadioGroup, i1__namespace$1.NgForOf, i19__namespace.MatRadioButton], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [".igo-search-selector-button[_ngcontent-%COMP%]     div.mat-button-ripple-round{border-radius:0}.igo-search-selector-radio-group[_ngcontent-%COMP%]{display:inline-flex;flex-direction:column}.igo-search-selector-radio-group[_ngcontent-%COMP%]   mat-radio-button[_ngcontent-%COMP%]{margin:5px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchSelectorComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-selector',
                        templateUrl: './search-selector.component.html',
                        styleUrls: ['./search-selector.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: SearchSourceService }]; }, { searchTypes: [{
                    type: i0.Input
                }], searchType: [{
                    type: i0.Input
                }], searchTypeChange: [{
                    type: i0.Output
                }] });
    })();

    /**
     * @ignore
     */
    var IgoSearchSelectorModule = /** @class */ (function () {
        function IgoSearchSelectorModule() {
        }
        return IgoSearchSelectorModule;
    }());
    IgoSearchSelectorModule.ɵfac = function IgoSearchSelectorModule_Factory(t) { return new (t || IgoSearchSelectorModule)(); };
    IgoSearchSelectorModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoSearchSelectorModule });
    IgoSearchSelectorModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i20.MatTabsModule,
                i11.MatCheckboxModule,
                i2$1.IgoLanguageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoSearchSelectorModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i3.MatTooltipModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i5$2.MatMenuModule,
                            i19.MatRadioModule,
                            i20.MatTabsModule,
                            i11.MatCheckboxModule,
                            i2$1.IgoLanguageModule
                        ],
                        exports: [SearchSelectorComponent],
                        declarations: [SearchSelectorComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoSearchSelectorModule, { declarations: [SearchSelectorComponent], imports: [i1$1.CommonModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i20.MatTabsModule,
                i11.MatCheckboxModule,
                i2$1.IgoLanguageModule], exports: [SearchSelectorComponent] });
    })();

    function SearchSettingsComponent_div_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 8);
            i0__namespace.ɵɵelementStart(1, "button", 9);
            i0__namespace.ɵɵlistener("click", function SearchSettingsComponent_div_6_Template_button_click_1_listener($event) { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.checkUncheckAllSources($event); });
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(!ctx_r1.searchSourcesAllEnabled ? i0__namespace.ɵɵpipeBind1(3, 1, "igo.geo.search.searchSources.unselectAll") : i0__namespace.ɵɵpipeBind1(4, 3, "igo.geo.search.searchSources.selectAll"));
        }
    }
    function SearchSettingsComponent_ng_container_7_button_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 15);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var source_r6 = i0__namespace.ɵɵnextContext().$implicit;
            var _r9 = i0__namespace.ɵɵreference(6);
            i0__namespace.ɵɵproperty("matMenuTriggerFor", _r9);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", source_r6.title, " ");
        }
    }
    function SearchSettingsComponent_ng_container_7_button_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 16);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var source_r6 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", source_r6.title, " ");
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_span_6_mat_radio_button_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r22_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-radio-button", 22);
            i0__namespace.ɵɵlistener("click", function SearchSettingsComponent_ng_container_7_ng_container_7_span_6_mat_radio_button_2_Template_mat_radio_button_click_0_listener($event) { return $event.stopPropagation(); })("change", function SearchSettingsComponent_ng_container_7_ng_container_7_span_6_mat_radio_button_2_Template_mat_radio_button_change_0_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r22_1); var settingValue_r18 = restoredCtx.$implicit; var setting_r13 = i0__namespace.ɵɵnextContext(2).$implicit; var source_r6 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r20 = i0__namespace.ɵɵnextContext(); return ctx_r20.settingsValueCheckedRadioButton($event, source_r6, setting_r13, settingValue_r18); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var settingValue_r18 = ctx.$implicit;
            var ctx_r17 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵproperty("value", settingValue_r18)("matTooltip", ctx_r17.getAvailableHashtagsValues(settingValue_r18))("checked", settingValue_r18.enabled);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 4, settingValue_r18.title), " ");
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_span_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵelementStart(1, "mat-radio-group", 20);
            i0__namespace.ɵɵtemplate(2, SearchSettingsComponent_ng_container_7_ng_container_7_span_6_mat_radio_button_2_Template, 3, 6, "mat-radio-button", 21);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var setting_r13 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("value", setting_r13);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", setting_r13.values);
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r29_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 8);
            i0__namespace.ɵɵelementStart(1, "button", 9);
            i0__namespace.ɵɵlistener("click", function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_div_1_Template_button_click_1_listener($event) { i0__namespace.ɵɵrestoreView(_r29_1); var setting_r13 = i0__namespace.ɵɵnextContext(2).$implicit; var source_r6 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r27 = i0__namespace.ɵɵnextContext(); return ctx_r27.checkUncheckAll($event, source_r6, setting_r13); });
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var setting_r13 = i0__namespace.ɵɵnextContext(2).$implicit;
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(setting_r13.allEnabled || setting_r13.allEnabled === undefined ? i0__namespace.ɵɵpipeBind1(3, 1, "igo.geo.search.searchSources.settings.unselectAll") : i0__namespace.ɵɵpipeBind1(4, 3, "igo.geo.search.searchSources.settings.selectAll"));
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_mat_checkbox_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r36_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "mat-checkbox", 24);
            i0__namespace.ɵɵlistener("click", function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_mat_checkbox_2_Template_mat_checkbox_click_0_listener($event) { return $event.stopPropagation(); })("change", function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_mat_checkbox_2_Template_mat_checkbox_change_0_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r36_1); var settingValue_r32 = restoredCtx.$implicit; var setting_r13 = i0__namespace.ɵɵnextContext(2).$implicit; var source_r6 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r34 = i0__namespace.ɵɵnextContext(); return ctx_r34.settingsValueCheckedCheckbox($event, source_r6, setting_r13, settingValue_r32); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵpipe(2, "translate");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var settingValue_r32 = ctx.$implicit;
            var setting_r13 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r26 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵstyleProp("display", ctx_r26.displayBlock);
            i0__namespace.ɵɵproperty("checked", settingValue_r32.enabled)("value", setting_r13)("matTooltip", ctx_r26.getAvailableHashtagsValues(settingValue_r32));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(2, 6, settingValue_r32.title), " ");
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_span_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵtemplate(1, SearchSettingsComponent_ng_container_7_ng_container_7_span_7_div_1_Template, 5, 5, "div", 5);
            i0__namespace.ɵɵtemplate(2, SearchSettingsComponent_ng_container_7_ng_container_7_span_7_mat_checkbox_2_Template, 3, 8, "mat-checkbox", 23);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var setting_r13 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r16 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", setting_r13.values.length > 3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r16.getAvailableValues(setting_r13));
        }
    }
    function SearchSettingsComponent_ng_container_7_ng_container_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "button", 15);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(4, "mat-menu", 17, 18);
            i0__namespace.ɵɵtemplate(6, SearchSettingsComponent_ng_container_7_ng_container_7_span_6_Template, 3, 2, "span", 19);
            i0__namespace.ɵɵtemplate(7, SearchSettingsComponent_ng_container_7_ng_container_7_span_7_Template, 3, 2, "span", 19);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var setting_r13 = ctx.$implicit;
            var _r14 = i0__namespace.ɵɵreference(5);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("matMenuTriggerFor", _r14);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(3, 5, "igo.geo.search.searchSources.settings." + setting_r13.title), " ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitch", setting_r13.type);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitchCase", "radiobutton");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngSwitchCase", "checkbox");
        }
    }
    function SearchSettingsComponent_ng_container_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r42_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵelementStart(1, "span", 10);
            i0__namespace.ɵɵelementStart(2, "mat-checkbox", 11);
            i0__namespace.ɵɵlistener("click", function SearchSettingsComponent_ng_container_7_Template_mat_checkbox_click_2_listener($event) { return $event.stopPropagation(); })("change", function SearchSettingsComponent_ng_container_7_Template_mat_checkbox_change_2_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r42_1); var source_r6 = restoredCtx.$implicit; var ctx_r41 = i0__namespace.ɵɵnextContext(); return ctx_r41.onCheckSearchSource($event, source_r6); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtemplate(3, SearchSettingsComponent_ng_container_7_button_3_Template, 2, 2, "button", 12);
            i0__namespace.ɵɵtemplate(4, SearchSettingsComponent_ng_container_7_button_4_Template, 2, 1, "button", 13);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(5, "mat-menu", null, 14);
            i0__namespace.ɵɵtemplate(7, SearchSettingsComponent_ng_container_7_ng_container_7_Template, 8, 7, "ng-container", 6);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var source_r6 = ctx.$implicit;
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("checked", source_r6.enabled)("value", source_r6);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", source_r6.settings.length > 0);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", source_r6.settings.length === 0);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngForOf", source_r6.settings);
        }
    }
    function SearchSettingsComponent_span_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r44_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵelement(1, "mat-divider");
            i0__namespace.ɵɵelementStart(2, "span", 25);
            i0__namespace.ɵɵelementStart(3, "mat-slide-toggle", 26);
            i0__namespace.ɵɵlistener("change", function SearchSettingsComponent_span_8_Template_mat_slide_toggle_change_3_listener($event) { i0__namespace.ɵɵrestoreView(_r44_1); var ctx_r43 = i0__namespace.ɵɵnextContext(); return ctx_r43.changePointerReverseSearch($event); })("click", function SearchSettingsComponent_span_8_Template_mat_slide_toggle_click_3_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(4, "translate");
            i0__namespace.ɵɵtext(5);
            i0__namespace.ɵɵpipe(6, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementStart(7, "mat-slide-toggle", 26);
            i0__namespace.ɵɵlistener("change", function SearchSettingsComponent_span_8_Template_mat_slide_toggle_change_7_listener($event) { i0__namespace.ɵɵrestoreView(_r44_1); var ctx_r46 = i0__namespace.ɵɵnextContext(); return ctx_r46.changeSearchResultsGeometry($event); })("click", function SearchSettingsComponent_span_8_Template_mat_slide_toggle_click_7_listener($event) { return $event.stopPropagation(); });
            i0__namespace.ɵɵpipe(8, "translate");
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵpipe(10, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(4, 8, "igo.geo.search.pointerSearchSummary.tooltip"))("checked", ctx_r3.pointerSummaryEnabled)("labelPosition", "after");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(6, 10, "igo.geo.search.pointerSearchSummary.title"), " ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(8, 12, "igo.geo.search.searchResultsGeometry.tooltip"))("checked", ctx_r3.searchResultsGeometryEnabled)("labelPosition", "after");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate1(" ", i0__namespace.ɵɵpipeBind1(10, 14, "igo.geo.search.searchResultsGeometry.title"), " ");
        }
    }
    /**
     * This component allows a user to select a search type yo enable. In it's
     * current version, only one search type can be selected at once (radio). If
     * this component were to support more than one search source enabled (checkbox),
     * the searchbar component would require a small change to it's
     * placeholder getter. The search source service already supports having
     * more than one search source enabled.
     */
    var SearchSettingsComponent = /** @class */ (function () {
        function SearchSettingsComponent(searchSourceService, mediaService, storageService) {
            this.searchSourceService = searchSourceService;
            this.mediaService = mediaService;
            this.storageService = storageService;
            this.hasPointerReverseSearchSource = false;
            this.searchSourcesAllEnabled = false;
            this.buffer = [];
            this.lastKeyTime = Date.now();
            this.displayBlock = 'block';
            this.pointerSummaryEnabled = false;
            this.searchResultsGeometryEnabled = false;
            /**
             * Event emitted when the enabled search source changes
             */
            this.searchSourceChange = new i0.EventEmitter();
            /**
             * Event emitted when the pointer summary is activated
             */
            this.pointerSummaryStatus = new i0.EventEmitter();
            /**
             * Event emitted when the show geometry summary is changed
             */
            this.searchResultsGeometryStatus = new i0.EventEmitter();
        }
        Object.defineProperty(SearchSettingsComponent.prototype, "isTouchScreen", {
            get: function () {
                return this.mediaService.isTouchScreen();
            },
            enumerable: false,
            configurable: true
        });
        SearchSettingsComponent.prototype.handleKeyboardEvent = function (event) {
            if (event.key === 'F2') {
                this.pointerSummaryEnabled = !this.pointerSummaryEnabled;
                this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);
            }
        };
        SearchSettingsComponent.prototype.ngOnInit = function () {
            this.hasPointerReverseSearchSource = this.hasReverseSearchSourcesForPointerSummary();
        };
        /**
         * Get all search sources
         * @internal
         */
        SearchSettingsComponent.prototype.getSearchSources = function () {
            var textSearchSources = this.searchSourceService
                .getSources()
                .filter(sourceCanSearch)
                .filter(function (s) { return s.available && s.getId() !== 'map' && s.showInSettings; });
            var reverseSearchSources = this.searchSourceService
                .getSources()
                .filter(sourceCanReverseSearch)
                .filter(function (s) { return s.available && s.getId() !== 'map' && s.showInSettings; });
            var sources = textSearchSources.concat(reverseSearchSources);
            this.computeSourcesCheckAllBehavior(sources);
            return sources;
        };
        /**
         * Get all search sources usable for pointer summary
         * @internal
         */
        SearchSettingsComponent.prototype.hasReverseSearchSourcesForPointerSummary = function () {
            if (this.searchSourceService
                .getEnabledSources()
                .filter(sourceCanReverseSearchAsSummary).length) {
                return true;
            }
            else {
                return false;
            }
        };
        /**
         * Triggered when a setting is checked (checkbox style)
         * @internal
         */
        SearchSettingsComponent.prototype.settingsValueCheckedCheckbox = function (event, source, setting, settingValue) {
            settingValue.enabled = event.checked;
            source.setParamFromSetting(setting);
            this.searchSourceChange.emit(source);
        };
        /**
         * Defining the action to do for check/uncheck checkboxes (settings)
         * return true if all checkbox must be checked
         * return false if all checkbox must be unchecked
         * @internal
         */
        SearchSettingsComponent.prototype.computeSettingCheckAllBehavior = function (setting) {
            if (setting.allEnabled === undefined) {
                if (setting.values.find(function (settingValue) { return settingValue.enabled; })) {
                    setting.allEnabled = false;
                }
                else {
                    setting.allEnabled = true;
                }
            }
            else {
                setting.allEnabled = !setting.allEnabled;
            }
        };
        /**
         * Defining the action to do for check/uncheck checkboxes (sources)
         * return true if all checkbox must be checked
         * return false if all checkbox must be unchecked
         * @internal
         */
        SearchSettingsComponent.prototype.computeSourcesCheckAllBehavior = function (sources) {
            var enabledSourcesCnt = sources.filter(function (source) { return source.enabled; }).length;
            var disabledSourcesCnt = sources.filter(function (source) { return !source.enabled; })
                .length;
            this.searchSourcesAllEnabled =
                enabledSourcesCnt >= disabledSourcesCnt ? false : true;
        };
        /**
         * Triggered when the check all / uncheck all type is clicked,
         * @internal
         */
        SearchSettingsComponent.prototype.checkUncheckAll = function (event, source, setting) {
            event.stopPropagation();
            this.computeSettingCheckAllBehavior(setting);
            setting.values.forEach(function (settingValue) {
                settingValue.enabled = setting.allEnabled;
            });
            source.setParamFromSetting(setting);
            this.searchSourceChange.emit(source);
        };
        /**
         * Triggered when the check all / uncheck all type is clicked,
         * @internal
         */
        SearchSettingsComponent.prototype.checkUncheckAllSources = function (event) {
            var _this = this;
            event.stopPropagation();
            this.getSearchSources().map(function (source) {
                source.enabled = _this.searchSourcesAllEnabled;
                _this.searchSourceChange.emit(source);
            });
        };
        /**
         * Triggered when a setting is checked (radiobutton style)
         * @internal
         */
        SearchSettingsComponent.prototype.settingsValueCheckedRadioButton = function (event, source, setting, settingValue) {
            setting.values.forEach(function (conf) {
                if (conf.value !== settingValue.value) {
                    conf.enabled = !event.source.checked;
                }
                else {
                    conf.enabled = event.source.checked;
                }
            });
            source.setParamFromSetting(setting);
            this.searchSourceChange.emit(source);
        };
        SearchSettingsComponent.prototype.onCheckSearchSource = function (event, source) {
            source.enabled = event.checked;
            var storage = (this.storageService.get(source.getId() + '.options') || {});
            storage.enabled = source.enabled;
            this.storageService.set(source.getId() + '.options', storage);
            this.searchSourceChange.emit(source);
        };
        SearchSettingsComponent.prototype.getAvailableValues = function (setting) {
            return setting.values.filter(function (s) { return s.available !== false; });
        };
        SearchSettingsComponent.prototype.getAvailableHashtagsValues = function (setting) {
            if (setting.hashtags) {
                return setting.hashtags.map(function (h) { return '#' + h; }).join(', ');
            }
            return;
        };
        SearchSettingsComponent.prototype.stopPropagation = function (event) {
            event.stopPropagation();
        };
        SearchSettingsComponent.prototype.changePointerReverseSearch = function (event) {
            this.pointerSummaryEnabled = event.checked;
            this.pointerSummaryStatus.emit(this.pointerSummaryEnabled);
        };
        SearchSettingsComponent.prototype.changeSearchResultsGeometry = function (event) {
            this.searchResultsGeometryEnabled = event.checked;
            this.searchResultsGeometryStatus.emit(this.searchResultsGeometryEnabled);
        };
        return SearchSettingsComponent;
    }());
    SearchSettingsComponent.ɵfac = function SearchSettingsComponent_Factory(t) { return new (t || SearchSettingsComponent)(i0__namespace.ɵɵdirectiveInject(SearchSourceService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MediaService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.StorageService)); };
    SearchSettingsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchSettingsComponent, selectors: [["igo-search-settings"]], hostBindings: function SearchSettingsComponent_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("keydown", function SearchSettingsComponent_keydown_HostBindingHandler($event) { return ctx.handleKeyboardEvent($event); }, false, i0__namespace.ɵɵresolveDocument);
            }
        }, inputs: { pointerSummaryEnabled: "pointerSummaryEnabled", searchResultsGeometryEnabled: "searchResultsGeometryEnabled" }, outputs: { searchSourceChange: "searchSourceChange", pointerSummaryStatus: "pointerSummaryStatus", searchResultsGeometryStatus: "searchResultsGeometryStatus" }, decls: 9, vars: 7, consts: [[1, "igo-search-settings"], ["mat-icon-button", "", "color", "primary", "tooltip-position", "below", "matTooltipShowDelay", "500", 1, "igo-search-settings-button", 3, "matTooltip", "matMenuTriggerFor"], ["svgIcon", "chevron-down"], [1, "no-border-radius"], ["searchSettingsMenu", "matMenu"], ["class", "checkAllButton", 4, "ngIf"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "checkAllButton"], ["mat-raised-button", "", 3, "click"], [1, "igo-search-settings-search-source"], [1, "igo-search-settings-checkbox", 3, "checked", "value", "click", "change"], ["mat-menu-item", "", 3, "matMenuTriggerFor", 4, "ngIf"], ["mat-menu-item", "", 4, "ngIf"], ["sub_menu", "matMenu"], ["mat-menu-item", "", 3, "matMenuTriggerFor"], ["mat-menu-item", ""], ["yPosition", "above", 3, "ngSwitch"], ["test_sub_menu", "matMenu"], [4, "ngSwitchCase"], [1, "igo-search-settings-radio-group", 3, "value"], ["class", "mat-typography", 3, "value", "matTooltip", "checked", "click", "change", 4, "ngFor", "ngForOf"], [1, "mat-typography", 3, "value", "matTooltip", "checked", "click", "change"], ["class", "mat-menu-item", 3, "display", "checked", "value", "matTooltip", "click", "change", 4, "ngFor", "ngForOf"], [1, "mat-menu-item", 3, "checked", "value", "matTooltip", "click", "change"], [1, "pointer-summary-slide-toggle-container", "mat-typography"], ["tooltip-position", "below", "matTooltipShowDelay", "500", 1, "pointer-summary-option", 3, "matTooltip", "checked", "labelPosition", "change", "click"]], template: function SearchSettingsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "button", 1);
                i0__namespace.ɵɵpipe(2, "translate");
                i0__namespace.ɵɵelement(3, "mat-icon", 2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(4, "mat-menu", 3, 4);
                i0__namespace.ɵɵtemplate(6, SearchSettingsComponent_div_6_Template, 5, 5, "div", 5);
                i0__namespace.ɵɵtemplate(7, SearchSettingsComponent_ng_container_7_Template, 8, 5, "ng-container", 6);
                i0__namespace.ɵɵtemplate(8, SearchSettingsComponent_span_8_Template, 11, 16, "span", 7);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(5);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(2, 5, "igo.geo.search.menu.tooltip"))("matMenuTriggerFor", _r0);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngIf", ctx.getSearchSources().length > 4);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", ctx.getSearchSources());
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.hasPointerReverseSearchSource && !ctx.isTouchScreen);
            }
        }, directives: [i2__namespace.MatButton, i3__namespace.MatTooltip, i5__namespace$2.MatMenuTrigger, i4__namespace.MatIcon, i5__namespace$2.MatMenu, i1__namespace$1.NgIf, i1__namespace$1.NgForOf, i11__namespace.MatCheckbox, i5__namespace$2.MatMenuItem, i1__namespace$1.NgSwitch, i1__namespace$1.NgSwitchCase, i19__namespace.MatRadioGroup, i19__namespace.MatRadioButton, i10__namespace.MatDivider, i22__namespace.MatSlideToggle], pipes: [i7__namespace.TranslatePipe], styles: [".checkAllButton[_ngcontent-%COMP%]{text-align:center;padding:0 5px}.igo-search-settings-button[_ngcontent-%COMP%]     div.mat-button-ripple-round{border-radius:0}.igo-search-settings-radio-group[_ngcontent-%COMP%]{display:flex;flex-direction:column}.igo-search-settings-radio-group[_ngcontent-%COMP%]   mat-radio-button[_ngcontent-%COMP%]{margin:5px}.igo-search-settings-checkbox[_ngcontent-%COMP%]   mat-radio-button[_ngcontent-%COMP%]{display:flex}.igo-search-settings-search-source[_ngcontent-%COMP%]{display:flex;width:100%}.igo-search-settings-search-source[_ngcontent-%COMP%]   mat-checkbox[_ngcontent-%COMP%]{display:flex;margin-left:5px;margin-right:5px}.pointer-summary-option[_ngcontent-%COMP%]{display:block;margin-right:10px;margin-bottom:15px}.pointer-summary-slide-toggle-container[_ngcontent-%COMP%]{overflow-x:hidden}.pointer-summary-slide-toggle-container[_ngcontent-%COMP%]   mat-slide-toggle[_ngcontent-%COMP%]{margin:10px}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchSettingsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-settings',
                        templateUrl: './search-settings.component.html',
                        styleUrls: ['./search-settings.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: SearchSourceService }, { type: i2__namespace$1.MediaService }, { type: i2__namespace$1.StorageService }]; }, { pointerSummaryEnabled: [{
                    type: i0.Input
                }], searchResultsGeometryEnabled: [{
                    type: i0.Input
                }], searchSourceChange: [{
                    type: i0.Output
                }], pointerSummaryStatus: [{
                    type: i0.Output
                }], searchResultsGeometryStatus: [{
                    type: i0.Output
                }], handleKeyboardEvent: [{
                    type: i0.HostListener,
                    args: ['document:keydown', ['$event']]
                }] });
    })();

    /**
     * @ignore
     */
    var IgoSearchSettingsModule = /** @class */ (function () {
        function IgoSearchSettingsModule() {
        }
        return IgoSearchSettingsModule;
    }());
    IgoSearchSettingsModule.ɵfac = function IgoSearchSettingsModule_Factory(t) { return new (t || IgoSearchSettingsModule)(); };
    IgoSearchSettingsModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoSearchSettingsModule });
    IgoSearchSettingsModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i11.MatCheckboxModule,
                i10.MatDividerModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoSearchSettingsModule, [{
                type: i0.NgModule,
                args: [{
                        declarations: [SearchSettingsComponent],
                        imports: [
                            i1$1.CommonModule,
                            i3.MatTooltipModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i5$2.MatMenuModule,
                            i19.MatRadioModule,
                            i11.MatCheckboxModule,
                            i10.MatDividerModule,
                            i22.MatSlideToggleModule,
                            i2$1.IgoLanguageModule
                        ],
                        exports: [SearchSettingsComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoSearchSettingsModule, { declarations: [SearchSettingsComponent], imports: [i1$1.CommonModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i11.MatCheckboxModule,
                i10.MatDividerModule,
                i22.MatSlideToggleModule,
                i2$1.IgoLanguageModule], exports: [SearchSettingsComponent] });
    })();

    var _c0$3 = ["input"];
    function SearchBarComponent_mat_label_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "mat-label");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.label);
        }
    }
    function SearchBarComponent_button_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 10);
            i0__namespace.ɵɵelement(1, "mat-icon", 11);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("color", ctx_r2.color);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r2.searchIcon);
        }
    }
    function SearchBarComponent_button_12_Template(rf, ctx) {
        if (rf & 1) {
            var _r7_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 12);
            i0__namespace.ɵɵlistener("click", function SearchBarComponent_button_12_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r7_1); var ctx_r6 = i0__namespace.ɵɵnextContext(); return ctx_r6.onClearButtonClick(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 13);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("color", ctx_r3.color);
        }
    }
    function SearchBarComponent_igo_search_selector_14_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-search-selector", 14);
            i0__namespace.ɵɵlistener("searchTypeChange", function SearchBarComponent_igo_search_selector_14_Template_igo_search_selector_searchTypeChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(); return ctx_r8.onSearchTypeChange($event); });
            i0__namespace.ɵɵpipe(1, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("searchTypes", ctx_r4.searchTypes)("searchType", i0__namespace.ɵɵpipeBind1(1, 2, ctx_r4.searchType$));
        }
    }
    function SearchBarComponent_igo_search_settings_15_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-search-settings", 15);
            i0__namespace.ɵɵlistener("pointerSummaryStatus", function SearchBarComponent_igo_search_settings_15_Template_igo_search_settings_pointerSummaryStatus_0_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.pointerSummaryStatus.emit($event); })("searchResultsGeometryStatus", function SearchBarComponent_igo_search_settings_15_Template_igo_search_settings_searchResultsGeometryStatus_0_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r12 = i0__namespace.ɵɵnextContext(); return ctx_r12.searchResultsGeometryStatus.emit($event); })("searchSourceChange", function SearchBarComponent_igo_search_settings_15_Template_igo_search_settings_searchSourceChange_0_listener() { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r13 = i0__namespace.ɵɵnextContext(); return ctx_r13.onSearchSettingsChange(); });
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("pointerSummaryEnabled", ctx_r5.pointerSummaryEnabled)("searchResultsGeometryEnabled", ctx_r5.searchResultsGeometryEnabled);
        }
    }
    var _c1$2 = function (a0) { return { empty: a0 }; };
    var _c2$1 = function (a0) { return { "hasSearchIcon": a0 }; };
    /**
     * Searchbar that triggers a research in all search sources enabled.
     * If the store input is defined, the search results will be loaded
     * into that store. An event is always emitted when a research is completed.
     */
    var SearchBarComponent = /** @class */ (function () {
        function SearchBarComponent(languageService, searchService, searchSourceService) {
            this.languageService = languageService;
            this.searchService = searchService;
            this.searchSourceService = searchSourceService;
            this.placeholder$ = new rxjs.BehaviorSubject('igo.geo.search.placeholder');
            this.empty$ = new rxjs.BehaviorSubject(true);
            /**
             * Search term stream
             */
            this.stream$ = new rxjs.BehaviorSubject('');
            /**
             * List of available search types
             */
            this.searchTypes = SEARCH_TYPES;
            this.searchType$ = new rxjs.BehaviorSubject(undefined);
            /**
             * Event emitted when the pointer summary is activated by the searchbar setting
             */
            this.pointerSummaryStatus = new i0.EventEmitter();
            /**
             * Event emitted when the show geometry setting is changed
             */
            this.searchResultsGeometryStatus = new i0.EventEmitter();
            this.term$ = new rxjs.BehaviorSubject('');
            this.disabled$ = new rxjs.BehaviorSubject(false);
            this.pointerSummaryEnabled = false;
            this.searchResultsGeometryEnabled = false;
            /**
             * Whether a float label should be displayed
             */
            this.floatLabel = 'never';
            this.appearance = 'legacy';
            /**
             * Icons color (search and clear)
             */
            this.color = 'primary';
            this.termSplitter = '|';
            /**
             * Debounce time between each keystroke
             */
            this.debounce = 200;
            /**
             * Minimum term length required to trigger a research
             */
            this.minLength = 2;
            /**
             * Search Selector
             */
            this.searchSelector = false;
            /**
             * Search Settings
             */
            this.searchSettings = false;
            /**
             * Force coordinates in north america
             */
            this.forceNA = false;
            /**
             * Event emitted when the search term changes
             */
            this.searchTermChange = new i0.EventEmitter();
            /**
             * Event emitted when a research is completed
             */
            this.search = new i0.EventEmitter();
            /**
             * Event emitted when the search type changes
             */
            this.searchTypeChange = new i0.EventEmitter();
            /**
             * Event emitted when the search type changes
             */
            this.clearFeature = new i0.EventEmitter();
            /**
             * Event emitted when the search settings changes
             */
            this.searchSettingsChange = new i0.EventEmitter();
        }
        Object.defineProperty(SearchBarComponent.prototype, "searchType", {
            get: function () {
                return this.searchType$.value;
            },
            /**
             * Search term
             */
            set: function (value) {
                this.setSearchType(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchBarComponent.prototype, "term", {
            get: function () {
                return this.term$.value;
            },
            /**
             * Search term
             */
            set: function (value) {
                this.setTerm(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchBarComponent.prototype, "disabled", {
            get: function () {
                return this.disabled$.value;
            },
            /**
             * Whether this component is disabled
             */
            set: function (value) {
                this.disabled$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchBarComponent.prototype, "empty", {
            /**
             * Whether the search bar is empty
             * @internal
             */
            get: function () {
                return this.term.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Subscribe to the search term stream and trigger researches
         * @internal
         */
        SearchBarComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.term$$ = this.term$.subscribe(function (term) {
                _this.empty$.next(term === undefined || term.length === 0);
            });
            this.stream$$ = this.stream$
                .pipe(operators.debounce(function (term) { return (term === '' ? rxjs.EMPTY : rxjs.timer(_this.debounce)); }))
                .subscribe(function (term) { return _this.onSetTerm(term); });
            this.handlePlaceholder();
            this.searchType$$ = this.searchType$
                .pipe(operators.distinctUntilChanged())
                .subscribe(function (searchType) { return _this.onSetSearchType(searchType); });
        };
        /**
         * Unsubscribe to the search term stream
         * @internal
         */
        SearchBarComponent.prototype.ngOnDestroy = function () {
            this.term$$.unsubscribe();
            this.stream$$.unsubscribe();
            this.searchType$$.unsubscribe();
        };
        /**
         * When a user types, validates the key and send it into the
         * stream if it's valid
         * @param event Keyboard event
         * @internal
         */
        SearchBarComponent.prototype.onKeyup = function (event) {
            var key = event.key;
            if (!this.keyIsValid(key)) {
                return;
            }
            var term = event.target.value;
            this.setTerm(term);
        };
        /**
         * Clear the stream and the input
         * @internal
         */
        SearchBarComponent.prototype.onClearButtonClick = function () {
            this.clear();
            this.clearFeature.emit();
        };
        /**
         * Update search type
         * @param searchType Enabled search type
         * @internal
         */
        SearchBarComponent.prototype.onSearchTypeChange = function (searchType) {
            this.setSearchType(searchType);
        };
        /**
         * Update the placeholder with the enabled search type. The placeholder
         * for all availables search typers needs to be defined in the locale
         * files or an error will be thrown.
         * @param searchType Enabled search type
         * @internal
         */
        SearchBarComponent.prototype.setSearchType = function (searchType) {
            this.searchType$.next(searchType);
        };
        SearchBarComponent.prototype.onSearchSettingsChange = function () {
            this.doSearch(this.term);
            this.searchSettingsChange.emit();
            this.handlePlaceholder();
        };
        /**
         * Send the term into the stream only if this component is not disabled
         * @param term Search term
         */
        SearchBarComponent.prototype.setTerm = function (term) {
            if (this.disabled) {
                return;
            }
            term = term || '';
            if (term !== this.term) {
                this.term$.next(term);
            }
            var slug = term.replace(/(#[^\s]*)/g, '').trim();
            if (slug.length >= this.minLength || slug.length === 0) {
                this.stream$.next(term);
            }
        };
        /**
         * Clear the stream and the input
         */
        SearchBarComponent.prototype.clear = function () {
            this.term$.next('');
            this.stream$.next('');
            this.input.nativeElement.focus();
        };
        /**
         * Validate if a given key stroke is a valid input
         */
        SearchBarComponent.prototype.keyIsValid = function (key) {
            return SearchBarComponent.invalidKeys.indexOf(key) === -1;
        };
        /**
         * When the search term changes, emit an event and trigger a
         * research in every enabled search sources.
         * @param term Search term
         */
        SearchBarComponent.prototype.onSetTerm = function (term) {
            this.searchTermChange.emit(term);
            this.doSearch(term);
        };
        SearchBarComponent.prototype.handlePlaceholder = function () {
            var searchTypes = __spreadArray([], __read(new Set(this.searchSourceService
                .getEnabledSources()
                .filter(function (ss) { return !['map', 'coordinatesreverse'].includes(ss.getId()); })
                .map(function (ss) { return ss.getType(); }))));
            var placeholder = "igo.geo.search.placeholder";
            if (searchTypes.length === 1) {
                placeholder = "igo.geo.search." + searchTypes[0].toLowerCase() + ".placeholder";
            }
            else if (searchTypes.length === 0) {
                placeholder = "igo.geo.search.emptyType.placeholder";
            }
            this.placeholder$.next(placeholder);
        };
        SearchBarComponent.prototype.onSetSearchType = function (searchType) {
            if (searchType === undefined || searchType === null) {
                return;
            }
            this.searchTypeChange.emit(searchType);
            var placeholder = "igo.geo.search." + searchType.toLowerCase() + ".placeholder";
            this.placeholder$.next(placeholder);
            this.setTerm(this.term);
        };
        /**
         * Execute the search
         * @param term Search term
         */
        SearchBarComponent.prototype.doSearch = function (rawTerm) {
            var _this = this;
            if (this.researches$$) {
                this.researches$$.map(function (research) { return research.unsubscribe(); });
                this.researches$$ = undefined;
            }
            var terms;
            if (this.termSplitter && rawTerm.match(new RegExp(this.termSplitter, 'g'))) {
                terms = rawTerm.split(this.termSplitter).filter(function (t) { return t.length >= _this.minLength; });
                if (this.store) {
                    this.store.clear();
                }
            }
            else {
                terms = [rawTerm];
            }
            var researches = [];
            terms.map(function (term) {
                var slug = term ? term.replace(/(#[^\s]*)/g, '').trim() : '';
                if (slug === '') {
                    if (_this.store !== undefined) {
                        _this.store.clear();
                    }
                    return;
                }
                researches = researches.concat(_this.searchService.search(term, {
                    forceNA: _this.forceNA
                }));
            });
            this.researches$$ = researches.map(function (research) {
                return research.request.subscribe(function (results) {
                    _this.onResearchCompleted(research, results);
                });
            });
        };
        /**
         * When a research  is completed, emit an event and update
         * the store's items.
         * @param research Research
         * @param results Research results
         */
        SearchBarComponent.prototype.onResearchCompleted = function (research, results) {
            this.search.emit({ research: research, results: results });
            if (this.store !== undefined) {
                var newResults = this.store
                    .all()
                    .filter(function (result) { return result.source !== research.source; })
                    .concat(results);
                this.store.updateMany(newResults);
            }
        };
        return SearchBarComponent;
    }());
    /**
     * Invalid keys
     */
    SearchBarComponent.invalidKeys = [
        'Control',
        'Shift',
        'Alt',
        'ArrowDown',
        'ArrowUp',
        'ArrowRight',
        'ArrowLeft'
    ];
    SearchBarComponent.ɵfac = function SearchBarComponent_Factory(t) { return new (t || SearchBarComponent)(i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(SearchService), i0__namespace.ɵɵdirectiveInject(SearchSourceService)); };
    SearchBarComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchBarComponent, selectors: [["igo-search-bar"]], viewQuery: function SearchBarComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$3, 7);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.input = _t.first);
            }
        }, inputs: { searchTypes: "searchTypes", searchType: "searchType", term: "term", disabled: "disabled", pointerSummaryEnabled: "pointerSummaryEnabled", searchResultsGeometryEnabled: "searchResultsGeometryEnabled", floatLabel: "floatLabel", appearance: "appearance", placeholder: "placeholder", label: "label", color: "color", termSplitter: "termSplitter", debounce: "debounce", minLength: "minLength", searchIcon: "searchIcon", searchSelector: "searchSelector", searchSettings: "searchSettings", forceNA: "forceNA", store: "store" }, outputs: { pointerSummaryStatus: "pointerSummaryStatus", searchResultsGeometryStatus: "searchResultsGeometryStatus", searchTermChange: "searchTermChange", search: "search", searchTypeChange: "searchTypeChange", clearFeature: "clearFeature", searchSettingsChange: "searchSettingsChange" }, decls: 16, vars: 28, consts: [[1, "igo-search-bar-container", 3, "ngClass"], [3, "floatLabel", "appearance"], [4, "ngIf"], ["matInput", "", "autocomplete", "off", 3, "ngClass", "disabled", "placeholder", "value", "keyup", "touchend"], ["input", ""], [1, "search-bar-buttons"], ["mat-icon-button", "", 3, "color", 4, "ngIf"], ["mat-icon-button", "", 3, "color", "click", 4, "ngIf"], [3, "searchTypes", "searchType", "searchTypeChange", 4, "ngIf"], [3, "pointerSummaryEnabled", "searchResultsGeometryEnabled", "pointerSummaryStatus", "searchResultsGeometryStatus", "searchSourceChange", 4, "ngIf"], ["mat-icon-button", "", 3, "color"], [3, "svgIcon"], ["mat-icon-button", "", 3, "color", "click"], ["svgIcon", "close"], [3, "searchTypes", "searchType", "searchTypeChange"], [3, "pointerSummaryEnabled", "searchResultsGeometryEnabled", "pointerSummaryStatus", "searchResultsGeometryStatus", "searchSourceChange"]], template: function SearchBarComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵpipe(1, "async");
                i0__namespace.ɵɵelementStart(2, "mat-form-field", 1);
                i0__namespace.ɵɵtemplate(3, SearchBarComponent_mat_label_3_Template, 2, 1, "mat-label", 2);
                i0__namespace.ɵɵelementStart(4, "input", 3, 4);
                i0__namespace.ɵɵlistener("keyup", function SearchBarComponent_Template_input_keyup_4_listener($event) { return ctx.onKeyup($event); })("touchend", function SearchBarComponent_Template_input_touchend_4_listener($event) { return ctx.onKeyup($event); });
                i0__namespace.ɵɵpipe(6, "async");
                i0__namespace.ɵɵpipe(7, "async");
                i0__namespace.ɵɵpipe(8, "translate");
                i0__namespace.ɵɵpipe(9, "async");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(10, "div", 5);
                i0__namespace.ɵɵtemplate(11, SearchBarComponent_button_11_Template, 2, 2, "button", 6);
                i0__namespace.ɵɵtemplate(12, SearchBarComponent_button_12_Template, 2, 1, "button", 7);
                i0__namespace.ɵɵpipe(13, "async");
                i0__namespace.ɵɵtemplate(14, SearchBarComponent_igo_search_selector_14_Template, 2, 4, "igo-search-selector", 8);
                i0__namespace.ɵɵtemplate(15, SearchBarComponent_igo_search_settings_15_Template, 1, 2, "igo-search-settings", 9);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(24, _c1$2, i0__namespace.ɵɵpipeBind1(1, 12, ctx.empty$)));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("floatLabel", ctx.floatLabel)("appearance", ctx.appearance);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.label);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(26, _c2$1, ctx.searchIcon))("disabled", i0__namespace.ɵɵpipeBind1(6, 14, ctx.disabled$))("placeholder", ctx.placeholder ? ctx.placeholder : i0__namespace.ɵɵpipeBind1(7, 16, ctx.placeholder$) ? i0__namespace.ɵɵpipeBind1(8, 18, ctx.placeholder$.value) : undefined)("value", i0__namespace.ɵɵpipeBind1(9, 20, ctx.term$));
                i0__namespace.ɵɵadvance(7);
                i0__namespace.ɵɵproperty("ngIf", ctx.searchIcon !== undefined);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", i0__namespace.ɵɵpipeBind1(13, 22, ctx.empty$) === false);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.searchSelector);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.searchSettings);
            }
        }, directives: [i1__namespace$1.NgClass, i12__namespace.MatFormField, i1__namespace$1.NgIf, i5__namespace$1.MatInput, i12__namespace.MatLabel, i2__namespace.MatButton, i4__namespace.MatIcon, SearchSelectorComponent, SearchSettingsComponent], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: ["[_nghost-%COMP%]     .mat-form-field{padding:0 5px}[_nghost-%COMP%]     .mat-form-field-wrapper{margin-bottom:-1.5em}[_nghost-%COMP%]     span.mat-form-field-label-wrapper{top:-20px}[_nghost-%COMP%]     div.mat-form-field-infix{left:5px;right:5px;padding:0 0 12px!important}[_nghost-%COMP%]     div.mat-form-field-underline{display:none}.igo-search-bar-container[_ngcontent-%COMP%]{position:relative;width:100%;display:inline-flex;overflow:hidden}.igo-search-bar-container[_ngcontent-%COMP%] > mat-form-field[_ngcontent-%COMP%]{width:calc(100% - (2 * 40px))}.igo-search-bar-container.empty[_ngcontent-%COMP%] > mat-form-field[_ngcontent-%COMP%]{width:calc(100% - 40px)}.search-bar-buttons[_ngcontent-%COMP%]{position:relative;right:0px;display:inline-flex;top:0}.search-bar-buttons[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]:nth-child(2):before{content:\"\";left:0px;top:5px;border-right:1px solid #ddd;height:28px}igo-search-selector[_ngcontent-%COMP%]{background-color:#fff;top:0;border-radius:0}igo-search-settings[_ngcontent-%COMP%]{background-color:#fff;top:0;border-radius:0}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchBarComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-bar',
                        templateUrl: './search-bar.component.html',
                        styleUrls: ['./search-bar.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i2__namespace$1.LanguageService }, { type: SearchService }, { type: SearchSourceService }]; }, { searchTypes: [{
                    type: i0.Input
                }], searchType: [{
                    type: i0.Input
                }], pointerSummaryStatus: [{
                    type: i0.Output
                }], searchResultsGeometryStatus: [{
                    type: i0.Output
                }], term: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], pointerSummaryEnabled: [{
                    type: i0.Input
                }], searchResultsGeometryEnabled: [{
                    type: i0.Input
                }], floatLabel: [{
                    type: i0.Input
                }], appearance: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], termSplitter: [{
                    type: i0.Input
                }], debounce: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], searchIcon: [{
                    type: i0.Input
                }], searchSelector: [{
                    type: i0.Input
                }], searchSettings: [{
                    type: i0.Input
                }], forceNA: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], searchTermChange: [{
                    type: i0.Output
                }], search: [{
                    type: i0.Output
                }], searchTypeChange: [{
                    type: i0.Output
                }], clearFeature: [{
                    type: i0.Output
                }], searchSettingsChange: [{
                    type: i0.Output
                }], input: [{
                    type: i0.ViewChild,
                    args: ['input', { static: true }]
                }] });
    })();

    var SearchUrlParamDirective = /** @class */ (function () {
        function SearchUrlParamDirective(component, ref, route) {
            this.component = component;
            this.ref = ref;
            this.route = route;
        }
        SearchUrlParamDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.route && this.route.options.searchKey) {
                this.route.queryParams.subscribe(function (params) {
                    var searchParams = params[_this.route.options.searchKey];
                    if (searchParams) {
                        _this.component.setTerm(searchParams);
                        _this.ref.detectChanges();
                    }
                });
            }
        };
        return SearchUrlParamDirective;
    }());
    SearchUrlParamDirective.ɵfac = function SearchUrlParamDirective_Factory(t) { return new (t || SearchUrlParamDirective)(i0__namespace.ɵɵdirectiveInject(SearchBarComponent, 2), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.RouteService, 8)); };
    SearchUrlParamDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: SearchUrlParamDirective, selectors: [["", "igoSearchUrlParam", ""]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchUrlParamDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoSearchUrlParam]'
                    }]
            }], function () {
            return [{ type: SearchBarComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace$1.RouteService, decorators: [{
                            type: i0.Optional
                        }] }];
        }, null);
    })();

    /**
     * @ignore
     */
    var IgoSearchBarModule = /** @class */ (function () {
        function IgoSearchBarModule() {
        }
        return IgoSearchBarModule;
    }());
    IgoSearchBarModule.ɵfac = function IgoSearchBarModule_Factory(t) { return new (t || IgoSearchBarModule)(); };
    IgoSearchBarModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoSearchBarModule });
    IgoSearchBarModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i16.FormsModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i2$1.IgoLanguageModule,
                IgoSearchSelectorModule,
                IgoSearchSettingsModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoSearchBarModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i16.FormsModule,
                            i3.MatTooltipModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i5$2.MatMenuModule,
                            i19.MatRadioModule,
                            i12.MatFormFieldModule,
                            i5$1.MatInputModule,
                            i2$1.IgoLanguageModule,
                            IgoSearchSelectorModule,
                            IgoSearchSettingsModule
                        ],
                        exports: [
                            SearchBarComponent,
                        ],
                        declarations: [
                            SearchBarComponent,
                            SearchUrlParamDirective
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoSearchBarModule, { declarations: [SearchBarComponent,
                SearchUrlParamDirective], imports: [i1$1.CommonModule,
                i16.FormsModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i5$2.MatMenuModule,
                i19.MatRadioModule,
                i12.MatFormFieldModule,
                i5$1.MatInputModule,
                i2$1.IgoLanguageModule,
                IgoSearchSelectorModule,
                IgoSearchSettingsModule], exports: [SearchBarComponent] });
    })();

    function SearchResultsItemComponent_mat_icon_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "mat-icon", 4);
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵpropertyInterpolate("svgIcon", ctx_r0.showIcons ? ctx_r0.icon : "blank");
        }
    }
    function SearchResultsItemComponent_h4_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "h4", 5);
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("innerHtml", ctx_r1.titleHtml, i0__namespace.ɵɵsanitizeHtml)("matTooltip", ctx_r1.tooltipHtml);
        }
    }
    function SearchResultsItemComponent_h4_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "h4", 6);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", ctx_r2.title);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r2.title);
        }
    }
    function SearchResultsItemComponent_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 7);
            i0__namespace.ɵɵlistener("click", function SearchResultsItemComponent_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r5_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.onZoomHandler(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
        }
    }
    var _c0$2 = [[["", "igoSearchItemToolbar", ""]]];
    var _c1$1 = ["[igoSearchItemToolbar]"];
    /**
     * Search results list item
     */
    var SearchResultsItemComponent = /** @class */ (function () {
        function SearchResultsItemComponent() {
            /**
             * Whether there should be a zoom button
             */
            this.withZoomButton = false;
            this.zoomEvent = new i0.EventEmitter();
            this.format = new OlGeoJSON__default["default"]();
        }
        Object.defineProperty(SearchResultsItemComponent.prototype, "title", {
            get: function () {
                return i6.getEntityTitle(this.result);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchResultsItemComponent.prototype, "titleHtml", {
            /**
             * Search result HTML title
             * @internal
             */
            get: function () {
                return i6.getEntityTitleHtml(this.result);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchResultsItemComponent.prototype, "tooltipHtml", {
            /**
             * Search result tooltip
             * @internal
             */
            get: function () {
                return this.titleHtml
                    .replace(/<small?[^>]+(>|$)/g, '\n')
                    .replace(/<\/?[^>]+(>|$)/g, '');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchResultsItemComponent.prototype, "icon", {
            /**
             * Search result icon
             * @internal
             */
            get: function () {
                return i6.getEntityIcon(this.result);
            },
            enumerable: false,
            configurable: true
        });
        SearchResultsItemComponent.prototype.onZoomHandler = function () {
            var olFeature = this.format.readFeature(this.result.data, {
                dataProjection: this.result.data.projection,
                featureProjection: this.map.projection
            });
            moveToOlFeatures(this.map, [olFeature], exports.FeatureMotion.Default);
        };
        return SearchResultsItemComponent;
    }());
    SearchResultsItemComponent.ɵfac = function SearchResultsItemComponent_Factory(t) { return new (t || SearchResultsItemComponent)(); };
    SearchResultsItemComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchResultsItemComponent, selectors: [["igo-search-results-item"]], inputs: { result: "result", map: "map", showIcons: "showIcons", withZoomButton: "withZoomButton" }, outputs: { zoomEvent: "zoomEvent" }, ngContentSelectors: _c1$1, decls: 6, vars: 4, consts: [["mat-list-avatar", "", 3, "svgIcon", 4, "ngIf"], ["matLine", "", "matTooltipShowDelay", "500", "matTooltipClass", "search-result-tooltip", 3, "innerHtml", "matTooltip", 4, "ngIf"], ["matLine", "", "matTooltipShowDelay", "500", 3, "matTooltip", 4, "ngIf"], ["igoStopPropagation", "", "mat-icon-button", "", 3, "click", 4, "ngIf"], ["mat-list-avatar", "", 3, "svgIcon"], ["matLine", "", "matTooltipShowDelay", "500", "matTooltipClass", "search-result-tooltip", 3, "innerHtml", "matTooltip"], ["matLine", "", "matTooltipShowDelay", "500", 3, "matTooltip"], ["igoStopPropagation", "", "mat-icon-button", "", 3, "click"], ["svgIcon", "magnify"]], template: function SearchResultsItemComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵprojectionDef(_c0$2);
                i0__namespace.ɵɵelementStart(0, "mat-list-item");
                i0__namespace.ɵɵtemplate(1, SearchResultsItemComponent_mat_icon_1_Template, 1, 1, "mat-icon", 0);
                i0__namespace.ɵɵtemplate(2, SearchResultsItemComponent_h4_2_Template, 1, 2, "h4", 1);
                i0__namespace.ɵɵtemplate(3, SearchResultsItemComponent_h4_3_Template, 2, 2, "h4", 2);
                i0__namespace.ɵɵtemplate(4, SearchResultsItemComponent_button_4_Template, 2, 0, "button", 3);
                i0__namespace.ɵɵprojection(5);
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.icon);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.titleHtml);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.titleHtml);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.withZoomButton);
            }
        }, directives: [i1__namespace$3.MatListItem, i1__namespace$1.NgIf, i4__namespace.MatIcon, i1__namespace$3.MatListAvatarCssMatStyler, i9__namespace.MatLine, i3__namespace.MatTooltip, i2__namespace.MatButton, i6__namespace.StopPropagationDirective], styles: ["[_nghost-%COMP%]     small{color:#8c8c8c}  .search-result-tooltip{white-space:pre-line}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchResultsItemComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-results-item',
                        templateUrl: './search-results-item.component.html',
                        styleUrls: ['./search-results-item.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return []; }, { result: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], showIcons: [{
                    type: i0.Input
                }], withZoomButton: [{
                    type: i0.Input
                }], zoomEvent: [{
                    type: i0.Output
                }] });
    })();

    var _c0$1 = ["igoSearchItemToolbar"];
    function SearchResultsComponent_ng_template_1_igo_collapsible_0_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    var _c1 = function (a0) { return { results: a0 }; };
    function SearchResultsComponent_ng_template_1_igo_collapsible_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r10_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-collapsible", 6);
            i0__namespace.ɵɵlistener("toggle", function SearchResultsComponent_ng_template_1_igo_collapsible_0_Template_igo_collapsible_toggle_0_listener($event) { i0__namespace.ɵɵrestoreView(_r10_1); var group_r2 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r9 = i0__namespace.ɵɵnextContext(); return (ctx_r9.collapsed[group_r2.source.title] = $event); });
            i0__namespace.ɵɵtemplate(1, SearchResultsComponent_ng_template_1_igo_collapsible_0_ng_container_1_Template, 1, 0, "ng-container", 7);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var group_r2 = i0__namespace.ɵɵnextContext().$implicit;
            var _r6 = i0__namespace.ɵɵreference(4);
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵclassMap(group_r2.source.getId());
            i0__namespace.ɵɵproperty("title", ctx_r3.computeGroupTitle(group_r2))("collapsed", ctx_r3.collapsed[group_r2.source.title]);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(6, _c1, group_r2.results));
        }
    }
    function SearchResultsComponent_ng_template_1_ng_template_1_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function SearchResultsComponent_ng_template_1_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, SearchResultsComponent_ng_template_1_ng_template_1_ng_container_0_Template, 1, 0, "ng-container", 7);
        }
        if (rf & 2) {
            var group_r2 = i0__namespace.ɵɵnextContext().$implicit;
            var _r6 = i0__namespace.ɵɵreference(4);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r6)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c1, group_r2.results));
        }
    }
    var _c2 = function (a0) { return { result: a0 }; };
    function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r20_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "igo-search-results-item", 9);
            i0__namespace.ɵɵlistener("focus", function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template_igo_search_results_item_focus_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r20_1); var result_r18 = restoredCtx.$implicit; var ctx_r19 = i0__namespace.ɵɵnextContext(3); return ctx_r19.resultFocus.emit(result_r18); })("unfocus", function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template_igo_search_results_item_unfocus_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r20_1); var result_r18 = restoredCtx.$implicit; var ctx_r21 = i0__namespace.ɵɵnextContext(3); return ctx_r21.resultUnfocus.emit(result_r18); })("select", function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template_igo_search_results_item_select_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r20_1); var result_r18 = restoredCtx.$implicit; var ctx_r22 = i0__namespace.ɵɵnextContext(3); return ctx_r22.onResultSelect(result_r18); })("mouseenter", function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template_igo_search_results_item_mouseenter_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r20_1); var result_r18 = restoredCtx.$implicit; var ctx_r23 = i0__namespace.ɵɵnextContext(3); return ctx_r23.resultFocus.emit(result_r18); })("mouseleave", function SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template_igo_search_results_item_mouseleave_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r20_1); var result_r18 = restoredCtx.$implicit; var ctx_r24 = i0__namespace.ɵɵnextContext(3); return ctx_r24.resultUnfocus.emit(result_r18); });
            i0__namespace.ɵɵelementContainer(1, 10);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var result_r18 = ctx.$implicit;
            var ctx_r16 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("map", ctx_r16.map)("result", result_r18)("showIcons", ctx_r16.showIcons)("withZoomButton", ctx_r16.withZoomButton)("focused", ctx_r16.store.state.get(result_r18).focused)("selected", ctx_r16.store.state.get(result_r18).selected);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r16.templateSearchToolbar)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(8, _c2, result_r18));
        }
    }
    function SearchResultsComponent_ng_template_1_ng_template_3_span_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r27_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "span", 11);
            i0__namespace.ɵɵlistener("click", function SearchResultsComponent_ng_template_1_ng_template_3_span_1_Template_span_click_0_listener() { i0__namespace.ɵɵrestoreView(_r27_1); var group_r2 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r25 = i0__namespace.ɵɵnextContext(); return ctx_r25.displayMoreResults(group_r2); });
            i0__namespace.ɵɵelementStart(1, "u");
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵpipe(3, "translate");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(i0__namespace.ɵɵpipeBind1(3, 1, "igo.geo.search.displayMoreResults"));
        }
    }
    function SearchResultsComponent_ng_template_1_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, SearchResultsComponent_ng_template_1_ng_template_3_ng_template_0_Template, 2, 10, "ng-template", 1);
            i0__namespace.ɵɵtemplate(1, SearchResultsComponent_ng_template_1_ng_template_3_span_1_Template, 4, 3, "span", 8);
        }
        if (rf & 2) {
            var results_r15 = ctx.results;
            var group_r2 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngForOf", results_r15);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.isMoreResults(group_r2));
        }
    }
    function SearchResultsComponent_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtemplate(0, SearchResultsComponent_ng_template_1_igo_collapsible_0_Template, 2, 8, "igo-collapsible", 3);
            i0__namespace.ɵɵtemplate(1, SearchResultsComponent_ng_template_1_ng_template_1_Template, 1, 4, "ng-template", null, 4, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtemplate(3, SearchResultsComponent_ng_template_1_ng_template_3_Template, 2, 2, "ng-template", null, 5, i0__namespace.ɵɵtemplateRefExtractor);
        }
        if (rf & 2) {
            var _r4 = i0__namespace.ɵɵreference(2);
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.mode === ctx_r1.searchResultMode.Grouped)("ngIfElse", _r4);
        }
    }
    exports.SearchResultMode = void 0;
    (function (SearchResultMode) {
        SearchResultMode["Grouped"] = "grouped";
        SearchResultMode["Flat"] = "flat";
    })(exports.SearchResultMode || (exports.SearchResultMode = {}));
    /**
     * List of search results with focus and selection capabilities.
     * This component is dumb and only emits events.
     */
    var SearchResultsComponent = /** @class */ (function () {
        function SearchResultsComponent(cdRef, searchService) {
            this.cdRef = cdRef;
            this.searchService = searchService;
            /**
             * Reference to the SearchResultMode enum
             * @internal
             */
            this.searchResultMode = exports.SearchResultMode;
            this.pageIterator = [];
            this.collapsed = [];
            /**
             * Search results display mode
             */
            this.mode = exports.SearchResultMode.Grouped;
            /**
             * Whether there should be a zoom button
             */
            this.withZoomButton = false;
            this.settingsChange$ = new rxjs.BehaviorSubject(undefined);
            this.termSplitter = '|';
            /**
             * Event emitted when a result is focused
             */
            this.resultFocus = new i0.EventEmitter();
            /**
             * Event emitted when a result is unfocused
             */
            this.resultUnfocus = new i0.EventEmitter();
            /**
             * Event emitted when a result is selected
             */
            this.resultSelect = new i0.EventEmitter();
            /**
             * Event emitted when a research is completed after displaying more results is clicked
             */
            this.moreResults = new i0.EventEmitter();
            /**
             * Events emitted when a result is focus or unfocus by mouse event
             */
            this.resultMouseenter = new i0.EventEmitter();
            this.resultMouseleave = new i0.EventEmitter();
        }
        Object.defineProperty(SearchResultsComponent.prototype, "term", {
            /**
             * Search term
             */
            get: function () {
                return this._term;
            },
            set: function (value) {
                this._term = value;
                this.pageIterator = [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchResultsComponent.prototype, "results$", {
            get: function () {
                if (this._results$ === undefined) {
                    this._results$ = this.liftResults();
                }
                return this._results$;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Bind the search results store to the watcher
         * @internal
         */
        SearchResultsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.watcher = new i6.EntityStoreWatcher(this.store, this.cdRef);
            this.settingsChange$$ = this.settingsChange$.subscribe(function () {
                _this.pageIterator = [];
            });
        };
        /**
         * Unbind the search results store from the watcher
         * @internal
         */
        SearchResultsComponent.prototype.ngOnDestroy = function () {
            this.watcher.destroy();
            this.settingsChange$$.unsubscribe();
        };
        /**
         * Compute a group title
         * @param group Search results group
         * @returns Group title
         * @internal
         */
        SearchResultsComponent.prototype.computeGroupTitle = function (group) {
            var parts = [group.source.title];
            var count = group.results.length;
            if (count > 1) {
                parts.push("(" + count + ")");
            }
            return parts.join(' ');
        };
        /**
         * When a result is selected, update it's state in the store and emit
         * an event. A selected result is also considered focused
         * @param result Search result
         * @internal
         */
        SearchResultsComponent.prototype.onResultSelect = function (result) {
            if (this.store.state.get(result)) {
                if (this.store.state.get(result).selected === true) {
                    return;
                }
            }
            this.store.state.update(result, { focused: true, selected: true }, true);
            this.resultSelect.emit(result);
        };
        /**
         * Return an observable of the search results, grouped by search source
         * @returns Observable of grouped search results
         * @internal
         */
        SearchResultsComponent.prototype.liftResults = function () {
            var _this = this;
            return this.store.stateView.all$().pipe(operators.debounce(function (results) {
                return results.length === 0 ? rxjs.EMPTY : rxjs.timer(200);
            }), operators.map(function (results) {
                return _this.groupResults(results.map(function (r) { return r.entity; }).sort(_this.sortByOrder));
            }));
        };
        /**
         * Sort the results by display order.
         * @param r1 First result
         * @param r2 Second result
         */
        SearchResultsComponent.prototype.sortByOrder = function (r1, r2) {
            return r1.source.displayOrder - r2.source.displayOrder;
        };
        /**
         * Group results by search source
         * @param results Search results from all sources
         * @returns Search results grouped by source
         */
        SearchResultsComponent.prototype.groupResults = function (results) {
            var _this = this;
            var grouped = new Map();
            results.forEach(function (result) {
                var source = result.source;
                var sourceResults = grouped.get(source);
                if (sourceResults === undefined) {
                    sourceResults = [];
                    grouped.set(source, sourceResults);
                }
                sourceResults.push(result);
            });
            return Array.from(grouped.keys()).map(function (source) {
                if (_this.pageIterator[source.getId()] === undefined) {
                    _this.pageIterator[source.getId()] = 1;
                }
                return { source: source, results: grouped.get(source) };
            });
        };
        SearchResultsComponent.prototype.isMoreResults = function (group) {
            // getStrategyOfType is to avoid display more result based on a filtered state
            var stategy = this.store.getStrategyOfType(i6.EntityStoreFilterCustomFuncStrategy);
            var active = (stategy === null || stategy === void 0 ? void 0 : stategy.active) || false;
            return !active && group.results &&
                group.results[group.results.length - 1].meta.nextPage === true;
        };
        SearchResultsComponent.prototype.displayMoreResults = function (group) {
            var _this = this;
            var options = {
                sourceId: group.source.getId(),
                page: ++this.pageIterator[group.source.getId()]
            };
            var terms;
            if (this.termSplitter && this.term.match(new RegExp(this.termSplitter, 'g'))) {
                terms = this.term.split(this.termSplitter);
            }
            else {
                terms = [this.term];
            }
            var researches = [];
            terms.map(function (term) {
                researches = researches.concat(_this.searchService.search(term, options));
            });
            researches.map(function (research) {
                research.request.subscribe(function (results) {
                    var newResults = group.results.concat(results);
                    if (!results.length) {
                        newResults[newResults.length - 1].meta.nextPage = false;
                    }
                    _this.moreResults.emit({ research: research, results: newResults });
                });
            });
            return;
        };
        return SearchResultsComponent;
    }());
    SearchResultsComponent.ɵfac = function SearchResultsComponent_Factory(t) { return new (t || SearchResultsComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(SearchService)); };
    SearchResultsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchResultsComponent, selectors: [["igo-search-results"]], contentQueries: function SearchResultsComponent_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
                i0__namespace.ɵɵcontentQuery(dirIndex, _c0$1, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.templateSearchToolbar = _t.first);
            }
        }, inputs: { map: "map", store: "store", showIcons: "showIcons", mode: "mode", withZoomButton: "withZoomButton", term: "term", settingsChange$: "settingsChange$", termSplitter: "termSplitter" }, outputs: { resultFocus: "resultFocus", resultUnfocus: "resultUnfocus", resultSelect: "resultSelect", moreResults: "moreResults", resultMouseenter: "resultMouseenter", resultMouseleave: "resultMouseleave" }, decls: 4, vars: 4, consts: [[3, "navigation"], ["ngFor", "", 3, "ngForOf"], ["groupTemplate", ""], [3, "class", "title", "collapsed", "toggle", 4, "ngIf", "ngIfElse"], ["flatTemplate", ""], ["storeItemTemplate", ""], [3, "title", "collapsed", "toggle"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "moreResults mat-typography", 3, "click", 4, "ngIf"], ["igoListItem", "", "color", "accent", 3, "map", "result", "showIcons", "withZoomButton", "focused", "selected", "focus", "unfocus", "select", "mouseenter", "mouseleave"], ["igoSearchItemToolbar", "", 3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "moreResults", "mat-typography", 3, "click"]], template: function SearchResultsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-list", 0);
                i0__namespace.ɵɵtemplate(1, SearchResultsComponent_ng_template_1_Template, 5, 2, "ng-template", 1, 2, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵpipe(3, "async");
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("navigation", true);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind1(3, 2, ctx.results$));
            }
        }, directives: [i6__namespace.ListComponent, i1__namespace$1.NgForOf, i1__namespace$1.NgIf, i6__namespace.CollapsibleComponent, i1__namespace$1.NgTemplateOutlet, SearchResultsItemComponent, i6__namespace.ListItemDirective], pipes: [i1__namespace$1.AsyncPipe, i7__namespace.TranslatePipe], styles: [".moreResults[_ngcontent-%COMP%]{cursor:pointer;color:#00f;float:right;margin-right:10px;margin-top:5px}igo-list[_ngcontent-%COMP%]     mat-list{height:100%}"], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchResultsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-results',
                        templateUrl: './search-results.component.html',
                        styleUrls: ['./search-results.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: SearchService }]; }, { map: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], showIcons: [{
                    type: i0.Input
                }], mode: [{
                    type: i0.Input
                }], withZoomButton: [{
                    type: i0.Input
                }], term: [{
                    type: i0.Input
                }], settingsChange$: [{
                    type: i0.Input
                }], termSplitter: [{
                    type: i0.Input
                }], resultFocus: [{
                    type: i0.Output
                }], resultUnfocus: [{
                    type: i0.Output
                }], resultSelect: [{
                    type: i0.Output
                }], moreResults: [{
                    type: i0.Output
                }], resultMouseenter: [{
                    type: i0.Output
                }], resultMouseleave: [{
                    type: i0.Output
                }], templateSearchToolbar: [{
                    type: i0.ContentChild,
                    args: ['igoSearchItemToolbar', /* TODO: add static flag */ {}]
                }] });
    })();

    function SearchResultAddButtonComponent_button_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r2_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 1);
            i0__namespace.ɵɵlistener("mouseenter", function SearchResultAddButtonComponent_button_0_Template_button_mouseenter_0_listener($event) { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r1 = i0__namespace.ɵɵnextContext(); return ctx_r1.onMouseEvent($event); })("mouseleave", function SearchResultAddButtonComponent_button_0_Template_button_mouseleave_0_listener($event) { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r3 = i0__namespace.ɵɵnextContext(); return ctx_r3.onMouseEvent($event); })("click", function SearchResultAddButtonComponent_button_0_Template_button_click_0_listener($event) { i0__namespace.ɵɵrestoreView(_r2_1); var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.onToggleClick($event); });
            i0__namespace.ɵɵpipe(1, "translate");
            i0__namespace.ɵɵpipe(2, "async");
            i0__namespace.ɵɵpipe(3, "async");
            i0__namespace.ɵɵelement(4, "mat-icon", 2);
            i0__namespace.ɵɵpipe(5, "async");
            i0__namespace.ɵɵpipe(6, "async");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("matTooltip", i0__namespace.ɵɵpipeBind1(1, 4, i0__namespace.ɵɵpipeBind1(2, 6, ctx_r0.tooltip$)))("color", i0__namespace.ɵɵpipeBind1(3, 8, ctx_r0.isPreview$) ? "" : ctx_r0.added ? "warn" : "");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("matBadgeHidden", i0__namespace.ɵɵpipeBind1(5, 10, ctx_r0.inRange$))("svgIcon", i0__namespace.ɵɵpipeBind1(6, 12, ctx_r0.isPreview$) ? "plus" : ctx_r0.added ? "delete" : "plus");
        }
    }
    var SearchResultAddButtonComponent = /** @class */ (function () {
        function SearchResultAddButtonComponent(layerService) {
            this.layerService = layerService;
            this.tooltip$ = new rxjs.BehaviorSubject('igo.geo.catalog.layer.addToMap');
            this.inRange$ = new rxjs.BehaviorSubject(true);
            this.isPreview$ = new rxjs.BehaviorSubject(false);
            this.layersSubcriptions = [];
            this.mouseInsideAdd = false;
            this._color = 'primary';
        }
        Object.defineProperty(SearchResultAddButtonComponent.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @internal
         */
        SearchResultAddButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.layer.meta.dataType === 'Layer') {
                this.added =
                    this.map.layers.findIndex(function (lay) { return lay.id === _this.layer.data.sourceOptions.id; }) !== -1;
            }
            this.resolution$$ = this.map.viewController.resolution$.subscribe(function (value) {
                _this.isInResolutionsRange(value);
                _this.tooltip$.next(_this.computeTooltip());
            });
        };
        SearchResultAddButtonComponent.prototype.ngOnDestroy = function () {
            this.resolution$$.unsubscribe();
        };
        /**
         * On mouse event, mouseenter /mouseleave
         * @internal
         */
        SearchResultAddButtonComponent.prototype.onMouseEvent = function (event) {
            this.onToggleClick(event);
        };
        /**
         * On toggle button click, emit the added change event
         * @internal
         */
        SearchResultAddButtonComponent.prototype.onToggleClick = function (event) {
            var _this = this;
            if (typeof this.lastTimeoutRequest !== 'undefined') {
                clearTimeout(this.lastTimeoutRequest);
            }
            if (event.type === 'mouseenter' && this.mouseInsideAdd) {
                return;
            }
            switch (event.type) {
                case 'click':
                    if (!this.isPreview$.value) {
                        if (this.added) {
                            this.remove();
                        }
                        else {
                            this.add();
                        }
                    }
                    this.isPreview$.next(false);
                    break;
                case 'mouseenter':
                    if (!this.isPreview$.value && !this.added) {
                        this.lastTimeoutRequest = setTimeout(function () {
                            _this.add();
                            _this.isPreview$.next(true);
                        }, 500);
                    }
                    this.mouseInsideAdd = true;
                    break;
                case 'mouseleave':
                    if (this.isPreview$.value) {
                        this.remove();
                        this.isPreview$.next(false);
                    }
                    this.mouseInsideAdd = false;
                    break;
                default:
                    break;
            }
        };
        SearchResultAddButtonComponent.prototype.add = function () {
            if (!this.added) {
                this.added = true;
                this.addLayerToMap();
            }
        };
        SearchResultAddButtonComponent.prototype.remove = function () {
            if (this.added) {
                this.added = false;
                this.removeLayerFromMap();
                this.layersSubcriptions.map(function (s) { return s.unsubscribe(); });
                this.layersSubcriptions = [];
            }
        };
        /**
         * Emit added change event with added = true
         */
        SearchResultAddButtonComponent.prototype.addLayerToMap = function () {
            var _this = this;
            if (this.map === undefined) {
                return;
            }
            if (this.layer.meta.dataType !== LAYER) {
                return undefined;
            }
            var layerOptions = this.layer.data;
            if (layerOptions.sourceOptions.optionsFromApi === undefined) {
                layerOptions.sourceOptions.optionsFromApi = true;
            }
            this.layersSubcriptions.push(this.layerService
                .createAsyncLayer(layerOptions)
                .subscribe(function (layer) { return _this.map.addLayer(layer); }));
        };
        /**
         * Emit added change event with added = false
         */
        SearchResultAddButtonComponent.prototype.removeLayerFromMap = function () {
            if (this.map === undefined) {
                return;
            }
            if (this.layer.meta.dataType !== LAYER) {
                return undefined;
            }
            var oLayer = this.map.getLayerById(this.layer.data.sourceOptions.id);
            this.map.removeLayer(oLayer);
        };
        SearchResultAddButtonComponent.prototype.isInResolutionsRange = function (resolution) {
            var minResolution = this.layer.data.minResolution || 0;
            var maxResolution = this.layer.data.maxResolution || Infinity;
            this.inRange$.next(resolution >= minResolution && resolution <= maxResolution);
        };
        SearchResultAddButtonComponent.prototype.computeTooltip = function () {
            if (this.added) {
                return this.inRange$.value
                    ? 'igo.geo.catalog.layer.removeFromMap'
                    : 'igo.geo.catalog.layer.removeFromMapOutRange';
            }
            else {
                return this.inRange$.value
                    ? 'igo.geo.catalog.layer.addToMap'
                    : 'igo.geo.catalog.layer.addToMapOutRange';
            }
        };
        return SearchResultAddButtonComponent;
    }());
    SearchResultAddButtonComponent.ɵfac = function SearchResultAddButtonComponent_Factory(t) { return new (t || SearchResultAddButtonComponent)(i0__namespace.ɵɵdirectiveInject(LayerService)); };
    SearchResultAddButtonComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SearchResultAddButtonComponent, selectors: [["igo-search-add-button"]], inputs: { layer: "layer", added: "added", map: "map", color: "color" }, decls: 1, vars: 1, consts: [["igoStopPropagation", "", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "mouseenter", "mouseleave", "click", 4, "ngIf"], ["igoStopPropagation", "", "mat-icon-button", "", "tooltip-position", "below", "matTooltipShowDelay", "500", 3, "matTooltip", "color", "mouseenter", "mouseleave", "click"], ["matBadge", "icon", "igoMatBadgeIcon", "eye-off", "igoMatBadgeInverseColor", "true", "matBadgeDisabled", "true", "matBadgeSize", "small", "matBadgePosition", "after", 3, "matBadgeHidden", "svgIcon"]], template: function SearchResultAddButtonComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, SearchResultAddButtonComponent_button_0_Template, 7, 14, "button", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.layer.meta.dataType === "Layer");
            }
        }, directives: [i1__namespace$1.NgIf, i2__namespace.MatButton, i6__namespace.StopPropagationDirective, i3__namespace.MatTooltip, i4__namespace.MatIcon, i9__namespace$1.MatBadge, i6__namespace.IgoBadgeIconDirective], pipes: [i7__namespace.TranslatePipe, i1__namespace$1.AsyncPipe], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchResultAddButtonComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-search-add-button',
                        templateUrl: './search-results-add-button.component.html',
                        styleUrls: ['./search-results-add-button.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: LayerService }]; }, { layer: [{
                    type: i0.Input
                }], added: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] });
    })();

    /**
     * @ignore
     */
    var IgoSearchResultsModule = /** @class */ (function () {
        function IgoSearchResultsModule() {
        }
        return IgoSearchResultsModule;
    }());
    IgoSearchResultsModule.ɵfac = function IgoSearchResultsModule_Factory(t) { return new (t || IgoSearchResultsModule)(); };
    IgoSearchResultsModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoSearchResultsModule });
    IgoSearchResultsModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i2.MatButtonModule,
                i6.IgoCollapsibleModule,
                i6.IgoListModule,
                i6.IgoStopPropagationModule,
                i2$1.IgoLanguageModule,
                i6.IgoMatBadgeIconModule,
                IgoMetadataModule,
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoSearchResultsModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i9$1.MatBadgeModule,
                            i3.MatTooltipModule,
                            i4.MatIconModule,
                            i1$3.MatListModule,
                            i2.MatButtonModule,
                            i6.IgoCollapsibleModule,
                            i6.IgoListModule,
                            i6.IgoStopPropagationModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoMatBadgeIconModule,
                            IgoMetadataModule,
                        ],
                        exports: [
                            SearchResultsComponent,
                            SearchResultAddButtonComponent
                        ],
                        declarations: [
                            SearchResultsComponent,
                            SearchResultsItemComponent,
                            SearchResultAddButtonComponent
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoSearchResultsModule, { declarations: [SearchResultsComponent,
                SearchResultsItemComponent,
                SearchResultAddButtonComponent], imports: [i1$1.CommonModule,
                i9$1.MatBadgeModule,
                i3.MatTooltipModule,
                i4.MatIconModule,
                i1$3.MatListModule,
                i2.MatButtonModule,
                i6.IgoCollapsibleModule,
                i6.IgoListModule,
                i6.IgoStopPropagationModule,
                i2$1.IgoLanguageModule,
                i6.IgoMatBadgeIconModule,
                IgoMetadataModule], exports: [SearchResultsComponent,
                SearchResultAddButtonComponent] });
    })();

    /**
     * This directive makes the mouse coordinate trigger a reverse search on available search sources.
     * The search results are placed into a label, on a cross icon, representing the mouse coordinate.
     * By default, no search sources. Config in config file must be defined.
     * the layer level.
     */
    var SearchPointerSummaryDirective = /** @class */ (function () {
        function SearchPointerSummaryDirective(component, searchService, searchSourceService, mediaService) {
            this.component = component;
            this.searchService = searchService;
            this.searchSourceService = searchSourceService;
            this.mediaService = mediaService;
            this.pointerSearchStore = new i6.EntityStore([]);
            this.reverseSearch$$ = [];
            this.hasPointerReverseSearchSource = false;
            this.searchPointerSummaryFeatureId = 'searchPointerSummaryFeatureId';
            /**
             * The delay where the mouse must be motionless before trigger the reverse search
             */
            this.igoSearchPointerSummaryDelay = 1000;
            /**
             * If the user has enabled or not the directive
             */
            this.igoSearchPointerSummaryEnabled = false;
        }
        Object.defineProperty(SearchPointerSummaryDirective.prototype, "map", {
            /**
             * IGO map
             * @internal
             */
            get: function () {
                return this.component.map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SearchPointerSummaryDirective.prototype, "mapProjection", {
            get: function () {
                return this.component.map.projection;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Start listening to pointermove and reverse search results.
         * @internal
         */
        SearchPointerSummaryDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.listenToMapPointerMove();
            this.subscribeToPointerStore();
            this.map.status$.pipe(operators.take(1)).subscribe(function () {
                _this.store = new FeatureStore([], { map: _this.map });
                _this.initStore();
            });
            // To handle context change without using the contextService.
            this.layers$$ = this.map.layers$.subscribe(function (layers) {
                if (_this.store && !layers.find(function (l) { return l.id === 'searchPointerSummaryId'; })) {
                    _this.initStore();
                }
            });
        };
        /**
         * Initialize the pointer position store
         * @internal
         */
        SearchPointerSummaryDirective.prototype.initStore = function () {
            var store = this.store;
            var layer = new VectorLayer({
                isIgoInternalLayer: true,
                id: 'searchPointerSummaryId',
                title: 'searchPointerSummary',
                zIndex: 900,
                source: new FeatureDataSource(),
                showInLayerList: false,
                exportable: false,
                browsable: false,
                style: pointerPositionSummaryMarker
            });
            tryBindStoreLayer(store, layer);
        };
        SearchPointerSummaryDirective.prototype.ngAfterContentChecked = function () {
            if (!this.searchSourceService.getEnabledSources().filter(sourceCanReverseSearchAsSummary).length) {
                this.hasPointerReverseSearchSource = false;
            }
            else {
                this.hasPointerReverseSearchSource = true;
            }
        };
        /**
         * Stop listening to pointermove and reverse search results.
         * @internal
         */
        SearchPointerSummaryDirective.prototype.ngOnDestroy = function () {
            this.unlistenToMapPointerMove();
            this.unsubscribeToPointerStore();
            this.unsubscribeReverseSearch();
            this.layers$$.unsubscribe();
        };
        /**
         * Subscribe to pointermove result store
         * @internal
         */
        SearchPointerSummaryDirective.prototype.subscribeToPointerStore = function () {
            var _this = this;
            this.store$$ = this.pointerSearchStore.entities$.subscribe(function (resultsUnderPointerPosition) {
                _this.entitiesToPointerOverlay(resultsUnderPointerPosition);
            });
        };
        /**
         * Build an object based on the closest feature by type (base on type and distance properties )
         * @param results SearchResult[]
         * @returns OL style function
         */
        SearchPointerSummaryDirective.prototype.computeSummaryClosestFeature = function (results) {
            var closestResultByType = {};
            results.map(function (result) {
                if (result.data.properties.type && result.data.properties.distance >= 0) {
                    if (closestResultByType.hasOwnProperty(result.data.properties.type)) {
                        var prevDistance = closestResultByType[result.data.properties.type].distance;
                        if (result.data.properties.distance < prevDistance) {
                            var title = result.meta.pointerSummaryTitle || result.meta.title;
                            closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: title };
                        }
                    }
                    else {
                        var title = result.meta.pointerSummaryTitle || result.meta.title;
                        closestResultByType[result.data.properties.type] = { distance: result.data.properties.distance, title: title };
                    }
                }
            });
            return closestResultByType;
        };
        /**
         * convert store entities to a pointer position overlay with label summary on.
         * @param event OL map browser pointer event
         */
        SearchPointerSummaryDirective.prototype.entitiesToPointerOverlay = function (resultsUnderPointerPosition) {
            var closestResultByType = this.computeSummaryClosestFeature(resultsUnderPointerPosition);
            var summarizedClosestType = Object.keys(closestResultByType);
            var processedSummarizedClosestType = [];
            var summary = [];
            resultsUnderPointerPosition.map(function (result) {
                var typeIndex = summarizedClosestType.indexOf(result.data.properties.type);
                if (typeIndex !== -1) {
                    summary.push(closestResultByType[result.data.properties.type].title);
                    summarizedClosestType.splice(typeIndex, 1);
                    processedSummarizedClosestType.push(result.data.properties.type);
                }
                else {
                    if (processedSummarizedClosestType.indexOf(result.data.properties.type) === -1) {
                        summary.push(result.meta.pointerSummaryTitle || result.meta.title);
                    }
                }
            });
            if (summary.length) {
                this.addPointerOverlay(summary.join('\n'));
            }
        };
        /**
         * On map pointermove
         */
        SearchPointerSummaryDirective.prototype.listenToMapPointerMove = function () {
            var _this = this;
            this.pointerMoveListener = this.map.ol.on('pointermove', function (event) { return _this.onMapEvent(event); });
        };
        /**
         * Unsubscribe to pointer store.
         * @internal
         */
        SearchPointerSummaryDirective.prototype.unsubscribeToPointerStore = function () {
            this.store$$.unsubscribe();
        };
        /**
         * Unsubscribe to reverse seatch store.
         * @internal
         */
        SearchPointerSummaryDirective.prototype.unsubscribeReverseSearch = function () {
            this.reverseSearch$$.map(function (s) { return s.unsubscribe(); });
            this.reverseSearch$$ = [];
        };
        /**
         * Stop listening for map pointermove
         * @internal
         */
        SearchPointerSummaryDirective.prototype.unlistenToMapPointerMove = function () {
            olObservable.unByKey(this.pointerMoveListener);
            this.pointerMoveListener = undefined;
        };
        /**
         * Trigger reverse search when the mouse is motionless during the defined delay (pointerMoveDelay).
         * @param event OL map browser pointer event
         */
        SearchPointerSummaryDirective.prototype.onMapEvent = function (event) {
            var _this = this;
            if (event.dragging || !this.igoSearchPointerSummaryEnabled ||
                !this.hasPointerReverseSearchSource || this.mediaService.isTouchScreen()) {
                this.clearLayer();
                return;
            }
            if (typeof this.lastTimeoutRequest !== 'undefined') { // cancel timeout when the mouse moves
                clearTimeout(this.lastTimeoutRequest);
                this.clearLayer();
                this.unsubscribeReverseSearch();
            }
            this.lonLat = olproj.transform(event.coordinate, this.mapProjection, 'EPSG:4326');
            this.lastTimeoutRequest = setTimeout(function () {
                _this.onSearchCoordinate();
            }, this.igoSearchPointerSummaryDelay);
        };
        /**
       * Sort the results by display order.
       * @param r1 First result
       * @param r2 Second result
       */
        SearchPointerSummaryDirective.prototype.sortByOrder = function (r1, r2) {
            return r1.source.displayOrder - r2.source.displayOrder;
        };
        SearchPointerSummaryDirective.prototype.onSearchCoordinate = function () {
            var _this = this;
            this.pointerSearchStore.clear();
            var results = this.searchService.reverseSearch(this.lonLat, { params: { geometry: 'false', icon: 'false' } }, true);
            var _loop_1 = function (i) {
                if (results.length > 0) {
                    this_1.reverseSearch$$.push(results[i].request.subscribe(function (_results) {
                        _this.onSearch({ research: results[i], results: _results });
                    }));
                }
            };
            var this_1 = this;
            for (var i in results) {
                _loop_1(i);
            }
        };
        SearchPointerSummaryDirective.prototype.onSearch = function (event) {
            var results = event.results;
            var newResults = this.pointerSearchStore.all()
                .filter(function (result) { return result.source !== event.research.source; })
                .concat(results);
            this.pointerSearchStore.load(newResults.sort(this.sortByOrder));
        };
        /**
         * Add a feature to the pointer store
         * @param text string
         */
        SearchPointerSummaryDirective.prototype.addPointerOverlay = function (text) {
            this.clearLayer();
            var geometry = new olgeom__namespace.Point(olproj.transform(this.lonLat, 'EPSG:4326', this.mapProjection));
            var feature = new OlFeature__default["default"]({ geometry: geometry });
            var geojsonGeom = new OlGeoJSON__default["default"]().writeGeometryObject(geometry, {
                featureProjection: this.mapProjection,
                dataProjection: this.mapProjection
            });
            var f = {
                type: FEATURE,
                geometry: geojsonGeom,
                projection: this.mapProjection,
                properties: {
                    id: this.searchPointerSummaryFeatureId,
                    pointerSummary: text
                },
                meta: {
                    id: this.searchPointerSummaryFeatureId
                },
                ol: feature
            };
            this.store.setLayerFeatures([f], exports.FeatureMotion.None);
        };
        /**
         * Clear the pointer store features
         */
        SearchPointerSummaryDirective.prototype.clearLayer = function () {
            if (this.store) {
                this.store.clearLayer();
            }
        };
        return SearchPointerSummaryDirective;
    }());
    SearchPointerSummaryDirective.ɵfac = function SearchPointerSummaryDirective_Factory(t) { return new (t || SearchPointerSummaryDirective)(i0__namespace.ɵɵdirectiveInject(MapBrowserComponent, 2), i0__namespace.ɵɵdirectiveInject(SearchService), i0__namespace.ɵɵdirectiveInject(SearchSourceService), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.MediaService)); };
    SearchPointerSummaryDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: SearchPointerSummaryDirective, selectors: [["", "igoSearchPointerSummary", ""]], inputs: { igoSearchPointerSummaryDelay: "igoSearchPointerSummaryDelay", igoSearchPointerSummaryEnabled: "igoSearchPointerSummaryEnabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SearchPointerSummaryDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoSearchPointerSummary]'
                    }]
            }], function () {
            return [{ type: MapBrowserComponent, decorators: [{
                            type: i0.Self
                        }] }, { type: SearchService }, { type: SearchSourceService }, { type: i2__namespace$1.MediaService }];
        }, { igoSearchPointerSummaryDelay: [{
                    type: i0.Input
                }], igoSearchPointerSummaryEnabled: [{
                    type: i0.Input
                }] });
    })();
    /**
     * Create a default style for the pointer position and it's label summary.
     * @param feature OlFeature
     * @returns OL style function
     */
    function pointerPositionSummaryMarker(feature, resolution) {
        return new olstyle__namespace.Style({
            image: new olstyle__namespace.Icon({
                src: './assets/igo2/geo/icons/cross_black_18px.svg',
                imgSize: [18, 18], // for ie
            }),
            text: new olstyle__namespace.Text({
                text: feature.get('pointerSummary'),
                textAlign: 'left',
                textBaseline: 'bottom',
                font: '12px Calibri,sans-serif',
                fill: new olstyle__namespace.Fill({ color: '#000' }),
                backgroundFill: new olstyle__namespace.Fill({ color: 'rgba(255, 255, 255, 0.5)' }),
                backgroundStroke: new olstyle__namespace.Stroke({ color: 'rgba(200, 200, 200, 0.75)', width: 2 }),
                stroke: new olstyle__namespace.Stroke({ color: '#fff', width: 3 }),
                overflow: true,
                offsetX: 10,
                offsetY: -10,
                padding: [2.5, 2.5, 2.5, 2.5]
            })
        });
    }

    var IgoSearchModule = /** @class */ (function () {
        function IgoSearchModule() {
        }
        IgoSearchModule.forRoot = function () {
            return {
                ngModule: IgoSearchModule,
                providers: [
                    SearchService,
                    provideSearchSourceService(),
                    provideDefaultIChercheSearchResultFormatter(),
                    provideDefaultCoordinatesSearchResultFormatter(),
                    provideILayerSearchResultFormatter()
                ]
            };
        };
        return IgoSearchModule;
    }());
    IgoSearchModule.ɵfac = function IgoSearchModule_Factory(t) { return new (t || IgoSearchModule)(); };
    IgoSearchModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoSearchModule });
    IgoSearchModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                IgoSearchBarModule,
                IgoSearchSelectorModule,
                IgoSearchResultsModule,
                IgoSearchSettingsModule
            ], IgoSearchBarModule,
            IgoSearchSelectorModule,
            IgoSearchResultsModule,
            IgoSearchSettingsModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoSearchModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            IgoSearchBarModule,
                            IgoSearchSelectorModule,
                            IgoSearchResultsModule,
                            IgoSearchSettingsModule
                        ],
                        exports: [
                            IgoSearchBarModule,
                            IgoSearchSelectorModule,
                            IgoSearchResultsModule,
                            IgoSearchSettingsModule,
                            SearchPointerSummaryDirective
                        ],
                        declarations: [SearchPointerSummaryDirective]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoSearchModule, { declarations: [SearchPointerSummaryDirective], imports: [i1$1.CommonModule,
                IgoSearchBarModule,
                IgoSearchSelectorModule,
                IgoSearchResultsModule,
                IgoSearchSettingsModule], exports: [IgoSearchBarModule,
                IgoSearchSelectorModule,
                IgoSearchResultsModule,
                IgoSearchSettingsModule,
                SearchPointerSummaryDirective] });
    })();

    function ToastComponent_button_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r3_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 7);
            i0__namespace.ɵɵlistener("click", function ToastComponent_button_5_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r3_1); var ctx_r2 = i0__namespace.ɵɵnextContext(); return ctx_r2.zoomToFeatureExtent(); });
            i0__namespace.ɵɵelement(1, "mat-icon", 8);
            i0__namespace.ɵɵelementEnd();
        }
    }
    var _c0 = function () { return ["collapsed", "initial"]; };
    var ToastComponent = /** @class */ (function () {
        function ToastComponent() {
            this.format = new OlGeoJSON__default["default"]();
            this.opened = new i0.EventEmitter();
        }
        Object.defineProperty(ToastComponent.prototype, "expanded", {
            get: function () {
                return this._expanded;
            },
            set: function (value) {
                this.state = value ? 'expanded' : 'collapsed';
                this._expanded = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "feature", {
            get: function () {
                return this._feature;
            },
            set: function (value) {
                this._feature = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToastComponent.prototype, "title", {
            /**
             * @internal
             */
            get: function () { return i6.getEntityTitle(this.feature); },
            enumerable: false,
            configurable: true
        });
        ToastComponent.prototype.toggle = function () {
            this.expanded = !this.expanded;
            this.opened.emit(this.expanded);
        };
        ToastComponent.prototype.zoomToFeatureExtent = function () {
            if (this.feature.geometry) {
                var olFeature = this.format.readFeature(this.feature, {
                    dataProjection: this.feature.projection,
                    featureProjection: this.map.projection
                });
                moveToOlFeatures(this.map, [olFeature], exports.FeatureMotion.Zoom);
            }
        };
        ToastComponent.prototype.swipe = function (action) {
            if (action === ToastComponent.SWIPE_ACTION.UP) {
                if (!this.expanded) {
                    this.toggle();
                }
            }
            else if (action === ToastComponent.SWIPE_ACTION.DOWN) {
                if (this.expanded) {
                    this.toggle();
                }
            }
        };
        return ToastComponent;
    }());
    ToastComponent.SWIPE_ACTION = {
        UP: 'swipeup',
        DOWN: 'swipedown'
    };
    ToastComponent.ɵfac = function ToastComponent_Factory(t) { return new (t || ToastComponent)(); };
    ToastComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ToastComponent, selectors: [["igo-toast"]], inputs: { expanded: "expanded", map: "map", feature: "feature" }, outputs: { opened: "opened" }, decls: 7, vars: 6, consts: [["collapsedMobile", "51px", "expandedMobile", "300px", 3, "state", "swipeup", "swipedown"], ["flex", ""], [3, "title"], ["mat-icon-button", "", "panelLeftButton", "", 3, "click"], [3, "svgIcon"], ["mat-icon-button", "", "panelRightButton", "", "class", "igo-icon-button", 3, "click", 4, "ngIf"], [3, "feature"], ["mat-icon-button", "", "panelRightButton", "", 1, "igo-icon-button", 3, "click"], ["svgIcon", "zoom-in"]], template: function ToastComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "igo-flexible", 0, 1);
                i0__namespace.ɵɵlistener("swipeup", function ToastComponent_Template_igo_flexible_swipeup_0_listener($event) { return ctx.swipe($event.type); })("swipedown", function ToastComponent_Template_igo_flexible_swipedown_0_listener($event) { return ctx.swipe($event.type); });
                i0__namespace.ɵɵelementStart(2, "igo-panel", 2);
                i0__namespace.ɵɵelementStart(3, "button", 3);
                i0__namespace.ɵɵlistener("click", function ToastComponent_Template_button_click_3_listener() { return ctx.toggle(); });
                i0__namespace.ɵɵelement(4, "mat-icon", 4);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtemplate(5, ToastComponent_button_5_Template, 2, 0, "button", 5);
                i0__namespace.ɵɵelement(6, "igo-feature-details", 6);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(1);
                i0__namespace.ɵɵproperty("state", ctx.state);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("title", ctx.title);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("svgIcon", i0__namespace.ɵɵpureFunction0(5, _c0).indexOf(_r0.state) >= 0 ? "arrow_upward" : "arrow_downward");
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", ctx.feature.geometry);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("feature", ctx.feature);
            }
        }, directives: [i6__namespace.FlexibleComponent, i6__namespace.PanelComponent, i2__namespace.MatButton, i4__namespace.MatIcon, i1__namespace$1.NgIf, FeatureDetailsComponent], styles: ["[_nghost-%COMP%]{position:absolute;bottom:0px;width:100%;max-height:calc(100% - 50px);background-color:#fff}igo-feature-details[_ngcontent-%COMP%]     table{width:100%}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ToastComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-toast',
                        templateUrl: './toast.component.html',
                        styleUrls: ['./toast.component.scss']
                    }]
            }], function () { return []; }, { expanded: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], feature: [{
                    type: i0.Input
                }], opened: [{
                    type: i0.Output
                }] });
    })();

    var IgoToastModule = /** @class */ (function () {
        function IgoToastModule() {
        }
        IgoToastModule.forRoot = function () {
            return {
                ngModule: IgoToastModule
            };
        };
        return IgoToastModule;
    }());
    IgoToastModule.ɵfac = function IgoToastModule_Factory(t) { return new (t || IgoToastModule)(); };
    IgoToastModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoToastModule });
    IgoToastModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i6.IgoPanelModule,
                i6.IgoFlexibleModule,
                IgoFeatureModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoToastModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i4.MatIconModule,
                            i2.MatButtonModule,
                            i6.IgoPanelModule,
                            i6.IgoFlexibleModule,
                            IgoFeatureModule
                        ],
                        exports: [ToastComponent],
                        declarations: [ToastComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoToastModule, { declarations: [ToastComponent], imports: [i1$1.CommonModule,
                i4.MatIconModule,
                i2.MatButtonModule,
                i6.IgoPanelModule,
                i6.IgoFlexibleModule,
                IgoFeatureModule], exports: [ToastComponent] });
    })();

    var OgcFilterComponent = /** @class */ (function () {
        function OgcFilterComponent(cdRef) {
            this.cdRef = cdRef;
            /**
             * Event emitted on complete
             */
            this.complete = new i0.EventEmitter();
            /**
             * Event emitted on cancel
             */
            this.cancel = new i0.EventEmitter();
        }
        /**
         * Implemented as part of OnUpdateInputs
         */
        OgcFilterComponent.prototype.onUpdateInputs = function () {
            this.cdRef.detectChanges();
        };
        /**
         * On close, emit the cancel event
         */
        OgcFilterComponent.prototype.onClose = function () {
            this.cancel.emit();
        };
        return OgcFilterComponent;
    }());
    OgcFilterComponent.ɵfac = function OgcFilterComponent_Factory(t) { return new (t || OgcFilterComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    OgcFilterComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: OgcFilterComponent, selectors: [["igo-ogc-filter"]], inputs: { layer: "layer", map: "map" }, outputs: { complete: "complete", cancel: "cancel" }, decls: 1, vars: 3, consts: [["igoListItem", "", 3, "layer", "header", "map"]], template: function OgcFilterComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelement(0, "igo-ogc-filterable-item", 0);
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("layer", ctx.layer)("header", false)("map", ctx.map);
            }
        }, directives: [OgcFilterableItemComponent], styles: [""], changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OgcFilterComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-ogc-filter',
                        templateUrl: './ogc-filter.component.html',
                        styleUrls: ['./ogc-filter.component.scss'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, { layer: [{
                    type: i0.Input
                }], map: [{
                    type: i0.Input
                }], complete: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }] });
    })();

    var OgcFilterWidget = new i0.InjectionToken('OgcFilterWidget');
    function ogcFilterWidgetFactory(widgetService) {
        return widgetService.create(OgcFilterComponent);
    }
    function provideOgcFilterWidget() {
        return {
            provide: OgcFilterWidget,
            useFactory: ogcFilterWidgetFactory,
            deps: [i6.WidgetService]
        };
    }

    /**
     * @ignore
     */
    var IgoOgcFilterModule = /** @class */ (function () {
        function IgoOgcFilterModule() {
        }
        return IgoOgcFilterModule;
    }());
    IgoOgcFilterModule.ɵfac = function IgoOgcFilterModule_Factory(t) { return new (t || IgoOgcFilterModule)(); };
    IgoOgcFilterModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoOgcFilterModule });
    IgoOgcFilterModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i2.MatButtonModule,
                i2$1.IgoLanguageModule,
                IgoFilterModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoOgcFilterModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2.MatButtonModule,
                            i2$1.IgoLanguageModule,
                            IgoFilterModule
                        ],
                        exports: [OgcFilterComponent],
                        declarations: [OgcFilterComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoOgcFilterModule, { declarations: [OgcFilterComponent], imports: [i1$1.CommonModule,
                i2.MatButtonModule,
                i2$1.IgoLanguageModule,
                IgoFilterModule], exports: [OgcFilterComponent] });
    })();

    var WfsWorkspace = /** @class */ (function (_super) {
        __extends(WfsWorkspace, _super);
        function WfsWorkspace(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            _this.map.viewController.resolution$.subscribe(function (mapResolution) {
                if (mapResolution > _this.layer.minResolution && mapResolution < _this.layer.maxResolution) {
                    _this.inResolutionRange$.next(true);
                }
                else {
                    _this.inResolutionRange$.next(false);
                }
            });
            return _this;
        }
        Object.defineProperty(WfsWorkspace.prototype, "layer", {
            get: function () { return this.options.layer; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WfsWorkspace.prototype, "map", {
            get: function () { return this.options.map; },
            enumerable: false,
            configurable: true
        });
        WfsWorkspace.prototype.getLayerWksOptionTabQuery = function () {
            var _a;
            if (((_a = this.layer.options.workspace.queryOptions) === null || _a === void 0 ? void 0 : _a.tabQuery) !== undefined) {
                return this.layer.options.workspace.queryOptions.tabQuery;
            }
            return true;
        };
        WfsWorkspace.prototype.getLayerWksOptionMapQuery = function () {
            var _a;
            if (((_a = this.layer.options.workspace.queryOptions) === null || _a === void 0 ? void 0 : _a.mapQueryOnOpenTab) !== undefined) {
                return this.layer.options.workspace.queryOptions.mapQueryOnOpenTab;
            }
            return true;
        };
        WfsWorkspace.prototype.getInResolutionRange = function () {
            return this.inResolutionRange$.value;
        };
        return WfsWorkspace;
    }(i6.Workspace));

    var WfsWorkspaceService = /** @class */ (function () {
        function WfsWorkspaceService(storageService) {
            this.storageService = storageService;
            this.ws$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(WfsWorkspaceService.prototype, "zoomAuto", {
            get: function () {
                return this.storageService.get('zoomAuto');
            },
            enumerable: false,
            configurable: true
        });
        WfsWorkspaceService.prototype.createWorkspace = function (layer, map) {
            var _a;
            if (((_a = layer.options.workspace) === null || _a === void 0 ? void 0 : _a.enabled) === false || layer.dataSource.options.edition) {
                return;
            }
            layer.options.workspace = Object.assign({}, layer.options.workspace, {
                srcId: layer.id,
                workspaceId: layer.id,
                enabled: true
            });
            var wks = new WfsWorkspace({
                id: layer.id,
                title: layer.title,
                layer: layer,
                map: map,
                entityStore: this.createFeatureStore(layer, map),
                actionStore: new i6.ActionStore([]),
                meta: {
                    tableTemplate: undefined
                }
            });
            this.createTableTemplate(wks, layer);
            return wks;
        };
        WfsWorkspaceService.prototype.createFeatureStore = function (layer, map) {
            var store = new FeatureStore([], { map: map });
            store.bindLayer(layer);
            var loadingStrategy = new FeatureStoreLoadingLayerStrategy({});
            var inMapExtentStrategy = new FeatureStoreInMapExtentStrategy({});
            var inMapResolutionStrategy = new FeatureStoreInMapResolutionStrategy({});
            var selectedRecordStrategy = new i6.EntityStoreFilterSelectionStrategy({});
            var selectionStrategy = new FeatureStoreSelectionStrategy({
                layer: new VectorLayer({
                    zIndex: 300,
                    source: new FeatureDataSource(),
                    style: undefined,
                    showInLayerList: false,
                    exportable: false,
                    browsable: false
                }),
                map: map,
                hitTolerance: 15,
                motion: this.zoomAuto ? exports.FeatureMotion.Default : exports.FeatureMotion.None,
                many: true,
                dragBox: true
            });
            store.addStrategy(loadingStrategy, true);
            store.addStrategy(inMapExtentStrategy, true);
            store.addStrategy(inMapResolutionStrategy, true);
            store.addStrategy(selectionStrategy, true);
            store.addStrategy(selectedRecordStrategy, false);
            store.addStrategy(this.createFilterInMapExtentOrResolutionStrategy(), true);
            return store;
        };
        WfsWorkspaceService.prototype.createTableTemplate = function (workspace, layer) {
            var _this = this;
            var fields = layer.dataSource.options.sourceFields || [];
            var relations = layer.dataSource.options.relations || [];
            if (fields.length === 0) {
                workspace.entityStore.entities$.pipe(operators.skipWhile(function (val) { return val.length === 0; }), operators.take(1)).subscribe(function (entities) {
                    var ol = entities[0].ol;
                    var columnsFromFeatures = ol.getKeys()
                        .filter(function (col) { return !col.startsWith('_') &&
                        col !== 'geometry' &&
                        col !== ol.getGeometryName() &&
                        !col.match(/boundedby/gi); })
                        .map(function (key) {
                        return {
                            name: "properties." + key,
                            title: key,
                            renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML
                        };
                    });
                    workspace.meta.tableTemplate = {
                        selection: true,
                        sort: true,
                        columns: columnsFromFeatures
                    };
                });
                return;
            }
            var columns = fields.map(function (field) {
                return {
                    name: "properties." + field.name,
                    title: field.alias ? field.alias : field.name,
                    renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML,
                    tooltip: field.tooltip
                };
            });
            var relationsColumn = relations.map(function (relation) {
                return {
                    name: "properties." + relation.name,
                    title: relation.alias ? relation.alias : relation.name,
                    renderer: i6.EntityTableColumnRenderer.Icon,
                    icon: relation.icon,
                    parent: relation.parent,
                    type: 'relation',
                    tooltip: relation.tooltip,
                    onClick: function () {
                        _this.ws$.next(relation.title);
                    },
                    cellClassFunc: function () {
                        return { 'class_icon': true };
                    }
                };
            });
            columns.push.apply(columns, __spreadArray([], __read(relationsColumn)));
            workspace.meta.tableTemplate = {
                selection: true,
                sort: true,
                columns: columns
            };
        };
        WfsWorkspaceService.prototype.createFilterInMapExtentOrResolutionStrategy = function () {
            var filterClauseFunc = function (record) {
                return record.state.inMapExtent === true && record.state.inMapResolution === true;
            };
            return new i6.EntityStoreFilterCustomFuncStrategy({ filterClauseFunc: filterClauseFunc });
        };
        return WfsWorkspaceService;
    }());
    WfsWorkspaceService.ɵfac = function WfsWorkspaceService_Factory(t) { return new (t || WfsWorkspaceService)(i0__namespace.ɵɵinject(i2__namespace$1.StorageService)); };
    WfsWorkspaceService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: WfsWorkspaceService, factory: WfsWorkspaceService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WfsWorkspaceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.StorageService }]; }, null);
    })();

    var WmsWorkspaceService = /** @class */ (function () {
        function WmsWorkspaceService(layerService, storageService) {
            this.layerService = layerService;
            this.storageService = storageService;
            this.ws$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(WmsWorkspaceService.prototype, "zoomAuto", {
            get: function () {
                return this.storageService.get('zoomAuto');
            },
            enumerable: false,
            configurable: true
        });
        WmsWorkspaceService.prototype.createWorkspace = function (layer, map) {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            if (!layer.options.workspace ||
                map.layers.find(function (lay) { return lay.id === layer.id + '.WfsWorkspaceTableDest'; }) ||
                layer.dataSource.options.edition) {
                return;
            }
            var dataSource = layer.dataSource;
            var wmsLinkId = layer.id + '.WmsWorkspaceTableSrc';
            var wfsLinkId = layer.id + '.WfsWorkspaceTableDest';
            if (!layer.options.linkedLayers) {
                layer.options.linkedLayers = { linkId: wmsLinkId, links: [] };
            }
            var linkProperties = {
                bidirectionnal: true,
                syncedDelete: true,
                linkedIds: [wfsLinkId],
                properties: [
                    exports.LinkedProperties.ZINDEX,
                    exports.LinkedProperties.VISIBLE
                ]
            };
            if (!((_a = layer.options.workspace) === null || _a === void 0 ? void 0 : _a.minResolution)) {
                linkProperties.properties.push(exports.LinkedProperties.MINRESOLUTION);
            }
            var hasOgcFilters = false;
            if ((_b = dataSource.options.ogcFilters) === null || _b === void 0 ? void 0 : _b.enabled) {
                linkProperties.properties.push(exports.LinkedProperties.OGCFILTERS);
                hasOgcFilters = true;
            }
            if (!((_c = layer.options.workspace) === null || _c === void 0 ? void 0 : _c.maxResolution)) {
                linkProperties.properties.push(exports.LinkedProperties.MAXRESOLUTION);
            }
            var clonedLinks = [];
            if (layer.options.linkedLayers.links) {
                clonedLinks = JSON.parse(JSON.stringify(layer.options.linkedLayers.links));
            }
            clonedLinks.push(linkProperties);
            layer.options.linkedLayers.linkId = layer.options.linkedLayers.linkId ? layer.options.linkedLayers.linkId : wmsLinkId,
                layer.options.linkedLayers.links = clonedLinks;
            var wks;
            var wksLayerOption = {
                srcId: layer.id,
                workspaceId: undefined,
                enabled: false,
                queryOptions: {
                    mapQueryOnOpenTab: (_e = (_d = layer.options.workspace) === null || _d === void 0 ? void 0 : _d.queryOptions) === null || _e === void 0 ? void 0 : _e.mapQueryOnOpenTab,
                    tabQuery: (_g = (_f = layer.options.workspace) === null || _f === void 0 ? void 0 : _f.queryOptions) === null || _g === void 0 ? void 0 : _g.tabQuery
                },
                pageSize: (_h = layer.options.workspace) === null || _h === void 0 ? void 0 : _h.pageSize,
                pageSizeOptions: (_j = layer.options.workspace) === null || _j === void 0 ? void 0 : _j.pageSizeOptions
            };
            this.layerService
                .createAsyncLayer({
                isIgoInternalLayer: true,
                id: wfsLinkId,
                linkedLayers: {
                    linkId: wfsLinkId
                },
                workspace: wksLayerOption,
                showInLayerList: false,
                opacity: 0,
                title: layer.title,
                minResolution: ((_k = layer.options.workspace) === null || _k === void 0 ? void 0 : _k.minResolution) || layer.minResolution || 0,
                maxResolution: ((_l = layer.options.workspace) === null || _l === void 0 ? void 0 : _l.maxResolution) || layer.maxResolution || Infinity,
                sourceOptions: {
                    download: dataSource.options.download,
                    type: 'wfs',
                    url: dataSource.options.urlWfs || dataSource.options.url,
                    queryable: true,
                    relations: dataSource.options.relations,
                    queryTitle: dataSource.options.queryTitle,
                    queryFormatAsWms: dataSource.options.queryFormatAsWms,
                    params: dataSource.options.paramsWFS,
                    ogcFilters: Object.assign({}, dataSource.ogcFilters$.value, { enabled: hasOgcFilters }),
                    sourceFields: dataSource.options.sourceFields || undefined
                }
            })
                .subscribe(function (workspaceLayer) {
                var _a, _b, _c, _d, _e, _f, _g;
                map.addLayer(workspaceLayer);
                layer.ol.setProperties({ linkedLayers: { linkId: layer.options.linkedLayers.linkId, links: clonedLinks } }, false);
                workspaceLayer.dataSource.ol.refresh();
                if (!((_a = layer.options.workspace) === null || _a === void 0 ? void 0 : _a.enabled)) {
                    return;
                }
                wks = new WfsWorkspace({
                    id: layer.id,
                    title: layer.title,
                    layer: workspaceLayer,
                    map: map,
                    entityStore: _this.createFeatureStore(workspaceLayer, map),
                    actionStore: new i6.ActionStore([]),
                    meta: {
                        tableTemplate: undefined
                    }
                });
                _this.createTableTemplate(wks, workspaceLayer);
                workspaceLayer.options.workspace.workspaceId = workspaceLayer.id;
                layer.options.workspace = Object.assign({}, layer.options.workspace, {
                    enabled: true,
                    srcId: layer.id,
                    workspaceId: workspaceLayer.id,
                    queryOptions: {
                        mapQueryOnOpenTab: (_c = (_b = layer.options.workspace) === null || _b === void 0 ? void 0 : _b.queryOptions) === null || _c === void 0 ? void 0 : _c.mapQueryOnOpenTab,
                        tabQuery: (_e = (_d = layer.options.workspace) === null || _d === void 0 ? void 0 : _d.queryOptions) === null || _e === void 0 ? void 0 : _e.tabQuery
                    },
                    pageSize: (_f = layer.options.workspace) === null || _f === void 0 ? void 0 : _f.pageSize,
                    pageSizeOptions: (_g = layer.options.workspace) === null || _g === void 0 ? void 0 : _g.pageSizeOptions
                });
                delete dataSource.options.download;
                return wks;
            });
            return wks;
        };
        WmsWorkspaceService.prototype.createFeatureStore = function (layer, map) {
            var store = new FeatureStore([], { map: map });
            store.bindLayer(layer);
            var loadingStrategy = new FeatureStoreLoadingLayerStrategy({});
            var inMapExtentStrategy = new FeatureStoreInMapExtentStrategy({});
            var inMapResolutionStrategy = new FeatureStoreInMapResolutionStrategy({});
            var selectedRecordStrategy = new i6.EntityStoreFilterSelectionStrategy({});
            var selectionStrategy = new FeatureStoreSelectionStrategy({
                layer: new VectorLayer({
                    zIndex: 300,
                    source: new FeatureDataSource(),
                    style: undefined,
                    showInLayerList: false,
                    exportable: false,
                    browsable: false
                }),
                map: map,
                hitTolerance: 15,
                motion: this.zoomAuto ? exports.FeatureMotion.Default : exports.FeatureMotion.None,
                many: true,
                dragBox: true
            });
            store.addStrategy(loadingStrategy, true);
            store.addStrategy(inMapExtentStrategy, true);
            store.addStrategy(inMapResolutionStrategy, true);
            store.addStrategy(selectionStrategy, true);
            store.addStrategy(selectedRecordStrategy, false);
            store.addStrategy(this.createFilterInMapExtentOrResolutionStrategy(), true);
            return store;
        };
        WmsWorkspaceService.prototype.createTableTemplate = function (workspace, layer) {
            var _this = this;
            var fields = layer.dataSource.options.sourceFields || [];
            var relations = layer.dataSource.options.relations || [];
            if (fields.length === 0) {
                workspace.entityStore.entities$.pipe(operators.skipWhile(function (val) { return val.length === 0; }), operators.take(1)).subscribe(function (entities) {
                    var ol = entities[0].ol;
                    var columnsFromFeatures = ol.getKeys()
                        .filter(function (col) { return !col.startsWith('_') &&
                        col !== 'geometry' &&
                        col !== ol.getGeometryName() &&
                        !col.match(/boundedby/gi); })
                        .map(function (key) {
                        return {
                            name: "properties." + key,
                            title: key,
                            renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML
                        };
                    });
                    workspace.meta.tableTemplate = {
                        selection: true,
                        sort: true,
                        columns: columnsFromFeatures
                    };
                });
                return;
            }
            var columns = fields.map(function (field) {
                return {
                    name: "properties." + field.name,
                    title: field.alias ? field.alias : field.name,
                    renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML,
                    tooltip: field.tooltip
                };
            });
            var relationsColumn = relations.map(function (relation) {
                return {
                    name: "properties." + relation.name,
                    title: relation.alias ? relation.alias : relation.name,
                    renderer: i6.EntityTableColumnRenderer.Icon,
                    icon: relation.icon,
                    parent: relation.parent,
                    type: 'relation',
                    tooltip: relation.tooltip,
                    onClick: function () {
                        _this.ws$.next(relation.title);
                    },
                    cellClassFunc: function () {
                        return { 'class_icon': true };
                    }
                };
            });
            columns.push.apply(columns, __spreadArray([], __read(relationsColumn)));
            workspace.meta.tableTemplate = {
                selection: true,
                sort: true,
                columns: columns
            };
        };
        WmsWorkspaceService.prototype.createFilterInMapExtentOrResolutionStrategy = function () {
            var filterClauseFunc = function (record) {
                return record.state.inMapExtent === true && record.state.inMapResolution === true;
            };
            return new i6.EntityStoreFilterCustomFuncStrategy({ filterClauseFunc: filterClauseFunc });
        };
        return WmsWorkspaceService;
    }());
    WmsWorkspaceService.ɵfac = function WmsWorkspaceService_Factory(t) { return new (t || WmsWorkspaceService)(i0__namespace.ɵɵinject(LayerService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService)); };
    WmsWorkspaceService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: WmsWorkspaceService, factory: WmsWorkspaceService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WmsWorkspaceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: LayerService }, { type: i2__namespace$1.StorageService }]; }, null);
    })();

    var ConfirmationPopupComponent = /** @class */ (function () {
        function ConfirmationPopupComponent(dialogRef, languageService, data) {
            this.dialogRef = dialogRef;
            this.languageService = languageService;
            this.data = data;
        }
        ConfirmationPopupComponent.prototype.cancelAction = function () {
            this.data.cancel = true;
            this.dialogRef.close(this.data.cancel);
        };
        ConfirmationPopupComponent.prototype.confirmedAction = function () {
            this.data.cancel = false;
            this.dialogRef.close(this.data.cancel);
        };
        return ConfirmationPopupComponent;
    }());
    ConfirmationPopupComponent.ɵfac = function ConfirmationPopupComponent_Factory(t) { return new (t || ConfirmationPopupComponent)(i0__namespace.ɵɵdirectiveInject(i1__namespace.MatDialogRef), i0__namespace.ɵɵdirectiveInject(i2__namespace$1.LanguageService), i0__namespace.ɵɵdirectiveInject(i1.MAT_DIALOG_DATA)); };
    ConfirmationPopupComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ConfirmationPopupComponent, selectors: [["igo-confirmation-popup-component"]], decls: 8, vars: 2, consts: [["mat-dialog-content", ""], [1, "mat-typography"], ["mat-dialog-actions", ""], ["mat-raised-button", "", "color", "primary", 3, "click"], ["mat-raised-button", "", 3, "click"]], template: function ConfirmationPopupComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵelementStart(1, "p", 1);
                i0__namespace.ɵɵtext(2);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(3, "div", 2);
                i0__namespace.ɵɵelementStart(4, "button", 3);
                i0__namespace.ɵɵlistener("click", function ConfirmationPopupComponent_Template_button_click_4_listener() { return ctx.confirmedAction(); });
                i0__namespace.ɵɵtext(5, "Ok ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementStart(6, "button", 4);
                i0__namespace.ɵɵlistener("click", function ConfirmationPopupComponent_Template_button_click_6_listener() { return ctx.cancelAction(); });
                i0__namespace.ɵɵtext(7);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵelementEnd();
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵtextInterpolate(ctx.data.type === "add" ? ctx.languageService.translate.instant("igo.geo.workspace.addConfirmation") : ctx.languageService.translate.instant("igo.geo.workspace.deleteConfirmation"));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵtextInterpolate1("", ctx.languageService.translate.instant("igo.geo.workspace.cancel"), " ");
            }
        }, directives: [i1__namespace.MatDialogContent, i1__namespace.MatDialogActions, i2__namespace.MatButton], styles: ["div.mat-dialog-actions[_ngcontent-%COMP%]{justify-content:center}"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ConfirmationPopupComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'igo-confirmation-popup-component',
                        templateUrl: './confirmation-popup.component.html',
                        styleUrls: ['./confirmation-popup.component.scss']
                    }]
            }], function () {
            return [{ type: i1__namespace.MatDialogRef }, { type: i2__namespace$1.LanguageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }];
        }, null);
    })();

    var EditionWorkspace = /** @class */ (function (_super) {
        __extends(EditionWorkspace, _super);
        function EditionWorkspace(options, editionWorkspaceService, dialog, configService) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.editionWorkspaceService = editionWorkspaceService;
            _this.dialog = dialog;
            _this.configService = configService;
            _this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            _this.olDrawingLayerSource = new OlVectorSource__default["default"]();
            _this.geometryType = exports.GeometryType; // Reference to the GeometryType enum
            _this.modifyStyle = new olstyle__namespace.Style({
                stroke: new olstyle__namespace.Stroke({
                    color: 'rgba(255,255,255,1)',
                    width: 1
                }),
                fill: new olstyle__namespace.Fill({
                    color: 'rgba(0,161,222,1)'
                }),
                image: new olstyle__namespace.Circle({
                    radius: 7,
                    stroke: new olstyle__namespace.Stroke({
                        color: 'rgba(255,255,255,1)',
                        width: 1
                    }),
                    fill: new olstyle__namespace.Fill({
                        color: 'rgba(0,161,222,1)'
                    })
                })
            });
            _this.filterClauseFunc = function (record) {
                return record.state.newFeature === true;
            };
            _this.map.viewController.resolution$.subscribe(function (mapResolution) {
                if (mapResolution > _this.layer.minResolution && mapResolution < _this.layer.maxResolution) {
                    _this.inResolutionRange$.next(true);
                }
                else {
                    _this.inResolutionRange$.next(false);
                }
            });
            _this.drawControl = _this.createDrawControl();
            _this.drawControl.setGeometryType(_this.geometryType.Point);
            _this.map.removeLayer(_this.olDrawingLayer);
            _this.olDrawingLayer = new VectorLayer({
                id: 'igo-draw-layer',
                title: 'edition',
                zIndex: 300,
                source: new FeatureDataSource(),
                showInLayerList: false,
                exportable: false,
                browsable: false,
                workspace: {
                    enabled: false
                },
            });
            return _this;
        }
        Object.defineProperty(EditionWorkspace.prototype, "layer", {
            get: function () { return this.options.layer; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EditionWorkspace.prototype, "map", {
            get: function () { return this.options.map; },
            enumerable: false,
            configurable: true
        });
        EditionWorkspace.prototype.getInResolutionRange = function () {
            return this.inResolutionRange$.value;
        };
        EditionWorkspace.prototype.deleteFeature = function (feature, workspace) {
            var _this = this;
            setTimeout(function () {
                var dialogRef = _this.dialog.open(ConfirmationPopupComponent, {
                    disableClose: false,
                    data: { type: 'delete' }
                });
                dialogRef.afterClosed().subscribe(function (result) {
                    var e_1, _b;
                    if (result === false) {
                        var baseUrl = workspace.layer.dataSource.options.edition.baseUrl;
                        var deleteUrl = workspace.layer.dataSource.options.edition.deleteUrl;
                        var id = void 0;
                        var url = void 0;
                        if (baseUrl) {
                            url = _this.configService.getConfig('edition.url') + baseUrl + '?' + deleteUrl;
                        }
                        else {
                            url = _this.configService.getConfig('edition.url') + deleteUrl;
                        }
                        try {
                            for (var _c = __values(workspace.meta.tableTemplate.columns), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var column = _d.value;
                                for (var property in feature.properties) {
                                    var columnName = column.name;
                                    if (columnName.includes('properties.')) {
                                        columnName = columnName.split('.')[1];
                                    }
                                    if (columnName === property && column.primary === true) {
                                        id = feature.properties[property];
                                    }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        if (url) {
                            url += id;
                            _this.editionWorkspaceService.deleteFeature(workspace, url);
                        }
                    }
                });
            }, 250);
        };
        EditionWorkspace.prototype.editFeature = function (feature, workspace) {
            var e_2, _b;
            feature.edition = true;
            var id;
            var find = false;
            var editionOpt = workspace.layer.dataSource.options.edition;
            var _loop_1 = function (column) {
                // Update domain list
                if (column.type === 'list' || column.type === 'autocomplete') {
                    this_1.editionWorkspaceService.getDomainValues(column.relation.table).subscribe(function (result) {
                        column.domainValues = result;
                    });
                }
                if (find === false) {
                    for (var property in feature.properties) {
                        var columnName = column.name;
                        if (columnName.includes('properties.')) {
                            columnName = columnName.split('.')[1];
                        }
                        if (columnName === property && column.primary === true) {
                            id = feature.properties[property];
                            find = true;
                            break;
                        }
                    }
                }
            };
            var this_1 = this;
            try {
                for (var _c = __values(workspace.meta.tableTemplate.columns), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var column = _d.value;
                    _loop_1(column);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (id) {
                feature.original_properties = JSON.parse(JSON.stringify(feature.properties));
                feature.original_geometry = feature.geometry;
                feature.idkey = id;
                this.addFeatureToStore(feature, workspace);
            }
            else {
                // Only for edition with it's own geometry
                if (!feature.newFeature && editionOpt.geomType) {
                    feature.newFeature = true;
                    this.editionWorkspaceService.adding$.next(true);
                    workspace.entityStore.state.updateAll({ newFeature: false });
                    workspace.entityStore.stateView.filter(this.filterClauseFunc);
                    if (editionOpt.addWithDraw) {
                        var geometryType = editionOpt.geomType;
                        this.onGeometryTypeChange(geometryType, feature, workspace);
                    }
                    else {
                        workspace.entityStore.insert(feature);
                        workspace.entityStore.state.update(feature, { newFeature: true }, true);
                    }
                }
            }
        };
        /**
         * Create a Draw Control
         * @param fillColor the fill color
         * @param strokeColor the stroke color
         * @param strokeWidth the stroke width
         * @returns a Draw Control
         */
        EditionWorkspace.prototype.createDrawControl = function (fillColor, strokeColor, strokeWidth) {
            var drawControl = new DrawControl({
                geometryType: undefined,
                drawingLayerSource: this.olDrawingLayerSource,
                drawingLayerStyle: new olstyle__namespace.Style({}),
                interactionStyle: createInteractionStyle(fillColor, strokeColor, strokeWidth),
            });
            return drawControl;
        };
        /**
         * Called when the user selects a new geometry type
         * @param geometryType the geometry type selected by the user
         */
        EditionWorkspace.prototype.onGeometryTypeChange = function (geometryType, feature, workspace) {
            this.drawControl.setGeometryType(geometryType);
            this.toggleDrawControl(feature, workspace);
        };
        /**
         * Activate the correct control
         */
        EditionWorkspace.prototype.toggleDrawControl = function (feature, workspace) {
            this.deactivateDrawControl();
            this.activateDrawControl(feature, workspace);
        };
        /**
         * Deactivate the active draw control
         */
        EditionWorkspace.prototype.deactivateDrawControl = function () {
            if (!this.drawControl) {
                return;
            }
            if (this.drawEnd$$) {
                this.drawEnd$$.unsubscribe();
            }
            this.drawControl.setOlMap(undefined);
        };
        /**
         * Activate a given control
         */
        EditionWorkspace.prototype.activateDrawControl = function (feature, workspace) {
            var _this = this;
            this.drawEnd$$ = this.drawControl.end$.subscribe(function (olGeometry) {
                _this.addFeatureToStore(feature, workspace, olGeometry);
            });
            this.drawControl.setOlMap(this.map.ol, true);
        };
        /**
         * Add a feature to layer. The loading strategy of the layer
         * will trigger and add the feature to the workspace store.
         * @internal
         */
        EditionWorkspace.prototype.addFeatureToStore = function (feature, workspace, olGeometry) {
            var projection = this.map.ol.getView().getProjection();
            var geometry = feature.geometry;
            // If an olGeometry is passed, it means that it is a new feature
            if (olGeometry) {
                workspace.entityStore.insert(feature);
                workspace.entityStore.state.update(feature, { newFeature: true }, true);
                geometry = new OlGeoJSON__default["default"]().writeGeometryObject(olGeometry, {
                    featureProjection: projection,
                    dataProjection: 'EPSG:4326'
                });
                feature.geometry = geometry;
            }
            feature.projection = 'EPSG:4326';
            var featureOl = featureToOl(feature, projection.getCode());
            this.olDrawingLayer.dataSource.ol.clear();
            this.olDrawingLayer.dataSource.ol.addFeature(featureOl);
            this.map.addLayer(this.olDrawingLayer);
            this.deactivateDrawControl();
            this.createModifyInteraction(featureOl, feature, workspace);
        };
        /**
         * Delete drawings layer and source from the map AND feature from the entity store.
         * Layer refresh will automatically add the new feature into the store.
         */
        EditionWorkspace.prototype.deleteDrawings = function () {
            this.map.removeLayer(this.olDrawingLayer);
            this.olDrawingLayerSource.clear();
            this.map.ol.removeInteraction(this.modify);
        };
        /**
         * Create a modify interaction to allow a geometry change one feature at the time (drag and drop)
         */
        EditionWorkspace.prototype.createModifyInteraction = function (olFeature, feature, workspace) {
            var _this = this;
            this.map.ol.removeInteraction(this.modify);
            var olCollection = new Collection__default["default"]([olFeature], { unique: true });
            this.modify = new OlModify__default["default"]({
                features: olCollection
            });
            this.map.ol.addInteraction(this.modify);
            olCollection.forEach(function (feature) {
                feature.setStyle(_this.modifyStyle);
            });
            this.modify.on('modifyend', function (event) {
                var _a;
                var olGeometry = (_a = event.features.getArray()[0]) === null || _a === void 0 ? void 0 : _a.getGeometry();
                if (olGeometry) {
                    _this.addFeatureToStore(feature, workspace, olGeometry);
                }
            });
        };
        return EditionWorkspace;
    }(i6.Workspace));

    var EditionWorkspaceService = /** @class */ (function () {
        function EditionWorkspaceService(layerService, storageService, configService, messageService, languageService, http, dialog, authInterceptor) {
            this.layerService = layerService;
            this.storageService = storageService;
            this.configService = configService;
            this.messageService = messageService;
            this.languageService = languageService;
            this.http = http;
            this.dialog = dialog;
            this.authInterceptor = authInterceptor;
            this.ws$ = new rxjs.BehaviorSubject(undefined);
            this.adding$ = new rxjs.BehaviorSubject(false);
            this.relationLayers$ = new rxjs.BehaviorSubject(undefined);
            this.rowsInMapExtentCheckCondition$ = new rxjs.BehaviorSubject(true);
            this.loading = false;
        }
        Object.defineProperty(EditionWorkspaceService.prototype, "zoomAuto", {
            get: function () {
                return this.storageService.get('zoomAuto');
            },
            enumerable: false,
            configurable: true
        });
        EditionWorkspaceService.prototype.createWorkspace = function (layer, map) {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            if (((_a = layer.options.workspace) === null || _a === void 0 ? void 0 : _a.enabled) !== true || layer.dataSource.options.edition.enabled !== true) {
                return;
            }
            var wksConfig;
            if (layer.options.workspace) {
                wksConfig = layer.options.workspace;
            }
            else {
                wksConfig = {};
            }
            wksConfig.srcId = layer.id;
            wksConfig.workspaceId = layer.id;
            wksConfig.enabled = true;
            wksConfig.pageSize = (_b = layer.options.workspace) === null || _b === void 0 ? void 0 : _b.pageSize;
            wksConfig.pageSizeOptions = (_c = layer.options.workspace) === null || _c === void 0 ? void 0 : _c.pageSizeOptions;
            var dataSource = layer.dataSource;
            var wmsLinkId = layer.id + '.WmsWorkspaceTableSrc';
            var wfsLinkId = layer.id + '.WfsWorkspaceTableDest';
            if (!layer.options.linkedLayers) {
                layer.options.linkedLayers = { linkId: wmsLinkId, links: [] };
            }
            var linkProperties = {
                bidirectionnal: true,
                syncedDelete: true,
                linkedIds: [wfsLinkId],
                properties: [
                    exports.LinkedProperties.ZINDEX,
                    exports.LinkedProperties.VISIBLE
                ]
            };
            if (!((_d = layer.options.workspace) === null || _d === void 0 ? void 0 : _d.minResolution)) {
                linkProperties.properties.push(exports.LinkedProperties.MINRESOLUTION);
            }
            var hasOgcFilters = false;
            if ((_e = dataSource.options.ogcFilters) === null || _e === void 0 ? void 0 : _e.enabled) {
                linkProperties.properties.push(exports.LinkedProperties.OGCFILTERS);
                hasOgcFilters = true;
            }
            if (!((_f = layer.options.workspace) === null || _f === void 0 ? void 0 : _f.maxResolution)) {
                linkProperties.properties.push(exports.LinkedProperties.MAXRESOLUTION);
            }
            var clonedLinks = [];
            if (layer.options.linkedLayers.links) {
                clonedLinks = JSON.parse(JSON.stringify(layer.options.linkedLayers.links));
            }
            clonedLinks.push(linkProperties);
            layer.options.linkedLayers.linkId = layer.options.linkedLayers.linkId ? layer.options.linkedLayers.linkId : wmsLinkId,
                layer.options.linkedLayers.links = clonedLinks;
            var wks;
            this.layerService
                .createAsyncLayer({
                id: wfsLinkId,
                linkedLayers: {
                    linkId: wfsLinkId
                },
                workspace: {
                    srcId: layer.id,
                    workspaceId: undefined,
                    enabled: false,
                    queryOptions: {
                        mapQueryOnOpenTab: (_h = (_g = layer.options.workspace) === null || _g === void 0 ? void 0 : _g.queryOptions) === null || _h === void 0 ? void 0 : _h.mapQueryOnOpenTab,
                        tabQuery: false
                    },
                    pageSize: (_j = layer.options.workspace) === null || _j === void 0 ? void 0 : _j.pageSize,
                    pageSizeOptions: (_k = layer.options.workspace) === null || _k === void 0 ? void 0 : _k.pageSizeOptions
                },
                showInLayerList: false,
                opacity: 0,
                title: layer.title,
                minResolution: ((_l = layer.options.workspace) === null || _l === void 0 ? void 0 : _l.minResolution) || layer.minResolution || 0,
                maxResolution: ((_m = layer.options.workspace) === null || _m === void 0 ? void 0 : _m.maxResolution) || layer.maxResolution || Infinity,
                sourceOptions: {
                    download: dataSource.options.download,
                    type: 'wfs',
                    url: dataSource.options.urlWfs || dataSource.options.url,
                    queryable: true,
                    relations: dataSource.options.relations,
                    queryTitle: dataSource.options.queryTitle,
                    params: dataSource.options.paramsWFS,
                    ogcFilters: Object.assign({}, dataSource.ogcFilters$.value, { enabled: hasOgcFilters }),
                    sourceFields: dataSource.options.sourceFields || undefined,
                    edition: dataSource.options.edition
                }
            })
                .subscribe(function (workspaceLayer) {
                map.addLayer(workspaceLayer);
                layer.ol.setProperties({ linkedLayers: { linkId: layer.options.linkedLayers.linkId, links: clonedLinks } }, false);
                workspaceLayer.dataSource.ol.refresh();
                wks = new EditionWorkspace({
                    id: layer.id,
                    title: layer.title,
                    layer: workspaceLayer,
                    map: map,
                    entityStore: _this.createFeatureStore(workspaceLayer, map),
                    actionStore: new i6.ActionStore([]),
                    meta: {
                        tableTemplate: undefined
                    }
                }, _this, _this.dialog, _this.configService);
                _this.createTableTemplate(wks, workspaceLayer);
                workspaceLayer.options.workspace.workspaceId = workspaceLayer.id;
                layer.options.workspace = Object.assign({}, layer.options.workspace, {
                    wksConfig: wksConfig
                });
                delete dataSource.options.download;
                return wks;
            });
            return wks;
        };
        EditionWorkspaceService.prototype.createFeatureStore = function (layer, map) {
            var store = new FeatureStore([], { map: map });
            store.bindLayer(layer);
            var loadingStrategy = new FeatureStoreLoadingLayerStrategy({});
            var inMapExtentStrategy = new FeatureStoreInMapExtentStrategy({});
            var inMapResolutionStrategy = new FeatureStoreInMapResolutionStrategy({});
            var selectedRecordStrategy = new i6.EntityStoreFilterSelectionStrategy({});
            var selectionStrategy = new FeatureStoreSelectionStrategy({
                layer: new VectorLayer({
                    zIndex: 300,
                    source: new FeatureDataSource(),
                    style: undefined,
                    showInLayerList: false,
                    exportable: false,
                    browsable: false
                }),
                map: map,
                hitTolerance: 15,
                motion: this.zoomAuto ? exports.FeatureMotion.Default : exports.FeatureMotion.None,
                many: true,
                dragBox: true
            });
            store.addStrategy(loadingStrategy, true);
            store.addStrategy(inMapExtentStrategy, true);
            store.addStrategy(inMapResolutionStrategy, true);
            store.addStrategy(selectionStrategy, true);
            store.addStrategy(selectedRecordStrategy, false);
            store.addStrategy(this.createFilterInMapExtentOrResolutionStrategy(), true);
            return store;
        };
        EditionWorkspaceService.prototype.createTableTemplate = function (workspace, layer) {
            var _this = this;
            var fields = layer.dataSource.options.sourceFields || [];
            var relations = layer.dataSource.options.relations || [];
            var rendererType = i6.EntityTableColumnRenderer.UnsanitizedHTML;
            var buttons = [];
            var columns = [];
            var relationsColumn = [];
            buttons = [{
                    name: 'edition',
                    title: undefined,
                    renderer: i6.EntityTableColumnRenderer.ButtonGroup,
                    primary: false,
                    valueAccessor: function () {
                        return [{
                                editMode: false,
                                icon: 'pencil',
                                color: 'primary',
                                click: function (feature) { workspace.editFeature(feature, workspace); }
                            },
                            {
                                editMode: false,
                                icon: 'delete',
                                color: 'warn',
                                click: function (feature) { workspace.deleteFeature(feature, workspace); }
                            },
                            {
                                editMode: true,
                                icon: 'check',
                                color: 'primary',
                                disabled: _this.loading,
                                click: function (feature) { _this.saveFeature(feature, workspace); }
                            },
                            {
                                editMode: true,
                                icon: 'alpha-x',
                                color: 'primary',
                                disabled: _this.loading,
                                click: function (feature) { _this.cancelEdit(workspace, feature); }
                            }];
                    }
                }];
            if (fields.length === 0) {
                workspace.entityStore.entities$.pipe(operators.skipWhile(function (val) { return val.length === 0; }), operators.take(1)).subscribe(function (entities) {
                    var ol = entities[0].ol;
                    var columnsFromFeatures = ol.getKeys()
                        .filter(function (col) { return !col.startsWith('_') &&
                        col !== 'geometry' &&
                        col !== ol.getGeometryName() &&
                        !col.match(/boundedby/gi); })
                        .map(function (key) {
                        return {
                            name: "properties." + key,
                            title: key,
                            renderer: rendererType,
                        };
                    });
                    workspace.meta.tableTemplate = {
                        selection: false,
                        sort: true,
                        columns: columnsFromFeatures
                    };
                });
                return;
            }
            columns = fields.map(function (field) {
                var column = {
                    name: "properties." + field.name,
                    title: field.alias ? field.alias : field.name,
                    renderer: rendererType,
                    valueAccessor: undefined,
                    cellClassFunc: function () {
                        var cellClass = {};
                        if (field.type) {
                            cellClass["class_" + field.type] = true;
                            return cellClass;
                        }
                    },
                    primary: field.primary === true ? true : false,
                    visible: field.visible,
                    validation: field.validation,
                    type: field.type,
                    domainValues: undefined,
                    relation: undefined,
                    multiple: field.multiple,
                    step: field.step,
                    tooltip: field.tooltip
                };
                if (field.type === 'list' || field.type === 'autocomplete') {
                    _this.getDomainValues(field.relation.table).subscribe(function (result) {
                        column.domainValues = result;
                        column.relation = field.relation;
                    });
                }
                return column;
            });
            relationsColumn = relations.map(function (relation) {
                return {
                    name: "properties." + relation.name,
                    title: relation.alias ? relation.alias : relation.name,
                    renderer: i6.EntityTableColumnRenderer.Icon,
                    icon: relation.icon,
                    parent: relation.parent,
                    type: 'relation',
                    tooltip: relation.tooltip,
                    onClick: function () {
                        if (_this.adding$.getValue() === false) {
                            _this.ws$.next(relation.title);
                        }
                    },
                    cellClassFunc: function () {
                        return { 'class_icon': true };
                    }
                };
            });
            columns.push.apply(columns, __spreadArray([], __read(relationsColumn)));
            columns.push.apply(columns, __spreadArray([], __read(buttons)));
            workspace.meta.tableTemplate = {
                selection: false,
                sort: true,
                columns: columns
            };
        };
        EditionWorkspaceService.prototype.createFilterInMapExtentOrResolutionStrategy = function () {
            var filterClauseFunc = function (record) {
                return record.state.inMapExtent === true && record.state.inMapResolution === true;
            };
            return new i6.EntityStoreFilterCustomFuncStrategy({ filterClauseFunc: filterClauseFunc });
        };
        EditionWorkspaceService.prototype.saveFeature = function (feature, workspace) {
            if (!this.validateFeature(feature, workspace)) {
                return false;
            }
            this.sanitizeParameter(feature, workspace);
            var url = this.configService.getConfig('edition.url');
            if (workspace.layer.dataSource.options.edition.baseUrl) {
                url += workspace.layer.dataSource.options.edition.baseUrl;
            }
            if (feature.newFeature) {
                url += workspace.layer.dataSource.options.edition.addUrl;
                var addHeaders = workspace.layer.dataSource.options.edition.addHeaders;
                var headers = new i1$2.HttpHeaders(addHeaders);
                this.addFeature(feature, workspace, url, headers);
            }
            else {
                if (workspace.layer.dataSource.options.edition.modifyProtocol !== "post") {
                    url += '?' + workspace.layer.dataSource.options.edition.modifyUrl + feature.idkey;
                }
                else {
                    url += workspace.layer.dataSource.options.edition.modifyUrl;
                }
                var protocole = workspace.layer.dataSource.options.edition.modifyProtocol;
                var modifyHeaders = workspace.layer.dataSource.options.edition.modifyHeaders;
                var headers = new i1$2.HttpHeaders(modifyHeaders);
                this.modifyFeature(feature, workspace, url, headers, protocole);
            }
        };
        EditionWorkspaceService.prototype.addFeature = function (feature, workspace, url, headers) {
            var e_1, _o;
            var _this = this;
            var _a;
            // TODO: adapt to any kind of geometry
            if (workspace.layer.dataSource.options.edition.hasGeometry) {
                //feature.properties[geom] = feature.geometry;
                feature.properties["longitude"] = feature.geometry.coordinates[0];
                feature.properties["latitude"] = feature.geometry.coordinates[1];
            }
            for (var property in feature.properties) {
                try {
                    for (var _p = (e_1 = void 0, __values(workspace.layer.dataSource.options.sourceFields)), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var sf = _q.value;
                        if (sf.name === property && ((_a = sf.validation) === null || _a === void 0 ? void 0 : _a.readonly)) {
                            delete feature.properties[property];
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_o = _p.return)) _o.call(_p);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            this.loading = true;
            this.http.post("" + url, feature.properties, { headers: headers }).subscribe(function () {
                _this.loading = false;
                workspace.entityStore.stateView.clear();
                workspace.deleteDrawings();
                workspace.entityStore.delete(feature);
                var message = _this.languageService.translate.instant('igo.geo.workspace.addSuccess');
                _this.messageService.success(message);
                _this.refreshMap(workspace.layer, workspace.layer.map);
                _this.adding$.next(false);
                _this.rowsInMapExtentCheckCondition$.next(true);
            }, function (error) {
                _this.loading = false;
                error.error.caught = true;
                var genericErrorMessage = _this.languageService.translate.instant('igo.geo.workspace.addError');
                var messages = workspace.layer.dataSource.options.edition.messages;
                if (messages) {
                    var text_1;
                    messages.forEach(function (message) {
                        var key = Object.keys(message)[0];
                        if (error.error.message.includes(key)) {
                            text_1 = message[key];
                            _this.messageService.error(text_1);
                        }
                    });
                    if (!text_1) {
                        _this.messageService.error(genericErrorMessage);
                    }
                }
                else {
                    _this.messageService.error(genericErrorMessage);
                }
            });
        };
        EditionWorkspaceService.prototype.deleteFeature = function (workspace, url) {
            var _this = this;
            this.loading = true;
            this.http.delete("" + url, {}).subscribe(function () {
                var e_2, _o;
                _this.loading = false;
                var message = _this.languageService.translate.instant('igo.geo.workspace.deleteSuccess');
                _this.messageService.success(message);
                _this.refreshMap(workspace.layer, workspace.layer.map);
                var _loop_1 = function (relation) {
                    workspace.map.layers.forEach(function (layer) {
                        if (layer.title === relation.title) {
                            layer.dataSource.ol.refresh();
                        }
                    });
                };
                try {
                    for (var _p = __values(workspace.layer.options.sourceOptions.relations), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var relation = _q.value;
                        _loop_1(relation);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_o = _p.return)) _o.call(_p);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }, function (error) {
                _this.loading = false;
                error.error.caught = true;
                var genericErrorMessage = _this.languageService.translate.instant('igo.geo.workspace.addError');
                var messages = workspace.layer.dataSource.options.edition.messages;
                if (messages) {
                    var text_2;
                    messages.forEach(function (message) {
                        var key = Object.keys(message)[0];
                        if (error.error.message.includes(key)) {
                            text_2 = message[key];
                            _this.messageService.error(text_2);
                        }
                    });
                    if (!text_2) {
                        _this.messageService.error(genericErrorMessage);
                    }
                }
                else {
                    _this.messageService.error(genericErrorMessage);
                }
            });
        };
        EditionWorkspaceService.prototype.modifyFeature = function (feature, workspace, url, headers, protocole) {
            var e_3, _o;
            var _this = this;
            if (protocole === void 0) { protocole = 'patch'; }
            var _a;
            //TODO: adapt to any kind of geometry
            if (workspace.layer.dataSource.options.edition.hasGeometry) {
                //feature.properties[geom] = feature.geometry;
                feature.properties["longitude"] = feature.geometry.coordinates[0];
                feature.properties["latitude"] = feature.geometry.coordinates[1];
            }
            for (var property in feature.properties) {
                try {
                    for (var _p = (e_3 = void 0, __values(workspace.layer.dataSource.options.sourceFields)), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var sf = _q.value;
                        if ((sf.name === property && ((_a = sf.validation) === null || _a === void 0 ? void 0 : _a.readonly)) || property === 'boundedBy') {
                            delete feature.properties[property];
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_o = _p.return)) _o.call(_p);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            this.loading = true;
            this.http[protocole]("" + url, feature.properties, { headers: headers }).subscribe(function () {
                var e_4, _o;
                _this.loading = false;
                _this.cancelEdit(workspace, feature, true);
                var message = _this.languageService.translate.instant('igo.geo.workspace.modifySuccess');
                _this.messageService.success(message);
                _this.refreshMap(workspace.layer, workspace.layer.map);
                var relationLayers = [];
                var _loop_2 = function (relation) {
                    workspace.map.layers.forEach(function (layer) {
                        if (layer.title === relation.title) {
                            relationLayers.push(layer);
                            layer.dataSource.ol.refresh();
                        }
                    });
                };
                try {
                    for (var _p = __values(workspace.layer.options.sourceOptions.relations), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var relation = _q.value;
                        _loop_2(relation);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_o = _p.return)) _o.call(_p);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                _this.relationLayers$.next(relationLayers);
            }, function (error) {
                _this.loading = false;
                error.error.caught = true;
                var genericErrorMessage = _this.languageService.translate.instant('igo.geo.workspace.addError');
                var messages = workspace.layer.dataSource.options.edition.messages;
                if (messages) {
                    var text_3;
                    messages.forEach(function (message) {
                        var key = Object.keys(message)[0];
                        if (error.error.message.includes(key)) {
                            text_3 = message[key];
                            _this.messageService.error(text_3);
                        }
                    });
                    if (!text_3) {
                        _this.messageService.error(genericErrorMessage);
                    }
                }
                else {
                    _this.messageService.error(genericErrorMessage);
                }
            });
        };
        EditionWorkspaceService.prototype.cancelEdit = function (workspace, feature, fromSave) {
            if (fromSave === void 0) { fromSave = false; }
            feature.edition = false;
            this.adding$.next(false);
            workspace.deleteDrawings();
            if (feature.newFeature) {
                workspace.entityStore.stateView.clear();
                workspace.entityStore.delete(feature);
                workspace.deactivateDrawControl();
                this.rowsInMapExtentCheckCondition$.next(true);
            }
            else {
                if (!fromSave) {
                    feature.properties = feature.original_properties;
                    feature.geometry = feature.original_geometry;
                }
                delete feature.original_properties;
                delete feature.original_geometry;
            }
        };
        EditionWorkspaceService.prototype.getDomainValues = function (table) {
            var url = this.configService.getConfig('edition.url') + table;
            return this.http.get(url).pipe(operators.map(function (result) {
                return result;
            }), operators.catchError(function (err) {
                return rxjs.throwError(err);
            }));
        };
        /*
         * Refresh both wms and wfs layer
         * A new wfs loader is used to ensure cache is not retrieving old data
         * WMS params are updated to ensure layer is correctly refreshed
         */
        EditionWorkspaceService.prototype.refreshMap = function (layer, map) {
            var e_5, _o;
            var _this = this;
            var _a, _b;
            var wfsOlLayer = layer.dataSource.ol;
            var loader = function (extent, resolution, proj, success, failure) {
                layer.customWFSLoader(layer.ol.getSource(), layer.options.sourceOptions, _this.authInterceptor, extent, resolution, proj, success, failure, true);
            };
            wfsOlLayer.setLoader(loader);
            wfsOlLayer.refresh();
            try {
                for (var _p = __values(map.layers), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var lay = _q.value;
                    if (lay.id !== layer.id &&
                        ((_a = lay.options.linkedLayers) === null || _a === void 0 ? void 0 : _a.linkId.includes(layer.id.substr(0, layer.id.indexOf('.') - 1))) &&
                        ((_b = lay.options.linkedLayers) === null || _b === void 0 ? void 0 : _b.linkId.includes('WmsWorkspaceTableSrc'))) {
                        var wmsOlLayer = lay.dataSource.ol;
                        var params = wmsOlLayer.getParams();
                        params._t = new Date().getTime();
                        wmsOlLayer.updateParams(params);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_o = _p.return)) _o.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        };
        EditionWorkspaceService.prototype.validateFeature = function (feature, workspace) {
            var _this = this;
            var translate = this.languageService.translate;
            var message;
            var key;
            var valid = true;
            workspace.meta.tableTemplate.columns.forEach(function (column) {
                if (column.hasOwnProperty('validation') && column.validation) {
                    key = getColumnKeyWithoutPropertiesTag(column.name);
                    Object.keys(column.validation).forEach(function (type) {
                        switch (type) {
                            case 'mandatory': {
                                if (column.validation[type] && (!feature.properties.hasOwnProperty(key) || !feature.properties[key])) {
                                    valid = false;
                                    message = translate.instant('igo.geo.formValidation.mandatory', {
                                        column: column.title
                                    });
                                    _this.messageService.error(message);
                                }
                                break;
                            }
                            case 'minValue': {
                                if (feature.properties.hasOwnProperty(key) && feature.properties[key] && feature.properties[key] < column.validation[type]) {
                                    valid = false;
                                    message = translate.instant('igo.geo.formValidation.minValue', {
                                        column: column.title,
                                        value: column.validation[type]
                                    });
                                    _this.messageService.error(message);
                                }
                                break;
                            }
                            case 'maxValue': {
                                if (feature.properties.hasOwnProperty(key) && feature.properties[key] && feature.properties[key] > column.validation[type]) {
                                    valid = false;
                                    message = translate.instant('igo.geo.formValidation.maxValue', {
                                        column: column.title,
                                        value: column.validation[type]
                                    });
                                    _this.messageService.error(message);
                                }
                                break;
                            }
                            case 'minLength': {
                                if (feature.properties.hasOwnProperty(key) && feature.properties[key] &&
                                    feature.properties[key].length < column.validation[type]) {
                                    valid = false;
                                    message = translate.instant('igo.geo.formValidation.minLength', {
                                        column: column.title,
                                        value: column.validation[type]
                                    });
                                    _this.messageService.error(message);
                                }
                                break;
                            }
                            case 'maxLength': {
                                if (feature.properties.hasOwnProperty(key) && feature.properties[key] &&
                                    feature.properties[key].length > column.validation[type]) {
                                    valid = false;
                                    message = translate.instant('igo.geo.formValidation.maxLength', {
                                        column: column.title,
                                        value: column.validation[type]
                                    });
                                    _this.messageService.error(message);
                                }
                                break;
                            }
                        }
                    });
                }
            });
            return valid;
        };
        EditionWorkspaceService.prototype.sanitizeParameter = function (feature, workspace) {
            workspace.meta.tableTemplate.columns.forEach(function (column) {
                if (column.type === 'list' && feature.properties[getColumnKeyWithoutPropertiesTag(column.name)]) {
                    feature.properties[getColumnKeyWithoutPropertiesTag(column.name)] =
                        feature.properties[getColumnKeyWithoutPropertiesTag(column.name)].toString();
                }
            });
        };
        return EditionWorkspaceService;
    }());
    EditionWorkspaceService.ɵfac = function EditionWorkspaceService_Factory(t) { return new (t || EditionWorkspaceService)(i0__namespace.ɵɵinject(LayerService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject(i2__namespace$1.ConfigService), i0__namespace.ɵɵinject(i2__namespace$1.MessageService), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i1__namespace.MatDialog), i0__namespace.ɵɵinject(i5__namespace.AuthInterceptor)); };
    EditionWorkspaceService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: EditionWorkspaceService, factory: EditionWorkspaceService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(EditionWorkspaceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: LayerService }, { type: i2__namespace$1.StorageService }, { type: i2__namespace$1.ConfigService }, { type: i2__namespace$1.MessageService }, { type: i2__namespace$1.LanguageService }, { type: i1__namespace$2.HttpClient }, { type: i1__namespace.MatDialog }, { type: i5__namespace.AuthInterceptor }]; }, null);
    })();
    function getColumnKeyWithoutPropertiesTag(column) {
        if (column.includes('properties.')) {
            return column.split('.')[1];
        }
        return column;
    }

    var FeatureWorkspace = /** @class */ (function (_super) {
        __extends(FeatureWorkspace, _super);
        function FeatureWorkspace(options) {
            var _this = _super.call(this, options) || this;
            _this.options = options;
            _this.inResolutionRange$ = new rxjs.BehaviorSubject(true);
            _this.map.viewController.resolution$.subscribe(function (mapResolution) {
                if (mapResolution > _this.layer.minResolution && mapResolution < _this.layer.maxResolution) {
                    _this.inResolutionRange$.next(true);
                }
                else {
                    _this.inResolutionRange$.next(false);
                }
            });
            return _this;
        }
        Object.defineProperty(FeatureWorkspace.prototype, "layer", {
            get: function () { return this.options.layer; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FeatureWorkspace.prototype, "map", {
            get: function () { return this.options.map; },
            enumerable: false,
            configurable: true
        });
        FeatureWorkspace.prototype.getLayerWksOptionTabQuery = function () {
            var _a;
            if (((_a = this.layer.options.workspace.queryOptions) === null || _a === void 0 ? void 0 : _a.tabQuery) !== undefined) {
                return this.layer.options.workspace.queryOptions.tabQuery;
            }
            return true;
        };
        FeatureWorkspace.prototype.getLayerWksOptionMapQuery = function () {
            var _a;
            if (((_a = this.layer.options.workspace.queryOptions) === null || _a === void 0 ? void 0 : _a.mapQueryOnOpenTab) !== undefined) {
                return this.layer.options.workspace.queryOptions.mapQueryOnOpenTab;
            }
            return true;
        };
        FeatureWorkspace.prototype.getInResolutionRange = function () {
            return this.inResolutionRange$.value;
        };
        return FeatureWorkspace;
    }(i6.Workspace));

    var FeatureWorkspaceService = /** @class */ (function () {
        function FeatureWorkspaceService(storageService) {
            this.storageService = storageService;
            this.ws$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(FeatureWorkspaceService.prototype, "zoomAuto", {
            get: function () {
                return this.storageService.get('zoomAuto');
            },
            enumerable: false,
            configurable: true
        });
        FeatureWorkspaceService.prototype.createWorkspace = function (layer, map) {
            var _a;
            if (((_a = layer.options.workspace) === null || _a === void 0 ? void 0 : _a.enabled) === false || layer.dataSource.options.edition) {
                return;
            }
            layer.options.workspace = Object.assign({}, layer.options.workspace, {
                srcId: layer.id,
                workspaceId: layer.id,
                enabled: true
            });
            var wks = new FeatureWorkspace({
                id: layer.id,
                title: layer.title,
                layer: layer,
                map: map,
                entityStore: this.createFeatureStore(layer, map),
                actionStore: new i6.ActionStore([]),
                meta: {
                    tableTemplate: undefined
                }
            });
            this.createTableTemplate(wks, layer);
            return wks;
        };
        FeatureWorkspaceService.prototype.createFeatureStore = function (layer, map) {
            var store = new FeatureStore([], { map: map });
            store.bindLayer(layer);
            var loadingStrategy = new FeatureStoreLoadingLayerStrategy({});
            var inMapExtentStrategy = new FeatureStoreInMapExtentStrategy({});
            var inMapResolutionStrategy = new FeatureStoreInMapResolutionStrategy({});
            var selectedRecordStrategy = new i6.EntityStoreFilterSelectionStrategy({});
            var selectionStrategy = new FeatureStoreSelectionStrategy({
                layer: new VectorLayer({
                    zIndex: 300,
                    source: new FeatureDataSource(),
                    style: undefined,
                    showInLayerList: false,
                    exportable: false,
                    browsable: false
                }),
                map: map,
                hitTolerance: 15,
                motion: this.zoomAuto ? exports.FeatureMotion.Default : exports.FeatureMotion.None,
                many: true,
                dragBox: true
            });
            store.addStrategy(loadingStrategy, true);
            store.addStrategy(inMapExtentStrategy, true);
            store.addStrategy(inMapResolutionStrategy, true);
            store.addStrategy(selectionStrategy, true);
            store.addStrategy(selectedRecordStrategy, false);
            store.addStrategy(this.createFilterInMapExtentOrResolutionStrategy(), true);
            return store;
        };
        FeatureWorkspaceService.prototype.createTableTemplate = function (workspace, layer) {
            var _this = this;
            var fields = layer.dataSource.options.sourceFields || [];
            var relations = layer.dataSource.options.relations || [];
            if (fields.length === 0) {
                workspace.entityStore.entities$.pipe(operators.skipWhile(function (val) { return val.length === 0; }), operators.take(1)).subscribe(function (entities) {
                    var ol = entities[0].ol;
                    var columnsFromFeatures = ol.getKeys()
                        .filter(function (col) { return !col.startsWith('_') &&
                        col !== 'geometry' &&
                        col !== ol.getGeometryName() &&
                        !col.match(/boundedby/gi); })
                        .map(function (key) {
                        return {
                            name: "properties." + key,
                            title: key,
                            renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML
                        };
                    });
                    workspace.meta.tableTemplate = {
                        selection: true,
                        sort: true,
                        columns: columnsFromFeatures
                    };
                });
                return;
            }
            var columns = fields.map(function (field) {
                return {
                    name: "properties." + field.name,
                    title: field.alias ? field.alias : field.name,
                    renderer: i6.EntityTableColumnRenderer.UnsanitizedHTML,
                    tooltip: field.tooltip
                };
            });
            var relationsColumn = relations.map(function (relation) {
                return {
                    name: "properties." + relation.name,
                    title: relation.alias ? relation.alias : relation.name,
                    renderer: i6.EntityTableColumnRenderer.Icon,
                    icon: relation.icon,
                    parent: relation.parent,
                    type: 'relation',
                    tooltip: relation.tooltip,
                    onClick: function () {
                        _this.ws$.next(relation.title);
                    },
                    cellClassFunc: function () {
                        return { 'class_icon': true };
                    }
                };
            });
            columns.push.apply(columns, __spreadArray([], __read(relationsColumn)));
            workspace.meta.tableTemplate = {
                selection: true,
                sort: true,
                columns: columns
            };
        };
        FeatureWorkspaceService.prototype.createFilterInMapExtentOrResolutionStrategy = function () {
            var filterClauseFunc = function (record) {
                return record.state.inMapExtent === true && record.state.inMapResolution === true;
            };
            return new i6.EntityStoreFilterCustomFuncStrategy({ filterClauseFunc: filterClauseFunc });
        };
        return FeatureWorkspaceService;
    }());
    FeatureWorkspaceService.ɵfac = function FeatureWorkspaceService_Factory(t) { return new (t || FeatureWorkspaceService)(i0__namespace.ɵɵinject(i2__namespace$1.StorageService)); };
    FeatureWorkspaceService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: FeatureWorkspaceService, factory: FeatureWorkspaceService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(FeatureWorkspaceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i2__namespace$1.StorageService }]; }, null);
    })();

    var WorkspaceSelectorDirective = /** @class */ (function () {
        function WorkspaceSelectorDirective(component, wfsWorkspaceService, wmsWorkspaceService, editionWorkspaceService, featureWorkspaceService) {
            this.component = component;
            this.wfsWorkspaceService = wfsWorkspaceService;
            this.wmsWorkspaceService = wmsWorkspaceService;
            this.editionWorkspaceService = editionWorkspaceService;
            this.featureWorkspaceService = featureWorkspaceService;
            this.entities$$ = [];
            this.changeWorkspace = new i0.EventEmitter();
            this.disableSwitch = new i0.EventEmitter();
            this.relationLayers = new i0.EventEmitter();
            this.rowsInMapExtentCheckCondition = new i0.EventEmitter();
        }
        Object.defineProperty(WorkspaceSelectorDirective.prototype, "workspaceStore", {
            get: function () {
                return this.component.store;
            },
            enumerable: false,
            configurable: true
        });
        WorkspaceSelectorDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.layers$$ = this.map.layers$
                .pipe(operators.debounceTime(50))
                .subscribe(function (layers) { return _this.onLayersChange(layers); });
            this.featureWorkspaceService.ws$.subscribe(function (ws) { _this.changeWorkspace.emit(ws); });
            this.wmsWorkspaceService.ws$.subscribe(function (ws) { _this.changeWorkspace.emit(ws); });
            this.wfsWorkspaceService.ws$.subscribe(function (ws) { _this.changeWorkspace.emit(ws); });
            this.editionWorkspaceService.ws$.subscribe(function (ws) { _this.changeWorkspace.emit(ws); });
            this.editionWorkspaceService.adding$.subscribe(function (adding) { _this.disableSwitch.emit(adding); });
            this.editionWorkspaceService.relationLayers$.subscribe(function (layers) { _this.relationLayers.emit(layers); });
            this.editionWorkspaceService.rowsInMapExtentCheckCondition$.subscribe(function (condition) {
                _this.rowsInMapExtentCheckCondition.emit(condition);
            });
        };
        WorkspaceSelectorDirective.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
            this.entities$$.map(function (entities) { return entities.unsubscribe(); });
        };
        WorkspaceSelectorDirective.prototype.onLayersChange = function (layers) {
            var _this = this;
            var editableLayers = layers.filter(function (layer) { return _this.layerIsEditable(layer); });
            var editableLayersIds = editableLayers.map(function (layer) { return layer.id; });
            var workspacesToAdd = editableLayers
                .map(function (layer) { return _this.getOrCreateWorkspace(layer); })
                .filter(function (workspace) { return workspace !== undefined; });
            var workspacesToRemove = this.workspaceStore.all()
                .filter(function (workspace) {
                return editableLayersIds.indexOf(workspace.id) < 0;
            });
            if (workspacesToRemove.length > 0) {
                workspacesToRemove.forEach(function (workspace) {
                    workspace.entityStore.deactivateStrategyOfType(FeatureStoreInMapExtentStrategy);
                    workspace.deactivate();
                });
                this.workspaceStore.state.updateMany(workspacesToRemove, { active: false, selected: false });
                this.workspaceStore.deleteMany(workspacesToRemove);
            }
            if (workspacesToAdd.length > 0) {
                this.workspaceStore.insertMany(workspacesToAdd);
            }
        };
        WorkspaceSelectorDirective.prototype.getOrCreateWorkspace = function (layer) {
            var _a, _b, _c, _d;
            var workspace = this.workspaceStore.get(layer.id);
            if (workspace !== undefined) {
                return;
            }
            if (layer.dataSource instanceof WFSDataSource && ((_a = layer.dataSource.options.edition) === null || _a === void 0 ? void 0 : _a.enabled) !== true) {
                var wfsWks = this.wfsWorkspaceService.createWorkspace(layer, this.map);
                return wfsWks;
            }
            else if (layer.dataSource instanceof WMSDataSource && ((_b = layer.dataSource.options.edition) === null || _b === void 0 ? void 0 : _b.enabled) !== true) {
                if (!layer.dataSource.options.paramsWFS) {
                    return;
                }
                var wmsWks_1 = this.wmsWorkspaceService.createWorkspace(layer, this.map);
                wmsWks_1 === null || wmsWks_1 === void 0 ? void 0 : wmsWks_1.inResolutionRange$.subscribe(function (inResolutionRange) {
                    layer.dataSource.options.queryable = !inResolutionRange;
                    wmsWks_1.layer.dataSource.options.queryable = inResolutionRange;
                });
                return wmsWks_1;
            }
            else if (layer.dataSource instanceof FeatureDataSource &&
                layer.exportable === true &&
                ((_c = layer.dataSource.options.edition) === null || _c === void 0 ? void 0 : _c.enabled) !== true) {
                var featureWks = this.featureWorkspaceService.createWorkspace(layer, this.map);
                return featureWks;
            }
            else if (layer.dataSource instanceof WMSDataSource && ((_d = layer.dataSource.options.edition) === null || _d === void 0 ? void 0 : _d.enabled) === true) {
                var editionWks = this.editionWorkspaceService.createWorkspace(layer, this.map);
                return editionWks;
            }
            return;
        };
        WorkspaceSelectorDirective.prototype.layerIsEditable = function (layer) {
            var _a, _b;
            var dataSource = layer.dataSource;
            if (dataSource instanceof WFSDataSource) {
                return true;
            }
            if (dataSource instanceof FeatureDataSource) {
                return true;
            }
            if (dataSource instanceof WMSDataSource) {
                var dataSourceOptions = (dataSource.options ||
                    {});
                return (((_a = dataSourceOptions.ogcFilters) === null || _a === void 0 ? void 0 : _a.enabled) || ((_b = dataSource.options.paramsWFS) === null || _b === void 0 ? void 0 : _b.featureTypes) !== undefined);
            }
            return false;
        };
        return WorkspaceSelectorDirective;
    }());
    WorkspaceSelectorDirective.ɵfac = function WorkspaceSelectorDirective_Factory(t) { return new (t || WorkspaceSelectorDirective)(i0__namespace.ɵɵdirectiveInject(i6__namespace.WorkspaceSelectorComponent), i0__namespace.ɵɵdirectiveInject(WfsWorkspaceService), i0__namespace.ɵɵdirectiveInject(WmsWorkspaceService), i0__namespace.ɵɵdirectiveInject(EditionWorkspaceService), i0__namespace.ɵɵdirectiveInject(FeatureWorkspaceService)); };
    WorkspaceSelectorDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: WorkspaceSelectorDirective, selectors: [["", "igoWorkspaceSelector", ""]], inputs: { map: "map" }, outputs: { changeWorkspace: "changeWorkspace", disableSwitch: "disableSwitch", relationLayers: "relationLayers", rowsInMapExtentCheckCondition: "rowsInMapExtentCheckCondition" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WorkspaceSelectorDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoWorkspaceSelector]'
                    }]
            }], function () { return [{ type: i6__namespace.WorkspaceSelectorComponent }, { type: WfsWorkspaceService }, { type: WmsWorkspaceService }, { type: EditionWorkspaceService }, { type: FeatureWorkspaceService }]; }, { map: [{
                    type: i0.Input
                }], changeWorkspace: [{
                    type: i0.Output
                }], disableSwitch: [{
                    type: i0.Output
                }], relationLayers: [{
                    type: i0.Output
                }], rowsInMapExtentCheckCondition: [{
                    type: i0.Output
                }] });
    })();

    /**
     * @ignore
     */
    var IgoWorkspaceSelectorModule = /** @class */ (function () {
        function IgoWorkspaceSelectorModule() {
        }
        return IgoWorkspaceSelectorModule;
    }());
    IgoWorkspaceSelectorModule.ɵfac = function IgoWorkspaceSelectorModule_Factory(t) { return new (t || IgoWorkspaceSelectorModule)(); };
    IgoWorkspaceSelectorModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoWorkspaceSelectorModule });
    IgoWorkspaceSelectorModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoWorkspaceSelectorModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule
                        ],
                        exports: [
                            WorkspaceSelectorDirective
                        ],
                        declarations: [
                            WorkspaceSelectorDirective
                        ]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoWorkspaceSelectorModule, { declarations: [WorkspaceSelectorDirective], imports: [i1$1.CommonModule], exports: [WorkspaceSelectorDirective] }); })();

    var WorkspaceUpdatorDirective = /** @class */ (function () {
        function WorkspaceUpdatorDirective(wfsWorkspaceService, wmsWorkspaceService, editionWorkspaceService, featureWorkspaceService) {
            this.wfsWorkspaceService = wfsWorkspaceService;
            this.wmsWorkspaceService = wmsWorkspaceService;
            this.editionWorkspaceService = editionWorkspaceService;
            this.featureWorkspaceService = featureWorkspaceService;
            this.entities$$ = [];
        }
        WorkspaceUpdatorDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.layers$$ = this.map.layers$
                .pipe(operators.debounceTime(50))
                .subscribe(function (layers) { return _this.onLayersChange(layers); });
        };
        WorkspaceUpdatorDirective.prototype.ngOnDestroy = function () {
            this.layers$$.unsubscribe();
            this.entities$$.map(function (entities) { return entities.unsubscribe(); });
        };
        WorkspaceUpdatorDirective.prototype.onLayersChange = function (layers) {
            var _this = this;
            var editableLayers = layers.filter(function (layer) { return _this.layerIsEditable(layer); });
            var editableLayersIds = editableLayers.map(function (layer) { return layer.id; });
            var workspacesToAdd = editableLayers
                .map(function (layer) { return _this.getOrCreateWorkspace(layer); })
                .filter(function (workspace) { return workspace !== undefined; });
            var workspacesToRemove = this.workspaceStore.all()
                .filter(function (workspace) {
                return editableLayersIds.indexOf(workspace.id) < 0;
            });
            if (workspacesToRemove.length > 0) {
                workspacesToRemove.forEach(function (workspace) {
                    workspace.entityStore.deactivateStrategyOfType(FeatureStoreInMapExtentStrategy);
                    workspace.deactivate();
                });
                this.workspaceStore.state.updateMany(workspacesToRemove, { active: false, selected: false });
                this.workspaceStore.deleteMany(workspacesToRemove);
            }
            if (workspacesToAdd.length > 0) {
                this.workspaceStore.insertMany(workspacesToAdd);
            }
        };
        WorkspaceUpdatorDirective.prototype.getOrCreateWorkspace = function (layer) {
            var _a, _b, _c, _d;
            var workspace = this.workspaceStore.get(layer.id);
            if (workspace !== undefined) {
                return;
            }
            if (layer.dataSource instanceof WFSDataSource && ((_a = layer.dataSource.options.edition) === null || _a === void 0 ? void 0 : _a.enabled) !== true) {
                var wfsWks = this.wfsWorkspaceService.createWorkspace(layer, this.map);
                return wfsWks;
            }
            else if (layer.dataSource instanceof WMSDataSource && ((_b = layer.dataSource.options.edition) === null || _b === void 0 ? void 0 : _b.enabled) !== true) {
                if (!layer.dataSource.options.paramsWFS) {
                    return;
                }
                var wmsWks_1 = this.wmsWorkspaceService.createWorkspace(layer, this.map);
                wmsWks_1 === null || wmsWks_1 === void 0 ? void 0 : wmsWks_1.inResolutionRange$.subscribe(function (inResolutionRange) {
                    var _a;
                    if ((_a = layer.dataSource.options) === null || _a === void 0 ? void 0 : _a.queryFormatAsWms) {
                        wmsWks_1.layer.dataSource.options.queryable = true;
                        return wmsWks_1;
                    }
                    layer.dataSource.options.queryable = !inResolutionRange;
                    wmsWks_1.layer.dataSource.options.queryable = inResolutionRange;
                });
                return wmsWks_1;
            }
            else if (layer.dataSource instanceof FeatureDataSource &&
                layer.exportable === true &&
                ((_c = layer.dataSource.options.edition) === null || _c === void 0 ? void 0 : _c.enabled) !== true) {
                var featureWks = this.featureWorkspaceService.createWorkspace(layer, this.map);
                return featureWks;
            }
            else if (layer.dataSource instanceof WMSDataSource && ((_d = layer.dataSource.options.edition) === null || _d === void 0 ? void 0 : _d.enabled) === true) {
                var editionWks = this.editionWorkspaceService.createWorkspace(layer, this.map);
                return editionWks;
            }
            return;
        };
        WorkspaceUpdatorDirective.prototype.layerIsEditable = function (layer) {
            var _a, _b;
            var dataSource = layer.dataSource;
            if (dataSource instanceof WFSDataSource) {
                return true;
            }
            if (dataSource instanceof FeatureDataSource) {
                return true;
            }
            if (dataSource instanceof WMSDataSource) {
                var dataSourceOptions = (dataSource.options ||
                    {});
                return (((_a = dataSourceOptions.ogcFilters) === null || _a === void 0 ? void 0 : _a.enabled) || ((_b = dataSource.options.paramsWFS) === null || _b === void 0 ? void 0 : _b.featureTypes) !== undefined);
            }
            return false;
        };
        return WorkspaceUpdatorDirective;
    }());
    WorkspaceUpdatorDirective.ɵfac = function WorkspaceUpdatorDirective_Factory(t) { return new (t || WorkspaceUpdatorDirective)(i0__namespace.ɵɵdirectiveInject(WfsWorkspaceService), i0__namespace.ɵɵdirectiveInject(WmsWorkspaceService), i0__namespace.ɵɵdirectiveInject(EditionWorkspaceService), i0__namespace.ɵɵdirectiveInject(FeatureWorkspaceService)); };
    WorkspaceUpdatorDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: WorkspaceUpdatorDirective, selectors: [["", "igoWorkspaceUpdator", ""]], inputs: { map: "map", workspaceStore: "workspaceStore" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(WorkspaceUpdatorDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[igoWorkspaceUpdator]'
                    }]
            }], function () { return [{ type: WfsWorkspaceService }, { type: WmsWorkspaceService }, { type: EditionWorkspaceService }, { type: FeatureWorkspaceService }]; }, { map: [{
                    type: i0.Input
                }], workspaceStore: [{
                    type: i0.Input
                }] });
    })();

    /**
     * @ignore
     */
    var IgoWorkspaceUpdatorModule = /** @class */ (function () {
        function IgoWorkspaceUpdatorModule() {
        }
        return IgoWorkspaceUpdatorModule;
    }());
    IgoWorkspaceUpdatorModule.ɵfac = function IgoWorkspaceUpdatorModule_Factory(t) { return new (t || IgoWorkspaceUpdatorModule)(); };
    IgoWorkspaceUpdatorModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoWorkspaceUpdatorModule });
    IgoWorkspaceUpdatorModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoWorkspaceUpdatorModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule
                        ],
                        exports: [
                            WorkspaceUpdatorDirective
                        ],
                        declarations: [
                            WorkspaceUpdatorDirective
                        ]
                    }]
            }], null, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoWorkspaceUpdatorModule, { declarations: [WorkspaceUpdatorDirective], imports: [i1$1.CommonModule], exports: [WorkspaceUpdatorDirective] }); })();

    /**
     * @ignore
     */
    var IgoConfirmationPopupModule = /** @class */ (function () {
        function IgoConfirmationPopupModule() {
        }
        return IgoConfirmationPopupModule;
    }());
    IgoConfirmationPopupModule.ɵfac = function IgoConfirmationPopupModule_Factory(t) { return new (t || IgoConfirmationPopupModule)(); };
    IgoConfirmationPopupModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoConfirmationPopupModule });
    IgoConfirmationPopupModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i1$1.CommonModule,
                i2.MatButtonModule,
                i1.MatDialogModule,
                i18.MatButtonToggleModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoConfirmationPopupModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2.MatButtonModule,
                            i1.MatDialogModule,
                            i18.MatButtonToggleModule
                        ],
                        exports: [ConfirmationPopupComponent],
                        declarations: [ConfirmationPopupComponent]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoConfirmationPopupModule, { declarations: [ConfirmationPopupComponent], imports: [i1$1.CommonModule,
                i2.MatButtonModule,
                i1.MatDialogModule,
                i18.MatButtonToggleModule], exports: [ConfirmationPopupComponent] });
    })();

    var IgoGeoWorkspaceModule = /** @class */ (function () {
        function IgoGeoWorkspaceModule() {
        }
        return IgoGeoWorkspaceModule;
    }());
    IgoGeoWorkspaceModule.ɵfac = function IgoGeoWorkspaceModule_Factory(t) { return new (t || IgoGeoWorkspaceModule)(); };
    IgoGeoWorkspaceModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoGeoWorkspaceModule });
    IgoGeoWorkspaceModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ providers: [
            provideOgcFilterWidget()
        ], imports: [[
                i1$1.CommonModule,
                i2$1.IgoLanguageModule,
                i6.IgoWidgetModule,
                IgoWorkspaceSelectorModule,
                IgoWorkspaceUpdatorModule,
                IgoOgcFilterModule,
                i1.MatDialogModule
            ], IgoWorkspaceSelectorModule,
            IgoWorkspaceUpdatorModule,
            IgoOgcFilterModule,
            IgoConfirmationPopupModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoGeoWorkspaceModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$1.CommonModule,
                            i2$1.IgoLanguageModule,
                            i6.IgoWidgetModule,
                            IgoWorkspaceSelectorModule,
                            IgoWorkspaceUpdatorModule,
                            IgoOgcFilterModule,
                            i1.MatDialogModule
                        ],
                        exports: [
                            IgoWorkspaceSelectorModule,
                            IgoWorkspaceUpdatorModule,
                            IgoOgcFilterModule,
                            IgoConfirmationPopupModule
                        ],
                        declarations: [],
                        providers: [
                            provideOgcFilterWidget()
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoGeoWorkspaceModule, { imports: [i1$1.CommonModule,
                i2$1.IgoLanguageModule,
                i6.IgoWidgetModule,
                IgoWorkspaceSelectorModule,
                IgoWorkspaceUpdatorModule,
                IgoOgcFilterModule,
                i1.MatDialogModule], exports: [IgoWorkspaceSelectorModule,
                IgoWorkspaceUpdatorModule,
                IgoOgcFilterModule,
                IgoConfirmationPopupModule] });
    })();

    var IgoWktModule = /** @class */ (function () {
        function IgoWktModule() {
        }
        IgoWktModule.forRoot = function () {
            return {
                ngModule: IgoWktModule,
                providers: []
            };
        };
        return IgoWktModule;
    }());
    IgoWktModule.ɵfac = function IgoWktModule_Factory(t) { return new (t || IgoWktModule)(); };
    IgoWktModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoWktModule });
    IgoWktModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoWktModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        exports: [],
                        declarations: []
                    }]
            }], null, null);
    })();

    var IgoGeoModule = /** @class */ (function () {
        function IgoGeoModule() {
        }
        IgoGeoModule.forRoot = function () {
            return {
                ngModule: IgoGeoModule,
                providers: []
            };
        };
        return IgoGeoModule;
    }());
    IgoGeoModule.ɵfac = function IgoGeoModule_Factory(t) { return new (t || IgoGeoModule)(); };
    IgoGeoModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: IgoGeoModule });
    IgoGeoModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[], IgoCatalogModule,
            IgoDataSourceModule,
            IgoDownloadModule,
            IgoDrawingToolModule,
            IgoFeatureModule,
            IgoFilterModule,
            IgoGeometryModule,
            IgoImportExportModule,
            IgoLayerModule,
            IgoMapModule,
            IgoMeasureModule,
            IgoMetadataModule,
            IgoOverlayModule,
            IgoPrintModule,
            IgoQueryModule,
            IgoDirectionsModule,
            IgoSearchModule,
            IgoToastModule,
            IgoGeoWorkspaceModule,
            IgoWktModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(IgoGeoModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [
                            IgoCatalogModule,
                            IgoDataSourceModule,
                            IgoDownloadModule,
                            IgoDrawingToolModule,
                            IgoFeatureModule,
                            IgoFilterModule,
                            IgoGeometryModule,
                            IgoImportExportModule,
                            IgoLayerModule,
                            IgoMapModule,
                            IgoMeasureModule,
                            IgoMetadataModule,
                            IgoOverlayModule,
                            IgoPrintModule,
                            IgoQueryModule,
                            IgoDirectionsModule,
                            IgoSearchModule,
                            IgoToastModule,
                            IgoGeoWorkspaceModule,
                            IgoWktModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(IgoGeoModule, { exports: [IgoCatalogModule,
                IgoDataSourceModule,
                IgoDownloadModule,
                IgoDrawingToolModule,
                IgoFeatureModule,
                IgoFilterModule,
                IgoGeometryModule,
                IgoImportExportModule,
                IgoLayerModule,
                IgoMapModule,
                IgoMeasureModule,
                IgoMetadataModule,
                IgoOverlayModule,
                IgoPrintModule,
                IgoQueryModule,
                IgoDirectionsModule,
                IgoSearchModule,
                IgoToastModule,
                IgoGeoWorkspaceModule,
                IgoWktModule] });
    })();

    /**
     * The class is a specialized version of an EntityStore that stores
     * stops.
     */
    var StopsStore = /** @class */ (function (_super) {
        __extends(StopsStore, _super);
        function StopsStore() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.storeInitialized$ = new rxjs.BehaviorSubject(false);
            return _this;
        }
        StopsStore.prototype.clearStops = function () {
            this.storeInitialized$.next(false);
            this.clear();
        };
        return StopsStore;
    }(i6.EntityStore));
    var StopsFeatureStore = /** @class */ (function (_super) {
        __extends(StopsFeatureStore, _super);
        function StopsFeatureStore() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StopsFeatureStore;
    }(FeatureStore));
    var RoutesFeatureStore = /** @class */ (function (_super) {
        __extends(RoutesFeatureStore, _super);
        function RoutesFeatureStore() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return RoutesFeatureStore;
    }(FeatureStore));
    var StepFeatureStore = /** @class */ (function (_super) {
        __extends(StepFeatureStore, _super);
        function StepFeatureStore() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StepFeatureStore;
    }(FeatureStore));

    var OsrmDirectionsSource = /** @class */ (function (_super) {
        __extends(OsrmDirectionsSource, _super);
        function OsrmDirectionsSource(http, config) {
            var _this = _super.call(this) || this;
            _this.http = http;
            _this.config = config;
            _this.directionsUrl = 'https://geoegl.msp.gouv.qc.ca/services/itineraire/route/v1/driving/';
            _this.options = _this.config.getConfig('directionsSources.osrm') || {};
            _this.directionsUrl = _this.options.url || _this.directionsUrl;
            return _this;
        }
        Object.defineProperty(OsrmDirectionsSource.prototype, "enabled", {
            get: function () {
                return this.options.enabled !== false;
            },
            set: function (value) {
                this.options.enabled = value;
            },
            enumerable: false,
            configurable: true
        });
        OsrmDirectionsSource.prototype.getName = function () {
            return OsrmDirectionsSource._name;
        };
        OsrmDirectionsSource.prototype.route = function (coordinates, directionsOptions) {
            var _this = this;
            if (directionsOptions === void 0) { directionsOptions = {}; }
            var directionsParams = this.getRouteParams(directionsOptions);
            return this.http
                .get(this.directionsUrl + coordinates.join(';'), {
                params: directionsParams
            })
                .pipe(operators.map(function (res) { return _this.extractRoutesData(res); }));
        };
        OsrmDirectionsSource.prototype.extractRoutesData = function (response) {
            var _this = this;
            var routeResponse = [];
            response.routes.forEach(function (route) {
                routeResponse.push(_this.formatRoute(route, response.waypoints));
            });
            return routeResponse;
        };
        OsrmDirectionsSource.prototype.getRouteParams = function (directionsOptions) {
            if (directionsOptions === void 0) { directionsOptions = {}; }
            directionsOptions.alternatives = directionsOptions.alternatives !== undefined ? directionsOptions.alternatives : true;
            directionsOptions.steps = directionsOptions.steps !== undefined ? directionsOptions.steps : true;
            directionsOptions.geometries = directionsOptions.geometries !== undefined ? directionsOptions.geometries : 'geojson';
            directionsOptions.overview = directionsOptions.overview !== undefined ? directionsOptions.overview : false;
            directionsOptions.continue_straight = directionsOptions.continue_straight !== undefined ? directionsOptions.continue_straight : false;
            return new i1$2.HttpParams({
                fromObject: {
                    alternatives: directionsOptions.alternatives ? 'true' : 'false',
                    overview: directionsOptions.overview ? 'simplified' : 'full',
                    steps: directionsOptions.steps ? 'true' : 'false',
                    geometries: directionsOptions.geometries ? directionsOptions.geometries : 'geojson',
                    continue_straight: directionsOptions.continue_straight ? 'true' : 'false',
                }
            });
        };
        OsrmDirectionsSource.prototype.formatRoute = function (roadNetworkRoute, waypoints) {
            var stepsUI = [];
            roadNetworkRoute.legs.forEach(function (leg) {
                leg.steps.forEach(function (step) {
                    stepsUI.push(step);
                });
            });
            return {
                id: utils.uuid(),
                title: roadNetworkRoute.legs[0].summary,
                source: OsrmDirectionsSource._name,
                sourceType: exports.SourceDirectionsType.Route,
                order: 1,
                format: exports.DirectionsFormat.GeoJSON,
                icon: 'directions',
                projection: 'EPSG:4326',
                waypoints: waypoints,
                distance: roadNetworkRoute.distance,
                duration: roadNetworkRoute.duration,
                geometry: roadNetworkRoute.geometry,
                legs: roadNetworkRoute.legs,
                steps: stepsUI,
                weight: roadNetworkRoute.weight,
                weight_name: roadNetworkRoute.weight_name
            };
        };
        return OsrmDirectionsSource;
    }(DirectionsSource));
    OsrmDirectionsSource._name = 'OSRM Québec';
    OsrmDirectionsSource.ɵfac = function OsrmDirectionsSource_Factory(t) { return new (t || OsrmDirectionsSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.ConfigService)); };
    OsrmDirectionsSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: OsrmDirectionsSource, factory: OsrmDirectionsSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], OsrmDirectionsSource.prototype, "route", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(OsrmDirectionsSource, [{
                type: i0.Injectable
            }], function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.ConfigService }]; }, { route: [] });
    })();

    function osrmDirectionsSourcesFactory(http, config) {
        return new OsrmDirectionsSource(http, config);
    }
    function provideOsrmDirectionsSource() {
        return {
            provide: DirectionsSource,
            useFactory: osrmDirectionsSourcesFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.ConfigService]
        };
    }

    /**
     * Cadastre search source
     */
    var CadastreSearchSource = /** @class */ (function (_super) {
        __extends(CadastreSearchSource, _super);
        function CadastreSearchSource(http, languageService, storageService, options) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            return _this;
        }
        CadastreSearchSource.prototype.getId = function () {
            return CadastreSearchSource.id;
        };
        CadastreSearchSource.prototype.getType = function () {
            return CadastreSearchSource.type;
        };
        /*
         * Source : https://wiki.openstreetmap.org/wiki/Key:amenity
         */
        CadastreSearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'Cadastre (Québec)',
                searchUrl: 'https://carto.cptaq.gouv.qc.ca/php/find_lot_v1.php?'
            };
        };
        /**
         * Search a place by name
         * @param term Place name
         * @returns Observable of <SearchResult<Feature>[]
         */
        CadastreSearchSource.prototype.search = function (term, options) {
            var _this = this;
            term = term.endsWith(',') ? term.slice(0, -1) : term;
            term = term.startsWith(',') ? term.substr(1) : term;
            term = term.replace(/ /g, '');
            var params = this.computeSearchRequestParams(term, options || {});
            if (!params.get('numero') || !params.get('numero').match(/^[0-9,]+$/g)) {
                return rxjs.of([]);
            }
            return this.http
                .get(this.searchUrl, { params: params, responseType: 'text' })
                .pipe(operators.map(function (response) { return _this.extractResults(response, term); }));
        };
        CadastreSearchSource.prototype.computeSearchRequestParams = function (term, options) {
            return new i1$2.HttpParams({
                fromObject: Object.assign({
                    numero: term,
                    epsg: '4326'
                }, this.params, options.params || {})
            });
        };
        CadastreSearchSource.prototype.extractResults = function (response, term) {
            var _this = this;
            return response
                .split('<br />')
                .filter(function (lot) { return lot.length > 0; })
                .map(function (lot) { return _this.dataToResult(lot, term); });
        };
        CadastreSearchSource.prototype.dataToResult = function (data, term) {
            var lot = data.split(';');
            var numero = lot[0];
            var wkt = lot[7];
            var geometry = this.computeGeometry(wkt);
            var properties = {
                NoLot: numero,
                Route: '<span class="routing"> <u>' + this.languageService.translate.instant('igo.geo.seeRouting') + '</u> </span>'
            };
            var id = [this.getId(), 'cadastre', numero].join('.');
            return {
                source: this,
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: numero,
                    score: computeTermSimilarity(term.trim(), numero),
                    icon: 'map-marker'
                },
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: geometry,
                    properties: properties,
                    meta: {
                        id: id,
                        title: numero
                    }
                }
            };
        };
        CadastreSearchSource.prototype.computeGeometry = function (wkt) {
            var feature = new olWKT__default["default"]().readFeature(wkt, {
                dataProjection: 'EPSG:4326',
                featureProjection: 'EPSG:4326'
            });
            return {
                type: feature.getGeometry().getType(),
                coordinates: feature.getGeometry().getCoordinates()
            };
        };
        return CadastreSearchSource;
    }(SearchSource));
    CadastreSearchSource.id = 'cadastre';
    CadastreSearchSource.type = FEATURE;
    CadastreSearchSource.ɵfac = function CadastreSearchSource_Factory(t) { return new (t || CadastreSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options')); };
    CadastreSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: CadastreSearchSource, factory: CadastreSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], CadastreSearchSource.prototype, "search", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(CadastreSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }];
        }, { search: [] });
    })();

    /**
     * Cadastre search source factory
     * @ignore
     */
    function cadastreSearchSourceFactory(http, languageService, storageService, config) {
        return new CadastreSearchSource(http, languageService, storageService, config.getConfig("searchSources." + CadastreSearchSource.id));
    }
    /**
     * Function that returns a provider for the Cadastre search source
     */
    function provideCadastreSearchSource() {
        return {
            provide: SearchSource,
            useFactory: cadastreSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.LanguageService, i2$1.StorageService, i2$1.ConfigService]
        };
    }

    /**
     * Nominatim search source
     */
    var NominatimSearchSource = /** @class */ (function (_super) {
        __extends(NominatimSearchSource, _super);
        function NominatimSearchSource(http, options, storageService) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            return _this;
        }
        NominatimSearchSource.prototype.getId = function () {
            return NominatimSearchSource.id;
        };
        NominatimSearchSource.prototype.getType = function () {
            return NominatimSearchSource.type;
        };
        /*
         * Source : https://wiki.openstreetmap.org/wiki/Key:amenity
         */
        NominatimSearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'Nominatim (OSM)',
                searchUrl: 'https://nominatim.openstreetmap.org/search',
                settings: [
                    {
                        type: 'checkbox',
                        title: 'results type',
                        name: 'amenity',
                        values: [
                            {
                                title: 'igo.geo.search.nominatim.type.food',
                                value: 'bar,bbq,biergaten,cafe,drinking_water,fast_food,food_court,ice_cream,pub,restaurant',
                                enabled: false
                            },
                            {
                                title: 'igo.geo.search.nominatim.type.health',
                                value: 'baby_hatch,clinic,dentist,doctors,hospital,nursing_home,pharmacy,social_facility,veterinary',
                                enabled: false
                            },
                            {
                                title: 'igo.geo.search.nominatim.type.entertainment',
                                value: 'arts_centre,brothel,casino,cinema,community_center_fountain,gambling,nightclub,planetarium \
                          ,public_bookcase,social_centre,stripclub,studio,swingerclub,theatre,internet_cafe',
                                enabled: false
                            },
                            {
                                title: 'igo.geo.search.nominatim.type.finance',
                                value: 'atm,bank,bureau_de_change',
                                enabled: false
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'results limit',
                        name: 'limit',
                        values: [
                            {
                                title: '10',
                                value: 10,
                                enabled: true
                            },
                            {
                                title: '20',
                                value: 20,
                                enabled: false
                            },
                            {
                                title: '50',
                                value: 50,
                                enabled: false
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'restrictExtent',
                        name: 'countrycodes',
                        values: [
                            {
                                title: 'igo.geo.search.nominatim.country.canada',
                                value: 'CA',
                                enabled: true
                            },
                            {
                                title: 'igo.geo.search.nominatim.country.all',
                                value: null,
                                enabled: false
                            }
                        ]
                    },
                    {
                        type: 'radiobutton',
                        title: 'multiple object',
                        name: 'dedupe',
                        values: [
                            {
                                title: 'igo.geo.search.searchSources.settings.true',
                                value: 0,
                                enabled: false
                            },
                            {
                                title: 'igo.geo.search.searchSources.settings.false',
                                value: 1,
                                enabled: true
                            }
                        ]
                    }
                ]
            };
        };
        /**
         * Search a place by name
         * @param term Place name
         * @returns Observable of <SearchResult<Feature>[]
         */
        NominatimSearchSource.prototype.search = function (term, options) {
            var _this = this;
            var params = this.computeSearchRequestParams(term, options || {});
            if (!params.get('q')) {
                return rxjs.of([]);
            }
            return this.http
                .get(this.searchUrl, { params: params })
                .pipe(operators.map(function (response) { return _this.extractResults(response, term); }));
        };
        NominatimSearchSource.prototype.computeSearchRequestParams = function (term, options) {
            return new i1$2.HttpParams({
                fromObject: Object.assign({
                    q: this.computeTerm(term),
                    format: 'json'
                }, this.params, options.params || {})
            });
        };
        NominatimSearchSource.prototype.extractResults = function (response, term) {
            var _this = this;
            return response.map(function (data) { return _this.dataToResult(data, term); });
        };
        NominatimSearchSource.prototype.dataToResult = function (data, term) {
            var properties = this.computeProperties(data);
            var geometry = this.computeGeometry(data);
            var extent = this.computeExtent(data);
            var id = [this.getId(), 'place', data.place_id].join('.');
            return {
                source: this,
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: data.display_name,
                    icon: 'map-marker',
                    score: computeTermSimilarity(term.trim(), data.display_name)
                },
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: geometry,
                    extent: extent,
                    properties: properties,
                    meta: {
                        id: id,
                        title: data.display_name
                    }
                }
            };
        };
        NominatimSearchSource.prototype.computeProperties = function (data) {
            return {
                display_name: data.display_name,
                place_id: data.place_id,
                osm_type: data.osm_type,
                class: data.class,
                type: data.type
            };
        };
        NominatimSearchSource.prototype.computeGeometry = function (data) {
            return {
                type: 'Point',
                coordinates: [parseFloat(data.lon), parseFloat(data.lat)]
            };
        };
        NominatimSearchSource.prototype.computeExtent = function (data) {
            return [
                parseFloat(data.boundingbox[2]),
                parseFloat(data.boundingbox[0]),
                parseFloat(data.boundingbox[3]),
                parseFloat(data.boundingbox[1])
            ];
        };
        NominatimSearchSource.prototype.computeTerm = function (term) {
            return this.computeTermTags(term);
        };
        /**
         * Add hashtag from query in Nominatim's format (+[])
         * @param term Query with hashtag
         */
        NominatimSearchSource.prototype.computeTermTags = function (term) {
            var hashtags = _super.prototype.getHashtagsValid.call(this, term, 'amenity');
            if (!hashtags) {
                return this.computeTermSettings(term);
            }
            if (!hashtags.length) {
                return null;
            }
            term = term.replace(/(#[^\s]*)/g, '');
            hashtags.forEach(function (tag) {
                term += '+[' + tag + ']';
            });
            return term;
        };
        /**
         * Add hashtag from settings in Nominatim's format (+[])
         * @param term Query
         */
        NominatimSearchSource.prototype.computeTermSettings = function (term) {
            this.options.settings.forEach(function (settings) {
                if (settings.name === 'amenity') {
                    settings.values.forEach(function (conf) {
                        if (conf.enabled && typeof conf.value === 'string') {
                            var splitted = conf.value.split(',');
                            splitted.forEach(function (value) {
                                term += '+[' + value + ']';
                            });
                        }
                    });
                }
            });
            return term;
        };
        return NominatimSearchSource;
    }(SearchSource));
    NominatimSearchSource.id = 'nominatim';
    NominatimSearchSource.type = FEATURE;
    NominatimSearchSource.ɵfac = function NominatimSearchSource_Factory(t) { return new (t || NominatimSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject('options'), i0__namespace.ɵɵinject(i2__namespace$1.StorageService)); };
    NominatimSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: NominatimSearchSource, factory: NominatimSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], NominatimSearchSource.prototype, "search", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(NominatimSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }, { type: i2__namespace$1.StorageService }];
        }, { search: [] });
    })();

    /**
     * Nominatim search source factory
     * @ignore
     */
    function nominatimSearchSourceFactory(http, config, storageService) {
        return new NominatimSearchSource(http, config.getConfig("searchSources." + NominatimSearchSource.id), storageService);
    }
    /**
     * Function that returns a provider for the Nominatim search source
     */
    function provideNominatimSearchSource() {
        return {
            provide: SearchSource,
            useFactory: nominatimSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.ConfigService, i2$1.StorageService]
        };
    }

    /**
     * StoredQueries search source
     */
    var StoredQueriesSearchSource = /** @class */ (function (_super) {
        __extends(StoredQueriesSearchSource, _super);
        function StoredQueriesSearchSource(http, languageService, storageService, options) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            _this.storedQueriesOptions = options;
            if (_this.storedQueriesOptions && !_this.storedQueriesOptions.available) {
                return _this;
            }
            var defaultStoredqueryId = 'rtss';
            var defaultFieldSplitter = [
                { name: 'rtss', defaultValue: '-99' },
                { name: 'chainage', defaultValue: '0', splitPrefix: '\\+' }
            ];
            var defaultOutputformat = 'text/xml; subtype=gml/3.1.1';
            var defaultSrsname = 'EPSG:4326';
            var defaultResultTitle = 'title';
            if (!_this.storedQueriesOptions) {
                console.log(' No configuration for this search source (storedqueries). You will use the default values');
                _this.storedQueriesOptions = {
                    storedquery_id: defaultStoredqueryId,
                    fields: defaultFieldSplitter,
                    outputformat: defaultOutputformat,
                    srsname: defaultSrsname,
                    resultTitle: defaultResultTitle
                };
                _this.resultTitle = defaultResultTitle;
                console.log('Default values', _this.storedQueriesOptions);
            }
            if (!_this.storedQueriesOptions.storedquery_id) {
                var err = 'Stored Queries :You have to set "storedquery_id" into StoredQueries options. ex: storedquery_id: "nameofstoredquerie"';
                throw new Error(err);
            }
            if (!_this.storedQueriesOptions.fields) {
                throw new Error('Stored Queries :You have to set "fields" into options. ex: fields: {"name": "rtss", "defaultValue": "-99"}');
            }
            _this.storedQueriesOptions.outputformat =
                _this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';
            _this.storedQueriesOptions.srsname =
                _this.storedQueriesOptions.srsname || 'EPSG:4326';
            var storedQueryId = _this.storedQueriesOptions.storedquery_id.toLowerCase();
            if (storedQueryId.includes('getfeaturebyid') &&
                _this.storedQueriesOptions.outputformat
                    .toLowerCase()
                    .includes('getfeaturebyid')) {
                var err = 'You must set a geojson format for your stored query. This is due to an openlayers issue)';
                err += ' (wfs 1.1.0 & gml 3.1.1 limitation)';
                throw new Error(err);
            }
            if (!(_this.storedQueriesOptions.fields instanceof Array)) {
                _this.storedQueriesOptions.fields = [_this.storedQueriesOptions.fields];
            }
            _this.multipleFieldsQuery =
                _this.storedQueriesOptions.fields.length > 1 ? true : false;
            _this.storedQueriesOptions.fields.forEach(function (field, index) {
                if (_this.multipleFieldsQuery && !field.splitPrefix && index !== 0) {
                    throw new Error('Stored Queries :You must set a field spliter into your field definition (optional for the first one!)');
                }
                if (!field.defaultValue) {
                    throw new Error('Stored Queries :You must set a field default value into your field definition');
                }
            });
            _this.storedQueriesOptions.resultTitle =
                _this.storedQueriesOptions.resultTitle || _this.resultTitle;
            return _this;
        }
        StoredQueriesSearchSource.prototype.getId = function () {
            return StoredQueriesSearchSource.id;
        };
        StoredQueriesSearchSource.prototype.getType = function () {
            return StoredQueriesSearchSource.type;
        };
        StoredQueriesSearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'Stored Queries',
                searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'
            };
        };
        // URL CALL EXAMPLES:
        //  GetFeatureById (mandatory storedquery for wfs server) (outputformat must be in geojson)
        /* eslint-disable max-len */
        //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=2.0.0&request=GetFeature&storedquery_id=urn:ogc:def:query:OGC-WFS::GetFeatureById&srsname=epsg:4326&outputformat=geojson&ID=a_num_route.132
        //  Custom StoredQuery
        /* eslint-disable max-len */
        //  https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=rtss&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&rtss=0013801110000c&chainage=12
        /**
         * Search a location by name or keyword
         * @param term Location name or keyword
         * @returns Observable of <SearchResult<Feature>[]
         */
        StoredQueriesSearchSource.prototype.search = function (term, options) {
            var _this = this;
            var storedqueriesParams = this.termSplitter(term, this.storedQueriesOptions.fields);
            var params = this.computeRequestParams(options || {}, storedqueriesParams);
            this.options.params = this.options.params ? this.options.params : {};
            this.options.params.page = options.page ? String(options.page) : '1';
            if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {
                return this.http
                    .get(this.searchUrl, { params: params, responseType: 'text' })
                    .pipe(operators.map(function (response) {
                    var resultArray = _this.extractResults(_this.extractWFSData(response), term);
                    resultArray.sort(function (a, b) { return (a.meta.score > b.meta.score) ? 1 :
                        (a.meta.score === b.meta.score) ? ((a.meta.titleHtml < b.meta.titleHtml) ? 1 : -1) : -1; });
                    resultArray.reverse();
                    if (resultArray.length > Number(_this.options.params.limit)) {
                        var idxEnd = Number(_this.options.params.limit) * Number(_this.options.params.page);
                        var resultTotLenght = resultArray.length;
                        resultArray = resultArray.slice(0, idxEnd);
                        if (idxEnd < resultTotLenght) {
                            resultArray[resultArray.length - 1].meta.nextPage = true;
                        }
                        else {
                            resultArray[resultArray.length - 1].meta.nextPage = false;
                        }
                    }
                    return resultArray;
                }));
            }
            else {
                return this.http.get(this.searchUrl, { params: params }).pipe(operators.map(function (response) {
                    return _this.extractResults(_this.extractWFSData(response), term);
                }));
            }
        };
        StoredQueriesSearchSource.prototype.getFormatFromOptions = function () {
            var olFormatCls;
            var outputFormat = this.storedQueriesOptions.outputformat;
            var patternGml3 = new RegExp('.*?gml.*?', 'i');
            var patternGeojson = new RegExp('.*?json.*?', 'i');
            if (patternGeojson.test(outputFormat)) {
                olFormatCls = olformat__namespace.GeoJSON;
            }
            if (patternGml3.test(outputFormat)) {
                olFormatCls = olformat__namespace.WFS;
            }
            return new olFormatCls();
        };
        StoredQueriesSearchSource.prototype.extractWFSData = function (res) {
            var olFormat = this.getFormatFromOptions();
            var geojson = olformat__namespace.GeoJSON;
            var wfsfeatures = olFormat.readFeatures(res);
            var features = JSON.parse(new geojson().writeFeatures(wfsfeatures));
            return features;
        };
        StoredQueriesSearchSource.prototype.termSplitter = function (term, fields) {
            var splittedTerm = {};
            var remainingTerm = term;
            var cnt = 0;
            // Used to build the default values
            fields.forEach(function (field) {
                splittedTerm[field.name] = field.defaultValue;
                var splitterRegex = new RegExp(field.splitPrefix + '(.+)', 'i');
                if (splitterRegex.test(remainingTerm)) {
                    cnt = field.splitPrefix ? (cnt += 1) : cnt;
                    remainingTerm = remainingTerm.split(splitterRegex)[1];
                }
            });
            if (cnt === 0) {
                splittedTerm[fields[0].name] = term;
                return splittedTerm;
            }
            remainingTerm = term;
            var localFields = __spreadArray([], __read(fields)).reverse();
            localFields.forEach(function (field) {
                var splitterRegex = new RegExp(field.splitPrefix || '' + '(.+)', 'i');
                if (remainingTerm || remainingTerm !== '') {
                    var values = remainingTerm.split(splitterRegex);
                    remainingTerm = values[0];
                    if (values[1]) {
                        splittedTerm[field.name] = values[1].trim();
                    }
                }
            });
            return splittedTerm;
        };
        StoredQueriesSearchSource.prototype.computeRequestParams = function (options, queryParams) {
            var wfsversion = this.storedQueriesOptions.storedquery_id
                .toLowerCase()
                .includes('getfeaturebyid')
                ? '2.0.0'
                : '1.1.0';
            return new i1$2.HttpParams({
                fromObject: Object.assign({
                    service: 'wfs',
                    version: wfsversion,
                    request: 'GetFeature',
                    storedquery_id: this.storedQueriesOptions.storedquery_id,
                    srsname: this.storedQueriesOptions.srsname,
                    outputformat: this.storedQueriesOptions.outputformat
                }, queryParams, this.params, options.params || {})
            });
        };
        StoredQueriesSearchSource.prototype.extractResults = function (response, term) {
            var _this = this;
            return response.features.map(function (data) {
                return _this.dataToResult(data, term);
            });
        };
        StoredQueriesSearchSource.prototype.dataToResult = function (data, term) {
            var properties = this.computeProperties(data);
            var id = [this.getId(), properties.type, data.id].join('.');
            var title = data.properties[this.storedQueriesOptions.resultTitle]
                ? this.storedQueriesOptions.resultTitle
                : this.resultTitle;
            return {
                source: this,
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: data.geometry,
                    // extent: data.bbox,
                    properties: properties,
                    meta: {
                        id: id,
                        title: data.properties[title]
                    }
                },
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: data.properties.title,
                    titleHtml: data.properties[title],
                    icon: 'map-marker',
                    score: (data.properties.title) ?
                        computeTermSimilarity(term.trim(), data.properties.title) :
                        computeTermSimilarity(term.trim(), data.properties[title]),
                }
            };
        };
        StoredQueriesSearchSource.prototype.computeProperties = function (data) {
            var properties = Object.assign({}, utils.ObjectUtils.removeKeys(data.properties, StoredQueriesSearchSource.propertiesBlacklist), { Route: '<span class="routing"> <u>' + this.languageService.translate.instant('igo.geo.seeRouting') + '</u> </span>' });
            return properties;
        };
        return StoredQueriesSearchSource;
    }(SearchSource));
    StoredQueriesSearchSource.id = 'storedqueries';
    StoredQueriesSearchSource.type = FEATURE;
    StoredQueriesSearchSource.propertiesBlacklist = [
        'boundedBy',
        'id',
        'coord_x',
        'coord_y'
    ];
    StoredQueriesSearchSource.ɵfac = function StoredQueriesSearchSource_Factory(t) { return new (t || StoredQueriesSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options')); };
    StoredQueriesSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: StoredQueriesSearchSource, factory: StoredQueriesSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], StoredQueriesSearchSource.prototype, "search", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(StoredQueriesSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }];
        }, { search: [] });
    })();
    /**
     * StoredQueriesReverse search source
     */
    // EXAMPLE CALLS
    /* eslint-disable max-len */
    // https://ws.mapserver.transports.gouv.qc.ca/swtq?service=wfs&version=1.1.0&request=GetFeature&storedquery_id=lim_adm&srsname=epsg:4326&outputformat=text/xml;%20subtype=gml/3.1.1&long=-71.292469&lat=46.748107
    //
    var StoredQueriesReverseSearchSource = /** @class */ (function (_super) {
        __extends(StoredQueriesReverseSearchSource, _super);
        function StoredQueriesReverseSearchSource(http, languageService, storageService, options) {
            var _this = _super.call(this, options, storageService) || this;
            _this.http = http;
            _this.languageService = languageService;
            _this.storedQueriesOptions = options;
            if (!_this.storedQueriesOptions || (_this.storedQueriesOptions && !_this.storedQueriesOptions.available)) {
                return _this;
            }
            if (!_this.storedQueriesOptions.storedquery_id) {
                var err = 'Stored Queries :You have to set "storedquery_id" into StoredQueries options. ex: storedquery_id: "nameofstoredquerie"';
                throw new Error(err);
            }
            if (!_this.storedQueriesOptions.longField) {
                throw new Error('Stored Queries :You have to set "longField" to map the longitude coordinate to the query params.');
            }
            if (!_this.storedQueriesOptions.latField) {
                throw new Error('Stored Queries :You have to set "latField" to map the latitude coordinate to the query params.');
            }
            _this.storedQueriesOptions.outputformat =
                _this.storedQueriesOptions.outputformat || 'text/xml; subtype=gml/3.1.1';
            _this.storedQueriesOptions.srsname =
                _this.storedQueriesOptions.srsname || 'EPSG:4326';
            _this.storedQueriesOptions.resultTitle =
                _this.storedQueriesOptions.resultTitle || _this.resultTitle;
            return _this;
        }
        StoredQueriesReverseSearchSource.prototype.getId = function () {
            return StoredQueriesReverseSearchSource.id;
        };
        StoredQueriesReverseSearchSource.prototype.getType = function () {
            return StoredQueriesReverseSearchSource.type;
        };
        StoredQueriesReverseSearchSource.prototype.getDefaultOptions = function () {
            return {
                title: 'Stored Queries (reverse)',
                searchUrl: 'https://ws.mapserver.transports.gouv.qc.ca/swtq'
            };
        };
        /**
         * Search a location by coordinates
         * @param lonLat Location coordinates
         * @param distance Search raidus around lonLat
         * @returns Observable of <SearchResult<Feature>[]
         */
        StoredQueriesReverseSearchSource.prototype.reverseSearch = function (lonLat, options) {
            var _this = this;
            var params = this.computeRequestParams(lonLat, options || {});
            if (new RegExp('.*?gml.*?', 'i').test(this.storedQueriesOptions.outputformat)) {
                return this.http
                    .get(this.searchUrl, { params: params, responseType: 'text' })
                    .pipe(operators.map(function (response) {
                    return _this.extractResults(_this.extractWFSData(response));
                }));
            }
            else {
                return this.http.get(this.searchUrl, { params: params }).pipe(operators.map(function (response) {
                    return _this.extractResults(_this.extractWFSData(response));
                }));
            }
        };
        StoredQueriesReverseSearchSource.prototype.getFormatFromOptions = function () {
            var olFormatCls;
            var outputFormat = this.storedQueriesOptions.outputformat;
            var patternGml3 = new RegExp('.*?gml.*?', 'i');
            var patternGeojson = new RegExp('.*?json.*?', 'i');
            if (patternGeojson.test(outputFormat)) {
                olFormatCls = olformat__namespace.GeoJSON;
            }
            if (patternGml3.test(outputFormat)) {
                olFormatCls = olformat__namespace.WFS;
            }
            return new olFormatCls();
        };
        StoredQueriesReverseSearchSource.prototype.extractWFSData = function (res) {
            var olFormat = this.getFormatFromOptions();
            var geojson = olformat__namespace.GeoJSON;
            var wfsfeatures = olFormat.readFeatures(res);
            var features = JSON.parse(new geojson().writeFeatures(wfsfeatures));
            return features;
        };
        StoredQueriesReverseSearchSource.prototype.computeRequestParams = function (lonLat, options) {
            var longLatParams = {};
            longLatParams[this.storedQueriesOptions.longField] = lonLat[0];
            longLatParams[this.storedQueriesOptions.latField] = lonLat[1];
            return new i1$2.HttpParams({
                fromObject: Object.assign({
                    service: 'WFS',
                    version: '1.1.0',
                    request: 'GetFeature',
                    storedquery_id: this.storedQueriesOptions.storedquery_id,
                    srsname: this.storedQueriesOptions.srsname,
                    outputformat: this.storedQueriesOptions.outputformat
                }, longLatParams, this.params, options.params || {})
            });
        };
        StoredQueriesReverseSearchSource.prototype.extractResults = function (response) {
            var _this = this;
            return response.features.map(function (data) {
                return _this.dataToResult(data);
            });
        };
        StoredQueriesReverseSearchSource.prototype.dataToResult = function (data) {
            var properties = this.computeProperties(data);
            var id = [this.getId(), properties.type, data.id].join('.');
            var title = data.properties[this.storedQueriesOptions.resultTitle]
                ? this.storedQueriesOptions.resultTitle
                : this.resultTitle;
            return {
                source: this,
                data: {
                    type: FEATURE,
                    projection: 'EPSG:4326',
                    geometry: data.geometry,
                    properties: properties,
                    meta: {
                        id: id,
                        title: data.properties[title]
                    }
                },
                meta: {
                    dataType: FEATURE,
                    id: id,
                    title: data.properties[title],
                    icon: 'map-marker'
                }
            };
        };
        StoredQueriesReverseSearchSource.prototype.computeProperties = function (data) {
            var properties = utils.ObjectUtils.removeKeys(data.properties, StoredQueriesReverseSearchSource.propertiesBlacklist);
            var routing = {
                Route: '<span class="routing"> <u>' + this.languageService.translate.instant('igo.geo.seeRouting') + '</u> </span>'
            };
            return Object.assign(properties, { type: data.properties.doc_type }, routing);
        };
        return StoredQueriesReverseSearchSource;
    }(SearchSource));
    StoredQueriesReverseSearchSource.id = 'storedqueriesreverse';
    StoredQueriesReverseSearchSource.type = FEATURE;
    StoredQueriesReverseSearchSource.propertiesBlacklist = [];
    StoredQueriesReverseSearchSource.ɵfac = function StoredQueriesReverseSearchSource_Factory(t) { return new (t || StoredQueriesReverseSearchSource)(i0__namespace.ɵɵinject(i1__namespace$2.HttpClient), i0__namespace.ɵɵinject(i2__namespace$1.LanguageService), i0__namespace.ɵɵinject(i2__namespace$1.StorageService), i0__namespace.ɵɵinject('options')); };
    StoredQueriesReverseSearchSource.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: StoredQueriesReverseSearchSource, factory: StoredQueriesReverseSearchSource.ɵfac });
    __decorate([
        tsCacheable.Cacheable({
            maxCacheCount: 20
        })
    ], StoredQueriesReverseSearchSource.prototype, "reverseSearch", null);
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(StoredQueriesReverseSearchSource, [{
                type: i0.Injectable
            }], function () {
            return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace$1.LanguageService }, { type: i2__namespace$1.StorageService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: ['options']
                        }] }];
        }, { reverseSearch: [] });
    })();

    /**
     * StoredQueries search source factory
     * @ignore
     */
    function storedqueriesSearchSourceFactory(http, languageService, storageService, config) {
        return new StoredQueriesSearchSource(http, languageService, storageService, config.getConfig("searchSources." + StoredQueriesSearchSource.id));
    }
    /**
     * Function that returns a provider for the StoredQueries search source
     */
    function provideStoredQueriesSearchSource() {
        return {
            provide: SearchSource,
            useFactory: storedqueriesSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.LanguageService, i2$1.StorageService, i2$1.ConfigService]
        };
    }
    /**
     * StoredQueriesReverse search source factory
     * @ignore
     */
    function storedqueriesReverseSearchSourceFactory(http, languageService, storageService, config) {
        return new StoredQueriesReverseSearchSource(http, languageService, storageService, config.getConfig("searchSources." + StoredQueriesReverseSearchSource.id));
    }
    /**
     * Function that returns a provider for the StoredQueriesReverse search source
     */
    function provideStoredQueriesReverseSearchSource() {
        return {
            provide: SearchSource,
            useFactory: storedqueriesReverseSearchSourceFactory,
            multi: true,
            deps: [i1$2.HttpClient, i2$1.LanguageService, i2$1.StorageService, i2$1.ConfigService]
        };
    }

    function getRowsInMapExtent(layerId, storageService) {
        return storageService.get("workspace.rowsInMapExtent." + layerId) || true;
    }
    function setRowsInMapExtent(value, layerId, storageService) {
        storageService.set("workspace.rowsInMapExtent." + layerId, value, i2$1.StorageScope.SESSION);
    }
    function getSelectedOnly(layerId, storageService) {
        return storageService.get("workspace.selectedOnly." + layerId) || false;
    }
    function setSelectedOnly(value, layerId, storageService) {
        storageService.set("workspace.selectedOnly." + layerId, value, i2$1.StorageScope.SESSION);
    }
    function mapExtentStrategyActiveToolTip(ws) {
        return ws.entityStore.getStrategyOfType(i6.EntityStoreFilterCustomFuncStrategy).active$.pipe(operators.map(function (active) { return active ? 'igo.geo.workspace.inMapExtent.active.tooltip' : 'igo.geo.workspace.inMapExtent.inactive.tooltip'; }));
    }
    function noElementSelected(ws) {
        return ws.entityStore.stateView.manyBy$(function (record) {
            return record.state.selected === true;
        }).pipe(operators.map(function (entities) { return entities.length >= 1; }));
    }

    /*
     * Public API Surface of geo
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AddCatalogDialogComponent = AddCatalogDialogComponent;
    exports.ArcGISRestDataSource = ArcGISRestDataSource;
    exports.BaseLayersSwitcherComponent = BaseLayersSwitcherComponent;
    exports.CadastreSearchSource = CadastreSearchSource;
    exports.CapabilitiesService = CapabilitiesService;
    exports.CartoDataSource = CartoDataSource;
    exports.Catalog = Catalog;
    exports.CatalogBrowserComponent = CatalogBrowserComponent;
    exports.CatalogFactory = CatalogFactory;
    exports.CatalogLibaryComponent = CatalogLibaryComponent;
    exports.CatalogService = CatalogService;
    exports.ClusterDataSource = ClusterDataSource;
    exports.CompositeCatalog = CompositeCatalog;
    exports.ConfirmationPopupComponent = ConfirmationPopupComponent;
    exports.CoordinatesReverseSearchSource = CoordinatesReverseSearchSource;
    exports.CoordinatesReverseSearchSourceFactory = CoordinatesReverseSearchSourceFactory;
    exports.CoordinatesSearchResultFormatter = CoordinatesSearchResultFormatter;
    exports.DataService = DataService;
    exports.DataSource = DataSource;
    exports.DataSourceService = DataSourceService;
    exports.DirectionsButtonsComponent = DirectionsButtonsComponent;
    exports.DirectionsComponent = DirectionsComponent;
    exports.DirectionsInputsComponent = DirectionsInputsComponent;
    exports.DirectionsResultsComponent = DirectionsResultsComponent;
    exports.DirectionsService = DirectionsService;
    exports.DirectionsSource = DirectionsSource;
    exports.DownloadButtonComponent = DownloadButtonComponent;
    exports.DownloadService = DownloadService;
    exports.DrawComponent = DrawComponent;
    exports.DrawControl = DrawControl;
    exports.DrawIconService = DrawIconService;
    exports.DrawStyleService = DrawStyleService;
    exports.DropGeoFileDirective = DropGeoFileDirective;
    exports.EditionWorkspace = EditionWorkspace;
    exports.EditionWorkspaceService = EditionWorkspaceService;
    exports.EncodingFormat = EncodingFormat;
    exports.EsriStyleGenerator = EsriStyleGenerator;
    exports.ExportButtonComponent = ExportButtonComponent;
    exports.ExportError = ExportError;
    exports.ExportFormat = ExportFormat;
    exports.ExportInvalidFileError = ExportInvalidFileError;
    exports.ExportNothingToExportError = ExportNothingToExportError;
    exports.ExportService = ExportService;
    exports.FEATURE = FEATURE;
    exports.FeatureDataSource = FeatureDataSource;
    exports.FeatureDetailsComponent = FeatureDetailsComponent;
    exports.FeatureDetailsDirective = FeatureDetailsDirective;
    exports.FeatureFormComponent = FeatureFormComponent;
    exports.FeatureStore = FeatureStore;
    exports.FeatureStoreInMapExtentStrategy = FeatureStoreInMapExtentStrategy;
    exports.FeatureStoreInMapResolutionStrategy = FeatureStoreInMapResolutionStrategy;
    exports.FeatureStoreLoadingLayerStrategy = FeatureStoreLoadingLayerStrategy;
    exports.FeatureStoreLoadingStrategy = FeatureStoreLoadingStrategy;
    exports.FeatureStoreSelectionStrategy = FeatureStoreSelectionStrategy;
    exports.FeatureWorkspace = FeatureWorkspace;
    exports.FeatureWorkspaceService = FeatureWorkspaceService;
    exports.FilterableDataSourcePipe = FilterableDataSourcePipe;
    exports.GeolocateButtonComponent = GeolocateButtonComponent;
    exports.GeometryFormFieldInputComponent = GeometryFormFieldInputComponent;
    exports.GeometrySliceError = GeometrySliceError;
    exports.GeometrySliceLineStringError = GeometrySliceLineStringError;
    exports.GeometrySliceMultiPolygonError = GeometrySliceMultiPolygonError;
    exports.GeometrySliceTooManyIntersectionError = GeometrySliceTooManyIntersectionError;
    exports.GoogleLinks = GoogleLinks;
    exports.HomeExtentButtonComponent = HomeExtentButtonComponent;
    exports.HoverFeatureDirective = HoverFeatureDirective;
    exports.IChercheReverseSearchSource = IChercheReverseSearchSource;
    exports.IChercheSearchResultFormatter = IChercheSearchResultFormatter;
    exports.IChercheSearchSource = IChercheSearchSource;
    exports.ILayerSearchResultFormatter = ILayerSearchResultFormatter;
    exports.ILayerSearchSource = ILayerSearchSource;
    exports.IgoCatalogBrowserModule = IgoCatalogBrowserModule;
    exports.IgoCatalogLibraryModule = IgoCatalogLibraryModule;
    exports.IgoCatalogModule = IgoCatalogModule;
    exports.IgoConfirmationPopupModule = IgoConfirmationPopupModule;
    exports.IgoDataSourceModule = IgoDataSourceModule;
    exports.IgoDirectionsModule = IgoDirectionsModule;
    exports.IgoDownloadModule = IgoDownloadModule;
    exports.IgoDrawModule = IgoDrawModule;
    exports.IgoDrawingToolModule = IgoDrawingToolModule;
    exports.IgoFeatureDetailsModule = IgoFeatureDetailsModule;
    exports.IgoFeatureFormModule = IgoFeatureFormModule;
    exports.IgoFeatureModule = IgoFeatureModule;
    exports.IgoFilterModule = IgoFilterModule;
    exports.IgoGeoModule = IgoGeoModule;
    exports.IgoGeoWorkspaceModule = IgoGeoWorkspaceModule;
    exports.IgoGeometryFormFieldModule = IgoGeometryFormFieldModule;
    exports.IgoGeometryModule = IgoGeometryModule;
    exports.IgoHttpParameterCodec = IgoHttpParameterCodec;
    exports.IgoImportExportModule = IgoImportExportModule;
    exports.IgoLayerModule = IgoLayerModule;
    exports.IgoMap = IgoMap;
    exports.IgoMapModule = IgoMapModule;
    exports.IgoMeasureModule = IgoMeasureModule;
    exports.IgoMeasurerModule = IgoMeasurerModule;
    exports.IgoMetadataModule = IgoMetadataModule;
    exports.IgoOgcFilterModule = IgoOgcFilterModule;
    exports.IgoOverlayModule = IgoOverlayModule;
    exports.IgoPrintModule = IgoPrintModule;
    exports.IgoQueryModule = IgoQueryModule;
    exports.IgoSearchBarModule = IgoSearchBarModule;
    exports.IgoSearchModule = IgoSearchModule;
    exports.IgoSearchResultsModule = IgoSearchResultsModule;
    exports.IgoSearchSelectorModule = IgoSearchSelectorModule;
    exports.IgoSearchSettingsModule = IgoSearchSettingsModule;
    exports.IgoStyleListModule = IgoStyleListModule;
    exports.IgoToastModule = IgoToastModule;
    exports.IgoWktModule = IgoWktModule;
    exports.IgoWorkspaceSelectorModule = IgoWorkspaceSelectorModule;
    exports.IgoWorkspaceUpdatorModule = IgoWorkspaceUpdatorModule;
    exports.ImageArcGISRestDataSource = ImageArcGISRestDataSource;
    exports.ImageLayer = ImageLayer;
    exports.ImageWatcher = ImageWatcher;
    exports.ImportError = ImportError;
    exports.ImportExportComponent = ImportExportComponent;
    exports.ImportInvalidFileError = ImportInvalidFileError;
    exports.ImportNothingToImportError = ImportNothingToImportError;
    exports.ImportOgreServerError = ImportOgreServerError;
    exports.ImportSRSError = ImportSRSError;
    exports.ImportService = ImportService;
    exports.ImportSizeError = ImportSizeError;
    exports.ImportUnreadableFileError = ImportUnreadableFileError;
    exports.InfoSectionComponent = InfoSectionComponent;
    exports.LAYER = LAYER;
    exports.Layer = Layer;
    exports.LayerItemComponent = LayerItemComponent;
    exports.LayerLegendComponent = LayerLegendComponent;
    exports.LayerLegendItemComponent = LayerLegendItemComponent;
    exports.LayerLegendListBindingDirective = LayerLegendListBindingDirective;
    exports.LayerLegendListComponent = LayerLegendListComponent;
    exports.LayerListBindingDirective = LayerListBindingDirective;
    exports.LayerListComponent = LayerListComponent;
    exports.LayerListToolComponent = LayerListToolComponent;
    exports.LayerListToolService = LayerListToolService;
    exports.LayerService = LayerService;
    exports.LayerSyncWatcher = LayerSyncWatcher;
    exports.MEASURE_UNIT_AUTO = MEASURE_UNIT_AUTO;
    exports.MVTDataSource = MVTDataSource;
    exports.MapBrowserComponent = MapBrowserComponent;
    exports.MapCenterComponent = MapCenterComponent;
    exports.MapController = MapController;
    exports.MapOfflineDirective = MapOfflineDirective;
    exports.MapService = MapService;
    exports.MapViewController = MapViewController;
    exports.MeasureAreaUnitAbbreviation = MeasureAreaUnitAbbreviation;
    exports.MeasureFormatPipe = MeasureFormatPipe;
    exports.MeasureLengthUnitAbbreviation = MeasureLengthUnitAbbreviation;
    exports.MeasurerComponent = MeasurerComponent;
    exports.MenuButtonComponent = MenuButtonComponent;
    exports.MetadataAbstractComponent = MetadataAbstractComponent;
    exports.MetadataButtonComponent = MetadataButtonComponent;
    exports.MetadataService = MetadataService;
    exports.MiniBaseMapComponent = MiniBaseMapComponent;
    exports.ModifyControl = ModifyControl;
    exports.NominatimSearchSource = NominatimSearchSource;
    exports.OGCFilterService = OGCFilterService;
    exports.OSMDataSource = OSMDataSource;
    exports.OfflineButtonComponent = OfflineButtonComponent;
    exports.OgcFilterButtonComponent = OgcFilterButtonComponent;
    exports.OgcFilterComponent = OgcFilterComponent;
    exports.OgcFilterFormComponent = OgcFilterFormComponent;
    exports.OgcFilterSelectionComponent = OgcFilterSelectionComponent;
    exports.OgcFilterTimeComponent = OgcFilterTimeComponent;
    exports.OgcFilterTimeSliderComponent = OgcFilterTimeSliderComponent;
    exports.OgcFilterWidget = OgcFilterWidget;
    exports.OgcFilterWriter = OgcFilterWriter;
    exports.OgcFilterableFormComponent = OgcFilterableFormComponent;
    exports.OgcFilterableItemComponent = OgcFilterableItemComponent;
    exports.OgcFilterableListBindingDirective = OgcFilterableListBindingDirective;
    exports.OgcFilterableListComponent = OgcFilterableListComponent;
    exports.OlDragSelectInteraction = OlDragSelectInteraction;
    exports.OptionsApiService = OptionsApiService;
    exports.OptionsService = OptionsService;
    exports.OsmLinks = OsmLinks;
    exports.OsrmDirectionsSource = OsrmDirectionsSource;
    exports.Overlay = Overlay;
    exports.OverlayDirective = OverlayDirective;
    exports.OverlayService = OverlayService;
    exports.PointerPositionDirective = PointerPositionDirective;
    exports.PrintComponent = PrintComponent;
    exports.PrintFormComponent = PrintFormComponent;
    exports.PrintLegendPosition = PrintLegendPosition;
    exports.PrintOrientation = PrintOrientation;
    exports.PrintOutputFormat = PrintOutputFormat;
    exports.PrintPaperFormat = PrintPaperFormat;
    exports.PrintResolution = PrintResolution;
    exports.PrintSaveImageFormat = PrintSaveImageFormat;
    exports.PrintService = PrintService;
    exports.ProjectionService = ProjectionService;
    exports.QueryDirective = QueryDirective;
    exports.QuerySearchSource = QuerySearchSource;
    exports.QueryService = QueryService;
    exports.RotationButtonComponent = RotationButtonComponent;
    exports.RoutesFeatureStore = RoutesFeatureStore;
    exports.SEARCH_TYPES = SEARCH_TYPES;
    exports.STYLELIST_OPTIONS = STYLELIST_OPTIONS;
    exports.SearchBarComponent = SearchBarComponent;
    exports.SearchPointerSummaryDirective = SearchPointerSummaryDirective;
    exports.SearchResultAddButtonComponent = SearchResultAddButtonComponent;
    exports.SearchResultsComponent = SearchResultsComponent;
    exports.SearchResultsItemComponent = SearchResultsItemComponent;
    exports.SearchSelectorComponent = SearchSelectorComponent;
    exports.SearchService = SearchService;
    exports.SearchSettingsComponent = SearchSettingsComponent;
    exports.SearchSource = SearchSource;
    exports.SearchSourceService = SearchSourceService;
    exports.SliceControl = SliceControl;
    exports.SpatialFilterItemComponent = SpatialFilterItemComponent;
    exports.SpatialFilterListComponent = SpatialFilterListComponent;
    exports.SpatialFilterService = SpatialFilterService;
    exports.SpatialFilterTypeComponent = SpatialFilterTypeComponent;
    exports.StepFeatureStore = StepFeatureStore;
    exports.StopsFeatureStore = StopsFeatureStore;
    exports.StopsStore = StopsStore;
    exports.StoredQueriesReverseSearchSource = StoredQueriesReverseSearchSource;
    exports.StoredQueriesSearchSource = StoredQueriesSearchSource;
    exports.StyleListService = StyleListService;
    exports.StyleService = StyleService;
    exports.SwipeControlComponent = SwipeControlComponent;
    exports.TileArcGISRestDataSource = TileArcGISRestDataSource;
    exports.TileDebugDataSource = TileDebugDataSource;
    exports.TileLayer = TileLayer;
    exports.TileWatcher = TileWatcher;
    exports.TimeFilterButtonComponent = TimeFilterButtonComponent;
    exports.TimeFilterFormComponent = TimeFilterFormComponent;
    exports.TimeFilterItemComponent = TimeFilterItemComponent;
    exports.TimeFilterListBindingDirective = TimeFilterListBindingDirective;
    exports.TimeFilterListComponent = TimeFilterListComponent;
    exports.TimeFilterService = TimeFilterService;
    exports.ToastComponent = ToastComponent;
    exports.TrackFeatureButtonComponent = TrackFeatureButtonComponent;
    exports.VectorLayer = VectorLayer;
    exports.VectorTileLayer = VectorTileLayer;
    exports.VectorWatcher = VectorWatcher;
    exports.WFSDataSource = WFSDataSource;
    exports.WFSService = WFSService;
    exports.WMSDataSource = WMSDataSource;
    exports.WMTSDataSource = WMTSDataSource;
    exports.WebSocketDataSource = WebSocketDataSource;
    exports.WfsWorkspace = WfsWorkspace;
    exports.WfsWorkspaceService = WfsWorkspaceService;
    exports.WktService = WktService;
    exports.WorkspaceSelectorDirective = WorkspaceSelectorDirective;
    exports.WorkspaceUpdatorDirective = WorkspaceUpdatorDirective;
    exports.XYZDataSource = XYZDataSource;
    exports.ZoomButtonComponent = ZoomButtonComponent;
    exports.addDirectionToRoutesFeatureStore = addDirectionToRoutesFeatureStore;
    exports.addLayerAndFeaturesStyledToMap = addLayerAndFeaturesStyledToMap;
    exports.addLayerAndFeaturesToMap = addLayerAndFeaturesToMap;
    exports.addLinearRingToOlPolygon = addLinearRingToOlPolygon;
    exports.addStopToStopsFeatureStore = addStopToStopsFeatureStore;
    exports.addStopToStore = addStopToStore;
    exports.buildUrl = buildUrl;
    exports.cadastreSearchSourceFactory = cadastreSearchSourceFactory;
    exports.checkWfsParams = checkWfsParams;
    exports.clearOlGeometryMidpoints = clearOlGeometryMidpoints;
    exports.computeBestAreaUnit = computeBestAreaUnit;
    exports.computeBestLengthUnit = computeBestLengthUnit;
    exports.computeLayerTitleFromFile = computeLayerTitleFromFile;
    exports.computeMVTOptionsOnHover = computeMVTOptionsOnHover;
    exports.computeOlFeatureExtent = computeOlFeatureExtent;
    exports.computeOlFeaturesDiff = computeOlFeaturesDiff;
    exports.computeOlFeaturesExtent = computeOlFeaturesExtent;
    exports.computeProjectionsConstraints = computeProjectionsConstraints;
    exports.computeRelativePosition = computeRelativePosition;
    exports.computeStopsPosition = computeStopsPosition;
    exports.computeTermSimilarity = computeTermSimilarity;
    exports.convertDDToDMS = convertDDToDMS;
    exports.createDefaultTileGrid = createDefaultTileGrid;
    exports.createDrawHoleInteractionStyle = createDrawHoleInteractionStyle;
    exports.createDrawInteractionStyle = createDrawInteractionStyle;
    exports.createInteractionStyle = createInteractionStyle;
    exports.createMeasureInteractionStyle = createMeasureInteractionStyle;
    exports.createMeasureLayerStyle = createMeasureLayerStyle;
    exports.createOlTooltipAtPoint = createOlTooltipAtPoint;
    exports.createOlTooltipDrawAtPoint = createOlTooltipDrawAtPoint;
    exports.createOverlayDefaultStyle = createOverlayDefaultStyle;
    exports.createOverlayLayer = createOverlayLayer;
    exports.createOverlayMarkerStyle = createOverlayMarkerStyle;
    exports.ctrlKeyDown = ctrlKeyDown;
    exports.defaultCoordinatesSearchResultFormatterFactory = defaultCoordinatesSearchResultFormatterFactory;
    exports.defaultEpsg = defaultEpsg;
    exports.defaultFieldNameGeometry = defaultFieldNameGeometry;
    exports.defaultIChercheSearchResultFormatterFactory = defaultIChercheSearchResultFormatterFactory;
    exports.defaultMaxFeatures = defaultMaxFeatures;
    exports.defaultWfsVersion = defaultWfsVersion;
    exports.directionsStyle = directionsStyle;
    exports.entitiesToRowData = entitiesToRowData;
    exports.exportToCSV = exportToCSV;
    exports.featureFromOl = featureFromOl;
    exports.featureToOl = featureToOl;
    exports.featureToSearchResult = featureToSearchResult;
    exports.featuresAreOutOfView = featuresAreOutOfView;
    exports.featuresAreTooDeepInView = featuresAreTooDeepInView;
    exports.findDiff = findDiff;
    exports.formatDistance = formatDistance;
    exports.formatDuration = formatDuration;
    exports.formatInstruction = formatInstruction;
    exports.formatMeasure = formatMeasure;
    exports.formatScale = formatScale;
    exports.formatWFSQueryString = formatWFSQueryString;
    exports.generateArcgisRestIdFromSourceOptions = generateArcgisRestIdFromSourceOptions;
    exports.generateFeatureIdFromSourceOptions = generateFeatureIdFromSourceOptions;
    exports.generateId = generateId;
    exports.generateIdFromSourceOptions = generateIdFromSourceOptions;
    exports.generateWMSIdFromSourceOptions = generateWMSIdFromSourceOptions;
    exports.generateWMTSIdFromSourceOptions = generateWMTSIdFromSourceOptions;
    exports.generateWfsIdFromSourceOptions = generateWfsIdFromSourceOptions;
    exports.generateXYZIdFromSourceOptions = generateXYZIdFromSourceOptions;
    exports.getCommonVectorSelectedStyle = getCommonVectorSelectedStyle;
    exports.getCommonVectorStyle = getCommonVectorStyle;
    exports.getFileExtension = getFileExtension;
    exports.getFormatFromOptions = getFormatFromOptions;
    exports.getLayersLegends = getLayersLegends;
    exports.getMousePositionFromOlGeometryEvent = getMousePositionFromOlGeometryEvent;
    exports.getOlTooltipAtCenter = getOlTooltipAtCenter;
    exports.getOlTooltipsAtMidpoints = getOlTooltipsAtMidpoints;
    exports.getResolutionFromScale = getResolutionFromScale;
    exports.getRowsInMapExtent = getRowsInMapExtent;
    exports.getScaleFromResolution = getScaleFromResolution;
    exports.getSelectedOnly = getSelectedOnly;
    exports.getTooltipsOfOlGeometry = getTooltipsOfOlGeometry;
    exports.gmlRegex = gmlRegex;
    exports.handleFileExportError = handleFileExportError;
    exports.handleFileExportSuccess = handleFileExportSuccess;
    exports.handleFileImportError = handleFileImportError;
    exports.handleFileImportSuccess = handleFileImportSuccess;
    exports.handleInvalidFileImportError = handleInvalidFileImportError;
    exports.handleNothingToExportError = handleNothingToExportError;
    exports.handleNothingToImportError = handleNothingToImportError;
    exports.handleOgreServerImportError = handleOgreServerImportError;
    exports.handleSRSImportError = handleSRSImportError;
    exports.handleSizeFileImportError = handleSizeFileImportError;
    exports.handleUnreadbleFileImportError = handleUnreadbleFileImportError;
    exports.hideOlFeature = hideOlFeature;
    exports.hoverFeatureMarker = hoverFeatureMarker;
    exports.ichercheReverseSearchSourceFactory = ichercheReverseSearchSourceFactory;
    exports.ichercheSearchSourceFactory = ichercheSearchSourceFactory;
    exports.ilayerSearchResultFormatterFactory = ilayerSearchResultFormatterFactory;
    exports.ilayerSearchSourceFactory = ilayerSearchSourceFactory;
    exports.initRoutesFeatureStore = initRoutesFeatureStore;
    exports.initStepFeatureStore = initStepFeatureStore;
    exports.initStopsFeatureStore = initStopsFeatureStore;
    exports.jsonRegex = jsonRegex;
    exports.layerFeatureIsQueryable = layerFeatureIsQueryable;
    exports.layerIsQueryable = layerIsQueryable;
    exports.lonLatConversion = lonLatConversion;
    exports.mapExtentStrategyActiveToolTip = mapExtentStrategyActiveToolTip;
    exports.measureOlGeometry = measureOlGeometry;
    exports.measureOlGeometryArea = measureOlGeometryArea;
    exports.measureOlGeometryLength = measureOlGeometryLength;
    exports.metersToFeet = metersToFeet;
    exports.metersToKilometers = metersToKilometers;
    exports.metersToMiles = metersToMiles;
    exports.metersToUnit = metersToUnit;
    exports.moveToOlFeatures = moveToOlFeatures;
    exports.mtmZoneFromLonLat = mtmZoneFromLonLat;
    exports.noElementSelected = noElementSelected;
    exports.nominatimSearchSourceFactory = nominatimSearchSourceFactory;
    exports.ogcFilterWidgetFactory = ogcFilterWidgetFactory;
    exports.olLayerFeatureIsQueryable = olLayerFeatureIsQueryable;
    exports.olLayerIsQueryable = olLayerIsQueryable;
    exports.optionsApiFactory = optionsApiFactory;
    exports.osrmDirectionsSourcesFactory = osrmDirectionsSourcesFactory;
    exports.pointerPositionSummaryMarker = pointerPositionSummaryMarker;
    exports.provideCadastreSearchSource = provideCadastreSearchSource;
    exports.provideCoordinatesReverseSearchSource = provideCoordinatesReverseSearchSource;
    exports.provideDefaultCoordinatesSearchResultFormatter = provideDefaultCoordinatesSearchResultFormatter;
    exports.provideDefaultIChercheSearchResultFormatter = provideDefaultIChercheSearchResultFormatter;
    exports.provideIChercheReverseSearchSource = provideIChercheReverseSearchSource;
    exports.provideIChercheSearchSource = provideIChercheSearchSource;
    exports.provideILayerSearchResultFormatter = provideILayerSearchResultFormatter;
    exports.provideILayerSearchSource = provideILayerSearchSource;
    exports.provideNominatimSearchSource = provideNominatimSearchSource;
    exports.provideOgcFilterWidget = provideOgcFilterWidget;
    exports.provideOptionsApi = provideOptionsApi;
    exports.provideOsrmDirectionsSource = provideOsrmDirectionsSource;
    exports.provideSearchSourceService = provideSearchSourceService;
    exports.provideStoredQueriesReverseSearchSource = provideStoredQueriesReverseSearchSource;
    exports.provideStoredQueriesSearchSource = provideStoredQueriesSearchSource;
    exports.provideStyleListLoader = provideStyleListLoader;
    exports.provideStyleListOptions = provideStyleListOptions;
    exports.removeStopFromStore = removeStopFromStore;
    exports.renderFeatureFromOl = renderFeatureFromOl;
    exports.roundCoordTo = roundCoordTo;
    exports.scaleExtent = scaleExtent;
    exports.searchSourceServiceFactory = searchSourceServiceFactory;
    exports.setRowsInMapExtent = setRowsInMapExtent;
    exports.setSelectedOnly = setSelectedOnly;
    exports.sliceOlGeometry = sliceOlGeometry;
    exports.sliceOlLineString = sliceOlLineString;
    exports.sliceOlPolygon = sliceOlPolygon;
    exports.sourceCanReverseSearch = sourceCanReverseSearch;
    exports.sourceCanReverseSearchAsSummary = sourceCanReverseSearchAsSummary;
    exports.sourceCanSearch = sourceCanSearch;
    exports.squareMetersToAcres = squareMetersToAcres;
    exports.squareMetersToHectares = squareMetersToHectares;
    exports.squareMetersToSquareFeet = squareMetersToSquareFeet;
    exports.squareMetersToSquareKilometers = squareMetersToSquareKilometers;
    exports.squareMetersToSquareMiles = squareMetersToSquareMiles;
    exports.squareMetersToUnit = squareMetersToUnit;
    exports.standardizeUrl = standardizeUrl;
    exports.storedqueriesReverseSearchSourceFactory = storedqueriesReverseSearchSourceFactory;
    exports.storedqueriesSearchSourceFactory = storedqueriesSearchSourceFactory;
    exports.stringToLonLat = stringToLonLat;
    exports.styleListFactory = styleListFactory;
    exports.translateBearing = translateBearing;
    exports.translateModifier = translateModifier;
    exports.tryAddLoadingStrategy = tryAddLoadingStrategy;
    exports.tryAddSelectionStrategy = tryAddSelectionStrategy;
    exports.tryBindStoreLayer = tryBindStoreLayer;
    exports.updateOlGeometryCenter = updateOlGeometryCenter;
    exports.updateOlGeometryMidpoints = updateOlGeometryMidpoints;
    exports.updateOlTooltipAtCenter = updateOlTooltipAtCenter;
    exports.updateOlTooltipDrawAtCenter = updateOlTooltipDrawAtCenter;
    exports.updateOlTooltipsAtMidpoints = updateOlTooltipsAtMidpoints;
    exports.updateOlTooltipsDrawAtMidpoints = updateOlTooltipsDrawAtMidpoints;
    exports.updateStoreSorting = updateStoreSorting;
    exports.utmZoneFromLonLat = utmZoneFromLonLat;
    exports.viewStatesAreEqual = viewStatesAreEqual;
    exports.zoneMtm = zoneMtm;
    exports.zoneUtm = zoneUtm;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=igo2-geo.umd.js.map
