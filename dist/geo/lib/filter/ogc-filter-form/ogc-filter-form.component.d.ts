import { OnInit } from '@angular/core';
import { FloatLabelType } from '@angular/material/form-field';
import { BehaviorSubject, Observable } from 'rxjs';
import { OgcFilterableDataSource } from '../../filter/shared/ogc-filter.interface';
import { WktService } from '../../wkt/shared/wkt.service';
import { IgoMap } from '../../map';
import { SourceFieldsOptionsParams } from '../../datasource/shared/datasources/datasource.interface';
import { OgcFilterOperator } from '../../filter/shared/ogc-filter.enum';
import * as i0 from "@angular/core";
export declare class OgcFilterFormComponent implements OnInit {
    private wktService;
    ogcFilterOperator: typeof OgcFilterOperator;
    filteredValues$: Observable<string[]>;
    filteredFields$: Observable<SourceFieldsOptionsParams[]>;
    allOgcFilterOperators: any;
    ogcFilterOperators$: BehaviorSubject<{
        [key: string]: any;
    }>;
    igoSpatialSelectors: any;
    value: string;
    inputOperator: any;
    selectedField$: BehaviorSubject<SourceFieldsOptionsParams>;
    fields$: BehaviorSubject<SourceFieldsOptionsParams[]>;
    color: string;
    disabled: any;
    currentFilterIsSpatial$: BehaviorSubject<boolean>;
    defaultStepMillisecond: number;
    inputClearable: string;
    refreshFilters: () => void;
    datasource: OgcFilterableDataSource;
    map: IgoMap;
    currentFilter: any;
    set snrc(value: any);
    get snrc(): any;
    private _snrc;
    floatLabel: FloatLabelType;
    get activeFilters(): import("../../filter/shared/ogc-filter.interface").OgcInterfaceFilterOptions[];
    get allowedOperators(): {};
    constructor(wktService: WktService);
    ngOnInit(): void;
    updateFieldsList(value?: string): void;
    updateValuesList(value?: string, pos?: number): void;
    private _filterFields;
    private _filterValues;
    clearSelectedField(): void;
    isClearable(pos?: number): any;
    clearProperty(pos?: number): string;
    toggleFilterState(event: any): void;
    deleteFilter(): void;
    changeLogical(logical: string): void;
    changeOperator(operator: string): void;
    changeField(field: string): void;
    changeCaseSensitive(matchCase: any): void;
    changeProperty(value: any, pos?: number, refreshFilter?: boolean): void;
    changeNumericProperty(value: any, pos: number): void;
    changeSpatialSelector(value: any): void;
    changeSNRC(value: any): void;
    changeSNRCGeometry(): void;
    changeMapExtentGeometry(refresh?: boolean): void;
    detectProperty(pos?: number): string;
    private currentFilterIsSpatial;
    isTemporalOperator(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<OgcFilterFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OgcFilterFormComponent, "igo-ogc-filter-form", never, { "refreshFilters": "refreshFilters"; "datasource": "datasource"; "map": "map"; "currentFilter": "currentFilter"; "floatLabel": "floatLabel"; }, {}, never, never>;
}
