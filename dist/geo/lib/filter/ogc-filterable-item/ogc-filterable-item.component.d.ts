import { OnDestroy, OnInit } from '@angular/core';
import { Layer } from '../../layer/shared/layers/layer';
import { OgcFilterableDataSource } from '../shared/ogc-filter.interface';
import { OGCFilterService } from '../shared/ogc-filter.service';
import { IgoMap } from '../../map';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class OgcFilterableItemComponent implements OnInit, OnDestroy {
    private ogcFilterService;
    color: string;
    private lastRunOgcFilter;
    private defaultLogicalParent;
    hasActiveSpatialFilter: boolean;
    filtersAreEditable: boolean;
    filtersCollapsed: boolean;
    hasSelector: boolean;
    showLegend$: BehaviorSubject<boolean>;
    inResolutionRange$: BehaviorSubject<boolean>;
    private resolution$$;
    private ogcFilterWriter;
    layer: Layer;
    map: IgoMap;
    header: boolean;
    get refreshFunc(): any;
    get datasource(): OgcFilterableDataSource;
    constructor(ogcFilterService: OGCFilterService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    addFilterToSequence(): void;
    refreshFilters(force?: boolean): void;
    setVisible(): void;
    isAdvancedOgcFilters(): boolean;
    addFilterDisabled(): boolean;
    private changeOgcFiltersAdvancedOgcFilters;
    changeOgcFilterType(isAdvancedOgcFilters: any): void;
    private toggleLegend;
    toggleLegendOnClick(): void;
    toggleFiltersCollapsed(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OgcFilterableItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OgcFilterableItemComponent, "igo-ogc-filterable-item", never, { "layer": "layer"; "map": "map"; "header": "header"; }, {}, never, never>;
}
