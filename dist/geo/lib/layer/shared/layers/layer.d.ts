import { BehaviorSubject, Observable, Subject } from 'rxjs';
import olLayer from 'ol/layer/Layer';
import olSource from 'ol/source/Source';
import { AuthInterceptor } from '@igo2/auth';
import { SubjectStatus } from '@igo2/utils';
import { DataSource, Legend } from '../../../datasource';
import { IgoMap } from '../../../map/shared/map';
import { LayerOptions } from './layer.interface';
import { MessageService } from '@igo2/core';
export declare abstract class Layer {
    options: LayerOptions;
    protected messageService?: MessageService;
    protected authInterceptor?: AuthInterceptor;
    collapsed: boolean;
    dataSource: DataSource;
    legend: Legend[];
    legendCollapsed: boolean;
    firstLoadComponent: boolean;
    map: IgoMap;
    ol: olLayer<olSource>;
    olLoadingProblem: boolean;
    status$: Subject<SubjectStatus>;
    hasBeenVisible$: BehaviorSubject<boolean>;
    private hasBeenVisible$$;
    private resolution$$;
    /**
     * Define if a layer is generated by code OR defined by layer/context user layer.
     * Useful for filtering layers list in mapOffline.directive or in the sharemap...
     * return false by default.
     */
    get isIgoInternalLayer(): boolean;
    get id(): string;
    get alias(): string;
    get title(): string;
    set title(title: string);
    get zIndex(): number;
    set zIndex(zIndex: number);
    get baseLayer(): boolean;
    set baseLayer(baseLayer: boolean);
    get opacity(): number;
    set opacity(opacity: number);
    set isInResolutionsRange(value: boolean);
    get isInResolutionsRange(): boolean;
    readonly isInResolutionsRange$: BehaviorSubject<boolean>;
    set maxResolution(value: number);
    get maxResolution(): number;
    set minResolution(value: number);
    get minResolution(): number;
    set visible(value: boolean);
    get visible(): boolean;
    readonly visible$: BehaviorSubject<boolean>;
    get displayed(): boolean;
    readonly displayed$: Observable<boolean>;
    get showInLayerList(): boolean;
    private layerSyncWatcher;
    constructor(options: LayerOptions, messageService?: MessageService, authInterceptor?: AuthInterceptor);
    protected abstract createOlLayer(): olLayer<olSource>;
    setMap(igoMap: IgoMap | undefined): void;
    private showMessage;
    private observeResolution;
    private unobserveResolution;
    private updateInResolutionsRange;
}
