import { ElementRef, Renderer2, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export declare class ListItemDirective {
    renderer: Renderer2;
    el: ElementRef;
    static focusedCls: string;
    static selectedCls: string;
    static disabledCls: string;
    get color(): string;
    set color(value: string);
    private _color;
    get focused(): boolean;
    set focused(value: boolean);
    private _focused;
    get selected(): boolean;
    set selected(value: boolean);
    private _selected;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _disabled;
    beforeSelect: EventEmitter<ListItemDirective>;
    beforeFocus: EventEmitter<ListItemDirective>;
    beforeUnselect: EventEmitter<ListItemDirective>;
    beforeUnfocus: EventEmitter<ListItemDirective>;
    beforeDisable: EventEmitter<ListItemDirective>;
    beforeEnable: EventEmitter<ListItemDirective>;
    focus: EventEmitter<ListItemDirective>;
    unfocus: EventEmitter<ListItemDirective>;
    select: EventEmitter<ListItemDirective>;
    unselect: EventEmitter<ListItemDirective>;
    disable: EventEmitter<ListItemDirective>;
    enable: EventEmitter<ListItemDirective>;
    onClick(): void;
    constructor(renderer: Renderer2, el: ElementRef);
    getOffsetTop(): number;
    private toggleFocusedClass;
    private toggleSelectedClass;
    private toggleDisabledClass;
    private addCls;
    private removeCls;
    static ɵfac: i0.ɵɵFactoryDeclaration<ListItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ListItemDirective, "[igoListItem]", never, { "color": "color"; "focused": "focused"; "selected": "selected"; "disabled": "disabled"; }, { "beforeSelect": "beforeSelect"; "beforeFocus": "beforeFocus"; "beforeUnselect": "beforeUnselect"; "beforeUnfocus": "beforeUnfocus"; "beforeDisable": "beforeDisable"; "beforeEnable": "beforeEnable"; "focus": "focus"; "unfocus": "unfocus"; "select": "select"; "unselect": "unselect"; "disable": "disable"; "enable": "enable"; }, never>;
}
