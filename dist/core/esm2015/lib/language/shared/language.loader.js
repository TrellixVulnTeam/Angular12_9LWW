import { of, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { ObjectUtils } from '@igo2/utils';
export class LanguageLoader {
    constructor(http, prefix, suffix = '.json', config) {
        this.http = http;
        this.prefix = prefix;
        this.suffix = suffix;
        this.config = config;
    }
    getTranslation(lang) {
        const translation = require(`../locale/${lang}.json`);
        const igoLocale$ = of(translation);
        if (this.config && !this.prefix) {
            const prefix = this.config.getConfig('language.prefix');
            this.prefix = !prefix || Array.isArray(prefix) ? prefix : [prefix];
        }
        if (!this.prefix || this.prefix.length === 0) {
            return igoLocale$;
        }
        const appLocale$ = this.prefix.map((prefix) => this.http.get(`${prefix}${lang}${this.suffix}`));
        const locale$ = combineLatest([igoLocale$, ...appLocale$]);
        return locale$.pipe(map((translations) => {
            return translations.reduce((acc, current) => ObjectUtils.mergeDeep(acc, current), {});
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2UubG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL2xhbmd1YWdlL3NoYXJlZC9sYW5ndWFnZS5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFNMUMsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFDVSxJQUFnQixFQUNoQixNQUEwQixFQUMxQixTQUFpQixPQUFPLEVBQ3hCLE1BQXNCO1FBSHRCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7SUFDN0IsQ0FBQztJQUVHLGNBQWMsQ0FBQyxJQUFZO1FBQ2hDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLENBQUM7UUFDdEQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUVELE1BQU0sVUFBVSxHQUFJLElBQUksQ0FBQyxNQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FDaEQsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFM0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNuQixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQ3hCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEVBQ3JELEVBQUUsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IG9mLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5pbXBvcnQgeyBPYmplY3RVdGlscyB9IGZyb20gJ0BpZ28yL3V0aWxzJztcblxuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWcuc2VydmljZSc7XG5cbmRlY2xhcmUgZnVuY3Rpb24gcmVxdWlyZShhcmc6IHN0cmluZyk6IGFueTtcblxuZXhwb3J0IGNsYXNzIExhbmd1YWdlTG9hZGVyIGltcGxlbWVudHMgVHJhbnNsYXRlTG9hZGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgcHJlZml4Pzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgcHJpdmF0ZSBzdWZmaXg6IHN0cmluZyA9ICcuanNvbicsXG4gICAgcHJpdmF0ZSBjb25maWc/OiBDb25maWdTZXJ2aWNlXG4gICkge31cblxuICBwdWJsaWMgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHJlcXVpcmUoYC4uL2xvY2FsZS8ke2xhbmd9Lmpzb25gKTtcbiAgICBjb25zdCBpZ29Mb2NhbGUkID0gb2YodHJhbnNsYXRpb24pO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnICYmICF0aGlzLnByZWZpeCkge1xuICAgICAgY29uc3QgcHJlZml4ID0gdGhpcy5jb25maWcuZ2V0Q29uZmlnKCdsYW5ndWFnZS5wcmVmaXgnKTtcbiAgICAgIHRoaXMucHJlZml4ID0gIXByZWZpeCB8fCBBcnJheS5pc0FycmF5KHByZWZpeCkgPyBwcmVmaXggOiBbcHJlZml4XTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJlZml4IHx8IHRoaXMucHJlZml4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGlnb0xvY2FsZSQ7XG4gICAgfVxuXG4gICAgY29uc3QgYXBwTG9jYWxlJCA9ICh0aGlzLnByZWZpeCBhcyBzdHJpbmdbXSkubWFwKChwcmVmaXgpID0+XG4gICAgICB0aGlzLmh0dHAuZ2V0KGAke3ByZWZpeH0ke2xhbmd9JHt0aGlzLnN1ZmZpeH1gKVxuICAgICk7XG5cbiAgICBjb25zdCBsb2NhbGUkID0gY29tYmluZUxhdGVzdChbaWdvTG9jYWxlJCwgLi4uYXBwTG9jYWxlJF0pO1xuXG4gICAgcmV0dXJuIGxvY2FsZSQucGlwZShcbiAgICAgIG1hcCgodHJhbnNsYXRpb25zKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMucmVkdWNlKFxuICAgICAgICAgIChhY2MsIGN1cnJlbnQpID0+IE9iamVjdFV0aWxzLm1lcmdlRGVlcChhY2MsIGN1cnJlbnQpLFxuICAgICAgICAgIHt9XG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==