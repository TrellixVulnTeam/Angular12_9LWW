import { StringUtils } from './string-utils';
import { ChangeType } from './change.interface';
export class ChangeUtils {
    static findChanges(obj1, obj2, ignoreKeys = []) {
        const items = {
            added: [],
            deleted: [],
            modified: []
        };
        if (!obj1 || !obj2) {
            return items;
        }
        const obj1Clone = [...obj1];
        const obj2Clone = [...obj2];
        for (const fromItem of obj1Clone) {
            const index = obj2Clone.findIndex(s => s.id === fromItem.id);
            if (index === -1) {
                items.deleted.push({
                    change: { type: ChangeType.DELETED },
                    value: fromItem
                });
                continue;
            }
            const toItem = obj2Clone.splice(index, 1)[0];
            const fromItemClone = JSON.parse(JSON.stringify(fromItem));
            const toItemClone = JSON.parse(JSON.stringify(toItem));
            const keysChanged = ChangeUtils.compareObject(fromItemClone, toItemClone, undefined, ignoreKeys);
            if (keysChanged.length) {
                items.modified.push({
                    change: {
                        type: ChangeType.MODIFIED,
                        keysChanged
                    },
                    value: fromItemClone,
                    oldValue: fromItem,
                    newValue: toItem
                });
            }
        }
        items.added = obj2Clone.map(itemAdded => {
            return {
                change: { type: ChangeType.ADDED },
                value: itemAdded
            };
        });
        return items;
    }
    static compareObject(fromItem, toItem, baseKey, ignoreKeys = []) {
        const fromItemClone = JSON.parse(JSON.stringify(fromItem));
        const toItemClone = JSON.parse(JSON.stringify(toItem));
        const keys = new Set([
            ...Object.keys(fromItem),
            ...Object.keys(toItem)
        ]);
        let keysChanged = [];
        keys.forEach(key => {
            const keyString = baseKey ? `${baseKey}.${key}` : key;
            if (ignoreKeys.indexOf(keyString) !== -1) {
                return;
            }
            if (Array.isArray(fromItem[key])) {
                fromItem[key] = fromItem[key].join(',<br>');
            }
            if (Array.isArray(toItem[key])) {
                toItem[key] = toItem[key].join(',<br>');
            }
            if (typeof fromItem[key] === 'object' &&
                typeof toItem[key] === 'object' &&
                fromItem[key] !== null &&
                toItem[key] !== null) {
                keysChanged = keysChanged.concat(this.compareObject(fromItem[key], toItem[key], keyString));
            }
            else {
                if (fromItem[key] !== toItem[key]) {
                    keysChanged.push({
                        key: keyString,
                        oldValue: fromItemClone[key],
                        newValue: toItemClone[key]
                    });
                    fromItem[key] = StringUtils.diff(fromItem[key], toItem[key]);
                }
            }
        });
        return keysChanged;
    }
}
//# sourceMappingURL=data:application/json;base64,