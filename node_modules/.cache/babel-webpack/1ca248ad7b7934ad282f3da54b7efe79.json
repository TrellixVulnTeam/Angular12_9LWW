{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { ThrottlingConstants, CacheSchemaType, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ThrottlingUtils = function () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n        return;\n      }\n\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n\n\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: authority,\n      scopes: scopes,\n      homeAccountIdentifier: homeAccountIdentifier\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n  };\n\n  return ThrottlingUtils;\n}();\n\nexport { ThrottlingUtils };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js"],"names":["ThrottlingConstants","CacheSchemaType","Constants","HeaderNames","ServerError","ThrottlingUtils","generateThrottlingStorageKey","thumbprint","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","_a","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","THROTTLING","errorCodes","join","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","authority","scopes","homeAccountIdentifier"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { ThrottlingConstants, CacheSchemaType, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingUtils = /** @class */ (function () {\r\n    function ThrottlingUtils() {\r\n    }\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\r\n        return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\r\n        var _a;\r\n        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        var value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\r\n                return;\r\n            }\r\n            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            var thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseStatus = function (response) {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseForRetryAfter = function (response) {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\r\n        var time = throttleTime <= 0 ? 0 : throttleTime;\r\n        var currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    };\r\n    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {\r\n        var thumbprint = {\r\n            clientId: clientId,\r\n            authority: authority,\r\n            scopes: scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier\r\n        };\r\n        var key = this.generateThrottlingStorageKey(thumbprint);\r\n        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\r\n    };\r\n    return ThrottlingUtils;\r\n}());\n\nexport { ThrottlingUtils };\n"]},"metadata":{},"sourceType":"module"}