{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` + `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` + `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\n\n\nclass SvgIconConfig {\n  constructor(url, svgText, options) {\n    this.url = url;\n    this.svgText = svgText;\n    this.options = options;\n  }\n\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nlet MatIconRegistry = /*#__PURE__*/(() => {\n  class MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n      this._httpClient = _httpClient;\n      this._sanitizer = _sanitizer;\n      this._errorHandler = _errorHandler;\n      /**\n       * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n       */\n\n      this._svgIconConfigs = new Map();\n      /**\n       * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n       * Multiple icon sets can be registered under the same namespace.\n       */\n\n      this._iconSetConfigs = new Map();\n      /** Cache for icons loaded by direct URLs. */\n\n      this._cachedIconsByUrl = new Map();\n      /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n      this._inProgressUrlFetches = new Map();\n      /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n      this._fontCssClassesByAlias = new Map();\n      /** Registered icon resolver functions. */\n\n      this._resolvers = [];\n      /**\n       * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n       * The default 'material-icons' value assumes that the material icon font has been loaded as\n       * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n       */\n\n      this._defaultFontSetClass = 'material-icons';\n      this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n\n\n    addSvgIcon(iconName, url, options) {\n      return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n\n    addSvgIconLiteral(iconName, literal, options) {\n      return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n\n\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n\n\n    addSvgIconResolver(resolver) {\n      this._resolvers.push(resolver);\n\n      return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n      const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal); // TODO: add an ngDevMode check\n\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n\n\n    addSvgIconSet(url, options) {\n      return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n\n\n    addSvgIconSetLiteral(literal, options) {\n      return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n\n\n    addSvgIconSetInNamespace(namespace, url, options) {\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n\n\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n      const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n\n\n    registerFontClassAlias(alias, className = alias) {\n      this._fontCssClassesByAlias.set(alias, className);\n\n      return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n\n\n    classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n\n\n    setDefaultFontSetClass(className) {\n      this._defaultFontSetClass = className;\n      return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n\n\n    getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n\n\n    getSvgIconFromUrl(safeUrl) {\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n\n      const cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n\n\n    getNamedSvgIcon(name, namespace = '') {\n      const key = iconKey(namespace, name);\n\n      let config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.\n\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      } // Otherwise try to resolve the config from one of the resolver functions.\n\n\n      config = this._getIconConfigFromResolvers(namespace, name);\n\n      if (config) {\n        this._svgIconConfigs.set(key, config);\n\n        return this._getSvgFromConfig(config);\n      } // See if we have any icon sets registered for the namespace.\n\n\n      const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n\n    ngOnDestroy() {\n      this._resolvers = [];\n\n      this._svgIconConfigs.clear();\n\n      this._iconSetConfigs.clear();\n\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n\n\n    _getSvgFromConfig(config) {\n      if (config.svgText) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(this._svgElementFromConfig(config)));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n\n\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n      const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n\n\n      const iconSetFetchRequests = iconSetConfigs.filter(iconSetConfig => !iconSetConfig.svgText).map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(err => {\n          const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n\n          const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n\n          this._errorHandler.handleError(new Error(errorMessage));\n\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(() => {\n        const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check\n\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n        const config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n        // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n        // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n        // some of the parsing.\n\n        if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n          const svg = this._svgElementFromConfig(config);\n\n          const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n\n\n    _loadSvgIconFromConfig(config) {\n      return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n\n\n    _loadSvgIconSetFromConfig(config) {\n      if (config.svgText) {\n        return of(null);\n      }\n\n      return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n      // Use the `id=\"iconName\"` syntax in order to escape special\n      // characters in the ID (versus using the #iconName syntax).\n      const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n      if (!iconSource) {\n        return null;\n      } // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n\n\n      const iconElement = iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(iconElement, options);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n      } // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n      const svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n\n\n    _svgElementFromString(str) {\n      const div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      const svg = div.querySelector('svg'); // TODO: add an ngDevMode check\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n\n\n    _toSvgElement(element) {\n      const svg = this._svgElementFromString('<svg></svg>');\n\n      const attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n      for (let i = 0; i < attributes.length; i++) {\n        const {\n          name,\n          value\n        } = attributes[i];\n\n        if (name !== 'id') {\n          svg.setAttribute(name, value);\n        }\n      }\n\n      for (let i = 0; i < element.childNodes.length; i++) {\n        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n\n\n    _setSvgAttributes(svg, options) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      if (options && options.viewBox) {\n        svg.setAttribute('viewBox', options.viewBox);\n      }\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n\n\n    _fetchIcon(iconConfig) {\n      var _a;\n\n      const {\n        url: safeUrl,\n        options\n      } = iconConfig;\n      const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      } // TODO: add an ngDevMode check\n\n\n      if (safeUrl == null) {\n        throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n      }\n\n      const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check\n\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n      const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      }\n\n      const req = this._httpClient.get(url, {\n        responseType: 'text',\n        withCredentials\n      }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n\n\n    _addSvgIconConfig(namespace, iconName, config) {\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n\n\n    _addSvgIconSetConfig(namespace, config) {\n      const configNamespace = this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return this;\n    }\n    /** Parses a config's text into an SVG element. */\n\n\n    _svgElementFromConfig(config) {\n      if (!config.svgElement) {\n        const svg = this._svgElementFromString(config.svgText);\n\n        this._setSvgAttributes(svg, config.options);\n\n        config.svgElement = svg;\n      }\n\n      return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n\n\n    _getIconConfigFromResolvers(namespace, name) {\n      for (let i = 0; i < this._resolvers.length; i++) {\n        const result = this._resolvers[i](name, namespace);\n\n        if (result) {\n          return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n        }\n      }\n\n      return undefined;\n    }\n\n  }\n\n  MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n    return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MatIconRegistry_Factory() {\n      return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n    },\n    token: MatIconRegistry,\n    providedIn: \"root\"\n  });\n  return MatIconRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nconst ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatIconRegistry], [/*#__PURE__*/new Optional(), HttpClient], DomSanitizer, ErrorHandler, [/*#__PURE__*/new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nconst _MatIconBase = /*#__PURE__*/mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nconst MAT_ICON_LOCATION = /*#__PURE__*/new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  const _document = inject(DOCUMENT);\n\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? _location.pathname + _location.search : ''\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nconst funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\n\nconst funcIriAttributeSelector = /*#__PURE__*/ /*#__PURE__*/funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nlet MatIcon = /*#__PURE__*/(() => {\n  class MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n      super(elementRef);\n      this._iconRegistry = _iconRegistry;\n      this._location = _location;\n      this._errorHandler = _errorHandler;\n      this._inline = false;\n      /** Subscription to the current in-progress SVG icon request. */\n\n      this._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n      // the right thing to do for the majority of icon use-cases.\n\n      if (!ariaHidden) {\n        elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n      }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n\n\n    get inline() {\n      return this._inline;\n    }\n\n    set inline(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n\n\n    get svgIcon() {\n      return this._svgIcon;\n    }\n\n    set svgIcon(value) {\n      if (value !== this._svgIcon) {\n        if (value) {\n          this._updateSvgIcon(value);\n        } else if (this._svgIcon) {\n          this._clearSvgElement();\n        }\n\n        this._svgIcon = value;\n      }\n    }\n    /** Font set that the icon is a part of. */\n\n\n    get fontSet() {\n      return this._fontSet;\n    }\n\n    set fontSet(value) {\n      const newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontSet) {\n        this._fontSet = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /** Name of an icon within a font set. */\n\n\n    get fontIcon() {\n      return this._fontIcon;\n    }\n\n    set fontIcon(value) {\n      const newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontIcon) {\n        this._fontIcon = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n\n\n    _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n\n      const parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return parts;\n\n        default:\n          throw Error(`Invalid icon name: \"${iconName}\"`);\n        // TODO: add an ngDevMode check\n      }\n    }\n\n    ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      this._updateFontIconClasses();\n    }\n\n    ngAfterViewChecked() {\n      const cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && cachedElements.size) {\n        const newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this._currentIconFetch.unsubscribe();\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n\n    _usingFontIcon() {\n      return !this.svgIcon;\n    }\n\n    _setSvgElement(svg) {\n      this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n      // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n\n      const styleTags = svg.querySelectorAll('style');\n\n      for (let i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      } // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      const path = this._location.getPathname();\n\n      this._previousPath = path;\n\n      this._cacheChildrenWithExternalReferences(svg);\n\n      this._prependPathToReferences(path);\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n\n    _clearSvgElement() {\n      const layoutElement = this._elementRef.nativeElement;\n      let childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        const child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n\n    _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n\n      const elem = this._elementRef.nativeElement;\n      const fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n      if (fontSetClass != this._previousFontSetClass) {\n        if (this._previousFontSetClass) {\n          elem.classList.remove(this._previousFontSetClass);\n        }\n\n        if (fontSetClass) {\n          elem.classList.add(fontSetClass);\n        }\n\n        this._previousFontSetClass = fontSetClass;\n      }\n\n      if (this.fontIcon != this._previousFontIconClass) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n\n\n    _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n\n\n    _prependPathToReferences(path) {\n      const elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach((attrs, element) => {\n          attrs.forEach(attr => {\n            element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n\n\n    _cacheChildrenWithExternalReferences(element) {\n      const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      const elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      for (let i = 0; i < elementsWithFuncIri.length; i++) {\n        funcIriAttributes.forEach(attr => {\n          const elementWithReference = elementsWithFuncIri[i];\n          const value = elementWithReference.getAttribute(attr);\n          const match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            let attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      }\n    }\n    /** Sets a new SVG icon with a particular name. */\n\n\n    _updateSvgIcon(rawName) {\n      this._svgNamespace = null;\n      this._svgName = null;\n\n      this._currentIconFetch.unsubscribe();\n\n      if (rawName) {\n        const [namespace, iconName] = this._splitIconName(rawName);\n\n        if (namespace) {\n          this._svgNamespace = namespace;\n        }\n\n        if (iconName) {\n          this._svgName = iconName;\n        }\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(svg => this._setSvgElement(svg), err => {\n          const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n\n          this._errorHandler.handleError(new Error(errorMessage));\n        });\n      }\n    }\n\n  }\n\n  MatIcon.ɵfac = function MatIcon_Factory(t) {\n    return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler));\n  };\n\n  MatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatIcon,\n    selectors: [[\"mat-icon\"]],\n    hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n    hostVars: 7,\n    hostBindings: function MatIcon_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n      }\n    },\n    inputs: {\n      color: \"color\",\n      inline: \"inline\",\n      svgIcon: \"svgIcon\",\n      fontSet: \"fontSet\",\n      fontIcon: \"fontIcon\"\n    },\n    exportAs: [\"matIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatIcon;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatIconModule = /*#__PURE__*/(() => {\n  class MatIconModule {}\n\n  MatIconModule.ɵfac = function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  };\n\n  MatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatIconModule\n  });\n  MatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatIconModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function () {\n      return [MatIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/icon.js"],"names":["i0","SecurityContext","Injectable","Optional","Inject","ErrorHandler","SkipSelf","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","i3","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","HTML","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","undefined","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","_previousFontSetClass","classList","remove","add","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","subscribe","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","color","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n"]},"metadata":{},"sourceType":"module"}