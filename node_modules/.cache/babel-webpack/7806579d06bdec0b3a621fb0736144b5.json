{"ast":null,"code":"import { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n\n/** @docs-private */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\n\nconst _MatToolbarBase = /*#__PURE__*/mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n});\n\nlet MatToolbarRow = /*#__PURE__*/(() => {\n  class MatToolbarRow {}\n\n  MatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n    return new (t || MatToolbarRow)();\n  };\n\n  MatToolbarRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatToolbarRow,\n    selectors: [[\"mat-toolbar-row\"]],\n    hostAttrs: [1, \"mat-toolbar-row\"],\n    exportAs: [\"matToolbarRow\"]\n  });\n  return MatToolbarRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatToolbar = /*#__PURE__*/(() => {\n  class MatToolbar extends _MatToolbarBase {\n    constructor(elementRef, _platform, document) {\n      super(elementRef);\n      this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n      this._document = document;\n    }\n\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._checkToolbarMixedModes();\n\n        this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n      }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n\n\n    _checkToolbarMixedModes() {\n      if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(node => !!(node.textContent && node.textContent.trim()));\n\n        if (isCombinedUsage) {\n          throwToolbarMixedModesError();\n        }\n      }\n    }\n\n  }\n\n  MatToolbar.ɵfac = function MatToolbar_Factory(t) {\n    return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatToolbar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatToolbar,\n    selectors: [[\"mat-toolbar\"]],\n    contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-toolbar\"],\n    hostVars: 4,\n    hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n      }\n    },\n    inputs: {\n      color: \"color\"\n    },\n    exportAs: [\"matToolbar\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 0,\n    template: function MatToolbar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n      }\n    },\n    styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatToolbar;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatToolbarModule = /*#__PURE__*/(() => {\n  class MatToolbarModule {}\n\n  MatToolbarModule.ɵfac = function MatToolbarModule_Factory(t) {\n    return new (t || MatToolbarModule)();\n  };\n\n  MatToolbarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatToolbarModule\n  });\n  MatToolbarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatToolbarModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, {\n    declarations: function () {\n      return [MatToolbar, MatToolbarRow];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatToolbar, MatToolbarRow, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/toolbar.js"],"names":["Directive","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Inject","ContentChildren","NgModule","mixinColor","MatCommonModule","Platform","DOCUMENT","ɵngcc0","ɵngcc1","_c0","_c1","_MatToolbarBase","constructor","_elementRef","MatToolbarRow","ɵfac","MatToolbarRow_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","exportAs","ngDevMode","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","isCombinedUsage","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","MatToolbar_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","contentQueries","MatToolbar_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostVars","hostBindings","MatToolbar_HostBindings","ɵɵclassProp","inputs","color","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatToolbar_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","Error","MatToolbarModule","MatToolbarModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nconst _MatToolbarBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\nclass MatToolbarRow {\n}\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) { return new (t || MatToolbarRow)(); };\nMatToolbarRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatToolbarRow, selectors: [[\"mat-toolbar-row\"]], hostAttrs: [1, \"mat-toolbar-row\"], exportAs: [\"matToolbarRow\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' }\n            }]\n    }], null, null); })();\nclass MatToolbar extends _MatToolbarBase {\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n        if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\n}\nMatToolbar.ɵfac = function MatToolbar_Factory(t) { return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatToolbar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatToolbar, selectors: [[\"mat-toolbar\"]], contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    } }, hostAttrs: [1, \"mat-toolbar\"], hostVars: 4, hostBindings: function MatToolbar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matToolbar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatToolbar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { _toolbarRows: [{\n            type: ContentChildren,\n            args: [MatToolbarRow, { descendants: true }]\n        }] }); })();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.ɵfac = function MatToolbarModule_Factory(t) { return new (t || MatToolbarModule)(); };\nMatToolbarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatToolbarModule });\nMatToolbarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, { declarations: function () { return [MatToolbar, MatToolbarRow]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatToolbar, MatToolbarRow, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n\n"]},"metadata":{},"sourceType":"module"}