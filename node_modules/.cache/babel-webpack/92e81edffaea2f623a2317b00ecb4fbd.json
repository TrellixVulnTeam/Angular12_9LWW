{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, HostListener, ViewChild, Pipe, Optional, Self, HostBinding, NgModule, Injectable, ViewContainerRef, ViewEncapsulation, ContentChildren } from '@angular/core';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4$1 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i10$1 from '@angular/material/card';\nimport { MatCardModule } from '@angular/material/card';\nimport * as i7 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i5$1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i1$6 from '@angular/material/list';\nimport { MatListModule } from '@angular/material/list';\nimport * as i9$1 from '@angular/material/menu';\nimport { MatMenuModule } from '@angular/material/menu';\nimport * as i6 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i1$2 from '@igo2/core';\nimport { Media, IgoLanguageModule } from '@igo2/core';\nimport t from 'typy';\nimport { ReplaySubject, BehaviorSubject, combineLatest, of, Observable, isObservable, fromEvent, merge, Subject } from 'rxjs';\nimport { map, skip, debounceTime, catchError, tap, switchMap, filter, take, distinctUntilChanged } from 'rxjs/operators';\nimport { uuid, ObjectUtils } from '@igo2/utils';\nimport * as i1 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i2 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i3 from '@angular/material/core';\nimport * as i4 from '@angular/material/table';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport * as i1$5 from '@angular/forms';\nimport { FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport * as moment_ from 'moment';\nimport * as i2$2 from '@angular/cdk/a11y';\nimport * as i5 from '@angular/material/sort';\nimport { MatSortModule, MatSort } from '@angular/material/sort';\nimport * as i9 from '@angular/material/autocomplete';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport * as i10 from '@angular/material/datepicker';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport * as i2$3 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport * as i2$1 from '@angular/material/paginator';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { __decorate } from 'tslib';\nimport * as i1$3 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Cacheable } from 'ts-cacheable';\nimport * as i6$1 from '@ngx-translate/core';\nimport * as i1$4 from '@angular/platform-browser';\nimport * as i1$7 from '@angular/cdk/overlay';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport * as i1$8 from '@angular/material/dialog';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport * as i3$1 from 'angular-shepherd';\nimport * as i1$9 from '@angular/material/sidenav';\nimport * as i2$4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { DataSource, CdkTableModule } from '@angular/cdk/table';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nvar EntityOperationType = /*#__PURE__*/(() => {\n  (function (EntityOperationType) {\n    EntityOperationType[\"Insert\"] = \"Insert\";\n    EntityOperationType[\"Update\"] = \"Update\";\n    EntityOperationType[\"Delete\"] = \"Delete\";\n  })(EntityOperationType || (EntityOperationType = {}));\n\n  return EntityOperationType;\n})();\nvar EntityTableColumnRenderer = /*#__PURE__*/(() => {\n  (function (EntityTableColumnRenderer) {\n    EntityTableColumnRenderer[\"Default\"] = \"Default\";\n    EntityTableColumnRenderer[\"HTML\"] = \"HTML\";\n    EntityTableColumnRenderer[\"UnsanitizedHTML\"] = \"UnsanitizedHTML\";\n    EntityTableColumnRenderer[\"Editable\"] = \"Editable\";\n    EntityTableColumnRenderer[\"Icon\"] = \"Icon\";\n    EntityTableColumnRenderer[\"ButtonGroup\"] = \"ButtonGroup\";\n  })(EntityTableColumnRenderer || (EntityTableColumnRenderer = {}));\n\n  return EntityTableColumnRenderer;\n})();\nvar EntityTableScrollBehavior = /*#__PURE__*/(() => {\n  (function (EntityTableScrollBehavior) {\n    EntityTableScrollBehavior[\"Auto\"] = \"auto\";\n    EntityTableScrollBehavior[\"Instant\"] = \"instant\";\n    EntityTableScrollBehavior[\"Smooth\"] = \"smooth\";\n  })(EntityTableScrollBehavior || (EntityTableScrollBehavior = {}));\n\n  return EntityTableScrollBehavior;\n})();\nvar EntityTableSelectionState = /*#__PURE__*/(() => {\n  (function (EntityTableSelectionState) {\n    EntityTableSelectionState[\"None\"] = \"None\";\n    EntityTableSelectionState[\"All\"] = \"All\";\n    EntityTableSelectionState[\"Some\"] = \"Some\";\n  })(EntityTableSelectionState || (EntityTableSelectionState = {}));\n\n  return EntityTableSelectionState;\n})();\n\n/**\r\n * Get an entity's named property. Nested properties are supported\r\n * with the dotted notation. (i.e 'author.name')\r\n *\r\n * Note: this method is a 'best attempt' at getting an entity's property.\r\n * It fits the most common cases but you might need to explicitely define\r\n * a property getter when using an EntityStore, for example.\r\n * @param entity Entity\r\n * @param property Property name\r\n * @returns Property value\r\n */\nfunction getEntityProperty(entity, property) {\n  return t(entity, property).safeObject;\n}\n/**\r\n * Get an entity's id. An entity's id can be one of:\r\n * 'entity.meta.id', 'entity.meta.idProperty' or 'entity.id'.\r\n *\r\n * Note: See the note in the 'getEntityProperty' documentation.\r\n * @param entity Entity\r\n * @returns Entity id\r\n */\n\n\nfunction getEntityId(entity) {\n  const meta = entity.meta || {};\n  return meta.id ? meta.id : getEntityProperty(entity, meta.idProperty || 'id');\n}\n/**\r\n * Get an entity's title. An entity's title can be one of:\r\n * 'entity.meta.title', 'entity.meta.titleProperty' or 'entity.title'.\r\n * @param entity Entity\r\n * @returns Entity title\r\n */\n\n\nfunction getEntityTitle(entity) {\n  const meta = entity.meta || {};\n  return meta.title ? meta.title : getEntityProperty(entity, meta.titleProperty || 'title');\n}\n/**\r\n * Get an entity's HTML title. An entity's HTML title can be one of:\r\n * 'entity.meta.titleHtml', 'entity.meta.titleHtmlProperty' or 'entity.titleHtml'.\r\n * @param entity Entity\r\n * @returns Entity HTML title\r\n */\n\n\nfunction getEntityTitleHtml(entity) {\n  const meta = entity.meta || {};\n  return meta.titleHtml ? meta.titleHtml : getEntityProperty(entity, meta.titleHtmlProperty || 'titleHtml');\n}\n/**\r\n * Get an entity's icon. An entity's icon can be one of:\r\n * 'entity.meta.icon', 'entity.meta.iconProperty' or 'entity.icon'.\r\n * @param entity Entity\r\n * @returns Entity icon\r\n */\n\n\nfunction getEntityIcon(entity) {\n  const meta = entity.meta || {};\n  return meta.icon ? meta.icon : getEntityProperty(entity, meta.iconProperty || 'icon');\n}\n/**\r\n * Get an entity's revision.\r\n * @param entity Entity\r\n * @returns Entity revision\r\n */\n\n\nfunction getEntityRevision(entity) {\n  const meta = entity.meta || {};\n  return meta.revision || 0;\n}\n/**\r\n * This class is used to track a store's entities state\r\n */\n\n\nclass EntityStateManager {\n  constructor(options = {}) {\n    /**\r\n     * State index\r\n     */\n    this.index = new Map();\n    /**\r\n     * Change emitter\r\n     */\n\n    this.change$ = new ReplaySubject(1);\n    this.store = options.store ? options.store : undefined;\n    this.getKey = options.getKey ? options.getKey : this.store ? this.store.getKey : getEntityId;\n    this.next();\n  }\n  /**\r\n   * Clear state\r\n   */\n\n\n  clear() {\n    if (this.index.size > 0) {\n      this.index.clear();\n      this.next();\n    }\n  }\n  /**\r\n   * Get an entity's state\r\n   * @param entity Entity\r\n   * @returns State\r\n   */\n\n\n  get(entity) {\n    return this.index.get(this.getKey(entity)) || {};\n  }\n  /**\r\n   * Set an entity's state\r\n   * @param entity Entity\r\n   * @param state State\r\n   */\n\n\n  set(entity, state) {\n    this.setMany([entity], state);\n  }\n  /**\r\n   * Set many entitie's state\r\n   * @param entitie Entities\r\n   * @param state State\r\n   */\n\n\n  setMany(entities, state) {\n    entities.forEach(entity => {\n      this.index.set(this.getKey(entity), Object.assign({}, state));\n    });\n    this.next();\n  }\n  /**\r\n   * Set state of all entities that already have a state. This is not\r\n   * the same as setting the state of all the store's entities.\r\n   * @param state State\r\n   */\n\n\n  setAll(state) {\n    Array.from(this.index.keys()).forEach(key => {\n      this.index.set(key, Object.assign({}, state));\n    });\n    this.next();\n  }\n  /**\r\n   * Update an entity's state\r\n   * @param entity Entity\r\n   * @param changes State changes\r\n   */\n\n\n  update(entity, changes, exclusive = false) {\n    this.updateMany([entity], changes, exclusive);\n  }\n  /**\r\n   * Update many entitie's state\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\n\n\n  updateMany(entities, changes, exclusive = false) {\n    if (exclusive === true) {\n      return this.updateManyExclusive(entities, changes);\n    }\n\n    entities.forEach(entity => {\n      const state = Object.assign({}, this.get(entity), changes);\n      this.index.set(this.getKey(entity), state);\n    });\n    this.next();\n  }\n  /**\r\n   * Reversee an entity's state\r\n   * @param entity Entity\r\n   * @param keys State keys to reverse\r\n   */\n\n\n  reverse(entity, keys) {\n    this.reverseMany([entity], keys);\n  }\n  /**\r\n   * Reverse many entitie's state\r\n   * @param entitie Entities\r\n   * @param keys State keys to reverse\r\n   */\n\n\n  reverseMany(entities, keys) {\n    entities.forEach(entity => {\n      const currentState = this.get(entity);\n      const changes = keys.reduce((acc, key) => {\n        acc[key] = currentState[key] || false;\n        return acc;\n      }, {});\n      const reversedChanges = this.reverseChanges(changes);\n      const state = Object.assign({}, currentState, reversedChanges);\n      this.index.set(this.getKey(entity), state);\n    });\n    this.next();\n  }\n  /**\r\n   * Update state of all entities that already have a state. This is not\r\n   * the same as updating the state of all the store's entities.\r\n   * @param changes State\r\n   */\n\n\n  updateAll(changes) {\n    const allKeys = this.getAllKeys();\n    Array.from(allKeys).forEach(key => {\n      const state = Object.assign({}, this.index.get(key), changes);\n      this.index.set(key, state);\n    });\n    this.next();\n  }\n  /**\r\n   * When some state changes are flagged as 'exclusive', reverse\r\n   * the state of all other entities. Changes are reversable when\r\n   * they are boolean.\r\n   * @param entitie Entities\r\n   * @param changes State changes\r\n   */\n\n\n  updateManyExclusive(entities, changes) {\n    const reverseChanges = this.reverseChanges(changes);\n    const keys = entities.map(entity => this.getKey(entity));\n    const allKeys = new Set(keys.concat(Array.from(this.getAllKeys())));\n    allKeys.forEach(key => {\n      const state = this.index.get(key) || {};\n\n      if (keys.indexOf(key) >= 0) {\n        this.index.set(key, Object.assign({}, state, changes));\n      } else {\n        // Update only if the reverse changes would modify\n        // a key already present in the current state\n        const shouldUpdate = Object.keys(reverseChanges).some(changeKey => {\n          return state[changeKey] !== undefined && state[changeKey] !== reverseChanges[changeKey];\n        });\n\n        if (shouldUpdate === true) {\n          this.index.set(key, Object.assign({}, state, reverseChanges));\n        }\n      }\n    });\n    this.next();\n  }\n  /**\r\n   * Compute a 'reversed' version of some state changes.\r\n   * Changes are reversable when they are boolean.\r\n   * @param changes State changes\r\n   * @returns Reversed state changes\r\n   */\n\n\n  reverseChanges(changes) {\n    return Object.entries(changes).reduce((reverseChanges, bunch) => {\n      const [changeKey, value] = bunch;\n\n      if (typeof value === typeof true) {\n        reverseChanges[changeKey] = !value;\n      }\n\n      return reverseChanges;\n    }, {});\n  }\n  /**\r\n   * Return all the keys in that state and in the store it's bound to, if any.\r\n   * @returns Set of keys\r\n   */\n\n\n  getAllKeys() {\n    const storeKeys = this.store ? Array.from(this.store.index.keys()) : [];\n    return new Set(Array.from(this.index.keys()).concat(storeKeys));\n  }\n  /**\r\n   * Emit 'change' event\r\n   */\n\n\n  next() {\n    this.change$.next();\n  }\n\n}\n/**\r\n * An entity view streams entities from an observable source. These entities\r\n * can be filtered or sorted without affecting the source. A view can also\r\n * combine data from multiple sources, joined together.\r\n */\n\n\nclass EntityView {\n  constructor(source$) {\n    this.source$ = source$;\n    /**\r\n     * Observable stream of values\r\n     */\n\n    this.values$ = new BehaviorSubject([]);\n    /**\r\n     * Whether this view has been lifted\r\n     */\n\n    this.lifted = false;\n    /**\r\n     * Join clauses\r\n     */\n\n    this.joins = [];\n    /**\r\n     * Observable of a filter clause\r\n     */\n\n    this.filter$ = new BehaviorSubject(undefined);\n    /**\r\n     * Observable of filter clauses\r\n     */\n\n    this.filters$ = new BehaviorSubject([]);\n    /**\r\n     * Filters index\r\n     */\n\n    this.filterIndex = new Map();\n    /**\r\n     * Observable of a sort clause\r\n     */\n\n    this.sort$ = new BehaviorSubject(undefined);\n    this.getKey$ = new BehaviorSubject(undefined);\n    /**\r\n     * Number of entities\r\n     */\n\n    this.count$ = new BehaviorSubject(0);\n    /**\r\n     * Whether the store is empty\r\n     */\n\n    this.empty$ = new BehaviorSubject(true);\n  }\n  /**\r\n   * Method for indexing\r\n   */\n\n\n  get getKey() {\n    return this.getKey$.value;\n  }\n\n  get count() {\n    return this.count$.value;\n  }\n\n  get empty() {\n    return this.empty$.value;\n  }\n  /**\r\n   * Store index\r\n   */\n\n\n  get index() {\n    return this._index;\n  }\n  /**\r\n   * Get a value from the view by key\r\n   * @param key Key\r\n   * @returns Value\r\n   */\n\n\n  get(key) {\n    if (this._index === undefined) {\n      throw new Error('This view has no index, therefore, this method is unavailable.');\n    }\n\n    return this.index.get(key);\n  }\n  /**\r\n   * Get all the values\r\n   * @returns Array of values\r\n   */\n\n\n  all() {\n    return this.values$.value;\n  }\n  /**\r\n   * Observe all the values\r\n   * @returns Observable of values\r\n   */\n\n\n  all$() {\n    return this.values$;\n  }\n  /**\r\n   * Get the first value that respects a criteria\r\n   * @returns A value\r\n   */\n\n\n  firstBy(clause) {\n    return this.values$.value.find(clause);\n  }\n  /**\r\n   * Observe the first value that respects a criteria\r\n   * @returns Observable of a value\r\n   */\n\n\n  firstBy$(clause) {\n    return this.values$.pipe(map(values => values.find(clause)));\n  }\n  /**\r\n   * Get all the values that respect a criteria\r\n   * @returns Array of values\r\n   */\n\n\n  manyBy(clause) {\n    return this.values$.value.filter(clause);\n  }\n  /**\r\n   * Observe all the values that respect a criteria\r\n   * @returns Observable of values\r\n   */\n\n\n  manyBy$(clause) {\n    return this.values$.pipe(map(values => values.filter(clause)));\n  }\n  /**\r\n   * Clear the filter and sort and unsubscribe from the source\r\n   */\n\n\n  clear() {\n    this.filter(undefined);\n    this.sort(undefined);\n  }\n\n  destroy() {\n    if (this.values$$ !== undefined) {\n      this.values$$.unsubscribe();\n    }\n\n    this.clear();\n  }\n  /**\r\n   * Create an index\r\n   * @param getKey Method to get a value's id\r\n   * @returns The view\r\n   */\n\n\n  createIndex(getKey) {\n    this._index = new Map();\n    this.getKey$.next(getKey);\n    return this;\n  }\n  /**\r\n   * Join another source to the stream (chainable)\r\n   * @param clause Join clause\r\n   * @returns The view\r\n   */\n\n\n  join(clause) {\n    if (this.lifted === true) {\n      throw new Error('This view has already been lifted, therefore, no join is allowed.');\n    }\n\n    this.joins.push(clause);\n    return this;\n  }\n  /**\r\n   * Filter values (chainable)\r\n   * @param clause Filter clause\r\n   * @returns The view\r\n   */\n\n\n  filter(clause) {\n    this.filter$.next(clause);\n    return this;\n  }\n  /**\r\n   * @param clause Filter clause\r\n   * @returns The filter id\r\n   */\n\n\n  addFilter(clause) {\n    const id = uuid();\n    this.filterIndex.set(id, clause);\n    this.filters$.next(Array.from(this.filterIndex.values()));\n    return id;\n  }\n  /**\r\n   * Remove a filter by id\r\n   * @param clause Filter clause\r\n   */\n\n\n  removeFilter(id) {\n    this.filterIndex.delete(id);\n    this.filters$.next(Array.from(this.filterIndex.values()));\n  }\n  /**\r\n   * Sort values (chainable)\r\n   * @param clauseSort clause\r\n   * @returns The view\r\n   */\n\n\n  sort(clause) {\n    this.sort$.next(clause);\n    return this;\n  }\n  /**\r\n   * Create the final observable\r\n   * @returns Observable\r\n   */\n\n\n  lift() {\n    this.lifted = true;\n    const source$ = this.joins.length > 0 ? this.liftJoinedSource() : this.liftSource();\n    const observables$ = [source$, this.filters$, this.filter$, this.sort$, this.getKey$];\n    this.values$$ = combineLatest(observables$).pipe(skip(1), debounceTime(5)).subscribe(bunch => {\n      const [_values, filters, filter, sort, getKey] = bunch;\n      const values = this.processValues(_values, filters, filter, sort);\n      const generateIndex = getKey !== undefined;\n      this.setValues(values, generateIndex);\n    });\n  }\n  /**\r\n   * Create the source observable when no joins are defined\r\n   * @returns Observable\r\n   */\n\n\n  liftSource() {\n    return this.source$;\n  }\n  /**\r\n   * Create the source observable when joins are defined\r\n   * @returns Observable\r\n   */\n\n\n  liftJoinedSource() {\n    const sources$ = [this.source$, combineLatest(this.joins.map(join => join.source))];\n    return combineLatest(sources$).pipe(map(bunch => {\n      const [entities, joinData] = bunch;\n      return entities.reduce((values, entity) => {\n        const value = this.computeJoinedValue(entity, joinData);\n\n        if (value !== undefined) {\n          values.push(value);\n        }\n\n        return values;\n      }, []);\n    }));\n  }\n  /**\r\n   * Apply joins to a source's entity and return the final value\r\n   * @returns Final value\r\n   */\n\n\n  computeJoinedValue(entity, joinData) {\n    let value = entity;\n    let joinIndex = 0;\n\n    while (value !== undefined && joinIndex < this.joins.length) {\n      value = this.joins[joinIndex].reduce(value, joinData[joinIndex]);\n      joinIndex += 1;\n    }\n\n    return value;\n  }\n  /**\r\n   * Filter and sort values before streaming them\r\n   * @param values Values\r\n   * @param filters Filter clauses\r\n   * @param filter Filter clause\r\n   * @param sort Sort clause\r\n   * @returns Filtered and sorted values\r\n   */\n\n\n  processValues(values, filters, filter, sort) {\n    values = values.slice(0);\n    values = this.filterValues(values, filters.concat([filter]));\n    values = this.sortValues(values, sort);\n    return values;\n  }\n  /**\r\n   * Filter values\r\n   * @param values Values\r\n   * @param filters Filter clauses\r\n   * @returns Filtered values\r\n   */\n\n\n  filterValues(values, clauses) {\n    if (clauses.length === 0) {\n      return values;\n    }\n\n    return values.filter(value => {\n      return clauses.filter(clause => clause !== undefined).every(clause => clause(value));\n    });\n  }\n  /**\r\n   * Sort values\r\n   * @param values Values\r\n   * @param sort Sort clause\r\n   * @returns Sorted values\r\n   */\n\n\n  sortValues(values, clause) {\n    if (clause === undefined) {\n      return values;\n    }\n\n    return values.sort((v1, v2) => {\n      return ObjectUtils.naturalCompare(clause.valueAccessor(v1), clause.valueAccessor(v2), clause.direction, clause.nullsFirst);\n    });\n  }\n  /**\r\n   * Set value and optionally generate an index\r\n   * @param values Values\r\n   * @param generateIndex boolean\r\n   */\n\n\n  setValues(values, generateIndex) {\n    if (generateIndex === true) {\n      this._index = this.generateIndex(values);\n    }\n\n    this.values$.next(values);\n    const count = values.length;\n    const empty = count === 0;\n    this.count$.next(count);\n    this.empty$.next(empty);\n  }\n  /**\r\n   * Generate a complete index of all the values\r\n   * @param entities Entities\r\n   * @returns Index\r\n   */\n\n\n  generateIndex(values) {\n    const entries = values.map(value => [this.getKey(value), value]);\n    return new Map(entries);\n  }\n\n}\n/**\r\n * An entity store class holds any number of entities\r\n * as well as their state. It can be observed, filtered and sorted and\r\n * provides methods to insert, update or delete entities.\r\n */\n\n\nclass EntityStore {\n  constructor(entities, options = {}) {\n    /**\r\n     * Observable of the raw entities\r\n     */\n    this.entities$ = new BehaviorSubject([]);\n    /**\r\n     * Number of entities\r\n     */\n\n    this.count$ = new BehaviorSubject(0);\n    /**\r\n     * Whether the store is empty\r\n     */\n\n    this.empty$ = new BehaviorSubject(true);\n    this._pristine = true;\n    /**\r\n     * Strategies\r\n     */\n\n    this.strategies = [];\n    this.getKey = options.getKey ? options.getKey : getEntityId;\n    this.getProperty = options.getProperty ? options.getProperty : getEntityProperty;\n    this.state = this.createStateManager();\n    this.view = this.createDataView();\n    this.stateView = this.createStateView();\n    this.view.lift();\n    this.stateView.lift();\n\n    if (entities.length > 0) {\n      this.load(entities);\n    } else {\n      this._index = this.generateIndex(entities);\n    }\n  }\n\n  get count() {\n    return this.count$.value;\n  }\n\n  get empty() {\n    return this.empty$.value;\n  }\n  /**\r\n   * Store index\r\n   */\n\n\n  get index() {\n    return this._index;\n  }\n  /**\r\n   * Store index\r\n   */\n\n\n  get pristine() {\n    return this._pristine;\n  }\n  /**\r\n   * Get an entity from the store by key\r\n   * @param key Key\r\n   * @returns Entity\r\n   */\n\n\n  get(key) {\n    return this.index.get(key);\n  }\n  /**\r\n   * Get all entities in the store\r\n   * @returns Array of entities\r\n   */\n\n\n  all() {\n    return this.entities$.value;\n  }\n  /**\r\n   * Set this store's entities\r\n   * @param entities Entities\r\n   */\n\n\n  load(entities, pristine = true) {\n    this._index = this.generateIndex(entities);\n    this._pristine = pristine;\n    this.next();\n  }\n  /**\r\n   * Clear the store's entities but keep the state and views intact.\r\n   * Views won't return any data but future data will be subject to the\r\n   * current views filter and sort\r\n   */\n\n\n  softClear() {\n    if (this.index && this.index.size > 0) {\n      this.index.clear();\n      this._pristine = true;\n      this.next();\n    } else if (this.index) {\n      this.updateCount();\n    }\n  }\n  /**\r\n   * Clear the store's entities, state and views\r\n   */\n\n\n  clear() {\n    this.stateView.clear();\n    this.view.clear();\n    this.state.clear();\n    this.softClear();\n  }\n\n  destroy() {\n    this.stateView.destroy();\n    this.view.destroy();\n    this.clear();\n  }\n  /**\r\n   * Insert an entity into the store\r\n   * @param entity Entity\r\n   */\n\n\n  insert(entity) {\n    this.insertMany([entity]);\n  }\n  /**\r\n   * Insert many entities into the store\r\n   * @param entities Entities\r\n   */\n\n\n  insertMany(entities) {\n    entities.forEach(entity => this.index.set(this.getKey(entity), entity));\n    this._pristine = false;\n    this.next();\n  }\n  /**\r\n   * Update or insert an entity into the store\r\n   * @param entity Entity\r\n   */\n\n\n  update(entity) {\n    this.updateMany([entity]);\n  }\n  /**\r\n   * Update or insert many entities into the store\r\n   * @param entities Entities\r\n   */\n\n\n  updateMany(entities) {\n    entities.forEach(entity => this.index.set(this.getKey(entity), entity));\n    this._pristine = false;\n    this.next();\n  }\n  /**\r\n   * Delete an entity from the store\r\n   * @param entity Entity\r\n   */\n\n\n  delete(entity) {\n    this.deleteMany([entity]);\n  }\n  /**\r\n   * Delete many entities from the store\r\n   * @param entities Entities\r\n   */\n\n\n  deleteMany(entities) {\n    entities.forEach(entity => this.index.delete(this.getKey(entity)));\n    this._pristine = false;\n    this.next();\n  }\n  /**\r\n   * Add a strategy to this store\r\n   * @param strategy Entity store strategy\r\n   * @returns Entity store\r\n   */\n\n\n  addStrategy(strategy, activate = false) {\n    const existingStrategy = this.strategies.find(_strategy => {\n      return strategy.constructor === _strategy.constructor;\n    });\n\n    if (existingStrategy !== undefined) {\n      throw new Error('A strategy of this type already exists on that EntityStore.');\n    }\n\n    this.strategies.push(strategy);\n    strategy.bindStore(this);\n\n    if (activate === true) {\n      strategy.activate();\n    }\n\n    return this;\n  }\n  /**\r\n   * Remove a strategy from this store\r\n   * @param strategy Entity store strategy\r\n   * @returns Entity store\r\n   */\n\n\n  removeStrategy(strategy) {\n    const index = this.strategies.indexOf(strategy);\n\n    if (index >= 0) {\n      this.strategies.splice(index, 1);\n      strategy.unbindStore(this);\n    }\n\n    return this;\n  }\n  /**\r\n   * Return strategies of a given type\r\n   * @param type Entity store strategy class\r\n   * @returns Strategies\r\n   */\n\n\n  getStrategyOfType(type) {\n    return this.strategies.find(strategy => {\n      return strategy instanceof type;\n    });\n  }\n  /**\r\n   * Activate strategies of a given type\r\n   * @param type Entity store strategy class\r\n   */\n\n\n  activateStrategyOfType(type) {\n    const strategy = this.getStrategyOfType(type);\n\n    if (strategy !== undefined) {\n      strategy.activate();\n    }\n  }\n  /**\r\n   * Deactivate strategies of a given type\r\n   * @param type Entity store strategy class\r\n   */\n\n\n  deactivateStrategyOfType(type) {\n    const strategy = this.getStrategyOfType(type);\n\n    if (strategy !== undefined) {\n      strategy.deactivate();\n    }\n  }\n  /**\r\n   * Generate a complete index of all the entities\r\n   * @param entities Entities\r\n   * @returns Index\r\n   */\n\n\n  generateIndex(entities) {\n    const entries = entities.map(entity => [this.getKey(entity), entity]);\n    return new Map(entries);\n  }\n  /**\r\n   * Push the index's entities into the entities$ observable\r\n   */\n\n\n  next() {\n    this.entities$.next(Array.from(this.index.values()));\n    this.updateCount();\n  }\n  /**\r\n   * Update the store's count and empty\r\n   */\n\n\n  updateCount() {\n    const count = this.index.size;\n    const empty = count === 0;\n    this.count$.next(count);\n    this.empty$.next(empty);\n  }\n  /**\r\n   * Create the entity state manager\r\n   * @returns EntityStateManager\r\n   */\n\n\n  createStateManager() {\n    return new EntityStateManager({\n      store: this\n    });\n  }\n  /**\r\n   * Create the data view\r\n   * @returns EntityView<E>\r\n   */\n\n\n  createDataView() {\n    return new EntityView(this.entities$);\n  }\n  /**\r\n   * Create the state view\r\n   * @returns EntityView<EntityRecord<E>>\r\n   */\n\n\n  createStateView() {\n    return new EntityView(this.view.all$()).join({\n      source: this.state.change$,\n      reduce: entity => {\n        const key = this.getKey(entity);\n        const state = this.state.get(entity);\n        const currentRecord = this.stateView.get(key);\n\n        if (currentRecord !== undefined && currentRecord.entity === entity && this.statesAreTheSame(currentRecord.state, state)) {\n          return currentRecord;\n        }\n\n        const revision = currentRecord ? currentRecord.revision + 1 : 1;\n        const ref = `${key}-${revision}`;\n        return {\n          entity,\n          state,\n          revision,\n          ref\n        };\n      }\n    }).createIndex(record => this.getKey(record.entity));\n  }\n\n  statesAreTheSame(currentState, newState) {\n    if (currentState === newState) {\n      return true;\n    }\n\n    const currentStateIsEmpty = Object.keys(currentState).length === 0;\n    const newStateIsEmpty = Object.keys(newState).length === 0;\n    return currentStateIsEmpty && newStateIsEmpty;\n  }\n\n}\n/**\r\n * This class is used to synchronize a component's changes\r\n * detection with an EntityStore changes. For example, it is frequent\r\n * to have a component subscribe to a store's selected entity and, at the same time,\r\n * this component provides a way to select an entity with, let's say, a click.\r\n *\r\n * This class automatically handles those case and triggers the compoent's\r\n * change detection when needed.\r\n *\r\n * Note: If the component observes the store's stateView, a workspace is\r\n * probably not required because the stateView catches any changes to the\r\n * entities and their state.\r\n */\n\n\nclass EntityStoreWatcher {\n  constructor(store, cdRef) {\n    /**\r\n     * Component inner state\r\n     */\n    this.innerStateIndex = new Map();\n    this.setChangeDetector(cdRef);\n    this.setStore(store);\n  }\n\n  destroy() {\n    this.setChangeDetector(undefined);\n    this.setStore(undefined);\n  }\n  /**\r\n   * Bind this workspace to a store and start watching for changes\r\n   * @param store Entity store\r\n   */\n\n\n  setStore(store) {\n    if (store === undefined) {\n      this.teardownObservers();\n      this.innerStateIndex.clear();\n      this.store = undefined;\n      return;\n    }\n\n    this.setStore(undefined);\n    this.store = store;\n    this.setupObservers();\n    this.detectChanges();\n  }\n  /**\r\n   * Bind this workspace to a component's change detector\r\n   * @param cdRef Change detector\r\n   */\n\n\n  setChangeDetector(cdRef) {\n    this.cdRef = cdRef;\n  }\n  /**\r\n   * Set up observers on a store's entities and their state\r\n   * @param store Entity store\r\n   */\n\n\n  setupObservers() {\n    this.teardownObservers();\n    this.entities$$ = this.store.entities$.subscribe(entities => this.onEntitiesChange(entities));\n    this.state$$ = this.store.state.change$.pipe(skip(1)).subscribe(() => this.onStateChange());\n  }\n  /**\r\n   * Teardown store observers\r\n   */\n\n\n  teardownObservers() {\n    if (this.entities$$ !== undefined) {\n      this.entities$$.unsubscribe();\n    }\n\n    if (this.state$$ !== undefined) {\n      this.state$$.unsubscribe();\n    }\n\n    this.entities$$ = undefined;\n    this.state$$ = undefined;\n  }\n  /**\r\n   * When the entities change, always trigger the changes detection\r\n   */\n\n\n  onEntitiesChange(entities) {\n    this.detectChanges();\n  }\n  /**\r\n   * When the entities state change, trigger the change detection\r\n   * only if the component has not handled these changes yet. For example,\r\n   * the component might have initiated thoses changes itself.\r\n   */\n\n\n  onStateChange() {\n    let changesDetected = false;\n    const storeIndex = this.store.state.index;\n    const innerIndex = this.innerStateIndex;\n\n    if (storeIndex.size !== innerIndex.size) {\n      changesDetected = this.detectChanges();\n    }\n\n    const storeKeys = Array.from(storeIndex.keys());\n\n    for (const key of storeKeys) {\n      const storeValue = storeIndex.get(key);\n      const innerValue = innerIndex.get(key);\n\n      if (changesDetected === false) {\n        if (innerValue === undefined) {\n          changesDetected = this.detectChanges();\n        } else if (!ObjectUtils.objectsAreEquivalent(storeValue, innerValue)) {\n          changesDetected = this.detectChanges();\n        }\n      }\n\n      this.innerStateIndex.set(key, Object.assign({}, storeValue));\n    }\n  }\n  /**\r\n   * Trigger the change detection of the workspace is bound to a change detector\r\n   */\n\n\n  detectChanges() {\n    if (this.cdRef !== undefined) {\n      this.cdRef.detectChanges();\n    }\n\n    return true;\n  }\n\n}\n/**\r\n * This class holds a reference to the insert, update and delete\r\n * operations performed on a store. This is useful to commit\r\n * these operations in a single pass or to cancel them.\r\n */\n\n\nclass EntityTransaction {\n  constructor(options = {}) {\n    this.inCommitPhase$ = new BehaviorSubject(false);\n    this.getKey = options.getKey ? options.getKey : getEntityId;\n    this.operations = new EntityStore([], {\n      getKey: operation => operation.key\n    });\n  }\n  /**\r\n   * Whether there are pending operations\r\n   */\n\n\n  get empty$() {\n    return this.operations.empty$;\n  }\n  /**\r\n   * Whether there are pending operations\r\n   */\n\n\n  get empty() {\n    return this.empty$.value;\n  }\n  /**\r\n   * Whether thise store is in commit phase\r\n   */\n\n\n  get inCommitPhase() {\n    return this.inCommitPhase$.value;\n  }\n\n  destroy() {\n    this.operations.destroy();\n  }\n  /**\r\n   * Insert an entity into a store. If no store is specified, an insert\r\n   * operation is still created but the transaction won't add the new\r\n   * entity to the store.\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  insert(current, store, meta) {\n    const existingOperation = this.getOperationByEntity(current);\n\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n    }\n\n    this.doInsert(current, store, meta);\n  }\n  /**\r\n   * Update an entity in a store. If no store is specified, an update\r\n   * operation is still created but the transaction won't update the\r\n   * entity into the store.\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  update(previous, current, store, meta) {\n    const existingOperation = this.getOperationByEntity(current);\n\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n\n      if (existingOperation.type === EntityOperationType.Insert) {\n        this.doInsert(current, store, meta);\n        return;\n      } else if (existingOperation.type === EntityOperationType.Update) {\n        previous = existingOperation.previous;\n      }\n    }\n\n    this.doUpdate(previous, current, store, meta);\n  }\n  /**\r\n   * Delete an entity from a store. If no store is specified, a delete\r\n   * operation is still created but the transaction won't remove the\r\n   * entity from the store.\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  delete(previous, store, meta) {\n    const existingOperation = this.getOperationByEntity(previous);\n\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n\n      if (existingOperation.type === EntityOperationType.Insert) {\n        if (store !== undefined) {\n          store.delete(previous);\n        }\n\n        return;\n      }\n    }\n\n    this.doDelete(previous, store, meta);\n  }\n  /**\r\n   * Commit operations the transaction. This method doesn't do much\r\n   * in itself. The handler it receives does the hard work and it's\r\n   * implementation is left to the caller. This method simply wraps\r\n   * the handler into an error catching mechanism to update\r\n   * the transaction afterward. The caller needs to subscribe to this\r\n   * method's output (observable) for the commit to be performed.\r\n   * @param operations Operations to commit\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\n\n\n  commit(operations, handler) {\n    this.inCommitPhase$.next(true);\n    return handler(this, operations).pipe(catchError(() => of(new Error())), tap(result => {\n      if (result instanceof Error) {\n        this.onCommitError(operations);\n      } else {\n        this.onCommitSuccess(operations);\n      }\n    }));\n  }\n  /**\r\n   * Commit all the operations of the transaction.\r\n   * @param handler Function that handles the commit operation\r\n   * @returns The handler output (observable)\r\n   */\n\n\n  commitAll(handler) {\n    const operations = this.getOperationsInCommit();\n    return this.commit(operations, handler);\n  }\n  /**\r\n   * Rollback this transaction\r\n   */\n\n\n  rollback() {\n    this.rollbackOperations(this.operations.all());\n  }\n  /**\r\n   * Rollback specific operations\r\n   */\n\n\n  rollbackOperations(operations) {\n    this.checkInCommitPhase();\n\n    const operationsFactory = () => new Map([[EntityOperationType.Delete, []], [EntityOperationType.Update, []], [EntityOperationType.Insert, []]]);\n\n    const storesOperations = new Map(); // Group operations by store and by operation type.\n    // Grouping operations allows us to revert them in bacth, thus, triggering\n    // observables only one per operation type.\n\n    for (const operation of operations) {\n      const store = operation.store;\n\n      if (operation.store === undefined) {\n        continue;\n      }\n\n      let storeOperations = storesOperations.get(store);\n\n      if (storeOperations === undefined) {\n        storeOperations = operationsFactory();\n        storesOperations.set(store, storeOperations);\n      }\n\n      storeOperations.get(operation.type).push(operation);\n    }\n\n    Array.from(storesOperations.keys()).forEach(store => {\n      const storeOperations = storesOperations.get(store);\n      const deletes = storeOperations.get(EntityOperationType.Delete);\n      store.insertMany(deletes.map(_delete => _delete.previous));\n      const updates = storeOperations.get(EntityOperationType.Update);\n      store.updateMany(updates.map(_update => _update.previous));\n      const inserts = storeOperations.get(EntityOperationType.Insert);\n      store.deleteMany(inserts.map(_insert => _insert.current));\n    });\n    this.operations.deleteMany(operations);\n    this.inCommitPhase$.next(false);\n  }\n  /**\r\n   * Clear this transaction\r\n   * @todo Raise event and synchronize stores?\r\n   */\n\n\n  clear() {\n    this.operations.clear();\n    this.inCommitPhase$.next(false);\n  }\n  /**\r\n   * Get any existing operation on an entity\r\n   * @param entity Entity\r\n   * @returns Either an insert, update or delete operation\r\n   */\n\n\n  getOperationByEntity(entity) {\n    return this.operations.get(this.getKey(entity));\n  }\n  /**\r\n   * Merge another transaction in this one\r\n   * @param transaction Another transaction\r\n   */\n\n\n  mergeTransaction(transaction) {\n    this.checkInCommitPhase();\n    const operations = transaction.operations.all();\n    operations.forEach(operation => {\n      this.addOperation(operation);\n    });\n  }\n  /**\r\n   * Create an insert operation and add an entity to the store\r\n   * @param current The entity to insert\r\n   * @param store Optional: The store to insert the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  doInsert(current, store, meta) {\n    this.addOperation({\n      key: this.getKey(current),\n      type: EntityOperationType.Insert,\n      previous: undefined,\n      current,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.insert(current);\n    }\n  }\n  /**\r\n   * Create an update operation and update an entity into the store\r\n   * @param previous The entity before update\r\n   * @param current The entity after update\r\n   * @param store Optional: The store to update the entity into\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  doUpdate(previous, current, store, meta) {\n    this.addOperation({\n      key: this.getKey(current),\n      type: EntityOperationType.Update,\n      previous,\n      current,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.update(current);\n    }\n  }\n  /**\r\n   * Create a delete operation and delete an entity from the store\r\n   * @param previous The entity before delete\r\n   * @param store Optional: The store to delete the entity from\r\n   * @param meta Optional: Any metadata on the operation\r\n   */\n\n\n  doDelete(previous, store, meta) {\n    this.addOperation({\n      key: this.getKey(previous),\n      type: EntityOperationType.Delete,\n      previous,\n      current: undefined,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.delete(previous);\n    }\n  }\n  /**\r\n   * Remove committed operations from store\r\n   * @param operations Commited operations\r\n   * @todo Raise event and synchronize stores?\r\n   */\n\n\n  resolveOperations(operations) {\n    this.operations.deleteMany(operations);\n  }\n  /**\r\n   * On commit success, resolve commited operations and exit commit phase\r\n   * @param operations Commited operations\r\n   */\n\n\n  onCommitSuccess(operations) {\n    this.resolveOperations(operations);\n    this.inCommitPhase$.next(false);\n  }\n  /**\r\n   * On commit error, abort transaction\r\n   * @param operations Commited operations\r\n   */\n\n\n  onCommitError(operations) {\n    this.inCommitPhase$.next(false);\n  }\n  /**\r\n   * Add an operation to the operations store\r\n   * @param operation Operation to add\r\n   */\n\n\n  addOperation(operation) {\n    this.checkInCommitPhase();\n    this.operations.insert(operation);\n    this.operations.state.update(operation, {\n      added: true\n    });\n  }\n  /**\r\n   * Remove an operation from the operations store\r\n   * @param operation Operation to remove\r\n   */\n\n\n  removeOperation(operation) {\n    this.checkInCommitPhase();\n    this.operations.delete(operation);\n    this.operations.state.update(operation, {\n      added: false\n    });\n  }\n  /**\r\n   * Get all the operations to commit\r\n   * @returns Operations to commit\r\n   */\n\n\n  getOperationsInCommit() {\n    return this.operations.stateView.manyBy(value => {\n      return value.state.added === true;\n    }).map(value => value.entity);\n  }\n  /**\r\n   * Check if the transaction is in the commit phase and throw an error if it is\r\n   */\n\n\n  checkInCommitPhase() {\n    if (this.inCommitPhase === true) {\n      throw new Error('This transaction is in the commit phase. Cannot complete this operation.');\n    }\n  }\n\n}\n/**\r\n * Entity store strategies. They can do pretty much anything during a store's\r\n * lifetime. For example, they may act as triggers when something happens.\r\n * Sharing a strategy is a good idea when multiple strategies would have\r\n * on cancelling effect on each other.\r\n *\r\n * At creation, strategy is inactive and needs to be manually activated.\r\n */\n\n\nclass EntityStoreStrategy {\n  constructor(options = {}) {\n    this.options = options;\n    /**\r\n     * Feature store\r\n     * @internal\r\n     */\n\n    this.stores = [];\n    this.active$ = new BehaviorSubject(false);\n    this.options = options;\n  }\n  /**\r\n   * Whether this strategy is active\r\n   * @internal\r\n   */\n\n\n  get active() {\n    return this.active$.value;\n  }\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\n\n\n  activate() {\n    if (this.active === true) {\n      this.doDeactivate();\n    }\n\n    this.active$.next(true);\n    this.doActivate();\n  }\n  /**\r\n   * Activate the strategy. If it's already active, it'll be deactivated\r\n   * and activated again.\r\n   */\n\n\n  deactivate() {\n    this.active$.next(false);\n    this.doDeactivate();\n  }\n  /**\r\n   * Bind this strategy to a store\r\n   * @param store Feature store\r\n   */\n\n\n  bindStore(store) {\n    if (this.stores.indexOf(store) < 0) {\n      this.stores.push(store);\n    }\n  }\n  /**\r\n   * Unbind this strategy from store\r\n   * @param store Feature store\r\n   */\n\n\n  unbindStore(store) {\n    const index = this.stores.indexOf(store);\n\n    if (index >= 0) {\n      this.stores.splice(index, 1);\n    }\n  }\n  /**\r\n   * Do the stataegy activation\r\n   * @internal\r\n   */\n\n\n  doActivate() {}\n  /**\r\n   * Do the strategy deactivation\r\n   * @internal\r\n   */\n\n\n  doDeactivate() {}\n\n}\n/**\r\n * When active, this strategy filters a store's stateView to return\r\n * selected entities only.\r\n */\n\n\nclass EntityStoreFilterCustomFuncStrategy extends EntityStoreStrategy {\n  constructor(options) {\n    super(options);\n    this.options = options;\n    /**\r\n     * Store / filter ids map\r\n     */\n\n    this.filters = new Map();\n  }\n  /**\r\n   * Bind this strategy to a store and start filtering it\r\n   * @param store Entity store\r\n   */\n\n\n  bindStore(store) {\n    super.bindStore(store);\n\n    if (this.active === true) {\n      this.filterStore(store);\n    }\n  }\n  /**\r\n   * Unbind this strategy from a store and stop filtering it\r\n   * @param store Entity store\r\n   */\n\n\n  unbindStore(store) {\n    super.unbindStore(store);\n\n    if (this.active === true) {\n      this.unfilterStore(store);\n    }\n  }\n  /**\r\n   * Start filtering all stores\r\n   * @internal\r\n   */\n\n\n  doActivate() {\n    this.filterAll();\n  }\n  /**\r\n   * Stop filtering all stores\r\n   * @internal\r\n   */\n\n\n  doDeactivate() {\n    this.unfilterAll();\n  }\n  /**\r\n   * Filter all stores\r\n   */\n\n\n  filterAll() {\n    this.stores.forEach(store => this.filterStore(store));\n  }\n  /**\r\n   * Unfilter all stores\r\n   */\n\n\n  unfilterAll() {\n    this.stores.forEach(store => this.unfilterStore(store));\n  }\n  /**\r\n   * Filter a store and add it to the filters map\r\n   */\n\n\n  filterStore(store) {\n    this.filters.set(store, store.stateView.addFilter(this.options.filterClauseFunc));\n  }\n  /**\r\n   * Unfilter a store and delete it from the filters map\r\n   */\n\n\n  unfilterStore(store) {\n    const filterId = this.filters.get(store);\n\n    if (filterId === undefined) {\n      return;\n    }\n\n    store.stateView.removeFilter(filterId);\n    this.filters.delete(store);\n  }\n\n}\n/**\r\n * When active, this strategy filters a store's stateView to return\r\n * selected entities only.\r\n */\n\n\nclass EntityStoreFilterSelectionStrategy extends EntityStoreStrategy {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Store / filter ids map\r\n     */\n\n    this.filters = new Map();\n  }\n  /**\r\n   * Bind this strategy to a store and start filtering it\r\n   * @param store Entity store\r\n   */\n\n\n  bindStore(store) {\n    super.bindStore(store);\n\n    if (this.active === true) {\n      this.filterStore(store);\n    }\n  }\n  /**\r\n   * Unbind this strategy from a store and stop filtering it\r\n   * @param store Entity store\r\n   */\n\n\n  unbindStore(store) {\n    super.unbindStore(store);\n\n    if (this.active === true) {\n      this.unfilterStore(store);\n    }\n  }\n  /**\r\n   * Start filtering all stores\r\n   * @internal\r\n   */\n\n\n  doActivate() {\n    this.filterAll();\n  }\n  /**\r\n   * Stop filtering all stores\r\n   * @internal\r\n   */\n\n\n  doDeactivate() {\n    this.unfilterAll();\n  }\n  /**\r\n   * Filter all stores\r\n   */\n\n\n  filterAll() {\n    this.stores.forEach(store => this.filterStore(store));\n  }\n  /**\r\n   * Unfilter all stores\r\n   */\n\n\n  unfilterAll() {\n    this.stores.forEach(store => this.unfilterStore(store));\n  }\n  /**\r\n   * Filter a store and add it to the filters map\r\n   */\n\n\n  filterStore(store) {\n    if (this.filters.has(store)) {\n      return;\n    }\n\n    const filter = record => {\n      return record.state.selected === true;\n    };\n\n    this.filters.set(store, store.stateView.addFilter(filter));\n  }\n  /**\r\n   * Unfilter a store and delete it from the filters map\r\n   */\n\n\n  unfilterStore(store) {\n    const filterId = this.filters.get(store);\n\n    if (filterId === undefined) {\n      return;\n    }\n\n    store.stateView.removeFilter(filterId);\n    this.filters.delete(store);\n  }\n\n}\n\nfunction EntitySelectorComponent_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r0.emptyValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.emptyText);\n  }\n}\n\nfunction EntitySelectorComponent_mat_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", ctx_r1.multiSelectValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 2, ctx_r1.multiText$));\n  }\n}\n\nfunction EntitySelectorComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", record_r3.entity);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.titleAccessor(record_r3.entity), \" \");\n  }\n}\n\nlet EntitySelectorComponent = /*#__PURE__*/(() => {\n  class EntitySelectorComponent {\n    constructor(cdRef) {\n      this.cdRef = cdRef;\n      /**\r\n       * The selected entity\r\n       * @internal\r\n       */\n\n      this.selected$ = new BehaviorSubject(undefined);\n      /**\r\n       * The current multi select option text\r\n       * @internal\r\n       */\n\n      this.multiText$ = new BehaviorSubject(undefined);\n      this.multiSelectValue = {\n        id: 'IGO_MULTI_SELECT'\n      };\n      this.emptyValue = {\n        id: 'IGO_EMPTY_SELECT'\n      };\n      /**\r\n       * Title accessor\r\n       */\n\n      this.titleAccessor = getEntityTitle;\n      /**\r\n       * Text to display when nothing is selected\r\n       */\n\n      this.emptyText = undefined;\n      /**\r\n       * Wheter selecting many entities is allowed\r\n       */\n\n      this.multi = false;\n      /**\r\n       * Text to display for the select all option\r\n       */\n\n      this.multiAllText = 'All';\n      /**\r\n       * Text to display for the select none option\r\n       */\n\n      this.multiNoneText = 'None';\n      /**\r\n       * Wheter the selector is disabled or not\r\n       */\n\n      this.disabled = false;\n      /**\r\n       * Event emitted when the selection changes\r\n       */\n\n      this.selectedChange = new EventEmitter();\n    }\n    /**\r\n     * Create a store watcher and subscribe to the selected entity\r\n     * @internal\r\n     */\n\n\n    ngOnInit() {\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\n      this.selected$$ = this.store.stateView.manyBy$(record => record.state.selected === true).subscribe(records => {\n        const entities = records.map(record => record.entity);\n        this.onSelectFromStore(entities);\n      });\n    }\n    /**\r\n     * Unsubscribe to the selected entity and destroy the store watcher\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.watcher.destroy();\n      this.selected$$.unsubscribe();\n    }\n    /**\r\n     * On selection change, update the store's state and emit an event\r\n     * @internal\r\n     */\n\n\n    onSelectionChange(event) {\n      const values = event.value instanceof Array ? event.value : [event.value];\n      const multiSelect = values.find(_value => _value === this.multiSelectValue);\n      let entities = values.filter(_value => _value !== this.multiSelectValue);\n\n      if (multiSelect !== undefined) {\n        if (entities.length === this.store.count) {\n          entities = [];\n        } else if (entities.length < this.store.count) {\n          entities = this.store.all();\n        }\n      }\n\n      entities = entities.filter(entity => entity !== this.emptyValue);\n\n      if (entities.length === 0) {\n        this.store.state.updateAll({\n          selected: false\n        });\n      } else {\n        this.store.state.updateMany(entities, {\n          selected: true\n        }, true);\n      }\n\n      const value = this.multi ? entities : event.value;\n      this.selectedChange.emit({\n        selected: true,\n        value\n      });\n    }\n\n    onSelectFromStore(entities) {\n      if (this.multi === true) {\n        this.selected$.next(entities);\n      } else {\n        const entity = entities.length > 0 ? entities[0] : undefined;\n        this.selected$.next(entity);\n      }\n\n      this.updateMultiToggleWithEntities(entities);\n    }\n\n    updateMultiToggleWithEntities(entities) {\n      if (entities.length === this.store.count && this.multiText$.value !== this.multiNoneText) {\n        this.multiText$.next(this.multiNoneText);\n      } else if (entities.length < this.store.count && this.multiText$.value !== this.multiAllText) {\n        this.multiText$.next(this.multiAllText);\n      }\n    }\n\n  }\n\n  EntitySelectorComponent.ɵfac = function EntitySelectorComponent_Factory(t) {\n    return new (t || EntitySelectorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  EntitySelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EntitySelectorComponent,\n    selectors: [[\"igo-entity-selector\"]],\n    inputs: {\n      store: \"store\",\n      titleAccessor: \"titleAccessor\",\n      emptyText: \"emptyText\",\n      multi: \"multi\",\n      multiAllText: \"multiAllText\",\n      multiNoneText: \"multiNoneText\",\n      placeholder: \"placeholder\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\"\n    },\n    decls: 7,\n    vars: 11,\n    consts: [[1, \"igo-entity-selector\"], [3, \"disabled\", \"value\", \"multiple\", \"placeholder\", \"selectionChange\"], [3, \"value\", 4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [3, \"value\"]],\n    template: function EntitySelectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementStart(1, \"mat-select\", 1);\n        i0.ɵɵlistener(\"selectionChange\", function EntitySelectorComponent_Template_mat_select_selectionChange_1_listener($event) {\n          return ctx.onSelectionChange($event);\n        });\n        i0.ɵɵpipe(2, \"async\");\n        i0.ɵɵtemplate(3, EntitySelectorComponent_mat_option_3_Template, 2, 2, \"mat-option\", 2);\n        i0.ɵɵtemplate(4, EntitySelectorComponent_mat_option_4_Template, 3, 4, \"mat-option\", 2);\n        i0.ɵɵtemplate(5, EntitySelectorComponent_ng_template_5_Template, 2, 2, \"ng-template\", 3);\n        i0.ɵɵpipe(6, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"value\", i0.ɵɵpipeBind1(2, 7, ctx.selected$))(\"multiple\", ctx.multi)(\"placeholder\", ctx.placeholder);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.emptyText !== undefined && ctx.multi === false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.multi === true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(6, 9, ctx.store.stateView.all$()));\n      }\n    },\n    directives: [i1.MatFormField, i2.MatSelect, i1$1.NgIf, i1$1.NgForOf, i3.MatOption],\n    pipes: [i1$1.AsyncPipe],\n    styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}\"],\n    changeDetection: 0\n  });\n  return EntitySelectorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StopPropagationDirective = /*#__PURE__*/(() => {\n  class StopPropagationDirective {\n    onClick(event) {\n      event.stopPropagation();\n    }\n\n  }\n\n  StopPropagationDirective.ɵfac = function StopPropagationDirective_Factory(t) {\n    return new (t || StopPropagationDirective)();\n  };\n\n  StopPropagationDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: StopPropagationDirective,\n    selectors: [[\"\", \"igoStopPropagation\", \"\"]],\n    hostBindings: function StopPropagationDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function StopPropagationDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    }\n  });\n  return StopPropagationDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Directive that handles an entity table row click and selection.\r\n */\n\n\nlet EntityTableRowDirective = /*#__PURE__*/(() => {\n  class EntityTableRowDirective {\n    constructor(renderer, el) {\n      this.renderer = renderer;\n      this.el = el;\n      /**\r\n       * Whether a row supports selection\r\n       */\n\n      this.selection = false;\n      /**\r\n       * Whether clicking a row should select it (if selection is true)\r\n       */\n\n      this.selectOnClick = true;\n      /**\r\n       * Whether the selected row should be highlighted\r\n       */\n\n      this.highlightSelection = true;\n      this._selected = false;\n      /**\r\n       * Scroll behavior on selection\r\n       */\n\n      this.scrollBehavior = EntityTableScrollBehavior.Auto;\n      /**\r\n       * Event emitted when a row is selected\r\n       */\n\n      this.select = new EventEmitter();\n    }\n    /**\r\n     * Whether a row is selected\r\n     */\n\n\n    set selected(value) {\n      if (this.selection === false) {\n        return;\n      }\n\n      if (value === this._selected) {\n        return;\n      }\n\n      this.toggleSelected(value);\n      this.scroll();\n    }\n\n    get selected() {\n      return this._selected;\n    }\n    /**\r\n     * When a row is clicked, select it if it's supported\r\n     * @ignore\r\n     */\n\n\n    onClick() {\n      if (this.selection === false || this.selectOnClick === false) {\n        return;\n      }\n\n      this.toggleSelected(true);\n      this.select.emit(this);\n    }\n    /**\r\n     * Select a row and add or remove the selected class from it\r\n     * @param selected Whether the row should be selected\r\n     */\n\n\n    toggleSelected(selected) {\n      this._selected = selected;\n\n      if (selected === true) {\n        this.addCls(EntityTableRowDirective.selectedCls);\n\n        if (this.highlightSelection === true) {\n          this.addCls(EntityTableRowDirective.highlightedCls);\n        }\n      } else {\n        this.removeCls(EntityTableRowDirective.selectedCls);\n        this.removeCls(EntityTableRowDirective.highlightedCls);\n      }\n    }\n    /**\r\n     * Scroll to the selected row\r\n     */\n\n\n    scroll() {\n      if (this._selected === true) {\n        scrollIntoView(this.el.nativeElement, {\n          scrollMode: 'if-needed',\n          behavior: 'smooth',\n          block: 'end',\n          inline: 'nearest'\n        });\n      }\n    }\n    /**\r\n     * Add the selected CSS class\r\n     */\n\n\n    addCls(cls) {\n      this.renderer.addClass(this.el.nativeElement, cls);\n    }\n    /**\r\n     * Remove the selected CSS class\r\n     */\n\n\n    removeCls(cls) {\n      this.renderer.removeClass(this.el.nativeElement, cls);\n    }\n\n  }\n\n  /**\r\n   * Class added to a selected row\r\n   */\n  EntityTableRowDirective.selectedCls = 'igo-entity-table-row-selected';\n  /**\r\n   * Class added to a highlighted row\r\n   */\n\n  EntityTableRowDirective.highlightedCls = 'igo-entity-table-row-highlighted';\n\n  EntityTableRowDirective.ɵfac = function EntityTableRowDirective_Factory(t) {\n    return new (t || EntityTableRowDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  EntityTableRowDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: EntityTableRowDirective,\n    selectors: [[\"\", \"igoEntityTableRow\", \"\"]],\n    hostBindings: function EntityTableRowDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function EntityTableRowDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      selection: \"selection\",\n      selectOnClick: \"selectOnClick\",\n      highlightSelection: \"highlightSelection\",\n      selected: \"selected\",\n      scrollBehavior: \"scrollBehavior\"\n    },\n    outputs: {\n      select: \"select\"\n    }\n  });\n  return EntityTableRowDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet EntityTablePaginatorComponent = /*#__PURE__*/(() => {\n  class EntityTablePaginatorComponent {\n    constructor(languageService, mediaService) {\n      this.languageService = languageService;\n      this.mediaService = mediaService;\n      this.disabled = false;\n      this.hidePageSize = false;\n      this.pageIndex = 0;\n      this.pageSize = 50;\n      this.pageSizeOptions = [5, 10, 20, 50, 100, 200];\n      this.showFirstLastButtons = true;\n      this.paginationLabelTranslation$$ = [];\n      this.entitySortChange$ = new BehaviorSubject(false);\n      this.length = 0;\n      /**\r\n       * Paginator emitted.\r\n       */\n\n      this.paginatorChange = new EventEmitter();\n\n      this.rangeLabel = (page, pageSize, length) => {\n        const of = new BehaviorSubject('');\n        this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.of').subscribe(label => {\n          of.next(label);\n        }));\n\n        if (length === 0 || pageSize === 0) {\n          return `0 ${of.value} ${length}`;\n        }\n\n        length = Math.max(length, 0);\n        const startIndex = page * pageSize;\n        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n        return `${startIndex + 1} - ${endIndex} ${of.value} ${length}`;\n      };\n    }\n\n    ngOnChanges() {\n      this.unsubscribeAll();\n      this.count$$ = this.store.stateView.count$.subscribe(count => {\n        this.length = count;\n        this.emitPaginator();\n      });\n      this.entitySortChange$$ = this.entitySortChange$.subscribe(() => {\n        if (this.paginator) {\n          this.paginator.firstPage();\n        }\n      });\n      this.initPaginatorOptions();\n      this.translateLabels();\n    }\n\n    initPaginatorOptions() {\n      var _a, _b, _c, _d, _e, _f;\n\n      this.disabled = ((_a = this.paginatorOptions) === null || _a === void 0 ? void 0 : _a.disabled) || this.disabled;\n      this.pageIndex = ((_b = this.paginatorOptions) === null || _b === void 0 ? void 0 : _b.pageIndex) || this.pageIndex;\n      this.pageSize = ((_c = this.paginatorOptions) === null || _c === void 0 ? void 0 : _c.pageSize) || this.pageSize;\n      this.pageSizeOptions = ((_d = this.paginatorOptions) === null || _d === void 0 ? void 0 : _d.pageSizeOptions) || this.pageSizeOptions;\n\n      if (this.mediaService.isMobile()) {\n        this.showFirstLastButtons = false;\n        this.hidePageSize = true;\n      } else {\n        this.showFirstLastButtons = ((_e = this.paginatorOptions) === null || _e === void 0 ? void 0 : _e.showFirstLastButtons) || this.showFirstLastButtons;\n        this.hidePageSize = ((_f = this.paginatorOptions) === null || _f === void 0 ? void 0 : _f.hidePageSize) || this.hidePageSize;\n      }\n    }\n\n    translateLabels() {\n      this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.firstPageLabel').subscribe(label => {\n        this.paginator._intl.firstPageLabel = label;\n      }));\n      this.paginator._intl.getRangeLabel = this.rangeLabel;\n      this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.itemsPerPageLabel').subscribe(label => {\n        this.paginator._intl.itemsPerPageLabel = label;\n      }));\n      this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.lastPageLabel').subscribe(label => {\n        this.paginator._intl.lastPageLabel = label;\n      }));\n      this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.nextPageLabel').subscribe(label => {\n        this.paginator._intl.nextPageLabel = label;\n      }));\n      this.paginationLabelTranslation$$.push(this.languageService.translate.get('igo.common.paginator.previousPageLabel').subscribe(label => {\n        this.paginator._intl.previousPageLabel = label;\n      }));\n    }\n\n    unsubscribeAll() {\n      this.paginationLabelTranslation$$.map(sub => sub.unsubscribe());\n\n      if (this.count$$) {\n        this.count$$.unsubscribe();\n      }\n\n      if (this.entitySortChange$$) {\n        this.entitySortChange$$.unsubscribe();\n      }\n    }\n\n    ngOnDestroy() {\n      this.unsubscribeAll();\n    }\n\n    emitPaginator() {\n      this.paginatorChange.emit(this.paginator);\n    }\n\n  }\n\n  EntityTablePaginatorComponent.ɵfac = function EntityTablePaginatorComponent_Factory(t) {\n    return new (t || EntityTablePaginatorComponent)(i0.ɵɵdirectiveInject(i1$2.LanguageService), i0.ɵɵdirectiveInject(i1$2.MediaService));\n  };\n\n  EntityTablePaginatorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EntityTablePaginatorComponent,\n    selectors: [[\"igo-entity-table-paginator\"]],\n    viewQuery: function EntityTablePaginatorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n      }\n    },\n    inputs: {\n      entitySortChange$: \"entitySortChange$\",\n      store: \"store\",\n      paginatorOptions: \"paginatorOptions\"\n    },\n    outputs: {\n      page: \"page\",\n      paginatorChange: \"paginatorChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 7,\n    consts: [[3, \"disabled\", \"hidePageSize\", \"length\", \"pageIndex\", \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\", \"page\"]],\n    template: function EntityTablePaginatorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-paginator\", 0);\n        i0.ɵɵlistener(\"page\", function EntityTablePaginatorComponent_Template_mat_paginator_page_0_listener() {\n          return ctx.emitPaginator();\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"hidePageSize\", ctx.hidePageSize)(\"length\", ctx.length)(\"pageIndex\", ctx.pageIndex)(\"pageSize\", ctx.pageSize)(\"pageSizeOptions\", ctx.pageSizeOptions)(\"showFirstLastButtons\", ctx.showFirstLastButtons);\n      }\n    },\n    directives: [i2$1.MatPaginator],\n    styles: [\"[_nghost-%COMP%]{margin-top:-10px;padding-right:15px}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){[_nghost-%COMP%]{margin-top:0;padding-right:5px}}\"],\n    changeDetection: 0\n  });\n  return EntityTablePaginatorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SecureImagePipe = /*#__PURE__*/(() => {\n  class SecureImagePipe {\n    constructor(http) {\n      this.http = http;\n    }\n\n    transform(url) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'text/plain',\n        activityInterceptor: 'false'\n      });\n      return this.http.get(url, {\n        headers,\n        responseType: 'blob'\n      }).pipe(switchMap(blob => {\n        return new Observable(observer => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob);\n\n          reader.onloadend = () => {\n            observer.next(reader.result);\n            observer.complete();\n          };\n        });\n      }));\n    }\n\n  }\n\n  SecureImagePipe.ɵfac = function SecureImagePipe_Factory(t) {\n    return new (t || SecureImagePipe)(i0.ɵɵdirectiveInject(i1$3.HttpClient, 16));\n  };\n\n  SecureImagePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"secureImage\",\n    type: SecureImagePipe,\n    pure: true\n  });\n\n  __decorate([Cacheable({\n    maxCacheCount: 20\n  })], SecureImagePipe.prototype, \"transform\", null);\n\n  return SecureImagePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SanitizeHtmlPipe = /*#__PURE__*/(() => {\n  class SanitizeHtmlPipe {\n    constructor(_sanitizer) {\n      this._sanitizer = _sanitizer;\n    }\n\n    transform(v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n\n  }\n\n  SanitizeHtmlPipe.ɵfac = function SanitizeHtmlPipe_Factory(t) {\n    return new (t || SanitizeHtmlPipe)(i0.ɵɵdirectiveInject(i1$4.DomSanitizer, 16));\n  };\n\n  SanitizeHtmlPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"sanitizeHtml\",\n    type: SanitizeHtmlPipe,\n    pure: true\n  });\n  return SanitizeHtmlPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction EntityTableComponent_th_3_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 11);\n    i0.ɵɵlistener(\"change\", function EntityTableComponent_th_3_ng_container_1_ng_container_1_Template_mat_checkbox_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return ctx_r9.onToggleRows($event.checked);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const selectionState_r8 = ctx.ngIf;\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", selectionState_r8 === ctx_r7.entityTableSelectionState.All)(\"indeterminate\", selectionState_r8 === ctx_r7.entityTableSelectionState.Some);\n  }\n}\n\nfunction EntityTableComponent_th_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_th_3_ng_container_1_ng_container_1_Template, 2, 2, \"ng-container\", 10);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx_r6.selectionState$));\n  }\n}\n\nfunction EntityTableComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 9);\n    i0.ɵɵtemplate(1, EntityTableComponent_th_3_ng_container_1_Template, 3, 3, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.selectMany);\n  }\n}\n\nfunction EntityTableComponent_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 13);\n    i0.ɵɵlistener(\"mousedown\", function EntityTableComponent_td_4_Template_mat_checkbox_mousedown_1_listener($event) {\n      return $event.shiftKey ? $event.preventDefault() : null;\n    })(\"click\", function EntityTableComponent_td_4_Template_mat_checkbox_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const record_r11 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return $event.shiftKey ? ctx_r13.onShiftToggleRow(!ctx_r13.rowIsSelected(record_r11), record_r11, $event) : $event.stopPropagation();\n    })(\"change\", function EntityTableComponent_td_4_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const record_r11 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onToggleRow($event.checked, record_r11);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r11 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.rowIsSelected(record_r11));\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_1_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"matTooltip\", column_r16.tooltip ? column_r16.tooltip : undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r16.title, \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_1_th_1_Template, 2, 2, \"th\", 15);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_2_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"matTooltip\", column_r16.tooltip ? column_r16.tooltip : undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r16.title, \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_2_th_1_Template, 2, 2, \"th\", 17);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r31 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r32 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r32.getCellClass(record_r31, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r32.getValue(record_r31, column_r16), \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 26);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"secureImage\");\n  }\n\n  if (rf & 2) {\n    const record_r31 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r37 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"src\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind1(2, 3, ctx_r37.getValue(record_r31, column_r16))), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(2, 1, \"igo.common.entity-table.targetHtmlUrl\"), \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵelementStart(1, \"a\", 23);\n    i0.ɵɵlistener(\"click\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_Template_a_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_img_2_Template, 3, 5, \"img\", 24);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_ng_template_3_Template, 3, 3, \"ng-template\", null, 25, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r38 = i0.ɵɵreference(4);\n\n    const record_r31 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r34 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r34.getCellClass(record_r31, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r34.getValue(record_r31, column_r16), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r34.isImg(ctx_r34.getValue(record_r31, column_r16)))(\"ngIfElse\", _r38);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_td_1_Template, 2, 2, \"td\", 20);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_ng_template_2_Template, 5, 4, \"ng-template\", null, 21, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const record_r31 = ctx.$implicit;\n\n    const _r33 = i0.ɵɵreference(3);\n\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r30 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r30.isUrl(ctx_r30.getValue(record_r31, column_r16)))(\"ngIfElse\", _r33);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_ng_container_1_Template, 4, 2, \"ng-container\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"td\", 29);\n  }\n\n  if (rf & 2) {\n    const record_r47 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r48 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r48.getCellClass(record_r47, column_r16))(\"innerHTML\", ctx_r48.getValue(record_r47, column_r16), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 26);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"secureImage\");\n  }\n\n  if (rf & 2) {\n    const record_r47 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r53 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"src\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind1(2, 3, ctx_r53.getValue(record_r47, column_r16))), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(2, 1, \"igo.geo.targetHtmlUrl\"), \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵelementStart(1, \"a\", 23);\n    i0.ɵɵlistener(\"click\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_Template_a_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_img_2_Template, 3, 5, \"img\", 24);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_ng_template_3_Template, 3, 3, \"ng-template\", null, 25, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r54 = i0.ɵɵreference(4);\n\n    const record_r47 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r50 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r50.getCellClass(record_r47, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r50.getValue(record_r47, column_r16), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r50.isImg(ctx_r50.getValue(record_r47, column_r16)))(\"ngIfElse\", _r54);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_td_1_Template, 1, 2, \"td\", 27);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_ng_template_2_Template, 5, 4, \"ng-template\", null, 28, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const record_r47 = ctx.$implicit;\n\n    const _r49 = i0.ɵɵreference(3);\n\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r46 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r46.isUrl(ctx_r46.getValue(record_r47, column_r16)))(\"ngIfElse\", _r49);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_ng_container_1_Template, 4, 2, \"ng-container\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r79 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelement(1, \"mat-datepicker-toggle\", 44);\n    i0.ɵɵelementStart(2, \"input\", 45);\n    i0.ɵɵlistener(\"dateChange\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_div_1_Template_input_dateChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r79);\n      const record_r63 = i0.ɵɵnextContext(2).$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r77 = i0.ɵɵnextContext();\n      return ctx_r77.onDateChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"mat-datepicker\", null, 46);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r76 = i0.ɵɵreference(4);\n\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r67 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r76);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r67.getValue(record_r63, column_r16));\n    i0.ɵɵproperty(\"matDatepicker\", _r76)(\"formControlName\", column_r16.name);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r85 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 47);\n    i0.ɵɵlistener(\"focus\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_2_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r85);\n      const column_r16 = i0.ɵɵnextContext(5).$implicit;\n      return column_r16.onFocus($event);\n    })(\"keypress\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_2_Template_input_keypress_0_listener($event) {\n      i0.ɵɵrestoreView(_r85);\n      const column_r16 = i0.ɵɵnextContext(5).$implicit;\n      return column_r16.onChange($event);\n    })(\"blur\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_2_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r85);\n      const column_r16 = i0.ɵɵnextContext(5).$implicit;\n      return column_r16.onBlur($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = i0.ɵɵnextContext(5).$implicit;\n    i0.ɵɵproperty(\"formControlName\", column_r16.name);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r93 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 48);\n    i0.ɵɵlistener(\"input\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_3_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r93);\n      const record_r63 = i0.ɵɵnextContext(2).$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r91 = i0.ɵɵnextContext();\n      return ctx_r91.onValueChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r69 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"step\", column_r16.step);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r69.getValue(record_r63, column_r16));\n    i0.ɵɵpropertyInterpolate(\"readonly\", ctx_r69.getValidationAttributeValue(column_r16, \"readonly\"));\n    i0.ɵɵpropertyInterpolate(\"required\", ctx_r69.getValidationAttributeValue(column_r16, \"mandatory\"));\n    i0.ɵɵpropertyInterpolate(\"min\", ctx_r69.getValidationAttributeValue(column_r16, \"minValue\"));\n    i0.ɵɵpropertyInterpolate(\"max\", ctx_r69.getValidationAttributeValue(column_r16, \"maxValue\"));\n    i0.ɵɵproperty(\"formControlName\", column_r16.name);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r99 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 49);\n    i0.ɵɵlistener(\"input\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_4_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r99);\n      const record_r63 = i0.ɵɵnextContext(2).$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r97 = i0.ɵɵnextContext();\n      return ctx_r97.onValueChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r70 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r70.getValue(record_r63, column_r16));\n    i0.ɵɵpropertyInterpolate(\"readonly\", ctx_r70.getValidationAttributeValue(column_r16, \"readonly\"));\n    i0.ɵɵpropertyInterpolate(\"required\", ctx_r70.getValidationAttributeValue(column_r16, \"mandatory\"));\n    i0.ɵɵproperty(\"formControlName\", column_r16.name);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_checkbox_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r105 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 50);\n    i0.ɵɵlistener(\"change\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_checkbox_5_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r105);\n      const record_r63 = i0.ɵɵnextContext(2).$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r103 = i0.ɵɵnextContext();\n      return ctx_r103.onBooleanValueChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r71 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formControlName\", column_r16.name)(\"checked\", ctx_r71.getValue(record_r63, column_r16));\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_select_6_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 53);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r110 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r110.id)(\"disabled\", option_r110.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r110.value, \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_select_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r113 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-select\", 51);\n    i0.ɵɵlistener(\"selectionChange\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_select_6_Template_mat_select_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r113);\n      const record_r63 = i0.ɵɵnextContext(2).$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r111 = i0.ɵɵnextContext();\n      return ctx_r111.onSelectValueChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_select_6_mat_option_1_Template, 2, 3, \"mat-option\", 52);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r72 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"required\", ctx_r72.getValidationAttributeValue(column_r16, \"mandatory\"));\n    i0.ɵɵproperty(\"formControlName\", column_r16.name)(\"multiple\", column_r16.multiple)(\"value\", ctx_r72.getValue(record_r63, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", column_r16.domainValues);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 54);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r74 = i0.ɵɵreference(9);\n\n    const record_r63 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r73 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"required\", ctx_r73.getValidationAttributeValue(column_r16, \"mandatory\"));\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r73.getValue(record_r63, column_r16));\n    i0.ɵɵproperty(\"formControlName\", column_r16.name)(\"matAutocomplete\", _r74);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 55);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r119 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r119.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r119.value, \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r122 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 32);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_div_1_Template, 5, 4, \"div\", 33);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_2_Template, 1, 1, \"input\", 34);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_3_Template, 1, 7, \"input\", 35);\n    i0.ɵɵtemplate(4, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_4_Template, 1, 4, \"input\", 36);\n    i0.ɵɵtemplate(5, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_checkbox_5_Template, 1, 2, \"mat-checkbox\", 37);\n    i0.ɵɵtemplate(6, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_select_6_Template, 2, 5, \"mat-select\", 38);\n    i0.ɵɵtemplate(7, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_input_7_Template, 1, 4, \"input\", 39);\n    i0.ɵɵelementStart(8, \"mat-autocomplete\", 40, 41);\n    i0.ɵɵlistener(\"optionSelected\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_Template_mat_autocomplete_optionSelected_8_listener($event) {\n      i0.ɵɵrestoreView(_r122);\n      const record_r63 = i0.ɵɵnextContext().$implicit;\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      const ctx_r120 = i0.ɵɵnextContext();\n      return ctx_r120.onAutocompleteValueChange(column_r16.name, record_r63, $event);\n    });\n    i0.ɵɵtemplate(10, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_mat_option_10_Template, 2, 2, \"mat-option\", 42);\n    i0.ɵɵpipe(11, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r64 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r64.formGroup)(\"ngClass\", ctx_r64.getCellClass(record_r63, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"date\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"time\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"number\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !column_r16.type || column_r16.type === \"string\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"boolean\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"list\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.type === \"autocomplete\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 10, ctx_r64.filteredOptions));\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_td_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"td\", 29);\n    i0.ɵɵpipe(1, \"sanitizeHtml\");\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r126 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r126.getCellClass(record_r63, column_r16))(\"innerHTML\", i0.ɵɵpipeBind1(1, 2, ctx_r126.getValue(record_r63, column_r16)), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 26);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"secureImage\");\n  }\n\n  if (rf & 2) {\n    const record_r63 = i0.ɵɵnextContext(3).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r131 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"src\", i0.ɵɵpipeBind1(1, 1, i0.ɵɵpipeBind1(2, 3, ctx_r131.getValue(record_r63, column_r16))), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(2, 1, \"igo.geo.targetHtmlUrl\"), \" \");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵelementStart(1, \"a\", 23);\n    i0.ɵɵlistener(\"click\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_Template_a_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_img_2_Template, 3, 5, \"img\", 24);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_ng_template_3_Template, 3, 3, \"ng-template\", null, 25, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r132 = i0.ɵɵreference(4);\n\n    const record_r63 = i0.ɵɵnextContext(2).$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r128 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r128.getCellClass(record_r63, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"href\", ctx_r128.getValue(record_r63, column_r16), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r128.isImg(ctx_r128.getValue(record_r63, column_r16)))(\"ngIfElse\", _r132);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_td_0_Template, 2, 4, \"td\", 27);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_ng_template_1_Template, 5, 4, \"ng-template\", null, 56, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const _r127 = i0.ɵɵreference(2);\n\n    const record_r63 = i0.ɵɵnextContext().$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r66 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r66.isUrl(ctx_r66.getValue(record_r63, column_r16)))(\"ngIfElse\", _r127);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_td_1_Template, 12, 12, \"td\", 30);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_ng_template_2_Template, 3, 2, \"ng-template\", null, 31, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const record_r63 = ctx.$implicit;\n\n    const _r65 = i0.ɵɵreference(3);\n\n    const ctx_r62 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r62.isEdition(record_r63))(\"ngIfElse\", _r65);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_ng_container_1_Template, 4, 2, \"ng-container\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_4_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r145 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 22);\n    i0.ɵɵelementStart(1, \"mat-icon\", 58);\n    i0.ɵɵlistener(\"click\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_4_td_1_Template_mat_icon_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r145);\n      const column_r16 = i0.ɵɵnextContext(3).$implicit;\n      return column_r16.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r142 = ctx.$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r141 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r141.getCellClass(record_r142, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"svgIcon\", ctx_r141.getValue(record_r142, column_r16) || column_r16.icon);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_4_td_1_Template, 2, 2, \"td\", 57);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r156 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 62);\n    i0.ɵɵlistener(\"mousedown\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_1_Template_button_mousedown_0_listener() {\n      i0.ɵɵrestoreView(_r156);\n      const button_r150 = i0.ɵɵnextContext(2).$implicit;\n      const record_r148 = i0.ɵɵnextContext().$implicit;\n      const ctx_r154 = i0.ɵɵnextContext(4);\n      return ctx_r154.onButtonClick(button_r150.click, record_r148);\n    });\n    i0.ɵɵelement(1, \"mat-icon\", 63);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const button_r150 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"color\", button_r150.color)(\"disabled\", button_r150.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"svgIcon\", button_r150.icon);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r161 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 64);\n    i0.ɵɵlistener(\"mousedown\", function EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_2_Template_button_mousedown_0_listener() {\n      i0.ɵɵrestoreView(_r161);\n      const button_r150 = i0.ɵɵnextContext(2).$implicit;\n      const record_r148 = i0.ɵɵnextContext().$implicit;\n      const ctx_r159 = i0.ɵɵnextContext(4);\n      return ctx_r159.onButtonClick(button_r150.click, record_r148);\n    });\n    i0.ɵɵelement(1, \"mat-icon\", 63);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const button_r150 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"color\", button_r150.color)(\"disabled\", button_r150.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"svgIcon\", button_r150.icon);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_1_Template, 2, 3, \"button\", 60);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_button_2_Template, 2, 3, \"button\", 61);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const button_r150 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", button_r150.style === \"mat-icon-button\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", button_r150.style !== \"mat-icon-button\");\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_ng_container_1_Template, 3, 2, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const button_r150 = ctx.$implicit;\n    const record_r148 = i0.ɵɵnextContext().$implicit;\n    const ctx_r149 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r149.isEdition(record_r148) === button_r150.editMode);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 22);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_span_2_Template, 2, 1, \"span\", 59);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const record_r148 = ctx.$implicit;\n    const column_r16 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r147 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r147.getCellClass(record_r148, column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r147.getValue(record_r148, column_r16));\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_ng_container_1_Template, 3, 2, \"ng-container\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_3_ng_container_1_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_3_ng_container_2_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_ng_container_3_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(4, EntityTableComponent_ng_container_5_ng_container_3_ng_container_4_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(5, EntityTableComponent_ng_container_5_ng_container_3_ng_container_5_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const columnRenderer_r24 = ctx.ngIf;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", columnRenderer_r24 === ctx_r19.entityTableColumnRenderer.Default);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", columnRenderer_r24 === ctx_r19.entityTableColumnRenderer.HTML);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", columnRenderer_r24 === ctx_r19.entityTableColumnRenderer.UnsanitizedHTML);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", columnRenderer_r24 === ctx_r19.entityTableColumnRenderer.Icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", columnRenderer_r24 === ctx_r19.entityTableColumnRenderer.ButtonGroup);\n  }\n}\n\nfunction EntityTableComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 14);\n    i0.ɵɵtemplate(1, EntityTableComponent_ng_container_5_ng_container_1_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(2, EntityTableComponent_ng_container_5_ng_container_2_Template, 2, 0, \"ng-container\", 10);\n    i0.ɵɵtemplate(3, EntityTableComponent_ng_container_5_ng_container_3_Template, 6, 5, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matColumnDef\", column_r16.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.columnIsSortable(column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.columnIsSortable(column_r16));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.getColumnRenderer(column_r16));\n  }\n}\n\nfunction EntityTableComponent_tr_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 65);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.getHeaderClass());\n  }\n}\n\nfunction EntityTableComponent_tr_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r169 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 66);\n    i0.ɵɵlistener(\"select\", function EntityTableComponent_tr_7_Template_tr_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r169);\n      const record_r167 = restoredCtx.$implicit;\n      const ctx_r168 = i0.ɵɵnextContext();\n      return ctx_r168.onRowSelect(record_r167);\n    })(\"click\", function EntityTableComponent_tr_7_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r169);\n      const record_r167 = restoredCtx.$implicit;\n      const ctx_r170 = i0.ɵɵnextContext();\n      return ctx_r170.onRowClick(record_r167);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const record_r167 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"scrollBehavior\", ctx_r4.scrollBehavior)(\"ngClass\", ctx_r4.getRowClass(record_r167))(\"selection\", ctx_r4.selection)(\"selected\", ctx_r4.rowIsSelected(record_r167));\n  }\n}\n\nfunction EntityTableComponent_igo_entity_table_paginator_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r172 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-entity-table-paginator\", 67);\n    i0.ɵɵlistener(\"paginatorChange\", function EntityTableComponent_igo_entity_table_paginator_8_Template_igo_entity_table_paginator_paginatorChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r172);\n      const ctx_r171 = i0.ɵɵnextContext();\n      return ctx_r171.paginatorChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"store\", ctx_r5.store)(\"paginatorOptions\", ctx_r5.paginatorOptions)(\"entitySortChange$\", ctx_r5.entitySortChange$);\n  }\n}\n\nconst moment = moment_;\nlet EntityTableComponent = /*#__PURE__*/(() => {\n  class EntityTableComponent {\n    constructor(cdRef, formBuilder, _focusMonitor, _elementRef, ngControl, _parentForm, _controlName, _defaultErrorStateMatcher, dateAdapter) {\n      this.cdRef = cdRef;\n      this.formBuilder = formBuilder;\n      this._focusMonitor = _focusMonitor;\n      this._elementRef = _elementRef;\n      this.ngControl = ngControl;\n      this._parentForm = _parentForm;\n      this._controlName = _controlName;\n      this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n      this.dateAdapter = dateAdapter;\n      this.entitySortChange$ = new BehaviorSubject(false);\n      this.formGroup = new FormGroup({});\n      /**\r\n       * Reference to the column renderer types\r\n       * @internal\r\n       */\n\n      this.entityTableColumnRenderer = EntityTableColumnRenderer;\n      /**\r\n       * Reference to the selection's state\r\n       * @internal\r\n       */\n\n      this.entityTableSelectionState = EntityTableSelectionState;\n      /**\r\n       * Observable of the selection,s state\r\n       * @internal\r\n       */\n\n      this.selectionState$ = new BehaviorSubject(undefined);\n      /**\r\n       * Scroll behavior on selection\r\n       */\n\n      this.scrollBehavior = EntityTableScrollBehavior.Auto;\n      /**\r\n       * Whether nulls should be first when sorting\r\n       */\n\n      this.sortNullsFirst = false;\n      /**\r\n       * Show the table paginator or not. False by default.\r\n       */\n\n      this.withPaginator = false;\n      /**\r\n       * Event emitted when an entity (row) is clicked\r\n       */\n\n      this.entityClick = new EventEmitter();\n      /**\r\n       * Event emitted when an entity (row) is selected\r\n       */\n\n      this.entitySelectChange = new EventEmitter();\n      /**\r\n       * Event emitted when the table sort is changed.\r\n       */\n\n      this.entitySortChange = new EventEmitter(undefined);\n      /**\r\n       * Data source consumable by the underlying material table\r\n       * @internal\r\n       */\n\n      this.dataSource = new MatTableDataSource();\n      this.dateAdapter.setLocale('fr-CA');\n    }\n    /**\r\n     * Table paginator\r\n     */\n\n\n    set paginator(value) {\n      this._paginator = value;\n      this.dataSource.paginator = value;\n    }\n\n    get paginator() {\n      return this._paginator;\n    }\n    /**\r\n     * Table headers\r\n     * @internal\r\n     */\n\n\n    get headers() {\n      let columns = this.template.columns.filter(column => column.visible !== false).map(column => column.name);\n\n      if (this.selectionCheckbox === true) {\n        columns = ['selectionCheckbox'].concat(columns);\n      }\n\n      return columns;\n    }\n    /**\r\n     * Whether selection is supported\r\n     * @internal\r\n     */\n\n\n    get selection() {\n      return this.template.selection || false;\n    }\n    /**\r\n     * Whether a selection checkbox should be displayed\r\n     * @internal\r\n     */\n\n\n    get selectionCheckbox() {\n      return this.template.selectionCheckbox || false;\n    }\n    /**\r\n     * Whether selection many entities should eb supported\r\n     * @internal\r\n     */\n\n\n    get selectMany() {\n      return this.template.selectMany || false;\n    }\n    /**\r\n     * Whether selection many entities should eb supported\r\n     * @internal\r\n     */\n\n\n    get fixedHeader() {\n      return this.template.fixedHeader === undefined ? true : this.template.fixedHeader;\n    }\n    /**\r\n     * Track the selection state to properly display the selection checkboxes\r\n     * @internal\r\n     */\n\n\n    ngOnInit() {\n      this.handleDatasource();\n      this.dataSource.paginator = this.paginator;\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    ngOnChanges(changes) {\n      const store = changes.store;\n\n      if (store && store.currentValue !== store.previousValue) {\n        this.handleDatasource();\n      }\n    }\n    /**\r\n     * Process text or number value change (edition)\r\n     */\n\n\n    onValueChange(column, record, event) {\n      const key = this.getColumnKeyWithoutPropertiesTag(column);\n      record.entity.properties[key] = event.target.value;\n    }\n    /**\r\n     * Process boolean value change (edition)\r\n     */\n\n\n    onBooleanValueChange(column, record, event) {\n      const key = this.getColumnKeyWithoutPropertiesTag(column);\n      record.entity.properties[key] = event.checked;\n    }\n    /**\r\n     * Process select value change (edition)\r\n     */\n\n\n    onSelectValueChange(column, record, event) {\n      const key = this.getColumnKeyWithoutPropertiesTag(column);\n      record.entity.properties[key] = event.value;\n    }\n    /**\r\n     * Process autocomplete value change (edition)\r\n     */\n\n\n    onAutocompleteValueChange(column, record, event) {\n      this.formGroup.controls[column].setValue(event.option.viewValue);\n      const key = this.getColumnKeyWithoutPropertiesTag(column);\n      record.entity.properties[key] = event.option.value;\n    }\n    /**\r\n     * Process date value change (edition)\r\n     */\n\n\n    onDateChange(column, record, event) {\n      const format = \"YYYY-MM-DD\";\n      const value = moment(event.value).format(format);\n      const key = this.getColumnKeyWithoutPropertiesTag(column);\n      record.entity.properties[key] = value;\n    }\n    /**\r\n     * Enable edition mode for one row\r\n     * More than one row can be edited at the same time\r\n     */\n\n\n    enableEdit(record) {\n      const item = record.entity.properties || record.entity;\n      this.template.columns.forEach(column => {\n        var _a;\n\n        column.title = ((_a = column.validation) === null || _a === void 0 ? void 0 : _a.mandatory) && !column.title.includes('*') ? column.title + ' *' : column.title;\n        const key = this.getColumnKeyWithoutPropertiesTag(column.name);\n\n        if (column.type === 'boolean') {\n          if (!item[key] || item[key] === null) {\n            item[key] = false;\n          } else if (typeof item[key] === 'string') {\n            item[key] = JSON.parse(item[key].toLowerCase());\n          }\n\n          this.formGroup.setControl(column.name, this.formBuilder.control(item[key]));\n        } else if (column.type === 'list') {\n          if (column.multiple) {\n            this.formGroup.setControl(column.name, this.formBuilder.control([item[key]]));\n          } else {\n            this.formGroup.setControl(column.name, this.formBuilder.control(item[key]));\n            typeof item[key] === 'string' ? this.formGroup.controls[column.name].setValue(parseInt(item[key])) : this.formGroup.controls[column.name].setValue(item[key]);\n          }\n        } else if (column.type === 'autocomplete') {\n          this.formGroup.setControl(column.name, this.formBuilder.control(item[key]));\n          this.filteredOptions = this.formGroup.controls[column.name].valueChanges.pipe(map(value => {\n            if (value.length) {\n              return column.domainValues.filter(option => {\n                const filterNormalized = value ? value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : '';\n                const featureNameNormalized = option.value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                return featureNameNormalized.includes(filterNormalized);\n              });\n            }\n          }));\n          let formControlValue = item[key];\n          column.domainValues.forEach(option => {\n            if (typeof formControlValue === 'string' && /^\\d+$/.test(formControlValue)) {\n              formControlValue = parseInt(formControlValue);\n            }\n\n            if (option.value === formControlValue || option.id === formControlValue) {\n              formControlValue = option.value;\n            }\n          });\n          this.formGroup.controls[column.name].setValue(formControlValue);\n        } else if (column.type === 'date') {\n          if (column.visible) {\n            if (item[key]) {\n              let date = moment(item[key]);\n              item[key] = date.utc().format('YYYY-MM-DD');\n              this.formGroup.setControl(column.name, this.formBuilder.control(item[key]));\n            } else {\n              const newKey = this.getColumnKeyWithoutPropertiesTag(column.name);\n              record.entity.properties[newKey] = null;\n              this.formGroup.setControl(column.name, this.formBuilder.control(null));\n            }\n          }\n        } else {\n          this.formGroup.setControl(column.name, this.formBuilder.control(item[key]));\n        }\n\n        if (this.formGroup.controls[column.name] && this.getValidationAttributeValue(column, 'readonly')) {\n          this.formGroup.controls[column.name].disable();\n        }\n      });\n    }\n\n    handleDatasource() {\n      this.unsubscribeStore();\n      this.selection$$ = this.store.stateView.manyBy$(record => record.state.selected === true).subscribe(records => {\n        const firstSelected = records[0];\n        const firstSelectedStateviewPosition = this.store.stateView.all().indexOf(firstSelected);\n        const pageMax = this.paginator ? this.paginator.pageSize * (this.paginator.pageIndex + 1) : 0;\n        const pageMin = this.paginator ? pageMax - this.paginator.pageSize : 0;\n\n        if (this.paginator && (firstSelectedStateviewPosition < pageMin || firstSelectedStateviewPosition >= pageMax)) {\n          const pageToReach = Math.floor(firstSelectedStateviewPosition / this.paginator.pageSize);\n          this.dataSource.paginator.pageIndex = pageToReach;\n        }\n\n        this.selectionState$.next(this.computeSelectionState(records));\n      });\n      this.dataSource$$ = this.store.stateView.all$().subscribe(all => {\n        if (all[0]) {\n          this.enableEdit(all[0]);\n        }\n\n        this.dataSource.data = all;\n      });\n    }\n    /**\r\n     * Unbind the store watcher\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.unsubscribeStore();\n    }\n\n    unsubscribeStore() {\n      if (this.selection$$) {\n        this.selection$$.unsubscribe();\n      }\n\n      if (this.dataSource$$) {\n        this.dataSource$$.unsubscribe();\n      }\n    }\n    /**\r\n     * Trackby function\r\n     * @param record Record\r\n     * @param index Record index\r\n     * @internal\r\n     */\n\n\n    getTrackByFunction() {\n      return (index, record) => {\n        return record.ref;\n      };\n    }\n    /**\r\n     * Trigger a refresh of thre table. This can be useful when\r\n     * the data source doesn't emit a new value but for some reason\r\n     * the records need an update.\r\n     * @internal\r\n     */\n\n\n    refresh() {\n      this.cdRef.detectChanges();\n    }\n\n    paginatorChange(event) {\n      this.paginator = event;\n    }\n    /**\r\n     * On sort, sort the store\r\n     * @param event Sort event\r\n     * @internal\r\n     */\n\n\n    onSort(event) {\n      const direction = event.direction;\n      const column = this.template.columns.find(c => c.name === event.active);\n\n      if (direction === 'asc' || direction === 'desc') {\n        this.store.stateView.sort({\n          valueAccessor: record => this.getValue(record, column),\n          direction,\n          nullsFirst: this.sortNullsFirst\n        });\n        this.entitySortChange.emit({\n          column,\n          direction\n        });\n        this.entitySortChange$.next(true);\n      } else {\n        this.store.stateView.sort(undefined);\n      }\n    }\n    /**\r\n     * When an entity is clicked, emit an event\r\n     * @param record Record\r\n     * @internal\r\n     */\n\n\n    onRowClick(record) {\n      this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n      this.entityClick.emit(record.entity);\n    }\n    /**\r\n     * When an entity is selected, select it in the store and emit an event. Even if\r\n     * \"many\" is set to true, this method always select a single, exclusive row. Selecting\r\n     * multiple rows should be achieved by using the checkboxes.\r\n     * @param record Record\r\n     * @internal\r\n     */\n\n\n    onRowSelect(record) {\n      if (this.selection === false) {\n        return;\n      }\n\n      const entity = record.entity;\n      this.store.state.update(entity, {\n        selected: true\n      }, true);\n      this.entitySelectChange.emit({\n        added: [entity]\n      });\n    }\n    /**\r\n     * Select or unselect all rows at once. On select, emit an event.\r\n     * @param toggle Select or unselect\r\n     * @internal\r\n     */\n\n\n    onToggleRows(toggle) {\n      if (this.selection === false) {\n        return;\n      }\n\n      this.store.state.updateAll({\n        selected: toggle\n      });\n\n      if (toggle === true) {\n        const entities = this.store.stateView.all().map(record => record.entity);\n        this.entitySelectChange.emit({\n          added: [entities]\n        });\n      }\n    }\n    /**\r\n     * When an entity is toggled, select or unselect it in the store. On select,\r\n     * emit an event.\r\n     * @param toggle Select or unselect\r\n     * @param record Record\r\n     * @internal\r\n     */\n\n\n    onToggleRow(toggle, record) {\n      if (this.selection === false) {\n        return;\n      }\n\n      const entity = record.entity;\n      const exclusive = toggle === true && !this.selectMany;\n      this.store.state.update(entity, {\n        selected: toggle\n      }, exclusive);\n\n      if (toggle === true) {\n        this.entitySelectChange.emit({\n          added: [entity]\n        });\n      }\n\n      this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n    }\n    /**\r\n     * When an entity is toggled, select or unselect it in the store. On select,\r\n     * emit an event.\r\n     * @param toggle Select or unselect\r\n     * @param record Record\r\n     * @internal\r\n     */\n\n\n    onShiftToggleRow(toggle, record, event) {\n      if (this.selection === false) {\n        return;\n      }\n\n      if (this.selectMany === false || this.lastRecordCheckedKey === undefined) {\n        this.onToggleRow(toggle, record);\n        return;\n      } // This is a workaround mat checkbox wrong behavior\n      // when the shift key is held.\n      // See https://github.com/angular/components/issues/6232\n\n\n      const range = window.document.createRange();\n      range.selectNode(event.target);\n      window.getSelection().removeAllRanges();\n      window.getSelection().addRange(range);\n      event.stopImmediatePropagation();\n      const records = this.store.stateView.all();\n      const recordIndex = records.indexOf(record);\n      const lastRecordChecked = this.store.stateView.get(this.lastRecordCheckedKey);\n      const lastRecordIndex = records.indexOf(lastRecordChecked);\n      const indexes = [recordIndex, lastRecordIndex];\n      const selectRecords = records.slice(Math.min(...indexes), Math.max(...indexes) + 1);\n      const entities = selectRecords.map(_record => _record.entity);\n      this.store.state.updateMany(entities, {\n        selected: toggle\n      });\n\n      if (toggle === true) {\n        this.entitySelectChange.emit({\n          added: entities\n        });\n      }\n\n      this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n    }\n    /**\r\n     * Compute the selection state\r\n     * @returns Whether all, some or no rows are selected\r\n     * @internal\r\n     */\n\n\n    computeSelectionState(selectedRecords) {\n      const states = EntityTableSelectionState;\n      const selectionCount = selectedRecords.length;\n      return selectionCount === 0 ? states.None : selectionCount === this.store.stateView.count ? states.All : states.Some;\n    }\n    /**\r\n     * Whether a column is sortable\r\n     * @param column Column\r\n     * @returns True if a column is sortable\r\n     * @internal\r\n     */\n\n\n    columnIsSortable(column) {\n      let sortable = column.sort;\n\n      if (sortable === undefined) {\n        sortable = this.template.sort === undefined ? false : this.template.sort;\n      }\n\n      return sortable;\n    }\n    /**\r\n     * Whether a row is should be selected based on the underlying entity state\r\n     * @param record Record\r\n     * @returns True if a row should be selected\r\n     * @internal\r\n     */\n\n\n    rowIsSelected(record) {\n      const state = record.state;\n      return state.selected ? state.selected : false;\n    }\n\n    isImg(value) {\n      if (this.isUrl(value)) {\n        return ['jpg', 'png', 'gif'].indexOf(value.split('.').pop().toLowerCase()) !== -1;\n      } else {\n        return false;\n      }\n    }\n\n    isUrl(value) {\n      if (typeof value === 'string') {\n        return value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://';\n      } else {\n        return false;\n      }\n    }\n    /**\r\n     * Method to access an entity's values\r\n     * @param record Record\r\n     * @param column Column\r\n     * @returns Any value\r\n     * @internal\r\n     */\n\n\n    getValue(record, column) {\n      const entity = record.entity;\n      let value;\n\n      if (column.valueAccessor !== undefined) {\n        return column.valueAccessor(entity, record);\n      }\n\n      if (this.template.valueAccessor !== undefined) {\n        return this.template.valueAccessor(entity, column.name, record);\n      }\n\n      value = this.store.getProperty(entity, column.name);\n\n      if (column.type === 'boolean') {\n        if (value === undefined || value === null || value === '') {\n          value = false;\n        } else if (typeof value !== 'boolean' && value !== undefined) {\n          if (typeof value === 'number') {\n            value = Boolean(value);\n          } else {\n            value = JSON.parse(value.toLowerCase());\n          }\n        }\n\n        if (!this.isEdition(record)) {\n          value = value ? '&#10003;' : ''; // check mark\n        }\n      } else if (column.type === 'list' && value && column.domainValues) {\n        if (column.multiple) {\n          let list_id;\n          typeof value === 'string' ? list_id = value.match(/[\\w.-]+/g).map(Number) : list_id = value;\n          let list_option = [];\n          column.domainValues.forEach(option => {\n            if (list_id.includes(option.id)) {\n              if (record.edition) {\n                list_option.push(option.id);\n              } else {\n                list_option.push(option.value);\n              }\n            }\n          });\n          this.isEdition(record) ? value = list_id : value = list_option;\n        } else {\n          column.domainValues.forEach(option => {\n            if (typeof value === 'string' && /^\\d+$/.test(value)) {\n              value = parseInt(value);\n            }\n\n            if (option.value === value || option.id === value) {\n              this.isEdition(record) ? value = option.id : value = option.value;\n            }\n          });\n        }\n      } else if (column.type === 'autocomplete' && value && column.domainValues) {\n        column.domainValues.forEach(option => {\n          if (typeof value === 'string' && /^\\d+$/.test(value)) {\n            value = parseInt(value);\n          }\n\n          if (option.value === value || option.id === value) {\n            value = option.value;\n          }\n        });\n      } else if (column.type === 'date') {\n        if (this.isEdition(record)) {\n          if (value) {\n            let date = moment(value);\n            value = date.format();\n            this.formGroup.controls[column.name].setValue(value);\n          }\n        } else if (!this.isEdition(record) && value === null) {\n          value = \"\";\n        }\n      }\n\n      if (value === undefined) {\n        value = '';\n      }\n\n      return value;\n    }\n    /**\r\n     * Method to access an entity's validation values\r\n     * @param column Column\r\n     * @param validationType string\r\n     * @returns Any value (false if no validation or not the one concerned)\r\n     * @internal\r\n     */\n\n\n    getValidationAttributeValue(column, validationType) {\n      if (column.validation !== undefined && column.validation[validationType] !== undefined) {\n        return column.validation[validationType];\n      } else {\n        return false;\n      }\n    }\n\n    isEdition(record) {\n      return record.entity.edition ? true : false;\n    }\n    /**\r\n     * Return the type of renderer of a column\r\n     * @param column Column\r\n     * @returns Renderer type\r\n     * @internal\r\n     */\n\n\n    getColumnRenderer(column) {\n      if (column.renderer !== undefined) {\n        return column.renderer;\n      }\n\n      return EntityTableColumnRenderer.Default;\n    }\n    /**\r\n     * Return the table ngClass\r\n     * @returns ngClass\r\n     * @internal\r\n     */\n\n\n    getTableClass() {\n      return {\n        'igo-entity-table-with-selection': this.selection\n      };\n    }\n    /**\r\n     * Return a header ngClass\r\n     * @returns ngClass\r\n     * @internal\r\n     */\n\n\n    getHeaderClass() {\n      const func = this.template.headerClassFunc;\n\n      if (func instanceof Function) {\n        return func();\n      }\n\n      return {};\n    }\n    /**\r\n     * Return a row ngClass\r\n     * @param record Record\r\n     * @returns ngClass\r\n     * @internal\r\n     */\n\n\n    getRowClass(record) {\n      const entity = record.entity;\n      const func = this.template.rowClassFunc;\n\n      if (func instanceof Function) {\n        return func(entity, record);\n      }\n\n      return {};\n    }\n    /**\r\n     * Return a row ngClass\r\n     * @param record Record\r\n     * @param column Column\r\n     * @returns ngClass\r\n     * @internal\r\n     */\n\n\n    getCellClass(record, column) {\n      const entity = record.entity;\n      const cls = {};\n      const tableFunc = this.template.cellClassFunc;\n\n      if (tableFunc instanceof Function) {\n        Object.assign(cls, tableFunc(entity, column, record));\n      }\n\n      const columnFunc = column.cellClassFunc;\n\n      if (columnFunc instanceof Function) {\n        Object.assign(cls, columnFunc(entity, record));\n      }\n\n      return cls;\n    }\n    /**\r\n     * When a button is clicked\r\n     * @param func Function\r\n     * @param record Record\r\n     * @internal\r\n     */\n\n\n    onButtonClick(clickFunc, record) {\n      this.enableEdit(record);\n\n      if (typeof clickFunc === 'function') {\n        clickFunc(record.entity, record);\n      }\n    }\n    /**\r\n     * Retrieve column name without his \"properties\" tag (useful for edition workspace properties)\r\n     */\n\n\n    getColumnKeyWithoutPropertiesTag(column) {\n      if (column.includes('properties.')) {\n        return column.split('.')[1];\n      }\n\n      return column;\n    }\n\n  }\n\n  EntityTableComponent.ɵfac = function EntityTableComponent_Factory(t) {\n    return new (t || EntityTableComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$5.FormBuilder), i0.ɵɵdirectiveInject(i2$2.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$5.NgControl, 10), i0.ɵɵdirectiveInject(i1$5.NgForm, 8), i0.ɵɵdirectiveInject(i1$5.FormControlName, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(i3.DateAdapter));\n  };\n\n  EntityTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EntityTableComponent,\n    selectors: [[\"igo-entity-table\"]],\n    inputs: {\n      store: \"store\",\n      paginator: \"paginator\",\n      template: \"template\",\n      scrollBehavior: \"scrollBehavior\",\n      sortNullsFirst: \"sortNullsFirst\",\n      withPaginator: \"withPaginator\",\n      paginatorOptions: \"paginatorOptions\"\n    },\n    outputs: {\n      entityClick: \"entityClick\",\n      entitySelectChange: \"entitySelectChange\",\n      entitySortChange: \"entitySortChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: EntityTableComponent\n    }]), i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 8,\n    consts: [[1, \"table-container\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"ngClass\", \"dataSource\", \"trackBy\", \"matSortChange\"], [\"matColumnDef\", \"selectionCheckbox\", 1, \"mat-cell-checkbox\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"mat-header-row\", \"\", 3, \"ngClass\", 4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"], [\"mat-row\", \"\", \"igoEntityTableRow\", \"\", 3, \"scrollBehavior\", \"ngClass\", \"selection\", \"selected\", \"select\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [3, \"store\", \"paginatorOptions\", \"entitySortChange$\", \"paginatorChange\", 4, \"ngIf\"], [\"mat-header-cell\", \"\"], [4, \"ngIf\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-cell\", \"\"], [3, \"checked\", \"mousedown\", \"click\", \"change\"], [3, \"matColumnDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 3, \"matTooltip\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 3, \"matTooltip\"], [\"mat-header-cell\", \"\", 3, \"matTooltip\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", 3, \"matTooltip\"], [4, \"matCellDef\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text\", 3, \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [\"isAnUrlDefault\", \"\"], [\"mat-cell\", \"\", 1, \"mat-cell-text\", 3, \"ngClass\"], [\"target\", \"_blank\", \"rel\", \"noopener noreferrer\", 3, \"href\", \"click\"], [\"width\", \"50\", \"heigth\", \"auto\", 3, \"src\", 4, \"ngIf\", \"ngIfElse\"], [\"notImg\", \"\"], [\"width\", \"50\", \"heigth\", \"auto\", 3, \"src\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text\", 3, \"ngClass\", \"innerHTML\", 4, \"ngIf\", \"ngIfElse\"], [\"isAnUrlHTML\", \"\"], [\"mat-cell\", \"\", 1, \"mat-cell-text\", 3, \"ngClass\", \"innerHTML\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text edition\", 3, \"formGroup\", \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [\"isUnsanitizedHTML\", \"\"], [\"mat-cell\", \"\", 1, \"mat-cell-text\", \"edition\", 3, \"formGroup\", \"ngClass\"], [\"class\", \"date-picker\", 4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"time\", \"step\", \"900\", 3, \"formControlName\", \"focus\", \"keypress\", \"blur\", 4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"number\", \"class\", \"class_number_edition\", 3, \"formControlName\", \"step\", \"value\", \"readonly\", \"required\", \"min\", \"max\", \"input\", 4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"formControlName\", \"value\", \"readonly\", \"required\", \"input\", 4, \"ngIf\"], [3, \"formControlName\", \"checked\", \"change\", 4, \"ngIf\"], [3, \"required\", \"formControlName\", \"multiple\", \"value\", \"selectionChange\", 4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"formControlName\", \"matAutocomplete\", \"required\", \"value\", 4, \"ngIf\"], [\"panelWidth\", \"430px\", 3, \"optionSelected\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"date-picker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"matInput\", \"\", 3, \"matDatepicker\", \"formControlName\", \"value\", \"dateChange\"], [\"picker\", \"\"], [\"matInput\", \"\", \"type\", \"time\", \"step\", \"900\", 3, \"formControlName\", \"focus\", \"keypress\", \"blur\"], [\"matInput\", \"\", \"type\", \"number\", 1, \"class_number_edition\", 3, \"formControlName\", \"step\", \"value\", \"readonly\", \"required\", \"min\", \"max\", \"input\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"formControlName\", \"value\", \"readonly\", \"required\", \"input\"], [3, \"formControlName\", \"checked\", \"change\"], [3, \"required\", \"formControlName\", \"multiple\", \"value\", \"selectionChange\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"disabled\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"formControlName\", \"matAutocomplete\", \"required\", \"value\"], [3, \"value\"], [\"isAnUrlUnsanitizedHTML\", \"\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text\", 3, \"ngClass\", 4, \"matCellDef\"], [3, \"svgIcon\", \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"igoStopPropagation\", \"\", \"mat-icon-button\", \"\", 3, \"color\", \"disabled\", \"mousedown\", 4, \"ngIf\"], [\"igoStopPropagation\", \"\", \"mat-mini-fab\", \"\", 3, \"color\", \"disabled\", \"mousedown\", 4, \"ngIf\"], [\"igoStopPropagation\", \"\", \"mat-icon-button\", \"\", 3, \"color\", \"disabled\", \"mousedown\"], [3, \"svgIcon\"], [\"igoStopPropagation\", \"\", \"mat-mini-fab\", \"\", 3, \"color\", \"disabled\", \"mousedown\"], [\"mat-header-row\", \"\", 3, \"ngClass\"], [\"mat-row\", \"\", \"igoEntityTableRow\", \"\", 3, \"scrollBehavior\", \"ngClass\", \"selection\", \"selected\", \"select\", \"click\"], [3, \"store\", \"paginatorOptions\", \"entitySortChange$\", \"paginatorChange\"]],\n    template: function EntityTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"table\", 1);\n        i0.ɵɵlistener(\"matSortChange\", function EntityTableComponent_Template_table_matSortChange_1_listener($event) {\n          return ctx.onSort($event);\n        });\n        i0.ɵɵelementContainerStart(2, 2);\n        i0.ɵɵtemplate(3, EntityTableComponent_th_3_Template, 2, 1, \"th\", 3);\n        i0.ɵɵtemplate(4, EntityTableComponent_td_4_Template, 2, 1, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(5, EntityTableComponent_ng_container_5_Template, 4, 4, \"ng-container\", 5);\n        i0.ɵɵtemplate(6, EntityTableComponent_tr_6_Template, 1, 1, \"tr\", 6);\n        i0.ɵɵtemplate(7, EntityTableComponent_tr_7_Template, 1, 4, \"tr\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, EntityTableComponent_igo_entity_table_paginator_8_Template, 1, 3, \"igo-entity-table-paginator\", 8);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.getTableClass())(\"dataSource\", ctx.dataSource)(\"trackBy\", ctx.getTrackByFunction());\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.template.columns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.headers)(\"matHeaderRowDefSticky\", ctx.fixedHeader);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.headers);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.withPaginator);\n      }\n    },\n    directives: [i4.MatTable, i5.MatSort, i1$1.NgClass, i4.MatColumnDef, i4.MatHeaderCellDef, i4.MatCellDef, i1$1.NgForOf, i4.MatHeaderRowDef, i4.MatRowDef, i1$1.NgIf, i4.MatHeaderCell, i7.MatCheckbox, i4.MatCell, i5.MatSortHeader, i6.MatTooltip, i1$5.NgControlStatusGroup, i1$5.FormGroupDirective, i9.MatAutocomplete, i10.MatDatepickerToggle, i1.MatSuffix, i2$3.MatInput, i10.MatDatepickerInput, i1$5.DefaultValueAccessor, i1$5.NgControlStatus, i1$5.FormControlName, i10.MatDatepicker, i1$5.NumberValueAccessor, i1$5.MinValidator, i1$5.MaxValidator, i1$5.RequiredValidator, i2.MatSelect, i3.MatOption, i9.MatAutocompleteTrigger, i5$1.MatIcon, i4$1.MatButton, StopPropagationDirective, i4.MatHeaderRow, i4.MatRow, EntityTableRowDirective, EntityTablePaginatorComponent],\n    pipes: [i1$1.AsyncPipe, SecureImagePipe, i6$1.TranslatePipe, SanitizeHtmlPipe],\n    styles: [\"[_nghost-%COMP%]{width:100%;height:100%;display:block}.table-compact[_nghost-%COMP%]   tr.mat-header-row[_ngcontent-%COMP%], .table-compact[_nghost-%COMP%]     .mat-checkbox .mat-checkbox-ripple{height:36px}.table-compact[_nghost-%COMP%]   tr.mat-row[_ngcontent-%COMP%], .table-compact[_nghost-%COMP%]     .mat-checkbox .mat-checkbox-ripple{height:28px}.table-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;overflow:auto;flex:1 1 auto}.mat-cell-text[_ngcontent-%COMP%]{overflow:hidden;word-wrap:break-word}th.mat-header-cell[_ngcontent-%COMP%], td.mat-cell[_ngcontent-%COMP%], td.mat-footer-cell[_ngcontent-%COMP%]{padding:0 3px}entity-table[_ngcontent-%COMP%]   table.igo-entity-table-with-selection[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{-o-box-shadow:2px 0px 2px 0px #dddddd;box-shadow:2px 0 2px #ddd;cursor:pointer}table[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:7px}.class_boolean[_ngcontent-%COMP%], .class_icon[_ngcontent-%COMP%], .class_number[_ngcontent-%COMP%]{text-align:center;padding-right:35px!important}.class_sting[_ngcontent-%COMP%], .class_text[_ngcontent-%COMP%], .class_number_edition[_ngcontent-%COMP%]{text-align:left}td.edition[_ngcontent-%COMP%]{background:rgba(166,166,166,.2)}input[_ngcontent-%COMP%]{border-bottom:1px solid darkgrey}\"],\n    changeDetection: 0\n  });\n  return EntityTableComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ActionbarMode = /*#__PURE__*/(() => {\n  (function (ActionbarMode) {\n    ActionbarMode[\"Dock\"] = \"dock\";\n    ActionbarMode[\"Overlay\"] = \"overlay\";\n    ActionbarMode[\"Context\"] = \"context\";\n  })(ActionbarMode || (ActionbarMode = {}));\n\n  return ActionbarMode;\n})();\n\nfunction ActionbarItemComponent_mat_list_item_0_button_4_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-icon\", 7);\n    i0.ɵɵpipe(1, \"async\");\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵpropertyInterpolate(\"svgIcon\", i0.ɵɵpipeBind1(1, 1, ctx_r4.icon$));\n  }\n}\n\nfunction ActionbarItemComponent_mat_list_item_0_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵtemplate(2, ActionbarItemComponent_mat_list_item_0_button_4_mat_icon_2_Template, 2, 3, \"mat-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r2.color)(\"disabled\", i0.ɵɵpipeBind1(1, 3, ctx_r2.disabled$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.withIcon);\n  }\n}\n\nfunction ActionbarItemComponent_mat_list_item_0_h4_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r3.title));\n  }\n}\n\nfunction ActionbarItemComponent_mat_list_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-list-item\", 2);\n    i0.ɵɵlistener(\"click\", function ActionbarItemComponent_mat_list_item_0_Template_mat_list_item_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onClick();\n    });\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵtemplate(4, ActionbarItemComponent_mat_list_item_0_button_4_Template, 3, 5, \"button\", 3);\n    i0.ɵɵtemplate(5, ActionbarItemComponent_mat_list_item_0_h4_5_Template, 3, 3, \"h4\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r0.withTooltip ? i0.ɵɵpipeBind1(1, 4, i0.ɵɵpipeBind1(2, 6, ctx_r0.tooltip$) || ctx_r0.title) : \"\")(\"ngClass\", i0.ɵɵpipeBind1(3, 8, ctx_r0.ngClass$));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.withIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.withTitle);\n  }\n}\n\nfunction ActionbarItemComponent_mat_list_item_1_mat_checkbox_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 11);\n    i0.ɵɵlistener(\"change\", function ActionbarItemComponent_mat_list_item_1_mat_checkbox_4_Template_mat_checkbox_change_0_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.action.handler();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"checked\", i0.ɵɵpipeBind1(1, 2, ctx_r7.checkCondition$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 4, ctx_r7.title), \" \");\n  }\n}\n\nfunction ActionbarItemComponent_mat_list_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", 9);\n    i0.ɵɵpipe(1, \"translate\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵtemplate(4, ActionbarItemComponent_mat_list_item_1_mat_checkbox_4_Template, 4, 6, \"mat-checkbox\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r1.withTooltip ? i0.ɵɵpipeBind1(1, 3, i0.ɵɵpipeBind1(2, 5, ctx_r1.tooltip$) || ctx_r1.title) : \"\")(\"ngClass\", i0.ɵɵpipeBind1(3, 7, ctx_r1.ngClass$));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.withTitle);\n  }\n}\n/**\r\n * An action button\r\n */\n\n\nlet ActionbarItemComponent = /*#__PURE__*/(() => {\n  class ActionbarItemComponent {\n    constructor() {\n      this.disabled$ = new BehaviorSubject(false);\n      this.checkCondition$ = new BehaviorSubject(undefined);\n      this.icon$ = new BehaviorSubject(undefined);\n      this.tooltip$ = new BehaviorSubject(undefined);\n      this.noDisplay$ = new BehaviorSubject(false);\n      this.ngClass$ = new BehaviorSubject({});\n      /**\r\n       * Color\r\n       */\n\n      this.color = 'default';\n      /**\r\n       * Whether the action title is displayed\r\n       */\n\n      this.withTitle = true;\n      /**\r\n       * Whether the action icon is displayed\r\n       */\n\n      this.withIcon = true;\n      /**\r\n       * Whether a tooltip should be shown\r\n       */\n\n      this.withTooltip = true;\n      /**\r\n       * Event emitted when the action button is clicked\r\n       */\n\n      this.trigger = new EventEmitter();\n    }\n    /**\r\n     * Whether the action is disabled\r\n     */\n\n\n    set disabled(value) {\n      this.disabled$.next(value);\n    }\n\n    get disabled() {\n      return this.disabled$.value;\n    }\n    /**\r\n     * Whether the action is display or not\r\n     */\n\n\n    set noDisplay(value) {\n      this.noDisplay$.next(value);\n    }\n\n    get noDisplay() {\n      return this.noDisplay$.value;\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    get title() {\n      return this.action.title;\n    }\n\n    ngOnInit() {\n      const args = this.action.args || [];\n\n      if (this.action.ngClass !== undefined) {\n        this.ngClass$$ = this.action.ngClass(...args).subscribe(ngClass => this.updateNgClass(ngClass));\n      }\n\n      if (isObservable(this.action.icon)) {\n        this.icon$$ = this.action.icon.subscribe(icon => this.updateIcon(icon));\n      } else {\n        this.updateIcon(this.action.icon);\n      }\n\n      if (isObservable(this.action.checkCondition)) {\n        this.checkCondition$$ = this.action.checkCondition.subscribe(checkCondition => this.updateCheckCondition(checkCondition));\n      } else {\n        this.updateCheckCondition(this.action.checkCondition);\n      }\n\n      if (isObservable(this.action.tooltip)) {\n        this.tooltip$$ = this.action.tooltip.subscribe(tooltip => this.updateTooltip(tooltip));\n      } else {\n        this.updateTooltip(this.action.tooltip);\n      }\n\n      if (this.action.availability !== undefined) {\n        this.availability$$ = this.action.availability(...args).subscribe(available => this.disabled = !available);\n      }\n\n      this.disabled$$ = this.disabled$.subscribe(disabled => this.updateNgClass({\n        'igo-actionbar-item-disabled': disabled\n      }));\n\n      if (this.action.display !== undefined) {\n        this.display$$ = this.action.display(...args).subscribe(display => this.noDisplay = !display);\n      }\n\n      this.noDisplay$$ = this.noDisplay$.subscribe(noDisplay => this.updateNgClass({\n        'igo-actionbar-item-no-display': noDisplay\n      }));\n    }\n\n    ngOnDestroy() {\n      if (this.ngClass$$ !== undefined) {\n        this.ngClass$$.unsubscribe();\n        this.ngClass$$ = undefined;\n      }\n\n      if (this.availability$$ !== undefined) {\n        this.availability$$.unsubscribe();\n        this.availability$$ = undefined;\n      }\n\n      if (this.display$$ !== undefined) {\n        this.display$$.unsubscribe();\n        this.display$$ = undefined;\n      }\n\n      if (this.checkCondition$$ !== undefined) {\n        this.checkCondition$$.unsubscribe();\n        this.checkCondition$$ = undefined;\n      }\n\n      if (this.icon$$ !== undefined) {\n        this.icon$$.unsubscribe();\n        this.icon$$ = undefined;\n      }\n\n      if (this.tooltip$$ !== undefined) {\n        this.tooltip$$.unsubscribe();\n        this.tooltip$$ = undefined;\n      }\n\n      this.disabled$$.unsubscribe();\n      this.noDisplay$$.unsubscribe();\n    }\n    /**\r\n     * When the action button is clicked, emit the 'trigger' event but don't\r\n     * invoke the action handler. This is handled by the parent component.\r\n     * @internal\r\n     */\n\n\n    onClick() {\n      if (this.disabled === true) {\n        return;\n      }\n\n      this.trigger.emit(this.action);\n    }\n\n    updateNgClass(ngClass) {\n      this.ngClass$.next(Object.assign({}, this.ngClass$.value, ngClass));\n    }\n\n    updateTooltip(tooltip) {\n      this.tooltip$.next(tooltip);\n    }\n\n    updateCheckCondition(checkCondition) {\n      this.checkCondition$.next(checkCondition);\n    }\n\n    updateIcon(icon) {\n      this.icon$.next(icon);\n    }\n\n  }\n\n  ActionbarItemComponent.ɵfac = function ActionbarItemComponent_Factory(t) {\n    return new (t || ActionbarItemComponent)();\n  };\n\n  ActionbarItemComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActionbarItemComponent,\n    selectors: [[\"igo-actionbar-item\"]],\n    inputs: {\n      action: \"action\",\n      color: \"color\",\n      withTitle: \"withTitle\",\n      withIcon: \"withIcon\",\n      withTooltip: \"withTooltip\",\n      disabled: \"disabled\",\n      noDisplay: \"noDisplay\"\n    },\n    outputs: {\n      trigger: \"trigger\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"matTooltipClass\", \"actionbarItemTooltip\", \"matTooltipShowDelay\", \"500\", 3, \"matTooltip\", \"ngClass\", \"click\", 4, \"ngIf\"], [\"class\", \"item-checkbox\", \"matTooltipClass\", \"actionbarItemTooltip\", \"matTooltipShowDelay\", \"500\", 3, \"matTooltip\", \"ngClass\", 4, \"ngIf\"], [\"matTooltipClass\", \"actionbarItemTooltip\", \"matTooltipShowDelay\", \"500\", 3, \"matTooltip\", \"ngClass\", \"click\"], [\"mat-list-avatar\", \"\", \"mat-icon-button\", \"\", 3, \"color\", \"disabled\", 4, \"ngIf\"], [\"matLine\", \"\", 4, \"ngIf\"], [\"mat-list-avatar\", \"\", \"mat-icon-button\", \"\", 3, \"color\", \"disabled\"], [3, \"svgIcon\", 4, \"ngIf\"], [3, \"svgIcon\"], [\"matLine\", \"\"], [\"matTooltipClass\", \"actionbarItemTooltip\", \"matTooltipShowDelay\", \"500\", 1, \"item-checkbox\", 3, \"matTooltip\", \"ngClass\"], [3, \"checked\", \"change\", 4, \"ngIf\"], [3, \"checked\", \"change\"]],\n    template: function ActionbarItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ActionbarItemComponent_mat_list_item_0_Template, 6, 10, \"mat-list-item\", 0);\n        i0.ɵɵtemplate(1, ActionbarItemComponent_mat_list_item_1_Template, 5, 9, \"mat-list-item\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.action.checkbox);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.action.checkbox);\n      }\n    },\n    directives: [i1$1.NgIf, i1$6.MatListItem, i6.MatTooltip, i1$1.NgClass, i4$1.MatButton, i1$6.MatListAvatarCssMatStyler, i5$1.MatIcon, i3.MatLine, i7.MatCheckbox],\n    pipes: [i6$1.TranslatePipe, i1$1.AsyncPipe],\n    styles: [\"mat-list-item.igo-actionbar-item-disabled[_ngcontent-%COMP%]{color:#00000042;cursor:default!important}mat-list-item.igo-actionbar-item-no-display[_ngcontent-%COMP%]{display:none}mat-checkbox[_ngcontent-%COMP%]{padding:12px}.item-checkbox[_ngcontent-%COMP%]{height:56px}.item-checkbox[_ngcontent-%COMP%]     .mat-checkbox-label{margin-left:20px}\"],\n    changeDetection: 0\n  });\n  return ActionbarItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction ActionbarComponent_mat_list_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ActionbarComponent_mat_list_0_div_1_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.scrollUp();\n    });\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"mat-icon\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", i0.ɵɵpipeBind1(2, 1, \"igo.common.actionbar.scrollUp\"));\n  }\n}\n\nfunction ActionbarComponent_mat_list_0_igo_actionbar_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-actionbar-item\", 8);\n    i0.ɵɵlistener(\"trigger\", function ActionbarComponent_mat_list_0_igo_actionbar_item_2_Template_igo_actionbar_item_trigger_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.onTriggerAction(ctx_r9.toggleCollapseAction);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"withTitle\", false)(\"withIcon\", true)(\"color\", ctx_r4.color)(\"disabled\", ctx_r4.store.view.empty)(\"action\", ctx_r4.toggleCollapseAction);\n  }\n}\n\nfunction ActionbarComponent_mat_list_0_3_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-actionbar-item\", 11);\n    i0.ɵɵlistener(\"trigger\", function ActionbarComponent_mat_list_0_3_ng_template_0_Template_igo_actionbar_item_trigger_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const action_r13 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(3);\n      return ctx_r14.onTriggerAction(action_r13);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const action_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"withTitle\", ctx_r12.withTitle)(\"withIcon\", ctx_r12.withIcon)(\"withTooltip\", ctx_r12.withTooltip)(\"color\", ctx_r12.color)(\"disabled\", ctx_r12.store.state.get(action_r13).disabled)(\"action\", action_r13);\n  }\n}\n\nfunction ActionbarComponent_mat_list_0_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ActionbarComponent_mat_list_0_3_ng_template_0_Template, 1, 6, \"ng-template\", 9, 10, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵpipe(2, \"async\");\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r5.store.view.all$()));\n  }\n}\n\nfunction ActionbarComponent_mat_list_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ActionbarComponent_mat_list_0_div_4_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.scrollDown();\n    });\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"mat-icon\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", i0.ɵɵpipeBind1(2, 1, \"igo.common.actionbar.scrollDown\"));\n  }\n}\n\nfunction ActionbarComponent_mat_list_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\");\n    i0.ɵɵtemplate(1, ActionbarComponent_mat_list_0_div_1_Template, 4, 3, \"div\", 2);\n    i0.ɵɵtemplate(2, ActionbarComponent_mat_list_0_igo_actionbar_item_2_Template, 1, 5, \"igo-actionbar-item\", 3);\n    i0.ɵɵtemplate(3, ActionbarComponent_mat_list_0_3_Template, 3, 3, undefined, 0);\n    i0.ɵɵtemplate(4, ActionbarComponent_mat_list_0_div_4_Template, 4, 3, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.heightCondition && ctx_r0.positionConditionTop && ctx_r0.isDesktop);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.withToggleButton);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.collapsed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.heightCondition && ctx_r0.positionConditionLow && ctx_r0.isDesktop);\n  }\n}\n\nfunction ActionbarComponent_div_1_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-actionbar-item\", 18);\n    i0.ɵɵlistener(\"trigger\", function ActionbarComponent_div_1_ng_template_7_Template_igo_actionbar_item_trigger_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const action_r20 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.onTriggerAction(action_r20);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const action_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"withTitle\", ctx_r19.withTitle)(\"withIcon\", ctx_r19.withIcon)(\"color\", ctx_r19.color)(\"action\", action_r20);\n  }\n}\n\nfunction ActionbarComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 14);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelement(3, \"mat-icon\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-menu\", 16, 17);\n    i0.ɵɵelementStart(6, \"mat-list\");\n    i0.ɵɵtemplate(7, ActionbarComponent_div_1_ng_template_7_Template, 1, 4, \"ng-template\", 9);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r18 = i0.ɵɵreference(5);\n\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matTooltip\", i0.ɵɵpipeBind1(2, 10, \"igo.common.actionbar.icon\"))(\"matMenuTriggerFor\", _r18)(\"disabled\", ctx_r1.store.view.empty)(\"color\", ctx_r1.iconColor);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r1.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.overlayClass);\n    i0.ɵɵproperty(\"xPosition\", ctx_r1.xPosition)(\"yPosition\", ctx_r1.yPosition);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 12, ctx_r1.store.view.all$()));\n  }\n}\n\nfunction ActionbarComponent_mat_card_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-actionbar-item\", 18);\n    i0.ɵɵlistener(\"trigger\", function ActionbarComponent_mat_card_2_ng_template_2_Template_igo_actionbar_item_trigger_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const action_r24 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.onTriggerAction(action_r24);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(1, \"br\");\n  }\n\n  if (rf & 2) {\n    const action_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"withTitle\", ctx_r23.withTitle)(\"withIcon\", ctx_r23.withIcon)(\"color\", ctx_r23.color)(\"action\", action_r24);\n  }\n}\n\nfunction ActionbarComponent_mat_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 19);\n    i0.ɵɵelementStart(1, \"mat-list\");\n    i0.ɵɵtemplate(2, ActionbarComponent_mat_card_2_ng_template_2_Template, 2, 4, \"ng-template\", 9);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 1, ctx_r2.store.view.all$()));\n  }\n}\n/**\r\n * A list of action buttons.\r\n * This component can be displayed in one of two way: 'dock' or 'overlay'\r\n */\n\n\nlet ActionbarComponent = /*#__PURE__*/(() => {\n  class ActionbarComponent {\n    constructor(overlay, elRef, cdRef, mediaService) {\n      this.overlay = overlay;\n      this.elRef = elRef;\n      this.cdRef = cdRef;\n      this.mediaService = mediaService;\n      /**\r\n       * Reference to the ActionbarMode enum for use in the template\r\n       * @internal\r\n       */\n\n      this.actionbarMode = ActionbarMode;\n      /**\r\n       * Whether the actionbar is collapsed (Dock mode)\r\n       * @internal\r\n       */\n\n      this.collapsed = false;\n      /**\r\n       * Toggle collapse action (Dock)\r\n       * @internal\r\n       */\n\n      this.toggleCollapseAction = {\n        id: 'actionbar_toggle',\n        icon: 'dots-vertical',\n        handler: () => {\n          this.collapsed = !this.collapsed;\n        }\n      };\n      /**\r\n       * Height Condition for scroll button\r\n       */\n\n      this.heightCondition$ = new BehaviorSubject(false);\n      /**\r\n       * Position Condition for top scroll button\r\n       */\n\n      this.positionConditionTop$ = new BehaviorSubject(true);\n      /**\r\n       * Position Condition for low scroll button\r\n       */\n\n      this.positionConditionLow$ = new BehaviorSubject(true);\n      /**\r\n       * Actionbar mode\r\n       */\n\n      this.mode = ActionbarMode.Dock;\n      /**\r\n       * Whether a toggle button should be displayed (Dock mode)\r\n       */\n\n      this.withToggleButton = false;\n      /**\r\n       * Whether a the actionbar should display buttons horizontally\r\n       */\n\n      this.horizontal = false;\n      /**\r\n       * Color\r\n       */\n\n      this.color = 'default';\n      /**\r\n       * Color of the button if action mode === overlay\r\n       */\n\n      this.iconColor = 'default';\n      /**\r\n       * Whether action titles are displayed\r\n       */\n\n      this.withTitle = true;\n      /**\r\n       * Whether action tooltips are displayed\r\n       */\n\n      this.withTooltip = true;\n      /**\r\n       * Whether action titles are displayed (condition for scroll button)\r\n       */\n\n      this.scrollActive = true;\n      /**\r\n       * Whether action icons are displayed\r\n       */\n\n      this.withIcon = true;\n      /**\r\n       * Which icon want to be shown\r\n       */\n\n      this.icon = 'dots-horizontal';\n      /**\r\n       * Overlay X position\r\n       */\n\n      this.xPosition = 'before';\n      /**\r\n       * Overlay Y position\r\n       */\n\n      this.yPosition = 'above';\n      this._overlayClass = '';\n    }\n    /**\r\n     * Class to add to the actionbar overlay\r\n     */\n\n\n    set overlayClass(value) {\n      this._overlayClass = value;\n    }\n\n    get overlayClass() {\n      return [this._overlayClass, 'igo-actionbar-overlay'].join(' ');\n    }\n    /**\r\n     * @ignore\r\n     */\n\n\n    get withTitleClass() {\n      return this.withTitle;\n    }\n    /**\r\n     * @ignore\r\n     */\n\n\n    get withIconClass() {\n      return this.withIcon;\n    }\n    /**\r\n     * @ignore\r\n     */\n\n\n    get horizontalClass() {\n      return this.horizontal;\n    }\n\n    get heightCondition() {\n      const el = this.elRef.nativeElement;\n\n      if (this.scrollActive === false) {\n        if (el.clientHeight < el.scrollHeight) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    get positionConditionTop() {\n      if (this.elRef.nativeElement.scrollTop === 0) {\n        return false;\n      }\n\n      return true;\n    }\n\n    get positionConditionLow() {\n      const el = this.elRef.nativeElement;\n\n      if (el.scrollTop >= el.scrollHeight - el.clientHeight) {\n        return false;\n      }\n\n      return true;\n    }\n\n    get isDesktop() {\n      return this.mediaService.getMedia() === Media.Desktop;\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    ngOnChanges(changes) {\n      const store = changes.store;\n\n      if (store && store.currentValue !== store.previousValue) {\n        if (this.watcher !== undefined) {\n          this.watcher.destroy();\n        }\n\n        this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\n      }\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.watcher.destroy();\n    }\n    /**\r\n     * Invoke the action handler\r\n     * @internal\r\n     */\n\n\n    onTriggerAction(action) {\n      const args = action.args || [];\n      action.handler(...args);\n    }\n\n    scrollDown() {\n      this.elRef.nativeElement.scrollBy(0, 52);\n    }\n\n    scrollUp() {\n      this.elRef.nativeElement.scrollBy(0, -52);\n    }\n\n  }\n\n  ActionbarComponent.ɵfac = function ActionbarComponent_Factory(t) {\n    return new (t || ActionbarComponent)(i0.ɵɵdirectiveInject(i1$7.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$2.MediaService));\n  };\n\n  ActionbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActionbarComponent,\n    selectors: [[\"igo-actionbar\"]],\n    hostVars: 6,\n    hostBindings: function ActionbarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"with-title\", ctx.withTitleClass)(\"with-icon\", ctx.withIconClass)(\"horizontal\", ctx.horizontalClass);\n      }\n    },\n    inputs: {\n      store: \"store\",\n      mode: \"mode\",\n      withToggleButton: \"withToggleButton\",\n      horizontal: \"horizontal\",\n      color: \"color\",\n      iconColor: \"iconColor\",\n      withTitle: \"withTitle\",\n      withTooltip: \"withTooltip\",\n      scrollActive: \"scrollActive\",\n      withIcon: \"withIcon\",\n      icon: \"icon\",\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlayClass: \"overlayClass\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"class\", \"context-menu-card mat-elevation-z4\", 4, \"ngIf\"], [\"id\", \"topChevron\", 4, \"ngIf\"], [\"color\", \"accent\", 3, \"withTitle\", \"withIcon\", \"color\", \"disabled\", \"action\", \"trigger\", 4, \"ngIf\"], [\"id\", \"lowChevron\", 4, \"ngIf\"], [\"id\", \"topChevron\"], [\"mat-icon-button\", \"\", \"tooltip-position\", \"below\", \"matTooltipShowDelay\", \"500\", 3, \"matTooltip\", \"click\"], [\"svgIcon\", \"chevron-up\"], [\"color\", \"accent\", 3, \"withTitle\", \"withIcon\", \"color\", \"disabled\", \"action\", \"trigger\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [\"buttonContent\", \"\"], [\"color\", \"accent\", 3, \"withTitle\", \"withIcon\", \"withTooltip\", \"color\", \"disabled\", \"action\", \"trigger\"], [\"id\", \"lowChevron\"], [\"svgIcon\", \"chevron-down\"], [\"mat-icon-button\", \"\", \"tooltip-position\", \"below\", \"matTooltipShowDelay\", \"500\", 1, \"buttonOverlay\", 3, \"matTooltip\", \"matMenuTriggerFor\", \"disabled\", \"color\"], [3, \"svgIcon\"], [\"overlapTrigger\", \"true\", 1, \"igo-compact-menu\", \"igo-no-min-width-menu\", 3, \"xPosition\", \"yPosition\"], [\"actionbarMenu\", \"matMenu\"], [\"color\", \"accent\", 3, \"withTitle\", \"withIcon\", \"color\", \"action\", \"trigger\"], [1, \"context-menu-card\", \"mat-elevation-z4\"]],\n    template: function ActionbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ActionbarComponent_mat_list_0_Template, 5, 4, \"mat-list\", 0);\n        i0.ɵɵtemplate(1, ActionbarComponent_div_1_Template, 9, 14, \"div\", 0);\n        i0.ɵɵtemplate(2, ActionbarComponent_mat_card_2_Template, 4, 3, \"mat-card\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.mode === ctx.actionbarMode.Dock);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.mode === ctx.actionbarMode.Overlay);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.mode === ctx.actionbarMode.Context);\n      }\n    },\n    directives: [i1$1.NgIf, i1$6.MatList, i4$1.MatButton, i6.MatTooltip, i5$1.MatIcon, ActionbarItemComponent, i1$1.NgForOf, i9$1.MatMenuTrigger, i9$1.MatMenu, i10$1.MatCard],\n    pipes: [i6$1.TranslatePipe, i1$1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;height:100%;overflow:auto;position:relative}button[_ngcontent-%COMP%]{margin:4px}.buttonOverlay[_ngcontent-%COMP%]{margin:0}mat-list[_ngcontent-%COMP%]{padding-top:0}.horizontal[_nghost-%COMP%]{max-width:100%;overflow:unset}.horizontal[_nghost-%COMP%]   mat-list[_ngcontent-%COMP%]{width:auto;white-space:nowrap}.horizontal[_nghost-%COMP%]   igo-actionbar-item[_ngcontent-%COMP%]{display:inline-block}[_nghost-%COMP%]     .mat-list .mat-list-item .mat-list-text>*{white-space:normal;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;max-height:36px;line-height:18px;-webkit-box-orient:vertical;-webkit-line-clamp:2}[_nghost-%COMP%]     .mat-list-base .mat-list-item.mat-list-item-with-avatar{height:46px}[_nghost-%COMP%]     .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content{display:-webkit-flex;height:46px;padding:3px}[_nghost-%COMP%]     .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content>mat-icon{padding:8px}igo-actionbar-item[_ngcontent-%COMP%]     mat-list-item [mat-list-avatar]{height:auto;width:40px}igo-actionbar-item[_ngcontent-%COMP%]     mat-list-item:hover{cursor:pointer}.context-menu-card[_ngcontent-%COMP%]{padding:8px 3px;margin:10px}#topChevron[_ngcontent-%COMP%]{position:sticky;top:0;background-color:#fff;z-index:3}@media all and (-ms-high-contrast: none),(-ms-high-contrast: active){#topChevron[_ngcontent-%COMP%]{position:fixed;top:unset}}@supports (-ms-accelerator: true){#topChevron[_ngcontent-%COMP%]{position:fixed;top:unset}}#lowChevron[_ngcontent-%COMP%]{position:fixed;position:sticky;bottom:0;background-color:#fff;z-index:3}\"],\n    changeDetection: 0\n  });\n  return ActionbarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoActionbarModule = /*#__PURE__*/(() => {\n  class IgoActionbarModule {}\n\n  IgoActionbarModule.ɵfac = function IgoActionbarModule_Factory(t) {\n    return new (t || IgoActionbarModule)();\n  };\n\n  IgoActionbarModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoActionbarModule\n  });\n  IgoActionbarModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IgoLanguageModule, MatButtonModule, MatIconModule, MatTooltipModule, MatMenuModule, MatListModule, MatCardModule, MatCheckboxModule]]\n  });\n  return IgoActionbarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoActionbarModule, {\n    declarations: [ActionbarComponent, ActionbarItemComponent],\n    imports: [CommonModule, IgoLanguageModule, MatButtonModule, MatIconModule, MatTooltipModule, MatMenuModule, MatListModule, MatCardModule, MatCheckboxModule],\n    exports: [ActionbarComponent]\n  });\n})();\n\nlet IgoActionModule = /*#__PURE__*/(() => {\n  class IgoActionModule {}\n\n  IgoActionModule.ɵfac = function IgoActionModule_Factory(t) {\n    return new (t || IgoActionModule)();\n  };\n\n  IgoActionModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoActionModule\n  });\n  IgoActionModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[CommonModule, IgoActionbarModule], IgoActionbarModule]\n  });\n  return IgoActionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoActionModule, {\n    imports: [CommonModule, IgoActionbarModule],\n    exports: [IgoActionbarModule]\n  });\n})();\n\nconst _c0$b = function (a0) {\n  return {\n    \"igo-backdrop-shown\": a0\n  };\n};\n\nlet BackdropComponent = /*#__PURE__*/(() => {\n  class BackdropComponent {\n    constructor() {}\n\n    get shown() {\n      return this._shown;\n    }\n\n    set shown(value) {\n      this._shown = value;\n    }\n\n  }\n\n  BackdropComponent.ɵfac = function BackdropComponent_Factory(t) {\n    return new (t || BackdropComponent)();\n  };\n\n  BackdropComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BackdropComponent,\n    selectors: [[\"igo-backdrop\"]],\n    inputs: {\n      shown: \"shown\"\n    },\n    decls: 1,\n    vars: 3,\n    consts: [[3, \"ngClass\"]],\n    template: function BackdropComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0$b, ctx.shown));\n      }\n    },\n    directives: [i1$1.NgClass],\n    styles: [\"[_nghost-%COMP%] > div[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;left:0;right:0;background-color:#64646480;z-index:2;display:none}[_nghost-%COMP%] > div.igo-backdrop-shown[_ngcontent-%COMP%]{display:block}\"]\n  });\n  return BackdropComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoBackdropModule = /*#__PURE__*/(() => {\n  class IgoBackdropModule {\n    static forRoot() {\n      return {\n        ngModule: IgoBackdropModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoBackdropModule.ɵfac = function IgoBackdropModule_Factory(t) {\n    return new (t || IgoBackdropModule)();\n  };\n\n  IgoBackdropModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoBackdropModule\n  });\n  IgoBackdropModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return IgoBackdropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoBackdropModule, {\n    declarations: [BackdropComponent],\n    imports: [CommonModule],\n    exports: [BackdropComponent]\n  });\n})();\n/**\r\n * This directive allow to add an icon inside a matBadge.\r\n * A value must be set into the matBadge directive ex: matBadge=\"icon\".\r\n * The badge content will be overrided by this current directive.\r\n */\n\n\nlet IgoBadgeIconDirective = /*#__PURE__*/(() => {\n  class IgoBadgeIconDirective {\n    constructor(el, matIconRegistry) {\n      this.el = el;\n      this.matIconRegistry = matIconRegistry;\n      this.hidden = false;\n      this.disabled = false;\n      this.inverseColor = false;\n      this.inheritColor = false;\n    }\n\n    set igoMatBadgeIcon(value) {\n      this.matIconRegistry.getNamedSvgIcon(value).subscribe(svgObj => {\n        this.svg = svgObj;\n        this.updateSvg();\n      });\n    }\n\n    set matBadgeHidden(value) {\n      this.hidden = value;\n      this.updateHidden();\n    }\n\n    set matBadgeDisabled(value) {\n      this.disabled = value;\n      this.updateDisabled();\n    }\n\n    set igoMatBadgeInverseColor(value) {\n      this.inverseColor = value;\n      this.updateColor();\n    }\n\n    set igoMatBadgeInheritColor(value) {\n      this.inheritColor = value;\n      this.updateColor();\n    }\n\n    get badge() {\n      return this.el.nativeElement.querySelector('.mat-badge-content');\n    }\n\n    ngOnInit() {\n      this.badge.style.alignItems = 'center';\n      this.badge.style.justifyContent = 'center';\n      this.updateHidden();\n      this.updateColor();\n      this.updateSvg();\n    }\n\n    updateSvg() {\n      if (!this.badge) {\n        return;\n      }\n\n      this.badge.innerHTML = '';\n\n      if (this.svg) {\n        this.badge.appendChild(this.svg);\n      }\n    }\n\n    updateColor() {\n      if (!this.badge) {\n        return;\n      }\n\n      if (this.inheritColor) {\n        if (this.inverseColor) {\n          this.badge.style.color = 'currentColor';\n          this.badge.style.background = 'none';\n        } else {\n          this.badge.style.color = '';\n          this.badge.style.background = 'currentColor';\n        }\n      } else {\n        if (this.inverseColor) {\n          this.badge.style.color = window.getComputedStyle(this.badge, null).getPropertyValue('background-color');\n          this.badge.style.background = 'none';\n        } else {\n          this.badge.style.color = '';\n          this.badge.style.background = '';\n        }\n      }\n\n      this.originalColor = this.badge.style.color;\n      this.updateDisabled();\n    }\n\n    updateHidden() {\n      if (!this.badge) {\n        return;\n      }\n\n      this.badge.style.display = this.hidden ? 'none' : 'flex';\n    }\n\n    updateDisabled() {\n      if (!this.badge || !this.inverseColor) {\n        return;\n      }\n\n      if (this.disabled) {\n        this.originalColor = this.badge.style.color;\n        this.badge.style.color = '#b9b9b9';\n      } else {\n        this.badge.style.color = this.originalColor;\n      }\n    }\n\n  }\n\n  IgoBadgeIconDirective.ɵfac = function IgoBadgeIconDirective_Factory(t) {\n    return new (t || IgoBadgeIconDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i5$1.MatIconRegistry));\n  };\n\n  IgoBadgeIconDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: IgoBadgeIconDirective,\n    selectors: [[\"\", \"igoMatBadgeIcon\", \"\"]],\n    inputs: {\n      igoMatBadgeIcon: \"igoMatBadgeIcon\",\n      matBadgeHidden: \"matBadgeHidden\",\n      matBadgeDisabled: \"matBadgeDisabled\",\n      igoMatBadgeInverseColor: \"igoMatBadgeInverseColor\",\n      igoMatBadgeInheritColor: \"igoMatBadgeInheritColor\"\n    }\n  });\n  return IgoBadgeIconDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoMatBadgeIconModule = /*#__PURE__*/(() => {\n  class IgoMatBadgeIconModule {\n    static forRoot() {\n      return {\n        ngModule: IgoMatBadgeIconModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoMatBadgeIconModule.ɵfac = function IgoMatBadgeIconModule_Factory(t) {\n    return new (t || IgoMatBadgeIconModule)();\n  };\n\n  IgoMatBadgeIconModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoMatBadgeIconModule\n  });\n  IgoMatBadgeIconModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[MatBadgeModule, MatIconModule], MatBadgeModule]\n  });\n  return IgoMatBadgeIconModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoMatBadgeIconModule, {\n    declarations: [IgoBadgeIconDirective],\n    imports: [MatBadgeModule, MatIconModule],\n    exports: [MatBadgeModule, IgoBadgeIconDirective]\n  });\n})();\n\nlet ClickoutDirective = /*#__PURE__*/(() => {\n  class ClickoutDirective {\n    constructor(el) {\n      this.el = el;\n      this.clickout = new EventEmitter();\n    }\n\n    handleMouseClick(event, target) {\n      if (!target) {\n        return;\n      }\n\n      if (!this.el.nativeElement.contains(target)) {\n        this.clickout.emit(event);\n      }\n    }\n\n  }\n\n  ClickoutDirective.ɵfac = function ClickoutDirective_Factory(t) {\n    return new (t || ClickoutDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ClickoutDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ClickoutDirective,\n    selectors: [[\"\", \"igoClickout\", \"\"]],\n    hostBindings: function ClickoutDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ClickoutDirective_click_HostBindingHandler($event) {\n          return ctx.handleMouseClick($event, $event.target);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    outputs: {\n      clickout: \"clickout\"\n    }\n  });\n  return ClickoutDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoClickoutModule = /*#__PURE__*/(() => {\n  class IgoClickoutModule {\n    static forRoot() {\n      return {\n        ngModule: IgoClickoutModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoClickoutModule.ɵfac = function IgoClickoutModule_Factory(t) {\n    return new (t || IgoClickoutModule)();\n  };\n\n  IgoClickoutModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoClickoutModule\n  });\n  IgoClickoutModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoClickoutModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoClickoutModule, {\n    declarations: [ClickoutDirective],\n    exports: [ClickoutDirective]\n  });\n})();\n\nlet ClonePipe = /*#__PURE__*/(() => {\n  class ClonePipe {\n    transform(value, args) {\n      if (value === undefined) {\n        return value;\n      }\n\n      if (value instanceof Array) {\n        return value.map(obj => Object.assign(Object.create(obj), obj));\n      } else {\n        return Object.assign(Object.create(value), value);\n      }\n    }\n\n  }\n\n  ClonePipe.ɵfac = function ClonePipe_Factory(t) {\n    return new (t || ClonePipe)();\n  };\n\n  ClonePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"clone\",\n    type: ClonePipe,\n    pure: true\n  });\n  return ClonePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoCloneModule = /*#__PURE__*/(() => {\n  class IgoCloneModule {\n    static forRoot() {\n      return {\n        ngModule: IgoCloneModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoCloneModule.ɵfac = function IgoCloneModule_Factory(t) {\n    return new (t || IgoCloneModule)();\n  };\n\n  IgoCloneModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoCloneModule\n  });\n  IgoCloneModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoCloneModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoCloneModule, {\n    declarations: [ClonePipe],\n    exports: [ClonePipe]\n  });\n})();\n\nlet CollapseDirective = /*#__PURE__*/(() => {\n  class CollapseDirective {\n    constructor(renderer, el) {\n      this.renderer = renderer;\n      this.el = el;\n      this._collapsed = false;\n      this.toggle = new EventEmitter();\n    }\n\n    get target() {\n      return this._target;\n    }\n\n    set target(value) {\n      this._target = value;\n    }\n\n    get collapsed() {\n      return this._collapsed;\n    }\n\n    set collapsed(collapsed) {\n      collapsed ? this.collapseTarget() : this.expandTarget();\n      this._collapsed = collapsed;\n      this.toggle.emit(collapsed);\n    }\n\n    click() {\n      this.collapsed = !this.collapsed;\n    }\n\n    collapseTarget() {\n      this.renderer.addClass(this.target, 'igo-collapsed');\n      this.renderer.addClass(this.el.nativeElement, 'collapsed');\n    }\n\n    expandTarget() {\n      this.renderer.removeClass(this.target, 'igo-collapsed');\n      this.renderer.removeClass(this.el.nativeElement, 'collapsed');\n    }\n\n  }\n\n  CollapseDirective.ɵfac = function CollapseDirective_Factory(t) {\n    return new (t || CollapseDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  CollapseDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CollapseDirective,\n    selectors: [[\"\", \"igoCollapse\", \"\"]],\n    hostBindings: function CollapseDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function CollapseDirective_click_HostBindingHandler() {\n          return ctx.click();\n        });\n      }\n    },\n    inputs: {\n      target: \"target\",\n      collapsed: \"collapsed\"\n    },\n    outputs: {\n      toggle: \"toggle\"\n    }\n  });\n  return CollapseDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst _c0$a = [\"*\"];\nlet CollapsibleComponent = /*#__PURE__*/(() => {\n  class CollapsibleComponent {\n    constructor() {\n      this._title = '';\n      this._collapsed = false;\n      this.toggle = new EventEmitter();\n    }\n\n    get title() {\n      return this._title;\n    }\n\n    set title(value) {\n      this._title = value;\n    }\n\n    get collapsed() {\n      return this._collapsed;\n    }\n\n    set collapsed(value) {\n      this._collapsed = value;\n      this.toggle.emit(value);\n    }\n\n  }\n\n  CollapsibleComponent.ɵfac = function CollapsibleComponent_Factory(t) {\n    return new (t || CollapsibleComponent)();\n  };\n\n  CollapsibleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CollapsibleComponent,\n    selectors: [[\"igo-collapsible\"]],\n    inputs: {\n      title: \"title\",\n      collapsed: \"collapsed\"\n    },\n    outputs: {\n      toggle: \"toggle\"\n    },\n    ngContentSelectors: _c0$a,\n    decls: 7,\n    vars: 3,\n    consts: [[\"svgIcon\", \"chevron-up\", \"mat-list-avatar\", \"\", \"igoCollapse\", \"\", 1, \"igo-chevron\", 3, \"target\", \"collapsed\", \"toggle\"], [\"matLine\", \"\"], [\"content\", \"\"]],\n    template: function CollapsibleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"mat-list-item\");\n        i0.ɵɵelementStart(1, \"mat-icon\", 0);\n        i0.ɵɵlistener(\"toggle\", function CollapsibleComponent_Template_mat_icon_toggle_1_listener($event) {\n          return ctx.collapsed = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"h4\", 1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", null, 2);\n        i0.ɵɵprojection(6);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(5);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"target\", _r0)(\"collapsed\", ctx.collapsed);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.title);\n      }\n    },\n    directives: [i1$6.MatListItem, i5$1.MatIcon, i1$6.MatListAvatarCssMatStyler, CollapseDirective, i3.MatLine],\n    styles: [\"[_nghost-%COMP%]     .mat-list .mat-list-item.mat-list-avatar{height:auto;width:auto;padding:0}mat-list-item[_ngcontent-%COMP%]{overflow:hidden}\"]\n  });\n  return CollapsibleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoCollapsibleModule = /*#__PURE__*/(() => {\n  class IgoCollapsibleModule {\n    static forRoot() {\n      return {\n        ngModule: IgoCollapsibleModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoCollapsibleModule.ɵfac = function IgoCollapsibleModule_Factory(t) {\n    return new (t || IgoCollapsibleModule)();\n  };\n\n  IgoCollapsibleModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoCollapsibleModule\n  });\n  IgoCollapsibleModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[MatIconModule, MatListModule]]\n  });\n  return IgoCollapsibleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoCollapsibleModule, {\n    declarations: [CollapsibleComponent, CollapseDirective],\n    imports: [MatIconModule, MatListModule],\n    exports: [CollapsibleComponent, CollapseDirective]\n  });\n})();\n\nlet ConfirmDialogComponent = /*#__PURE__*/(() => {\n  class ConfirmDialogComponent {\n    constructor(dialogRef) {\n      this.dialogRef = dialogRef;\n    }\n\n  }\n\n  ConfirmDialogComponent.ɵfac = function ConfirmDialogComponent_Factory(t) {\n    return new (t || ConfirmDialogComponent)(i0.ɵɵdirectiveInject(i1$8.MatDialogRef));\n  };\n\n  ConfirmDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfirmDialogComponent,\n    selectors: [[\"igo-confirm-dialog\"]],\n    decls: 12,\n    vars: 10,\n    consts: [[\"mat-dialog-title\", \"\", 1, \"mat-typography\"], [\"mat-dialog-content\", \"\", 1, \"mat-typography\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function ConfirmDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵpipe(2, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 2);\n        i0.ɵɵelementStart(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ConfirmDialogComponent_Template_button_click_6_listener() {\n          return ctx.dialogRef.close(true);\n        });\n        i0.ɵɵtext(7);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ConfirmDialogComponent_Template_button_click_9_listener() {\n          return ctx.dialogRef.close(false);\n        });\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 4, \"igo.common.confirmDialog.title\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.confirmMessage);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 6, \"igo.common.confirmDialog.confirmBtn\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 8, \"igo.common.confirmDialog.cancelBtn\"));\n      }\n    },\n    directives: [i1$8.MatDialogTitle, i1$8.MatDialogContent, i1$8.MatDialogActions, i4$1.MatButton],\n    pipes: [i6$1.TranslatePipe],\n    styles: [\"h2[_ngcontent-%COMP%]{margin:5px 0 10px}div[mat-dialog-content][_ngcontent-%COMP%]{max-width:200px}div[mat-dialog-actions][_ngcontent-%COMP%]{margin:10px 0 0}\"]\n  });\n  return ConfirmDialogComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ConfirmDialogService = /*#__PURE__*/(() => {\n  class ConfirmDialogService {\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n\n    open(message) {\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        disableClose: false\n      });\n      dialogRef.componentInstance.confirmMessage = message;\n      return dialogRef.afterClosed();\n    }\n\n  }\n\n  ConfirmDialogService.ɵfac = function ConfirmDialogService_Factory(t) {\n    return new (t || ConfirmDialogService)(i0.ɵɵinject(i1$8.MatDialog));\n  };\n\n  ConfirmDialogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfirmDialogService,\n    factory: ConfirmDialogService.ɵfac\n  });\n  return ConfirmDialogService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoConfirmDialogModule = /*#__PURE__*/(() => {\n  class IgoConfirmDialogModule {\n    static forRoot() {\n      return {\n        ngModule: IgoConfirmDialogModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoConfirmDialogModule.ɵfac = function IgoConfirmDialogModule_Factory(t) {\n    return new (t || IgoConfirmDialogModule)();\n  };\n\n  IgoConfirmDialogModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoConfirmDialogModule\n  });\n  IgoConfirmDialogModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [ConfirmDialogService],\n    imports: [[MatButtonModule, MatDialogModule, IgoLanguageModule]]\n  });\n  return IgoConfirmDialogModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoConfirmDialogModule, {\n    declarations: [ConfirmDialogComponent],\n    imports: [MatButtonModule, MatDialogModule, IgoLanguageModule],\n    exports: [ConfirmDialogComponent]\n  });\n})();\n\nlet ContextMenuDirective = /*#__PURE__*/(() => {\n  class ContextMenuDirective {\n    constructor(overlay, viewContainerRef, elementRef) {\n      this.overlay = overlay;\n      this.viewContainerRef = viewContainerRef;\n      this.elementRef = elementRef;\n      this.menuPosition = new EventEmitter();\n    }\n\n    onContextMenu(e) {\n      const {\n        x,\n        y\n      } = e;\n      this.close();\n      e.preventDefault();\n      this.menuPosition.emit({\n        x,\n        y\n      });\n      this.overlayRef = null;\n      const positionStrategy = this.overlay.position().flexibleConnectedTo({\n        x,\n        y\n      }).withPositions([{\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }]);\n      this.overlayRef = this.overlay.create({\n        positionStrategy,\n        scrollStrategy: this.overlay.scrollStrategies.close()\n      });\n      this.overlayRef.attach(new TemplatePortal(this.menuContext, this.viewContainerRef, {\n        $implicit: undefined\n      }));\n      this.sub = fromEvent(document, 'click').pipe(filter(event => {\n        const clickTarget = event.target;\n        this.close();\n        return !!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget);\n      }), take(1)).subscribe(() => this.close());\n      this.sub = fromEvent(document, 'contextmenu').pipe(filter(event => {\n        const clickTarget = event.target;\n\n        if (clickTarget && !this.elementRef.nativeElement.contains(clickTarget) && !this.overlayRef.overlayElement.contains(clickTarget)) {\n          return true;\n        } else {\n          event.preventDefault();\n        }\n      }), take(1)).subscribe(() => this.close());\n    }\n\n    close() {\n      if (this.overlayRef) {\n        this.overlayRef.dispose();\n        this.overlayRef = null;\n      }\n\n      if (this.sub) {\n        this.sub.unsubscribe();\n      }\n    }\n\n  }\n\n  ContextMenuDirective.ɵfac = function ContextMenuDirective_Factory(t) {\n    return new (t || ContextMenuDirective)(i0.ɵɵdirectiveInject(i1$7.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ContextMenuDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ContextMenuDirective,\n    selectors: [[\"\", \"igoContextMenu\", \"\"]],\n    hostBindings: function ContextMenuDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"contextmenu\", function ContextMenuDirective_contextmenu_HostBindingHandler($event) {\n          return ctx.onContextMenu($event);\n        });\n      }\n    },\n    inputs: {\n      menuContext: [\"igoContextMenu\", \"menuContext\"]\n    },\n    outputs: {\n      menuPosition: \"menuPosition\"\n    }\n  });\n  return ContextMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoContextMenuModule = /*#__PURE__*/(() => {\n  class IgoContextMenuModule {\n    static forRoot() {\n      return {\n        ngModule: IgoContextMenuModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoContextMenuModule.ɵfac = function IgoContextMenuModule_Factory(t) {\n    return new (t || IgoContextMenuModule)();\n  };\n\n  IgoContextMenuModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoContextMenuModule\n  });\n  IgoContextMenuModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoContextMenuModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoContextMenuModule, {\n    declarations: [ContextMenuDirective],\n    exports: [ContextMenuDirective]\n  });\n})();\n\nlet CustomHtmlComponent = /*#__PURE__*/(() => {\n  class CustomHtmlComponent {\n    constructor() {\n      this._html = '';\n    }\n\n    get html() {\n      return this._html;\n    }\n\n    set html(value) {\n      this._html = value;\n    }\n\n  }\n\n  CustomHtmlComponent.ɵfac = function CustomHtmlComponent_Factory(t) {\n    return new (t || CustomHtmlComponent)();\n  };\n\n  CustomHtmlComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomHtmlComponent,\n    selectors: [[\"igo-custom-html\"]],\n    inputs: {\n      html: \"html\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[1, \"custom-html\", 3, \"innerHTML\"]],\n    template: function CustomHtmlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵpipe(1, \"sanitizeHtml\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx.html), i0.ɵɵsanitizeHtml);\n      }\n    },\n    pipes: [SanitizeHtmlPipe],\n    styles: [\".custom-html[_ngcontent-%COMP%]{padding:20px}\"]\n  });\n  return CustomHtmlComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoCustomHtmlModule = /*#__PURE__*/(() => {\n  class IgoCustomHtmlModule {\n    static forRoot() {\n      return {\n        ngModule: IgoCustomHtmlModule\n      };\n    }\n\n  }\n\n  IgoCustomHtmlModule.ɵfac = function IgoCustomHtmlModule_Factory(t) {\n    return new (t || IgoCustomHtmlModule)();\n  };\n\n  IgoCustomHtmlModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoCustomHtmlModule\n  });\n  IgoCustomHtmlModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatIconModule, MatTooltipModule, MatInputModule, MatButtonModule, IgoLanguageModule]]\n  });\n  return IgoCustomHtmlModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoCustomHtmlModule, {\n    declarations: [SanitizeHtmlPipe, CustomHtmlComponent],\n    imports: [CommonModule, MatIconModule, MatTooltipModule, MatInputModule, MatButtonModule, IgoLanguageModule],\n    exports: [SanitizeHtmlPipe, CustomHtmlComponent]\n  });\n})();\n\nlet DragAndDropDirective = /*#__PURE__*/(() => {\n  class DragAndDropDirective {\n    constructor() {\n      this.allowedExtensions = [];\n      this.filesDropped = new EventEmitter();\n      this.filesInvalid = new EventEmitter();\n      this.background = 'inherit';\n    }\n\n    onDragOver(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.background = '#999';\n    }\n\n    onDragLeave(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.background = 'inherit';\n    }\n\n    onDrop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (evt.alreadyFired) {\n        return;\n      }\n\n      evt.alreadyFired = true;\n      this.background = 'inherit';\n      const filesObj = this.validExtensions(evt);\n\n      if (filesObj.valid.length) {\n        this.filesDropped.emit(filesObj.valid);\n      }\n\n      if (filesObj.invalid.length) {\n        this.filesInvalid.emit(filesObj.invalid);\n      }\n    }\n\n    validExtensions(evt) {\n      const files = evt.dataTransfer.files;\n      const filesObj = {\n        valid: [],\n        invalid: []\n      };\n\n      if (files.length > 0) {\n        for (const file of files) {\n          const ext = file.name.split('.')[file.name.split('.').length - 1];\n\n          if (this.allowedExtensions.length === 0 || this.allowedExtensions.lastIndexOf(ext) !== -1 && file.size !== 0) {\n            filesObj.valid.push(file);\n          } else {\n            filesObj.invalid.push(file);\n          }\n        }\n      }\n\n      return filesObj;\n    }\n\n  }\n\n  DragAndDropDirective.ɵfac = function DragAndDropDirective_Factory(t) {\n    return new (t || DragAndDropDirective)();\n  };\n\n  DragAndDropDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DragAndDropDirective,\n    selectors: [[\"\", \"igoDragAndDrop\", \"\"]],\n    hostVars: 2,\n    hostBindings: function DragAndDropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function DragAndDropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function DragAndDropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function DragAndDropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"background\", ctx.background);\n      }\n    },\n    inputs: {\n      allowedExtensions: \"allowedExtensions\"\n    },\n    outputs: {\n      filesDropped: \"filesDropped\",\n      filesInvalid: \"filesInvalid\"\n    }\n  });\n  return DragAndDropDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoDrapDropModule = /*#__PURE__*/(() => {\n  class IgoDrapDropModule {\n    static forRoot() {\n      return {\n        ngModule: IgoDrapDropModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoDrapDropModule.ɵfac = function IgoDrapDropModule_Factory(t) {\n    return new (t || IgoDrapDropModule)();\n  };\n\n  IgoDrapDropModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoDrapDropModule\n  });\n  IgoDrapDropModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoDrapDropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoDrapDropModule, {\n    declarations: [DragAndDropDirective],\n    exports: [DragAndDropDirective]\n  });\n})();\n/**\r\n * This class is used in the DynamicComponentOutlet component. It holds\r\n * a reference to a component factory and can render that component\r\n * in a target element on demand. It's also possible to set inputs\r\n * and to subscribe to outputs.\r\n */\n\n\nclass DynamicComponent {\n  constructor(componentFactory) {\n    this.componentFactory = componentFactory;\n    /**\r\n     * Subscriptions to the component's outputs. Those need\r\n     * to be unsubscribed when the component is destroyed.\r\n     */\n\n    this.subscriptions = [];\n    /**\r\n     * Component inputs\r\n     */\n\n    this.inputs = {};\n    /**\r\n     * Subscriptions to the component's async inputs\r\n     */\n\n    this.inputs$$ = {};\n    /**\r\n     * Subscribers to the component's outputs\r\n     */\n\n    this.subscribers = {};\n  }\n  /**\r\n   * Render the component to a target element.\r\n   * Set it's inputs and subscribe to it's outputs.\r\n   * @param target Target element\r\n   */\n\n\n  setTarget(target) {\n    this.target = target;\n    this.componentRef = target.createComponent(this.componentFactory);\n    this.updateInputs(this.inputs);\n    this.updateSubscribers(this.subscribers);\n  }\n  /**\r\n   * Destroy this component. That means, removing from it's target\r\n   * element and unsubscribing to it's outputs.\r\n   */\n\n\n  destroy() {\n    if (this.target !== undefined) {\n      this.target.clear();\n    }\n\n    if (this.componentRef !== undefined) {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n\n    this.unobserveAllInputs();\n    this.unsubscribeAll();\n  }\n  /**\r\n   * Update the component inputs. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\n\n\n  updateInputs(inputs) {\n    this.inputs = inputs;\n\n    if (this.componentRef === undefined) {\n      return;\n    }\n\n    const instance = this.componentRef.instance;\n    const allowedInputs = this.componentFactory.inputs;\n    allowedInputs.forEach(value => {\n      const key = value.propName;\n      this.unobserveInput(key);\n      const inputValue = inputs[key];\n\n      if (inputs.hasOwnProperty(key)) {\n        if (inputValue instanceof Observable) {\n          this.observeInput(key, inputValue);\n        } else {\n          this.setInputValue(instance, key, inputValue);\n        }\n      }\n    });\n\n    if (typeof instance.onUpdateInputs === 'function') {\n      instance.onUpdateInputs();\n    }\n  }\n  /**\r\n   * Set an instance's input value\r\n   * @param instance Component instance\r\n   * @param key Input key\r\n   * @param value Input value\r\n   */\n\n\n  setInputValue(instance, key, value) {\n    const currentValue = instance[key];\n\n    if (value === currentValue) {\n      return;\n    }\n\n    const prototype = Object.getPrototypeOf(instance);\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, key);\n\n    if (descriptor !== undefined && descriptor.set !== undefined) {\n      descriptor.set.call(instance, value);\n    } else {\n      instance[key] = value;\n    }\n  }\n  /**\r\n   * Update the component subscribers. This is an update so any\r\n   * key not defined won't be overwritten.\r\n   */\n\n\n  updateSubscribers(subscribers) {\n    this.subscribers = subscribers;\n\n    if (this.componentRef === undefined) {\n      return;\n    }\n\n    const instance = this.componentRef.instance;\n    const allowedSubscribers = this.componentFactory.outputs;\n    allowedSubscribers.forEach(value => {\n      const key = value.propName;\n\n      if (subscribers.hasOwnProperty(key)) {\n        const emitter = instance[key];\n        const subscriber = subscribers[key];\n\n        if (Array.isArray(subscriber)) {\n          subscriber.forEach(_subscriber => {\n            this.subscriptions.push(emitter.subscribe(_subscriber));\n          });\n        } else {\n          this.subscriptions.push(emitter.subscribe(subscriber));\n        }\n      }\n    });\n  }\n  /**\r\n   * Subscribe to an observable input and update the component's input value\r\n   * accordingly\r\n   * @param key Input key\r\n   * @param observable Observable\r\n   */\n\n\n  observeInput(key, observable) {\n    this.inputs$$[key] = observable.subscribe(value => {\n      const instance = this.componentRef.instance;\n      this.setInputValue(instance, key, value);\n\n      if (typeof instance.onUpdateInputs === 'function') {\n        instance.onUpdateInputs();\n      }\n    });\n  }\n  /**\r\n   * Unsubscribe to an observable input\r\n   * @param key Input key\r\n   */\n\n\n  unobserveInput(key) {\n    if (this.inputs$$[key] !== undefined) {\n      this.inputs$$[key].unsubscribe();\n      this.inputs$$[key] = undefined;\n    }\n  }\n  /**\r\n   * Unsubscribe to all outputs.\r\n   */\n\n\n  unobserveAllInputs() {\n    Object.values(this.inputs$$).forEach(s => {\n      if (s !== undefined) {\n        s.unsubscribe();\n      }\n    });\n    this.inputs$$ = {};\n  }\n  /**\r\n   * Unsubscribe to all outputs.\r\n   */\n\n\n  unsubscribeAll() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n    this.subscriptions = [];\n  }\n\n}\n/**\r\n * Service to creates DynamicComponent instances from base component classes\r\n */\n\n\nlet DynamicComponentService = /*#__PURE__*/(() => {\n  class DynamicComponentService {\n    constructor(resolver) {\n      this.resolver = resolver;\n    }\n    /**\r\n     * Creates a DynamicComponent instance from a base component class\r\n     * @param componentCls The component class\r\n     * @returns DynamicComponent instance\r\n     */\n\n\n    create(componentCls) {\n      const factory = this.resolver.resolveComponentFactory(componentCls);\n      return new DynamicComponent(factory);\n    }\n\n  }\n\n  DynamicComponentService.ɵfac = function DynamicComponentService_Factory(t) {\n    return new (t || DynamicComponentService)(i0.ɵɵinject(i0.ComponentFactoryResolver));\n  };\n\n  DynamicComponentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DynamicComponentService,\n    factory: DynamicComponentService.ɵfac,\n    providedIn: 'root'\n  });\n  return DynamicComponentService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst _c0$9 = [\"target\"];\n\nfunction DynamicOutletComponent_ng_template_0_Template(rf, ctx) {}\n\nlet DynamicOutletComponent = /*#__PURE__*/(() => {\n  class DynamicOutletComponent {\n    constructor(dynamicComponentService, cdRef) {\n      this.dynamicComponentService = dynamicComponentService;\n      this.cdRef = cdRef;\n      /**\r\n       * The dynamic component inputs\r\n       */\n\n      this.inputs = {};\n      /**\r\n       * The subscribers to the dynamic component outputs\r\n       */\n\n      this.subscribers = {};\n    }\n    /**\r\n     * If the dynamic component changes, create it.\r\n     * If the inputs or subscribers change, update the current component's\r\n     * inputs or subscribers.\r\n     * @internal\r\n     */\n\n\n    ngOnChanges(changes) {\n      const component = changes.component;\n      const inputs = changes.inputs;\n      const subscribers = changes.subscribers;\n      const eq = ObjectUtils.objectsAreEquivalent;\n\n      if (!component || !component.currentValue) {\n        return;\n      }\n\n      if (component.currentValue !== component.previousValue) {\n        this.createComponent(component.currentValue);\n      } else {\n        const inputsAreEquivalents = inputs && eq(inputs.currentValue || {}, inputs.previousValue || {});\n        const subscribersAreEquivalents = subscribers && eq(subscribers.currentValue || {}, subscribers.previousValue || {});\n\n        if (inputsAreEquivalents === false) {\n          this.updateInputs();\n        }\n\n        if (subscribersAreEquivalents === false) {\n          this.updateSubscribers();\n        }\n      }\n\n      this.cdRef.detectChanges();\n    }\n    /**\r\n     * Destroy the dynamic component and all it's subscribers\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      if (this.dynamicComponent) {\n        this.dynamicComponent.destroy();\n      }\n    }\n    /**\r\n     * Create a  DynamicComponent out of the component class and render it.\r\n     * @internal\r\n     */\n\n\n    createComponent(component) {\n      if (this.dynamicComponent !== undefined) {\n        this.dynamicComponent.destroy();\n      }\n\n      this.dynamicComponent = component instanceof DynamicComponent ? component : this.dynamicComponentService.create(component);\n      this.renderComponent();\n    }\n    /**\r\n     * Create and render the dynamic component. Set it's inputs and subscribers\r\n     * @internal\r\n     */\n\n\n    renderComponent() {\n      this.updateInputs();\n      this.updateSubscribers();\n      this.dynamicComponent.setTarget(this.target);\n    }\n    /**\r\n     * Update the dynamic component inputs. This is an update so any\r\n     * key not defined won't be overwritten.\r\n     * @internal\r\n     */\n\n\n    updateInputs() {\n      this.dynamicComponent.updateInputs(this.inputs);\n    }\n    /**\r\n     * Update the dynamic component subscribers. This is an update so any\r\n     * key not defined won't be overwritten.\r\n     * @internal\r\n     */\n\n\n    updateSubscribers() {\n      this.dynamicComponent.updateSubscribers(this.subscribers);\n    }\n\n  }\n\n  DynamicOutletComponent.ɵfac = function DynamicOutletComponent_Factory(t) {\n    return new (t || DynamicOutletComponent)(i0.ɵɵdirectiveInject(DynamicComponentService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  DynamicOutletComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DynamicOutletComponent,\n    selectors: [[\"igo-dynamic-outlet\"]],\n    viewQuery: function DynamicOutletComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$9, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.target = _t.first);\n      }\n    },\n    inputs: {\n      component: \"component\",\n      inputs: \"inputs\",\n      subscribers: \"subscribers\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"target\", \"\"]],\n    template: function DynamicOutletComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DynamicOutletComponent_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block;width:100%;height:100%}\"],\n    changeDetection: 0\n  });\n  return DynamicOutletComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoDynamicOutletModule = /*#__PURE__*/(() => {\n  class IgoDynamicOutletModule {}\n\n  IgoDynamicOutletModule.ɵfac = function IgoDynamicOutletModule_Factory(t) {\n    return new (t || IgoDynamicOutletModule)();\n  };\n\n  IgoDynamicOutletModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoDynamicOutletModule\n  });\n  IgoDynamicOutletModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return IgoDynamicOutletModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoDynamicOutletModule, {\n    declarations: [DynamicOutletComponent],\n    imports: [CommonModule],\n    exports: [DynamicOutletComponent]\n  });\n})();\n\nlet IgoDynamicComponentModule = /*#__PURE__*/(() => {\n  class IgoDynamicComponentModule {}\n\n  IgoDynamicComponentModule.ɵfac = function IgoDynamicComponentModule_Factory(t) {\n    return new (t || IgoDynamicComponentModule)();\n  };\n\n  IgoDynamicComponentModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoDynamicComponentModule\n  });\n  IgoDynamicComponentModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [DynamicComponentService],\n    imports: [[CommonModule, IgoDynamicOutletModule], IgoDynamicOutletModule]\n  });\n  return IgoDynamicComponentModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoDynamicComponentModule, {\n    imports: [CommonModule, IgoDynamicOutletModule],\n    exports: [IgoDynamicOutletModule]\n  });\n})();\n\nconst _c0$8 = [\"flexibleMain\"];\nconst _c1$5 = [\"*\", [[\"\", \"igoFlexibleFill\", \"\"]]];\nconst _c2$1 = [\"*\", \"[igoFlexibleFill]\"];\nlet FlexibleComponent = /*#__PURE__*/(() => {\n  class FlexibleComponent {\n    constructor(el, mediaService) {\n      this.el = el;\n      this.mediaService = mediaService;\n      this._initial = '0';\n      this._collapsed = '0';\n      this._expanded = '100%';\n      this._initialMobile = this.expanded;\n      this._collapsedMobile = this.collapsed;\n      this._expandedMobile = this.expanded;\n      this._direction = 'column';\n      this._state = 'initial';\n    }\n\n    get initial() {\n      return this._initial;\n    }\n\n    set initial(value) {\n      this._initial = value;\n    }\n\n    get collapsed() {\n      return this._collapsed;\n    }\n\n    set collapsed(value) {\n      this._collapsed = value;\n    }\n\n    get expanded() {\n      return this._expanded;\n    }\n\n    set expanded(value) {\n      this._expanded = value;\n    }\n\n    get initialMobile() {\n      return this._initialMobile;\n    }\n\n    set initialMobile(value) {\n      this._initialMobile = value;\n    }\n\n    get collapsedMobile() {\n      return this._collapsedMobile;\n    }\n\n    set collapsedMobile(value) {\n      this._collapsedMobile = value;\n    }\n\n    get expandedMobile() {\n      return this._expandedMobile;\n    }\n\n    set expandedMobile(value) {\n      this._expandedMobile = value;\n    }\n\n    get direction() {\n      return this._direction;\n    }\n\n    set direction(value) {\n      this._direction = value;\n    }\n\n    get state() {\n      return this._state;\n    }\n\n    set state(value) {\n      const sizes = {\n        initial: this.initial,\n        collapsed: this.collapsed,\n        expanded: this.expanded\n      };\n\n      if (this.mediaService.isMobile()) {\n        Object.assign(sizes, {\n          initial: this.initialMobile,\n          collapsed: this.collapsedMobile,\n          expanded: this.expandedMobile\n        });\n      }\n\n      const size = sizes[value];\n\n      if (size !== undefined) {\n        this.setSize(size);\n        setTimeout(() => {\n          this._state = value;\n        }, FlexibleComponent.transitionTime);\n      }\n    }\n\n    ngOnInit() {\n      this.el.nativeElement.className += this.direction; // Since this component supports different sizes\n      // on mobile, force a redraw when the media changes\n\n      this.mediaService$$ = this.mediaService.media$.subscribe(media => this.state = this.state);\n    }\n\n    ngOnDestroy() {\n      if (this.mediaService$$) {\n        this.mediaService$$.unsubscribe();\n      }\n    }\n\n    setSize(size) {\n      this._state = 'transition';\n\n      if (this.direction === 'column') {\n        this.main.nativeElement.style.height = size;\n      } else if (this.direction === 'row') {\n        this.main.nativeElement.style.width = size;\n      }\n    }\n\n  }\n\n  FlexibleComponent.transitionTime = 250;\n\n  FlexibleComponent.ɵfac = function FlexibleComponent_Factory(t) {\n    return new (t || FlexibleComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$2.MediaService));\n  };\n\n  FlexibleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FlexibleComponent,\n    selectors: [[\"igo-flexible\"]],\n    viewQuery: function FlexibleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$8, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.main = _t.first);\n      }\n    },\n    inputs: {\n      initial: \"initial\",\n      collapsed: \"collapsed\",\n      expanded: \"expanded\",\n      initialMobile: \"initialMobile\",\n      collapsedMobile: \"collapsedMobile\",\n      expandedMobile: \"expandedMobile\",\n      direction: \"direction\",\n      state: \"state\"\n    },\n    ngContentSelectors: _c2$1,\n    decls: 8,\n    vars: 4,\n    consts: [[\"flexibleMain\", \"\"], [1, \"igo-container\"], [1, \"igo-flexible-fill\"]],\n    template: function FlexibleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1$5);\n        i0.ɵɵelementStart(0, \"div\", null, 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵelementStart(6, \"div\", 1);\n        i0.ɵɵprojection(7, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMapInterpolate2(\"igo-flexible-main \", ctx.state, \" \", ctx.direction, \"\");\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:flex;height:100%;width:100%}.column[_nghost-%COMP%]{flex-direction:column}.row[_nghost-%COMP%]{flex-direction:row}.igo-flexible-main[_ngcontent-%COMP%]{flex:0 0 auto;overflow:hidden}.igo-flexible-main.column[_ngcontent-%COMP%]{transition:height .25s ease-in}.igo-flexible-main.row[_ngcontent-%COMP%]{transition:width .25s ease-in}.igo-flexible-fill[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;left:0;right:0}.igo-container[_ngcontent-%COMP%]{width:calc(100% - 2 * 5px);height:100%;padding:5px 0;margin:0 5px;overflow:hidden;position:relative}  .igo-flexible-fill{flex:1 1 auto;overflow:hidden;position:relative}  .igo-content{height:100%;width:100%;overflow:auto}  igo-panel{height:100%}\"]\n  });\n  return FlexibleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoFlexibleModule = /*#__PURE__*/(() => {\n  class IgoFlexibleModule {\n    static forRoot() {\n      return {\n        ngModule: IgoFlexibleModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoFlexibleModule.ɵfac = function IgoFlexibleModule_Factory(t) {\n    return new (t || IgoFlexibleModule)();\n  };\n\n  IgoFlexibleModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoFlexibleModule\n  });\n  IgoFlexibleModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoFlexibleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoFlexibleModule, {\n    declarations: [FlexibleComponent],\n    exports: [FlexibleComponent]\n  });\n})();\n\nfunction formControlIsRequired(control) {\n  if (control.validator) {\n    const validator = control.validator({});\n\n    if (validator && validator.required) {\n      return true;\n    }\n  }\n\n  if (control.controls) {\n    const requiredControl = Object.keys(control.controls).find(key => {\n      return formControlIsRequired(control.controls[key]);\n    });\n    return requiredControl !== undefined;\n  }\n\n  return false;\n}\n\nfunction getDefaultErrorMessages() {\n  return {\n    required: 'igo.common.form.errors.required'\n  };\n}\n\nfunction getControlErrorMessage(control, messages) {\n  const errors = control.errors || {};\n  const errorKeys = Object.keys(errors);\n  const errorMessages = errorKeys.map(key => messages[key]).filter(message => message !== undefined);\n  return errorMessages.length > 0 ? errorMessages[0] : '';\n}\n\nfunction getAllFormFields(form) {\n  return form.groups.reduce((acc, group) => {\n    return acc.concat(group.fields);\n  }, [].concat(form.fields));\n}\n\nfunction getFormFieldByName(form, name) {\n  const fields = getAllFormFields(form);\n  return fields.find(field => {\n    return field.name === name;\n  });\n}\n\nconst _c0$7 = [\"buttons\"];\nconst _c1$4 = [\"*\", [[\"\", \"formButtons\", \"\"]]];\n\nconst _c2 = function (a0) {\n  return {\n    \"igo-form-body-with-buttons\": a0\n  };\n};\n\nconst _c3 = [\"*\", \"[formButtons]\"];\n/**\r\n * A configurable form\r\n */\n\nlet FormComponent = /*#__PURE__*/(() => {\n  class FormComponent {\n    constructor() {\n      /**\r\n       * Form autocomplete\r\n       */\n      this.autocomplete = 'off';\n      /**\r\n       * Event emitted when the form is submitted\r\n       */\n\n      this.submitForm = new EventEmitter();\n    }\n\n    get hasButtons() {\n      return this.buttons.nativeElement.children.length !== 0;\n    }\n    /**\r\n     * Is the entity or the template change, recreate the form or repopulate it.\r\n     * @internal\r\n     */\n\n\n    ngOnChanges(changes) {\n      const formData = changes.formData;\n\n      if (formData && formData.currentValue !== formData.previousValue) {\n        if (formData.currentValue === undefined) {\n          this.clear();\n        } else {\n          this.setData(formData.currentValue);\n        }\n      }\n    }\n    /**\r\n     * Transform the form data to a feature and emit an event\r\n     * @param event Form submit event\r\n     * @internal\r\n     */\n\n\n    onSubmit() {\n      this.submitForm.emit(this.getData());\n    }\n\n    getData() {\n      const data = {};\n      getAllFormFields(this.form).forEach(field => {\n        this.updateDataWithFormField(data, field);\n      });\n      return data;\n    }\n\n    setData(data) {\n      this.form.fields.forEach(field => {\n        field.control.setValue(t(data, field.name).safeObject);\n      });\n      this.form.groups.forEach(group => {\n        group.fields.forEach(field => {\n          field.control.setValue(t(data, field.name).safeObject);\n        });\n      });\n    }\n\n    updateDataWithFormField(data, field) {\n      const control = field.control;\n\n      if (!control.disabled) {\n        data[field.name] = control.value;\n      }\n    }\n    /**\r\n     * Clear form\r\n     */\n\n\n    clear() {\n      this.form.control.reset();\n    }\n\n  }\n\n  FormComponent.ɵfac = function FormComponent_Factory(t) {\n    return new (t || FormComponent)();\n  };\n\n  FormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormComponent,\n    selectors: [[\"igo-form\"]],\n    viewQuery: function FormComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$7, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttons = _t.first);\n      }\n    },\n    inputs: {\n      form: \"form\",\n      formData: \"formData\",\n      autocomplete: \"autocomplete\"\n    },\n    outputs: {\n      submitForm: \"submitForm\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c3,\n    decls: 7,\n    vars: 5,\n    consts: [[3, \"autocomplete\", \"formGroup\", \"ngSubmit\"], [1, \"igo-form-body\", 3, \"ngClass\"], [1, \"igo-form-content\"], [1, \"igo-form-buttons\"], [\"buttons\", \"\"]],\n    template: function FormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1$4);\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function FormComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵprojection(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3, 4);\n        i0.ɵɵprojection(6, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"autocomplete\", ctx.autocomplete)(\"formGroup\", ctx.form.control);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c2, ctx.hasButtons));\n      }\n    },\n    directives: [i1$5.ɵNgNoValidate, i1$5.NgControlStatusGroup, i1$5.FormGroupDirective, i1$1.NgClass],\n    styles: [\"[_nghost-%COMP%]{display:block}form[_ngcontent-%COMP%]{width:100%;height:100%}.igo-form-body[_ngcontent-%COMP%], .igo-form-content[_ngcontent-%COMP%]{height:100%}.igo-form-body-with-buttons[_ngcontent-%COMP%]   .igo-form-content[_ngcontent-%COMP%]{height:calc(100% - 56px)}.igo-form-content[_ngcontent-%COMP%]{display:flex}\"],\n    changeDetection: 0\n  });\n  return FormComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoFormFormModule = /*#__PURE__*/(() => {\n  class IgoFormFormModule {}\n\n  IgoFormFormModule.ɵfac = function IgoFormFormModule_Factory(t) {\n    return new (t || IgoFormFormModule)();\n  };\n\n  IgoFormFormModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoFormFormModule\n  });\n  IgoFormFormModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule], FormsModule, ReactiveFormsModule]\n  });\n  return IgoFormFormModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoFormFormModule, {\n    declarations: [FormComponent],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule],\n    exports: [FormComponent, FormsModule, ReactiveFormsModule]\n  });\n})();\n\nlet FormService = /*#__PURE__*/(() => {\n  class FormService {\n    constructor(formBuilder) {\n      this.formBuilder = formBuilder;\n    }\n\n    form(fields, groups) {\n      const control = this.formBuilder.group({});\n      fields.forEach(field => {\n        control.addControl(field.name, field.control);\n      });\n      groups.forEach(group => {\n        control.addControl(group.name, group.control);\n      });\n      return {\n        fields,\n        groups,\n        control\n      };\n    }\n\n    group(config, fields) {\n      const options = config.options || {};\n      const control = this.formBuilder.group({});\n      fields.forEach(field => {\n        control.addControl(field.name, field.control);\n      });\n\n      if (options.validator) {\n        const validators = this.getValidators(options.validator); // convert string to actual validator\n\n        control.setValidators(validators);\n      }\n\n      return Object.assign({}, config, {\n        fields,\n        control\n      });\n    }\n\n    field(config) {\n      const options = config.options || {};\n      const state = {\n        value: '',\n        disabled: options.disabled\n      };\n      const control = this.formBuilder.control(state);\n\n      if (options.validator) {\n        const validators = this.getValidators(options.validator); // convert string to actual validator\n\n        control.setValidators(validators);\n      }\n\n      return Object.assign({\n        type: 'text'\n      }, config, {\n        control\n      });\n    }\n\n    extendFieldConfig(config, partial) {\n      const options = Object.assign({}, config.options || {}, partial.options || {});\n      const inputs = Object.assign({}, config.inputs || {}, partial.inputs || {});\n      const subscribers = Object.assign({}, config.subscribers || {}, partial.subscribers || {});\n      return Object.assign({}, config, {\n        options,\n        inputs,\n        subscribers\n      });\n    }\n\n    getValidators(validatorOption) {\n      if (Array.isArray(validatorOption)) {\n        return validatorOption.map(validatorStr => {\n          return this.getValidator(validatorStr);\n        });\n      }\n\n      return this.getValidator(validatorOption);\n    }\n\n    getValidator(validatorStr) {\n      if (typeof validatorStr !== 'string') {\n        return validatorStr;\n      } // regex pattern to extract arguments from string for e.g applying on \"minLength(8)\" would extract 8\n\n\n      const re = /^([a-zA-Z]{3,15})\\((.{0,20})\\)$/;\n      const match = validatorStr.match(re);\n\n      if (!match) {\n        return Validators[validatorStr];\n      }\n\n      const name = match[1];\n      const args = match[2];\n      return Validators[name](args);\n    }\n\n  }\n\n  FormService.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1$5.FormBuilder));\n  };\n\n  FormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Service where all available form fields are registered.\r\n */\n\n\nlet FormFieldService = /*#__PURE__*/(() => {\n  class FormFieldService {\n    constructor() {}\n\n    static register(type, component) {\n      FormFieldService.fields[type] = component;\n    }\n    /**\r\n     * Return field component by type\r\n     * @param type Field type\r\n     * @returns Field component\r\n     */\n\n\n    getFieldByType(type) {\n      return FormFieldService.fields[type];\n    }\n\n  }\n\n  FormFieldService.fields = {};\n\n  FormFieldService.ɵfac = function FormFieldService_Factory(t) {\n    return new (t || FormFieldService)();\n  };\n\n  FormFieldService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormFieldService,\n    factory: FormFieldService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormFieldService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction IgoFormFieldComponent(type) {\n  return compType => {\n    FormFieldService.register(type, compType);\n  };\n}\n\nfunction FormFieldComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"igo-dynamic-outlet\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"component\", ctx_r0.getFieldComponent())(\"inputs\", ctx_r0.getFieldInputs())(\"subscribers\", ctx_r0.getFieldSubscribers());\n  }\n}\n/**\r\n * This component renders the proper form input based on\r\n * the field configuration it receives.\r\n */\n\n\nlet FormFieldComponent = /*#__PURE__*/(() => {\n  class FormFieldComponent {\n    constructor(formFieldService) {\n      this.formFieldService = formFieldService;\n      /**\r\n       * Field inputs cache\r\n       */\n\n      this.fieldInputs = undefined;\n      /**\r\n       * Field subscribers cache\r\n       */\n\n      this.fieldSubscribers = undefined;\n    }\n\n    get fieldOptions() {\n      return this.field.options || {};\n    }\n\n    getFieldComponent() {\n      return this.formFieldService.getFieldByType(this.field.type || 'text');\n    }\n\n    getFieldInputs() {\n      if (this.fieldInputs !== undefined) {\n        return this.fieldInputs;\n      }\n\n      const errors = this.fieldOptions.errors || {};\n      this.fieldInputs = Object.assign({\n        placeholder: this.field.title,\n        disableSwitch: this.fieldOptions.disableSwitch || false\n      }, Object.assign({}, this.field.inputs || {}), {\n        formControl: this.field.control,\n        errors: Object.assign({}, getDefaultErrorMessages(), errors)\n      });\n      return this.fieldInputs;\n    }\n\n    getFieldSubscribers() {\n      if (this.fieldSubscribers !== undefined) {\n        return this.fieldSubscribers;\n      }\n\n      this.fieldSubscribers = Object.assign({}, this.field.subscribers || {});\n      return this.fieldSubscribers;\n    }\n\n  }\n\n  FormFieldComponent.ɵfac = function FormFieldComponent_Factory(t) {\n    return new (t || FormFieldComponent)(i0.ɵɵdirectiveInject(FormFieldService));\n  };\n\n  FormFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormFieldComponent,\n    selectors: [[\"igo-form-field\"]],\n    inputs: {\n      field: \"field\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"component\", \"inputs\", \"subscribers\"]],\n    template: function FormFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormFieldComponent_ng_container_0_Template, 2, 3, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.field !== undefined);\n      }\n    },\n    directives: [i1$1.NgIf, DynamicOutletComponent],\n    styles: [\"mat-form-field{width:100%}  .igo-form-disable-switch{margin-right:8px}\"],\n    changeDetection: 0\n  });\n  return FormFieldComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction FormFieldSelectComponent_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const choice_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", choice_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", choice_r3.title, \" \");\n  }\n}\n\nfunction FormFieldSelectComponent_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵlistener(\"click\", function FormFieldSelectComponent_mat_icon_4_Template_mat_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onDisableSwitchClick();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"svgIcon\", i0.ɵɵpipeBind1(1, 1, ctx_r1.disabled$) === true ? \"checkbox-blank-outline\" : \"checkbox-marked-outline\");\n  }\n}\n\nfunction FormFieldSelectComponent_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r2.getErrorMessage()));\n  }\n}\n/**\r\n * This component renders a select field\r\n */\n\n\nlet FormFieldSelectComponent = /*#__PURE__*/(() => {\n  let FormFieldSelectComponent = class FormFieldSelectComponent {\n    constructor() {\n      this.disabled$ = new BehaviorSubject(false);\n      this.choices$ = new BehaviorSubject([]);\n      /**\r\n       * Wheter a disable switch should be available\r\n       */\n\n      this.disableSwitch = false;\n    }\n    /**\r\n     * Select input choices\r\n     */\n\n\n    set choices(value) {\n      this.choices$.next(value);\n    }\n\n    get choices() {\n      return this.choices$.value;\n    }\n    /**\r\n     * Whether the field is required\r\n     */\n\n\n    get required() {\n      return formControlIsRequired(this.formControl);\n    }\n\n    ngOnInit() {\n      this.disabled$.next(this.formControl.disabled);\n    }\n    /**\r\n     * Get error message\r\n     */\n\n\n    getErrorMessage() {\n      return getControlErrorMessage(this.formControl, this.errors);\n    }\n\n    onDisableSwitchClick() {\n      this.toggleDisabled();\n    }\n\n    toggleDisabled() {\n      const disabled = !this.disabled$.value;\n\n      if (disabled === true) {\n        this.formControl.disable();\n      } else {\n        this.formControl.enable();\n      }\n\n      this.disabled$.next(disabled);\n    }\n\n  };\n\n  FormFieldSelectComponent.ɵfac = function FormFieldSelectComponent_Factory(t) {\n    return new (t || FormFieldSelectComponent)();\n  };\n\n  FormFieldSelectComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormFieldSelectComponent,\n    selectors: [[\"igo-form-field-select\"]],\n    inputs: {\n      choices: \"choices\",\n      formControl: \"formControl\",\n      placeholder: \"placeholder\",\n      errors: \"errors\",\n      disableSwitch: \"disableSwitch\"\n    },\n    decls: 6,\n    vars: 8,\n    consts: [[3, \"required\", \"placeholder\", \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"igo-form-disable-switch\", \"matPrefix\", \"\", 3, \"svgIcon\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"value\"], [\"matPrefix\", \"\", 1, \"igo-form-disable-switch\", 3, \"svgIcon\", \"click\"]],\n    template: function FormFieldSelectComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\");\n        i0.ɵɵelementStart(1, \"mat-select\", 0);\n        i0.ɵɵtemplate(2, FormFieldSelectComponent_mat_option_2_Template, 2, 2, \"mat-option\", 1);\n        i0.ɵɵpipe(3, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, FormFieldSelectComponent_mat_icon_4_Template, 2, 3, \"mat-icon\", 2);\n        i0.ɵɵtemplate(5, FormFieldSelectComponent_mat_error_5_Template, 3, 3, \"mat-error\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"required\", ctx.required)(\"placeholder\", ctx.placeholder)(\"formControl\", ctx.formControl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 6, ctx.choices$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.disableSwitch === true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formControl.errors);\n      }\n    },\n    directives: [i1.MatFormField, i2.MatSelect, i1$5.RequiredValidator, i1$5.NgControlStatus, i1$5.FormControlDirective, i1$1.NgForOf, i1$1.NgIf, i3.MatOption, i5$1.MatIcon, i1.MatPrefix, i1.MatError],\n    pipes: [i1$1.AsyncPipe, i6$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  FormFieldSelectComponent = __decorate([IgoFormFieldComponent('select')], FormFieldSelectComponent);\n  return FormFieldSelectComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction FormFieldTextComponent_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-icon\", 3);\n    i0.ɵɵlistener(\"click\", function FormFieldTextComponent_mat_icon_2_Template_mat_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onDisableSwitchClick();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"svgIcon\", i0.ɵɵpipeBind1(1, 1, ctx_r0.disabled$) === true ? \"checkbox-blank-outline\" : \"checkbox-marked-outline\");\n  }\n}\n\nfunction FormFieldTextComponent_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.getErrorMessage()));\n  }\n}\n/**\r\n * This component renders a text field\r\n */\n\n\nlet FormFieldTextComponent = /*#__PURE__*/(() => {\n  let FormFieldTextComponent = class FormFieldTextComponent {\n    constructor() {\n      this.disabled$ = new BehaviorSubject(false);\n      /**\r\n       * Wheter a disable switch should be available\r\n       */\n\n      this.disableSwitch = false;\n    }\n    /**\r\n     * Whether the field is required\r\n     */\n\n\n    get required() {\n      return formControlIsRequired(this.formControl);\n    }\n\n    ngOnInit() {\n      this.disabled$.next(this.formControl.disabled);\n    }\n    /**\r\n     * Get error message\r\n     */\n\n\n    getErrorMessage() {\n      return getControlErrorMessage(this.formControl, this.errors);\n    }\n\n    onDisableSwitchClick() {\n      this.toggleDisabled();\n    }\n\n    toggleDisabled() {\n      const disabled = !this.disabled$.value;\n\n      if (disabled === true) {\n        this.formControl.disable();\n      } else {\n        this.formControl.enable();\n      }\n\n      this.disabled$.next(disabled);\n    }\n\n  };\n\n  FormFieldTextComponent.ɵfac = function FormFieldTextComponent_Factory(t) {\n    return new (t || FormFieldTextComponent)();\n  };\n\n  FormFieldTextComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormFieldTextComponent,\n    selectors: [[\"igo-form-field-text\"]],\n    inputs: {\n      formControl: \"formControl\",\n      placeholder: \"placeholder\",\n      errors: \"errors\",\n      disableSwitch: \"disableSwitch\"\n    },\n    decls: 4,\n    vars: 5,\n    consts: [[\"matInput\", \"\", 3, \"required\", \"placeholder\", \"formControl\"], [\"class\", \"igo-form-disable-switch\", \"matPrefix\", \"\", 3, \"svgIcon\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"matPrefix\", \"\", 1, \"igo-form-disable-switch\", 3, \"svgIcon\", \"click\"]],\n    template: function FormFieldTextComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\");\n        i0.ɵɵelement(1, \"input\", 0);\n        i0.ɵɵtemplate(2, FormFieldTextComponent_mat_icon_2_Template, 2, 3, \"mat-icon\", 1);\n        i0.ɵɵtemplate(3, FormFieldTextComponent_mat_error_3_Template, 3, 3, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"required\", ctx.required)(\"placeholder\", ctx.placeholder)(\"formControl\", ctx.formControl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.disableSwitch === true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formControl.errors);\n      }\n    },\n    directives: [i1.MatFormField, i2$3.MatInput, i1$5.DefaultValueAccessor, i1$5.RequiredValidator, i1$5.NgControlStatus, i1$5.FormControlDirective, i1$1.NgIf, i5$1.MatIcon, i1.MatPrefix, i1.MatError],\n    pipes: [i1$1.AsyncPipe, i6$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  FormFieldTextComponent = __decorate([IgoFormFieldComponent('text')], FormFieldTextComponent);\n  return FormFieldTextComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction FormFieldTextareaComponent_mat_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-icon\", 3);\n    i0.ɵɵlistener(\"click\", function FormFieldTextareaComponent_mat_icon_3_Template_mat_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onDisableSwitchClick();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"svgIcon\", i0.ɵɵpipeBind1(1, 1, ctx_r0.disabled$) === true ? \"checkbox-blank-outline\" : \"checkbox-marked-outline\");\n  }\n}\n\nfunction FormFieldTextareaComponent_mat_error_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.getErrorMessage()));\n  }\n}\n/**\r\n * This component renders a textarea field\r\n */\n\n\nlet FormFieldTextareaComponent = /*#__PURE__*/(() => {\n  let FormFieldTextareaComponent = class FormFieldTextareaComponent {\n    constructor() {\n      this.disabled$ = new BehaviorSubject(false);\n      /**\r\n       * Wheter a disable switch should be available\r\n       */\n\n      this.disableSwitch = false;\n    }\n    /**\r\n     * Whether the field is required\r\n     */\n\n\n    get required() {\n      return formControlIsRequired(this.formControl);\n    }\n\n    ngOnInit() {\n      this.disabled$.next(this.formControl.disabled);\n    }\n    /**\r\n     * Get error message\r\n     */\n\n\n    getErrorMessage() {\n      return getControlErrorMessage(this.formControl, this.errors);\n    }\n\n    onDisableSwitchClick() {\n      this.toggleDisabled();\n    }\n\n    toggleDisabled() {\n      const disabled = !this.disabled$.value;\n\n      if (disabled === true) {\n        this.formControl.disable();\n      } else {\n        this.formControl.enable();\n      }\n\n      this.disabled$.next(disabled);\n    }\n\n  };\n\n  FormFieldTextareaComponent.ɵfac = function FormFieldTextareaComponent_Factory(t) {\n    return new (t || FormFieldTextareaComponent)();\n  };\n\n  FormFieldTextareaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormFieldTextareaComponent,\n    selectors: [[\"igo-form-field-textarea\"]],\n    inputs: {\n      formControl: \"formControl\",\n      placeholder: \"placeholder\",\n      errors: \"errors\",\n      disableSwitch: \"disableSwitch\"\n    },\n    decls: 5,\n    vars: 5,\n    consts: [[\"matInput\", \"\", 3, \"required\", \"placeholder\", \"formControl\"], [\"class\", \"igo-form-disable-switch\", \"matPrefix\", \"\", 3, \"svgIcon\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"matPrefix\", \"\", 1, \"igo-form-disable-switch\", 3, \"svgIcon\", \"click\"]],\n    template: function FormFieldTextareaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\");\n        i0.ɵɵelementStart(1, \"textarea\", 0);\n        i0.ɵɵtext(2, \"  \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, FormFieldTextareaComponent_mat_icon_3_Template, 2, 3, \"mat-icon\", 1);\n        i0.ɵɵtemplate(4, FormFieldTextareaComponent_mat_error_4_Template, 3, 3, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"required\", ctx.required)(\"placeholder\", ctx.placeholder)(\"formControl\", ctx.formControl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.disableSwitch === true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.formControl.errors);\n      }\n    },\n    directives: [i1.MatFormField, i2$3.MatInput, i1$5.DefaultValueAccessor, i1$5.RequiredValidator, i1$5.NgControlStatus, i1$5.FormControlDirective, i1$1.NgIf, i5$1.MatIcon, i1.MatPrefix, i1.MatError],\n    pipes: [i1$1.AsyncPipe, i6$1.TranslatePipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  FormFieldTextareaComponent = __decorate([IgoFormFieldComponent('textarea')], FormFieldTextareaComponent);\n  return FormFieldTextareaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoFormFieldModule = /*#__PURE__*/(() => {\n  class IgoFormFieldModule {}\n\n  IgoFormFieldModule.ɵfac = function IgoFormFieldModule_Factory(t) {\n    return new (t || IgoFormFieldModule)();\n  };\n\n  IgoFormFieldModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoFormFieldModule\n  });\n  IgoFormFieldModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, MatIconModule, MatFormFieldModule, MatInputModule, MatSelectModule, IgoLanguageModule, IgoDynamicOutletModule]]\n  });\n  return IgoFormFieldModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoFormFieldModule, {\n    declarations: [FormFieldComponent, FormFieldSelectComponent, FormFieldTextComponent, FormFieldTextareaComponent],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, MatIconModule, MatFormFieldModule, MatInputModule, MatSelectModule, IgoLanguageModule, IgoDynamicOutletModule],\n    exports: [FormFieldComponent, FormFieldSelectComponent, FormFieldTextComponent, FormFieldTextareaComponent]\n  });\n})();\n\nfunction FormGroupComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"igo-form-field\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const field_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.getFieldNgClass(field_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"field\", field_r3);\n  }\n}\n\nfunction FormGroupComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, FormGroupComponent_div_0_div_1_Template, 2, 2, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.group.fields);\n  }\n}\n\nfunction FormGroupComponent_mat_error_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.getErrorMessage()));\n  }\n}\n\nconst _c0$6 = [\"*\"];\n/**\r\n * A configurable form, optionnally bound to an entity\r\n * (for example in case of un update). Submitting that form\r\n * emits an event with the form data but no other operation is performed.\r\n */\n\nlet FormGroupComponent = /*#__PURE__*/(() => {\n  class FormGroupComponent {\n    constructor() {}\n    /**\r\n     * Form group control\r\n     */\n\n\n    get formControl() {\n      return this.group.control;\n    }\n    /**\r\n     * Return the number of columns a field should occupy.\r\n     * The maximum allowed is 2, even if the field config says more.\r\n     * @param field Field\r\n     * @returns Number of columns\r\n     * @internal\r\n     */\n\n\n    getFieldColSpan(field) {\n      let colSpan = 2;\n      const options = field.options || {};\n\n      if (options.cols && options.cols > 0) {\n        colSpan = Math.min(options.cols, 2);\n      }\n\n      return colSpan;\n    }\n    /**\r\n     * Return the number of columns a field should occupy.\r\n     * The maximum allowed is 2, even if the field config says more.\r\n     * @param field Field\r\n     * @returns Number of columns\r\n     * @internal\r\n     */\n\n\n    getFieldNgClass(field) {\n      const colspan = this.getFieldColSpan(field);\n      return {\n        [`igo-form-field-colspan-${colspan}`]: true\n      };\n    }\n    /**\r\n     * Get error message\r\n     */\n\n\n    getErrorMessage() {\n      const options = this.group.options || {};\n      return getControlErrorMessage(this.formControl, options.errors || {});\n    }\n\n  }\n\n  FormGroupComponent.ɵfac = function FormGroupComponent_Factory(t) {\n    return new (t || FormGroupComponent)();\n  };\n\n  FormGroupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormGroupComponent,\n    selectors: [[\"igo-form-group\"]],\n    inputs: {\n      group: \"group\",\n      errors: \"errors\"\n    },\n    ngContentSelectors: _c0$6,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"igo-form-group-fields\", 4, \"ngIf\"], [1, \"igo-form-group-extra-content\"], [4, \"ngIf\"], [1, \"igo-form-group-fields\"], [\"class\", \"igo-form-field-wrapper\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"igo-form-field-wrapper\", 3, \"ngClass\"], [3, \"field\"]],\n    template: function FormGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, FormGroupComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, FormGroupComponent_mat_error_3_Template, 3, 3, \"mat-error\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.group && ctx.group.fields.length > 0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.formControl.errors);\n      }\n    },\n    directives: [i1$1.NgIf, i1$1.NgForOf, i1$1.NgClass, FormFieldComponent, i1.MatError],\n    pipes: [i6$1.TranslatePipe],\n    styles: [\"[_nghost-%COMP%]{width:100%;height:100%;display:block;overflow:auto;padding:10px 5px}.igo-form-field-wrapper[_ngcontent-%COMP%]{display:inline-block;padding:0 5px}.igo-form-field-colspan-2[_ngcontent-%COMP%]{width:100%}.igo-form-field-colspan-1[_ngcontent-%COMP%]{width:50%}\"],\n    changeDetection: 0\n  });\n  return FormGroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoFormGroupModule = /*#__PURE__*/(() => {\n  class IgoFormGroupModule {}\n\n  IgoFormGroupModule.ɵfac = function IgoFormGroupModule_Factory(t) {\n    return new (t || IgoFormGroupModule)();\n  };\n\n  IgoFormGroupModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoFormGroupModule\n  });\n  IgoFormGroupModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatFormFieldModule, IgoLanguageModule, IgoFormFieldModule]]\n  });\n  return IgoFormGroupModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoFormGroupModule, {\n    declarations: [FormGroupComponent],\n    imports: [CommonModule, MatFormFieldModule, IgoLanguageModule, IgoFormFieldModule],\n    exports: [FormGroupComponent]\n  });\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoFormModule = /*#__PURE__*/(() => {\n  class IgoFormModule {}\n\n  IgoFormModule.ɵfac = function IgoFormModule_Factory(t) {\n    return new (t || IgoFormModule)();\n  };\n\n  IgoFormModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoFormModule\n  });\n  IgoFormModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [FormService, FormFieldService],\n    imports: [[CommonModule, IgoFormGroupModule, IgoFormFieldModule], IgoFormFormModule, IgoFormGroupModule, IgoFormFieldModule]\n  });\n  return IgoFormModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoFormModule, {\n    imports: [CommonModule, IgoFormGroupModule, IgoFormFieldModule],\n    exports: [IgoFormFormModule, IgoFormGroupModule, IgoFormFieldModule]\n  });\n})();\n\nlet HomeButtonComponent = /*#__PURE__*/(() => {\n  class HomeButtonComponent {\n    constructor() {\n      this.unselectButton = new EventEmitter();\n    }\n\n    onUnselectButtonClick() {\n      this.unselectButton.emit();\n    }\n\n  }\n\n  HomeButtonComponent.ɵfac = function HomeButtonComponent_Factory(t) {\n    return new (t || HomeButtonComponent)();\n  };\n\n  HomeButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeButtonComponent,\n    selectors: [[\"igo-home-button\"]],\n    outputs: {\n      unselectButton: \"unselectButton\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[\"id\", \"homeButton\", \"mat-icon-button\", \"\", \"tooltip-position\", \"below\", \"matTooltipShowDelay\", \"500\", 3, \"matTooltip\", \"click\"], [\"svgIcon\", \"home\"]],\n    template: function HomeButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function HomeButtonComponent_Template_button_click_0_listener() {\n          return ctx.onUnselectButtonClick();\n        });\n        i0.ɵɵpipe(1, \"translate\");\n        i0.ɵɵelement(2, \"mat-icon\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"matTooltip\", i0.ɵɵpipeBind1(1, 1, \"igo.context.sidenav.mainMenu\"));\n      }\n    },\n    directives: [i4$1.MatButton, i6.MatTooltip, i5$1.MatIcon],\n    pipes: [i6$1.TranslatePipe],\n    styles: [\"#homeButton[_ngcontent-%COMP%]{position:absolute;top:50px;left:0px;border-radius:0;height:46px;width:48px}\"]\n  });\n  return HomeButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoHomeButtonModule = /*#__PURE__*/(() => {\n  class IgoHomeButtonModule {}\n\n  IgoHomeButtonModule.ɵfac = function IgoHomeButtonModule_Factory(t) {\n    return new (t || IgoHomeButtonModule)();\n  };\n\n  IgoHomeButtonModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoHomeButtonModule\n  });\n  IgoHomeButtonModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, IgoLanguageModule]]\n  });\n  return IgoHomeButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoHomeButtonModule, {\n    declarations: [HomeButtonComponent],\n    imports: [CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, IgoLanguageModule],\n    exports: [HomeButtonComponent]\n  });\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoEntitySelectorModule = /*#__PURE__*/(() => {\n  class IgoEntitySelectorModule {}\n\n  IgoEntitySelectorModule.ɵfac = function IgoEntitySelectorModule_Factory(t) {\n    return new (t || IgoEntitySelectorModule)();\n  };\n\n  IgoEntitySelectorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoEntitySelectorModule\n  });\n  IgoEntitySelectorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, MatSelectModule]]\n  });\n  return IgoEntitySelectorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoEntitySelectorModule, {\n    declarations: [EntitySelectorComponent],\n    imports: [CommonModule, FormsModule, MatSelectModule],\n    exports: [EntitySelectorComponent]\n  });\n})();\n\nlet StopDropPropagationDirective = /*#__PURE__*/(() => {\n  class StopDropPropagationDirective {\n    onDrop(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n  }\n\n  StopDropPropagationDirective.ɵfac = function StopDropPropagationDirective_Factory(t) {\n    return new (t || StopDropPropagationDirective)();\n  };\n\n  StopDropPropagationDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: StopDropPropagationDirective,\n    selectors: [[\"\", \"igoStopDropPropagation\", \"\"]],\n    hostBindings: function StopDropPropagationDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function StopDropPropagationDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    }\n  });\n  return StopDropPropagationDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoStopPropagationModule = /*#__PURE__*/(() => {\n  class IgoStopPropagationModule {\n    static forRoot() {\n      return {\n        ngModule: IgoStopPropagationModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoStopPropagationModule.ɵfac = function IgoStopPropagationModule_Factory(t) {\n    return new (t || IgoStopPropagationModule)();\n  };\n\n  IgoStopPropagationModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoStopPropagationModule\n  });\n  IgoStopPropagationModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoStopPropagationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoStopPropagationModule, {\n    declarations: [StopDropPropagationDirective, StopPropagationDirective],\n    exports: [StopDropPropagationDirective, StopPropagationDirective]\n  });\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoEntityTablePaginatorModule = /*#__PURE__*/(() => {\n  class IgoEntityTablePaginatorModule {}\n\n  IgoEntityTablePaginatorModule.ɵfac = function IgoEntityTablePaginatorModule_Factory(t) {\n    return new (t || IgoEntityTablePaginatorModule)();\n  };\n\n  IgoEntityTablePaginatorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoEntityTablePaginatorModule\n  });\n  IgoEntityTablePaginatorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[MatPaginatorModule]]\n  });\n  return IgoEntityTablePaginatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoEntityTablePaginatorModule, {\n    declarations: [EntityTablePaginatorComponent],\n    imports: [MatPaginatorModule],\n    exports: [EntityTablePaginatorComponent]\n  });\n})();\n\nlet IgoImageModule = /*#__PURE__*/(() => {\n  class IgoImageModule {\n    static forRoot() {\n      return {\n        ngModule: IgoImageModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoImageModule.ɵfac = function IgoImageModule_Factory(t) {\n    return new (t || IgoImageModule)();\n  };\n\n  IgoImageModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoImageModule\n  });\n  IgoImageModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoImageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoImageModule, {\n    declarations: [SecureImagePipe],\n    exports: [SecureImagePipe]\n  });\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoEntityTableModule = /*#__PURE__*/(() => {\n  class IgoEntityTableModule {}\n\n  IgoEntityTableModule.ɵfac = function IgoEntityTableModule_Factory(t) {\n    return new (t || IgoEntityTableModule)();\n  };\n\n  IgoEntityTableModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoEntityTableModule\n  });\n  IgoEntityTableModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatTableModule, MatAutocompleteModule, MatSortModule, MatIconModule, MatButtonModule, MatCheckboxModule, MatPaginatorModule, MatSelectModule, IgoStopPropagationModule, IgoCustomHtmlModule, IgoEntityTablePaginatorModule, IgoImageModule, IgoLanguageModule, FormsModule, ReactiveFormsModule, MatInputModule, MatDatepickerModule, MatTooltipModule]]\n  });\n  return IgoEntityTableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoEntityTableModule, {\n    declarations: [EntityTableComponent, EntityTableRowDirective],\n    imports: [CommonModule, MatTableModule, MatAutocompleteModule, MatSortModule, MatIconModule, MatButtonModule, MatCheckboxModule, MatPaginatorModule, MatSelectModule, IgoStopPropagationModule, IgoCustomHtmlModule, IgoEntityTablePaginatorModule, IgoImageModule, IgoLanguageModule, FormsModule, ReactiveFormsModule, MatInputModule, MatDatepickerModule, MatTooltipModule],\n    exports: [EntityTableComponent]\n  });\n})();\n\nlet IgoEntityModule = /*#__PURE__*/(() => {\n  class IgoEntityModule {}\n\n  IgoEntityModule.ɵfac = function IgoEntityModule_Factory(t) {\n    return new (t || IgoEntityModule)();\n  };\n\n  IgoEntityModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoEntityModule\n  });\n  IgoEntityModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule], IgoEntitySelectorModule, IgoEntityTableModule, IgoEntityTablePaginatorModule]\n  });\n  return IgoEntityModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoEntityModule, {\n    imports: [CommonModule],\n    exports: [IgoEntitySelectorModule, IgoEntityTableModule, IgoEntityTablePaginatorModule]\n  });\n})();\n\nlet InteractiveTourLoader = /*#__PURE__*/(() => {\n  class InteractiveTourLoader {\n    constructor(http, configService) {\n      this.http = http;\n      this.configService = configService;\n      this.jsonURL = this.getPathToConfigFile();\n    }\n\n    loadConfigTour() {\n      this.getJSON().subscribe(data => {\n        this.allToursOptions = data;\n      }, err => {\n        throw new Error(`Problem with Interactive tour configuration file: interactiveTour.json not find. Check if the file and is path is set correctly.`);\n      });\n    }\n\n    getPathToConfigFile() {\n      return this.configService.getConfig('interactiveTour.pathToConfigFile') || './config/interactiveTour.json';\n    }\n\n    getJSON() {\n      return this.http.get(this.jsonURL).pipe(catchError(e => {\n        e.error.caught = true;\n        throw e;\n      }));\n    }\n\n    getTourOptionData(toolName) {\n      if (this.allToursOptions === undefined) {\n        return undefined;\n      }\n\n      let nameInConfigFile = toolName;\n      nameInConfigFile = nameInConfigFile.replace(/\\s/g, '');\n      return this.allToursOptions[nameInConfigFile];\n    }\n\n  }\n\n  InteractiveTourLoader.ɵfac = function InteractiveTourLoader_Factory(t) {\n    return new (t || InteractiveTourLoader)(i0.ɵɵinject(i1$3.HttpClient), i0.ɵɵinject(i1$2.ConfigService));\n  };\n\n  InteractiveTourLoader.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InteractiveTourLoader,\n    factory: InteractiveTourLoader.ɵfac\n  });\n  return InteractiveTourLoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet InteractiveTourService = /*#__PURE__*/(() => {\n  class InteractiveTourService {\n    constructor(configService, mediaService, languageService, interactiveTourLoader, shepherdService) {\n      this.configService = configService;\n      this.mediaService = mediaService;\n      this.languageService = languageService;\n      this.interactiveTourLoader = interactiveTourLoader;\n      this.shepherdService = shepherdService;\n      this.nextIndex = 1;\n\n      if (this.isAppHaveTour()) {\n        this.interactiveTourLoader.loadConfigTour();\n      }\n    }\n\n    isAppHaveTour() {\n      const haveTour = this.configService.getConfig('interactiveTour.activateInteractiveTour');\n\n      if (haveTour === undefined) {\n        return true;\n      } else {\n        return haveTour;\n      }\n    }\n\n    isToolHaveTourConfig(toolName) {\n      const checkTourActiveOptions = this.interactiveTourLoader.getTourOptionData(toolName);\n\n      if (checkTourActiveOptions === undefined) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    disabledTourButton(toolName) {\n      const stepConfig = this.interactiveTourLoader.getTourOptionData(toolName);\n\n      if (stepConfig === null || stepConfig === void 0 ? void 0 : stepConfig.conditions) {\n        for (const condition of stepConfig === null || stepConfig === void 0 ? void 0 : stepConfig.conditions) {\n          if (document.querySelector(condition) === null) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    isMobile() {\n      return this.mediaService.isMobile();\n    }\n\n    isTourDisplayInMobile() {\n      const showInMobile = this.configService.getConfig('interactiveTour.tourInMobile');\n\n      if (showInMobile === undefined) {\n        return true;\n      }\n\n      return this.configService.getConfig('interactiveTour.tourInMobile');\n    }\n\n    getButtons(buttonKind) {\n      if (buttonKind === 'noBackButton') {\n        return [{\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant('igo.common.interactiveTour.nextButton'),\n          type: 'next'\n        }];\n      }\n\n      if (buttonKind === 'first') {\n        return [{\n          classes: 'shepherd-button-secondary',\n          text: this.languageService.translate.instant('igo.common.interactiveTour.exitButton'),\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant('igo.common.interactiveTour.nextButton'),\n          type: 'next'\n        }];\n      }\n\n      if (buttonKind === 'last') {\n        return [{\n          classes: 'shepherd-button-secondary',\n          text: this.languageService.translate.instant('igo.common.interactiveTour.backButton'),\n          type: 'back'\n        }, {\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant('igo.common.interactiveTour.exitButton'),\n          type: 'cancel'\n        }];\n      }\n\n      return [{\n        classes: 'shepherd-button-secondary',\n        text: this.languageService.translate.instant('igo.common.interactiveTour.backButton'),\n        type: 'back'\n      }, {\n        classes: 'shepherd-button-primary',\n        text: this.languageService.translate.instant('igo.common.interactiveTour.nextButton'),\n        type: 'next'\n      }];\n    }\n\n    getAction(actionName) {\n      const action = {\n        click: 'click'\n      };\n      return action[actionName.toLowerCase()];\n    }\n\n    addProgress() {\n      const self = this;\n      let nbTry = 0;\n      const maxTry = 21;\n      const checkExist = setInterval(() => {\n        if (self.getCurrentStep()) {\n          if (self.getCurrentStep().options.attachTo.element && !document.querySelector(self.getCurrentStep().options.attachTo.element)) {\n            self.cancel();\n            clearInterval(checkExist);\n            return;\n          } else {\n            const currentStepElement = self.getCurrentStep().getElement();\n\n            if (currentStepElement) {\n              const shepherdList = currentStepElement.querySelectorAll('.shepherd-content, .shepherd-text');\n              shepherdList.forEach(element => {\n                element.classList.add('mat-typography');\n              });\n            }\n\n            const header = currentStepElement ? currentStepElement.querySelector('.shepherd-header') : undefined;\n            nbTry++;\n\n            if (header || nbTry > maxTry) {\n              clearInterval(checkExist);\n            }\n\n            if (header) {\n              const stepsArray = self.steps;\n              const progress = document.createElement('span');\n              progress.className = 'shepherd-progress';\n              progress.innerText = `${stepsArray.indexOf(self.getCurrentStep()) + 1}/${stepsArray.length}`;\n              header.insertBefore(progress, currentStepElement.querySelector('.shepherd-cancel-icon'));\n            }\n          }\n        }\n      }, 100);\n    }\n\n    checkNext(index, tour, service) {\n      if (tour.getCurrentStep()) {\n        if (tour.getCurrentStep().options.attachTo.element && document.querySelector(tour.getCurrentStep().options.attachTo.element)) {\n          tour.complete();\n          return;\n        }\n\n        if (index.index === tour.steps.length - 1) {\n          tour.complete();\n          return;\n        }\n\n        tour.steps.splice(index.index, 1);\n        const nextStep = tour.steps[index.index];\n\n        if (nextStep.options.attachTo.element && !document.querySelector(nextStep.options.attachTo.element)) {\n          service.checkNext(index, tour, service);\n        } else {\n          tour._setupModal();\n\n          tour.show(nextStep.id);\n        }\n      }\n    }\n\n    executeAction(step, actionConfig) {\n      if (!actionConfig) {\n        return;\n      }\n\n      if (actionConfig.condition && (actionConfig.condition.charAt(0) === '!' && document.querySelector(actionConfig.condition.slice(1)) || actionConfig.condition.charAt(0) !== '!' && !document.querySelector(actionConfig.condition))) {\n        return;\n      }\n\n      const element = document.querySelector(actionConfig.element || step.element);\n      const action = this.getAction(actionConfig.action);\n\n      if (element && action) {\n        element[action]();\n      }\n    }\n\n    executeActionPromise(step, actionConfig) {\n      return new Promise(resolve => {\n        this.executeAction(step, actionConfig);\n\n        if (!actionConfig || !actionConfig.waitFor) {\n          resolve();\n          return;\n        }\n\n        let nbTry = 0;\n        const maxTry = actionConfig.maxWait ? actionConfig.maxWait / 100 : 20;\n        const checkExist = setInterval(() => {\n          nbTry++;\n\n          if (nbTry > maxTry || document.querySelector(actionConfig.waitFor)) {\n            clearInterval(checkExist);\n            resolve();\n          }\n        }, 100);\n      });\n    }\n\n    getShepherdSteps(stepConfig) {\n      const shepherdSteps = [];\n      let i = 0;\n\n      for (const step of stepConfig.steps) {\n        shepherdSteps.push({\n          attachTo: {\n            element: step.element,\n            on: step.position || stepConfig.position\n          },\n          popperOptions: {\n            modifiers: [{\n              name: 'offset',\n              options: {\n                offset: [0, 15]\n              }\n            }]\n          },\n          beforeShowPromise: () => {\n            return Promise.all([this.executeActionPromise(this.previousStep, this.previousStep ? this.previousStep.beforeChange : undefined), this.executeActionPromise(step, step.beforeShow)]);\n          },\n          buttons: this.getButtons(i === 0 ? 'first' : i + 1 === stepConfig.steps.length ? 'last' : stepConfig.steps[i].noBackButton ? 'noBackButton' : undefined),\n          classes: step.class,\n          highlightClass: step.highlightClass,\n          scrollTo: step.scrollToElement || stepConfig.scrollToElement || true,\n          canClickTarget: step.disableInteraction ? !step.disableInteraction : undefined,\n          title: this.languageService.translate.instant(step.title || stepConfig.title),\n          text: [this.languageService.translate.instant(step.text)],\n          when: {\n            show: () => {\n              this.executeAction(step, step.onShow);\n            },\n            hide: () => {\n              this.previousStep = step;\n              this.executeAction(step, step.onHide);\n            }\n          }\n        });\n        i++;\n      }\n\n      return shepherdSteps;\n    }\n\n    startTour(toolName) {\n      const stepConfig = this.interactiveTourLoader.getTourOptionData(toolName);\n      this.shepherdService.defaultStepOptions = {\n        classes: stepConfig.class,\n        highlightClass: stepConfig.highlightClass,\n        canClickTarget: stepConfig.disableInteraction ? !stepConfig.disableInteraction : true,\n        cancelIcon: {\n          enabled: true\n        }\n      };\n      const shepherdSteps = this.getShepherdSteps(stepConfig);\n      this.shepherdService.modal = true;\n      this.shepherdService.confirmCancel = false;\n      this.shepherdService.addSteps(shepherdSteps);\n      this.shepherdService.tourObject.on('show', this.addProgress);\n      this.shepherdService.tourObject.on('cancel', index => {\n        this.checkNext(index, this.shepherdService.tourObject, this);\n      });\n      this.shepherdService.start();\n    }\n\n  }\n\n  InteractiveTourService.ɵfac = function InteractiveTourService_Factory(t) {\n    return new (t || InteractiveTourService)(i0.ɵɵinject(i1$2.ConfigService), i0.ɵɵinject(i1$2.MediaService), i0.ɵɵinject(i1$2.LanguageService), i0.ɵɵinject(InteractiveTourLoader), i0.ɵɵinject(i3$1.ShepherdService));\n  };\n\n  InteractiveTourService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InteractiveTourService,\n    factory: InteractiveTourService.ɵfac,\n    providedIn: 'root'\n  });\n  return InteractiveTourService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Service where all available tools and their component are registered.\r\n */\n\n\nclass Toolbox {\n  constructor(options = {}) {\n    this.options = options;\n    /**\r\n     * Observable of the active tool\r\n     */\n\n    this.activeTool$ = new BehaviorSubject(undefined);\n    /**\r\n     * Ordered list of tool names to display in a toolbar\r\n     */\n\n    this.toolbar$ = new BehaviorSubject([]);\n    /**\r\n     * Active tool history. Useful for activating the previous tool.\r\n     */\n\n    this.activeToolHistory = [];\n    /**\r\n     * Tool store\r\n     */\n\n    this.store = new EntityStore([], {\n      getKey: tool => tool.name\n    });\n    this.setToolbar(options.toolbar);\n    this.initStore();\n  }\n\n  get tools$() {\n    return this.store.entities$;\n  }\n  /**\r\n   * Destroy the toolbox\r\n   */\n\n\n  destroy() {\n    this.activeTool$$.unsubscribe();\n    this.store.destroy();\n  }\n  /**\r\n   * Return a tool\r\n   * @param name Tool name\r\n   * @returns tool Tool\r\n   */\n\n\n  getTool(name) {\n    return this.store.get(name);\n  }\n  /**\r\n   * Return all tools\r\n   * @returns Array of tools\r\n   */\n\n\n  getTools() {\n    return this.store.all();\n  }\n  /**\r\n   * Set tool configurations\r\n   * @param tools Tools\r\n   */\n\n\n  setTools(tools) {\n    this.store.load(tools);\n  }\n  /**\r\n   * Get toolbar\r\n   * @returns Toolbar value\r\n   */\n\n\n  getToolbar() {\n    return this.toolbar$.getValue();\n  }\n  /**\r\n   * Set toolbar\r\n   * @param toolbar A list of tool names\r\n   */\n\n\n  setToolbar(toolbar) {\n    this.toolbar$.next(toolbar || []);\n  }\n  /**\r\n   * Activate a tool (and deactivate other tools)\r\n   * @param name Tool name\r\n   * @param options Tool options\r\n   */\n\n\n  activateTool(name, options = {}) {\n    const tool = this.getTool(name);\n\n    if (tool === undefined) {\n      return;\n    }\n\n    this.store.state.update(tool, {\n      active: true,\n      options\n    }, true);\n  }\n  /**\r\n   * Activate the previous tool, if any\r\n   */\n\n\n  activatePreviousTool() {\n    if (this.activeToolHistory.length <= 1) {\n      this.deactivateTool();\n      return;\n    }\n\n    const [previous, current] = this.activeToolHistory.splice(-2, 2);\n    this.activateTool(previous);\n  }\n  /**\r\n   * Activate the tool below, if any\r\n   */\n\n  /* activateBelowTool() {\r\n    const arrayTools = this.getToolbar();\r\n    const index = arrayTools.findIndex(t => t === this.activeTool$.getValue().name);\r\n    if (arrayTools[index + 1] !== undefined) {\r\n      this.deactivateTool();\r\n      const below = arrayTools[index + 1];\r\n      this.activateTool(below);\r\n    } else {\r\n      this.deactivateTool();\r\n      const below = arrayTools[0];\r\n      this.activateTool(below);\r\n    }\r\n  } */\n\n  /**\r\n   * Activate the tool above, if any\r\n   */\n\n  /* activateAboveTool() {\r\n    const arrayTools = this.getToolbar();\r\n    const index = arrayTools.findIndex(t => t === this.activeTool$.getValue().name);\r\n    if (arrayTools[index - 1] !== undefined) {\r\n      this.deactivateTool();\r\n      const above = arrayTools[index - 1];\r\n      this.activateTool(above);\r\n    } else {\r\n      this.deactivateTool();\r\n      const above = arrayTools[arrayTools.length - 1];\r\n      this.activateTool(above);\r\n    }\r\n  } */\n\n  /**\r\n   * Deactivate the active tool\r\n   */\n\n\n  deactivateTool() {\n    this.clearActiveToolHistory();\n    this.store.state.updateAll({\n      active: false\n    });\n  }\n  /**\r\n   * Initialize the tool store and start observing the active tool\r\n   */\n\n\n  initStore() {\n    this.store = new EntityStore([], {\n      getKey: entity => entity.name\n    });\n    this.activeTool$$ = this.store.stateView.firstBy$(record => record.state.active === true).subscribe(record => {\n      if (record === undefined) {\n        this.setActiveTool(undefined);\n        return;\n      }\n\n      const tool = record.entity;\n      const options = Object.assign({}, tool.options || {}, record.state.options || {});\n      this.setActiveTool(Object.assign({}, tool, {\n        options\n      }));\n    });\n  }\n  /**\r\n   * Set the active tool and update the tool history\r\n   * @param tool Tool\r\n   */\n\n\n  setActiveTool(tool) {\n    this.activeTool$.next(tool);\n\n    if (tool === undefined) {\n      this.clearActiveToolHistory();\n    } else {\n      this.activeToolHistory = this.activeToolHistory.filter(name => name !== tool.name).concat([tool.name]);\n    }\n  }\n  /**\r\n   * Clear the tool history\r\n   */\n\n\n  clearActiveToolHistory() {\n    this.activeToolHistory = [];\n  }\n\n}\n/**\r\n * Service where runtime tool configurations are registered\r\n */\n\n\nlet ToolService = /*#__PURE__*/(() => {\n  class ToolService {\n    constructor() {\n      /**\r\n       * Toolbox that holds main tools\r\n       */\n      this.toolbox = new Toolbox();\n      this.toolbox.setTools(this.getTools());\n    }\n\n    static register(tool) {\n      ToolService.tools[tool.name] = tool;\n    }\n    /**\r\n     * Return a tool\r\n     * @param name Tool name\r\n     * @returns tool Tool\r\n     */\n\n\n    getTool(name) {\n      return ToolService.tools[name];\n    }\n    /**\r\n     * Return all tools\r\n     * @returns tTols\r\n     */\n\n\n    getTools() {\n      return Object.values(ToolService.tools);\n    }\n\n  }\n\n  ToolService.tools = {};\n\n  ToolService.ɵfac = function ToolService_Factory(t) {\n    return new (t || ToolService)();\n  };\n\n  ToolService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ToolService,\n    factory: ToolService.ɵfac,\n    providedIn: 'root'\n  });\n  return ToolService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction InteractiveTourComponent_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function InteractiveTourComponent_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.startInteractiveTour();\n    });\n    i0.ɵɵelementStart(1, \"span\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵpipe(5, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"mat-icon\", 3);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵpipe(8, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getClass())(\"disabled\", ctx_r0.disabledTourButton);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", i0.ɵɵpipeBind1(3, 5, \"igo.common.interactiveTour.buttonTitle\"), \" \", i0.ɵɵpipeBind1(4, 7, i0.ɵɵpipeBind1(5, 9, ctx_r0.discoverTitleInLocale$)), \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matTooltip\", ctx_r0.disabledTourButton ? i0.ɵɵpipeBind1(7, 11, \"igo.common.interactiveTour.disaledTooltipTourToolButton\") : i0.ɵɵpipeBind1(8, 13, \"igo.common.interactiveTour.tooltipTourToolButton\"));\n  }\n}\n\nlet InteractiveTourComponent = /*#__PURE__*/(() => {\n  class InteractiveTourComponent {\n    constructor(interactiveTourService, toolService) {\n      this.interactiveTourService = interactiveTourService;\n      this.toolService = toolService;\n      /**\r\n       * Toolbox that holds main tools\r\n       */\n\n      this.tourToStart = '';\n      this.discoverTitleInLocale$ = of('IGO');\n    }\n\n    getClass() {\n      return {\n        'tour-button-tool-icon': this.styleButton === 'icon',\n        'tour-button-tool': this.styleButton === 'raised'\n      };\n    }\n\n    get toolbox() {\n      return this.toolService.toolbox;\n    }\n\n    getTourToStart() {\n      if (this.tourToStart) {\n        return this.tourToStart;\n      } else {\n        return this.activeToolName;\n      }\n    }\n\n    get activeToolName() {\n      if (this.toolbox) {\n        if (this.isActiveTool) {\n          return this.toolbox.activeTool$.getValue().name;\n        } else {\n          return 'global';\n        }\n      } else {\n        return undefined;\n      }\n    }\n\n    get isActiveTool() {\n      if (this.toolbox) {\n        return this.toolbox.activeTool$.getValue() !== undefined;\n      } else {\n        return undefined;\n      }\n    }\n\n    get isToolHaveTour() {\n      if (this.activeToolName === 'about' && !this.tourToStart) {\n        return false;\n      }\n\n      return this.interactiveTourService.isToolHaveTourConfig(this.getTourToStart());\n    }\n\n    get showTourButton() {\n      // 2 conditions to show: have Tour on tool in Config file and if we are in mobile displayInMobile= true\n      let haveTour;\n      haveTour = this.isToolHaveTour;\n\n      if (haveTour === false) {\n        return false;\n      }\n\n      let inMobileAndShow;\n\n      if (this.interactiveTourService.isMobile()) {\n        inMobileAndShow = this.isTourDisplayInMobile;\n\n        if (inMobileAndShow === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    get isTourDisplayInMobile() {\n      return this.interactiveTourService.isTourDisplayInMobile();\n    }\n\n    get disabledTourButton() {\n      return this.interactiveTourService.disabledTourButton(this.activeToolName);\n    }\n\n    startInteractiveTour() {\n      const tour = this.getTourToStart();\n\n      if (tour) {\n        this.interactiveTourService.startTour(tour);\n      } else {\n        return;\n      }\n    }\n\n  }\n\n  InteractiveTourComponent.ɵfac = function InteractiveTourComponent_Factory(t) {\n    return new (t || InteractiveTourComponent)(i0.ɵɵdirectiveInject(InteractiveTourService), i0.ɵɵdirectiveInject(ToolService));\n  };\n\n  InteractiveTourComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InteractiveTourComponent,\n    selectors: [[\"igo-interactive-tour\"]],\n    inputs: {\n      tourToStart: \"tourToStart\",\n      styleButton: \"styleButton\",\n      discoverTitleInLocale$: \"discoverTitleInLocale$\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"mat-raised-button\", \"\", \"tooltip-position\", \"below\", \"matTooltipShowDelay\", \"500\", 3, \"ngClass\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"tooltip-position\", \"below\", \"matTooltipShowDelay\", \"500\", 3, \"ngClass\", \"disabled\", \"click\"], [1, \"interactive-tour-button-title\"], [\"svgIcon\", \"presentation-play\", 3, \"matTooltip\"]],\n    template: function InteractiveTourComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, InteractiveTourComponent_button_0_Template, 9, 15, \"button\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showTourButton);\n      }\n    },\n    directives: [i1$1.NgIf, i4$1.MatButton, i1$1.NgClass, i5$1.MatIcon, i6.MatTooltip],\n    pipes: [i6$1.TranslatePipe, i1$1.AsyncPipe],\n    styles: [\".shepherd-has-title .shepherd-content .shepherd-header{padding:.5em .75em}.shepherd-title{margin:0!important;font-weight:revert!important}.shepherd-progress{margin-right:15px;color:#737373}.shepherd-text{font-size:14px!important}.shepherd-element{border:1px solid;border-color:#474747;box-shadow:4px 5px #65656599}\\n\"],\n    encapsulation: 2\n  });\n  return InteractiveTourComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoInteractiveTourModule = /*#__PURE__*/(() => {\n  class IgoInteractiveTourModule {}\n\n  IgoInteractiveTourModule.ɵfac = function IgoInteractiveTourModule_Factory(t) {\n    return new (t || IgoInteractiveTourModule)();\n  };\n\n  IgoInteractiveTourModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoInteractiveTourModule\n  });\n  IgoInteractiveTourModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [InteractiveTourService, InteractiveTourLoader],\n    imports: [[CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, IgoLanguageModule]]\n  });\n  return IgoInteractiveTourModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoInteractiveTourModule, {\n    declarations: [InteractiveTourComponent],\n    imports: [CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, IgoLanguageModule],\n    exports: [InteractiveTourComponent]\n  });\n})();\n\nlet KeyValuePipe = /*#__PURE__*/(() => {\n  class KeyValuePipe {\n    transform(value, args) {\n      const keyValues = [];\n      Object.getOwnPropertyNames(value).forEach(key => keyValues.push({\n        key,\n        value: value[key]\n      }));\n      return keyValues;\n    }\n\n  }\n\n  KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) {\n    return new (t || KeyValuePipe)();\n  };\n\n  KeyValuePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"keyvalue\",\n    type: KeyValuePipe,\n    pure: true\n  });\n  return KeyValuePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoKeyValueModule = /*#__PURE__*/(() => {\n  class IgoKeyValueModule {\n    static forRoot() {\n      return {\n        ngModule: IgoKeyValueModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoKeyValueModule.ɵfac = function IgoKeyValueModule_Factory(t) {\n    return new (t || IgoKeyValueModule)();\n  };\n\n  IgoKeyValueModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoKeyValueModule\n  });\n  IgoKeyValueModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoKeyValueModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoKeyValueModule, {\n    declarations: [KeyValuePipe],\n    exports: [KeyValuePipe]\n  });\n})();\n\nfunction JsonDialogComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0$5 = function (a0, a1) {\n  return {\n    obj: a0,\n    baseKey: a1\n  };\n};\n\nfunction JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const property_r6 = i0.ɵɵnextContext(2).$implicit;\n    const baseKey_r4 = i0.ɵɵnextContext().baseKey;\n    const ctx_r8 = i0.ɵɵnextContext();\n\n    const _r1 = i0.ɵɵreference(5);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c0$5, property_r6.value, ctx_r8.getKey(baseKey_r4, property_r6.key)));\n  }\n}\n\nfunction JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" : \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"span\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const property_r6 = i0.ɵɵnextContext(2).$implicit;\n    const baseKey_r4 = i0.ɵɵnextContext().baseKey;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r10.getKey(baseKey_r4, property_r6.key));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHtml\", property_r6.value, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_container_1_Template, 2, 5, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_ng_template_2_Template, 6, 2, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n\n    const property_r6 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isObject(property_r6.value))(\"ngIfElse\", _r9);\n  }\n}\n\nfunction JsonDialogComponent_ng_template_4_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, JsonDialogComponent_ng_template_4_ng_container_0_ng_container_1_Template, 4, 2, \"ng-container\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const property_r6 = ctx.$implicit;\n    const baseKey_r4 = i0.ɵɵnextContext().baseKey;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.ignoreKeys.indexOf(ctx_r5.getKey(baseKey_r4, property_r6.key)) === -1);\n  }\n}\n\nfunction JsonDialogComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, JsonDialogComponent_ng_template_4_ng_container_0_Template, 2, 1, \"ng-container\", 6);\n    i0.ɵɵpipe(1, \"keyvalue\");\n  }\n\n  if (rf & 2) {\n    const obj_r3 = ctx.obj;\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(1, 1, obj_r3));\n  }\n}\n\nconst _c1$3 = function (a0) {\n  return {\n    obj: a0\n  };\n};\n\nlet JsonDialogComponent = /*#__PURE__*/(() => {\n  class JsonDialogComponent {\n    constructor(dialogRef) {\n      this.dialogRef = dialogRef;\n    }\n\n    isObject(val) {\n      return typeof val === 'object' && !Array.isArray(val);\n    }\n\n    getKey(baseKey, key) {\n      return (baseKey ? baseKey + '.' : '') + key;\n    }\n\n  }\n\n  JsonDialogComponent.ɵfac = function JsonDialogComponent_Factory(t) {\n    return new (t || JsonDialogComponent)(i0.ɵɵdirectiveInject(i1$8.MatDialogRef));\n  };\n\n  JsonDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: JsonDialogComponent,\n    selectors: [[\"igo-json-dialog\"]],\n    decls: 9,\n    vars: 5,\n    consts: [[\"mat-dialog-title\", \"\", 1, \"mat-typography\"], [\"mat-dialog-content\", \"\", 1, \"mat-typography\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"loopObject\", \"\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [4, \"ngIf\", \"ngIfElse\"], [\"notObject\", \"\"], [1, \"propertyValue\", 3, \"innerHtml\"]],\n    template: function JsonDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, JsonDialogComponent_ng_container_3_Template, 1, 0, \"ng-container\", 2);\n        i0.ɵɵtemplate(4, JsonDialogComponent_ng_template_4_Template, 2, 3, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function JsonDialogComponent_Template_button_click_7_listener() {\n          return ctx.dialogRef.close(false);\n        });\n        i0.ɵɵtext(8, \" OK \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(5);\n\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c1$3, ctx.data));\n      }\n    },\n    directives: [i1$8.MatDialogTitle, i1$8.MatDialogContent, i1$1.NgTemplateOutlet, i1$8.MatDialogActions, i4$1.MatButton, i1$1.NgForOf, i1$1.NgIf],\n    pipes: [KeyValuePipe],\n    encapsulation: 2\n  });\n  return JsonDialogComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet JsonDialogService = /*#__PURE__*/(() => {\n  class JsonDialogService {\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n\n    open(title, data, ignoreKeys) {\n      const dialogRef = this.dialog.open(JsonDialogComponent, {\n        disableClose: false\n      });\n      dialogRef.componentInstance.data = data;\n      dialogRef.componentInstance.title = title;\n      dialogRef.componentInstance.ignoreKeys = ignoreKeys;\n      return dialogRef.afterClosed();\n    }\n\n  }\n\n  JsonDialogService.ɵfac = function JsonDialogService_Factory(t) {\n    return new (t || JsonDialogService)(i0.ɵɵinject(i1$8.MatDialog));\n  };\n\n  JsonDialogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JsonDialogService,\n    factory: JsonDialogService.ɵfac\n  });\n  return JsonDialogService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoJsonDialogModule = /*#__PURE__*/(() => {\n  class IgoJsonDialogModule {\n    static forRoot() {\n      return {\n        ngModule: IgoJsonDialogModule\n      };\n    }\n\n  }\n\n  IgoJsonDialogModule.ɵfac = function IgoJsonDialogModule_Factory(t) {\n    return new (t || IgoJsonDialogModule)();\n  };\n\n  IgoJsonDialogModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoJsonDialogModule\n  });\n  IgoJsonDialogModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [JsonDialogService],\n    imports: [[CommonModule, MatButtonModule, MatDialogModule, IgoKeyValueModule]]\n  });\n  return IgoJsonDialogModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoJsonDialogModule, {\n    declarations: [JsonDialogComponent],\n    imports: [CommonModule, MatButtonModule, MatDialogModule, IgoKeyValueModule],\n    exports: [JsonDialogComponent]\n  });\n})();\n\nlet ListItemDirective = /*#__PURE__*/(() => {\n  class ListItemDirective {\n    constructor(renderer, el) {\n      this.renderer = renderer;\n      this.el = el;\n      this._color = 'primary';\n      this._focused = false;\n      this._selected = false;\n      this._disabled = false;\n      this.beforeSelect = new EventEmitter();\n      this.beforeFocus = new EventEmitter();\n      this.beforeUnselect = new EventEmitter();\n      this.beforeUnfocus = new EventEmitter();\n      this.beforeDisable = new EventEmitter();\n      this.beforeEnable = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.unfocus = new EventEmitter();\n      this.select = new EventEmitter();\n      this.unselect = new EventEmitter();\n      this.disable = new EventEmitter();\n      this.enable = new EventEmitter();\n    }\n\n    get color() {\n      return this._color;\n    }\n\n    set color(value) {\n      this._color = value;\n    }\n\n    get focused() {\n      return this._focused;\n    }\n\n    set focused(value) {\n      if (value === this._focused) {\n        return;\n      }\n\n      if (this.disabled) {\n        return;\n      }\n\n      value ? this.beforeFocus.emit(this) : this.beforeUnfocus.emit(this);\n      this._focused = value;\n\n      if (this.selected !== true) {\n        this.toggleFocusedClass();\n      }\n\n      value ? this.focus.emit(this) : this.unfocus.emit(this);\n    }\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(value) {\n      if (value === this._selected) {\n        return;\n      }\n\n      if (this.disabled) {\n        return;\n      }\n\n      value ? this.beforeSelect.emit(this) : this.beforeUnselect.emit(this);\n      this._selected = value;\n      this._focused = value;\n      this.toggleSelectedClass();\n      value ? this.select.emit(this) : this.unselect.emit(this);\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      if (value === this._disabled) {\n        return;\n      }\n\n      if (value === true) {\n        this.selected = false;\n      }\n\n      value ? this.beforeDisable.emit(this) : this.beforeEnable.emit(this);\n      this._disabled = value;\n      this.toggleDisabledClass();\n      value ? this.disable.emit(this) : this.enable.emit(this);\n    }\n\n    onClick() {\n      this.selected = true;\n    }\n\n    getOffsetTop() {\n      const padding = 5;\n      return this.el.nativeElement.offsetTop - padding;\n    }\n\n    toggleFocusedClass() {\n      if (this.focused) {\n        this.addCls(ListItemDirective.focusedCls);\n      } else {\n        this.removeCls(ListItemDirective.focusedCls);\n      }\n    }\n\n    toggleSelectedClass() {\n      if (this.selected) {\n        this.addCls(ListItemDirective.selectedCls);\n        this.removeCls(ListItemDirective.focusedCls);\n      } else {\n        this.removeCls(ListItemDirective.selectedCls);\n      }\n    }\n\n    toggleDisabledClass() {\n      if (this.disabled) {\n        this.addCls(ListItemDirective.disabledCls);\n      } else {\n        this.removeCls(ListItemDirective.disabledCls);\n      }\n    }\n\n    addCls(cls) {\n      this.renderer.addClass(this.el.nativeElement, cls);\n    }\n\n    removeCls(cls) {\n      this.renderer.removeClass(this.el.nativeElement, cls);\n    }\n\n  }\n\n  ListItemDirective.focusedCls = 'igo-list-item-focused';\n  ListItemDirective.selectedCls = 'igo-list-item-selected';\n  ListItemDirective.disabledCls = 'igo-list-item-disabled';\n\n  ListItemDirective.ɵfac = function ListItemDirective_Factory(t) {\n    return new (t || ListItemDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ListItemDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ListItemDirective,\n    selectors: [[\"\", \"igoListItem\", \"\"]],\n    hostBindings: function ListItemDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ListItemDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      color: \"color\",\n      focused: \"focused\",\n      selected: \"selected\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      beforeSelect: \"beforeSelect\",\n      beforeFocus: \"beforeFocus\",\n      beforeUnselect: \"beforeUnselect\",\n      beforeUnfocus: \"beforeUnfocus\",\n      beforeDisable: \"beforeDisable\",\n      beforeEnable: \"beforeEnable\",\n      focus: \"focus\",\n      unfocus: \"unfocus\",\n      select: \"select\",\n      unselect: \"unselect\",\n      disable: \"disable\",\n      enable: \"enable\"\n    }\n  });\n  return ListItemDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst _c0$4 = function (a0) {\n  return {\n    \"selectable\": a0\n  };\n};\n\nconst _c1$2 = [\"*\"];\nlet ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(el) {\n      this.el = el;\n      this._navigation = true;\n      this._selection = true;\n      this.subscriptions = [];\n    }\n\n    get navigation() {\n      return this._navigation;\n    }\n\n    set navigation(value) {\n      this._navigation = value;\n    }\n\n    get selection() {\n      return this._selection;\n    }\n\n    set selection(value) {\n      this._selection = value;\n    }\n\n    get selectedItem() {\n      return this._selectedItem;\n    }\n\n    set selectedItem(value) {\n      this.focusedItem = value;\n      this._selectedItem = value;\n    }\n\n    get focusedItem() {\n      return this._focusedItem;\n    }\n\n    set focusedItem(value) {\n      this._focusedItem = value;\n    }\n\n    handleKeyboardEvent(event) {\n      // It would be nice to be able to unsubscribe to the event\n      // completely but until ES7 this won't be possible because\n      // document events are not observables\n      if (this.navigationEnabled) {\n        if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n          event.preventDefault();\n          this.navigate(event.key);\n        } else if (event.key === 'Enter') {\n          this.select(this.focusedItem);\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.enableNavigation();\n    }\n\n    ngAfterViewInit() {\n      if (this.listItems.length) {\n        this.init();\n      }\n\n      this.listItems$$ = this.listItems.changes.subscribe(items => this.init());\n    }\n\n    ngOnDestroy() {\n      this.listItems$$.unsubscribe();\n    }\n\n    focus(item) {\n      if (!this.selection) {\n        return;\n      }\n\n      this.unfocus(); // We need to make this check because dynamic\n      // lists such as in the search results list may fail\n\n      if (item !== undefined) {\n        item.focused = true;\n      }\n    }\n\n    unfocus() {\n      if (this.focusedItem !== undefined) {\n        this.focusedItem.focused = false;\n      }\n\n      this.focusedItem = undefined;\n    }\n\n    focusNext() {\n      const items = this.listItems.toArray();\n      let item;\n      const igoList = this.el.nativeElement;\n      let disabled = true;\n      let index = this.getFocusedIndex();\n\n      if (index === undefined) {\n        index = -1;\n      }\n\n      while (disabled && index < items.length - 1) {\n        index += 1;\n        item = items[index];\n        disabled = item.disabled;\n      }\n\n      if (item !== undefined) {\n        this.focus(item);\n      }\n\n      if (!items[index + 1]) {\n        igoList.scrollTop = igoList.scrollHeight - igoList.clientHeight;\n        return;\n      }\n\n      if (item !== undefined && !this.isScrolledIntoView(item.el.nativeElement)) {\n        igoList.scrollTop = item.el.nativeElement.offsetTop + item.el.nativeElement.children[0].offsetHeight - igoList.clientHeight;\n      }\n    }\n\n    focusPrevious() {\n      const items = this.listItems.toArray();\n      let item;\n      const igoList = this.el.nativeElement;\n      let disabled = true;\n      let index = this.getFocusedIndex();\n\n      while (disabled && index > 0) {\n        index -= 1;\n        item = items[index];\n        disabled = item.disabled;\n      }\n\n      if (item !== undefined) {\n        this.focus(item);\n      }\n\n      if (!items[index - 1]) {\n        igoList.scrollTop = 0;\n        return;\n      }\n\n      if (item !== undefined && !this.isScrolledIntoView(item.el.nativeElement)) {\n        const padding = 3;\n        igoList.scrollTop = item.el.nativeElement.offsetTop - padding;\n      }\n    }\n\n    select(item) {\n      if (!this.selection) {\n        return;\n      }\n\n      this.unselect();\n\n      if (item !== undefined) {\n        item.selected = true;\n      }\n    }\n\n    unselect() {\n      this.unfocus();\n\n      if (this.selectedItem !== undefined) {\n        this.selectedItem.selected = false;\n      }\n\n      this.selectedItem = undefined;\n    }\n\n    enableNavigation() {\n      if (this.navigation) {\n        this.navigationEnabled = true;\n      }\n    }\n\n    disableNavigation() {\n      this.navigationEnabled = false;\n    }\n\n    scrollToItem(item) {\n      this.el.nativeElement.scrollTop = item.getOffsetTop();\n    }\n\n    isScrolledIntoView(elem) {\n      const docViewTop = this.el.nativeElement.scrollTop + this.el.nativeElement.offsetTop;\n      const docViewBottom = docViewTop + this.el.nativeElement.clientHeight;\n      const elemTop = elem.offsetTop;\n      const elemBottom = elemTop + elem.children[0].offsetHeight;\n      return elemBottom <= docViewBottom && elemTop >= docViewTop;\n    }\n\n    init() {\n      this.subscribe();\n      this.selectedItem = this.findSelectedItem();\n      this.focusedItem = this.findFocusedItem();\n      this.enableNavigation();\n    }\n\n    subscribe() {\n      this.unsubscribe();\n      this.listItems.toArray().forEach(item => {\n        this.subscriptions.push(item.beforeSelect.subscribe(item2 => this.handleItemBeforeSelect(item2)));\n        this.subscriptions.push(item.select.subscribe(item2 => this.handleItemSelect(item2)));\n        this.subscriptions.push(item.beforeFocus.subscribe(item2 => this.handleItemBeforeFocus(item2)));\n        this.subscriptions.push(item.focus.subscribe(item2 => this.handleItemFocus(item2)));\n      }, this);\n    }\n\n    unsubscribe() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      this.subscriptions = [];\n    }\n\n    handleItemBeforeFocus(item) {\n      if (item !== this.focusedItem) {\n        this.unfocus();\n      }\n    }\n\n    handleItemFocus(item) {\n      this.focusedItem = item;\n    }\n\n    handleItemBeforeSelect(item) {\n      if (item !== this.focusedItem) {\n        this.unselect();\n      }\n    }\n\n    handleItemSelect(item) {\n      this.selectedItem = item;\n    }\n\n    findSelectedItem() {\n      return this.listItems.toArray().find(item => item.selected);\n    }\n\n    findFocusedItem() {\n      return this.listItems.toArray().find(item => item.focused);\n    }\n\n    getFocusedIndex() {\n      return this.listItems.toArray().findIndex(item => item === this.focusedItem);\n    }\n\n    navigate(key) {\n      switch (key) {\n        case 'ArrowUp':\n          this.focusPrevious();\n          break;\n\n        case 'ArrowDown':\n          this.focusNext();\n          break;\n\n        default:\n          break;\n      }\n    }\n\n  }\n\n  ListComponent.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"igo-list\"]],\n    contentQueries: function ListComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ListItemDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listItems = _t);\n      }\n    },\n    hostBindings: function ListComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function ListComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        }, false, i0.ɵɵresolveDocument)(\"enter\", function ListComponent_enter_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      navigation: \"navigation\",\n      selection: \"selection\"\n    },\n    ngContentSelectors: _c1$2,\n    decls: 2,\n    vars: 3,\n    consts: [[\"igoClickout\", \"\", 3, \"ngClass\", \"clickout\", \"click\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"mat-list\", 0);\n        i0.ɵɵlistener(\"clickout\", function ListComponent_Template_mat_list_clickout_0_listener() {\n          return ctx.disableNavigation();\n        })(\"click\", function ListComponent_Template_mat_list_click_0_listener() {\n          return ctx.enableNavigation();\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(1, _c0$4, ctx.selection));\n      }\n    },\n    directives: [i1$6.MatList, ClickoutDirective, i1$1.NgClass],\n    styles: [\"[_nghost-%COMP%]{display:block;height:100%;overflow:auto;position:relative}mat-list[_ngcontent-%COMP%]{padding-top:0}[_nghost-%COMP%]{position:static}[_nghost-%COMP%]     .mat-list .mat-list-item .mat-list-text>*{white-space:normal;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;max-height:36px;line-height:18px;-webkit-box-orient:vertical;-webkit-line-clamp:2}[_nghost-%COMP%]     .mat-list .mat-list-item.mat-list-item-avatar .mat-list-item-content{display:-webkit-flex;height:46px;padding:3px}[_nghost-%COMP%]     .mat-list .mat-list-item.mat-list-item-avatar{height:46px}[_nghost-%COMP%]     .mat-list   igo-collapsible>.mat-list-item>.mat-list-item-content>.mat-list-text>.mat-line{font-weight:bold;opacity:.9}[_nghost-%COMP%]     .mat-list .mat-list-item.mat-list-item-avatar .mat-list-item-content>mat-icon{padding:8px}[_nghost-%COMP%]     [igolistitem] mat-list-item [mat-list-avatar]{height:auto;width:40px}[_nghost-%COMP%]   mat-list.selectable[_ngcontent-%COMP%]     [igolistitem]:not(.igo-list-item-disabled) mat-list-item:hover{cursor:pointer}[_nghost-%COMP%]     [igolistitem]:focus{outline:none}\"]\n  });\n  return ListComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoListModule = /*#__PURE__*/(() => {\n  class IgoListModule {\n    static forRoot() {\n      return {\n        ngModule: IgoListModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoListModule.ɵfac = function IgoListModule_Factory(t) {\n    return new (t || IgoListModule)();\n  };\n\n  IgoListModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoListModule\n  });\n  IgoListModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatIconModule, MatListModule, IgoClickoutModule]]\n  });\n  return IgoListModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoListModule, {\n    declarations: [ListItemDirective, ListComponent],\n    imports: [CommonModule, MatIconModule, MatListModule, IgoClickoutModule],\n    exports: [ListItemDirective, ListComponent]\n  });\n})();\n\nfunction PanelComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"h3\");\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵtext(4);\n    i0.ɵɵprojection(5, 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵprojection(6, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.title, \" \");\n  }\n}\n\nconst _c0$3 = [\"*\", [[\"\", \"panelLeftButton\", \"\"]], [[\"\", \"panelHeader\", \"\"]], [[\"\", \"panelRightButton\", \"\"]]];\nconst _c1$1 = [\"*\", \"[panelLeftButton]\", \"[panelHeader]\", \"[panelRightButton]\"];\nlet PanelComponent = /*#__PURE__*/(() => {\n  class PanelComponent {\n    constructor() {\n      this._withHeader = true;\n    }\n\n    get title() {\n      return this._title;\n    }\n\n    set title(value) {\n      this._title = value;\n    }\n\n    get withHeader() {\n      return this._withHeader;\n    }\n\n    set withHeader(value) {\n      this._withHeader = value;\n    }\n\n  }\n\n  PanelComponent.ɵfac = function PanelComponent_Factory(t) {\n    return new (t || PanelComponent)();\n  };\n\n  PanelComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PanelComponent,\n    selectors: [[\"igo-panel\"]],\n    hostVars: 2,\n    hostBindings: function PanelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"igo-panel-with-header\", ctx.withHeader);\n      }\n    },\n    inputs: {\n      title: \"title\",\n      withHeader: \"withHeader\"\n    },\n    ngContentSelectors: _c1$1,\n    decls: 3,\n    vars: 1,\n    consts: [[\"class\", \"igo-panel-header mat-typography\", \"title\", \"\", 4, \"ngIf\"], [\"title\", \"\", 1, \"igo-panel-content\"], [\"title\", \"\", 1, \"igo-panel-header\", \"mat-typography\"], [1, \"igo-panel-title\"]],\n    template: function PanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0$3);\n        i0.ɵɵtemplate(0, PanelComponent_div_0_Template, 7, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.withHeader);\n      }\n    },\n    directives: [i1$1.NgIf],\n    styles: [\"[_nghost-%COMP%]{display:block}.igo-panel-header[_ngcontent-%COMP%]{height:46px;padding:3px;text-align:center}.igo-panel-header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:0;height:40px}.igo-panel-header[_ngcontent-%COMP%]     [panelleftbutton]{float:left;margin-right:-40px}.igo-panel-header[_ngcontent-%COMP%]     [panelrightbutton]{float:right}.igo-panel-content[_ngcontent-%COMP%]{overflow:auto}.igo-panel-with-header[_nghost-%COMP%]   .igo-panel-content[_ngcontent-%COMP%]{height:calc(100% - 46px)}[_nghost-%COMP%]:not(.igo-panel-with-header)   .igo-panel-content[_ngcontent-%COMP%]{height:100%}.igo-panel-title[_ngcontent-%COMP%]{display:block;width:calc(100% - 80px);margin-left:40px;height:100%;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;line-height:40px;float:left;font-weight:bold;font-size:1.17em}\"],\n    changeDetection: 0\n  });\n  return PanelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoPanelModule = /*#__PURE__*/(() => {\n  class IgoPanelModule {}\n\n  IgoPanelModule.ɵfac = function IgoPanelModule_Factory(t) {\n    return new (t || IgoPanelModule)();\n  };\n\n  IgoPanelModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoPanelModule\n  });\n  IgoPanelModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return IgoPanelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoPanelModule, {\n    declarations: [PanelComponent],\n    imports: [CommonModule],\n    exports: [PanelComponent]\n  });\n})();\n/**\r\n * <igoSidenavShim> directive.\r\n *\r\n * This directive prevents a material sidenav with mode=\"side\"\r\n * from focusing an element after it's closed\r\n */\n\n\nlet SidenavShimDirective = /*#__PURE__*/(() => {\n  class SidenavShimDirective {\n    constructor(component, renderer) {\n      this.renderer = renderer;\n    }\n\n    onOpen() {\n      this.focusedElement = document.activeElement;\n    }\n\n    onCloseStart() {\n      const focusedElement = document.activeElement;\n\n      if (focusedElement !== this.focusedElement) {\n        this.blurElement = this.focusedElement;\n      } else {\n        this.blurElement = undefined;\n      }\n    }\n\n    onClose() {\n      if (this.blurElement) {\n        this.renderer.selectRootElement(this.blurElement).blur();\n      }\n\n      this.blurElement = undefined;\n      this.focusedElement = undefined;\n    }\n\n  }\n\n  SidenavShimDirective.ɵfac = function SidenavShimDirective_Factory(t) {\n    return new (t || SidenavShimDirective)(i0.ɵɵdirectiveInject(i1$9.MatSidenav, 2), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  SidenavShimDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SidenavShimDirective,\n    selectors: [[\"\", \"igoSidenavShim\", \"\"]],\n    hostBindings: function SidenavShimDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"open\", function SidenavShimDirective_open_HostBindingHandler($event) {\n          return ctx.onOpen($event);\n        })(\"close-start\", function SidenavShimDirective_close_start_HostBindingHandler($event) {\n          return ctx.onCloseStart($event);\n        })(\"close\", function SidenavShimDirective_close_HostBindingHandler($event) {\n          return ctx.onClose($event);\n        });\n      }\n    }\n  });\n  return SidenavShimDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoSidenavModule = /*#__PURE__*/(() => {\n  class IgoSidenavModule {\n    static forRoot() {\n      return {\n        ngModule: IgoSidenavModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoSidenavModule.ɵfac = function IgoSidenavModule_Factory(t) {\n    return new (t || IgoSidenavModule)();\n  };\n\n  IgoSidenavModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoSidenavModule\n  });\n  IgoSidenavModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoSidenavModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoSidenavModule, {\n    declarations: [SidenavShimDirective],\n    exports: [SidenavShimDirective]\n  });\n})();\n\nconst _c0$2 = function (a1) {\n  return {\n    \"igo-spinner-container\": true,\n    \"igo-spinner-shown\": a1\n  };\n};\n\nlet SpinnerComponent = /*#__PURE__*/(() => {\n  class SpinnerComponent {\n    constructor() {\n      this.shown$ = new BehaviorSubject(false);\n    }\n\n    set shown(value) {\n      this.shown$.next(value);\n    }\n\n    get shown() {\n      return this.shown$.value;\n    }\n\n    show() {\n      this.shown = true;\n    }\n\n    hide() {\n      this.shown = false;\n    }\n\n  }\n\n  SpinnerComponent.ɵfac = function SpinnerComponent_Factory(t) {\n    return new (t || SpinnerComponent)();\n  };\n\n  SpinnerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SpinnerComponent,\n    selectors: [[\"igo-spinner\"]],\n    inputs: {\n      shown: \"shown\"\n    },\n    decls: 4,\n    vars: 5,\n    consts: [[3, \"ngClass\"], [1, \"igo-spinner-background\"], [\"diameter\", \"40\", \"mode\", \"indeterminate\"]],\n    template: function SpinnerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelement(2, \"div\", 1);\n        i0.ɵɵelement(3, \"mat-progress-spinner\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0$2, i0.ɵɵpipeBind1(1, 1, ctx.shown$)));\n      }\n    },\n    directives: [i1$1.NgClass, i2$4.MatProgressSpinner],\n    pipes: [i1$1.AsyncPipe],\n    styles: [\".igo-spinner-container[_ngcontent-%COMP%]{display:none;pointer-events:none}.igo-spinner-container.igo-spinner-shown[_ngcontent-%COMP%]{display:block}mat-progress-spinner[_ngcontent-%COMP%]{height:40px;width:40px;border-radius:50%}.igo-spinner-background[_ngcontent-%COMP%]{height:36px;width:36px;border-radius:50%;border:4px solid #ffffff;position:absolute;top:2px;left:2px}\"]\n  });\n  return SpinnerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * A directive to bind a SpinnerComponent to the activity service.\r\n * The activity service tracks any HTTP request and this directive\r\n * will display the spinner it's attached to when the activity counter\r\n * is greater than 0.\r\n */\n\n\nlet SpinnerActivityDirective = /*#__PURE__*/(() => {\n  class SpinnerActivityDirective {\n    constructor(spinner, activityService) {\n      this.spinner = spinner;\n      this.activityService = activityService;\n    }\n    /**\r\n     * Subscribe to the activity service counter and display the spinner\r\n     * when it's is greater than 0.\r\n     * @internal\r\n     */\n\n\n    ngOnInit() {\n      this.counter$$ = this.activityService.counter$.pipe(debounceTime(50)).subscribe(count => {\n        count > 0 ? this.spinner.show() : this.spinner.hide();\n      });\n    }\n    /**\r\n     * Unsubcribe to the activity service counter.\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.counter$$.unsubscribe();\n    }\n\n  }\n\n  SpinnerActivityDirective.ɵfac = function SpinnerActivityDirective_Factory(t) {\n    return new (t || SpinnerActivityDirective)(i0.ɵɵdirectiveInject(SpinnerComponent, 2), i0.ɵɵdirectiveInject(i1$2.ActivityService));\n  };\n\n  SpinnerActivityDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SpinnerActivityDirective,\n    selectors: [[\"\", \"igoSpinnerActivity\", \"\"]]\n  });\n  return SpinnerActivityDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoSpinnerModule = /*#__PURE__*/(() => {\n  class IgoSpinnerModule {}\n\n  IgoSpinnerModule.ɵfac = function IgoSpinnerModule_Factory(t) {\n    return new (t || IgoSpinnerModule)();\n  };\n\n  IgoSpinnerModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoSpinnerModule\n  });\n  IgoSpinnerModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatProgressSpinnerModule]]\n  });\n  return IgoSpinnerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoSpinnerModule, {\n    declarations: [SpinnerActivityDirective, SpinnerComponent],\n    imports: [CommonModule, MatProgressSpinnerModule],\n    exports: [SpinnerActivityDirective, SpinnerComponent]\n  });\n})();\n\nclass TableDataSource extends DataSource {\n  constructor(_database, _model, _sort) {\n    super();\n    this._database = _database;\n    this._model = _model;\n    this._sort = _sort;\n    this._filterChange = new BehaviorSubject('');\n  }\n\n  get filter() {\n    return this._filterChange.value;\n  }\n\n  set filter(filter) {\n    this._filterChange.next(filter);\n  } // Connect function called by the table to retrieve one stream containing\n  // the data to render.\n\n\n  connect() {\n    if (!this._database) {\n      return merge([]);\n    }\n\n    const displayDataChanges = [this._database.dataChange, this._filterChange, this._sort.sortChange];\n    return merge(...displayDataChanges).pipe(map(() => {\n      return this.getFilteredData(this._database.data);\n    }), map(data => {\n      return this.getSortedData(data);\n    }));\n  }\n\n  disconnect() {}\n\n  getFilteredData(data) {\n    if (!this.filter) {\n      return data;\n    }\n\n    return data.slice().filter(item => {\n      const searchStr = this._model.columns.filter(c => c.filterable).map(c => ObjectUtils.resolve(item, c.name)).join(' ').toLowerCase();\n\n      return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n    });\n  }\n\n  getSortedData(data) {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const propertyA = ObjectUtils.resolve(a, this._sort.active);\n      const propertyB = ObjectUtils.resolve(b, this._sort.active);\n      return ObjectUtils.naturalCompare(propertyB, propertyA, this._sort.direction);\n    });\n  }\n\n}\n\nvar TableActionColor = /*#__PURE__*/(() => {\n  (function (TableActionColor) {\n    TableActionColor[TableActionColor[\"primary\"] = 0] = \"primary\";\n    TableActionColor[TableActionColor[\"accent\"] = 1] = \"accent\";\n    TableActionColor[TableActionColor[\"warn\"] = 2] = \"warn\";\n  })(TableActionColor || (TableActionColor = {}));\n\n  return TableActionColor;\n})();\nconst _c0$1 = [\"filter\"];\n\nfunction TableComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 13);\n    i0.ɵɵelement(2, \"input\", 14, 15);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"placeholder\", i0.ɵɵpipeBind1(4, 1, \"igo.common.table.filter\"));\n  }\n}\n\nfunction TableComponent_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"th\", 16);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 17);\n    i0.ɵɵlistener(\"change\", function TableComponent_th_6_Template_mat_checkbox_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return $event ? ctx_r10.masterToggle() : null;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r2.selection.hasValue() && ctx_r2.isAllSelected())(\"indeterminate\", ctx_r2.selection.hasValue() && !ctx_r2.isAllSelected());\n  }\n}\n\nfunction TableComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 19);\n    i0.ɵɵlistener(\"click\", function TableComponent_td_7_Template_mat_checkbox_click_1_listener($event) {\n      return $event.stopPropagation();\n    })(\"change\", function TableComponent_td_7_Template_mat_checkbox_change_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const row_r12 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return $event ? ctx_r14.selection.toggle(row_r12) : null;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r12 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r3.selection.isSelected(row_r12));\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_container_1_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r16.title, \" \");\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableComponent_ng_container_8_ng_container_1_th_1_Template, 2, 1, \"th\", 24);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_container_2_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r16.title, \" \");\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableComponent_ng_container_8_ng_container_2_th_1_Template, 2, 1, \"th\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nconst _c1 = function () {\n  return {};\n};\n\nfunction TableComponent_ng_container_8_ng_container_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r27 = ctx.$implicit;\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r26 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r26.model.cellClassFunc ? ctx_r26.model.cellClassFunc(row_r27, column_r16) : i0.ɵɵpureFunction0(2, _c1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r26.getValue(row_r27, column_r16.name), \" \");\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableComponent_ng_container_8_ng_container_3_td_1_Template, 2, 3, \"td\", 26);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_template_4_td_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"td\", 29);\n  }\n\n  if (rf & 2) {\n    const row_r30 = ctx.$implicit;\n    const column_r16 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r29 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r29.model.cellClassFunc ? ctx_r29.model.cellClassFunc(row_r30, column_r16) : i0.ɵɵpureFunction0(2, _c1))(\"innerHTML\", ctx_r29.getValue(row_r30, column_r16.name), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction TableComponent_ng_container_8_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableComponent_ng_container_8_ng_template_4_td_0_Template, 1, 3, \"td\", 28);\n  }\n}\n\nfunction TableComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 20);\n    i0.ɵɵtemplate(1, TableComponent_ng_container_8_ng_container_1_Template, 2, 0, \"ng-container\", 21);\n    i0.ɵɵtemplate(2, TableComponent_ng_container_8_ng_container_2_Template, 2, 0, \"ng-container\", 21);\n    i0.ɵɵtemplate(3, TableComponent_ng_container_8_ng_container_3_Template, 2, 0, \"ng-container\", 22);\n    i0.ɵɵtemplate(4, TableComponent_ng_container_8_ng_template_4_Template, 1, 0, \"ng-template\", null, 23, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const column_r16 = ctx.$implicit;\n\n    const _r20 = i0.ɵɵreference(5);\n\n    i0.ɵɵproperty(\"matColumnDef\", column_r16.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", column_r16.sortable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !column_r16.sortable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !column_r16.html)(\"ngIfElse\", _r20);\n  }\n}\n\nfunction TableComponent_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 16);\n  }\n}\n\nfunction TableComponent_td_11_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TableComponent_td_11_button_1_Template_button_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r36);\n      const action_r34 = restoredCtx.$implicit;\n      const row_r32 = i0.ɵɵnextContext().$implicit;\n      const ctx_r35 = i0.ɵɵnextContext();\n      return ctx_r35.handleClickAction($event, action_r34, row_r32);\n    });\n    i0.ɵɵelement(1, \"mat-icon\", 32);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const action_r34 = ctx.$implicit;\n    const ctx_r33 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r33.getActionColor(action_r34.color));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"svgIcon\", action_r34.icon);\n  }\n}\n\nfunction TableComponent_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 18);\n    i0.ɵɵtemplate(1, TableComponent_td_11_button_1_Template, 2, 2, \"button\", 30);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.model.actions);\n  }\n}\n\nfunction TableComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 33);\n  }\n}\n\nfunction TableComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 34);\n    i0.ɵɵlistener(\"click\", function TableComponent_tr_13_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r40);\n      const row_r38 = restoredCtx.$implicit;\n      const ctx_r39 = i0.ɵɵnextContext();\n      return ctx_r39.selection.toggle(row_r38);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r38 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r8.model.rowClassFunc ? ctx_r8.model.rowClassFunc(row_r38) : i0.ɵɵpureFunction0(1, _c1));\n  }\n}\n\nlet TableComponent = /*#__PURE__*/(() => {\n  class TableComponent {\n    constructor() {\n      this._hasFIlterInput = true;\n      this.selection = new SelectionModel(true, []);\n      this.select = new EventEmitter();\n    }\n\n    get database() {\n      return this._database;\n    }\n\n    set database(value) {\n      this._database = value;\n    }\n\n    get model() {\n      return this._model;\n    }\n\n    set model(value) {\n      this._model = value;\n    }\n\n    get hasFilterInput() {\n      return this._hasFIlterInput;\n    }\n\n    set hasFilterInput(value) {\n      this._hasFIlterInput = value;\n    }\n\n    ngOnInit() {\n      this.dataSource = new TableDataSource(this.database, this.model, this.sort);\n\n      if (this.model) {\n        this.displayedColumns = this.model.columns.filter(c => c.displayed !== false).map(c => c.name);\n\n        if (this.model.selectionCheckbox) {\n          this.displayedColumns.unshift('selectionCheckbox');\n        }\n\n        if (this.model.actions && this.model.actions.length) {\n          this.displayedColumns.push('action');\n        }\n      }\n\n      this.selection.changed.subscribe(e => this.select.emit(e));\n    }\n\n    ngAfterViewInit() {\n      if (this.filter) {\n        fromEvent(this.filter.nativeElement, 'keyup').pipe(debounceTime(150), distinctUntilChanged()).subscribe(() => {\n          if (!this.dataSource) {\n            return;\n          }\n\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n      }\n    }\n\n    ngOnChanges(change) {\n      if (change.database) {\n        this.dataSource = new TableDataSource(this.database, this.model, this.sort);\n        this.selection.clear();\n      }\n    }\n\n    getActionColor(colorId) {\n      return TableActionColor[colorId];\n    }\n\n    getValue(row, key) {\n      return ObjectUtils.resolve(row, key);\n    }\n    /** Whether the number of selected elements matches the total number of rows. */\n\n\n    isAllSelected() {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.database.data.length;\n      return numSelected === numRows;\n    }\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\n\n\n    masterToggle() {\n      this.isAllSelected() ? this.selection.clear() : this.database.data.forEach(row => this.selection.select(row));\n    }\n\n    handleClickAction(event, action, row) {\n      event.stopPropagation();\n      action.click(row);\n    }\n\n  }\n\n  TableComponent.ɵfac = function TableComponent_Factory(t) {\n    return new (t || TableComponent)();\n  };\n\n  TableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableComponent,\n    selectors: [[\"igo-table\"]],\n    viewQuery: function TableComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$1, 5);\n        i0.ɵɵviewQuery(MatSort, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filter = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    inputs: {\n      database: \"database\",\n      model: \"model\",\n      hasFilterInput: \"hasFilterInput\"\n    },\n    outputs: {\n      select: \"select\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 14,\n    vars: 5,\n    consts: [[1, \"table-box\"], [\"class\", \"table-header\", 4, \"ngIf\"], [1, \"table-container\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"dataSource\"], [\"table\", \"\"], [\"matColumnDef\", \"selectionCheckbox\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [3, \"matColumnDef\", 4, \"ngFor\", \"ngForOf\"], [\"matColumnDef\", \"action\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 3, \"ngClass\", \"click\", 4, \"matRowDef\", \"matRowDefColumns\"], [1, \"table-header\"], [\"floatPlaceholder\", \"never\"], [\"matInput\", \"\", 3, \"placeholder\"], [\"filter\", \"\"], [\"mat-header-cell\", \"\"], [3, \"checked\", \"indeterminate\", \"change\"], [\"mat-cell\", \"\"], [3, \"checked\", \"click\", \"change\"], [3, \"matColumnDef\"], [4, \"ngIf\"], [4, \"ngIf\", \"ngIfElse\"], [\"cellHTML\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text\", 3, \"ngClass\", 4, \"matCellDef\"], [\"mat-cell\", \"\", 1, \"mat-cell-text\", 3, \"ngClass\"], [\"mat-cell\", \"\", \"class\", \"mat-cell-text\", 3, \"ngClass\", \"innerHTML\", 4, \"matCellDef\"], [\"mat-cell\", \"\", 1, \"mat-cell-text\", 3, \"ngClass\", \"innerHTML\"], [\"mat-mini-fab\", \"\", 3, \"color\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-mini-fab\", \"\", 3, \"color\", \"click\"], [3, \"svgIcon\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 3, \"ngClass\", \"click\"]],\n    template: function TableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TableComponent_div_1_Template, 5, 3, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"table\", 3, 4);\n        i0.ɵɵelementContainerStart(5, 5);\n        i0.ɵɵtemplate(6, TableComponent_th_6_Template, 2, 2, \"th\", 6);\n        i0.ɵɵtemplate(7, TableComponent_td_7_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(8, TableComponent_ng_container_8_Template, 6, 5, \"ng-container\", 8);\n        i0.ɵɵelementContainerStart(9, 9);\n        i0.ɵɵtemplate(10, TableComponent_th_10_Template, 1, 0, \"th\", 6);\n        i0.ɵɵtemplate(11, TableComponent_td_11_Template, 2, 1, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(12, TableComponent_tr_12_Template, 1, 0, \"tr\", 10);\n        i0.ɵɵtemplate(13, TableComponent_tr_13_Template, 1, 2, \"tr\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasFilterInput);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.model.columns);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i1$1.NgIf, i4.MatTable, i5.MatSort, i4.MatColumnDef, i4.MatHeaderCellDef, i4.MatCellDef, i1$1.NgForOf, i4.MatHeaderRowDef, i4.MatRowDef, i1.MatFormField, i2$3.MatInput, i4.MatHeaderCell, i7.MatCheckbox, i4.MatCell, i5.MatSortHeader, i1$1.NgClass, i4$1.MatButton, i5$1.MatIcon, i4.MatHeaderRow, i4.MatRow],\n    pipes: [i6$1.TranslatePipe],\n    styles: [\"[_nghost-%COMP%]{width:100%;height:100%;display:block}.table-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:100%;overflow:auto;flex:1 1 auto}.table-box[_ngcontent-%COMP%]{height:100%;display:flex;flex-direction:column}.table-header[_ngcontent-%COMP%]{min-height:64px;max-width:500px;display:flex;flex:0 1 auto;align-items:baseline;padding:8px 24px 0;font-size:20px;justify-content:space-between}tr[mat-header-row][_ngcontent-%COMP%], tr[mat-row][_ngcontent-%COMP%]{height:60px}.mat-cell-text[_ngcontent-%COMP%]{overflow:hidden;word-wrap:break-word}td[mat-cell][_ngcontent-%COMP%]{padding-right:15px}th.mat-header-cell[_ngcontent-%COMP%]{padding-right:5px}button[_ngcontent-%COMP%]{margin-right:10px}\"]\n  });\n  return TableComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoTableModule = /*#__PURE__*/(() => {\n  class IgoTableModule {\n    static forRoot() {\n      return {\n        ngModule: IgoTableModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoTableModule.ɵfac = function IgoTableModule_Factory(t) {\n    return new (t || IgoTableModule)();\n  };\n\n  IgoTableModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoTableModule\n  });\n  IgoTableModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, CdkTableModule, MatIconModule, MatButtonModule, MatTableModule, MatFormFieldModule, MatInputModule, MatSortModule, MatCheckboxModule, IgoLanguageModule]]\n  });\n  return IgoTableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoTableModule, {\n    declarations: [TableComponent],\n    imports: [CommonModule, FormsModule, CdkTableModule, MatIconModule, MatButtonModule, MatTableModule, MatFormFieldModule, MatInputModule, MatSortModule, MatCheckboxModule, IgoLanguageModule],\n    exports: [TableComponent]\n  });\n})();\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * actions.\r\n */\n\n\nclass ActionStore extends EntityStore {}\n\nvar ToolboxColor = /*#__PURE__*/(() => {\n  (function (ToolboxColor) {\n    ToolboxColor[\"White\"] = \"white\";\n    ToolboxColor[\"Grey\"] = \"grey\";\n    ToolboxColor[\"Primary\"] = \"primary\";\n  })(ToolboxColor || (ToolboxColor = {}));\n\n  return ToolboxColor;\n})();\n\nfunction toolSlideInOut(speed = '300ms', type = 'ease-in-out') {\n  return trigger('toolSlideInOut', [state('enter', style({\n    transform: 'translate3d(0, 0, 0)'\n  })), transition('void => enter', animate(speed + ' ' + type))]);\n}\n\nfunction ToolboxComponent_igo_actionbar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"igo-actionbar\", 2);\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"store\", ctx_r0.actionStore)(\"withIcon\", true)(\"withTitle\", i0.ɵɵpipeBind1(1, 6, ctx_r0.toolbarWithTitle$))(\"withTooltip\", i0.ɵɵpipeBind1(2, 8, ctx_r0.toolbarWithTitle$) === false)(\"scrollActive\", i0.ɵɵpipeBind1(3, 10, ctx_r0.toolbarWithTitle$))(\"horizontal\", false);\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"igo-tool-container-with-toolbar\": a0,\n    \"igo-tool-container-with-animation\": a1\n  };\n};\n\nfunction ToolboxComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"@toolSlideInOut.start\", function ToolboxComponent_div_2_Template_div_animation_toolSlideInOut_start_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onAnimationStart();\n    })(\"@toolSlideInOut.done\", function ToolboxComponent_div_2_Template_div_animation_toolSlideInOut_done_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onAnimationComplete();\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelement(2, \"igo-dynamic-outlet\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tool_r2 = ctx.ngIf;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(6, _c0, !ctx_r1.actionStore.empty, ctx_r1.animate))(\"@toolSlideInOut\", i0.ɵɵpipeBind1(1, 4, ctx_r1.animation$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"component\", tool_r2.component)(\"inputs\", ctx_r1.getToolInputs(tool_r2));\n  }\n}\n\nlet ToolboxComponent = /*#__PURE__*/(() => {\n  class ToolboxComponent {\n    constructor() {\n      /**\r\n       * Observable of the active tool\r\n       */\n      this.activeTool$ = new BehaviorSubject(undefined);\n      /**\r\n       * Store of actions that toggle tools\r\n       */\n\n      this.actionStore = new ActionStore([]);\n      /**\r\n       * Observable of he anmation state\r\n       */\n\n      this.animation$ = new BehaviorSubject('none');\n      /**\r\n       * Observable of the toolbar\r\n       */\n\n      this.toolbar$ = new BehaviorSubject([]);\n      /**\r\n       * Whether the Toolbar should display actions' titles\r\n       */\n\n      this.toolbarWithTitle$ = this.activeTool$.pipe(map(tool => tool === undefined));\n      /**\r\n       * Observable of the ongoing animation. This is useful when\r\n       * multiple animations are triggered at once i.e. when the user clicks\r\n       * too fast on different actions\r\n       */\n\n      this.animating$ = new BehaviorSubject(false);\n      /**\r\n       * Whether the toolbox should animate the first tool entering\r\n       */\n\n      this.animate = false;\n      /**\r\n       * Color of Toolbox\r\n       */\n\n      this.color = ToolboxColor.White;\n    }\n    /**\r\n     * @ignore\r\n     */\n\n\n    get classColorGrey() {\n      return this.color === ToolboxColor.Grey;\n    }\n    /**\r\n     * @ignore\r\n     */\n\n\n    get classColorPrimary() {\n      return this.color === ToolboxColor.Primary;\n    }\n    /**\r\n     * Initialize the toolbar and subscribe to the active tool\r\n     * @internal\r\n     */\n\n\n    ngOnInit() {\n      this.toolbar$$ = this.toolbox.toolbar$.subscribe(toolbar => this.onToolbarChange(toolbar));\n      this.activeTool$$ = this.toolbox.activeTool$.subscribe(tool => this.onActiveToolChange(tool));\n    }\n    /**\r\n     * Unsubscribe to the active tool and destroy the action store\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.toolbar$$.unsubscribe();\n      this.activeTool$$.unsubscribe();\n      this.actionStore.destroy();\n    }\n    /**\r\n     * Track the starting animation\r\n     * @internal\r\n     */\n\n\n    onAnimationStart() {\n      this.animating$.next(true);\n    }\n    /**\r\n     * Untrack the completed animation\r\n     * @internal\r\n     */\n\n\n    onAnimationComplete() {\n      this.animating$.next(false);\n    }\n    /**\r\n     * Return a tool's inputs\r\n     * @param tool Tool\r\n     * @returns Tool inputs\r\n     * @internal\r\n     */\n\n\n    getToolInputs(tool) {\n      return tool.options || {};\n    }\n    /**\r\n     * Initialize an action store\r\n     * @param toolbar Toolbar\r\n     */\n\n\n    onToolbarChange(toolbar) {\n      this.setToolbar(toolbar);\n    }\n    /**\r\n     * Activate a tool and trigger an animation or not\r\n     * @param tool Tool to activate\r\n     */\n\n\n    onActiveToolChange(tool) {\n      if (!this.animate) {\n        this.setActiveTool(tool);\n        return;\n      }\n\n      this.onAnimate(() => this.setActiveTool(tool));\n    }\n    /**\r\n     * Set the active tool\r\n     * @param tool Tool to activate\r\n     */\n\n\n    setActiveTool(tool) {\n      if (tool === undefined) {\n        this.actionStore.state.updateAll({\n          active: false\n        });\n      } else {\n        const action = this.actionStore.get(tool.name);\n\n        if (action !== undefined) {\n          this.actionStore.state.update(action, {\n            active: true\n          }, true);\n        }\n      }\n\n      this.activeTool$.next(tool);\n\n      if (this.animate) {\n        this.animation$.next('enter');\n      }\n    }\n    /**\r\n     * Initialize the toolbar\r\n     */\n\n\n    setToolbar(toolbar) {\n      const actions = toolbar.reduce((acc, toolName) => {\n        const tool = this.toolbox.getTool(toolName);\n\n        if (tool === undefined) {\n          return acc;\n        }\n\n        acc.push({\n          id: tool.name,\n          title: tool.title,\n          icon: tool.icon,\n          // iconImage: tool.iconImage,\n          tooltip: tool.tooltip,\n          args: [tool, this.toolbox],\n          handler: (_tool, _toolbox) => {\n            _toolbox.activateTool(_tool.name);\n          },\n          ngClass: (_tool, _toolbox) => {\n            return this.toolbox.activeTool$.pipe(map(activeTool => {\n              let toolActivated = false;\n\n              if (activeTool !== undefined && _tool.name === activeTool.name) {\n                toolActivated = true;\n              }\n\n              let childrenToolActivated = false;\n\n              if (activeTool !== undefined && _tool.name === activeTool.parent) {\n                childrenToolActivated = true;\n              }\n\n              return {\n                'tool-activated': toolActivated,\n                'children-tool-activated': childrenToolActivated\n              };\n            }));\n          }\n        });\n        return acc;\n      }, []);\n      this.actionStore.load(actions);\n      this.toolbar$.next(toolbar);\n    }\n    /**\r\n     * Observe the ongoing animation and ignore any incoming animation\r\n     * while one is still ongoing.\r\n     * @param callback Callback to execute when the animation completes\r\n     */\n\n\n    onAnimate(callback) {\n      this.unAnimate();\n      this.animating$$ = this.animating$.subscribe(animation => {\n        if (!animation) {\n          callback.call(this);\n          this.unAnimate();\n        }\n      });\n    }\n    /**\r\n     * Stop observing an animation when it's complete\r\n     */\n\n\n    unAnimate() {\n      if (this.animating$$) {\n        this.animating$$.unsubscribe();\n      }\n    }\n\n  }\n\n  ToolboxComponent.ɵfac = function ToolboxComponent_Factory(t) {\n    return new (t || ToolboxComponent)();\n  };\n\n  ToolboxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToolboxComponent,\n    selectors: [[\"igo-toolbox\"]],\n    hostVars: 4,\n    hostBindings: function ToolboxComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"color-grey\", ctx.classColorGrey)(\"color-primary\", ctx.classColorPrimary);\n      }\n    },\n    inputs: {\n      toolbox: \"toolbox\",\n      animate: \"animate\",\n      color: \"color\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[3, \"store\", \"withIcon\", \"withTitle\", \"withTooltip\", \"scrollActive\", \"horizontal\", 4, \"ngIf\"], [\"class\", \"igo-tool-container\", 3, \"ngClass\", 4, \"ngIf\"], [3, \"store\", \"withIcon\", \"withTitle\", \"withTooltip\", \"scrollActive\", \"horizontal\"], [1, \"igo-tool-container\", 3, \"ngClass\"], [3, \"component\", \"inputs\"]],\n    template: function ToolboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToolboxComponent_igo_actionbar_0_Template, 4, 12, \"igo-actionbar\", 0);\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵtemplate(2, ToolboxComponent_div_2_Template, 3, 9, \"div\", 1);\n        i0.ɵɵpipe(3, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 2, ctx.toolbar$).length > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 4, ctx.activeTool$));\n      }\n    },\n    directives: [i1$1.NgIf, ActionbarComponent, i1$1.NgClass, DynamicOutletComponent],\n    pipes: [i1$1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{display:block;position:relative;overflow:hidden;width:100%;height:100%}.igo-tool-container[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;left:0;right:0}.igo-tool-container-with-animation[_ngcontent-%COMP%]{transform:translate(100%)}.igo-tool-container-with-toolbar[_ngcontent-%COMP%]{left:50px}igo-actionbar[_ngcontent-%COMP%]{height:100%}igo-actionbar.with-title[_ngcontent-%COMP%]{width:100%;overflow:auto}igo-actionbar[_ngcontent-%COMP%]:not(.with-title){width:48px;overflow:hidden;-o-box-shadow:2px 0px 2px 0px #dddddd;box-shadow:2px 0 2px #ddd}@media only screen and (orientation:portrait) and (max-width: 599px),only screen and (orientation:landscape) and (max-width: 959px){igo-actionbar[_ngcontent-%COMP%]:not(.with-title){overflow:auto}}igo-dynamic-outlet[_ngcontent-%COMP%]{overflow:auto}\"],\n    data: {\n      animation: [toolSlideInOut()]\n    },\n    changeDetection: 0\n  });\n  return ToolboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoToolboxModule = /*#__PURE__*/(() => {\n  class IgoToolboxModule {}\n\n  IgoToolboxModule.ɵfac = function IgoToolboxModule_Factory(t) {\n    return new (t || IgoToolboxModule)();\n  };\n\n  IgoToolboxModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoToolboxModule\n  });\n  IgoToolboxModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IgoActionModule, IgoDynamicComponentModule]]\n  });\n  return IgoToolboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoToolboxModule, {\n    declarations: [ToolboxComponent],\n    imports: [CommonModule, IgoActionModule, IgoDynamicComponentModule],\n    exports: [ToolboxComponent]\n  });\n})();\n\nlet IgoToolModule = /*#__PURE__*/(() => {\n  class IgoToolModule {\n    static forRoot() {\n      return {\n        ngModule: IgoToolModule,\n        providers: [ToolService]\n      };\n    }\n\n  }\n\n  IgoToolModule.ɵfac = function IgoToolModule_Factory(t) {\n    return new (t || IgoToolModule)();\n  };\n\n  IgoToolModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoToolModule\n  });\n  IgoToolModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule], IgoToolboxModule]\n  });\n  return IgoToolModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoToolModule, {\n    imports: [CommonModule],\n    exports: [IgoToolboxModule]\n  });\n})();\n\nfunction WidgetOutletComponent_igo_dynamic_outlet_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"igo-dynamic-outlet\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"component\", ctx_r0.widget)(\"inputs\", ctx_r0.inputs)(\"subscribers\", ctx_r0.getEffectiveSubscribers());\n  }\n}\n/**\r\n * This component dynamically renders a widget. It also subscribes\r\n * to the widget's 'cancel' and 'complete' events and destroys it\r\n * when any of those event is emitted.\r\n */\n\n\nlet WidgetOutletComponent = /*#__PURE__*/(() => {\n  class WidgetOutletComponent {\n    constructor() {\n      /**\r\n       * Widget subscribers to 'cancel' and 'complete'\r\n       * @internal\r\n       */\n      this.baseSubscribers = {\n        cancel: event => this.onCancel(event),\n        complete: event => this.onComplete(event)\n      };\n      /**\r\n       * Widget subscribers\r\n       */\n\n      this.subscribers = {};\n      /**\r\n       * Event emitted when the widget emits 'complete'\r\n       */\n\n      this.complete = new EventEmitter();\n      /**\r\n       * Event emitted when the widget emits 'cancel'\r\n       */\n\n      this.cancel = new EventEmitter();\n    }\n    /**\r\n     * Destroy the current widget and all it's inner subscriptions\r\n     * @internal\r\n     */\n\n\n    ngOnDestroy() {\n      this.destroyWidget();\n    }\n    /**\r\n     * Get the effective subscribers. That means a combination of the base\r\n     * subscribers and any subscriber given as input.\r\n     * @returns Combined subscribers\r\n     * @internal\r\n     */\n\n\n    getEffectiveSubscribers() {\n      const subscribers = Object.assign({}, this.subscribers); // Base subscribers\n\n      Object.keys(this.baseSubscribers).forEach(key => {\n        const subscriber = subscribers[key];\n        const baseSubscriber = this.baseSubscribers[key];\n\n        if (subscriber !== undefined) {\n          subscribers[key] = event => {\n            subscriber(event);\n            baseSubscriber(event);\n          };\n        } else {\n          subscribers[key] = baseSubscriber;\n        }\n      });\n      return subscribers;\n    }\n    /**\r\n     * When the widget emits 'cancel', propagate that event and destroy\r\n     * the widget\r\n     */\n\n\n    onCancel(event) {\n      this.cancel.emit(event);\n      this.destroyWidget();\n    }\n    /**\r\n     * When the widget emits 'complete', propagate that event and destroy\r\n     * the widget\r\n     */\n\n\n    onComplete(event) {\n      this.complete.emit(event);\n      this.destroyWidget();\n    }\n    /**\r\n     * Destroy the current widget\r\n     */\n\n\n    destroyWidget() {\n      if (this.widget !== undefined) {\n        this.widget.destroy();\n      }\n\n      this.widget = undefined;\n    }\n\n  }\n\n  WidgetOutletComponent.ɵfac = function WidgetOutletComponent_Factory(t) {\n    return new (t || WidgetOutletComponent)();\n  };\n\n  WidgetOutletComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WidgetOutletComponent,\n    selectors: [[\"igo-widget-outlet\"]],\n    inputs: {\n      widget: \"widget\",\n      inputs: \"inputs\",\n      subscribers: \"subscribers\"\n    },\n    outputs: {\n      complete: \"complete\",\n      cancel: \"cancel\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"component\", \"inputs\", \"subscribers\", 4, \"ngIf\"], [3, \"component\", \"inputs\", \"subscribers\"]],\n    template: function WidgetOutletComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, WidgetOutletComponent_igo_dynamic_outlet_0_Template, 1, 3, \"igo-dynamic-outlet\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.widget);\n      }\n    },\n    directives: [i1$1.NgIf, DynamicOutletComponent],\n    styles: [\"igo-dynamic-outlet[_ngcontent-%COMP%]{height:100%}\"],\n    changeDetection: 0\n  });\n  return WidgetOutletComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoWidgetOutletModule = /*#__PURE__*/(() => {\n  class IgoWidgetOutletModule {}\n\n  IgoWidgetOutletModule.ɵfac = function IgoWidgetOutletModule_Factory(t) {\n    return new (t || IgoWidgetOutletModule)();\n  };\n\n  IgoWidgetOutletModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoWidgetOutletModule\n  });\n  IgoWidgetOutletModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IgoDynamicComponentModule]]\n  });\n  return IgoWidgetOutletModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoWidgetOutletModule, {\n    declarations: [WidgetOutletComponent],\n    imports: [CommonModule, IgoDynamicComponentModule],\n    exports: [WidgetOutletComponent]\n  });\n})();\n\nlet WidgetService = /*#__PURE__*/(() => {\n  class WidgetService {\n    constructor(dynamicComponentService) {\n      this.dynamicComponentService = dynamicComponentService;\n    }\n\n    create(widgetCls) {\n      return this.dynamicComponentService.create(widgetCls);\n    }\n\n  }\n\n  WidgetService.ɵfac = function WidgetService_Factory(t) {\n    return new (t || WidgetService)(i0.ɵɵinject(DynamicComponentService));\n  };\n\n  WidgetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WidgetService,\n    factory: WidgetService.ɵfac,\n    providedIn: 'root'\n  });\n  return WidgetService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoWidgetModule = /*#__PURE__*/(() => {\n  class IgoWidgetModule {}\n\n  IgoWidgetModule.ɵfac = function IgoWidgetModule_Factory(t) {\n    return new (t || IgoWidgetModule)();\n  };\n\n  IgoWidgetModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoWidgetModule\n  });\n  IgoWidgetModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [WidgetService],\n    imports: [[CommonModule, IgoWidgetOutletModule], IgoWidgetOutletModule]\n  });\n  return IgoWidgetModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoWidgetModule, {\n    imports: [CommonModule, IgoWidgetOutletModule],\n    exports: [IgoWidgetOutletModule]\n  });\n})();\n/**\r\n * Drop list that activates the selected workspace emit an event.\r\n */\n\n\nlet WorkspaceSelectorComponent = /*#__PURE__*/(() => {\n  class WorkspaceSelectorComponent {\n    constructor() {\n      /**\r\n       * Event emitted when an workspace is selected or unselected\r\n       */\n      this.selectedChange = new EventEmitter();\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    getWorkspaceTitle(workspace) {\n      return getEntityTitle(workspace);\n    }\n    /**\r\n     * When an workspace is manually selected, select it into the\r\n     * store and emit an event.\r\n     * @internal\r\n     * @param event The selection change event\r\n     */\n\n\n    onSelectedChange(event) {\n      const workspace = event.value;\n      this.store.activateWorkspace(workspace);\n      this.selectedChange.emit({\n        selected: true,\n        value: workspace\n      });\n    }\n\n  }\n\n  WorkspaceSelectorComponent.ɵfac = function WorkspaceSelectorComponent_Factory(t) {\n    return new (t || WorkspaceSelectorComponent)();\n  };\n\n  WorkspaceSelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WorkspaceSelectorComponent,\n    selectors: [[\"igo-workspace-selector\"]],\n    inputs: {\n      store: \"store\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\"\n    },\n    decls: 1,\n    vars: 4,\n    consts: [[3, \"store\", \"multi\", \"titleAccessor\", \"disabled\", \"selectedChange\"]],\n    template: function WorkspaceSelectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"igo-entity-selector\", 0);\n        i0.ɵɵlistener(\"selectedChange\", function WorkspaceSelectorComponent_Template_igo_entity_selector_selectedChange_0_listener($event) {\n          return ctx.onSelectedChange($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"store\", ctx.store)(\"multi\", false)(\"titleAccessor\", ctx.getWorkspaceTitle)(\"disabled\", ctx.disabled);\n      }\n    },\n    directives: [EntitySelectorComponent],\n    styles: [\"igo-entity-selector[_ngcontent-%COMP%]     mat-form-field .mat-form-field-infix{padding:0}igo-entity-selector[_ngcontent-%COMP%]     mat-form-field .mat-form-field-wrapper{padding-bottom:1.75em}\"],\n    changeDetection: 0\n  });\n  return WorkspaceSelectorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoWorkspaceSelectorModule = /*#__PURE__*/(() => {\n  class IgoWorkspaceSelectorModule {}\n\n  IgoWorkspaceSelectorModule.ɵfac = function IgoWorkspaceSelectorModule_Factory(t) {\n    return new (t || IgoWorkspaceSelectorModule)();\n  };\n\n  IgoWorkspaceSelectorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoWorkspaceSelectorModule\n  });\n  IgoWorkspaceSelectorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IgoEntitySelectorModule]]\n  });\n  return IgoWorkspaceSelectorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoWorkspaceSelectorModule, {\n    declarations: [WorkspaceSelectorComponent],\n    imports: [CommonModule, IgoEntitySelectorModule],\n    exports: [WorkspaceSelectorComponent]\n  });\n})();\n\nfunction WorkspaceWidgetOutletComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"igo-widget-outlet\", 1);\n    i0.ɵɵlistener(\"cancel\", function WorkspaceWidgetOutletComponent_ng_container_0_Template_igo_widget_outlet_cancel_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const widget_r1 = restoredCtx.ngIf;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onWidgetCancel(widget_r1);\n    })(\"complete\", function WorkspaceWidgetOutletComponent_ng_container_0_Template_igo_widget_outlet_complete_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const widget_r1 = restoredCtx.ngIf;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onWidgetComplete(widget_r1);\n    });\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const widget_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"widget\", widget_r1)(\"inputs\", i0.ɵɵpipeBind1(2, 3, ctx_r0.widgetInputs$))(\"subscribers\", i0.ɵɵpipeBind1(3, 5, ctx_r0.widgetSubscribers$));\n  }\n}\n/**\r\n * This component dynamically render an Workspace's active widget.\r\n * It also deactivate that widget whenever the widget's component\r\n * emit the 'cancel' or 'complete' event.\r\n */\n\n\nlet WorkspaceWidgetOutletComponent = /*#__PURE__*/(() => {\n  class WorkspaceWidgetOutletComponent {\n    constructor() {\n      /**\r\n       * Event emitted when a widget is deactivate which happens\r\n       * when the widget's component emits the 'cancel' or 'complete' event.\r\n       */\n      this.deactivateWidget = new EventEmitter();\n    }\n    /**\r\n     * Observable of the workspace's active widget\r\n     * @internal\r\n     */\n\n\n    get widget$() {\n      return this.workspace.widget$;\n    }\n    /**\r\n     * Observable of the workspace's widget inputs\r\n     * @internal\r\n     */\n\n\n    get widgetInputs$() {\n      return this.workspace.widgetInputs$;\n    }\n    /**\r\n     * Observable of the workspace's widget inputs\r\n     * @internal\r\n     */\n\n\n    get widgetSubscribers$() {\n      return this.workspace.widgetSubscribers$;\n    }\n    /**\r\n     * When a widget's component emit the 'cancel' event,\r\n     * deactivate that widget and emit the 'deactivateWidget' event.\r\n     * @param widget Widget\r\n     * @internal\r\n     */\n\n\n    onWidgetCancel(widget) {\n      this.workspace.deactivateWidget();\n      this.deactivateWidget.emit(widget);\n    }\n    /**\r\n     * When a widget's component emit the 'cancel' event,\r\n     * deactivate that widget and emit the 'deactivateWidget' event.\r\n     * @param widget Widget\r\n     * @internal\r\n     */\n\n\n    onWidgetComplete(widget) {\n      this.workspace.deactivateWidget();\n      this.deactivateWidget.emit(widget);\n    }\n\n  }\n\n  WorkspaceWidgetOutletComponent.ɵfac = function WorkspaceWidgetOutletComponent_Factory(t) {\n    return new (t || WorkspaceWidgetOutletComponent)();\n  };\n\n  WorkspaceWidgetOutletComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WorkspaceWidgetOutletComponent,\n    selectors: [[\"igo-workspace-widget-outlet\"]],\n    inputs: {\n      workspace: \"workspace\"\n    },\n    outputs: {\n      deactivateWidget: \"deactivateWidget\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [3, \"widget\", \"inputs\", \"subscribers\", \"cancel\", \"complete\"]],\n    template: function WorkspaceWidgetOutletComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, WorkspaceWidgetOutletComponent_ng_container_0_Template, 4, 7, \"ng-container\", 0);\n        i0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.widget$));\n      }\n    },\n    directives: [i1$1.NgIf, WidgetOutletComponent],\n    pipes: [i1$1.AsyncPipe],\n    styles: [\"igo-widget-outlet[_ngcontent-%COMP%]{height:100%}\"],\n    changeDetection: 0\n  });\n  return WorkspaceWidgetOutletComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @ignore\r\n */\n\n\nlet IgoWorkspaceWidgetOutletModule = /*#__PURE__*/(() => {\n  class IgoWorkspaceWidgetOutletModule {}\n\n  IgoWorkspaceWidgetOutletModule.ɵfac = function IgoWorkspaceWidgetOutletModule_Factory(t) {\n    return new (t || IgoWorkspaceWidgetOutletModule)();\n  };\n\n  IgoWorkspaceWidgetOutletModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoWorkspaceWidgetOutletModule\n  });\n  IgoWorkspaceWidgetOutletModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, IgoWidgetOutletModule]]\n  });\n  return IgoWorkspaceWidgetOutletModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoWorkspaceWidgetOutletModule, {\n    declarations: [WorkspaceWidgetOutletComponent],\n    imports: [CommonModule, IgoWidgetOutletModule],\n    exports: [WorkspaceWidgetOutletComponent]\n  });\n})();\n\nlet IgoWorkspaceModule = /*#__PURE__*/(() => {\n  class IgoWorkspaceModule {}\n\n  IgoWorkspaceModule.ɵfac = function IgoWorkspaceModule_Factory(t) {\n    return new (t || IgoWorkspaceModule)();\n  };\n\n  IgoWorkspaceModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoWorkspaceModule\n  });\n  IgoWorkspaceModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule], IgoWorkspaceSelectorModule, IgoWorkspaceWidgetOutletModule]\n  });\n  return IgoWorkspaceModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoWorkspaceModule, {\n    imports: [CommonModule],\n    exports: [IgoWorkspaceSelectorModule, IgoWorkspaceWidgetOutletModule]\n  });\n})();\n\nclass TableDatabase {\n  constructor(data) {\n    /** Stream that emits whenever the data has been modified. */\n    this.dataChange = new BehaviorSubject([]);\n\n    if (data) {\n      this.dataChange.next(data);\n    }\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  set(data) {\n    this.dataChange.next(data);\n  }\n\n  add(item) {\n    const copiedData = this.data.slice();\n    copiedData.push(item);\n    this.set(copiedData);\n  }\n\n  remove(item) {\n    const copiedData = this.data.slice();\n    const index = copiedData.indexOf(item);\n    copiedData.splice(index, 1);\n    this.set(copiedData);\n  }\n\n}\n\nfunction ToolComponent(tool) {\n  return compType => {\n    ToolService.register(Object.assign({}, tool, {\n      component: compType\n    }));\n  };\n}\n\nclass Widget extends DynamicComponent {}\n/**\r\n * The class is a specialized version of an EntityStore that stores\r\n * workspaces.\r\n */\n\n\nclass WorkspaceStore extends EntityStore {\n  constructor() {\n    super(...arguments);\n    this.activeWorkspace$ = new BehaviorSubject(undefined);\n  }\n  /**\r\n   * Activate the an workspace workspace and deactivate the one currently active\r\n   * @param workspace Workspace\r\n   */\n\n\n  activateWorkspace(workspace) {\n    const active = this.activeWorkspace$.value;\n\n    if (active !== undefined) {\n      active.deactivate();\n    }\n\n    this.deactivateWorkspace();\n\n    if (workspace !== undefined) {\n      this.state.update(workspace, {\n        active: true,\n        selected: true\n      }, true);\n      this.activeWorkspace$.next(workspace);\n      workspace.activate();\n    }\n  }\n  /**\r\n   * Deactivate the current workspace\r\n   * @param workspace Workspace\r\n   */\n\n\n  deactivateWorkspace() {\n    const active = this.activeWorkspace$.value;\n\n    if (active !== undefined) {\n      active.deactivate();\n      this.activeWorkspace$.next(undefined);\n    }\n  }\n\n}\n/**\r\n * This class is responsible of managing the relations between\r\n * entities and the actions that consume them. It also defines an\r\n * entity table template that may be used by an entity table component.\r\n */\n\n\nclass Workspace {\n  constructor(options) {\n    this.options = options;\n    /**\r\n     * Observable of the selected widget\r\n     */\n\n    this.widget$ = new BehaviorSubject(undefined);\n    /**\r\n     * Observable of the selected widget's inputs\r\n     */\n\n    this.widgetInputs$ = new BehaviorSubject({});\n    /**\r\n     * Observable of the selected widget's subscribers\r\n     */\n\n    this.widgetSubscribers$ = new BehaviorSubject({});\n    /**\r\n     * State change that trigger an update of the actions availability\r\n     */\n\n    this.change = new Subject();\n    this.active$ = new BehaviorSubject(false);\n  }\n  /**\r\n   * Workspace id\r\n   */\n\n\n  get id() {\n    return this.options.id;\n  }\n  /**\r\n   * Workspace title\r\n   */\n\n\n  get title() {\n    return this.options.title;\n  }\n  /**\r\n   * Workspace title\r\n   */\n\n\n  get meta() {\n    return this.options.meta || {};\n  }\n  /**\r\n   * Entities store\r\n   */\n\n\n  get entityStore() {\n    return this.options.entityStore;\n  }\n  /**\r\n   * Actions store (some actions activate a widget)\r\n   */\n\n\n  get actionStore() {\n    return this.options.actionStore;\n  }\n  /**\r\n   * Selected widget\r\n   */\n\n\n  get widget() {\n    return this.widget$.value;\n  }\n  /**\r\n   * Whether a widget is selected\r\n   */\n\n\n  get hasWidget() {\n    return this.widget !== undefined;\n  }\n  /**\r\n   * Whether this strategy is active\r\n   * @internal\r\n   */\n\n\n  get active() {\n    return this.active$.value;\n  }\n  /**\r\n   * Activate the workspace. By doing that, the workspace will observe\r\n   * the selected entity (from the store) and update the actions availability.\r\n   * For example, some actions require an entity to be selected.\r\n   */\n\n\n  activate() {\n    if (this.active === true) {\n      this.deactivate();\n    }\n\n    this.active$.next(true);\n\n    if (this.entityStore !== undefined) {\n      this.entities$$ = this.entityStore.stateView.all$().subscribe(() => this.onStateChange());\n    }\n\n    this.change.next();\n  }\n  /**\r\n   * Deactivate the workspace. Unsubcribe to the selected entity.\r\n   */\n\n\n  deactivate() {\n    this.active$.next(false);\n    this.deactivateWidget();\n\n    if (this.entities$$ !== undefined) {\n      this.entities$$.unsubscribe();\n    }\n\n    if (this.change$ !== undefined) {\n      this.change$.unsubscribe();\n    }\n  }\n  /**\r\n   * Activate a widget. In itself, activating a widget doesn't render it but,\r\n   * if an WorkspaceWidgetOutlet component is bound to this workspace, the widget will\r\n   * show up.\r\n   * @param widget Widget\r\n   * @param inputs Inputs the widget will receive\r\n   */\n\n\n  activateWidget(widget, inputs = {}, subscribers = {}) {\n    this.widget$.next(widget);\n    this.widgetInputs$.next(inputs);\n    this.widgetSubscribers$.next(subscribers);\n    this.change.next();\n  }\n  /**\r\n   * Deactivate a widget.\r\n   */\n\n\n  deactivateWidget() {\n    this.widget$.next(undefined);\n    this.change.next();\n  }\n  /**\r\n   * When the state changes, update the actions availability.\r\n   */\n\n\n  onStateChange() {\n    this.change.next();\n  }\n\n}\n/*\r\n * Public API Surface of common\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ActionStore, ActionbarComponent, ActionbarMode, BackdropComponent, ClickoutDirective, ClonePipe, CollapseDirective, CollapsibleComponent, ConfirmDialogComponent, ConfirmDialogService, ContextMenuDirective, CustomHtmlComponent, DragAndDropDirective, DynamicComponent, DynamicComponentService, DynamicOutletComponent, EntityOperationType, EntitySelectorComponent, EntityStateManager, EntityStore, EntityStoreFilterCustomFuncStrategy, EntityStoreFilterSelectionStrategy, EntityStoreStrategy, EntityStoreWatcher, EntityTableColumnRenderer, EntityTableComponent, EntityTablePaginatorComponent, EntityTableScrollBehavior, EntityTableSelectionState, EntityTransaction, EntityView, FlexibleComponent, FormComponent, FormFieldComponent, FormFieldSelectComponent, FormFieldService, FormFieldTextComponent, FormFieldTextareaComponent, FormGroupComponent, FormService, HomeButtonComponent, IgoActionModule, IgoActionbarModule, IgoBackdropModule, IgoBadgeIconDirective, IgoClickoutModule, IgoCloneModule, IgoCollapsibleModule, IgoConfirmDialogModule, IgoContextMenuModule, IgoCustomHtmlModule, IgoDrapDropModule, IgoDynamicComponentModule, IgoDynamicOutletModule, IgoEntityModule, IgoEntitySelectorModule, IgoEntityTableModule, IgoEntityTablePaginatorModule, IgoFlexibleModule, IgoFormFieldComponent, IgoFormFieldModule, IgoFormFormModule, IgoFormGroupModule, IgoFormModule, IgoHomeButtonModule, IgoImageModule, IgoInteractiveTourModule, IgoJsonDialogModule, IgoKeyValueModule, IgoListModule, IgoMatBadgeIconModule, IgoPanelModule, IgoSidenavModule, IgoSpinnerModule, IgoStopPropagationModule, IgoTableModule, IgoToolModule, IgoToolboxModule, IgoWidgetModule, IgoWidgetOutletModule, IgoWorkspaceModule, IgoWorkspaceSelectorModule, IgoWorkspaceWidgetOutletModule, InteractiveTourComponent, InteractiveTourLoader, InteractiveTourService, JsonDialogComponent, JsonDialogService, KeyValuePipe, ListComponent, ListItemDirective, PanelComponent, SanitizeHtmlPipe, SecureImagePipe, SidenavShimDirective, SpinnerActivityDirective, SpinnerComponent, StopDropPropagationDirective, StopPropagationDirective, TableActionColor, TableComponent, TableDataSource, TableDatabase, ToolComponent, ToolService, Toolbox, ToolboxColor, ToolboxComponent, Widget, WidgetOutletComponent, WidgetService, Workspace, WorkspaceSelectorComponent, WorkspaceStore, WorkspaceWidgetOutletComponent, formControlIsRequired, getAllFormFields, getControlErrorMessage, getDefaultErrorMessages, getEntityIcon, getEntityId, getEntityProperty, getEntityRevision, getEntityTitle, getEntityTitleHtml, getFormFieldByName };","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\entity.enums.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\entity.utils.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\state.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\view.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\store.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\watcher.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\transaction.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\strategies\\strategy.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\strategies\\filter-custom-function.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\shared\\strategies\\filter-selection.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-selector\\entity-selector.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-selector\\entity-selector.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\stop-propagation\\stop-propagation.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table\\entity-table-row.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table-paginator\\entity-table-paginator.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table-paginator\\entity-table-paginator.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\image\\secure-image.pipe.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\custom-html\\custom-html.pipe.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table\\entity-table.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table\\entity-table.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\shared\\action.enums.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\actionbar\\actionbar-item.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\actionbar\\actionbar-item.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\actionbar\\actionbar.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\actionbar\\actionbar.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\actionbar\\actionbar.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\action.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\backdrop\\backdrop.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\backdrop\\backdrop.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\backdrop\\backdrop.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\badge-icon\\badge-icon.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\badge-icon\\badge-icon.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\clickout\\clickout.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\clickout\\clickout.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\clone\\clone.pipe.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\clone\\clone.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\collapsible\\collapse.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\collapsible\\collapsible.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\collapsible\\collapsible.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\collapsible\\collapsible.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\confirm-dialog\\confirm-dialog.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\confirm-dialog\\confirm-dialog.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\confirm-dialog\\confirm-dialog.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\confirm-dialog\\confirm-dialog.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\context-menu\\context-menu.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\context-menu\\context-menu.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\custom-html\\custom-html.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\custom-html\\custom-html.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\custom-html\\custom-html.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\drag-drop\\drag-drop.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\drag-drop\\drag-drop.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\shared\\dynamic-component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\shared\\dynamic-component.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\dynamic-outlet\\dynamic-outlet.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\dynamic-outlet\\dynamic-outlet.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\dynamic-outlet\\dynamic-outlet.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\dynamic-component\\dynamic-component.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\flexible\\flexible.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\flexible\\flexible.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\flexible\\flexible.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\shared\\form.utils.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form\\form.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form\\form.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form\\form.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\shared\\form.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\shared\\form-field.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\shared\\form-field-component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-select.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-select.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-text.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-text.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-textarea.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field-textarea.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-field\\form-field.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-group\\form-group.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-group\\form-group.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form-group\\form-group.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\form\\form.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\home-button\\home-button.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\home-button\\home-button.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\home-button\\home-button.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-selector\\entity-selector.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\stop-propagation\\stop-drop-propagation.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\stop-propagation\\stop-propagation.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table-paginator\\entity-table-paginator.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\image\\image.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity-table\\entity-table.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\entity\\entity.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\interactive-tour\\interactive-tour.loader.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\interactive-tour\\interactive-tour.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\shared\\toolbox.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\shared\\tool.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\interactive-tour\\interactive-tour.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\interactive-tour\\interactive-tour.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\interactive-tour\\interactive-tour.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\keyvalue\\keyvalue.pipe.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\keyvalue\\keyvalue.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\json-dialog\\json-dialog.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\json-dialog\\json-dialog.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\json-dialog\\json-dialog.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\json-dialog\\json-dialog.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\list\\list-item.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\list\\list.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\list\\list.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\list\\list.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\panel\\panel.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\panel\\panel.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\panel\\panel.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\sidenav\\sidenav-shim.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\sidenav\\sidenav.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\spinner\\spinner.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\spinner\\spinner.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\spinner\\spinner-activity.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\spinner\\spinner.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table-datasource.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table-action-color.enum.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\action\\shared\\store.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\shared\\toolbox.enums.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\toolbox\\toolbox.animation.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\toolbox\\toolbox.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\toolbox\\toolbox.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\toolbox\\toolbox.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\tool.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\widget-outlet\\widget-outlet.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\widget-outlet\\widget-outlet.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\widget-outlet\\widget-outlet.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\shared\\widget.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\widget.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-selector\\workspace-selector.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-selector\\workspace-selector.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-selector\\workspace-selector.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-widget-outlet\\workspace-widget-outlet.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-widget-outlet\\workspace-widget-outlet.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace-widget-outlet\\workspace-widget-outlet.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\workspace.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\table\\table-database.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\tool\\shared\\tool-component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\widget\\shared\\widget.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\shared\\store.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\lib\\workspace\\shared\\workspace.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\common\\src\\public_api.ts"],"names":[],"mappings":"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","sourcesContent":["export enum EntityOperationType {\n  Insert = 'Insert',\n  Update = 'Update',\n  Delete = 'Delete'\n}\n\nexport enum EntityTableColumnRenderer {\n  Default = 'Default',\n  HTML = 'HTML',\n  UnsanitizedHTML = 'UnsanitizedHTML',\n  Editable = 'Editable',\n  Icon = 'Icon',\n  ButtonGroup = 'ButtonGroup'\n}\n\nexport enum EntityTableScrollBehavior {\n  Auto = 'auto',\n  Instant = 'instant',\n  Smooth = 'smooth'\n}\n\nexport enum EntityTableSelectionState {\n  None = 'None',\n  All = 'All',\n  Some = 'Some'\n}\n","import t from 'typy';\n\nimport { EntityKey } from './entity.interfaces';\n\n/**\n * Get an entity's named property. Nested properties are supported\n * with the dotted notation. (i.e 'author.name')\n *\n * Note: this method is a 'best attempt' at getting an entity's property.\n * It fits the most common cases but you might need to explicitely define\n * a property getter when using an EntityStore, for example.\n * @param entity Entity\n * @param property Property name\n * @returns Property value\n */\nexport function getEntityProperty(entity: object, property: string): any {\n  return t(entity, property).safeObject;\n}\n\n/**\n * Get an entity's id. An entity's id can be one of:\n * 'entity.meta.id', 'entity.meta.idProperty' or 'entity.id'.\n *\n * Note: See the note in the 'getEntityProperty' documentation.\n * @param entity Entity\n * @returns Entity id\n */\nexport function getEntityId(entity: object): EntityKey {\n  const meta = (entity as any).meta || {};\n  return meta.id ? meta.id : getEntityProperty(entity, meta.idProperty || 'id');\n}\n\n/**\n * Get an entity's title. An entity's title can be one of:\n * 'entity.meta.title', 'entity.meta.titleProperty' or 'entity.title'.\n * @param entity Entity\n * @returns Entity title\n */\nexport function getEntityTitle(entity: object): string {\n  const meta = (entity as any).meta || {};\n  return meta.title ? meta.title : getEntityProperty(entity, meta.titleProperty || 'title');\n}\n\n/**\n * Get an entity's HTML title. An entity's HTML title can be one of:\n * 'entity.meta.titleHtml', 'entity.meta.titleHtmlProperty' or 'entity.titleHtml'.\n * @param entity Entity\n * @returns Entity HTML title\n */\nexport function getEntityTitleHtml(entity: object): string {\n  const meta = (entity as any).meta || {};\n  return meta.titleHtml ? meta.titleHtml : getEntityProperty(entity, meta.titleHtmlProperty || 'titleHtml');\n}\n\n/**\n * Get an entity's icon. An entity's icon can be one of:\n * 'entity.meta.icon', 'entity.meta.iconProperty' or 'entity.icon'.\n * @param entity Entity\n * @returns Entity icon\n */\nexport function getEntityIcon(entity: object): string {\n  const meta = (entity as any).meta || {};\n  return meta.icon ? meta.icon : getEntityProperty(entity, meta.iconProperty || 'icon');\n}\n\n/**\n * Get an entity's revision.\n * @param entity Entity\n * @returns Entity revision\n */\nexport function getEntityRevision(entity: object): number {\n  const meta = (entity as any).meta || {};\n  return meta.revision || 0;\n}\n","import { ReplaySubject } from 'rxjs';\n\nimport { EntityKey, EntityState, EntityStateManagerOptions } from './entity.interfaces';\nimport { getEntityId } from './entity.utils';\nimport { EntityStore } from './store';\n\n/**\n * This class is used to track a store's entities state\n */\nexport class EntityStateManager<E extends object, S extends EntityState = EntityState> {\n\n  /**\n   * State index\n   */\n  readonly index = new Map<EntityKey, S>();\n\n  /**\n   * Change emitter\n   */\n  readonly change$ = new ReplaySubject<void>(1);\n\n  /**\n   * Method to get an entity's id\n   */\n  readonly getKey: (E) => EntityKey;\n\n  private store: EntityStore<object> | undefined;\n\n  constructor(options: EntityStateManagerOptions = {}) {\n    this.store = options.store ? options.store : undefined;\n    this.getKey = options.getKey\n      ? options.getKey\n      : (this.store ? this.store.getKey : getEntityId);\n    this.next();\n  }\n\n  /**\n   * Clear state\n   */\n  clear() {\n    if (this.index.size > 0) {\n      this.index.clear();\n      this.next();\n    }\n  }\n\n  /**\n   * Get an entity's state\n   * @param entity Entity\n   * @returns State\n   */\n  get(entity: E): S {\n    return (this.index.get(this.getKey(entity)) || {}) as S;\n  }\n\n  /**\n   * Set an entity's state\n   * @param entity Entity\n   * @param state State\n   */\n  set(entity: E, state: S) {\n    this.setMany([entity], state);\n  }\n\n  /**\n   * Set many entitie's state\n   * @param entitie Entities\n   * @param state State\n   */\n  setMany(entities: E[], state: S) {\n    entities.forEach((entity: E) => {\n      this.index.set(this.getKey(entity), Object.assign({}, state));\n    });\n    this.next();\n  }\n\n  /**\n   * Set state of all entities that already have a state. This is not\n   * the same as setting the state of all the store's entities.\n   * @param state State\n   */\n  setAll(state: S) {\n    Array.from(this.index.keys()).forEach((key: EntityKey) => {\n      this.index.set(key, Object.assign({}, state));\n    });\n    this.next();\n  }\n\n  /**\n   * Update an entity's state\n   * @param entity Entity\n   * @param changes State changes\n   */\n  update(entity: E, changes: Partial<S>, exclusive = false) {\n    this.updateMany([entity], changes, exclusive);\n  }\n\n  /**\n   * Update many entitie's state\n   * @param entitie Entities\n   * @param changes State changes\n   */\n  updateMany(entities: E[], changes: Partial<S>, exclusive = false) {\n    if (exclusive === true) {\n      return this.updateManyExclusive(entities, changes);\n    }\n\n    entities.forEach((entity: E) => {\n      const state = Object.assign({}, this.get(entity), changes);\n      this.index.set(this.getKey(entity), state);\n    });\n    this.next();\n  }\n\n  /**\n   * Reversee an entity's state\n   * @param entity Entity\n   * @param keys State keys to reverse\n   */\n  reverse(entity: E, keys: string[]) {\n    this.reverseMany([entity], keys);\n  }\n\n  /**\n   * Reverse many entitie's state\n   * @param entitie Entities\n   * @param keys State keys to reverse\n   */\n  reverseMany(entities: E[], keys: string[]) {\n    entities.forEach((entity: E) => {\n      const currentState = this.get(entity);\n      const changes = keys.reduce((acc: {[key: string]: boolean}, key: string) => {\n        acc[key] = currentState[key] || false;\n        return acc;\n      }, {}) as Partial<S>;\n      const reversedChanges = this.reverseChanges(changes);\n      const state = Object.assign({}, currentState, reversedChanges);\n      this.index.set(this.getKey(entity), state);\n    });\n    this.next();\n  }\n\n  /**\n   * Update state of all entities that already have a state. This is not\n   * the same as updating the state of all the store's entities.\n   * @param changes State\n   */\n  updateAll(changes: Partial<S>) {\n    const allKeys = this.getAllKeys();\n    Array.from(allKeys).forEach((key: EntityKey) => {\n      const state = Object.assign({}, this.index.get(key), changes);\n      this.index.set(key, state);\n    });\n    this.next();\n  }\n\n  /**\n   * When some state changes are flagged as 'exclusive', reverse\n   * the state of all other entities. Changes are reversable when\n   * they are boolean.\n   * @param entitie Entities\n   * @param changes State changes\n   */\n  private updateManyExclusive(entities: E[], changes: Partial<S>) {\n    const reverseChanges = this.reverseChanges(changes);\n\n    const keys = entities.map((entity: E) => this.getKey(entity));\n    const allKeys = new Set(keys.concat(Array.from(this.getAllKeys())));\n    allKeys.forEach((key: EntityKey) => {\n      const state = this.index.get(key) || {} as S;\n\n      if (keys.indexOf(key) >= 0) {\n        this.index.set(key, Object.assign({}, state, changes));\n      } else {\n        // Update only if the reverse changes would modify\n        // a key already present in the current state\n        const shouldUpdate = Object.keys(reverseChanges).some((changeKey: string) => {\n          return state[changeKey] !== undefined &&\n            state[changeKey] !== reverseChanges[changeKey];\n        });\n        if (shouldUpdate === true) {\n          this.index.set(key, Object.assign({}, state, reverseChanges));\n        }\n      }\n    });\n\n    this.next();\n  }\n\n  /**\n   * Compute a 'reversed' version of some state changes.\n   * Changes are reversable when they are boolean.\n   * @param changes State changes\n   * @returns Reversed state changes\n   */\n  private reverseChanges(changes: Partial<S>): Partial<S> {\n    return Object.entries(changes).reduce((reverseChanges: Partial<S>, bunch: [string, any]) => {\n      const [changeKey, value] = bunch;\n      if (typeof value === typeof true) {\n        (reverseChanges as object)[changeKey] = !value;\n      }\n      return reverseChanges;\n    }, {});\n  }\n\n  /**\n   * Return all the keys in that state and in the store it's bound to, if any.\n   * @returns Set of keys\n   */\n  private getAllKeys(): Set<EntityKey> {\n    const storeKeys = this.store ? Array.from(this.store.index.keys()) : [];\n    return new Set(Array.from(this.index.keys()).concat(storeKeys));\n  }\n\n  /**\n   * Emit 'change' event\n   */\n  private next() {\n    this.change$.next();\n  }\n\n}\n","import { BehaviorSubject, Observable, Subscription, combineLatest } from 'rxjs';\nimport { debounceTime, map, skip } from 'rxjs/operators';\n\nimport { ObjectUtils, uuid } from '@igo2/utils';\nimport {\n  EntityKey,\n  EntityFilterClause,\n  EntitySortClause,\n  EntityJoinClause\n} from './entity.interfaces';\n\n/**\n * An entity view streams entities from an observable source. These entities\n * can be filtered or sorted without affecting the source. A view can also\n * combine data from multiple sources, joined together.\n */\nexport class EntityView<E extends object, V extends object = E> {\n\n  /**\n   * Observable stream of values\n   */\n  readonly values$ = new BehaviorSubject<V[]>([]);\n\n  /**\n   * Subscription to the source (and joined sources) values\n   */\n  private values$$: Subscription;\n\n  /**\n   * Whether this view has been lifted\n   */\n  private lifted = false;\n\n  /**\n   * Join clauses\n   */\n  private joins: EntityJoinClause[] = [];\n\n  /**\n   * Observable of a filter clause\n   */\n  private filter$ = new BehaviorSubject(undefined);\n\n  /**\n   * Observable of filter clauses\n   */\n  private filters$: BehaviorSubject<EntityFilterClause[]> = new BehaviorSubject([]);\n\n  /**\n   * Filters index\n   */\n  private filterIndex: Map<string, EntityFilterClause> = new Map();\n\n  /**\n   * Observable of a sort clause\n   */\n  private sort$ = new BehaviorSubject(undefined);\n\n  /**\n   * Method for indexing\n   */\n  get getKey(): (V) => EntityKey { return this.getKey$.value; }\n  private getKey$: BehaviorSubject<(V) => EntityKey> = new BehaviorSubject(undefined);\n\n  /**\n   * Number of entities\n   */\n  readonly count$ = new BehaviorSubject<number>(0);\n  get count(): number { return this.count$.value; }\n\n  /**\n   * Whether the store is empty\n   */\n  readonly empty$ = new BehaviorSubject<boolean>(true);\n  get empty(): boolean { return this.empty$.value; }\n\n  /**\n   * Store index\n   */\n  get index(): Map<EntityKey, V> { return this._index; }\n  private _index: Map<EntityKey, V>;\n\n  constructor(private source$: BehaviorSubject<E[]>) {}\n\n  /**\n   * Get a value from the view by key\n   * @param key Key\n   * @returns Value\n   */\n  get(key: EntityKey): V {\n    if (this._index === undefined) {\n      throw new Error('This view has no index, therefore, this method is unavailable.');\n    }\n    return this.index.get(key);\n  }\n\n  /**\n   * Get all the values\n   * @returns Array of values\n   */\n  all(): V[] {\n    return this.values$.value;\n  }\n\n  /**\n   * Observe all the values\n   * @returns Observable of values\n   */\n  all$(): BehaviorSubject<V[]> {\n    return this.values$;\n  }\n\n  /**\n   * Get the first value that respects a criteria\n   * @returns A value\n   */\n  firstBy(clause: EntityFilterClause<V>): V {\n    return this.values$.value.find(clause);\n  }\n\n  /**\n   * Observe the first value that respects a criteria\n   * @returns Observable of a value\n   */\n  firstBy$(clause: EntityFilterClause<V>): Observable<V> {\n    return this.values$.pipe(map((values: V[]) => values.find(clause)));\n  }\n\n  /**\n   * Get all the values that respect a criteria\n   * @returns Array of values\n   */\n  manyBy(clause: EntityFilterClause<V>): V[] {\n    return this.values$.value.filter(clause);\n  }\n\n  /**\n   * Observe all the values that respect a criteria\n   * @returns Observable of values\n   */\n  manyBy$(clause: EntityFilterClause<V>): Observable<V[]> {\n    return this.values$.pipe(map((values: V[]) => values.filter(clause)));\n  }\n\n  /**\n   * Clear the filter and sort and unsubscribe from the source\n   */\n  clear() {\n    this.filter(undefined);\n    this.sort(undefined);\n  }\n\n  destroy() {\n    if (this.values$$ !== undefined) {\n      this.values$$.unsubscribe();\n    }\n    this.clear();\n  }\n\n  /**\n   * Create an index\n   * @param getKey Method to get a value's id\n   * @returns The view\n   */\n  createIndex(getKey: (E) => EntityKey): EntityView<E, V> {\n    this._index = new Map();\n    this.getKey$.next(getKey);\n    return this;\n  }\n\n  /**\n   * Join another source to the stream (chainable)\n   * @param clause Join clause\n   * @returns The view\n   */\n  join(clause: EntityJoinClause): EntityView<E, V> {\n    if (this.lifted === true) {\n      throw new Error('This view has already been lifted, therefore, no join is allowed.');\n    }\n    this.joins.push(clause);\n    return this;\n  }\n\n  /**\n   * Filter values (chainable)\n   * @param clause Filter clause\n   * @returns The view\n   */\n  filter(clause: EntityFilterClause<V>): EntityView<E, V> {\n    this.filter$.next(clause);\n    return this;\n  }\n\n  /**\n   * @param clause Filter clause\n   * @returns The filter id\n   */\n  addFilter(clause: EntityFilterClause<V>): string {\n    const id = uuid();\n    this.filterIndex.set(id, clause);\n    this.filters$.next(Array.from(this.filterIndex.values()));\n    return id;\n  }\n\n  /**\n   * Remove a filter by id\n   * @param clause Filter clause\n   */\n  removeFilter(id: string) {\n    this.filterIndex.delete(id);\n    this.filters$.next(Array.from(this.filterIndex.values()));\n  }\n\n  /**\n   * Sort values (chainable)\n   * @param clauseSort clause\n   * @returns The view\n   */\n  sort(clause: EntitySortClause<V>): EntityView<E, V> {\n    this.sort$.next(clause);\n    return this;\n  }\n\n  /**\n   * Create the final observable\n   * @returns Observable\n   */\n  lift() {\n    this.lifted = true;\n    const source$ = this.joins.length > 0 ? this.liftJoinedSource() : this.liftSource();\n    const observables$ = [\n      source$,\n      this.filters$,\n      this.filter$,\n      this.sort$,\n      this.getKey$\n    ];\n\n    this.values$$ = combineLatest(observables$)\n      .pipe(skip(1), debounceTime(5))\n      .subscribe((bunch: [V[], EntityFilterClause[], EntityFilterClause, EntitySortClause, (V) => EntityKey]) => {\n        const [_values, filters, filter, sort, getKey] = bunch;\n        const values = this.processValues(_values, filters, filter, sort);\n        const generateIndex = getKey !== undefined;\n        this.setValues(values, generateIndex);\n      });\n  }\n\n  /**\n   * Create the source observable when no joins are defined\n   * @returns Observable\n   */\n  private liftSource(): Observable<V[]> {\n    return this.source$ as any as Observable<V[]>;\n  }\n\n  /**\n   * Create the source observable when joins are defined\n   * @returns Observable\n   */\n  private liftJoinedSource(): Observable<V[]> {\n    const sources$ = [this.source$, combineLatest(\n      this.joins.map((join: EntityJoinClause) => join.source)\n    )];\n\n    return combineLatest(sources$)\n      .pipe(\n        map((bunch: [E[], any[]]) => {\n          const [entities, joinData] = bunch;\n          return entities.reduce((values: V[], entity: E) => {\n            const value = this.computeJoinedValue(entity, joinData);\n            if (value !== undefined) {\n              values.push(value);\n            }\n            return values;\n          }, []);\n        })\n      );\n  }\n\n  /**\n   * Apply joins to a source's entity and return the final value\n   * @returns Final value\n   */\n  private computeJoinedValue(entity: E, joinData: any[]): V | undefined {\n    let value = entity as Partial<V>;\n    let joinIndex = 0;\n    while (value !== undefined && joinIndex < this.joins.length) {\n      value = this.joins[joinIndex].reduce(value, joinData[joinIndex]);\n      joinIndex += 1;\n    }\n    return value as V;\n  }\n\n  /**\n   * Filter and sort values before streaming them\n   * @param values Values\n   * @param filters Filter clauses\n   * @param filter Filter clause\n   * @param sort Sort clause\n   * @returns Filtered and sorted values\n   */\n  private processValues(\n    values: V[], filters: EntityFilterClause[], filter: EntityFilterClause, sort: EntitySortClause\n  ): V[] {\n    values = values.slice(0);\n    values = this.filterValues(values, filters.concat([filter]));\n    values = this.sortValues(values, sort);\n    return values;\n  }\n\n  /**\n   * Filter values\n   * @param values Values\n   * @param filters Filter clauses\n   * @returns Filtered values\n   */\n  private filterValues(values: V[], clauses: EntityFilterClause[]): V[] {\n    if (clauses.length === 0) { return values; }\n\n    return values\n      .filter((value: V) => {\n        return clauses\n          .filter((clause: EntityFilterClause) => clause !== undefined)\n          .every((clause: EntityFilterClause) => clause(value));\n      });\n  }\n\n  /**\n   * Sort values\n   * @param values Values\n   * @param sort Sort clause\n   * @returns Sorted values\n   */\n  private sortValues(values: V[], clause: EntitySortClause): V[] {\n    if (clause === undefined) { return values; }\n    return values.sort((v1: V, v2: V) => {\n      return ObjectUtils.naturalCompare(\n        clause.valueAccessor(v1),\n        clause.valueAccessor(v2),\n        clause.direction,\n        clause.nullsFirst\n      );\n    });\n  }\n\n  /**\n   * Set value and optionally generate an index\n   * @param values Values\n   * @param generateIndex boolean\n   */\n  private setValues(values: V[], generateIndex: boolean) {\n    if (generateIndex === true) {\n      this._index = this.generateIndex(values);\n    }\n\n    this.values$.next(values);\n\n    const count = values.length;\n    const empty = count === 0;\n    this.count$.next(count);\n    this.empty$.next(empty);\n  }\n\n  /**\n   * Generate a complete index of all the values\n   * @param entities Entities\n   * @returns Index\n   */\n  private generateIndex(values: V[]): Map<EntityKey, V> {\n    const entries = values.map((value: V) => [this.getKey(value), value]);\n    return new Map(entries as [EntityKey, V][]);\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\n\nimport { EntityStateManager } from './state';\nimport { EntityView } from './view';\nimport { EntityKey, EntityState, EntityRecord, EntityStoreOptions } from './entity.interfaces';\nimport { getEntityId, getEntityProperty } from './entity.utils';\nimport { EntityStoreStrategy } from './strategies/strategy';\n\n/**\n * An entity store class holds any number of entities\n * as well as their state. It can be observed, filtered and sorted and\n * provides methods to insert, update or delete entities.\n */\nexport class EntityStore<E extends object = object, S extends EntityState = EntityState> {\n\n  /**\n   * Observable of the raw entities\n   */\n  readonly entities$ = new BehaviorSubject<E[]>([]);\n\n  /**\n   * Number of entities\n   */\n  readonly count$ = new BehaviorSubject<number>(0);\n  get count(): number { return this.count$.value; }\n\n  /**\n   * Whether the store is empty\n   */\n  readonly empty$ = new BehaviorSubject<boolean>(true);\n  get empty(): boolean { return this.empty$.value; }\n\n  /**\n   * Entity store state\n   */\n  readonly state: EntityStateManager<E, S>;\n\n  /**\n   * View of all the entities\n   */\n  readonly view: EntityView<E>;\n\n  /**\n   * View of all the entities and their state\n   */\n  readonly stateView: EntityView<E, EntityRecord<E, S>>;\n\n  /**\n   * Method to get an entity's id\n   */\n  readonly getKey: (E) => EntityKey;\n\n  /**\n   * Method to get an entity's named property\n   */\n  readonly getProperty: (E, prop: string) => any;\n\n  /**\n   * Store index\n   */\n  get index(): Map<EntityKey, E> { return this._index; }\n  private _index: Map<EntityKey, E>;\n\n  /**\n   * Store index\n   */\n  get pristine(): boolean { return this._pristine; }\n  private _pristine: boolean = true;\n\n  /**\n   * Strategies\n   */\n  private strategies: EntityStoreStrategy[] = [];\n\n  constructor(entities: E[], options: EntityStoreOptions = {}) {\n    this.getKey = options.getKey ? options.getKey : getEntityId;\n    this.getProperty = options.getProperty ? options.getProperty : getEntityProperty;\n\n    this.state = this.createStateManager();\n    this.view = this.createDataView();\n    this.stateView = this.createStateView();\n\n    this.view.lift();\n    this.stateView.lift();\n\n    if (entities.length > 0) {\n      this.load(entities);\n    } else {\n      this._index = this.generateIndex(entities);\n    }\n  }\n\n  /**\n   * Get an entity from the store by key\n   * @param key Key\n   * @returns Entity\n   */\n  get(key: EntityKey): E {\n    return this.index.get(key);\n  }\n\n  /**\n   * Get all entities in the store\n   * @returns Array of entities\n   */\n  all(): E[] {\n    return this.entities$.value;\n  }\n\n  /**\n   * Set this store's entities\n   * @param entities Entities\n   */\n  load(entities: E[], pristine: boolean = true) {\n    this._index = this.generateIndex(entities);\n    this._pristine = pristine;\n    this.next();\n  }\n\n  /**\n   * Clear the store's entities but keep the state and views intact.\n   * Views won't return any data but future data will be subject to the\n   * current views filter and sort\n   */\n  softClear() {\n    if (this.index && this.index.size > 0) {\n      this.index.clear();\n      this._pristine = true;\n      this.next();\n    } else if (this.index) {\n      this.updateCount();\n    }\n  }\n\n  /**\n   * Clear the store's entities, state and views\n   */\n  clear() {\n    this.stateView.clear();\n    this.view.clear();\n    this.state.clear();\n    this.softClear();\n  }\n\n  destroy() {\n    this.stateView.destroy();\n    this.view.destroy();\n    this.clear();\n  }\n\n  /**\n   * Insert an entity into the store\n   * @param entity Entity\n   */\n  insert(entity: E) {\n    this.insertMany([entity]);\n  }\n\n  /**\n   * Insert many entities into the store\n   * @param entities Entities\n   */\n  insertMany(entities: E[]) {\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\n    this._pristine = false;\n    this.next();\n  }\n\n  /**\n   * Update or insert an entity into the store\n   * @param entity Entity\n   */\n  update(entity: E) {\n    this.updateMany([entity]);\n  }\n\n  /**\n   * Update or insert many entities into the store\n   * @param entities Entities\n   */\n  updateMany(entities: E[]) {\n    entities.forEach((entity: E) => this.index.set(this.getKey(entity), entity));\n    this._pristine = false;\n    this.next();\n  }\n\n  /**\n   * Delete an entity from the store\n   * @param entity Entity\n   */\n  delete(entity: E) {\n    this.deleteMany([entity]);\n  }\n\n  /**\n   * Delete many entities from the store\n   * @param entities Entities\n   */\n  deleteMany(entities: E[]) {\n    entities.forEach((entity: E) => this.index.delete(this.getKey(entity)));\n    this._pristine = false;\n    this.next();\n  }\n\n  /**\n   * Add a strategy to this store\n   * @param strategy Entity store strategy\n   * @returns Entity store\n   */\n  addStrategy(strategy: EntityStoreStrategy, activate: boolean = false): EntityStore {\n    const existingStrategy = this.strategies.find((_strategy: EntityStoreStrategy) => {\n      return strategy.constructor === _strategy.constructor;\n    });\n    if (existingStrategy !== undefined) {\n      throw new Error('A strategy of this type already exists on that EntityStore.');\n    }\n\n    this.strategies.push(strategy);\n    strategy.bindStore(this);\n\n    if (activate === true) {\n      strategy.activate();\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a strategy from this store\n   * @param strategy Entity store strategy\n   * @returns Entity store\n   */\n  removeStrategy(strategy: EntityStoreStrategy): EntityStore {\n    const index = this.strategies.indexOf(strategy);\n    if (index >= 0) {\n      this.strategies.splice(index, 1);\n      strategy.unbindStore(this);\n    }\n    return this;\n  }\n\n  /**\n   * Return strategies of a given type\n   * @param type Entity store strategy class\n   * @returns Strategies\n   */\n  getStrategyOfType(type: typeof EntityStoreStrategy): EntityStoreStrategy {\n    return this.strategies.find((strategy: EntityStoreStrategy) => {\n      return strategy instanceof type;\n    });\n  }\n\n  /**\n   * Activate strategies of a given type\n   * @param type Entity store strategy class\n   */\n  activateStrategyOfType(type: typeof EntityStoreStrategy) {\n    const strategy = this.getStrategyOfType(type);\n    if (strategy !== undefined) {\n      strategy.activate();\n    }\n  }\n\n  /**\n   * Deactivate strategies of a given type\n   * @param type Entity store strategy class\n   */\n  deactivateStrategyOfType(type: typeof EntityStoreStrategy) {\n    const strategy = this.getStrategyOfType(type);\n    if (strategy !== undefined) {\n      strategy.deactivate();\n    }\n  }\n\n  /**\n   * Generate a complete index of all the entities\n   * @param entities Entities\n   * @returns Index\n   */\n  private generateIndex(entities: E[]): Map<EntityKey, E> {\n    const entries = entities.map((entity: E) => [this.getKey(entity), entity]);\n    return new Map(entries as [EntityKey, E][]);\n  }\n\n  /**\n   * Push the index's entities into the entities$ observable\n   */\n  private next() {\n    this.entities$.next(Array.from(this.index.values()));\n    this.updateCount();\n  }\n\n  /**\n   * Update the store's count and empty\n   */\n  private updateCount() {\n    const count = this.index.size;\n    const empty = count === 0;\n    this.count$.next(count);\n    this.empty$.next(empty);\n  }\n\n  /**\n   * Create the entity state manager\n   * @returns EntityStateManager\n   */\n  private createStateManager() {\n    return new EntityStateManager<E, S>({store: this});\n  }\n\n  /**\n   * Create the data view\n   * @returns EntityView<E>\n   */\n  private createDataView() {\n    return new EntityView<E>(this.entities$);\n  }\n\n  /**\n   * Create the state view\n   * @returns EntityView<EntityRecord<E>>\n   */\n  private createStateView() {\n    return new EntityView<E, EntityRecord<E, S>>(this.view.all$())\n      .join({\n        source: this.state.change$,\n        reduce: (entity: E): EntityRecord<E, S> => {\n          const key = this.getKey(entity);\n          const state = this.state.get(entity);\n          const currentRecord = this.stateView.get(key);\n\n          if (\n            currentRecord !== undefined &&\n            currentRecord.entity === entity &&\n            this.statesAreTheSame(currentRecord.state, state)\n          ) {\n            return currentRecord;\n          }\n\n          const revision = currentRecord ? currentRecord.revision + 1 : 1;\n          const ref = `${key}-${revision}`;\n          return {entity, state, revision, ref};\n        }\n      })\n      .createIndex((record: EntityRecord<E, S>) => this.getKey(record.entity));\n  }\n\n  private statesAreTheSame(currentState: S, newState: S): boolean {\n    if (currentState === newState) {\n      return true;\n    }\n\n    const currentStateIsEmpty = Object.keys(currentState).length === 0;\n    const newStateIsEmpty = Object.keys(newState).length === 0;\n    return currentStateIsEmpty && newStateIsEmpty;\n  }\n\n}\n","import { ChangeDetectorRef } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\n\nimport { ObjectUtils } from '@igo2/utils';\nimport { EntityKey } from './entity.interfaces';\n\nimport { EntityStore } from './store';\n\n/**\n * This class is used to synchronize a component's changes\n * detection with an EntityStore changes. For example, it is frequent\n * to have a component subscribe to a store's selected entity and, at the same time,\n * this component provides a way to select an entity with, let's say, a click.\n *\n * This class automatically handles those case and triggers the compoent's\n * change detection when needed.\n *\n * Note: If the component observes the store's stateView, a workspace is\n * probably not required because the stateView catches any changes to the\n * entities and their state.\n */\nexport class EntityStoreWatcher<E extends object> {\n\n  /**\n   * Component change detector\n   */\n  private cdRef: ChangeDetectorRef;\n\n  /**\n   * Entity store\n   */\n  private store: EntityStore<E>;\n\n  /**\n   * Component inner state\n   */\n  private innerStateIndex = new Map<EntityKey, {[key: string]: any}>();\n\n  /**\n   * Subscription to the store's entities\n   */\n  private entities$$: Subscription;\n\n  /**\n   * Subscription to the store's state\n   */\n  private state$$: Subscription;\n\n  constructor(store?: EntityStore<E>, cdRef?: ChangeDetectorRef) {\n    this.setChangeDetector(cdRef);\n    this.setStore(store);\n  }\n\n  destroy() {\n    this.setChangeDetector(undefined);\n    this.setStore(undefined);\n  }\n\n  /**\n   * Bind this workspace to a store and start watching for changes\n   * @param store Entity store\n   */\n  setStore(store?: EntityStore<E>) {\n    if (store === undefined) {\n      this.teardownObservers();\n      this.innerStateIndex.clear();\n      this.store = undefined;\n      return;\n    }\n\n    this.setStore(undefined);\n    this.store = store;\n    this.setupObservers();\n    this.detectChanges();\n  }\n\n  /**\n   * Bind this workspace to a component's change detector\n   * @param cdRef Change detector\n   */\n  setChangeDetector(cdRef?: ChangeDetectorRef) {\n    this.cdRef = cdRef;\n  }\n\n  /**\n   * Set up observers on a store's entities and their state\n   * @param store Entity store\n   */\n  private setupObservers() {\n    this.teardownObservers();\n\n    this.entities$$ = this.store.entities$\n      .subscribe((entities: E[]) => this.onEntitiesChange(entities));\n\n    this.state$$ = this.store.state.change$\n      .pipe(skip(1))\n      .subscribe(() => this.onStateChange());\n  }\n\n  /**\n   * Teardown store observers\n   */\n  private teardownObservers() {\n    if (this.entities$$ !== undefined) {\n      this.entities$$.unsubscribe();\n    }\n    if (this.state$$ !== undefined) {\n      this.state$$.unsubscribe();\n    }\n    this.entities$$ = undefined;\n    this.state$$ = undefined;\n  }\n\n  /**\n   * When the entities change, always trigger the changes detection\n   */\n  private onEntitiesChange(entities: E[]) {\n    this.detectChanges();\n  }\n\n  /**\n   * When the entities state change, trigger the change detection\n   * only if the component has not handled these changes yet. For example,\n   * the component might have initiated thoses changes itself.\n   */\n  private onStateChange() {\n    let changesDetected = false;\n    const storeIndex = this.store.state.index;\n    const innerIndex = this.innerStateIndex;\n\n    if (storeIndex.size !== innerIndex.size) {\n      changesDetected = this.detectChanges();\n    }\n\n    const storeKeys = Array.from(storeIndex.keys());\n    for (const key of storeKeys) {\n      const storeValue = storeIndex.get(key);\n      const innerValue = innerIndex.get(key);\n      if (changesDetected === false) {\n        if (innerValue === undefined) {\n          changesDetected = this.detectChanges();\n        } else if (!ObjectUtils.objectsAreEquivalent(storeValue, innerValue)) {\n          changesDetected = this.detectChanges();\n        }\n      }\n\n      this.innerStateIndex.set(key, Object.assign({}, storeValue));\n    }\n  }\n\n  /**\n   * Trigger the change detection of the workspace is bound to a change detector\n   */\n  private detectChanges() {\n    if (this.cdRef !== undefined) {\n      this.cdRef.detectChanges();\n    }\n    return true;\n  }\n\n}\n","import { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  EntityKey,\n  EntityTransactionOptions,\n  EntityOperation,\n  EntityOperationState\n} from './entity.interfaces';\nimport { EntityStore } from './store';\nimport { EntityOperationType } from './entity.enums';\nimport { getEntityId } from './entity.utils';\n\nexport type EntityTransactionCommitHandler = (\n  transaction: EntityTransaction,\n  operations: EntityOperation[]\n) => Observable<any>;\n\n/**\n * This class holds a reference to the insert, update and delete\n * operations performed on a store. This is useful to commit\n * these operations in a single pass or to cancel them.\n */\nexport class EntityTransaction {\n\n  /**\n   * Store holding the operations on another store\n   */\n  readonly operations: EntityStore<EntityOperation, EntityOperationState>;\n\n  /**\n   * Method to get an entity's id\n   */\n  readonly getKey: (E) => EntityKey;\n\n  /**\n   * Whether there are pending operations\n   */\n  get empty$(): BehaviorSubject<boolean> { return this.operations.empty$; }\n\n  /**\n   * Whether there are pending operations\n   */\n  get empty(): boolean { return this.empty$.value; }\n\n  /**\n   * Whether thise store is in commit phase\n   */\n  get inCommitPhase(): boolean { return this.inCommitPhase$.value; }\n  readonly inCommitPhase$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(options: EntityTransactionOptions = {}) {\n    this.getKey = options.getKey ? options.getKey : getEntityId;\n    this.operations = new EntityStore<EntityOperation, EntityOperationState>([], {\n      getKey: (operation: EntityOperation) => operation.key\n    });\n  }\n\n  destroy() {\n    this.operations.destroy();\n  }\n\n  /**\n   * Insert an entity into a store. If no store is specified, an insert\n   * operation is still created but the transaction won't add the new\n   * entity to the store.\n   * @param current The entity to insert\n   * @param store Optional: The store to insert the entity into\n   * @param meta Optional: Any metadata on the operation\n   */\n  insert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    const existingOperation = this.getOperationByEntity(current);\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n    }\n\n    this.doInsert(current, store, meta);\n  }\n\n  /**\n   * Update an entity in a store. If no store is specified, an update\n   * operation is still created but the transaction won't update the\n   * entity into the store.\n   * @param previous The entity before update\n   * @param current The entity after update\n   * @param store Optional: The store to update the entity into\n   * @param meta Optional: Any metadata on the operation\n   */\n  update(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    const existingOperation = this.getOperationByEntity(current);\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n      if (existingOperation.type === EntityOperationType.Insert) {\n        this.doInsert(current, store, meta);\n        return;\n      } else if (existingOperation.type === EntityOperationType.Update) {\n        previous = existingOperation.previous;\n      }\n    }\n\n    this.doUpdate(previous, current, store, meta);\n  }\n\n  /**\n   * Delete an entity from a store. If no store is specified, a delete\n   * operation is still created but the transaction won't remove the\n   * entity from the store.\n   * @param previous The entity before delete\n   * @param store Optional: The store to delete the entity from\n   * @param meta Optional: Any metadata on the operation\n   */\n  delete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    const existingOperation = this.getOperationByEntity(previous);\n    if (existingOperation !== undefined) {\n      this.removeOperation(existingOperation);\n      if (existingOperation.type === EntityOperationType.Insert) {\n        if (store !== undefined) {\n          store.delete(previous);\n        }\n        return;\n      }\n    }\n\n    this.doDelete(previous, store, meta);\n  }\n\n  /**\n   * Commit operations the transaction. This method doesn't do much\n   * in itself. The handler it receives does the hard work and it's\n   * implementation is left to the caller. This method simply wraps\n   * the handler into an error catching mechanism to update\n   * the transaction afterward. The caller needs to subscribe to this\n   * method's output (observable) for the commit to be performed.\n   * @param operations Operations to commit\n   * @param handler Function that handles the commit operation\n   * @returns The handler output (observable)\n   */\n  commit(operations: EntityOperation[], handler: EntityTransactionCommitHandler): Observable<any> {\n    this.inCommitPhase$.next(true);\n\n    return handler(this, operations)\n      .pipe(\n        catchError(() => of(new Error())),\n        tap((result: any) => {\n          if (result instanceof Error) {\n            this.onCommitError(operations);\n          } else {\n            this.onCommitSuccess(operations);\n          }\n        })\n      );\n  }\n\n  /**\n   * Commit all the operations of the transaction.\n   * @param handler Function that handles the commit operation\n   * @returns The handler output (observable)\n   */\n  commitAll(handler: EntityTransactionCommitHandler): Observable<any> {\n    const operations = this.getOperationsInCommit();\n    return this.commit(operations, handler);\n  }\n\n  /**\n   * Rollback this transaction\n   */\n  rollback() {\n    this.rollbackOperations(this.operations.all());\n  }\n\n  /**\n   * Rollback specific operations\n   */\n  rollbackOperations(operations: EntityOperation[]) {\n    this.checkInCommitPhase();\n\n    const operationsFactory = () => new Map([\n      [EntityOperationType.Delete, []],\n      [EntityOperationType.Update, []],\n      [EntityOperationType.Insert, []]\n    ]);\n    const storesOperations = new Map();\n\n    // Group operations by store and by operation type.\n    // Grouping operations allows us to revert them in bacth, thus, triggering\n    // observables only one per operation type.\n    for (const operation of operations) {\n      const store = operation.store;\n      if (operation.store === undefined) { continue; }\n\n      let storeOperations = storesOperations.get(store);\n      if (storeOperations === undefined) {\n        storeOperations = operationsFactory();\n        storesOperations.set(store, storeOperations);\n      }\n      storeOperations.get(operation.type).push(operation);\n    }\n\n    Array.from(storesOperations.keys()).forEach((store: EntityStore<object>) => {\n      const storeOperations = storesOperations.get(store);\n\n      const deletes = storeOperations.get(EntityOperationType.Delete);\n      store.insertMany(deletes.map((_delete: EntityOperation) => _delete.previous));\n\n      const updates = storeOperations.get(EntityOperationType.Update);\n      store.updateMany(updates.map((_update: EntityOperation) => _update.previous));\n\n      const inserts = storeOperations.get(EntityOperationType.Insert);\n      store.deleteMany(inserts.map((_insert: EntityOperation) => _insert.current));\n    });\n\n    this.operations.deleteMany(operations);\n    this.inCommitPhase$.next(false);\n  }\n\n  /**\n   * Clear this transaction\n   * @todo Raise event and synchronize stores?\n   */\n  clear() {\n    this.operations.clear();\n    this.inCommitPhase$.next(false);\n  }\n\n  /**\n   * Get any existing operation on an entity\n   * @param entity Entity\n   * @returns Either an insert, update or delete operation\n   */\n  getOperationByEntity(entity: object): EntityOperation {\n    return this.operations.get(this.getKey(entity));\n  }\n\n  /**\n   * Merge another transaction in this one\n   * @param transaction Another transaction\n   */\n  mergeTransaction(transaction: EntityTransaction) {\n    this.checkInCommitPhase();\n\n    const operations = transaction.operations.all();\n    operations.forEach((operation: EntityOperation) => {\n      this.addOperation(operation);\n    });\n  }\n\n  /**\n   * Create an insert operation and add an entity to the store\n   * @param current The entity to insert\n   * @param store Optional: The store to insert the entity into\n   * @param meta Optional: Any metadata on the operation\n   */\n  private doInsert(current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    this.addOperation({\n      key: this.getKey(current),\n      type: EntityOperationType.Insert,\n      previous: undefined,\n      current,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.insert(current);\n    }\n  }\n\n  /**\n   * Create an update operation and update an entity into the store\n   * @param previous The entity before update\n   * @param current The entity after update\n   * @param store Optional: The store to update the entity into\n   * @param meta Optional: Any metadata on the operation\n   */\n  private doUpdate(previous: object, current: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    this.addOperation({\n      key: this.getKey(current),\n      type: EntityOperationType.Update,\n      previous,\n      current,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.update(current);\n    }\n  }\n\n  /**\n   * Create a delete operation and delete an entity from the store\n   * @param previous The entity before delete\n   * @param store Optional: The store to delete the entity from\n   * @param meta Optional: Any metadata on the operation\n   */\n  private doDelete(previous: object, store?: EntityStore<object>, meta?: {[key: string]: any}) {\n    this.addOperation({\n      key: this.getKey(previous),\n      type: EntityOperationType.Delete,\n      previous,\n      current: undefined,\n      store,\n      meta\n    });\n\n    if (store !== undefined) {\n      store.delete(previous);\n    }\n  }\n\n  /**\n   * Remove committed operations from store\n   * @param operations Commited operations\n   * @todo Raise event and synchronize stores?\n   */\n  private resolveOperations(operations: EntityOperation[]) {\n    this.operations.deleteMany(operations);\n  }\n\n  /**\n   * On commit success, resolve commited operations and exit commit phase\n   * @param operations Commited operations\n   */\n  private onCommitSuccess(operations: EntityOperation[]) {\n    this.resolveOperations(operations);\n    this.inCommitPhase$.next(false);\n  }\n\n  /**\n   * On commit error, abort transaction\n   * @param operations Commited operations\n   */\n  private onCommitError(operations: EntityOperation[]) {\n    this.inCommitPhase$.next(false);\n  }\n\n  /**\n   * Add an operation to the operations store\n   * @param operation Operation to add\n   */\n  private addOperation(operation: EntityOperation) {\n    this.checkInCommitPhase();\n\n    this.operations.insert(operation);\n    this.operations.state.update(operation, {added: true});\n  }\n\n  /**\n   * Remove an operation from the operations store\n   * @param operation Operation to remove\n   */\n  private removeOperation(operation: EntityOperation) {\n    this.checkInCommitPhase();\n\n    this.operations.delete(operation);\n    this.operations.state.update(operation, {added: false});\n  }\n\n  /**\n   * Get all the operations to commit\n   * @returns Operations to commit\n   */\n  private getOperationsInCommit(): EntityOperation[] {\n    return this.operations.stateView\n      .manyBy((value: {entity: EntityOperation, state: EntityOperationState}) => {\n        return value.state.added === true;\n      })\n      .map((value: {entity: EntityOperation, state: EntityOperationState}) => value.entity);\n  }\n\n  /**\n   * Check if the transaction is in the commit phase and throw an error if it is\n   */\n  private checkInCommitPhase() {\n    if (this.inCommitPhase === true) {\n      throw new Error('This transaction is in the commit phase. Cannot complete this operation.');\n    }\n  }\n}\n","import { BehaviorSubject } from 'rxjs';\n\nimport { EntityStoreStrategyOptions } from '../entity.interfaces';\nimport { EntityStore } from '../store';\n\n/**\n * Entity store strategies. They can do pretty much anything during a store's\n * lifetime. For example, they may act as triggers when something happens.\n * Sharing a strategy is a good idea when multiple strategies would have\n * on cancelling effect on each other.\n *\n * At creation, strategy is inactive and needs to be manually activated.\n */\nexport class EntityStoreStrategy {\n\n  /**\n   * Feature store\n   * @internal\n   */\n  protected stores: EntityStore[] = [];\n\n  /**\n   * Whether this strategy is active\n   * @internal\n   */\n  get active(): boolean { return this.active$.value; }\n  readonly active$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(protected options: EntityStoreStrategyOptions = {}) {\n    this.options = options;\n  }\n\n  /**\n   * Activate the strategy. If it's already active, it'll be deactivated\n   * and activated again.\n   */\n  activate() {\n    if (this.active === true) {\n      this.doDeactivate();\n    }\n    this.active$.next(true);\n    this.doActivate();\n  }\n\n  /**\n   * Activate the strategy. If it's already active, it'll be deactivated\n   * and activated again.\n   */\n  deactivate() {\n    this.active$.next(false);\n    this.doDeactivate();\n  }\n\n  /**\n   * Bind this strategy to a store\n   * @param store Feature store\n   */\n  bindStore(store: EntityStore) {\n    if (this.stores.indexOf(store) < 0) {\n      this.stores.push(store);\n    }\n  }\n\n  /**\n   * Unbind this strategy from store\n   * @param store Feature store\n   */\n  unbindStore(store: EntityStore) {\n    const index = this.stores.indexOf(store);\n    if (index >= 0) {\n      this.stores.splice(index, 1);\n    }\n  }\n\n  /**\n   * Do the stataegy activation\n   * @internal\n   */\n  protected doActivate() {}\n\n  /**\n   * Do the strategy deactivation\n   * @internal\n   */\n  protected doDeactivate() {}\n\n}\n","import { EntityStoreStrategyFuncOptions } from '../entity.interfaces';\nimport { EntityStore } from '../store';\nimport { EntityStoreStrategy } from './strategy';\n\n/**\n * When active, this strategy filters a store's stateView to return\n * selected entities only.\n */\nexport class EntityStoreFilterCustomFuncStrategy extends EntityStoreStrategy {\n\n  constructor(protected options: EntityStoreStrategyFuncOptions) {\n    super(options);\n  }\n\n  /**\n   * Store / filter ids map\n   */\n  private filters: Map<EntityStore, string> = new Map();\n\n  /**\n   * Bind this strategy to a store and start filtering it\n   * @param store Entity store\n   */\n  bindStore(store: EntityStore) {\n    super.bindStore(store);\n    if (this.active === true) {\n      this.filterStore(store);\n    }\n  }\n\n  /**\n   * Unbind this strategy from a store and stop filtering it\n   * @param store Entity store\n   */\n  unbindStore(store: EntityStore) {\n    super.unbindStore(store);\n    if (this.active === true) {\n      this.unfilterStore(store);\n    }\n  }\n\n  /**\n   * Start filtering all stores\n   * @internal\n   */\n  protected doActivate() {\n    this.filterAll();\n  }\n\n  /**\n   * Stop filtering all stores\n   * @internal\n   */\n  protected doDeactivate() {\n    this.unfilterAll();\n  }\n\n  /**\n   * Filter all stores\n   */\n  private filterAll() {\n    this.stores.forEach((store: EntityStore) => this.filterStore(store));\n  }\n\n  /**\n   * Unfilter all stores\n   */\n  private unfilterAll() {\n    this.stores.forEach((store: EntityStore) => this.unfilterStore(store));\n  }\n\n  /**\n   * Filter a store and add it to the filters map\n   */\n  private filterStore(store: EntityStore) {\n    this.filters.set(store, store.stateView.addFilter(this.options.filterClauseFunc));\n  }\n\n  /**\n   * Unfilter a store and delete it from the filters map\n   */\n  private unfilterStore(store: EntityStore) {\n    const filterId = this.filters.get(store);\n    if (filterId === undefined) {\n      return;\n    }\n\n    store.stateView.removeFilter(filterId);\n    this.filters.delete(store);\n  }\n}\n","import { EntityRecord } from '../entity.interfaces';\nimport { EntityStore } from '../store';\nimport { EntityStoreStrategy } from './strategy';\n\n/**\n * When active, this strategy filters a store's stateView to return\n * selected entities only.\n */\nexport class EntityStoreFilterSelectionStrategy extends EntityStoreStrategy {\n\n  /**\n   * Store / filter ids map\n   */\n  private filters: Map<EntityStore, string> = new Map();\n\n  /**\n   * Bind this strategy to a store and start filtering it\n   * @param store Entity store\n   */\n  bindStore(store: EntityStore) {\n    super.bindStore(store);\n    if (this.active === true) {\n      this.filterStore(store);\n    }\n  }\n\n  /**\n   * Unbind this strategy from a store and stop filtering it\n   * @param store Entity store\n   */\n  unbindStore(store: EntityStore) {\n    super.unbindStore(store);\n    if (this.active === true) {\n      this.unfilterStore(store);\n    }\n  }\n\n  /**\n   * Start filtering all stores\n   * @internal\n   */\n  protected doActivate() {\n    this.filterAll();\n  }\n\n  /**\n   * Stop filtering all stores\n   * @internal\n   */\n  protected doDeactivate() {\n    this.unfilterAll();\n  }\n\n  /**\n   * Filter all stores\n   */\n  private filterAll() {\n    this.stores.forEach((store: EntityStore) => this.filterStore(store));\n  }\n\n  /**\n   * Unfilter all stores\n   */\n  private unfilterAll() {\n    this.stores.forEach((store: EntityStore) => this.unfilterStore(store));\n  }\n\n  /**\n   * Filter a store and add it to the filters map\n   */\n  private filterStore(store: EntityStore) {\n    if (this.filters.has(store)) {\n      return;\n    }\n\n    const filter = (record: EntityRecord<object>) => {\n      return record.state.selected === true;\n    };\n    this.filters.set(store, store.stateView.addFilter(filter));\n  }\n\n  /**\n   * Unfilter a store and delete it from the filters map\n   */\n  private unfilterStore(store: EntityStore) {\n    const filterId = this.filters.get(store);\n    if (filterId === undefined) {\n      return;\n    }\n\n    store.stateView.removeFilter(filterId);\n    this.filters.delete(store);\n  }\n}\n","<mat-form-field class=\"igo-entity-selector\">\n  <mat-select\n    [disabled]=\"disabled\"\n    [value]=\"selected$ | async\"\n    [multiple]=\"multi\"\n    [placeholder]=\"placeholder\"\n    (selectionChange)=\"onSelectionChange($event)\">\n    <mat-option *ngIf=\"emptyText !== undefined && multi === false\" [value]=\"emptyValue\">{{emptyText}}</mat-option>\n    <mat-option *ngIf=\"multi === true\" [value]=\"multiSelectValue\">{{multiText$ | async}}</mat-option>\n    <ng-template ngFor let-record [ngForOf]=\"store.stateView.all$() | async\">\n      <mat-option [value]=\"record.entity\">\n        {{titleAccessor(record.entity)}}\n      </mat-option>\n    </ng-template>\n  </mat-select>\n</mat-form-field>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { EntityRecord } from '../shared/entity.interfaces';\nimport { EntityStore } from '../shared/store';\nimport { EntityStoreWatcher } from '../shared/watcher';\nimport { getEntityTitle } from '../shared/entity.utils';\n\n@Component({\n  selector: 'igo-entity-selector',\n  templateUrl: './entity-selector.component.html',\n  styleUrls: ['./entity-selector.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EntitySelectorComponent implements OnInit, OnDestroy {\n\n  /**\n   * The selected entity\n   * @internal\n   */\n  readonly selected$ = new BehaviorSubject<object>(undefined);\n\n  /**\n   * The current multi select option text\n   * @internal\n   */\n  readonly multiText$ = new BehaviorSubject<string>(undefined);\n\n  readonly multiSelectValue = {id: 'IGO_MULTI_SELECT'};\n\n  readonly emptyValue = {id: 'IGO_EMPTY_SELECT'};\n\n  /**\n   * Subscription to the selected entity\n   */\n  private selected$$: Subscription;\n\n  /**\n   * Store watcher\n   */\n  private watcher: EntityStoreWatcher<object>;\n\n  /**\n   * Entity store\n   */\n  @Input() store: EntityStore<object>;\n\n  /**\n   * Title accessor\n   */\n  @Input() titleAccessor: (object) => string = getEntityTitle;\n\n  /**\n   * Text to display when nothing is selected\n   */\n  @Input() emptyText: string = undefined;\n\n  /**\n   * Wheter selecting many entities is allowed\n   */\n  @Input() multi: boolean = false;\n\n  /**\n   * Text to display for the select all option\n   */\n  @Input() multiAllText: string = 'All';\n\n  /**\n   * Text to display for the select none option\n   */\n  @Input() multiNoneText: string = 'None';\n\n  /**\n   * Field placeholder\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Wheter the selector is disabled or not\n   */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Event emitted when the selection changes\n   */\n  @Output() selectedChange = new EventEmitter<{\n    selected: boolean;\n    value: object | object[];\n  }>();\n\n  constructor(private cdRef: ChangeDetectorRef) {}\n\n  /**\n   * Create a store watcher and subscribe to the selected entity\n   * @internal\n   */\n  ngOnInit() {\n    this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\n\n    this.selected$$ = this.store.stateView\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\n      .subscribe((records: EntityRecord<object>[]) => {\n        const entities = records.map((record: EntityRecord<object>) => record.entity);\n        this.onSelectFromStore(entities);\n      });\n  }\n\n  /**\n   * Unsubscribe to the selected entity and destroy the store watcher\n   * @internal\n   */\n  ngOnDestroy() {\n    this.watcher.destroy();\n    this.selected$$.unsubscribe();\n  }\n\n  /**\n   * On selection change, update the store's state and emit an event\n   * @internal\n   */\n  onSelectionChange(event: {value: object | undefined}) {\n    const values = event.value instanceof Array ? event.value : [event.value];\n\n    const multiSelect = values.find((_value: object) => _value === this.multiSelectValue);\n    let entities = values.filter((_value: object) => _value !== this.multiSelectValue);\n    if (multiSelect !== undefined) {\n      if (entities.length === this.store.count) {\n        entities = [];\n      } else if (entities.length < this.store.count) {\n        entities = this.store.all();\n      }\n    }\n\n    entities = entities.filter((entity: object) => entity !== this.emptyValue);\n    if (entities.length === 0) {\n      this.store.state.updateAll({selected: false});\n    } else {\n      this.store.state.updateMany(entities, {selected: true}, true);\n    }\n\n    const value = this.multi ? entities : event.value;\n    this.selectedChange.emit({selected: true, value});\n  }\n\n  private onSelectFromStore(entities: object[]) {\n    if (this.multi === true) {\n      this.selected$.next(entities);\n    } else {\n      const entity = entities.length > 0 ? entities[0] : undefined;\n      this.selected$.next(entity);\n    }\n\n    this.updateMultiToggleWithEntities(entities);\n  }\n\n  private updateMultiToggleWithEntities(entities: object[]) {\n    if (entities.length === this.store.count && this.multiText$.value !== this.multiNoneText) {\n      this.multiText$.next(this.multiNoneText);\n    } else if (entities.length < this.store.count && this.multiText$.value !== this.multiAllText) {\n      this.multiText$.next(this.multiAllText);\n    }\n  }\n\n}\n","import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[igoStopPropagation]'\n})\nexport class StopPropagationDirective {\n  @HostListener('click', ['$event'])\n  public onClick(event: any): void {\n    event.stopPropagation();\n  }\n}\n","import {\n  Directive,\n  Input,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Output,\n  HostListener\n} from '@angular/core';\n\nimport scrollIntoView from 'scroll-into-view-if-needed';\n\nimport { EntityTableScrollBehavior } from '../shared/entity.enums';\n\n/**\n * Directive that handles an entity table row click and selection.\n */\n@Directive({\n  selector: '[igoEntityTableRow]'\n})\nexport class EntityTableRowDirective {\n\n  /**\n   * Class added to a selected row\n   */\n  static selectedCls = 'igo-entity-table-row-selected';\n\n  /**\n   * Class added to a highlighted row\n   */\n  static highlightedCls = 'igo-entity-table-row-highlighted';\n\n  /**\n   * Whether a row supports selection\n   */\n  @Input() selection = false;\n\n  /**\n   * Whether clicking a row should select it (if selection is true)\n   */\n  @Input() selectOnClick: boolean = true;\n\n  /**\n   * Whether the selected row should be highlighted\n   */\n  @Input() highlightSelection: boolean = true;\n\n  /**\n   * Whether a row is selected\n   */\n  @Input()\n  set selected(value: boolean) {\n    if (this.selection === false) { return; }\n    if (value === this._selected) { return; }\n\n    this.toggleSelected(value);\n    this.scroll();\n  }\n  get selected(): boolean {\n    return this._selected;\n  }\n  private _selected = false;\n\n  /**\n   * Scroll behavior on selection\n   */\n  @Input()\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\n\n  /**\n   * Event emitted when a row is selected\n   */\n  @Output() select = new EventEmitter<EntityTableRowDirective>();\n\n  /**\n   * When a row is clicked, select it if it's supported\n   * @ignore\n   */\n  @HostListener('click')\n  onClick() {\n    if (this.selection === false || this.selectOnClick === false) {\n      return;\n    }\n\n    this.toggleSelected(true);\n    this.select.emit(this);\n  }\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  /**\n   * Select a row and add or remove the selected class from it\n   * @param selected Whether the row should be selected\n   */\n  private toggleSelected(selected: boolean) {\n    this._selected = selected;\n    if (selected === true) {\n      this.addCls(EntityTableRowDirective.selectedCls);\n      if (this.highlightSelection === true) {\n        this.addCls(EntityTableRowDirective.highlightedCls);\n      }\n    } else {\n      this.removeCls(EntityTableRowDirective.selectedCls);\n      this.removeCls(EntityTableRowDirective.highlightedCls);\n    }\n  }\n\n  /**\n   * Scroll to the selected row\n   */\n  private scroll() {\n    if (this._selected === true) {\n      scrollIntoView(this.el.nativeElement, {\n        scrollMode: 'if-needed',\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'nearest'\n      });\n    }\n  }\n\n  /**\n   * Add the selected CSS class\n   */\n  private addCls(cls: string) {\n    this.renderer.addClass(this.el.nativeElement, cls);\n  }\n\n  /**\n   * Remove the selected CSS class\n   */\n  private removeCls(cls: string) {\n    this.renderer.removeClass(this.el.nativeElement, cls);\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  OnChanges,\n  ViewChild,\n  Output,\n  EventEmitter,\n  OnDestroy\n} from '@angular/core';\n\nimport {\n  EntityStore\n} from '../shared';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { LanguageService, MediaService } from '@igo2/core';\nimport { EntityTablePaginatorOptions } from './entity-table-paginator.interface';\n\n@Component({\n  selector: 'igo-entity-table-paginator',\n  templateUrl: './entity-table-paginator.component.html',\n  styleUrls: ['./entity-table-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EntityTablePaginatorComponent implements OnChanges, OnDestroy {\n\n  public disabled: boolean = false;\n  public hidePageSize: boolean = false;\n  public pageIndex: number = 0;\n  public pageSize: number = 50;\n  public pageSizeOptions: number[] = [5, 10, 20, 50, 100, 200];\n  public showFirstLastButtons: boolean = true;\n  private count$$: Subscription;\n  private entitySortChange$$: Subscription;\n  private paginationLabelTranslation$$: Subscription[] = [];\n\n  @Input() entitySortChange$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  /**\n   * Entity store\n   */\n  @Input() store: EntityStore<object>;\n\n  /**\n   * Paginator options\n   */\n  @Input()\n  paginatorOptions: EntityTablePaginatorOptions;\n\n  /**\n   * Event emitted when the paginator changes the page size or page index.\n   */\n  @Output() page: EventEmitter<PageEvent>;\n\n  public length: number = 0;\n\n  /**\n   * Paginator emitted.\n   */\n  @Output() paginatorChange: EventEmitter<MatPaginator> = new EventEmitter<MatPaginator>();\n\n  constructor(private languageService: LanguageService, private mediaService: MediaService) {}\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  ngOnChanges() {\n    this.unsubscribeAll();\n    this.count$$ = this.store.stateView.count$.subscribe((count) => {\n      this.length = count;\n      this.emitPaginator();\n    });\n    this.entitySortChange$$ = this.entitySortChange$.subscribe(() => {\n      if (this.paginator) {\n        this.paginator.firstPage();\n      }\n    });\n    this.initPaginatorOptions();\n    this.translateLabels();\n  }\n\n  initPaginatorOptions() {\n    this.disabled = this.paginatorOptions?.disabled || this.disabled;\n    this.pageIndex = this.paginatorOptions?.pageIndex || this.pageIndex;\n    this.pageSize = this.paginatorOptions?.pageSize || this.pageSize;\n    this.pageSizeOptions = this.paginatorOptions?.pageSizeOptions || this.pageSizeOptions;\n    if (this.mediaService.isMobile()) {\n      this.showFirstLastButtons = false;\n      this.hidePageSize = true;\n    } else {\n      this.showFirstLastButtons = this.paginatorOptions?.showFirstLastButtons || this.showFirstLastButtons;\n      this.hidePageSize = this.paginatorOptions?.hidePageSize || this.hidePageSize;\n    }\n  }\n\n  translateLabels() {\n\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.firstPageLabel').subscribe((label: string) => {\n        this.paginator._intl.firstPageLabel = label;\n      }));\n\n    this.paginator._intl.getRangeLabel = this.rangeLabel;\n\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.itemsPerPageLabel').subscribe((label: string) => {\n        this.paginator._intl.itemsPerPageLabel = label;\n      }));\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.lastPageLabel').subscribe((label: string) => {\n        this.paginator._intl.lastPageLabel = label;\n      }));\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.nextPageLabel').subscribe((label: string) => {\n        this.paginator._intl.nextPageLabel = label;\n      }));\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.previousPageLabel').subscribe((label: string) => {\n        this.paginator._intl.previousPageLabel = label;\n      }));\n  }\n\n  rangeLabel = (page: number, pageSize: number, length: number) => {\n    const of: BehaviorSubject<string> = new BehaviorSubject('');\n\n    this.paginationLabelTranslation$$.push(\n      this.languageService.translate.get('igo.common.paginator.of').subscribe((label: string) => {\n        of.next(label);\n      }));\n    if (length === 0 || pageSize === 0) { return `0 ${of.value} ${length}`; }\n    length = Math.max(length, 0);\n    const startIndex = page * pageSize;\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n    return `${startIndex + 1} - ${endIndex} ${of.value} ${length}`;\n  }\n\n  private unsubscribeAll() {\n    this.paginationLabelTranslation$$.map(sub => sub.unsubscribe());\n    if (this.count$$) { this.count$$.unsubscribe(); }\n    if (this.entitySortChange$$) { this.entitySortChange$$.unsubscribe(); }\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribeAll();\n  }\n\n  emitPaginator() {\n    this.paginatorChange.emit(this.paginator);\n  }\n}\n","<mat-paginator \n  [disabled]=\"disabled\"\n  [hidePageSize]=\"hidePageSize\"\n  [length]=\"length\"\n  [pageIndex]=\"pageIndex\"\n  [pageSize]=\"pageSize\"\n  [pageSizeOptions]=\"pageSizeOptions\"\n  [showFirstLastButtons]=\"showFirstLastButtons\"\n  (page)=\"emitPaginator()\">\n</mat-paginator>\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Cacheable } from 'ts-cacheable';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Pipe({\n  name: 'secureImage'\n})\nexport class SecureImagePipe implements PipeTransform {\n  constructor(private http: HttpClient) {}\n\n  @Cacheable({\n    maxCacheCount: 20\n  })\n  transform(url: string): Observable<string> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'text/plain',\n      activityInterceptor: 'false'\n    });\n\n    return this.http\n      .get(url, {\n        headers,\n        responseType: 'blob'\n      })\n      .pipe(\n        switchMap((blob) => {\n          return new Observable((observer) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            reader.onloadend = () => {\n              observer.next(reader.result);\n              observer.complete();\n            };\n          });\n        })\n      ) as Observable<string>;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({ name: 'sanitizeHtml' })\nexport class SanitizeHtmlPipe implements PipeTransform {\n  constructor(private _sanitizer: DomSanitizer) {\n  }\n  transform(v: string): SafeHtml {\n    return this._sanitizer.bypassSecurityTrustHtml(v);\n  }\n}\n","<div class=\"table-container\">\n    <table mat-table matSort [ngClass]=\"getTableClass()\" [dataSource]=\"dataSource\" [trackBy]=\"getTrackByFunction()\" (matSortChange)=\"onSort($event)\">\n        <ng-container matColumnDef=\"selectionCheckbox\" class=\"mat-cell-checkbox\">\n            <th mat-header-cell *matHeaderCellDef>\n                <ng-container *ngIf=\"selectMany\">\n                    <ng-container *ngIf=\"selectionState$ | async as selectionState\">\n                        <mat-checkbox (change)=\"onToggleRows($event.checked)\" [checked]=\"selectionState === entityTableSelectionState.All\"\n                        [indeterminate]=\"selectionState === entityTableSelectionState.Some\">\n                        </mat-checkbox>\n                    </ng-container>\n                </ng-container>\n            </th>\n            <td mat-cell *matCellDef=\"let record\">\n                <mat-checkbox (mousedown)=\"$event.shiftKey ? $event.preventDefault() : null\" (click)=\"$event.shiftKey ?\n                onShiftToggleRow(!rowIsSelected(record), record, $event) : $event.stopPropagation()\" (change)=\"onToggleRow($event.checked,record)\"\n                [checked]=\"rowIsSelected(record)\">\n                </mat-checkbox>\n            </td>\n        </ng-container>\n\n        <ng-container [matColumnDef]=\"column.name\" *ngFor=\"let column of template.columns\">\n            <ng-container *ngIf=\"columnIsSortable(column)\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header [matTooltip]=\"column.tooltip ? column.tooltip : undefined\">\n                    {{column.title}}\n                </th>\n            </ng-container>\n\n            <ng-container *ngIf=\"!columnIsSortable(column)\">\n                <th mat-header-cell *matHeaderCellDef [matTooltip]=\"column.tooltip ? column.tooltip : undefined\">\n                    {{column.title}}\n                </th>\n            </ng-container>\n\n            <ng-container *ngIf=\"getColumnRenderer(column) as columnRenderer\">\n                <ng-container *ngIf=\"columnRenderer === entityTableColumnRenderer.Default\">\n                    <ng-container *matCellDef=\"let record\">\n                        <td mat-cell class=\"mat-cell-text\" *ngIf=\"!isUrl(getValue(record, column));else isAnUrlDefault\" [ngClass]=\"getCellClass(record, column)\">\n                            {{getValue(record, column)}}\n                        </td>\n                        <ng-template #isAnUrlDefault>\n                            <td mat-cell class=\"mat-cell-text\" [ngClass]=\"getCellClass(record, column)\">\n                                <a href=\"{{getValue(record, column)}}\" target='_blank' rel=\"noopener noreferrer\" (click)=\"$event.stopPropagation()\">\n                                    <img *ngIf=\"isImg(getValue(record, column));else notImg\" src=\"{{(getValue(record, column) | secureImage) | async}}\" width=\"50\" heigth=\"auto\">\n                                    <ng-template #notImg><span>{{\n                      'igo.common.entity-table.targetHtmlUrl' | translate }}\n                    </span></ng-template>\n                                </a>\n                            </td>\n                        </ng-template>\n                    </ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"columnRenderer === entityTableColumnRenderer.HTML\">\n                    <ng-container *matCellDef=\"let record\">\n                        <td mat-cell class=\"mat-cell-text\" *ngIf=\"!isUrl(getValue(record, column));else isAnUrlHTML\" [ngClass]=\"getCellClass(record, column)\"\n                        [innerHTML]=\"getValue(record, column)\">\n                        </td>\n                        <ng-template #isAnUrlHTML>\n                            <td mat-cell class=\"mat-cell-text\" [ngClass]=\"getCellClass(record, column)\">\n                                <a href=\"{{getValue(record, column)}}\" target='_blank' rel=\"noopener noreferrer\" (click)=\"$event.stopPropagation()\">\n                                    <img *ngIf=\"isImg(getValue(record, column));else notImg\" src=\"{{(getValue(record, column) | secureImage) | async}}\" width=\"50\" heigth=\"auto\">\n                                    <ng-template #notImg><span>{{ 'igo.geo.targetHtmlUrl' |\n                      translate }} </span></ng-template>\n                                </a>\n                            </td>\n                        </ng-template>\n                    </ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"columnRenderer === entityTableColumnRenderer.UnsanitizedHTML\">\n                    <ng-container *matCellDef=\"let record\">\n                        <td mat-cell class=\"mat-cell-text edition\" [formGroup]=\"formGroup\" *ngIf=\"isEdition(record);else isUnsanitizedHTML\"\n                        [ngClass]=\"getCellClass(record, column)\">\n                            <div class=\"date-picker\" *ngIf=\"column.type === 'date'\">\n                                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                                <input matInput [matDatepicker]=\"picker\" [formControlName]=\"column.name\" value=\"{{getValue(record, column)}}\"\n                                (dateChange)=\"onDateChange(column.name, record, $event)\">\n                                <mat-datepicker #picker></mat-datepicker>\n                            </div>\n                            <input matInput type=\"time\" *ngIf=\"column.type === 'time'\" [formControlName]=\"column.name\" step=\"900\" (focus)=\"column.onFocus($event)\"\n                            (keypress)=\"column.onChange($event)\" (blur)=\"column.onBlur($event)\">\n                            <input matInput type=\"number\" class=\"class_number_edition\" *ngIf=\"column.type === 'number'\" [formControlName]=\"column.name\" step=\"{{column.step}}\"\n                            value=\"{{getValue(record,column)}}\" (input)=\"onValueChange(column.name, record, $event)\"\n                            readonly=\"{{getValidationAttributeValue(column, 'readonly')}}\" required=\"{{getValidationAttributeValue(column, 'mandatory')}}\"\n                            min=\"{{getValidationAttributeValue(column, 'minValue')}}\" max=\"{{getValidationAttributeValue(column, 'maxValue')}}\">\n                            <input matInput type=\"text\" *ngIf=\"!column.type || column.type ==='string'\" [formControlName]=\"column.name\"\n                            value=\"{{getValue(record, column)}}\" (input)=\"onValueChange(column.name, record, $event)\"\n                            readonly=\"{{getValidationAttributeValue(column, 'readonly')}}\" required=\"{{getValidationAttributeValue(column, 'mandatory')}}\">\n                            <mat-checkbox *ngIf=\"column.type === 'boolean'\" [formControlName]=\"column.name\" [checked]=\"getValue(record,column)\"\n                            (change)=\"onBooleanValueChange(column.name, record,$event)\"></mat-checkbox>\n                            <mat-select *ngIf=\"column.type === 'list'\" required=\"{{getValidationAttributeValue(column, 'mandatory')}}\"\n                            [formControlName]=\"column.name\" [multiple]=\"column.multiple\" (selectionChange)=\"onSelectValueChange(column.name, record, $event)\"\n                            [value]=\"getValue(record, column)\">\n                                <mat-option *ngFor=\"let option of column.domainValues\" [value]=\"option.id\" [disabled]=\"option.disabled\">\n                                    {{ option.value }}\n                                </mat-option>\n                            </mat-select>\n                            <input matInput type=\"text\" [formControlName]=\"column.name\" *ngIf=\"column.type === 'autocomplete'\"\n                            [matAutocomplete]=\"auto\" required=\"{{getValidationAttributeValue(column, 'mandatory')}}\" value=\"{{getValue(record, column)}}\">\n                                <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onAutocompleteValueChange(column.name, record, $event)\"\n                                panelWidth=\"430px\">\n                                    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option.id\">\n                                        {{ option.value }}\n                                    </mat-option>\n                                </mat-autocomplete>\n                        </td>\n                        <ng-template #isUnsanitizedHTML>\n                            <td mat-cell class=\"mat-cell-text\" *ngIf=\"!isUrl(getValue(record, column));else isAnUrlUnsanitizedHTML\" [ngClass]=\"getCellClass(record, column)\"\n                            [innerHTML]=\"getValue(record, column) | sanitizeHtml\">\n                            </td>\n                            <ng-template #isAnUrlUnsanitizedHTML>\n                                <td mat-cell class=\"mat-cell-text\" [ngClass]=\"getCellClass(record, column)\">\n                                    <a href=\"{{getValue(record, column)}}\" target='_blank' rel=\"noopener noreferrer\" (click)=\"$event.stopPropagation()\">\n                                        <img *ngIf=\"isImg(getValue(record, column));else notImg\" src=\"{{(getValue(record, column) | secureImage) | async}}\" width=\"50\" heigth=\"auto\">\n                                        <ng-template #notImg><span>{{ 'igo.geo.targetHtmlUrl' | translate }} </span></ng-template>\n                                    </a>\n                                </td>\n                            </ng-template>\n                        </ng-template>\n                    </ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"columnRenderer === entityTableColumnRenderer.Icon\">\n                    <td mat-cell *matCellDef=\"let record\" class=\"mat-cell-text\" [ngClass]=\"getCellClass(record, column)\">\n                        <mat-icon svgIcon=\"{{getValue(record, column)|| column.icon}}\" (click)=\"column.onClick($event)\"></mat-icon>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf=\"columnRenderer === entityTableColumnRenderer.ButtonGroup\">\n                    <ng-container *matCellDef=\"let record\">\n                        <td mat-cell class=\"mat-cell-text\" [ngClass]=\"getCellClass(record, column)\">\n                            <span *ngFor=\"let button of getValue(record, column)\">\n                                <ng-container *ngIf=\"isEdition(record) === button.editMode\">\n                                    <button *ngIf=\"button.style === 'mat-icon-button'\" igoStopPropagation mat-icon-button\n                                        [color]=\"button.color\" (mousedown)=\"onButtonClick(button.click, record)\" [disabled]=\"button.disabled\">\n                                        <mat-icon svgIcon=\"{{button.icon}}\"></mat-icon>\n                                    </button>\n                                    <button *ngIf=\"button.style !== 'mat-icon-button'\" igoStopPropagation mat-mini-fab\n                                        [color]=\"button.color\" (mousedown)=\"onButtonClick(button.click, record)\" [disabled]=\"button.disabled\">\n                                        <mat-icon svgIcon=\"{{button.icon}}\"></mat-icon>\n                                    </button>\n                                </ng-container>\n                            </span>\n                        </td>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"headers; sticky: fixedHeader;\" [ngClass]=\"getHeaderClass()\">\n        </tr>\n        <tr mat-row igoEntityTableRow *matRowDef=\"let record; columns: headers;\" [scrollBehavior]=\"scrollBehavior\" [ngClass]=\"getRowClass(record)\" [selection]=\"selection\" [selected]=\"rowIsSelected(record)\" (select)=\"onRowSelect(record)\" (click)=\"onRowClick(record)\">\n        </tr>\n    </table>\n    <igo-entity-table-paginator *ngIf=\"withPaginator\" [store]=\"store\" [paginatorOptions]=\"paginatorOptions\" [entitySortChange$]=\"entitySortChange$\" (paginatorChange)=\"paginatorChange($event)\">\n    </igo-entity-table-paginator>\n</div>","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  ElementRef,\n  Optional,\n  Self\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport {\n  EntityKey,\n  EntityRecord,\n  EntityState,\n  EntityStore,\n  EntityTableTemplate,\n  EntityTableColumn,\n  EntityTableColumnRenderer,\n  EntityTableSelectionState,\n  EntityTableScrollBehavior\n} from '../shared';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { EntityTablePaginatorOptions } from '../entity-table-paginator/entity-table-paginator.interface';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { FormBuilder, NgControl, NgForm, FormControlName, FormGroup } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { DateAdapter, ErrorStateMatcher } from '@angular/material/core';\nimport { map } from 'rxjs/operators';\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'igo-entity-table',\n  templateUrl: './entity-table.component.html',\n  styleUrls: ['./entity-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: MatFormFieldControl, useExisting: EntityTableComponent }]\n})\nexport class EntityTableComponent implements OnInit, OnChanges, OnDestroy {\n\n  entitySortChange$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  public formGroup: FormGroup = new FormGroup({});\n\n  public filteredOptions: Observable<any[]>;\n\n  /**\n   * Reference to the column renderer types\n   * @internal\n   */\n  entityTableColumnRenderer = EntityTableColumnRenderer;\n\n  /**\n   * Reference to the selection's state\n   * @internal\n   */\n  entityTableSelectionState = EntityTableSelectionState;\n\n  /**\n   * Observable of the selection,s state\n   * @internal\n   */\n  readonly selectionState$: BehaviorSubject<EntityTableSelectionState> = new BehaviorSubject(undefined);\n\n  /**\n   * Subscription to the store's selection\n   */\n  private selection$$: Subscription;\n\n  /**\n   * Subscription to the dataSource\n   */\n  private dataSource$$: Subscription;\n\n  /**\n   * The last record checked. Useful for selecting\n   * multiple records by holding the shift key and checking\n   * checkboxes.\n   */\n  private lastRecordCheckedKey: EntityKey;\n\n  /**\n   * Entity store\n   */\n  @Input() store: EntityStore<object>;\n\n  /**\n   * Table paginator\n   */\n  @Input() set paginator(value: MatPaginator) {\n    this._paginator = value;\n    this.dataSource.paginator = value;\n  }\n\n  get paginator(): MatPaginator {\n    return this._paginator;\n  }\n  private _paginator: MatPaginator;\n\n  /**\n   * Table template\n   */\n  @Input() template: EntityTableTemplate;\n\n  /**\n   * Scroll behavior on selection\n   */\n  @Input()\n  scrollBehavior: EntityTableScrollBehavior = EntityTableScrollBehavior.Auto;\n\n  /**\n   * Whether nulls should be first when sorting\n   */\n  @Input()\n  sortNullsFirst: boolean = false;\n\n  /**\n   * Show the table paginator or not. False by default.\n   */\n  @Input()\n  withPaginator: boolean = false;\n\n  /**\n   * Paginator options\n   */\n  @Input()\n  paginatorOptions: EntityTablePaginatorOptions;\n\n  /**\n   * Event emitted when an entity (row) is clicked\n   */\n  @Output() entityClick = new EventEmitter<object>();\n\n  /**\n   * Event emitted when an entity (row) is selected\n   */\n  @Output() entitySelectChange = new EventEmitter<{\n    added: object[];\n  }>();\n\n  /**\n   * Event emitted when the table sort is changed.\n   */\n  @Output() entitySortChange: EventEmitter<{column: EntityTableColumn, direction: string}> = new EventEmitter(undefined);\n\n  /**\n   * Table headers\n   * @internal\n   */\n  get headers(): string[] {\n    let columns = this.template.columns\n      .filter((column: EntityTableColumn) => column.visible !== false)\n      .map((column: EntityTableColumn) => column.name);\n\n    if (this.selectionCheckbox === true) {\n      columns = ['selectionCheckbox'].concat(columns);\n    }\n\n    return columns;\n  }\n\n  /**\n   * Data source consumable by the underlying material table\n   * @internal\n   */\n  dataSource = new MatTableDataSource<object>();\n\n  /**\n   * Whether selection is supported\n   * @internal\n   */\n  get selection(): boolean { return this.template.selection || false; }\n\n  /**\n   * Whether a selection checkbox should be displayed\n   * @internal\n   */\n  get selectionCheckbox(): boolean { return this.template.selectionCheckbox || false; }\n\n  /**\n   * Whether selection many entities should eb supported\n   * @internal\n   */\n  get selectMany(): boolean { return this.template.selectMany || false; }\n\n  /**\n   * Whether selection many entities should eb supported\n   * @internal\n   */\n  get fixedHeader(): boolean { return this.template.fixedHeader === undefined ? true : this.template.fixedHeader; }\n\n  constructor(private cdRef: ChangeDetectorRef,\n    private formBuilder: FormBuilder,\n    protected _focusMonitor: FocusMonitor,\n    protected _elementRef: ElementRef<HTMLElement>,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() protected _parentForm: NgForm,\n    @Optional() protected _controlName: FormControlName,\n    protected _defaultErrorStateMatcher: ErrorStateMatcher,\n    private dateAdapter: DateAdapter<Date>\n  ) {\n    this.dateAdapter.setLocale('fr-CA');\n  }\n\n  /**\n   * Track the selection state to properly display the selection checkboxes\n   * @internal\n   */\n  ngOnInit() {\n    this.handleDatasource();\n    this.dataSource.paginator = this.paginator;\n  }\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const store = changes.store;\n    if (store && store.currentValue !== store.previousValue) {\n      this.handleDatasource();\n    }\n  }\n\n  /**\n   * Process text or number value change (edition)\n   */\n  onValueChange(column: string, record: EntityRecord<any>, event) {\n    const key = this.getColumnKeyWithoutPropertiesTag(column);\n    record.entity.properties[key] = event.target.value;\n  }\n\n  /**\n   * Process boolean value change (edition)\n   */\n  onBooleanValueChange(column: string, record: EntityRecord<any>, event) {\n    const key = this.getColumnKeyWithoutPropertiesTag(column);\n    record.entity.properties[key] = event.checked;\n  }\n\n  /**\n   * Process select value change (edition)\n   */\n  onSelectValueChange(column: string, record: EntityRecord<any>, event) {\n    const key = this.getColumnKeyWithoutPropertiesTag(column);\n    record.entity.properties[key] = event.value;\n  }\n\n  /**\n   * Process autocomplete value change (edition)\n   */\n  onAutocompleteValueChange(column: string, record: EntityRecord<any>, event) {\n    this.formGroup.controls[column].setValue(event.option.viewValue);\n    const key = this.getColumnKeyWithoutPropertiesTag(column);\n    record.entity.properties[key] = event.option.value;\n  }\n\n  /**\n   * Process date value change (edition)\n   */\n  onDateChange(column: string, record: EntityRecord<any>, event) {\n    const format = \"YYYY-MM-DD\";\n    const value = moment(event.value).format(format);\n    const key = this.getColumnKeyWithoutPropertiesTag(column);\n    record.entity.properties[key] = value;\n  }\n\n  /**\n   * Enable edition mode for one row\n   * More than one row can be edited at the same time\n   */\n  private enableEdit(record: EntityRecord<any>) {\n    const item = record.entity.properties || record.entity;\n    this.template.columns.forEach(column => {\n      column.title = column.validation?.mandatory && !column.title.includes('*') ? column.title + ' *' : column.title;\n\n      const key = this.getColumnKeyWithoutPropertiesTag(column.name);\n      if (column.type === 'boolean') {\n        if (!item[key] || item[key] === null) {\n          item[key] = false;\n        } else if (typeof item[key] === 'string') {\n          item[key] = JSON.parse(item[key].toLowerCase());\n        }\n        this.formGroup.setControl(column.name, this.formBuilder.control(\n          item[key]\n        ));\n      } else if (column.type === 'list') {\n        if (column.multiple) {\n          this.formGroup.setControl(column.name, this.formBuilder.control(\n            [item[key]]\n          ));\n        } else {\n          this.formGroup.setControl(column.name, this.formBuilder.control(\n            item[key]\n          ));\n\n          typeof item[key] === 'string' ?\n            this.formGroup.controls[column.name].setValue(parseInt(item[key])) :\n            this.formGroup.controls[column.name].setValue(item[key]);\n        }\n      } else if (column.type === 'autocomplete') {\n        this.formGroup.setControl(column.name, this.formBuilder.control(\n          item[key]\n        ));\n\n        this.filteredOptions = this.formGroup.controls[column.name].valueChanges.pipe(\n          map(value => {\n            if (value.length) {\n              return column.domainValues.filter((option) => {\n                const filterNormalized = value ? value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : '';\n                const featureNameNormalized = option.value.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n                return featureNameNormalized.includes(filterNormalized);\n              });\n            }\n          })\n        );\n\n        let formControlValue = item[key];\n        column.domainValues.forEach(option => {\n          if (typeof formControlValue === 'string' && /^\\d+$/.test(formControlValue)) {\n            formControlValue = parseInt(formControlValue);\n          }\n          if (option.value === formControlValue || option.id === formControlValue) {\n            formControlValue = option.value;\n          }\n        });\n\n        this.formGroup.controls[column.name].setValue(formControlValue);\n      } else if (column.type === 'date') {\n        if (column.visible) {\n          if (item[key]) {\n            let date = moment(item[key]);\n            item[key] = date.utc().format('YYYY-MM-DD');\n            this.formGroup.setControl(column.name, this.formBuilder.control(\n              item[key]\n            ));\n          } else {\n            const newKey = this.getColumnKeyWithoutPropertiesTag(column.name);\n            record.entity.properties[newKey] = null;\n            this.formGroup.setControl(column.name, this.formBuilder.control(\n              null\n            ));\n          }\n        }\n      } else {\n        this.formGroup.setControl(column.name, this.formBuilder.control(\n          item[key]\n        ));\n      }\n\n      if (this.formGroup.controls[column.name] && this.getValidationAttributeValue(column, 'readonly')) {\n        this.formGroup.controls[column.name].disable();\n      }\n    });\n  }\n\n  private handleDatasource() {\n    this.unsubscribeStore();\n    this.selection$$ = this.store.stateView\n      .manyBy$((record: EntityRecord<object>) => record.state.selected === true)\n      .subscribe((records: EntityRecord<object>[]) => {\n        const firstSelected = records[0];\n        const firstSelectedStateviewPosition = this.store.stateView.all().indexOf(firstSelected);\n        const pageMax = this.paginator ? this.paginator.pageSize * (this.paginator.pageIndex + 1) : 0;\n        const pageMin = this.paginator ? pageMax - this.paginator.pageSize : 0;\n\n        if (\n          this.paginator &&\n          (firstSelectedStateviewPosition < pageMin ||\n          firstSelectedStateviewPosition >= pageMax)) {\n          const pageToReach = Math.floor(firstSelectedStateviewPosition / this.paginator.pageSize);\n          this.dataSource.paginator.pageIndex = pageToReach;\n        }\n        this.selectionState$.next(this.computeSelectionState(records));\n      });\n    this.dataSource$$ = this.store.stateView.all$().subscribe((all) => {\n      if (all[0]) {\n        this.enableEdit(all[0]);\n      }\n      this.dataSource.data = all;\n    });\n\n  }\n\n  /**\n   * Unbind the store watcher\n   * @internal\n   */\n  ngOnDestroy() {\n    this.unsubscribeStore();\n  }\n\n  private unsubscribeStore() {\n    if (this.selection$$) {\n      this.selection$$.unsubscribe();\n    }\n    if (this.dataSource$$) {\n      this.dataSource$$.unsubscribe();\n    }\n  }\n\n  /**\n   * Trackby function\n   * @param record Record\n   * @param index Record index\n   * @internal\n   */\n  getTrackByFunction() {\n    return (index: number, record: EntityRecord<object, EntityState>) => {\n      return record.ref;\n    };\n  }\n\n  /**\n   * Trigger a refresh of thre table. This can be useful when\n   * the data source doesn't emit a new value but for some reason\n   * the records need an update.\n   * @internal\n   */\n  refresh() {\n    this.cdRef.detectChanges();\n  }\n\n  paginatorChange(event: MatPaginator) {\n    this.paginator = event;\n  }\n\n  /**\n   * On sort, sort the store\n   * @param event Sort event\n   * @internal\n   */\n  onSort(event: {active: string, direction: string}) {\n    const direction = event.direction;\n    const column = this.template.columns\n      .find((c: EntityTableColumn) => c.name === event.active);\n\n    if (direction === 'asc' || direction === 'desc') {\n      this.store.stateView.sort({\n        valueAccessor: (record: EntityRecord<object>) => this.getValue(record, column),\n        direction,\n        nullsFirst: this.sortNullsFirst\n      });\n      this.entitySortChange.emit({column, direction});\n      this.entitySortChange$.next(true);\n    } else {\n      this.store.stateView.sort(undefined);\n    }\n  }\n\n  /**\n   * When an entity is clicked, emit an event\n   * @param record Record\n   * @internal\n   */\n  onRowClick(record: EntityRecord<object>) {\n    this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n    this.entityClick.emit(record.entity);\n  }\n\n  /**\n   * When an entity is selected, select it in the store and emit an event. Even if\n   * \"many\" is set to true, this method always select a single, exclusive row. Selecting\n   * multiple rows should be achieved by using the checkboxes.\n   * @param record Record\n   * @internal\n   */\n  onRowSelect(record: EntityRecord<object>) {\n    if (this.selection === false) { return; }\n\n    const entity = record.entity;\n    this.store.state.update(entity, {selected: true}, true);\n    this.entitySelectChange.emit({added: [entity]});\n  }\n\n  /**\n   * Select or unselect all rows at once. On select, emit an event.\n   * @param toggle Select or unselect\n   * @internal\n   */\n  onToggleRows(toggle: boolean) {\n    if (this.selection === false) { return; }\n\n    this.store.state.updateAll({selected: toggle});\n    if (toggle === true) {\n      const entities = this.store.stateView\n        .all()\n        .map((record: EntityRecord<object>) => record.entity);\n      this.entitySelectChange.emit({added: [entities]});\n    }\n  }\n\n  /**\n   * When an entity is toggled, select or unselect it in the store. On select,\n   * emit an event.\n   * @param toggle Select or unselect\n   * @param record Record\n   * @internal\n   */\n  onToggleRow(toggle: boolean, record: EntityRecord<object>) {\n    if (this.selection === false) { return; }\n\n    const entity = record.entity;\n    const exclusive = toggle === true && !this.selectMany;\n    this.store.state.update(entity, {selected: toggle}, exclusive);\n    if (toggle === true) {\n      this.entitySelectChange.emit({added: [entity]});\n    }\n    this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n  }\n\n  /**\n   * When an entity is toggled, select or unselect it in the store. On select,\n   * emit an event.\n   * @param toggle Select or unselect\n   * @param record Record\n   * @internal\n   */\n  onShiftToggleRow(toggle: boolean, record: EntityRecord<object>, event: MouseEvent) {\n    if (this.selection === false) { return; }\n\n    if (this.selectMany === false || this.lastRecordCheckedKey === undefined) {\n      this.onToggleRow(toggle, record);\n      return;\n    }\n\n    // This is a workaround mat checkbox wrong behavior\n    // when the shift key is held.\n    // See https://github.com/angular/components/issues/6232\n    const range = window.document.createRange();\n    range.selectNode(event.target as HTMLElement);\n    window.getSelection().removeAllRanges();\n    window.getSelection().addRange(range);\n    event.stopImmediatePropagation();\n\n    const records = this.store.stateView.all();\n    const recordIndex = records.indexOf(record);\n    const lastRecordChecked = this.store.stateView.get(this.lastRecordCheckedKey);\n    const lastRecordIndex = records.indexOf(lastRecordChecked);\n    const indexes = [recordIndex, lastRecordIndex];\n    const selectRecords = records.slice(Math.min(...indexes), Math.max(...indexes) + 1);\n\n    const entities = selectRecords.map((_record: EntityRecord<object>) => _record.entity);\n    this.store.state.updateMany(entities, {selected: toggle});\n    if (toggle === true) {\n      this.entitySelectChange.emit({added: entities});\n    }\n    this.lastRecordCheckedKey = this.store.stateView.getKey(record);\n  }\n\n  /**\n   * Compute the selection state\n   * @returns Whether all, some or no rows are selected\n   * @internal\n   */\n  private computeSelectionState(selectedRecords: EntityRecord<object>[]): EntityTableSelectionState {\n    const states = EntityTableSelectionState;\n    const selectionCount = selectedRecords.length;\n    return selectionCount === 0 ?\n      states.None :\n      (selectionCount === this.store.stateView.count ? states.All : states.Some);\n  }\n\n  /**\n   * Whether a column is sortable\n   * @param column Column\n   * @returns True if a column is sortable\n   * @internal\n   */\n  columnIsSortable(column: EntityTableColumn): boolean {\n    let sortable = column.sort;\n    if (sortable === undefined) {\n      sortable = this.template.sort === undefined ? false : this.template.sort;\n    }\n    return sortable;\n  }\n\n  /**\n   * Whether a row is should be selected based on the underlying entity state\n   * @param record Record\n   * @returns True if a row should be selected\n   * @internal\n   */\n  rowIsSelected(record: EntityRecord<object>): boolean {\n    const state = record.state;\n    return state.selected ? state.selected : false;\n  }\n\n  isImg(value) {\n    if (this.isUrl(value)) {\n      return (\n        ['jpg', 'png', 'gif'].indexOf(value.split('.').pop().toLowerCase()) !== -1\n      );\n    } else {\n      return false;\n    }\n  }\n\n  isUrl(value) {\n    if (typeof value === 'string') {\n      return (\n        value.slice(0, 8) === 'https://' || value.slice(0, 7) === 'http://'\n      );\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Method to access an entity's values\n   * @param record Record\n   * @param column Column\n   * @returns Any value\n   * @internal\n   */\n  getValue(record: EntityRecord<object>, column: EntityTableColumn): any {\n    const entity = record.entity;\n    let value;\n    if (column.valueAccessor !== undefined) {\n      return column.valueAccessor(entity, record);\n    }\n    if (this.template.valueAccessor !== undefined) {\n      return this.template.valueAccessor(entity, column.name, record);\n    }\n    value = this.store.getProperty(entity, column.name);\n\n    if (column.type === 'boolean') {\n      if (value === undefined || value === null || value === '') {\n        value = false;\n      } else if (typeof value !== 'boolean' && value !== undefined) {\n        if (typeof value === 'number'){\n          value = Boolean(value);\n        } else {\n          value = JSON.parse(value.toLowerCase());\n        }\n      }\n      if (!this.isEdition(record)){\n        value = value ? '&#10003;' : ''; // check mark\n      }\n    } else if (column.type === 'list' && value && column.domainValues) {\n      if (column.multiple) {\n        let list_id;\n        typeof value === 'string' ? list_id = value.match(/[\\w.-]+/g).map(Number) : list_id = value;\n        let list_option = [];\n\n        column.domainValues.forEach(option => {\n          if (list_id.includes(option.id)) {\n            if (record.edition) {\n              list_option.push(option.id);\n            } else {\n              list_option.push(option.value);\n            }\n          }\n        });\n\n        this.isEdition(record) ? value = list_id : value = list_option;\n      } else {\n        column.domainValues.forEach(option => {\n          if (typeof value === 'string' && /^\\d+$/.test(value)) {\n            value = parseInt(value);\n          }\n          if (option.value === value || option.id === value) {\n            this.isEdition(record) ? value = option.id : value = option.value;\n          }\n        });\n      }\n    } else if (column.type === 'autocomplete' && value && column.domainValues) {\n      column.domainValues.forEach(option => {\n        if (typeof value === 'string' && /^\\d+$/.test(value)) {\n          value = parseInt(value);\n        }\n        if (option.value === value || option.id === value) {\n          value = option.value;\n        }\n      });\n    }\n    else if (column.type === 'date') {\n      if (this.isEdition(record)) {\n        if (value) {\n          let date = moment(value);\n          value = date.format();\n          this.formGroup.controls[column.name].setValue(value);\n        }\n      } else if (!this.isEdition(record) && value === null) {\n        value = \"\";\n      }\n    }\n\n    if (value === undefined) {\n      value = '';\n    }\n\n    return value;\n  }\n\n  /**\n   * Method to access an entity's validation values\n   * @param column Column\n   * @param validationType string\n   * @returns Any value (false if no validation or not the one concerned)\n   * @internal\n   */\n  getValidationAttributeValue(column: EntityTableColumn, validationType: string): any {\n    if (column.validation !== undefined && column.validation[validationType] !== undefined) {\n      return column.validation[validationType];\n    } else {\n      return false;\n    }\n  }\n\n  public isEdition(record) {\n    return record.entity.edition ? true : false;\n  }\n\n  /**\n   * Return the type of renderer of a column\n   * @param column Column\n   * @returns Renderer type\n   * @internal\n   */\n  getColumnRenderer(column: EntityTableColumn): EntityTableColumnRenderer {\n    if (column.renderer !== undefined) {\n      return column.renderer;\n    }\n    return EntityTableColumnRenderer.Default;\n  }\n\n  /**\n   * Return the table ngClass\n   * @returns ngClass\n   * @internal\n   */\n  getTableClass(): {[key: string]: boolean} {\n    return {\n      'igo-entity-table-with-selection': this.selection\n    };\n  }\n\n  /**\n   * Return a header ngClass\n   * @returns ngClass\n   * @internal\n   */\n  getHeaderClass(): {[key: string]: boolean} {\n    const func = this.template.headerClassFunc;\n    if (func instanceof Function) {\n      return func();\n    }\n    return {};\n  }\n\n  /**\n   * Return a row ngClass\n   * @param record Record\n   * @returns ngClass\n   * @internal\n   */\n  getRowClass(record: EntityRecord<object>): {[key: string]: boolean} {\n    const entity = record.entity;\n    const func = this.template.rowClassFunc;\n    if (func instanceof Function) {\n      return func(entity, record);\n    }\n    return {};\n  }\n\n  /**\n   * Return a row ngClass\n   * @param record Record\n   * @param column Column\n   * @returns ngClass\n   * @internal\n   */\n  getCellClass(record: EntityRecord<object>, column: EntityTableColumn): {[key: string]: boolean} {\n    const entity = record.entity;\n    const cls = {};\n\n    const tableFunc = this.template.cellClassFunc;\n    if (tableFunc instanceof Function) {\n      Object.assign(cls, tableFunc(entity, column, record));\n    }\n\n    const columnFunc = column.cellClassFunc;\n    if (columnFunc instanceof Function) {\n      Object.assign(cls, columnFunc(entity, record));\n    }\n\n    return cls;\n  }\n\n  /**\n   * When a button is clicked\n   * @param func Function\n   * @param record Record\n   * @internal\n   */\n  onButtonClick(\n    clickFunc: (entity: object, record?: EntityRecord<object>) => void,\n    record: EntityRecord<object>\n  ) {\n    this.enableEdit(record);\n    if (typeof clickFunc === 'function') {\n      clickFunc(record.entity, record);\n    }\n  }\n\n  /**\n   * Retrieve column name without his \"properties\" tag (useful for edition workspace properties)\n   */\n  public getColumnKeyWithoutPropertiesTag(column: string) {\n    if (column.includes('properties.')) {\n      return column.split('.')[1];\n    }\n    return column;\n  }\n}\n","export enum ActionbarMode {\n  Dock = 'dock',\n  Overlay = 'overlay',\n  Context = 'context'\n}\n","<mat-list-item *ngIf=\"!action.checkbox\"\n  matTooltipClass=\"actionbarItemTooltip\"\n  matTooltipShowDelay=\"500\"\n  [matTooltip]=\"withTooltip ? ((tooltip$ | async) || title | translate) : ''\"\n  [ngClass]=\"ngClass$ | async\"\n  (click)=\"onClick()\">\n  <button *ngIf=\"withIcon\"\n    mat-list-avatar\n    mat-icon-button\n    [color]=\"color\"\n    [disabled]=\"disabled$ | async\">\n    <mat-icon *ngIf=\"withIcon\" svgIcon=\"{{icon$ | async}}\"></mat-icon>\n  </button>\n  <h4 *ngIf=\"withTitle\" matLine>{{title | translate}}</h4>\n</mat-list-item>\n\n<mat-list-item class=\"item-checkbox\" *ngIf=\"action.checkbox\"\n  matTooltipClass=\"actionbarItemTooltip\"\n  matTooltipShowDelay=\"500\"\n  [matTooltip]=\"withTooltip ? ((tooltip$ | async) || title | translate) : ''\"\n  [ngClass]=\"ngClass$ | async\">\n  <mat-checkbox *ngIf=\"withTitle\"\n      (change)=\"action.handler()\"\n      [checked]=\"checkCondition$ | async\">\n      {{title | translate}}\n  </mat-checkbox>\n</mat-list-item>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { BehaviorSubject, Subscription, isObservable } from 'rxjs';\n\nimport { Action } from '../shared/action.interfaces';\n\n /**\n  * An action button\n  */\n@Component({\n  selector: 'igo-actionbar-item',\n  templateUrl: './actionbar-item.component.html',\n  styleUrls: ['./actionbar-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActionbarItemComponent implements OnInit, OnDestroy {\n\n  readonly disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  readonly checkCondition$: BehaviorSubject<boolean> = new BehaviorSubject(undefined);\n\n  readonly icon$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  readonly tooltip$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  readonly noDisplay$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  readonly ngClass$: BehaviorSubject<{[key: string]: boolean}> = new BehaviorSubject({});\n\n  private ngClass$$: Subscription;\n\n  private disabled$$: Subscription;\n\n  private availability$$: Subscription;\n\n  private icon$$: Subscription;\n\n  private checkCondition$$: Subscription;\n\n  private tooltip$$: Subscription;\n\n  private noDisplay$$: Subscription;\n\n  private display$$: Subscription;\n\n  /**\n   * Action\n   */\n  @Input() action: Action;\n\n  /**\n   * Color\n   */\n  @Input() color = 'default';\n\n  /**\n   * Whether the action title is displayed\n   */\n  @Input() withTitle = true;\n\n  /**\n   * Whether the action icon is displayed\n   */\n  @Input() withIcon = true;\n\n  /**\n   * Whether a tooltip should be shown\n   */\n  @Input() withTooltip = true;\n\n  /**\n   * Whether the action is disabled\n   */\n  @Input()\n  set disabled(value: boolean) { this.disabled$.next(value); }\n  get disabled(): boolean { return this.disabled$.value; }\n\n  /**\n   * Whether the action is display or not\n   */\n  @Input()\n  set noDisplay(value: boolean) { this.noDisplay$.next(value); }\n  get noDisplay(): boolean { return this.noDisplay$.value; }\n\n  /**\n   * Event emitted when the action button is clicked\n   */\n  @Output() trigger: EventEmitter<Action> = new EventEmitter();\n\n  /**\n   * @internal\n   */\n  get title(): string { return this.action.title; }\n\n  constructor() {}\n\n  ngOnInit() {\n    const args = this.action.args || [];\n\n    if (this.action.ngClass !== undefined) {\n      this.ngClass$$ = this.action.ngClass(...args)\n        .subscribe((ngClass: {[key: string]: boolean}) => this.updateNgClass(ngClass));\n    }\n\n    if (isObservable(this.action.icon)) {\n      this.icon$$ = this.action.icon\n        .subscribe((icon: string) => this.updateIcon(icon));\n    } else {\n      this.updateIcon(this.action.icon);\n    }\n\n    if (isObservable(this.action.checkCondition)) {\n      this.checkCondition$$ = this.action.checkCondition\n        .subscribe((checkCondition: boolean) => this.updateCheckCondition(checkCondition));\n    } else {\n      this.updateCheckCondition(this.action.checkCondition);\n    }\n\n    if (isObservable(this.action.tooltip)) {\n      this.tooltip$$ = this.action.tooltip\n        .subscribe((tooltip: string) => this.updateTooltip(tooltip));\n    } else {\n      this.updateTooltip(this.action.tooltip);\n    }\n\n    if (this.action.availability !== undefined) {\n      this.availability$$ = this.action.availability(...args)\n        .subscribe((available: boolean) => this.disabled = !available);\n    }\n\n    this.disabled$$ = this.disabled$\n      .subscribe((disabled: boolean) => this.updateNgClass({'igo-actionbar-item-disabled': disabled}));\n\n    if (this.action.display !== undefined) {\n      this.display$$ = this.action.display(...args)\n        .subscribe((display: boolean) => this.noDisplay = !display);\n    }\n\n    this.noDisplay$$ = this.noDisplay$\n      .subscribe((noDisplay: boolean) => this.updateNgClass({'igo-actionbar-item-no-display': noDisplay}));\n  }\n\n  ngOnDestroy() {\n    if (this.ngClass$$ !== undefined) {\n      this.ngClass$$.unsubscribe();\n      this.ngClass$$ = undefined;\n    }\n\n    if (this.availability$$ !== undefined) {\n      this.availability$$.unsubscribe();\n      this.availability$$ = undefined;\n    }\n\n    if (this.display$$ !== undefined) {\n      this.display$$.unsubscribe();\n      this.display$$ = undefined;\n    }\n\n    if (this.checkCondition$$ !== undefined) {\n      this.checkCondition$$.unsubscribe();\n      this.checkCondition$$ = undefined;\n    }\n\n    if (this.icon$$ !== undefined) {\n      this.icon$$.unsubscribe();\n      this.icon$$ = undefined;\n    }\n\n    if (this.tooltip$$ !== undefined) {\n      this.tooltip$$.unsubscribe();\n      this.tooltip$$ = undefined;\n    }\n\n    this.disabled$$.unsubscribe();\n    this.noDisplay$$.unsubscribe();\n  }\n\n  /**\n   * When the action button is clicked, emit the 'trigger' event but don't\n   * invoke the action handler. This is handled by the parent component.\n   * @internal\n   */\n  onClick() {\n    if (this.disabled === true) {\n      return;\n    }\n    this.trigger.emit(this.action);\n  }\n\n  private updateNgClass(ngClass: {[key: string]: boolean}) {\n    this.ngClass$.next(Object.assign({}, this.ngClass$.value, ngClass));\n  }\n\n  private updateTooltip(tooltip: string) {\n    this.tooltip$.next(tooltip);\n  }\n\n  private updateCheckCondition(checkCondition: boolean) {\n    this.checkCondition$.next(checkCondition);\n  }\n\n  private updateIcon(icon: string) {\n    this.icon$.next(icon);\n  }\n}\n","<mat-list *ngIf=\"mode === actionbarMode.Dock\">\n\n    <div *ngIf=\"heightCondition && positionConditionTop && isDesktop\"\n      id=\"topChevron\">\n      <button\n        mat-icon-button\n        tooltip-position=\"below\"\n        matTooltipShowDelay=\"500\"\n        [matTooltip]=\"'igo.common.actionbar.scrollUp' | translate\"\n        (click)=\"scrollUp()\">\n        <mat-icon svgIcon=\"chevron-up\"></mat-icon>\n      </button>\n    </div>\n\n    <igo-actionbar-item\n      *ngIf=\"withToggleButton\"\n      color=\"accent\"\n      [withTitle]=\"false\"\n      [withIcon]=\"true\"\n      [color]=\"color\"\n      [disabled]=\"store.view.empty\"\n      [action]=\"toggleCollapseAction\"\n      (trigger)=\"onTriggerAction(toggleCollapseAction)\">\n    </igo-actionbar-item>\n\n    <ng-template #buttonContent *ngIf=\"!collapsed\" ngFor let-action [ngForOf]=\"store.view.all$() | async\">\n      <igo-actionbar-item\n        color=\"accent\"\n        [withTitle]=\"withTitle\"\n        [withIcon]=\"withIcon\"\n        [withTooltip]=\"withTooltip\"\n        [color]=\"color\"\n        [disabled]=\"store.state.get(action).disabled\"\n        [action]=\"action\"\n        (trigger)=\"onTriggerAction(action)\">\n      </igo-actionbar-item>\n    </ng-template>\n\n    <div *ngIf=\"heightCondition && positionConditionLow && isDesktop\"\n      id=\"lowChevron\">\n      <button\n        mat-icon-button\n        tooltip-position=\"below\"\n        matTooltipShowDelay=\"500\"\n        [matTooltip]=\"'igo.common.actionbar.scrollDown' | translate\"\n        (click)=\"scrollDown()\">\n        <mat-icon svgIcon=\"chevron-down\"></mat-icon>\n      </button>\n    </div>\n\n</mat-list>\n\n<div *ngIf=\"mode === actionbarMode.Overlay\">\n  <button class=\"buttonOverlay\"\n    mat-icon-button\n    tooltip-position=\"below\"\n    matTooltipShowDelay=\"500\"\n    [matTooltip]=\"'igo.common.actionbar.icon' | translate\"\n    [matMenuTriggerFor]=\"actionbarMenu\"\n    [disabled]=\"store.view.empty\"\n    [color]=\"iconColor\">\n    <mat-icon [svgIcon]=\"icon\"></mat-icon>\n  </button>\n\n  <mat-menu\n    #actionbarMenu=\"matMenu\"\n    class=\"igo-compact-menu igo-no-min-width-menu\"\n    overlapTrigger=\"true\"\n    [xPosition]=\"xPosition\"\n    [yPosition]=\"yPosition\"\n    [class]=\"overlayClass\">\n\n    <mat-list>\n      <ng-template ngFor let-action [ngForOf]=\"store.view.all$() | async\">\n        <igo-actionbar-item\n          color=\"accent\"\n          [withTitle]=\"withTitle\"\n          [withIcon]=\"withIcon\"\n          [color]=\"color\"\n          [action]=\"action\"\n          (trigger)=\"onTriggerAction(action)\">\n        </igo-actionbar-item>\n      </ng-template>\n    </mat-list>\n  </mat-menu>\n</div>\n<mat-card *ngIf=\"mode === actionbarMode.Context\" class=\"context-menu-card mat-elevation-z4\">\n  <mat-list>\n      <ng-template ngFor let-action [ngForOf]=\"store.view.all$() | async\">\n          <igo-actionbar-item\n            color=\"accent\"\n            [withTitle]=\"withTitle\"\n            [withIcon]=\"withIcon\"\n            [color]=\"color\"\n            [action]=\"action\"\n            (trigger)=\"onTriggerAction(action)\">\n          </igo-actionbar-item>\n        <br/>\n      </ng-template>\n  </mat-list>\n</mat-card>\n","import {\n  Component,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ElementRef\n} from '@angular/core';\n\nimport { MediaService, Media } from '@igo2/core';\nimport { EntityStoreWatcher } from '../../entity';\nimport { Action } from '../shared/action.interfaces';\nimport { ActionbarMode } from '../shared/action.enums';\nimport { ActionStore } from '../shared/store';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * A list of action buttons.\n * This component can be displayed in one of two way: 'dock' or 'overlay'\n */\n@Component({\n  selector: 'igo-actionbar',\n  templateUrl: './actionbar.component.html',\n  styleUrls: ['./actionbar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ActionbarComponent implements OnDestroy, OnChanges {\n\n  /**\n   * Reference to the ActionbarMode enum for use in the template\n   * @internal\n   */\n  actionbarMode = ActionbarMode;\n\n  /**\n   * Whether the actionbar is collapsed (Dock mode)\n   * @internal\n   */\n  collapsed = false;\n\n  /**\n   * Toggle collapse action (Dock)\n   * @internal\n   */\n  toggleCollapseAction = {\n    id: 'actionbar_toggle',\n    icon: 'dots-vertical',\n    handler: () => {\n      this.collapsed = !this.collapsed;\n    }\n  };\n\n  /**\n   * Action store watcher\n   * @internal\n   */\n  private watcher: EntityStoreWatcher<Action>;\n\n  /**\n   * Height Condition for scroll button\n   */\n  heightCondition$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Position Condition for top scroll button\n   */\n  positionConditionTop$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  /**\n   * Position Condition for low scroll button\n   */\n  positionConditionLow$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  /**\n   * Action store\n   */\n  @Input() store: ActionStore;\n\n  /**\n   * Actionbar mode\n   */\n  @Input() mode: ActionbarMode = ActionbarMode.Dock;\n\n  /**\n   * Whether a toggle button should be displayed (Dock mode)\n   */\n  @Input() withToggleButton = false;\n\n  /**\n   * Whether a the actionbar should display buttons horizontally\n   */\n  @Input() horizontal = false;\n\n  /**\n   * Color\n   */\n  @Input() color = 'default';\n\n  /**\n   * Color of the button if action mode === overlay\n   */\n  @Input() iconColor = 'default';\n\n  /**\n   * Whether action titles are displayed\n   */\n  @Input() withTitle = true;\n\n  /**\n   * Whether action tooltips are displayed\n   */\n  @Input() withTooltip = true;\n\n  /**\n   * Whether action titles are displayed (condition for scroll button)\n   */\n  @Input() scrollActive = true;\n\n  /**\n   * Whether action icons are displayed\n   */\n  @Input() withIcon = true;\n\n  /**\n   * Which icon want to be shown\n   */\n  @Input() icon = 'dots-horizontal';\n\n  /**\n   * Overlay X position\n   */\n  @Input() xPosition = 'before';\n\n  /**\n   * Overlay Y position\n   */\n  @Input() yPosition = 'above';\n\n  /**\n   * Class to add to the actionbar overlay\n   */\n  @Input()\n  set overlayClass(value: string) {\n    this._overlayClass = value;\n  }\n  get overlayClass(): string {\n    return [this._overlayClass, 'igo-actionbar-overlay'].join(' ');\n  }\n  private _overlayClass = '';\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.with-title')\n  get withTitleClass() {\n    return this.withTitle;\n  }\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.with-icon')\n  get withIconClass() {\n    return this.withIcon;\n  }\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.horizontal')\n  get horizontalClass() {\n    return this.horizontal;\n  }\n\n  get heightCondition(): boolean {\n    const el = this.elRef.nativeElement;\n    if (this.scrollActive === false) {\n      if (el.clientHeight < el.scrollHeight) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  get positionConditionTop(): boolean {\n    if (this.elRef.nativeElement.scrollTop === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  get positionConditionLow(): boolean {\n    const el = this.elRef.nativeElement;\n    if (el.scrollTop >= (el.scrollHeight - el.clientHeight)) {\n      return false;\n    }\n    return true;\n  }\n\n  get isDesktop(): boolean {\n    return this.mediaService.getMedia() === Media.Desktop;\n  }\n\n  constructor(\n    public overlay: Overlay,\n    private elRef: ElementRef,\n    private cdRef: ChangeDetectorRef,\n    public mediaService: MediaService) {}\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const store = changes.store;\n    if (store && store.currentValue !== store.previousValue) {\n      if (this.watcher !== undefined) {\n        this.watcher.destroy();\n      }\n      this.watcher = new EntityStoreWatcher(this.store, this.cdRef);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this.watcher.destroy();\n  }\n\n  /**\n   * Invoke the action handler\n   * @internal\n   */\n  onTriggerAction(action: Action) {\n    const args = action.args || [];\n    action.handler(...args);\n  }\n\n  scrollDown() {\n    this.elRef.nativeElement.scrollBy(0, 52);\n  }\n\n  scrollUp() {\n    this.elRef.nativeElement.scrollBy(0, -52);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { ActionbarComponent } from './actionbar.component';\nimport { ActionbarItemComponent } from './actionbar-item.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoLanguageModule,\n    MatButtonModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatListModule,\n    MatCardModule,\n    MatCheckboxModule\n  ],\n  exports: [ActionbarComponent],\n  declarations: [ActionbarComponent, ActionbarItemComponent]\n})\nexport class IgoActionbarModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoActionbarModule } from './actionbar/actionbar.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoActionbarModule\n  ],\n  exports: [\n    IgoActionbarModule\n  ],\n  declarations: [],\n  providers: []\n})\nexport class IgoActionModule {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'igo-backdrop',\n  templateUrl: './backdrop.component.html',\n  styleUrls: ['./backdrop.component.scss']\n})\nexport class BackdropComponent {\n  @Input()\n  get shown(): boolean {\n    return this._shown;\n  }\n  set shown(value: boolean) {\n    this._shown = value;\n  }\n  private _shown: boolean;\n\n  constructor() {}\n}\n","<div [ngClass]=\"{'igo-backdrop-shown': shown}\"></div>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BackdropComponent } from './backdrop.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BackdropComponent],\n  exports: [BackdropComponent]\n})\nexport class IgoBackdropModule {\n  static forRoot(): ModuleWithProviders<IgoBackdropModule> {\n    return {\n      ngModule: IgoBackdropModule,\n      providers: []\n    };\n  }\n}\n","import { Directive, Input, ElementRef, OnInit } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\n\n\n/**\n * This directive allow to add an icon inside a matBadge.\n * A value must be set into the matBadge directive ex: matBadge=\"icon\".\n * The badge content will be overrided by this current directive.\n */\n@Directive({\n  selector: '[igoMatBadgeIcon]'\n})\nexport class IgoBadgeIconDirective implements OnInit {\n  @Input()\n  set igoMatBadgeIcon(value: string) {\n    this.matIconRegistry.getNamedSvgIcon(value).subscribe((svgObj) => {\n      this.svg = svgObj;\n      this.updateSvg();\n    });\n  }\n  private svg: SVGElement;\n\n  @Input()\n  set matBadgeHidden(value: boolean) {\n    this.hidden = value;\n    this.updateHidden();\n  }\n  private hidden = false;\n\n  @Input()\n  set matBadgeDisabled(value: boolean) {\n    this.disabled = value;\n    this.updateDisabled();\n  }\n  private disabled = false;\n\n  @Input()\n  set igoMatBadgeInverseColor(value: boolean) {\n    this.inverseColor = value;\n    this.updateColor();\n  }\n  private inverseColor = false;\n\n  @Input()\n  set igoMatBadgeInheritColor(value: boolean) {\n    this.inheritColor = value;\n    this.updateColor();\n  }\n  private inheritColor = false;\n\n  get badge() {\n    return this.el.nativeElement.querySelector('.mat-badge-content');\n  }\n\n  private originalColor: string;\n\n  constructor(\n    private el: ElementRef,\n    private matIconRegistry: MatIconRegistry\n  ) {}\n\n  ngOnInit() {\n    this.badge.style.alignItems = 'center';\n    this.badge.style.justifyContent = 'center';\n\n    this.updateHidden();\n    this.updateColor();\n    this.updateSvg();\n  }\n\n  private updateSvg() {\n    if (!this.badge) {\n      return;\n    }\n    this.badge.innerHTML = '';\n    if (this.svg) {\n      this.badge.appendChild(this.svg);\n    }\n  }\n  private updateColor() {\n    if (!this.badge) {\n      return;\n    }\n\n    if (this.inheritColor) {\n      if (this.inverseColor) {\n        this.badge.style.color = 'currentColor';\n        this.badge.style.background = 'none';\n      } else {\n        this.badge.style.color = '';\n        this.badge.style.background = 'currentColor';\n      }\n    } else {\n      if (this.inverseColor) {\n        this.badge.style.color = window\n          .getComputedStyle(this.badge, null)\n          .getPropertyValue('background-color');\n        this.badge.style.background = 'none';\n      } else {\n        this.badge.style.color = '';\n        this.badge.style.background = '';\n      }\n    }\n    this.originalColor = this.badge.style.color;\n    this.updateDisabled();\n  }\n\n  private updateHidden() {\n    if (!this.badge) {\n      return;\n    }\n    this.badge.style.display = this.hidden ? 'none' : 'flex';\n  }\n\n  private updateDisabled() {\n    if (!this.badge || !this.inverseColor) {\n      return;\n    }\n    if (this.disabled) {\n      this.originalColor = this.badge.style.color;\n      this.badge.style.color = '#b9b9b9';\n    } else {\n      this.badge.style.color = this.originalColor;\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { IgoBadgeIconDirective } from './badge-icon.directive';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [MatBadgeModule, MatIconModule],\n  declarations: [IgoBadgeIconDirective],\n  exports: [MatBadgeModule, IgoBadgeIconDirective]\n})\nexport class IgoMatBadgeIconModule {\n  static forRoot(): ModuleWithProviders<IgoMatBadgeIconModule> {\n    return {\n      ngModule: IgoMatBadgeIconModule,\n      providers: []\n    };\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Output\n} from '@angular/core';\n\n@Directive({\n  selector: '[igoClickout]'\n})\nexport class ClickoutDirective {\n  @Output() clickout = new EventEmitter<MouseEvent>();\n\n  @HostListener('document:click', ['$event', '$event.target'])\n  handleMouseClick(event: MouseEvent, target: HTMLElement) {\n    if (!target) {\n      return;\n    }\n\n    if (!this.el.nativeElement.contains(target)) {\n      this.clickout.emit(event);\n    }\n  }\n\n  constructor(private el: ElementRef) {}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ClickoutDirective } from './clickout.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [ClickoutDirective],\n  exports: [ClickoutDirective]\n})\nexport class IgoClickoutModule {\n  static forRoot(): ModuleWithProviders<IgoClickoutModule> {\n    return {\n      ngModule: IgoClickoutModule,\n      providers: []\n    };\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'clone'\n})\nexport class ClonePipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    if (value === undefined) {\n      return value;\n    }\n\n    if (value instanceof Array) {\n      return value.map(obj => Object.assign(Object.create(obj), obj));\n    } else {\n      return Object.assign(Object.create(value), value);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ClonePipe } from './clone.pipe';\n\n@NgModule({\n  imports: [],\n  declarations: [ClonePipe],\n  exports: [ClonePipe]\n})\nexport class IgoCloneModule {\n  static forRoot(): ModuleWithProviders<IgoCloneModule> {\n    return {\n      ngModule: IgoCloneModule,\n      providers: []\n    };\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\n\n@Directive({\n  selector: '[igoCollapse]'\n})\nexport class CollapseDirective {\n  @Input()\n  get target() {\n    return this._target;\n  }\n  set target(value: Element) {\n    this._target = value;\n  }\n  private _target: Element;\n\n  @Input()\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n  set collapsed(collapsed: boolean) {\n    collapsed ? this.collapseTarget() : this.expandTarget();\n    this._collapsed = collapsed;\n    this.toggle.emit(collapsed);\n  }\n  private _collapsed = false;\n\n  @Output() toggle: EventEmitter<boolean> = new EventEmitter();\n\n  @HostListener('click')\n  click() {\n    this.collapsed = !this.collapsed;\n  }\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  private collapseTarget() {\n    this.renderer.addClass(this.target, 'igo-collapsed');\n    this.renderer.addClass(this.el.nativeElement, 'collapsed');\n  }\n\n  private expandTarget() {\n    this.renderer.removeClass(this.target, 'igo-collapsed');\n    this.renderer.removeClass(this.el.nativeElement, 'collapsed');\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'igo-collapsible',\n  templateUrl: './collapsible.component.html',\n  styleUrls: ['./collapsible.component.scss']\n})\nexport class CollapsibleComponent {\n  @Input()\n  get title() {\n    return this._title;\n  }\n  set title(value: string) {\n    this._title = value;\n  }\n  private _title = '';\n\n  @Input()\n  get collapsed() {\n    return this._collapsed;\n  }\n  set collapsed(value: boolean) {\n    this._collapsed = value;\n    this.toggle.emit(value);\n  }\n  private _collapsed = false;\n\n  @Output() toggle: EventEmitter<boolean> = new EventEmitter();\n}\n","<mat-list-item>\n  <mat-icon\n    svgIcon=\"chevron-up\" \n    class=\"igo-chevron\"\n    mat-list-avatar\n    igoCollapse\n    [target]=\"content\"\n    [collapsed]=\"collapsed\"\n    (toggle)=\"collapsed = $event\">\n  </mat-icon>\n  <h4 matLine>{{title}}</h4>\n</mat-list-item>\n\n<div #content>\n  <ng-content></ng-content>\n</div>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\nimport { CollapseDirective } from './collapse.directive';\nimport { CollapsibleComponent } from './collapsible.component';\n\n@NgModule({\n  imports: [MatIconModule, MatListModule],\n  declarations: [CollapsibleComponent, CollapseDirective],\n  exports: [CollapsibleComponent, CollapseDirective]\n})\nexport class IgoCollapsibleModule {\n  static forRoot(): ModuleWithProviders<IgoCollapsibleModule> {\n    return {\n      ngModule: IgoCollapsibleModule,\n      providers: []\n    };\n  }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'igo-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent {\n  public confirmMessage: string;\n\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>) {}\n}\n","<h2 mat-dialog-title class=\"mat-typography\">{{'igo.common.confirmDialog.title' | translate}}</h2>\n<div mat-dialog-content class=\"mat-typography\">{{confirmMessage}}</div>\n<div mat-dialog-actions>\n  <button mat-button color=\"primary\" (click)=\"dialogRef.close(true)\">{{'igo.common.confirmDialog.confirmBtn' | translate}}</button>\n  <button mat-button (click)=\"dialogRef.close(false)\">{{'igo.common.confirmDialog.cancelBtn' | translate}}</button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Observable } from 'rxjs';\n\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\n\n@Injectable()\nexport class ConfirmDialogService {\n  constructor(private dialog: MatDialog) {}\n\n  public open(message: string): Observable<any> {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      disableClose: false\n    });\n    dialogRef.componentInstance.confirmMessage = message;\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\nimport { ConfirmDialogService } from './confirm-dialog.service';\n\n@NgModule({\n  imports: [MatButtonModule, MatDialogModule, IgoLanguageModule],\n  declarations: [ConfirmDialogComponent],\n  exports: [ConfirmDialogComponent],\n  providers: [ConfirmDialogService]\n})\nexport class IgoConfirmDialogModule {\n  static forRoot(): ModuleWithProviders<IgoConfirmDialogModule> {\n    return {\n      ngModule: IgoConfirmDialogModule,\n      providers: []\n    };\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  ViewContainerRef\n} from '@angular/core';\nimport type { TemplateRef } from '@angular/core';\n\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\n\n@Directive({\n  selector: '[igoContextMenu]'\n})\nexport class ContextMenuDirective {\n  private overlayRef: OverlayRef | null;\n  private sub: Subscription;\n\n  @Input('igoContextMenu') menuContext: TemplateRef<any>;\n  @Output() menuPosition = new EventEmitter<{ x: number; y: number }>();\n\n  constructor(\n    public overlay: Overlay,\n    public viewContainerRef: ViewContainerRef,\n    private elementRef: ElementRef\n  ) {}\n\n  @HostListener('contextmenu', ['$event'])\n  public onContextMenu(e: MouseEvent): void {\n    const {x, y} = e;\n    this.close();\n    e.preventDefault();\n    this.menuPosition.emit({ x, y });\n    this.overlayRef = null;\n    const positionStrategy = this.overlay\n      .position()\n      .flexibleConnectedTo({ x, y })\n      .withPositions([\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        }\n      ]);\n    this.overlayRef = this.overlay.create({\n      positionStrategy,\n      scrollStrategy: this.overlay.scrollStrategies.close()\n    });\n    this.overlayRef.attach(\n      new TemplatePortal(this.menuContext, this.viewContainerRef, {\n        $implicit: undefined\n      })\n    );\n\n    this.sub = fromEvent<MouseEvent>(document, 'click')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          this.close();\n          return (\n            !!this.overlayRef &&\n            !this.overlayRef.overlayElement.contains(clickTarget)\n          );\n        }),\n        take(1)\n      )\n      .subscribe(() => this.close());\n\n    this.sub = fromEvent<MouseEvent>(document, 'contextmenu')\n      .pipe(\n        filter(event => {\n          const clickTarget = event.target as HTMLElement;\n          if (\n            clickTarget &&\n            !this.elementRef.nativeElement.contains(clickTarget) &&\n            !this.overlayRef.overlayElement.contains(clickTarget)\n          ) {\n            return true;\n          } else {\n            event.preventDefault();\n          }\n        }),\n        take(1)\n      )\n      .subscribe(() => this.close());\n  }\n\n  close() {\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ContextMenuDirective } from './context-menu.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [ContextMenuDirective],\n  exports: [ContextMenuDirective]\n})\nexport class IgoContextMenuModule {\n  static forRoot(): ModuleWithProviders<IgoContextMenuModule> {\n    return {\n      ngModule: IgoContextMenuModule,\n      providers: []\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'igo-custom-html',\n  templateUrl: './custom-html.component.html',\n  styleUrls: ['./custom-html.component.scss']\n})\nexport class CustomHtmlComponent {\n  @Input()\n  get html(): string {\n    return this._html;\n  }\n  set html(value: string) {\n    this._html = value;\n  }\n  private _html = '';\n\n  constructor() {}\n}\n","<div class=\"custom-html\" [innerHTML]=\"html | sanitizeHtml\"></div>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { CustomHtmlComponent } from './custom-html.component';\nimport { SanitizeHtmlPipe } from './custom-html.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatInputModule,\n    MatButtonModule,\n    IgoLanguageModule\n  ],\n  exports: [SanitizeHtmlPipe, CustomHtmlComponent],\n  declarations: [SanitizeHtmlPipe, CustomHtmlComponent]\n})\nexport class IgoCustomHtmlModule {\n  static forRoot(): ModuleWithProviders<IgoCustomHtmlModule> {\n    return {\n      ngModule: IgoCustomHtmlModule\n    };\n  }\n}\n","import {\r\n  Directive,\r\n  HostListener,\r\n  HostBinding,\r\n  EventEmitter,\r\n  Output,\r\n  Input\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[igoDragAndDrop]'\r\n})\r\nexport class DragAndDropDirective {\r\n\r\n  @Input() allowedExtensions: Array<string> = [];\r\n\r\n  @Output() protected filesDropped: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @Output() protected filesInvalid: EventEmitter<File[]> = new EventEmitter();\r\n\r\n  @HostBinding('style.background') private background = 'inherit';\r\n\r\n  @HostListener('dragover', ['$event'])\r\n  public onDragOver(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = '#999';\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event'])\r\n  public onDragLeave(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    this.background = 'inherit';\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  public onDrop(evt) {\r\n    evt.preventDefault();\r\n    evt.stopPropagation();\r\n    if (evt.alreadyFired) {\r\n      return;\r\n    }\r\n    evt.alreadyFired = true;\r\n\r\n    this.background = 'inherit';\r\n    const filesObj = this.validExtensions(evt);\r\n    if (filesObj.valid.length) {\r\n      this.filesDropped.emit(filesObj.valid);\r\n    }\r\n    if (filesObj.invalid.length) {\r\n      this.filesInvalid.emit(filesObj.invalid);\r\n    }\r\n  }\r\n\r\n  private validExtensions(evt) {\r\n    const files = evt.dataTransfer.files;\r\n    const filesObj = {\r\n      valid: [],\r\n      invalid: []\r\n    };\r\n    if (files.length > 0) {\r\n      for (const file of files) {\r\n        const ext = file.name.split('.')[file.name.split('.').length - 1];\r\n        if (\r\n          this.allowedExtensions.length === 0 ||\r\n          (\r\n            this.allowedExtensions.lastIndexOf(ext) !== -1 &&\r\n            file.size !== 0\r\n          )\r\n        ) {\r\n          filesObj.valid.push(file);\r\n        } else {\r\n          filesObj.invalid.push(file);\r\n        }\r\n      }\r\n    }\r\n\r\n    return filesObj;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DragAndDropDirective } from './drag-drop.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [DragAndDropDirective],\n  exports: [DragAndDropDirective]\n})\nexport class IgoDrapDropModule {\n  static forRoot(): ModuleWithProviders<IgoDrapDropModule> {\n    return {\n      ngModule: IgoDrapDropModule,\n      providers: []\n    };\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { Observable, Subscription } from 'rxjs';\n\n/**\n * This class is used in the DynamicComponentOutlet component. It holds\n * a reference to a component factory and can render that component\n * in a target element on demand. It's also possible to set inputs\n * and to subscribe to outputs.\n */\nexport class DynamicComponent<C> {\n\n  /**\n   * Component reference\n   */\n  private componentRef: ComponentRef<C>;\n\n  /**\n   * Subscriptions to the component's outputs. Those need\n   * to be unsubscribed when the component is destroyed.\n   */\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Component target element\n   */\n  private target: ViewContainerRef;\n\n  /**\n   * Component inputs\n   */\n  private inputs: {[key: string]: any} = {};\n\n  /**\n   * Subscriptions to the component's async inputs\n   */\n  private inputs$$: {[key: string]: Subscription} = {};\n\n  /**\n   * Subscribers to the component's outputs\n   */\n  private subscribers: {[key: string]: (event: any) => void} = {};\n\n  constructor(private componentFactory: ComponentFactory<C>) {}\n\n  /**\n   * Render the component to a target element.\n   * Set it's inputs and subscribe to it's outputs.\n   * @param target Target element\n   */\n  setTarget(target: ViewContainerRef) {\n    this.target = target;\n    this.componentRef = target.createComponent(this.componentFactory);\n    this.updateInputs(this.inputs);\n    this.updateSubscribers(this.subscribers);\n  }\n\n  /**\n   * Destroy this component. That means, removing from it's target\n   * element and unsubscribing to it's outputs.\n   */\n  destroy() {\n    if (this.target !== undefined) {\n      this.target.clear();\n    }\n    if (this.componentRef !== undefined) {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n    this.unobserveAllInputs();\n    this.unsubscribeAll();\n  }\n\n  /**\n   * Update the component inputs. This is an update so any\n   * key not defined won't be overwritten.\n   */\n  updateInputs(inputs: {[key: string]: any}) {\n    this.inputs = inputs;\n    if (this.componentRef === undefined) {\n      return;\n    }\n\n    const instance = this.componentRef.instance;\n    const allowedInputs = this.componentFactory.inputs;\n    allowedInputs.forEach((value: {propName: string; templateName: string; }) => {\n      const key = value.propName;\n\n      this.unobserveInput(key);\n\n      const inputValue = inputs[key];\n      if (inputs.hasOwnProperty(key)) {\n        if (inputValue instanceof Observable) {\n          this.observeInput(key, inputValue);\n        } else {\n          this.setInputValue(instance, key, inputValue);\n        }\n      }\n    });\n\n    if (typeof (instance as any).onUpdateInputs === 'function') {\n      (instance as any).onUpdateInputs();\n    }\n  }\n\n  /**\n   * Set an instance's input value\n   * @param instance Component instance\n   * @param key Input key\n   * @param value Input value\n   */\n  private setInputValue(instance: C, key: string, value: any) {\n    const currentValue = instance[key];\n    if (value === currentValue) {\n      return;\n    }\n\n    const prototype = Object.getPrototypeOf(instance);\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, key);\n    if (descriptor !== undefined && descriptor.set !== undefined) {\n      descriptor.set.call(instance, value);\n    } else {\n      instance[key] = value;\n    }\n  }\n\n  /**\n   * Update the component subscribers. This is an update so any\n   * key not defined won't be overwritten.\n   */\n  updateSubscribers(subscribers: {[key: string]: (event: any) => void}) {\n    this.subscribers = subscribers;\n    if (this.componentRef === undefined) {\n      return;\n    }\n\n    const instance = this.componentRef.instance;\n    const allowedSubscribers = this.componentFactory.outputs;\n    allowedSubscribers.forEach((value: {propName: string; templateName: string; }) => {\n      const key = value.propName;\n      if (subscribers.hasOwnProperty(key)) {\n        const emitter = instance[key];\n        const subscriber = subscribers[key];\n        if (Array.isArray(subscriber)) {\n          subscriber.forEach((_subscriber) => {\n            this.subscriptions.push(emitter.subscribe(_subscriber));\n          });\n        } else {\n          this.subscriptions.push(emitter.subscribe(subscriber));\n        }\n      }\n    });\n  }\n\n  /**\n   * Subscribe to an observable input and update the component's input value\n   * accordingly\n   * @param key Input key\n   * @param observable Observable\n   */\n  private observeInput(key: string, observable: Observable<any>) {\n    this.inputs$$[key] = observable.subscribe((value: any) => {\n      const instance = this.componentRef.instance;\n      this.setInputValue(instance, key, value);\n\n      if (typeof (instance as any).onUpdateInputs === 'function') {\n        (instance as any).onUpdateInputs();\n      }\n    });\n  }\n\n  /**\n   * Unsubscribe to an observable input\n   * @param key Input key\n   */\n  private unobserveInput(key: string) {\n    if (this.inputs$$[key] !== undefined) {\n      this.inputs$$[key].unsubscribe();\n      this.inputs$$[key] = undefined;\n    }\n  }\n\n  /**\n   * Unsubscribe to all outputs.\n   */\n  private unobserveAllInputs() {\n    Object.values(this.inputs$$).forEach((s: Subscription | undefined) => {\n      if (s !== undefined) {\n        s.unsubscribe();\n      }\n    });\n    this.inputs$$ = {};\n  }\n\n  /**\n   * Unsubscribe to all outputs.\n   */\n  private unsubscribeAll() {\n    this.subscriptions.forEach((s: Subscription) => s.unsubscribe());\n    this.subscriptions = [];\n  }\n\n}\n","import {\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { DynamicComponent } from './dynamic-component';\n\n/**\n * Service to creates DynamicComponent instances from base component classes\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicComponentService {\n\n  constructor(private resolver: ComponentFactoryResolver) {}\n\n  /**\n   * Creates a DynamicComponent instance from a base component class\n   * @param componentCls The component class\n   * @returns DynamicComponent instance\n   */\n  create(componentCls: any): DynamicComponent<any> {\n    const factory = this.resolver.resolveComponentFactory(componentCls as any);\n    return new DynamicComponent<typeof componentCls>(factory);\n  }\n}\n","import {\n  Input,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewChild\n} from '@angular/core';\n\nimport { ObjectUtils } from '@igo2/utils';\n\nimport { DynamicComponent } from '../shared/dynamic-component';\nimport { DynamicComponentService } from '../shared/dynamic-component.service';\n\n@Component({\n  selector: 'igo-dynamic-outlet',\n  templateUrl: 'dynamic-outlet.component.html',\n  styleUrls: ['dynamic-outlet.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicOutletComponent implements OnChanges, OnDestroy {\n  /**\n   * The dynamic component base class or the dynamic component itself\n   */\n  @Input() component: DynamicComponent<any> | any;\n\n  /**\n   * The dynamic component inputs\n   */\n  @Input() inputs: { [key: string]: any } = {};\n\n  /**\n   * The subscribers to the dynamic component outputs\n   */\n  @Input() subscribers: { [key: string]: (event: any) => void } = {};\n\n  /**\n   * The dynamic component\n   */\n  private dynamicComponent: DynamicComponent<any>;\n\n  /**\n   * The view element to render the component to\n   * @ignore\n   */\n  @ViewChild('target', { read: ViewContainerRef, static: true })\n  private target: ViewContainerRef;\n\n  constructor(\n    private dynamicComponentService: DynamicComponentService,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  /**\n   * If the dynamic component changes, create it.\n   * If the inputs or subscribers change, update the current component's\n   * inputs or subscribers.\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const component = changes.component;\n    const inputs = changes.inputs;\n    const subscribers = changes.subscribers;\n    const eq = ObjectUtils.objectsAreEquivalent;\n\n    if (!component || !component.currentValue) {\n      return;\n    }\n\n    if (component.currentValue !== component.previousValue) {\n      this.createComponent(component.currentValue);\n    } else {\n      const inputsAreEquivalents =\n        inputs && eq(inputs.currentValue || {}, inputs.previousValue || {});\n      const subscribersAreEquivalents =\n        subscribers &&\n        eq(subscribers.currentValue || {}, subscribers.previousValue || {});\n\n      if (inputsAreEquivalents === false) {\n        this.updateInputs();\n      }\n\n      if (subscribersAreEquivalents === false) {\n        this.updateSubscribers();\n      }\n    }\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Destroy the dynamic component and all it's subscribers\n   * @internal\n   */\n  ngOnDestroy() {\n    if (this.dynamicComponent) {\n      this.dynamicComponent.destroy();\n    }\n  }\n\n  /**\n   * Create a  DynamicComponent out of the component class and render it.\n   * @internal\n   */\n  private createComponent(component: DynamicComponent<any> | any) {\n    if (this.dynamicComponent !== undefined) {\n      this.dynamicComponent.destroy();\n    }\n    this.dynamicComponent =\n      component instanceof DynamicComponent\n        ? component\n        : this.dynamicComponentService.create(component);\n    this.renderComponent();\n  }\n\n  /**\n   * Create and render the dynamic component. Set it's inputs and subscribers\n   * @internal\n   */\n  private renderComponent() {\n    this.updateInputs();\n    this.updateSubscribers();\n    this.dynamicComponent.setTarget(this.target);\n  }\n\n  /**\n   * Update the dynamic component inputs. This is an update so any\n   * key not defined won't be overwritten.\n   * @internal\n   */\n  private updateInputs() {\n    this.dynamicComponent.updateInputs(this.inputs);\n  }\n\n  /**\n   * Update the dynamic component subscribers. This is an update so any\n   * key not defined won't be overwritten.\n   * @internal\n   */\n  private updateSubscribers() {\n    this.dynamicComponent.updateSubscribers(this.subscribers);\n  }\n}\n","<ng-template #target></ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DynamicOutletComponent } from './dynamic-outlet.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    DynamicOutletComponent\n  ],\n  declarations: [\n    DynamicOutletComponent\n  ]\n})\nexport class IgoDynamicOutletModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoDynamicOutletModule } from './dynamic-outlet/dynamic-outlet.module';\nimport { DynamicComponentService } from './shared/dynamic-component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoDynamicOutletModule\n  ],\n  exports: [\n    IgoDynamicOutletModule\n  ],\n  providers: [\n    DynamicComponentService\n  ]\n})\nexport class IgoDynamicComponentModule {}\n","import { Component, OnInit, OnDestroy, Input, ViewChild, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Media, MediaService } from '@igo2/core';\n\nimport { FlexibleState, FlexibleDirection } from './flexible.type';\n\n@Component({\n  selector: 'igo-flexible',\n  templateUrl: './flexible.component.html',\n  styleUrls: ['./flexible.component.scss']\n})\nexport class FlexibleComponent implements OnInit, OnDestroy {\n  static transitionTime = 250;\n\n  @ViewChild('flexibleMain', { static: true }) main;\n\n  @Input()\n  get initial(): string {\n    return this._initial;\n  }\n  set initial(value: string) {\n    this._initial = value;\n  }\n  private _initial = '0';\n\n  @Input()\n  get collapsed(): string {\n    return this._collapsed;\n  }\n  set collapsed(value: string) {\n    this._collapsed = value;\n  }\n  private _collapsed = '0';\n\n  @Input()\n  get expanded(): string {\n    return this._expanded;\n  }\n  set expanded(value: string) {\n    this._expanded = value;\n  }\n  private _expanded = '100%';\n\n  @Input()\n  get initialMobile(): string {\n    return this._initialMobile;\n  }\n  set initialMobile(value: string) {\n    this._initialMobile = value;\n  }\n  private _initialMobile: string = this.expanded;\n\n  @Input()\n  get collapsedMobile(): string {\n    return this._collapsedMobile;\n  }\n  set collapsedMobile(value: string) {\n    this._collapsedMobile = value;\n  }\n  private _collapsedMobile: string = this.collapsed;\n\n  @Input()\n  get expandedMobile(): string {\n    return this._expandedMobile;\n  }\n  set expandedMobile(value: string) {\n    this._expandedMobile = value;\n  }\n  private _expandedMobile: string = this.expanded;\n\n  @Input()\n  get direction(): FlexibleDirection {\n    return this._direction;\n  }\n  set direction(value: FlexibleDirection) {\n    this._direction = value;\n  }\n  private _direction: FlexibleDirection = 'column';\n\n  @Input()\n  get state(): FlexibleState {\n    return this._state;\n  }\n  set state(value: FlexibleState) {\n    const sizes = {\n      initial: this.initial,\n      collapsed: this.collapsed,\n      expanded: this.expanded\n    };\n\n    if (this.mediaService.isMobile()) {\n      Object.assign(sizes, {\n        initial: this.initialMobile,\n        collapsed: this.collapsedMobile,\n        expanded: this.expandedMobile\n      });\n    }\n\n    const size = sizes[value];\n    if (size !== undefined) {\n      this.setSize(size);\n      setTimeout(() => {\n        this._state = value;\n      }, FlexibleComponent.transitionTime);\n    }\n  }\n  private _state: FlexibleState = 'initial';\n\n  private mediaService$$: Subscription;\n\n  constructor(private el: ElementRef, private mediaService: MediaService) {}\n\n  ngOnInit() {\n    this.el.nativeElement.className += this.direction;\n\n    // Since this component supports different sizes\n    // on mobile, force a redraw when the media changes\n    this.mediaService$$ = this.mediaService.media$.subscribe(\n      (media: Media) => (this.state = this.state)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.mediaService$$) {\n      this.mediaService$$.unsubscribe();\n    }\n  }\n\n  private setSize(size: string) {\n    this._state = 'transition';\n\n    if (this.direction === 'column') {\n      this.main.nativeElement.style.height = size;\n    } else if (this.direction === 'row') {\n      this.main.nativeElement.style.width = size;\n    }\n  }\n}\n","<div #flexibleMain class=\"igo-flexible-main {{state}} {{direction}}\">\n  <div class=\"igo-container\">\n    <ng-content></ng-content>\n  </div>\n</div>\n<div class=\"igo-flexible-fill\">\n  <div>\n  \t<div class=\"igo-container\">\n      <ng-content select=\"[igoFlexibleFill]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FlexibleComponent } from './flexible.component';\n\n@NgModule({\n  imports: [],\n  declarations: [FlexibleComponent],\n  exports: [FlexibleComponent]\n})\nexport class IgoFlexibleModule {\n  static forRoot(): ModuleWithProviders<IgoFlexibleModule> {\n    return {\n      ngModule: IgoFlexibleModule,\n      providers: []\n    };\n  }\n}\n","import { AbstractControl } from '@angular/forms';\n\nimport { Form, FormField, FormFieldGroup } from './form.interfaces';\n\nexport function formControlIsRequired(control: AbstractControl): boolean {\n  if (control.validator) {\n    const validator = control.validator({} as AbstractControl);\n    if (validator && validator.required) {\n      return true;\n    }\n  }\n\n  if ((control as any).controls) {\n    const requiredControl = Object.keys((control as any).controls).find((key: string) => {\n      return formControlIsRequired((control as any).controls[key]);\n    });\n    return requiredControl !== undefined;\n  }\n\n  return false;\n}\n\nexport function getDefaultErrorMessages(): {[key: string]: string} {\n  return {\n    required: 'igo.common.form.errors.required'\n  };\n}\n\nexport function getControlErrorMessage(control: AbstractControl, messages: {[key: string]: string}): string {\n  const errors = control.errors || {};\n  const errorKeys = Object.keys(errors);\n  const errorMessages = errorKeys\n    .map((key: string) => messages[key])\n    .filter((message: string) => message !== undefined);\n  return errorMessages.length > 0 ? errorMessages[0] : '';\n}\n\nexport function getAllFormFields(form: Form): FormField[] {\n  return form.groups.reduce((acc: FormField[], group: FormFieldGroup) => {\n    return acc.concat(group.fields);\n  }, [].concat(form.fields));\n}\n\nexport function getFormFieldByName(form: Form, name: string): FormField {\n  const fields = getAllFormFields(form);\n  return fields.find((field: FormField) => {\n    return field.name === name;\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n\nimport t from 'typy';\n\nimport { Form, FormField, FormFieldGroup } from '../shared/form.interfaces';\nimport { getAllFormFields } from '../shared/form.utils';\n\n/**\n * A configurable form\n */\n@Component({\n  selector: 'igo-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormComponent implements OnChanges {\n\n  /**\n   * Form\n   */\n  @Input() form: Form;\n\n  /**\n   * Input data\n   */\n  @Input() formData: { [key: string]: any};\n\n  /**\n   * Form autocomplete\n   */\n  @Input() autocomplete: string = 'off';\n\n  /**\n   * Event emitted when the form is submitted\n   */\n  @Output() submitForm = new EventEmitter<{[key: string]: any}>();\n\n  @ViewChild('buttons', { static: true }) buttons: ElementRef;\n\n  get hasButtons(): boolean {\n    return this.buttons.nativeElement.children.length !== 0;\n  }\n\n  constructor() {}\n\n  /**\n   * Is the entity or the template change, recreate the form or repopulate it.\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    const formData = changes.formData;\n    if (formData && formData.currentValue !== formData.previousValue) {\n      if (formData.currentValue === undefined) {\n        this.clear();\n      } else {\n        this.setData(formData.currentValue);\n      }\n    }\n  }\n\n  /**\n   * Transform the form data to a feature and emit an event\n   * @param event Form submit event\n   * @internal\n   */\n  onSubmit() {\n    this.submitForm.emit(this.getData());\n  }\n\n  getData(): { [key: string]: any} {\n    const data = {};\n    getAllFormFields(this.form).forEach((field: FormField) => {\n      this.updateDataWithFormField(data, field);\n    });\n    return data;\n  }\n\n  private setData(data: {[key: string]: any}) {\n    this.form.fields.forEach((field: FormField) => {\n      field.control.setValue(t(data, field.name).safeObject);\n    });\n\n    this.form.groups.forEach((group: FormFieldGroup) => {\n      group.fields.forEach((field: FormField) => {\n        field.control.setValue(t(data, field.name).safeObject);\n      });\n    });\n  }\n\n  private updateDataWithFormField(data: { [key: string]: any}, field: FormField) {\n    const control = field.control;\n    if (!control.disabled) {\n      data[field.name] = control.value;\n    }\n  }\n\n  /**\n   * Clear form\n   */\n  private clear() {\n    this.form.control.reset();\n  }\n\n}\n","\n<form\n  [autocomplete]=\"autocomplete\"\n  [formGroup]=\"form.control\"\n  (ngSubmit)=\"onSubmit()\">\n  <div class=\"igo-form-body\" [ngClass]=\"{'igo-form-body-with-buttons': hasButtons}\">\n    <div class=\"igo-form-content\">\n      <ng-content></ng-content>\n    </div>\n    <div #buttons class=\"igo-form-buttons\">\n      <ng-content select=\"[formButtons]\"></ng-content>\n    </div>\n  </div>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FormComponent } from './form.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    FormComponent,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    FormComponent\n  ]\n})\nexport class IgoFormFormModule {}\n","import { Injectable } from '@angular/core';\nimport { FormBuilder, Validators, ValidatorFn } from '@angular/forms';\n\nimport {\n  Form,\n  FormField,\n  FormFieldConfig,\n  FormFieldGroup,\n  FormFieldGroupConfig\n} from './form.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  form(fields: FormField[], groups: FormFieldGroup[]): Form {\n    const control = this.formBuilder.group({});\n    fields.forEach((field: FormField) => {\n      control.addControl(field.name, field.control);\n    });\n    groups.forEach((group: FormFieldGroup) => {\n      control.addControl(group.name, group.control);\n    });\n\n    return {fields, groups, control};\n  }\n\n  group(config: FormFieldGroupConfig, fields: FormField[]): FormFieldGroup {\n    const options = config.options || {};\n    const control = this.formBuilder.group({});\n    fields.forEach((field: FormField) => {\n      control.addControl(field.name, field.control);\n    });\n\n    if (options.validator) {\n      const validators = this.getValidators(options.validator); // convert string to actual validator\n      control.setValidators(validators);\n    }\n\n    return Object.assign({}, config, {fields, control}) as FormFieldGroup;\n  }\n\n  field(config: FormFieldConfig): FormField {\n    const options = config.options || {};\n    const state = {\n      value: '',\n      disabled: options.disabled\n    };\n    const control = this.formBuilder.control(state);\n\n    if (options.validator) {\n      const validators = this.getValidators(options.validator); // convert string to actual validator\n      control.setValidators(validators);\n    }\n\n    return Object.assign({type: 'text'}, config, {control}) as FormField;\n  }\n\n  extendFieldConfig(config: FormFieldConfig, partial: Partial<FormFieldConfig>): FormFieldConfig {\n    const options = Object.assign({}, config.options || {}, partial.options || {});\n    const inputs = Object.assign({}, config.inputs || {}, partial.inputs || {});\n    const subscribers = Object.assign({}, config.subscribers || {}, partial.subscribers || {});\n    return Object.assign({}, config, {options, inputs, subscribers});\n  }\n\n  private getValidators(validatorOption: string | string[] | ValidatorFn): ValidatorFn | ValidatorFn[] {\n    if (Array.isArray(validatorOption)) {\n      return validatorOption.map((validatorStr) => {\n        return this.getValidator(validatorStr);\n      });\n    }\n\n    return this.getValidator(validatorOption);\n  }\n\n  private getValidator(validatorStr: string | ValidatorFn): ValidatorFn {\n    if (typeof validatorStr !== 'string') {\n      return validatorStr;\n    }\n\n    // regex pattern to extract arguments from string for e.g applying on \"minLength(8)\" would extract 8\n    const re = /^([a-zA-Z]{3,15})\\((.{0,20})\\)$/;\n    const match = validatorStr.match(re);\n\n    if (!match) {\n      return Validators[validatorStr];\n    }\n\n    const name = match[1];\n    const args = match[2];\n    return Validators[name](args);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Service where all available form fields are registered.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormFieldService {\n\n  static fields: {[key: string]: any} = {};\n\n  static register(type: string, component: any) {\n    FormFieldService.fields[type] = component;\n  }\n\n  constructor() {}\n\n  /**\n   * Return field component by type\n   * @param type Field type\n   * @returns Field component\n   */\n  getFieldByType(type: string): any {\n    return FormFieldService.fields[type];\n  }\n\n}\n","import { FormFieldService } from './form-field.service';\n\nexport function IgoFormFieldComponent(type: string): (cls: any) => any {\n  return (compType: any) => {\n    FormFieldService.register(type, compType);\n  };\n}\n","\n\n<ng-container *ngIf=\"field !== undefined\">\n  <igo-dynamic-outlet\n    [component]=\"getFieldComponent()\"\n    [inputs]=\"getFieldInputs()\"\n    [subscribers]=\"getFieldSubscribers()\">\n  </igo-dynamic-outlet>\n</ng-container>\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { FormField, FormFieldInputs, FormFieldOptions } from '../shared/form.interfaces';\nimport { FormFieldService } from '../shared/form-field.service';\nimport { getDefaultErrorMessages } from '../shared';\n\n/**\n * This component renders the proper form input based on\n * the field configuration it receives.\n */\n@Component({\n  selector: 'igo-form-field',\n  templateUrl: './form-field.component.html',\n  styleUrls: ['./form-field.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormFieldComponent {\n\n  /**\n   * Field configuration\n   */\n  @Input() field: FormField;\n\n  /**\n   * Field inputs cache\n   */\n  private fieldInputs: FormFieldInputs = undefined;\n\n  /**\n   * Field subscribers cache\n   */\n  private fieldSubscribers: {[key: string]: ({field: FormField, control: FormControl}) => void } = undefined;\n\n  get fieldOptions(): FormFieldOptions {\n    return this.field.options || {};\n  }\n\n  constructor(private formFieldService: FormFieldService) {}\n\n  getFieldComponent(): any {\n    return this.formFieldService.getFieldByType(this.field.type || 'text');\n  }\n\n  getFieldInputs(): FormFieldInputs {\n    if (this.fieldInputs !== undefined) {\n      return this.fieldInputs;\n    }\n\n    const errors = this.fieldOptions.errors || {};\n    this.fieldInputs = Object.assign(\n      {\n        placeholder: this.field.title,\n        disableSwitch: this.fieldOptions.disableSwitch || false\n      },\n      Object.assign({}, this.field.inputs || {}),\n      {\n        formControl: this.field.control,\n        errors: Object.assign({}, getDefaultErrorMessages(), errors)\n      }\n    );\n    return this.fieldInputs;\n  }\n\n  getFieldSubscribers(): {[key: string]: ({field: FormField, control: FormControl}) => void } {\n    if (this.fieldSubscribers !== undefined) {\n      return this.fieldSubscribers;\n    }\n\n    this.fieldSubscribers = Object.assign({}, this.field.subscribers || {});\n    return this.fieldSubscribers;\n  }\n}\n","<mat-form-field>\n  <mat-select\n    [required]=\"required\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"formControl\">\n    <mat-option *ngFor=\"let choice of choices$ | async\" [value]=\"choice.value\">\n      {{choice.title}}\n    </mat-option>\n  </mat-select>\n  <mat-icon\n    *ngIf=\"disableSwitch === true\"\n    class=\"igo-form-disable-switch\"\n    [svgIcon]=\"(disabled$ | async) === true ? 'checkbox-blank-outline' : 'checkbox-marked-outline'\"\n    (click)=\"onDisableSwitchClick()\"\n    matPrefix>\n  </mat-icon>\n  <mat-error *ngIf=\"formControl.errors\">{{getErrorMessage() | translate}}</mat-error>\n</mat-form-field>\n","import {\n  Input,\n  Component,\n  ChangeDetectionStrategy,\n  OnInit\n} from '@angular/core';\nimport type { FormControl } from '@angular/forms';\n\nimport { BehaviorSubject, } from 'rxjs';\n\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\nimport { FormFieldSelectChoice } from '../shared/form.interfaces';\nimport { IgoFormFieldComponent } from '../shared/form-field-component';\n\n/**\n * This component renders a select field\n */\n@IgoFormFieldComponent('select')\n@Component({\n  selector: 'igo-form-field-select',\n  templateUrl: './form-field-select.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormFieldSelectComponent implements OnInit {\n\n  readonly disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  /**\n   * Select input choices\n   */\n  @Input()\n  set choices(value: FormFieldSelectChoice[]) { this.choices$.next(value); }\n  get choices(): FormFieldSelectChoice[] { return this.choices$.value; }\n  readonly choices$: BehaviorSubject<FormFieldSelectChoice[]> = new BehaviorSubject([]);\n\n  /**\n   * The field's form control\n   */\n  @Input() formControl: FormControl;\n\n  /**\n   * Field placeholder\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Field placeholder\n   */\n  @Input() errors: {[key: string]: string};\n\n  /**\n   * Wheter a disable switch should be available\n   */\n  @Input() disableSwitch: boolean = false;\n\n  /**\n   * Whether the field is required\n   */\n  get required(): boolean {\n    return formControlIsRequired(this.formControl);\n  }\n\n  ngOnInit() {\n    this.disabled$.next(this.formControl.disabled);\n  }\n\n  /**\n   * Get error message\n   */\n  getErrorMessage(): string {\n    return getControlErrorMessage(this.formControl, this.errors);\n  }\n\n  onDisableSwitchClick() {\n    this.toggleDisabled();\n  }\n\n  private toggleDisabled() {\n    const disabled = !this.disabled$.value;\n    if (disabled === true) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.disabled$.next(disabled);\n  }\n\n}\n","<mat-form-field>\n  <input\n    matInput\n    [required]=\"required\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"formControl\">\n  <mat-icon\n    *ngIf=\"disableSwitch === true\"\n    class=\"igo-form-disable-switch\"\n    [svgIcon]=\"(disabled$ | async) === true ? 'checkbox-blank-outline' : 'checkbox-marked-outline'\"\n    (click)=\"onDisableSwitchClick()\"\n    matPrefix>\n  </mat-icon>\n  <mat-error *ngIf=\"formControl.errors\">{{getErrorMessage() | translate}}</mat-error>\n</mat-form-field>\n","import {\n  Input,\n  Component,\n  ChangeDetectionStrategy,\n  OnInit\n} from '@angular/core';\nimport type { FormControl } from '@angular/forms';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  formControlIsRequired,\n  getControlErrorMessage\n} from '../shared/form.utils';\nimport { IgoFormFieldComponent } from '../shared/form-field-component';\n\n/**\n * This component renders a text field\n */\n@IgoFormFieldComponent('text')\n@Component({\n  selector: 'igo-form-field-text',\n  templateUrl: './form-field-text.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormFieldTextComponent implements OnInit {\n\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  /**\n   * The field's form control\n   */\n  @Input() formControl: FormControl;\n\n  /**\n   * Field placeholder\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Field placeholder\n   */\n  @Input() errors: {[key: string]: string};\n\n  /**\n   * Wheter a disable switch should be available\n   */\n  @Input() disableSwitch: boolean = false;\n\n  /**\n   * Whether the field is required\n   */\n  get required(): boolean {\n    return formControlIsRequired(this.formControl);\n  }\n\n  ngOnInit() {\n    this.disabled$.next(this.formControl.disabled);\n  }\n\n  /**\n   * Get error message\n   */\n  getErrorMessage(): string {\n    return getControlErrorMessage(this.formControl, this.errors);\n  }\n\n  onDisableSwitchClick() {\n    this.toggleDisabled();\n  }\n\n  private toggleDisabled() {\n    const disabled = !this.disabled$.value;\n    if (disabled === true) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.disabled$.next(disabled);\n  }\n\n}\n","<mat-form-field>\n  <textarea\n    matInput\n    [required]=\"required\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"formControl\">\n  </textarea>\n  <mat-icon\n    *ngIf=\"disableSwitch === true\"\n    class=\"igo-form-disable-switch\"\n    [svgIcon]=\"(disabled$ | async) === true ? 'checkbox-blank-outline' : 'checkbox-marked-outline'\"\n    (click)=\"onDisableSwitchClick()\"\n    matPrefix>\n  </mat-icon>\n  <mat-error *ngIf=\"formControl.errors\">{{getErrorMessage() | translate}}</mat-error>\n</mat-form-field>\n","import {\n  Input,\n  Component,\n  ChangeDetectionStrategy,\n  OnInit\n} from '@angular/core';\nimport type { FormControl } from '@angular/forms';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { formControlIsRequired, getControlErrorMessage } from '../shared/form.utils';\nimport { IgoFormFieldComponent } from '../shared/form-field-component';\n\n/**\n * This component renders a textarea field\n */\n@IgoFormFieldComponent('textarea')\n@Component({\n  selector: 'igo-form-field-textarea',\n  templateUrl: './form-field-textarea.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormFieldTextareaComponent implements OnInit {\n\n  disabled$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  /**\n   * The field's form control\n   */\n  @Input() formControl: FormControl;\n\n  /**\n   * Field placeholder\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Field placeholder\n   */\n  @Input() errors: {[key: string]: string};\n\n  /**\n   * Wheter a disable switch should be available\n   */\n  @Input() disableSwitch: boolean = false;\n\n  /**\n   * Whether the field is required\n   */\n  get required(): boolean {\n    return formControlIsRequired(this.formControl);\n  }\n\n  ngOnInit() {\n    this.disabled$.next(this.formControl.disabled);\n  }\n\n  /**\n   * Get error message\n   */\n  getErrorMessage(): string {\n    return getControlErrorMessage(this.formControl, this.errors);\n  }\n\n  onDisableSwitchClick() {\n    this.toggleDisabled();\n  }\n\n  private toggleDisabled() {\n    const disabled = !this.disabled$.value;\n    if (disabled === true) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n    this.disabled$.next(disabled);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { IgoLanguageModule } from '@igo2/core';\nimport { IgoDynamicOutletModule } from '../../dynamic-component/dynamic-outlet/dynamic-outlet.module';\n\nimport { FormFieldComponent } from './form-field.component';\nimport { FormFieldSelectComponent } from './form-field-select.component';\nimport { FormFieldTextComponent } from './form-field-text.component';\nimport { FormFieldTextareaComponent } from './form-field-textarea.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    IgoLanguageModule,\n    IgoDynamicOutletModule\n  ],\n  exports: [\n    FormFieldComponent,\n    FormFieldSelectComponent,\n    FormFieldTextComponent,\n    FormFieldTextareaComponent\n  ],\n  declarations: [\n    FormFieldComponent,\n    FormFieldSelectComponent,\n    FormFieldTextComponent,\n    FormFieldTextareaComponent\n  ]\n})\nexport class IgoFormFieldModule {}\n","<div\n  *ngIf=\"group && group.fields.length > 0\"\n  class=\"igo-form-group-fields\">\n  <div\n    *ngFor=\"let field of group.fields\"\n    class=\"igo-form-field-wrapper\"\n    [ngClass]=\"getFieldNgClass(field)\">\n    <igo-form-field [field]=\"field\"></igo-form-field>\n  </div>\n</div>\n\n<div class=\"igo-form-group-extra-content\">\n  <ng-content></ng-content>\n</div>\n\n<mat-error *ngIf=\"formControl.errors\">{{getErrorMessage() | translate}}</mat-error>\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { getControlErrorMessage } from '../shared/form.utils';\nimport { FormField, FormFieldGroup } from '../shared/form.interfaces';\n\n/**\n * A configurable form, optionnally bound to an entity\n * (for example in case of un update). Submitting that form\n * emits an event with the form data but no other operation is performed.\n */\n@Component({\n  selector: 'igo-form-group',\n  templateUrl: './form-group.component.html',\n  styleUrls: ['./form-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FormGroupComponent {\n\n  /**\n   * Form field group\n   */\n  @Input() group: FormFieldGroup;\n\n  /**\n   * Field placeholder\n   */\n  @Input() errors: {[key: string]: string};\n\n  /**\n   * Form group control\n   */\n  get formControl(): FormGroup { return this.group.control; }\n\n  constructor() {}\n\n  /**\n   * Return the number of columns a field should occupy.\n   * The maximum allowed is 2, even if the field config says more.\n   * @param field Field\n   * @returns Number of columns\n   * @internal\n   */\n  getFieldColSpan(field: FormField): number {\n    let colSpan = 2;\n    const options = field.options || {};\n    if (options.cols && options.cols > 0) {\n      colSpan = Math.min(options.cols, 2);\n    }\n\n    return colSpan;\n  }\n\n  /**\n   * Return the number of columns a field should occupy.\n   * The maximum allowed is 2, even if the field config says more.\n   * @param field Field\n   * @returns Number of columns\n   * @internal\n   */\n  getFieldNgClass(field: FormField): {[key: string]: boolean} {\n    const colspan = this.getFieldColSpan(field);\n    return {[`igo-form-field-colspan-${colspan}`]: true};\n  }\n\n  /**\n   * Get error message\n   */\n  getErrorMessage(): string {\n    const options = this.group.options || {};\n    return getControlErrorMessage(this.formControl, options.errors || {});\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { IgoFormFieldModule } from '../form-field/form-field.module';\nimport { FormGroupComponent } from './form-group.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    IgoLanguageModule,\n    IgoFormFieldModule\n  ],\n  exports: [\n    FormGroupComponent\n  ],\n  declarations: [\n    FormGroupComponent\n  ]\n})\nexport class IgoFormGroupModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoFormFormModule } from './form/form.module';\nimport { IgoFormGroupModule } from './form-group/form-group.module';\nimport { IgoFormFieldModule } from './form-field/form-field.module';\nimport { FormService } from './shared/form.service';\nimport { FormFieldService } from './shared/form-field.service';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoFormGroupModule,\n    IgoFormFieldModule\n  ],\n  exports: [\n    IgoFormFormModule,\n    IgoFormGroupModule,\n    IgoFormFieldModule\n  ],\n  declarations: [],\n  providers: [\n    FormService,\n    FormFieldService\n  ]\n})\nexport class IgoFormModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'igo-home-button',\n  templateUrl: './home-button.component.html',\n  styleUrls: ['./home-button.component.scss']\n})\nexport class HomeButtonComponent {\n\n  @Output() unselectButton = new EventEmitter<any>();\n\n  constructor() {}\n\n  onUnselectButtonClick() {\n    this.unselectButton.emit();\n  }\n}\n","<button\n    id=\"homeButton\"\n    mat-icon-button\n    tooltip-position=\"below\"\n    matTooltipShowDelay=\"500\"\n    [matTooltip]=\"'igo.context.sidenav.mainMenu' | translate\"\n    (click)=\"onUnselectButtonClick()\">\n    <mat-icon svgIcon=\"home\"></mat-icon>\n</button>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { HomeButtonComponent } from './home-button.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTooltipModule,\n    IgoLanguageModule\n  ],\n  exports: [HomeButtonComponent],\n  declarations: [HomeButtonComponent],\n  providers: []\n})\nexport class IgoHomeButtonModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { EntitySelectorComponent } from './entity-selector.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatSelectModule\n  ],\n  exports: [EntitySelectorComponent],\n  declarations: [EntitySelectorComponent]\n})\nexport class IgoEntitySelectorModule {}\n","import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[igoStopDropPropagation]'\n})\nexport class StopDropPropagationDirective {\n  @HostListener('drop', ['$event'])\n  public onDrop(event: any): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { StopDropPropagationDirective } from './stop-drop-propagation.directive';\nimport { StopPropagationDirective } from './stop-propagation.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [StopDropPropagationDirective, StopPropagationDirective],\n  exports: [StopDropPropagationDirective, StopPropagationDirective]\n})\nexport class IgoStopPropagationModule {\n  static forRoot(): ModuleWithProviders<IgoStopPropagationModule> {\n    return {\n      ngModule: IgoStopPropagationModule,\n      providers: []\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EntityTablePaginatorComponent } from './entity-table-paginator.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    MatPaginatorModule,\n  ],\n  exports: [\n    EntityTablePaginatorComponent\n  ],\n  declarations: [\n    EntityTablePaginatorComponent,\n  ]\n})\nexport class IgoEntityTablePaginatorModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { SecureImagePipe } from './secure-image.pipe';\n\n@NgModule({\n  imports: [],\n  declarations: [SecureImagePipe],\n  exports: [SecureImagePipe]\n})\nexport class IgoImageModule {\n  static forRoot(): ModuleWithProviders<IgoImageModule> {\n    return {\n      ngModule: IgoImageModule,\n      providers: []\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { IgoStopPropagationModule } from '../../stop-propagation/stop-propagation.module';\nimport { IgoCustomHtmlModule } from '../../custom-html/custom-html.module';\nimport { EntityTableRowDirective } from './entity-table-row.directive';\nimport { EntityTableComponent } from './entity-table.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { IgoEntityTablePaginatorModule } from '../entity-table-paginator/entity-table-paginator.module';\nimport { IgoImageModule } from '../../image/image.module';\nimport { IgoLanguageModule } from '@igo2/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatSelectModule } from '@angular/material/select';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatAutocompleteModule,\n    MatSortModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatPaginatorModule,\n    MatSelectModule,\n    IgoStopPropagationModule,\n    IgoCustomHtmlModule,\n    IgoEntityTablePaginatorModule,\n    IgoImageModule,\n    IgoLanguageModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatDatepickerModule,\n    MatTooltipModule\n  ],\n  exports: [\n    EntityTableComponent\n  ],\n  declarations: [\n    EntityTableComponent,\n    EntityTableRowDirective\n  ]\n})\nexport class IgoEntityTableModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoEntitySelectorModule } from './entity-selector/entity-selector.module';\nimport { IgoEntityTableModule } from './entity-table/entity-table.module';\nimport { IgoEntityTablePaginatorModule } from './entity-table-paginator/entity-table-paginator.module';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    IgoEntitySelectorModule,\n    IgoEntityTableModule,\n    IgoEntityTablePaginatorModule\n  ],\n  declarations: []\n})\nexport class IgoEntityModule {}\n","import { catchError } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { InteractiveTourOptions } from './interactive-tour.interface';\nimport { ConfigService } from '@igo2/core';\n\n@Injectable()\nexport class InteractiveTourLoader {\n  private jsonURL: string;\n  private allToursOptions;\n\n  constructor(private http: HttpClient, private configService: ConfigService) {\n    this.jsonURL = this.getPathToConfigFile();\n  }\n\n   public loadConfigTour() {\n      this.getJSON()\n        .subscribe(\n          (data) => {\n            this.allToursOptions = data;\n          },\n          (err) => {\n            throw new Error(`Problem with Interactive tour configuration file: interactiveTour.json not find. Check if the file and is path is set correctly.`);\n          }\n        );\n   }\n\n  public getPathToConfigFile(): string {\n    return (\n      this.configService.getConfig('interactiveTour.pathToConfigFile') ||\n      './config/interactiveTour.json'\n    );\n  }\n\n  public getJSON(): Observable<any> {\n    return this.http.get(this.jsonURL).pipe(\n      catchError((e) => {\n        e.error.caught = true;\n        throw e;\n      })\n    );\n  }\n\n  public getTourOptionData(toolName): InteractiveTourOptions {\n    if (this.allToursOptions === undefined) {\n      return undefined;\n    }\n    let nameInConfigFile = toolName;\n    nameInConfigFile = nameInConfigFile.replace(/\\s/g, '');\n    return this.allToursOptions[nameInConfigFile];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ShepherdService } from 'angular-shepherd';\n\nimport { ConfigService, MediaService, LanguageService } from '@igo2/core';\nimport { InteractiveTourLoader } from './interactive-tour.loader';\nimport {\n  InteractiveTourOptions,\n  InteractiveTourStep,\n  InteractiveTourAction\n} from './interactive-tour.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InteractiveTourService {\n  private previousStep: InteractiveTourStep;\n  private nextIndex = 1;\n\n  constructor(\n    private configService: ConfigService,\n    private mediaService: MediaService,\n    private languageService: LanguageService,\n    private interactiveTourLoader: InteractiveTourLoader,\n    private shepherdService: ShepherdService\n  ) {\n    if (this.isAppHaveTour()) {\n      this.interactiveTourLoader.loadConfigTour();\n    }\n  }\n\n  public isAppHaveTour() {\n    const haveTour = this.configService.getConfig('interactiveTour.activateInteractiveTour');\n    if (haveTour === undefined) {\n      return true;\n    } else {\n      return haveTour;\n    }\n  }\n\n  public isToolHaveTourConfig(toolName: string): boolean {\n    const checkTourActiveOptions = this.interactiveTourLoader.getTourOptionData(\n      toolName\n    );\n    if (checkTourActiveOptions === undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  public disabledTourButton(toolName: string): boolean {\n    const stepConfig: InteractiveTourOptions = this.interactiveTourLoader.getTourOptionData(\n      toolName\n    );\n\n    if (stepConfig?.conditions) {\n      for (const condition of stepConfig?.conditions) {\n        if (document.querySelector(condition) === null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  public isMobile(): boolean {\n    return this.mediaService.isMobile();\n  }\n\n  public isTourDisplayInMobile(): boolean {\n    const showInMobile = this.configService.getConfig(\n      'interactiveTour.tourInMobile'\n    );\n    if (showInMobile === undefined) {\n      return true;\n    }\n    return this.configService.getConfig('interactiveTour.tourInMobile');\n  }\n\n  private getButtons(buttonKind?: 'first' | 'last' | 'noBackButton') {\n    if (buttonKind === 'noBackButton') {\n      return [\n        {\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant(\n            'igo.common.interactiveTour.nextButton'\n          ),\n          type: 'next'\n        }\n      ];\n    }\n    if (buttonKind === 'first') {\n      return [\n        {\n          classes: 'shepherd-button-secondary',\n          text: this.languageService.translate.instant(\n            'igo.common.interactiveTour.exitButton'\n          ),\n          type: 'cancel'\n        },\n        {\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant(\n            'igo.common.interactiveTour.nextButton'\n          ),\n          type: 'next'\n        }\n      ];\n    }\n\n    if (buttonKind === 'last') {\n      return [\n        {\n          classes: 'shepherd-button-secondary',\n          text: this.languageService.translate.instant(\n            'igo.common.interactiveTour.backButton'\n          ),\n          type: 'back'\n        },\n        {\n          classes: 'shepherd-button-primary',\n          text: this.languageService.translate.instant(\n            'igo.common.interactiveTour.exitButton'\n          ),\n          type: 'cancel'\n        }\n      ];\n    }\n\n    return [\n      {\n        classes: 'shepherd-button-secondary',\n        text: this.languageService.translate.instant(\n          'igo.common.interactiveTour.backButton'\n        ),\n        type: 'back'\n      },\n      {\n        classes: 'shepherd-button-primary',\n        text: this.languageService.translate.instant(\n          'igo.common.interactiveTour.nextButton'\n        ),\n        type: 'next'\n      }\n    ];\n  }\n\n  private getAction(actionName: string) {\n    const action = {\n      click: 'click'\n    };\n    return action[actionName.toLowerCase()];\n  }\n\n  private addProgress() {\n    const self = this as any;\n    let nbTry = 0;\n    const maxTry = 21;\n    const checkExist = setInterval(() => {\n      if (self.getCurrentStep()) {\n        if (self.getCurrentStep().options.attachTo.element && !document.querySelector(self.getCurrentStep().options.attachTo.element)) {\n          self.cancel();\n          clearInterval(checkExist);\n          return;\n        } else {\n          const currentStepElement = self.getCurrentStep().getElement();\n          if (currentStepElement) {\n            const shepherdList = currentStepElement.querySelectorAll('.shepherd-content, .shepherd-text');\n            shepherdList.forEach(element => {\n              element.classList.add('mat-typography');\n            });\n          }\n          const header = currentStepElement\n            ? currentStepElement.querySelector('.shepherd-header')\n            : undefined;\n\n          nbTry++;\n          if (header || nbTry > maxTry) {\n            clearInterval(checkExist);\n          }\n\n          if (header) {\n            const stepsArray = self.steps;\n            const progress = document.createElement('span');\n            progress.className = 'shepherd-progress';\n            progress.innerText = `${\n              stepsArray.indexOf(self.getCurrentStep()) + 1\n            }/${stepsArray.length}`;\n            header.insertBefore(\n              progress,\n              currentStepElement.querySelector('.shepherd-cancel-icon')\n            );\n          }\n        }\n      }\n    }, 100);\n  }\n\n  private checkNext(index, tour, service) {\n    if (tour.getCurrentStep()) {\n      if (tour.getCurrentStep().options.attachTo.element && document.querySelector(tour.getCurrentStep().options.attachTo.element)) {\n        tour.complete();\n        return;\n      }\n\n      if (index.index === tour.steps.length - 1) {\n        tour.complete();\n        return;\n      }\n\n      tour.steps.splice(index.index, 1);\n      const nextStep = tour.steps[index.index];\n      if (nextStep.options.attachTo.element && !document.querySelector(nextStep.options.attachTo.element)) {\n        service.checkNext(index, tour, service);\n      } else {\n        tour._setupModal();\n        tour.show(nextStep.id);\n      }\n    }\n  }\n\n  private executeAction(\n    step: InteractiveTourStep,\n    actionConfig: InteractiveTourAction\n  ) {\n    if (!actionConfig) {\n      return;\n    }\n\n    if (\n      actionConfig.condition &&\n      ((actionConfig.condition.charAt(0) === '!' &&\n        document.querySelector(actionConfig.condition.slice(1))) ||\n        (actionConfig.condition.charAt(0) !== '!' &&\n          !document.querySelector(actionConfig.condition)))\n    ) {\n      return;\n    }\n\n    const element: HTMLElement = document.querySelector(\n      actionConfig.element || step.element\n    ) as HTMLElement;\n    const action = this.getAction(actionConfig.action);\n    if (element && action) {\n      element[action]();\n    }\n  }\n\n  private executeActionPromise(\n    step: InteractiveTourStep,\n    actionConfig: InteractiveTourAction\n  ) {\n    return new Promise<void>((resolve) => {\n      this.executeAction(step, actionConfig);\n      if (!actionConfig || !actionConfig.waitFor) {\n        resolve();\n        return;\n      }\n      let nbTry = 0;\n      const maxTry = actionConfig.maxWait ? actionConfig.maxWait / 100 : 20;\n      const checkExist = setInterval(() => {\n        nbTry++;\n        if (nbTry > maxTry || document.querySelector(actionConfig.waitFor)) {\n          clearInterval(checkExist);\n          resolve();\n        }\n      }, 100);\n    });\n  }\n\n  private getShepherdSteps(stepConfig: InteractiveTourOptions) {\n    const shepherdSteps = [];\n\n    let i = 0;\n    for (const step of stepConfig.steps) {\n      shepherdSteps.push({\n        attachTo: {\n          element: step.element,\n          on: step.position || stepConfig.position\n        },\n        popperOptions: {\n          modifiers: [{ name: 'offset', options: { offset: [0, 15] } }]\n        },\n        beforeShowPromise: () => {\n          return Promise.all([\n            this.executeActionPromise(\n              this.previousStep,\n              this.previousStep ? this.previousStep.beforeChange : undefined\n            ),\n            this.executeActionPromise(step, step.beforeShow)\n          ]);\n        },\n        buttons: this.getButtons(\n          i === 0\n            ? 'first'\n            : i + 1 === stepConfig.steps.length\n            ? 'last'\n            : stepConfig.steps[i].noBackButton\n            ? 'noBackButton'\n            : undefined\n        ),\n        classes: step.class,\n        highlightClass: step.highlightClass,\n        scrollTo: step.scrollToElement || stepConfig.scrollToElement || true,\n        canClickTarget: step.disableInteraction\n          ? !step.disableInteraction\n          : undefined,\n        title: this.languageService.translate.instant(\n          step.title || stepConfig.title\n        ),\n        text: [this.languageService.translate.instant(step.text)],\n        when: {\n          show: () => {\n            this.executeAction(step, step.onShow);\n          },\n          hide: () => {\n            this.previousStep = step;\n            this.executeAction(step, step.onHide);\n          }\n        }\n      });\n      i++;\n    }\n\n    return shepherdSteps;\n  }\n\n  public startTour(toolName: string) {\n    const stepConfig: InteractiveTourOptions = this.interactiveTourLoader.getTourOptionData(\n      toolName\n    );\n\n    this.shepherdService.defaultStepOptions = {\n      classes: stepConfig.class,\n      highlightClass: stepConfig.highlightClass,\n      canClickTarget: stepConfig.disableInteraction\n        ? !stepConfig.disableInteraction\n        : true,\n      cancelIcon: {\n        enabled: true\n      }\n    };\n\n    const shepherdSteps = this.getShepherdSteps(stepConfig);\n\n    this.shepherdService.modal = true;\n    this.shepherdService.confirmCancel = false;\n    this.shepherdService.addSteps(shepherdSteps);\n\n    this.shepherdService.tourObject.on('show', this.addProgress);\n    this.shepherdService.tourObject.on('cancel', (index) => {\n      this.checkNext(index, this.shepherdService.tourObject, this);\n    });\n\n    this.shepherdService.start();\n  }\n}\n","import { EntityRecord, EntityStore } from '../../entity';\nimport { Tool, ToolboxOptions } from './tool.interface';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n/**\n * Service where all available tools and their component are registered.\n */\nexport class Toolbox {\n  /**\n   * Observable of the active tool\n   */\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\n\n  /**\n   * Ordered list of tool names to display in a toolbar\n   */\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\n  /**\n   * Observable of the active tool\n   */\n  private activeTool$$: Subscription;\n\n  /**\n   * Active tool history. Useful for activating the previous tool.\n   */\n  private activeToolHistory: string[] = [];\n\n  /**\n   * Tool store\n   */\n  private store = new EntityStore<Tool>([], {\n    getKey: (tool: Tool) => tool.name\n  });\n\n  get tools$(): BehaviorSubject<Tool[]> {\n    return this.store.entities$;\n  }\n\n  constructor(private options: ToolboxOptions = {}) {\n    this.setToolbar(options.toolbar);\n    this.initStore();\n  }\n\n  /**\n   * Destroy the toolbox\n   */\n  destroy() {\n    this.activeTool$$.unsubscribe();\n    this.store.destroy();\n  }\n\n  /**\n   * Return a tool\n   * @param name Tool name\n   * @returns tool Tool\n   */\n  getTool(name: string): Tool {\n    return this.store.get(name);\n  }\n\n  /**\n   * Return all tools\n   * @returns Array of tools\n   */\n  getTools(): Tool[] {\n    return this.store.all();\n  }\n\n  /**\n   * Set tool configurations\n   * @param tools Tools\n   */\n  setTools(tools: Tool[]) {\n    this.store.load(tools);\n  }\n\n  /**\n   * Get toolbar\n   * @returns Toolbar value\n   */\n  getToolbar(): string[] {\n    return this.toolbar$.getValue();\n  }\n\n  /**\n   * Set toolbar\n   * @param toolbar A list of tool names\n   */\n  setToolbar(toolbar: string[]) {\n    this.toolbar$.next(toolbar || []);\n  }\n\n  /**\n   * Activate a tool (and deactivate other tools)\n   * @param name Tool name\n   * @param options Tool options\n   */\n  activateTool(name: string, options: { [key: string]: any } = {}) {\n    const tool = this.getTool(name);\n    if (tool === undefined) {\n      return;\n    }\n\n    this.store.state.update(tool, { active: true, options }, true);\n  }\n\n  /**\n   * Activate the previous tool, if any\n   */\n  activatePreviousTool() {\n    if (this.activeToolHistory.length <= 1) {\n      this.deactivateTool();\n      return;\n    }\n    const [previous, current] = this.activeToolHistory.splice(-2, 2);\n    this.activateTool(previous);\n  }\n\n  /**\n   * Activate the tool below, if any\n   */\n  /* activateBelowTool() {\n    const arrayTools = this.getToolbar();\n    const index = arrayTools.findIndex(t => t === this.activeTool$.getValue().name);\n    if (arrayTools[index + 1] !== undefined) {\n      this.deactivateTool();\n      const below = arrayTools[index + 1];\n      this.activateTool(below);\n    } else {\n      this.deactivateTool();\n      const below = arrayTools[0];\n      this.activateTool(below);\n    }\n  } */\n\n  /**\n   * Activate the tool above, if any\n   */\n  /* activateAboveTool() {\n    const arrayTools = this.getToolbar();\n    const index = arrayTools.findIndex(t => t === this.activeTool$.getValue().name);\n    if (arrayTools[index - 1] !== undefined) {\n      this.deactivateTool();\n      const above = arrayTools[index - 1];\n      this.activateTool(above);\n    } else {\n      this.deactivateTool();\n      const above = arrayTools[arrayTools.length - 1];\n      this.activateTool(above);\n    }\n  } */\n\n  /**\n   * Deactivate the active tool\n   */\n  deactivateTool() {\n    this.clearActiveToolHistory();\n    this.store.state.updateAll({ active: false });\n  }\n\n  /**\n   * Initialize the tool store and start observing the active tool\n   */\n  private initStore() {\n    this.store = new EntityStore<Tool>([], {\n      getKey: (entity: Tool) => entity.name\n    });\n\n    this.activeTool$$ = this.store.stateView\n      .firstBy$((record: EntityRecord<Tool>) => record.state.active === true)\n      .subscribe((record: EntityRecord<Tool>) => {\n        if (record === undefined) {\n          this.setActiveTool(undefined);\n          return;\n        }\n\n        const tool = record.entity;\n        const options = Object.assign(\n          {},\n          tool.options || {},\n          record.state.options || {}\n        );\n        this.setActiveTool(Object.assign({}, tool, { options }));\n      });\n  }\n\n  /**\n   * Set the active tool and update the tool history\n   * @param tool Tool\n   */\n  private setActiveTool(tool: Tool | undefined) {\n    this.activeTool$.next(tool);\n    if (tool === undefined) {\n      this.clearActiveToolHistory();\n    } else {\n      this.activeToolHistory = this.activeToolHistory\n        .filter((name: string) => name !== tool.name)\n        .concat([tool.name]);\n    }\n  }\n\n  /**\n   * Clear the tool history\n   */\n  private clearActiveToolHistory() {\n    this.activeToolHistory = [];\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Tool } from './tool.interface';\nimport { Toolbox } from './toolbox';\n\n/**\n * Service where runtime tool configurations are registered\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToolService {\n  static tools: { [key: string]: Tool } = {};\n\n  /**\n   * Toolbox that holds main tools\n   */\n  public toolbox: Toolbox = new Toolbox();\n\n  static register(tool: Tool) {\n    ToolService.tools[tool.name] = tool;\n  }\n\n  constructor() {\n    this.toolbox.setTools(this.getTools());\n  }\n\n  /**\n   * Return a tool\n   * @param name Tool name\n   * @returns tool Tool\n   */\n  getTool(name: string): Tool {\n    return ToolService.tools[name];\n  }\n\n  /**\n   * Return all tools\n   * @returns tTols\n   */\n  getTools(): Tool[] {\n    return Object.values(ToolService.tools);\n  }\n}\n","<button *ngIf=\"showTourButton\"\n  (click) = \"startInteractiveTour()\"\n  [ngClass]=\"getClass()\"\n  mat-raised-button\n  tooltip-position=\"below\"\n  matTooltipShowDelay=\"500\"\n  [disabled]=disabledTourButton>\n  <span class=\"interactive-tour-button-title\">{{'igo.common.interactiveTour.buttonTitle' | translate}} {{(discoverTitleInLocale$ | async) | translate}}</span>\n  <mat-icon\n    svgIcon=\"presentation-play\"\n    [matTooltip]=\"disabledTourButton ?\n    ('igo.common.interactiveTour.disaledTooltipTourToolButton' | translate) :\n    ('igo.common.interactiveTour.tooltipTourToolButton' | translate)\">\n  </mat-icon>\n</button>\n","import { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { InteractiveTourService } from './interactive-tour.service';\nimport { ToolService } from '../tool/shared/tool.service';\nimport { Observable, of } from 'rxjs';\n\n@Component({\n  selector: 'igo-interactive-tour',\n  templateUrl: './interactive-tour.component.html',\n  styleUrls: ['./interactive-tour.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class InteractiveTourComponent {\n  /**\n   * Toolbox that holds main tools\n   */\n  @Input() tourToStart: string = '';\n  @Input() styleButton: string;\n  @Input() discoverTitleInLocale$: Observable<string> = of('IGO');\n\n  getClass() {\n    return {\n      'tour-button-tool-icon': this.styleButton === 'icon',\n      'tour-button-tool': this.styleButton === 'raised'\n    };\n  }\n\n  get toolbox() {\n    return this.toolService.toolbox;\n  }\n\n  getTourToStart() {\n    if (this.tourToStart) {\n      return this.tourToStart;\n    } else {\n      return this.activeToolName;\n    }\n  }\n\n  get activeToolName() {\n    if (this.toolbox) {\n      if (this.isActiveTool) {\n        return this.toolbox.activeTool$.getValue().name;\n      } else {\n        return 'global';\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  get isActiveTool(): boolean {\n    if (this.toolbox) {\n      return this.toolbox.activeTool$.getValue() !== undefined;\n    } else {\n      return undefined;\n    }\n  }\n\n  get isToolHaveTour(): boolean {\n    if (this.activeToolName === 'about' && !this.tourToStart) {\n      return false;\n    }\n    return this.interactiveTourService.isToolHaveTourConfig(\n      this.getTourToStart()\n    );\n  }\n\n  get showTourButton(): boolean {\n    // 2 conditions to show: have Tour on tool in Config file and if we are in mobile displayInMobile= true\n    let haveTour: boolean;\n    haveTour = this.isToolHaveTour;\n    if (haveTour === false) {\n      return false;\n    }\n\n    let inMobileAndShow: boolean;\n    if (this.interactiveTourService.isMobile()) {\n      inMobileAndShow = this.isTourDisplayInMobile;\n      if (inMobileAndShow === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get isTourDisplayInMobile(): boolean {\n    return this.interactiveTourService.isTourDisplayInMobile();\n  }\n\n  get disabledTourButton(): boolean {\n    return this.interactiveTourService.disabledTourButton(this.activeToolName);\n  }\n\n  constructor(\n    private interactiveTourService: InteractiveTourService,\n    private toolService: ToolService\n  ) {}\n\n  startInteractiveTour() {\n    const tour = this.getTourToStart();\n    if (tour) {\n      this.interactiveTourService.startTour(tour);\n    } else {\n      return;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoLanguageModule } from '@igo2/core';\nimport { InteractiveTourService } from './interactive-tour.service';\nimport { InteractiveTourComponent } from './interactive-tour.component';\nimport { InteractiveTourLoader } from './interactive-tour.loader';\n\n@NgModule({\n  declarations: [InteractiveTourComponent],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTooltipModule,\n    IgoLanguageModule\n  ],\n  providers: [InteractiveTourService, InteractiveTourLoader],\n  exports: [InteractiveTourComponent]\n})\nexport class IgoInteractiveTourModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'keyvalue'\n})\nexport class KeyValuePipe implements PipeTransform {\n  transform(value: any, args?: any): any {\n    const keyValues = [];\n    Object.getOwnPropertyNames(value).forEach((key: string) =>\n      keyValues.push({ key, value: value[key] })\n    );\n\n    return keyValues;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { KeyValuePipe } from './keyvalue.pipe';\n\n@NgModule({\n  imports: [],\n  declarations: [KeyValuePipe],\n  exports: [KeyValuePipe]\n})\nexport class IgoKeyValueModule {\n  static forRoot(): ModuleWithProviders<IgoKeyValueModule> {\n    return {\n      ngModule: IgoKeyValueModule,\n      providers: []\n    };\n  }\n}\n","<h1 mat-dialog-title class=\"mat-typography\">{{ title }}</h1>\n\n<div mat-dialog-content class=\"mat-typography\">\n  <ng-container *ngTemplateOutlet=\"loopObject;context:{ obj: data }\"></ng-container>\n\n  <ng-template #loopObject let-obj='obj' let-baseKey='baseKey'>\n    <ng-container *ngFor=\"let property of obj | keyvalue\">\n      <ng-container *ngIf=\"ignoreKeys.indexOf(getKey(baseKey, property.key)) === -1\">\n\n        <ng-container *ngIf=\"isObject(property.value); else notObject\">\n          <ng-container *ngTemplateOutlet=\"loopObject;context:{ obj: property.value, baseKey: getKey(baseKey, property.key) }\"></ng-container>\n        </ng-container>\n\n        <ng-template #notObject>\n          <p><span><b>{{getKey(baseKey, property.key)}}</b> : </span><span class=\"propertyValue\" [innerHtml]=\"property.value\"></span></p>\n        </ng-template>\n\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</div>\n\n<div mat-dialog-actions>\n  <button mat-button color=\"primary\"\n          (click)=\"dialogRef.close(false)\">\n    OK\n  </button>\n</div>\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'igo-json-dialog',\n  templateUrl: './json-dialog.component.html'\n})\nexport class JsonDialogComponent {\n  public title: string;\n  public data: any;\n  public ignoreKeys: string[];\n\n  constructor(public dialogRef: MatDialogRef<JsonDialogComponent>) {}\n\n  isObject(val) {\n    return typeof val === 'object' && !Array.isArray(val);\n  }\n\n  getKey(baseKey, key) {\n    return (baseKey ? baseKey + '.' : '') + key;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Observable } from 'rxjs';\n\nimport { JsonDialogComponent } from './json-dialog.component';\n\n@Injectable()\nexport class JsonDialogService {\n  constructor(private dialog: MatDialog) {}\n\n  public open(title: any, data, ignoreKeys?: string[]): Observable<any> {\n    const dialogRef = this.dialog.open(JsonDialogComponent, {\n      disableClose: false\n    });\n    dialogRef.componentInstance.data = data;\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.ignoreKeys = ignoreKeys;\n\n    return dialogRef.afterClosed();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { IgoKeyValueModule } from '../keyvalue/keyvalue.module';\n\nimport { JsonDialogComponent } from './json-dialog.component';\nimport { JsonDialogService } from './json-dialog.service';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule, MatDialogModule, IgoKeyValueModule],\n  exports: [JsonDialogComponent],\n  declarations: [JsonDialogComponent],\n  providers: [JsonDialogService]\n})\nexport class IgoJsonDialogModule {\n  static forRoot(): ModuleWithProviders<IgoJsonDialogModule> {\n    return {\n      ngModule: IgoJsonDialogModule\n    };\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  ElementRef,\n  Renderer2,\n  HostListener,\n  EventEmitter\n} from '@angular/core';\n\n@Directive({\n  selector: '[igoListItem]'\n})\nexport class ListItemDirective {\n\n  static focusedCls = 'igo-list-item-focused';\n  static selectedCls = 'igo-list-item-selected';\n  static disabledCls = 'igo-list-item-disabled';\n\n  @Input()\n  get color() {\n    return this._color;\n  }\n  set color(value: string) {\n    this._color = value;\n  }\n  private _color = 'primary';\n\n  @Input()\n  get focused() {\n    return this._focused;\n  }\n  set focused(value: boolean) {\n    if (value === this._focused) {\n      return;\n    }\n    if (this.disabled) {\n      return;\n    }\n\n    value ? this.beforeFocus.emit(this) : this.beforeUnfocus.emit(this);\n\n    this._focused = value;\n    if (this.selected !== true) {\n      this.toggleFocusedClass();\n    }\n\n    value ? this.focus.emit(this) : this.unfocus.emit(this);\n  }\n  private _focused = false;\n\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    if (value === this._selected) {\n      return;\n    }\n    if (this.disabled) {\n      return;\n    }\n\n    value ? this.beforeSelect.emit(this) : this.beforeUnselect.emit(this);\n\n    this._selected = value;\n    this._focused = value;\n    this.toggleSelectedClass();\n\n    value ? this.select.emit(this) : this.unselect.emit(this);\n  }\n  private _selected = false;\n\n  @Input()\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    if (value === this._disabled) {\n      return;\n    }\n\n    if (value === true) {\n      this.selected = false;\n    }\n\n    value ? this.beforeDisable.emit(this) : this.beforeEnable.emit(this);\n\n    this._disabled = value;\n    this.toggleDisabledClass();\n\n    value ? this.disable.emit(this) : this.enable.emit(this);\n  }\n  private _disabled = false;\n\n  @Output() beforeSelect = new EventEmitter<ListItemDirective>();\n  @Output() beforeFocus = new EventEmitter<ListItemDirective>();\n  @Output() beforeUnselect = new EventEmitter<ListItemDirective>();\n  @Output() beforeUnfocus = new EventEmitter<ListItemDirective>();\n  @Output() beforeDisable = new EventEmitter<ListItemDirective>();\n  @Output() beforeEnable = new EventEmitter<ListItemDirective>();\n  @Output() focus = new EventEmitter<ListItemDirective>();\n  @Output() unfocus = new EventEmitter<ListItemDirective>();\n  @Output() select = new EventEmitter<ListItemDirective>();\n  @Output() unselect = new EventEmitter<ListItemDirective>();\n  @Output() disable = new EventEmitter<ListItemDirective>();\n  @Output() enable = new EventEmitter<ListItemDirective>();\n\n  @HostListener('click')\n  onClick() {\n    this.selected = true;\n  }\n\n  constructor(public renderer: Renderer2, public el: ElementRef) {}\n\n  getOffsetTop(): number {\n    const padding = 5;\n\n    return this.el.nativeElement.offsetTop - padding;\n  }\n\n  private toggleFocusedClass() {\n    if (this.focused) {\n      this.addCls(ListItemDirective.focusedCls);\n    } else {\n      this.removeCls(ListItemDirective.focusedCls);\n    }\n  }\n\n  private toggleSelectedClass() {\n    if (this.selected) {\n      this.addCls(ListItemDirective.selectedCls);\n      this.removeCls(ListItemDirective.focusedCls);\n    } else {\n      this.removeCls(ListItemDirective.selectedCls);\n    }\n  }\n\n  private toggleDisabledClass() {\n    if (this.disabled) {\n      this.addCls(ListItemDirective.disabledCls);\n    } else {\n      this.removeCls(ListItemDirective.disabledCls);\n    }\n  }\n\n  private addCls(cls: string) {\n    this.renderer.addClass(this.el.nativeElement, cls);\n  }\n\n  private removeCls(cls: string) {\n    this.renderer.removeClass(this.el.nativeElement, cls);\n  }\n}\n","import {\n  Component,\n  AfterViewInit,\n  OnInit,\n  OnDestroy,\n  Input,\n  ContentChildren,\n  HostListener,\n  ElementRef\n} from '@angular/core';\nimport type { QueryList } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { ListItemDirective } from './list-item.directive';\n\n@Component({\n  selector: 'igo-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements AfterViewInit, OnInit, OnDestroy {\n  @Input()\n  get navigation() {\n    return this._navigation;\n  }\n  set navigation(value: boolean) {\n    this._navigation = value;\n  }\n  private _navigation = true;\n\n  @Input()\n  get selection() {\n    return this._selection;\n  }\n  set selection(value: boolean) {\n    this._selection = value;\n  }\n  private _selection = true;\n\n  get selectedItem() {\n    return this._selectedItem;\n  }\n  set selectedItem(value: ListItemDirective) {\n    this.focusedItem = value;\n    this._selectedItem = value;\n  }\n  private _selectedItem: ListItemDirective;\n\n  get focusedItem() {\n    return this._focusedItem;\n  }\n  set focusedItem(value: ListItemDirective) {\n    this._focusedItem = value;\n  }\n  private _focusedItem: ListItemDirective;\n\n  private navigationEnabled: boolean;\n  private listItems$$: Subscription;\n  private subscriptions: Subscription[] = [];\n\n  @ContentChildren(ListItemDirective, { descendants: true })\n  listItems: QueryList<ListItemDirective>;\n\n  @HostListener('document:keydown', ['$event'])\n  @HostListener('document:enter', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    // It would be nice to be able to unsubscribe to the event\n    // completely but until ES7 this won't be possible because\n    // document events are not observables\n    if (this.navigationEnabled) {\n      if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n        event.preventDefault();\n        this.navigate(event.key);\n      } else if (event.key === 'Enter') {\n        this.select(this.focusedItem);\n      }\n    }\n  }\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    this.enableNavigation();\n  }\n\n  ngAfterViewInit() {\n    if (this.listItems.length) {\n      this.init();\n    }\n\n    this.listItems$$ = this.listItems.changes.subscribe(\n      (items: ListItemDirective[]) => this.init()\n    );\n  }\n\n  ngOnDestroy() {\n    this.listItems$$.unsubscribe();\n  }\n\n  focus(item?: ListItemDirective) {\n    if (!this.selection) {\n      return;\n    }\n\n    this.unfocus();\n\n    // We need to make this check because dynamic\n    // lists such as in the search results list may fail\n    if (item !== undefined) {\n      item.focused = true;\n    }\n  }\n\n  unfocus() {\n    if (this.focusedItem !== undefined) {\n      this.focusedItem.focused = false;\n    }\n\n    this.focusedItem = undefined;\n  }\n\n  focusNext() {\n    const items = this.listItems.toArray();\n    let item;\n    const igoList = this.el.nativeElement;\n    let disabled = true;\n    let index = this.getFocusedIndex();\n    if (index === undefined) {\n      index = -1;\n    }\n\n    while (disabled && index < items.length - 1) {\n      index += 1;\n      item = items[index];\n      disabled = item.disabled;\n    }\n\n    if (item !== undefined) {\n      this.focus(item);\n    }\n\n    if (!items[index + 1]) {\n      igoList.scrollTop = igoList.scrollHeight - igoList.clientHeight;\n      return;\n    }\n\n    if (item !== undefined && !this.isScrolledIntoView(item.el.nativeElement)) {\n      igoList.scrollTop =\n        item.el.nativeElement.offsetTop +\n        item.el.nativeElement.children[0].offsetHeight -\n        igoList.clientHeight;\n    }\n  }\n\n  focusPrevious() {\n    const items = this.listItems.toArray();\n    let item: ListItemDirective;\n    const igoList = this.el.nativeElement;\n    let disabled = true;\n    let index = this.getFocusedIndex();\n\n    while (disabled && index > 0) {\n      index -= 1;\n      item = items[index];\n      disabled = item.disabled;\n    }\n\n    if (item !== undefined) {\n      this.focus(item);\n    }\n\n    if (!items[index - 1]) {\n      igoList.scrollTop = 0;\n      return;\n    }\n\n    if (item !== undefined && !this.isScrolledIntoView(item.el.nativeElement)) {\n      const padding = 3;\n      igoList.scrollTop = item.el.nativeElement.offsetTop - padding;\n    }\n  }\n\n  select(item?: ListItemDirective) {\n    if (!this.selection) {\n      return;\n    }\n\n    this.unselect();\n\n    if (item !== undefined) {\n      item.selected = true;\n    }\n  }\n\n  unselect() {\n    this.unfocus();\n\n    if (this.selectedItem !== undefined) {\n      this.selectedItem.selected = false;\n    }\n\n    this.selectedItem = undefined;\n  }\n\n  enableNavigation() {\n    if (this.navigation) {\n      this.navigationEnabled = true;\n    }\n  }\n\n  disableNavigation() {\n    this.navigationEnabled = false;\n  }\n\n  scrollToItem(item: ListItemDirective) {\n    this.el.nativeElement.scrollTop = item.getOffsetTop();\n  }\n\n  isScrolledIntoView(elem) {\n    const docViewTop =\n      this.el.nativeElement.scrollTop + this.el.nativeElement.offsetTop;\n    const docViewBottom = docViewTop + this.el.nativeElement.clientHeight;\n\n    const elemTop = elem.offsetTop;\n    const elemBottom = elemTop + elem.children[0].offsetHeight;\n    return elemBottom <= docViewBottom && elemTop >= docViewTop;\n  }\n\n  private init() {\n    this.subscribe();\n\n    this.selectedItem = this.findSelectedItem();\n    this.focusedItem = this.findFocusedItem();\n\n    this.enableNavigation();\n  }\n\n  private subscribe() {\n    this.unsubscribe();\n\n    this.listItems.toArray().forEach(item => {\n      this.subscriptions.push(\n        item.beforeSelect.subscribe((item2: ListItemDirective) =>\n          this.handleItemBeforeSelect(item2)\n        )\n      );\n\n      this.subscriptions.push(\n        item.select.subscribe((item2: ListItemDirective) =>\n          this.handleItemSelect(item2)\n        )\n      );\n\n      this.subscriptions.push(\n        item.beforeFocus.subscribe((item2: ListItemDirective) =>\n          this.handleItemBeforeFocus(item2)\n        )\n      );\n\n      this.subscriptions.push(\n        item.focus.subscribe((item2: ListItemDirective) =>\n          this.handleItemFocus(item2)\n        )\n      );\n    }, this);\n  }\n\n  private unsubscribe() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    this.subscriptions = [];\n  }\n\n  private handleItemBeforeFocus(item: ListItemDirective) {\n    if (item !== this.focusedItem) {\n      this.unfocus();\n    }\n  }\n\n  private handleItemFocus(item: ListItemDirective) {\n    this.focusedItem = item;\n  }\n\n  private handleItemBeforeSelect(item: ListItemDirective) {\n    if (item !== this.focusedItem) {\n      this.unselect();\n    }\n  }\n\n  private handleItemSelect(item: ListItemDirective) {\n    this.selectedItem = item;\n  }\n\n  private findSelectedItem() {\n    return this.listItems.toArray().find(item => item.selected);\n  }\n\n  private findFocusedItem() {\n    return this.listItems.toArray().find(item => item.focused);\n  }\n\n  private getFocusedIndex() {\n    return this.listItems\n      .toArray()\n      .findIndex(item => item === this.focusedItem);\n  }\n\n  private navigate(key: string) {\n    switch (key) {\n      case 'ArrowUp':\n        this.focusPrevious();\n        break;\n      case 'ArrowDown':\n        this.focusNext();\n        break;\n      default:\n        break;\n    }\n  }\n}\n","<mat-list\n  igoClickout\n  [ngClass]=\"{'selectable': selection}\"\n  (clickout)=\"disableNavigation()\"\n  (click)=\"enableNavigation()\">\n  <ng-content></ng-content>\n</mat-list>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\nimport { IgoClickoutModule } from '../clickout/clickout.module';\n\nimport { ListItemDirective } from './list-item.directive';\nimport { ListComponent } from './list.component';\n\n@NgModule({\n  imports: [CommonModule, MatIconModule, MatListModule, IgoClickoutModule],\n  declarations: [ListItemDirective, ListComponent],\n  exports: [ListItemDirective, ListComponent]\n})\nexport class IgoListModule {\n  static forRoot(): ModuleWithProviders<IgoListModule> {\n    return {\n      ngModule: IgoListModule,\n      providers: []\n    };\n  }\n}\n","<div *ngIf=\"withHeader\" class=\"igo-panel-header mat-typography\" title=\"\">\n  <h3>\n    <ng-content select=\"[panelLeftButton]\"></ng-content>\n    <div class=\"igo-panel-title\">\n      {{ title }}\n      <ng-content select=\"[panelHeader]\"></ng-content>\n    </div>\n    <ng-content select=\"[panelRightButton]\"></ng-content>\n  </h3>\n</div>\n<div class=\"igo-panel-content\" title=\"\">\n  <ng-content></ng-content>\n</div>\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding\n} from '@angular/core';\n\n@Component({\n  selector: 'igo-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PanelComponent {\n  @Input()\n  get title() {\n    return this._title;\n  }\n  set title(value: string) {\n    this._title = value;\n  }\n  private _title: string;\n\n  @Input()\n  @HostBinding('class.igo-panel-with-header')\n  get withHeader(): boolean {\n    return this._withHeader;\n  }\n  set withHeader(value: boolean) {\n    this._withHeader = value;\n  }\n  private _withHeader = true;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelComponent } from './panel.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [PanelComponent],\n  declarations: [PanelComponent]\n})\nexport class IgoPanelModule {}\n","import { Directive, Self, HostListener, Renderer2 } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n/**\n * <igoSidenavShim> directive.\n *\n * This directive prevents a material sidenav with mode=\"side\"\n * from focusing an element after it's closed\n */\n@Directive({\n  selector: '[igoSidenavShim]'\n})\nexport class SidenavShimDirective {\n  private focusedElement: HTMLElement;\n  private blurElement: HTMLElement;\n\n  @HostListener('open', ['$event'])\n  onOpen() {\n    this.focusedElement = document.activeElement as HTMLElement;\n  }\n\n  @HostListener('close-start', ['$event'])\n  onCloseStart() {\n    const focusedElement = document.activeElement as HTMLElement;\n    if (focusedElement !== this.focusedElement) {\n      this.blurElement = this.focusedElement;\n    } else {\n      this.blurElement = undefined;\n    }\n  }\n\n  @HostListener('close', ['$event'])\n  onClose() {\n    if (this.blurElement) {\n      this.renderer.selectRootElement(this.blurElement).blur();\n    }\n\n    this.blurElement = undefined;\n    this.focusedElement = undefined;\n  }\n\n  constructor(@Self() component: MatSidenav, private renderer: Renderer2) {}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { SidenavShimDirective } from './sidenav-shim.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [SidenavShimDirective],\n  exports: [SidenavShimDirective]\n})\nexport class IgoSidenavModule {\n  static forRoot(): ModuleWithProviders<IgoSidenavModule> {\n    return {\n      ngModule: IgoSidenavModule,\n      providers: []\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'igo-spinner',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent {\n\n  public shown$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  @Input()\n  set shown(value: boolean) { this.shown$.next(value); }\n  get shown(): boolean { return this.shown$.value; }\n\n  constructor() {}\n\n  show() {\n    this.shown = true;\n  }\n\n  hide() {\n    this.shown = false;\n  }\n}\n","<div\n  [ngClass]=\"{'igo-spinner-container': true, 'igo-spinner-shown': (shown$ | async)}\">\n  <div class=\"igo-spinner-background\"></div>\n  <mat-progress-spinner diameter=\"40\" mode=\"indeterminate\"></mat-progress-spinner>\n</div>\n","import { Directive, Self, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { ActivityService } from '@igo2/core';\nimport { SpinnerComponent } from './spinner.component';\n\n/**\n * A directive to bind a SpinnerComponent to the activity service.\n * The activity service tracks any HTTP request and this directive\n * will display the spinner it's attached to when the activity counter\n * is greater than 0.\n */\n@Directive({\n  selector: '[igoSpinnerActivity]'\n})\nexport class SpinnerActivityDirective implements OnInit, OnDestroy {\n  /**\n   * Subscription to the activity service counter\n   */\n  private counter$$: Subscription;\n\n  constructor(\n    @Self() private spinner: SpinnerComponent,\n    private activityService: ActivityService\n  ) {}\n\n  /**\n   * Subscribe to the activity service counter and display the spinner\n   * when it's is greater than 0.\n   * @internal\n   */\n  ngOnInit() {\n    this.counter$$ = this.activityService.counter$\n      .pipe(debounceTime(50))\n      .subscribe((count: number) => {\n        count > 0 ? this.spinner.show() : this.spinner.hide();\n      });\n  }\n\n  /**\n   * Unsubcribe to the activity service counter.\n   * @internal\n   */\n  ngOnDestroy() {\n    this.counter$$.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { SpinnerActivityDirective } from './spinner-activity.directive';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, MatProgressSpinnerModule],\n  declarations: [SpinnerActivityDirective, SpinnerComponent],\n  exports: [SpinnerActivityDirective, SpinnerComponent]\n})\nexport class IgoSpinnerModule {}\n","import { DataSource } from '@angular/cdk/table';\nimport { MatSort } from '@angular/material/sort';\n\nimport { Observable, BehaviorSubject, merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ObjectUtils } from '@igo2/utils';\n\nimport { TableDatabase, TableModel } from './index';\n\nexport class TableDataSource extends DataSource<any> {\n  get filter(): string {\n    return this._filterChange.value;\n  }\n  set filter(filter: string) {\n    this._filterChange.next(filter);\n  }\n  private _filterChange = new BehaviorSubject('');\n\n  constructor(\n    private _database: TableDatabase,\n    private _model: TableModel,\n    private _sort: MatSort\n  ) {\n    super();\n  }\n\n  // Connect function called by the table to retrieve one stream containing\n  // the data to render.\n  connect(): Observable<any[]> {\n    if (!this._database) {\n      return merge([]);\n    }\n    const displayDataChanges = [\n      this._database.dataChange,\n      this._filterChange,\n      this._sort.sortChange\n    ];\n\n    return merge(...displayDataChanges).pipe(\n      map(() => {\n        return this.getFilteredData(this._database.data);\n      }),\n      map(data => {\n        return this.getSortedData(data);\n      })\n    );\n  }\n\n  disconnect() {}\n\n  getFilteredData(data): any[] {\n    if (!this.filter) {\n      return data;\n    }\n    return data.slice().filter((item: any) => {\n      const searchStr: string = this._model.columns\n        .filter(c => c.filterable)\n        .map(c => ObjectUtils.resolve(item, c.name))\n        .join(' ')\n        .toLowerCase();\n\n      return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n    });\n  }\n\n  getSortedData(data): any[] {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const propertyA: number | string = ObjectUtils.resolve(\n        a,\n        this._sort.active\n      );\n      const propertyB: number | string = ObjectUtils.resolve(\n        b,\n        this._sort.active\n      );\n\n      return ObjectUtils.naturalCompare(\n        propertyB,\n        propertyA,\n        this._sort.direction\n      );\n    });\n  }\n}\n","export enum TableActionColor {\n  primary,\n  accent,\n  warn\n}\n","<div class='table-box'>\n  <div class='table-header' *ngIf=\"hasFilterInput\">\n    <mat-form-field floatPlaceholder='never'>\n      <input matInput #filter [placeholder]=\"'igo.common.table.filter' | translate\">\n    </mat-form-field>\n  </div>\n\n  <div class='table-container'>\n    <table mat-table #table [dataSource]='dataSource' matSort>\n\n      <!-- Checkbox Column -->\n      <ng-container matColumnDef=\"selectionCheckbox\">\n        <th mat-header-cell *matHeaderCellDef>\n          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                        [checked]=\"selection.hasValue() && isAllSelected()\"\n                        [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n          </mat-checkbox>\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox (click)=\"$event.stopPropagation()\"\n                        (change)=\"$event ? selection.toggle(row) : null\"\n                        [checked]=\"selection.isSelected(row)\">\n          </mat-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-container [matColumnDef]='column.name' *ngFor='let column of model.columns'>\n        <ng-container *ngIf='column.sortable'>\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column.title}} </th>\n        </ng-container>\n\n        <ng-container *ngIf='!column.sortable'>\n          <th mat-header-cell *matHeaderCellDef> {{column.title}} </th>\n        </ng-container>\n\n        <ng-container *ngIf=\"!column.html; else cellHTML\">\n          <td mat-cell *matCellDef='let row' class=\"mat-cell-text\"\n            [ngClass]=\"model.cellClassFunc ? model.cellClassFunc(row, column) : {}\">\n            {{getValue(row, column.name)}}\n          </td>\n        </ng-container>\n\n        <ng-template #cellHTML>\n          <td mat-cell *matCellDef='let row' class=\"mat-cell-text\"\n            [ngClass]=\"model.cellClassFunc ? model.cellClassFunc(row, column) : {}\"\n            [innerHTML]=\"getValue(row, column.name)\">\n          </td>\n        </ng-template>\n      </ng-container>\n\n      <!-- Action Column -->\n      <ng-container matColumnDef='action'>\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef='let row'>\n          <button *ngFor='let action of model.actions'\n          mat-mini-fab\n          [color]='getActionColor(action.color)'\n          (click)='handleClickAction($event, action, row)'>\n            <mat-icon svgIcon=\"{{action.icon}}\"></mat-icon>\n          </button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef='displayedColumns;'></tr>\n      <tr mat-row\n        *matRowDef='let row; columns: displayedColumns;'\n        [ngClass]=\"model.rowClassFunc ? model.rowClassFunc(row) : {}\"\n        (click)=\"selection.toggle(row)\">\n      </tr>\n\n    </table>\n  </div>\n\n</div>\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  Input,\n  Output,\n  OnChanges,\n  OnInit,\n  AfterViewInit,\n  EventEmitter\n} from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { SelectionModel } from '@angular/cdk/collections';\n\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { fromEvent } from 'rxjs';\n\nimport { ObjectUtils } from '@igo2/utils';\n\nimport { TableModel } from './table-model.interface';\nimport { TableDatabase } from './table-database';\nimport { TableDataSource } from './table-datasource';\nimport { TableActionColor } from './table-action-color.enum';\n\n@Component({\n  selector: 'igo-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss']\n})\nexport class TableComponent implements OnChanges, OnInit, AfterViewInit {\n  @Input()\n  get database(): TableDatabase {\n    return this._database;\n  }\n  set database(value: TableDatabase) {\n    this._database = value;\n  }\n  private _database: TableDatabase;\n\n  @Input()\n  get model(): TableModel {\n    return this._model;\n  }\n  set model(value: TableModel) {\n    this._model = value;\n  }\n  private _model: TableModel;\n\n  @Input()\n  get hasFilterInput(): boolean {\n    return this._hasFIlterInput;\n  }\n  set hasFilterInput(value: boolean) {\n    this._hasFIlterInput = value;\n  }\n  private _hasFIlterInput = true;\n\n  public displayedColumns;\n  public dataSource: TableDataSource | null;\n  public selection = new SelectionModel<any>(true, []);\n\n  @Output()\n  select = new EventEmitter<{\n    added: any[];\n    removed: any[];\n    source: SelectionModel<any>;\n  }>();\n\n  @ViewChild('filter') filter: ElementRef;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  ngOnInit() {\n    this.dataSource = new TableDataSource(this.database, this.model, this.sort);\n\n    if (this.model) {\n      this.displayedColumns = this.model.columns\n        .filter(c => c.displayed !== false)\n        .map(c => c.name);\n\n      if (this.model.selectionCheckbox) {\n        this.displayedColumns.unshift('selectionCheckbox');\n      }\n      if (this.model.actions && this.model.actions.length) {\n        this.displayedColumns.push('action');\n      }\n    }\n\n    this.selection.changed.subscribe(e => this.select.emit(e));\n  }\n\n  ngAfterViewInit() {\n    if (this.filter) {\n      fromEvent(this.filter.nativeElement, 'keyup')\n        .pipe(\n          debounceTime(150),\n          distinctUntilChanged()\n        )\n        .subscribe(() => {\n          if (!this.dataSource) {\n            return;\n          }\n          this.dataSource.filter = this.filter.nativeElement.value;\n        });\n    }\n  }\n\n  ngOnChanges(change) {\n    if (change.database) {\n      this.dataSource = new TableDataSource(\n        this.database,\n        this.model,\n        this.sort\n      );\n      this.selection.clear();\n    }\n  }\n\n  getActionColor(colorId: number): string {\n    return TableActionColor[colorId];\n  }\n\n  getValue(row, key) {\n    return ObjectUtils.resolve(row, key);\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.database.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.database.data.forEach(row => this.selection.select(row));\n  }\n\n  handleClickAction(event, action, row) {\n    event.stopPropagation();\n    action.click(row);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n\nimport { IgoLanguageModule } from '@igo2/core';\n\nimport { TableComponent } from './table.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CdkTableModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSortModule,\n    MatCheckboxModule,\n    IgoLanguageModule\n  ],\n  declarations: [TableComponent],\n  exports: [TableComponent]\n})\nexport class IgoTableModule {\n  static forRoot(): ModuleWithProviders<IgoTableModule> {\n    return {\n      ngModule: IgoTableModule,\n      providers: []\n    };\n  }\n}\n","import { EntityStore } from '../../entity';\nimport { Action } from './action.interfaces';\n\n/**\n * The class is a specialized version of an EntityStore that stores\n * actions.\n */\nexport class ActionStore extends EntityStore<Action> {\n\n}\n","export enum ToolboxColor {\n  White = 'white',\n  Grey = 'grey',\n  Primary = 'primary'\n}\n","import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport function toolSlideInOut(\n  speed = '300ms',\n  type = 'ease-in-out'\n): AnimationTriggerMetadata {\n  return trigger('toolSlideInOut', [\n    state(\n      'enter',\n      style({\n        transform: 'translate3d(0, 0, 0)'\n      })\n    ),\n    transition('void => enter', animate(speed + ' ' + type))\n  ]);\n}\n","<igo-actionbar\n  *ngIf=\"(toolbar$ | async).length > 0\"\n  [store]=\"actionStore\"\n  [withIcon]=\"true\"\n  [withTitle]=\"toolbarWithTitle$ | async\"\n  [withTooltip]=\"(toolbarWithTitle$ | async) === false\"\n  [scrollActive]=\"toolbarWithTitle$ | async\"\n  [horizontal]=\"false\">\n</igo-actionbar>\n\n<div\n  *ngIf=\"activeTool$ | async as tool\"\n  class=\"igo-tool-container\"\n  [ngClass]=\"{'igo-tool-container-with-toolbar': !actionStore.empty, 'igo-tool-container-with-animation': animate}\"\n  [@toolSlideInOut]=\"animation$ | async\"\n  (@toolSlideInOut.start)=\"onAnimationStart()\"\n  (@toolSlideInOut.done)=\"onAnimationComplete()\">\n\n  <igo-dynamic-outlet\n    [component]=\"tool.component\"\n    [inputs]=\"getToolInputs(tool)\">\n  </igo-dynamic-outlet>\n\n</div>\n","import {\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  HostBinding,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { Subscription, BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { Action, ActionStore } from '../../action';\nimport { Tool } from '../shared/tool.interface';\nimport { ToolboxColor } from '../shared/toolbox.enums';\nimport { Toolbox } from '../shared/toolbox';\nimport { toolSlideInOut } from './toolbox.animation';\n\n@Component({\n  selector: 'igo-toolbox',\n  templateUrl: 'toolbox.component.html',\n  styleUrls: ['toolbox.component.scss'],\n  animations: [toolSlideInOut()],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToolboxComponent implements OnInit, OnDestroy {\n  /**\n   * Observable of the active tool\n   */\n  activeTool$: BehaviorSubject<Tool> = new BehaviorSubject(undefined);\n\n  /**\n   * Store of actions that toggle tools\n   */\n  actionStore: ActionStore = new ActionStore([]);\n\n  /**\n   * Observable of he anmation state\n   */\n  animation$: BehaviorSubject<string> = new BehaviorSubject('none');\n\n  /**\n   * Observable of the toolbar\n   */\n  toolbar$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n\n  /**\n   * Whether the Toolbar should display actions' titles\n   */\n  toolbarWithTitle$: Observable<boolean> = this.activeTool$.pipe(\n    map((tool: Tool | undefined) => tool === undefined)\n  );\n\n  /**\n   * Subscription to the active tool\n   */\n  private activeTool$$: Subscription;\n\n  /**\n   * Subscription to the toolbar\n   */\n  private toolbar$$: Subscription;\n\n  /**\n   * Observable of the ongoing animation. This is useful when\n   * multiple animations are triggered at once i.e. when the user clicks\n   * too fast on different actions\n   */\n  private animating$ = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Subscription to the ongoing animation\n   */\n  private animating$$: Subscription;\n\n  /**\n   * Toolbox\n   */\n  @Input() toolbox: Toolbox;\n\n  /**\n   * Whether the toolbox should animate the first tool entering\n   */\n  @Input() animate: boolean = false;\n\n  /**\n   * Color of Toolbox\n   */\n  @Input() color: ToolboxColor = ToolboxColor.White;\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.color-grey')\n  get classColorGrey() {\n    return this.color === ToolboxColor.Grey;\n  }\n\n  /**\n   * @ignore\n   */\n  @HostBinding('class.color-primary')\n  get classColorPrimary() {\n    return this.color === ToolboxColor.Primary;\n  }\n\n  /**\n   * Initialize the toolbar and subscribe to the active tool\n   * @internal\n   */\n  ngOnInit() {\n    this.toolbar$$ = this.toolbox.toolbar$.subscribe((toolbar: string[]) =>\n      this.onToolbarChange(toolbar)\n    );\n    this.activeTool$$ = this.toolbox.activeTool$.subscribe((tool: Tool) =>\n      this.onActiveToolChange(tool)\n    );\n  }\n\n  /**\n   * Unsubscribe to the active tool and destroy the action store\n   * @internal\n   */\n  ngOnDestroy() {\n    this.toolbar$$.unsubscribe();\n    this.activeTool$$.unsubscribe();\n    this.actionStore.destroy();\n  }\n\n  /**\n   * Track the starting animation\n   * @internal\n   */\n  onAnimationStart() {\n    this.animating$.next(true);\n  }\n\n  /**\n   * Untrack the completed animation\n   * @internal\n   */\n  onAnimationComplete() {\n    this.animating$.next(false);\n  }\n\n  /**\n   * Return a tool's inputs\n   * @param tool Tool\n   * @returns Tool inputs\n   * @internal\n   */\n  getToolInputs(tool: Tool): { [key: string]: any } {\n    return tool.options || {};\n  }\n\n  /**\n   * Initialize an action store\n   * @param toolbar Toolbar\n   */\n  private onToolbarChange(toolbar: string[]) {\n    this.setToolbar(toolbar);\n  }\n\n  /**\n   * Activate a tool and trigger an animation or not\n   * @param tool Tool to activate\n   */\n  private onActiveToolChange(tool: Tool) {\n    if (!this.animate) {\n      this.setActiveTool(tool);\n      return;\n    }\n    this.onAnimate(() => this.setActiveTool(tool));\n  }\n\n  /**\n   * Set the active tool\n   * @param tool Tool to activate\n   */\n  private setActiveTool(tool: Tool | undefined) {\n    if (tool === undefined) {\n      this.actionStore.state.updateAll({ active: false });\n    } else {\n      const action = this.actionStore.get(tool.name);\n      if (action !== undefined) {\n        this.actionStore.state.update(action, { active: true }, true);\n      }\n    }\n\n    this.activeTool$.next(tool);\n    if (this.animate) {\n      this.animation$.next('enter');\n    }\n  }\n\n  /**\n   * Initialize the toolbar\n   */\n  private setToolbar(toolbar: string[]) {\n    const actions = toolbar.reduce((acc: Action[], toolName: string) => {\n      const tool = this.toolbox.getTool(toolName);\n      if (tool === undefined) {\n        return acc;\n      }\n\n      acc.push({\n        id: tool.name,\n        title: tool.title,\n        icon: tool.icon,\n        // iconImage: tool.iconImage,\n        tooltip: tool.tooltip,\n        args: [tool, this.toolbox],\n        handler: (_tool: Tool, _toolbox: Toolbox) => {\n          _toolbox.activateTool(_tool.name);\n        },\n        ngClass: (_tool: Tool, _toolbox: Toolbox) => {\n          return this.toolbox.activeTool$.pipe(\n            map((activeTool: Tool) => {\n              let toolActivated = false;\n              if (activeTool !== undefined && _tool.name === activeTool.name) {\n                toolActivated = true;\n              }\n\n              let childrenToolActivated = false;\n              if (\n                activeTool !== undefined &&\n                _tool.name === activeTool.parent\n              ) {\n                childrenToolActivated = true;\n              }\n\n              return {\n                'tool-activated': toolActivated,\n                'children-tool-activated': childrenToolActivated\n              };\n            })\n          );\n        }\n      });\n      return acc;\n    }, []);\n    this.actionStore.load(actions);\n    this.toolbar$.next(toolbar);\n  }\n\n  /**\n   * Observe the ongoing animation and ignore any incoming animation\n   * while one is still ongoing.\n   * @param callback Callback to execute when the animation completes\n   */\n  private onAnimate(callback: () => void) {\n    this.unAnimate();\n    this.animating$$ = this.animating$.subscribe((animation: boolean) => {\n      if (!animation) {\n        callback.call(this);\n        this.unAnimate();\n      }\n    });\n  }\n\n  /**\n   * Stop observing an animation when it's complete\n   */\n  private unAnimate() {\n    if (this.animating$$) {\n      this.animating$$.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoActionModule } from '../../action/action.module';\nimport {\n    IgoDynamicComponentModule\n} from '../../dynamic-component/dynamic-component.module';\n\nimport { ToolboxComponent } from './toolbox.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoActionModule,\n    IgoDynamicComponentModule\n  ],\n  exports: [\n    ToolboxComponent\n  ],\n  declarations: [\n    ToolboxComponent\n  ]\n})\nexport class IgoToolboxModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ToolService } from './shared/tool.service';\nimport { IgoToolboxModule } from './toolbox/toolbox.module';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    IgoToolboxModule\n  ],\n  declarations: []\n})\nexport class IgoToolModule {\n  static forRoot(): ModuleWithProviders<IgoToolModule> {\n    return {\n      ngModule: IgoToolModule,\n      providers: [\n        ToolService\n      ]\n    };\n  }\n}\n","<igo-dynamic-outlet\n  *ngIf=\"widget\"\n  [component]=\"widget\"\n  [inputs]=\"inputs\"\n  [subscribers]=\"getEffectiveSubscribers()\">\n</igo-dynamic-outlet>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  OnDestroy\n} from '@angular/core';\n\nimport { DynamicComponent } from '../../dynamic-component';\n\nimport { WidgetComponent } from '../shared/widget.interfaces';\n\n/**\n * This component dynamically renders a widget. It also subscribes\n * to the widget's 'cancel' and 'complete' events and destroys it\n * when any of those event is emitted.\n */\n@Component({\n  selector: 'igo-widget-outlet',\n  templateUrl: './widget-outlet.component.html',\n  styleUrls: ['./widget-outlet.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetOutletComponent implements OnDestroy {\n\n  /**\n   * Widget subscribers to 'cancel' and 'complete'\n   * @internal\n   */\n  private baseSubscribers = {\n    cancel: (event: any) => this.onCancel(event),\n    complete: (event: any) => this.onComplete(event)\n  };\n\n  /**\n   * Widget\n   */\n  @Input() widget: DynamicComponent<WidgetComponent>;\n\n  /**\n   * Widget inputs\n   */\n  @Input() inputs: {[key: string]: any};\n\n  /**\n   * Widget subscribers\n   */\n  @Input() subscribers: {[key: string]: (event: any) => void} = {};\n\n  /**\n   * Event emitted when the widget emits 'complete'\n   */\n  @Output() complete = new EventEmitter<any>();\n\n  /**\n   * Event emitted when the widget emits 'cancel'\n   */\n  @Output() cancel = new EventEmitter<any>();\n\n  constructor() {}\n\n  /**\n   * Destroy the current widget and all it's inner subscriptions\n   * @internal\n   */\n  ngOnDestroy() {\n    this.destroyWidget();\n  }\n\n  /**\n   * Get the effective subscribers. That means a combination of the base\n   * subscribers and any subscriber given as input.\n   * @returns Combined subscribers\n   * @internal\n   */\n  getEffectiveSubscribers(): {[key: string]: (event: any) => void} {\n    const subscribers = Object.assign({}, this.subscribers);\n\n    // Base subscribers\n    Object.keys(this.baseSubscribers).forEach((key: string) => {\n      const subscriber = subscribers[key];\n      const baseSubscriber = this.baseSubscribers[key];\n      if (subscriber !== undefined) {\n        subscribers[key] = (event: any) => {\n          subscriber(event);\n          baseSubscriber(event);\n        };\n      } else {\n        subscribers[key] = baseSubscriber;\n      }\n    });\n\n    return subscribers;\n  }\n\n  /**\n   * When the widget emits 'cancel', propagate that event and destroy\n   * the widget\n   */\n  private onCancel(event: any) {\n    this.cancel.emit(event);\n    this.destroyWidget();\n  }\n\n  /**\n   * When the widget emits 'complete', propagate that event and destroy\n   * the widget\n   */\n  private onComplete(event: any) {\n    this.complete.emit(event);\n    this.destroyWidget();\n  }\n\n  /**\n   * Destroy the current widget\n   */\n  private destroyWidget() {\n    if (this.widget !== undefined) {\n      this.widget.destroy();\n    }\n    this.widget = undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  IgoDynamicComponentModule\n} from '../../dynamic-component/dynamic-component.module';\n\nimport { WidgetOutletComponent } from './widget-outlet.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoDynamicComponentModule\n  ],\n  exports: [\n    WidgetOutletComponent\n  ],\n  declarations: [\n    WidgetOutletComponent\n  ]\n})\nexport class IgoWidgetOutletModule {}\n","import { Injectable } from '@angular/core';\n\nimport { DynamicComponentService } from '../../dynamic-component/shared/dynamic-component.service';\n\nimport { Widget } from './widget';\nimport { WidgetComponent } from './widget.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WidgetService {\n\n  constructor(private dynamicComponentService: DynamicComponentService) {}\n\n  create(widgetCls: any): Widget {\n    return this.dynamicComponentService.create(widgetCls as WidgetComponent);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoWidgetOutletModule } from './widget-outlet/widget-outlet.module';\nimport { WidgetService } from './shared/widget.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoWidgetOutletModule\n  ],\n  exports: [\n    IgoWidgetOutletModule\n  ],\n  declarations: [],\n  providers: [\n    WidgetService\n  ]\n})\nexport class IgoWidgetModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { getEntityTitle } from '../../entity';\nimport { Workspace } from '../shared/workspace';\nimport { WorkspaceStore } from '../shared/store';\n\n/**\n * Drop list that activates the selected workspace emit an event.\n */\n@Component({\n  selector: 'igo-workspace-selector',\n  templateUrl: './workspace-selector.component.html',\n  styleUrls: ['./workspace-selector.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WorkspaceSelectorComponent {\n\n  /**\n   * Store that holds the available workspaces.\n   */\n  @Input() store: WorkspaceStore;\n\n  /**\n   * Wheither the selector must be disabled or not.\n   */\n  @Input() disabled: boolean;\n\n  /**\n   * Event emitted when an workspace is selected or unselected\n   */\n  @Output() selectedChange = new EventEmitter<{\n    selected: boolean;\n    value: Workspace;\n  }>();\n\n  /**\n   * @internal\n   */\n  getWorkspaceTitle(workspace: Workspace): string {\n    return getEntityTitle(workspace);\n  }\n\n  /**\n   * When an workspace is manually selected, select it into the\n   * store and emit an event.\n   * @internal\n   * @param event The selection change event\n   */\n  onSelectedChange(event: {value: Workspace}) {\n    const workspace = event.value;\n    this.store.activateWorkspace(workspace);\n    this.selectedChange.emit({selected: true, value: workspace});\n  }\n\n}\n","<igo-entity-selector\n  [store]=\"store\"\n  [multi]=\"false\"\n  [titleAccessor]=\"getWorkspaceTitle\"\n  [disabled]=\"disabled\"\n  (selectedChange)=\"onSelectedChange($event)\">\n</igo-entity-selector>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoEntitySelectorModule } from '../../entity/entity-selector/entity-selector.module';\nimport { WorkspaceSelectorComponent } from './workspace-selector.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoEntitySelectorModule\n  ],\n  exports: [\n    WorkspaceSelectorComponent\n  ],\n  declarations: [\n    WorkspaceSelectorComponent\n  ]\n})\nexport class IgoWorkspaceSelectorModule {}\n","<ng-container *ngIf=\"widget$ | async as widget\">\n  <igo-widget-outlet\n    [widget]=\"widget\"\n    [inputs]=\"widgetInputs$ | async\"\n    [subscribers]=\"widgetSubscribers$ | async\"\n    (cancel)=\"onWidgetCancel(widget)\"\n    (complete)=\"onWidgetComplete(widget)\">\n  </igo-widget-outlet>\n</ng-container>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Widget } from '../../widget';\nimport { Workspace } from '../shared/workspace';\n\n/**\n * This component dynamically render an Workspace's active widget.\n * It also deactivate that widget whenever the widget's component\n * emit the 'cancel' or 'complete' event.\n */\n@Component({\n  selector: 'igo-workspace-widget-outlet',\n  templateUrl: './workspace-widget-outlet.component.html',\n  styleUrls: ['./workspace-widget-outlet.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WorkspaceWidgetOutletComponent {\n\n  /**\n   * Workspace\n   */\n  @Input() workspace: Workspace;\n\n  /**\n   * Event emitted when a widget is deactivate which happens\n   * when the widget's component emits the 'cancel' or 'complete' event.\n   */\n  @Output() deactivateWidget = new EventEmitter<Widget>();\n\n  /**\n   * Observable of the workspace's active widget\n   * @internal\n   */\n  get widget$(): BehaviorSubject<Widget> { return this.workspace.widget$; }\n\n  /**\n   * Observable of the workspace's widget inputs\n   * @internal\n   */\n  get widgetInputs$(): BehaviorSubject<{[key: string]: any}> {\n    return this.workspace.widgetInputs$;\n  }\n\n  /**\n   * Observable of the workspace's widget inputs\n   * @internal\n   */\n  get widgetSubscribers$(): BehaviorSubject<{[key: string]: (event: any) => void}> {\n    return this.workspace.widgetSubscribers$;\n  }\n\n  constructor() {}\n\n  /**\n   * When a widget's component emit the 'cancel' event,\n   * deactivate that widget and emit the 'deactivateWidget' event.\n   * @param widget Widget\n   * @internal\n   */\n  onWidgetCancel(widget: Widget) {\n    this.workspace.deactivateWidget();\n    this.deactivateWidget.emit(widget);\n  }\n\n  /**\n   * When a widget's component emit the 'cancel' event,\n   * deactivate that widget and emit the 'deactivateWidget' event.\n   * @param widget Widget\n   * @internal\n   */\n  onWidgetComplete(widget: Widget) {\n    this.workspace.deactivateWidget();\n    this.deactivateWidget.emit(widget);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoWidgetOutletModule } from '../../widget/widget-outlet/widget-outlet.module';\n\nimport { WorkspaceWidgetOutletComponent } from './workspace-widget-outlet.component';\n\n/**\n * @ignore\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    IgoWidgetOutletModule\n  ],\n  exports: [\n    WorkspaceWidgetOutletComponent\n  ],\n  declarations: [\n    WorkspaceWidgetOutletComponent\n  ]\n})\nexport class IgoWorkspaceWidgetOutletModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IgoWorkspaceSelectorModule } from './workspace-selector/workspace-selector.module';\nimport { IgoWorkspaceWidgetOutletModule } from './workspace-widget-outlet/workspace-widget-outlet.module';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    IgoWorkspaceSelectorModule,\n    IgoWorkspaceWidgetOutletModule\n  ],\n  declarations: []\n})\nexport class IgoWorkspaceModule {}\n","import { BehaviorSubject } from 'rxjs';\n\nexport class TableDatabase {\n  /** Stream that emits whenever the data has been modified. */\n  dataChange: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  get data(): any[] {\n    return this.dataChange.value;\n  }\n\n  constructor(data?) {\n    if (data) {\n      this.dataChange.next(data);\n    }\n  }\n\n  set(data) {\n    this.dataChange.next(data);\n  }\n\n  add(item) {\n    const copiedData = this.data.slice();\n    copiedData.push(item);\n    this.set(copiedData);\n  }\n\n  remove(item) {\n    const copiedData = this.data.slice();\n    const index = copiedData.indexOf(item);\n    copiedData.splice(index, 1);\n    this.set(copiedData);\n  }\n}\n","import { Tool } from './tool.interface';\nimport { ToolService } from './tool.service';\n\nexport function ToolComponent(tool: Partial<Tool>): (cls: any) => any {\n  return (compType: any) => {\n    ToolService.register(Object.assign({}, tool, {\n      component: compType\n    } as Tool));\n  };\n}\n","import { DynamicComponent } from '../../dynamic-component/shared/dynamic-component';\nimport { WidgetComponent } from './widget.interfaces';\n\nexport class Widget extends DynamicComponent<WidgetComponent> {}\n","import { EntityStore } from '../../entity';\nimport { Workspace } from './workspace';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * The class is a specialized version of an EntityStore that stores\n * workspaces.\n */\nexport class WorkspaceStore extends EntityStore<Workspace> {\n\n  activeWorkspace$: BehaviorSubject<Workspace> = new BehaviorSubject(undefined);\n\n  /**\n   * Activate the an workspace workspace and deactivate the one currently active\n   * @param workspace Workspace\n   */\n  activateWorkspace(workspace: Workspace) {\n    const active = this.activeWorkspace$.value;\n    if (active !== undefined) {\n      active.deactivate();\n    }\n\n    this.deactivateWorkspace();\n    if (workspace !== undefined) {\n      this.state.update(workspace, {active: true, selected: true}, true);\n      this.activeWorkspace$.next(workspace);\n      workspace.activate();\n    }\n  }\n\n  /**\n   * Deactivate the current workspace\n   * @param workspace Workspace\n   */\n  deactivateWorkspace() {\n    const active = this.activeWorkspace$.value;\n    if (active !== undefined) {\n      active.deactivate();\n      this.activeWorkspace$.next(undefined);\n    }\n  }\n\n}\n","import { Subscription, BehaviorSubject, Subject } from 'rxjs';\n\nimport { ActionStore } from '../../action';\nimport { Widget } from '../../widget';\nimport { EntityStore } from '../../entity';\n\nimport { WorkspaceOptions } from './workspace.interfaces';\n\n/**\n * This class is responsible of managing the relations between\n * entities and the actions that consume them. It also defines an\n * entity table template that may be used by an entity table component.\n */\nexport class Workspace<E extends object = object> {\n\n  /**\n   * Observable of the selected widget\n   */\n  readonly widget$ = new BehaviorSubject<Widget>(undefined);\n\n  /**\n   * Observable of the selected widget's inputs\n   */\n  readonly widgetInputs$ = new BehaviorSubject<{[key: string]: any}>({});\n\n  /**\n   * Observable of the selected widget's subscribers\n   */\n  readonly widgetSubscribers$ = new BehaviorSubject<{[key: string]: (event: any) => void}>({});\n\n  /**\n   * Subscription to the selected entity\n   */\n  private entities$$: Subscription;\n\n  /**\n   * State change that trigger an update of the actions availability\n   */\n  private change: Subject<void> = new Subject();\n\n  /**\n   * Subscription to state changes\n   */\n  private change$: Subscription;\n\n  /**\n   * Workspace id\n   */\n  get id(): string { return this.options.id; }\n\n  /**\n   * Workspace title\n   */\n  get title(): string { return this.options.title; }\n\n  /**\n   * Workspace title\n   */\n  get meta(): {[key: string]: any} { return this.options.meta || {}; }\n\n  /**\n   * Entities store\n   */\n  get entityStore(): EntityStore<E> { return this.options.entityStore as EntityStore<E>; }\n\n  /**\n   * Actions store (some actions activate a widget)\n   */\n  get actionStore(): ActionStore { return this.options.actionStore; }\n\n  /**\n   * Selected widget\n   */\n  get widget(): Widget { return this.widget$.value; }\n\n  /**\n   * Whether a widget is selected\n   */\n  get hasWidget(): boolean { return this.widget !== undefined; }\n\n  constructor(protected options: WorkspaceOptions) {}\n\n  /**\n   * Whether this strategy is active\n   * @internal\n   */\n  get active(): boolean { return this.active$.value; }\n  readonly active$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  /**\n   * Activate the workspace. By doing that, the workspace will observe\n   * the selected entity (from the store) and update the actions availability.\n   * For example, some actions require an entity to be selected.\n   */\n  activate() {\n    if (this.active === true) {\n      this.deactivate();\n    }\n    this.active$.next(true);\n\n    if (this.entityStore !== undefined) {\n      this.entities$$ = this.entityStore.stateView.all$()\n        .subscribe(() => this.onStateChange());\n    }\n\n    this.change.next();\n  }\n\n  /**\n   * Deactivate the workspace. Unsubcribe to the selected entity.\n   */\n  deactivate() {\n    this.active$.next(false);\n    this.deactivateWidget();\n\n    if (this.entities$$ !== undefined) {\n      this.entities$$.unsubscribe();\n    }\n    if (this.change$ !== undefined) {\n      this.change$.unsubscribe();\n    }\n  }\n\n  /**\n   * Activate a widget. In itself, activating a widget doesn't render it but,\n   * if an WorkspaceWidgetOutlet component is bound to this workspace, the widget will\n   * show up.\n   * @param widget Widget\n   * @param inputs Inputs the widget will receive\n   */\n  activateWidget(\n    widget: Widget,\n    inputs: {[key: string]: any} = {},\n    subscribers: {[key: string]: (event: any) => void} = {}\n  ) {\n    this.widget$.next(widget);\n    this.widgetInputs$.next(inputs);\n    this.widgetSubscribers$.next(subscribers);\n    this.change.next();\n  }\n\n  /**\n   * Deactivate a widget.\n   */\n  deactivateWidget() {\n    this.widget$.next(undefined);\n    this.change.next();\n  }\n\n  /**\n   * When the state changes, update the actions availability.\n   */\n  private onStateChange() {\n    this.change.next();\n  }\n\n}\n","/*\n * Public API Surface of common\n */\n\nexport * from './lib/action/action.module';\nexport * from './lib/action/actionbar/actionbar.module';\nexport * from './lib/backdrop/backdrop.module';\nexport * from './lib/badge-icon/badge-icon.module';\nexport * from './lib/clickout/clickout.module';\nexport * from './lib/clone/clone.module';\nexport * from './lib/collapsible/collapsible.module';\nexport * from './lib/confirm-dialog/confirm-dialog.module';\nexport * from './lib/context-menu/context-menu.module';\nexport * from './lib/custom-html/custom-html.module';\nexport * from './lib/drag-drop/drag-drop.module';\nexport * from './lib/dynamic-component/dynamic-component.module';\nexport * from './lib/dynamic-component/dynamic-outlet/dynamic-outlet.module';\nexport * from './lib/flexible/flexible.module';\nexport * from './lib/form/form.module';\nexport * from './lib/form/form/form.module';\nexport * from './lib/home-button/home-button.module';\nexport * from './lib/form/form-field/form-field.module';\nexport * from './lib/form/form-group/form-group.module';\nexport * from './lib/entity/entity.module';\nexport * from './lib/entity/entity-selector/entity-selector.module';\nexport * from './lib/entity/entity-table/entity-table.module';\nexport * from './lib/entity/entity-table-paginator/entity-table-paginator.module';\nexport * from './lib/image/image.module';\nexport * from './lib/interactive-tour/interactive-tour.module';\nexport * from './lib/json-dialog/json-dialog.module';\nexport * from './lib/keyvalue/keyvalue.module';\nexport * from './lib/list/list.module';\nexport * from './lib/panel/panel.module';\nexport * from './lib/sidenav/sidenav.module';\nexport * from './lib/spinner/spinner.module';\nexport * from './lib/stop-propagation/stop-propagation.module';\nexport * from './lib/table/table.module';\nexport * from './lib/tool/tool.module';\nexport * from './lib/tool/toolbox/toolbox.module';\nexport * from './lib/widget/widget.module';\nexport * from './lib/widget/widget-outlet/widget-outlet.module';\nexport * from './lib/workspace/workspace.module';\nexport * from './lib/workspace/workspace-selector/workspace-selector.module';\nexport * from './lib/workspace/workspace-widget-outlet/workspace-widget-outlet.module';\n\nexport * from './lib/action';\nexport * from './lib/backdrop';\nexport * from './lib/badge-icon';\nexport * from './lib/clickout';\nexport * from './lib/clone';\nexport * from './lib/collapsible';\nexport * from './lib/confirm-dialog';\nexport * from './lib/context-menu';\nexport * from './lib/custom-html';\nexport * from './lib/drag-drop';\nexport * from './lib/dynamic-component';\nexport * from './lib/form';\nexport * from './lib/home-button';\nexport * from './lib/entity';\nexport * from './lib/flexible';\nexport * from './lib/image';\nexport * from './lib/interactive-tour';\nexport * from './lib/json-dialog';\nexport * from './lib/keyvalue';\nexport * from './lib/list';\nexport * from './lib/panel';\nexport * from './lib/sidenav';\nexport * from './lib/spinner';\nexport * from './lib/stop-propagation';\nexport * from './lib/table';\nexport * from './lib/tool';\nexport * from './lib/widget';\nexport * from './lib/workspace';\n"]},"metadata":{},"sourceType":"module"}