{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotate\n */\n\n\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\n\nvar DragRotate = function (_super) {\n  __extends(DragRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragRotate(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n\n    this.lastAngle_ = theta;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragRotate;\n}(PointerInteraction);\n\nexport default DragRotate;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/interaction/DragRotate.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","PointerInteraction","FALSE","altShiftKeysOnly","mouseActionButton","mouseOnly","disable","DragRotate","_super","opt_options","_this","options","stopDown","condition_","condition","lastAngle_","undefined","duration_","duration","handleDragEvent","mapBrowserEvent","map","view","getView","getConstraints","rotation","size","getSize","offset","pixel","theta","Math","atan2","delta","adjustRotationInternal","handleUpEvent","endInteraction","handleDownEvent","beginInteraction"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly, } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /** @class */ (function (_super) {\n    __extends(DragRotate, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragRotate(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            stopDown: FALSE,\n        }) || this;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.lastAngle_ = undefined;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.duration_ = options.duration !== undefined ? options.duration : 250;\n        return _this;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return;\n        }\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        if (view.getConstraints().rotation === disable) {\n            return;\n        }\n        var size = map.getSize();\n        var offset = mapBrowserEvent.pixel;\n        var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n        if (this.lastAngle_ !== undefined) {\n            var delta = theta - this.lastAngle_;\n            view.adjustRotationInternal(-delta);\n        }\n        this.lastAngle_ = theta;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return true;\n        }\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        view.endInteraction(this.duration_);\n        return false;\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (!mouseOnly(mapBrowserEvent)) {\n            return false;\n        }\n        if (mouseActionButton(mapBrowserEvent) &&\n            this.condition_(mapBrowserEvent)) {\n            var map = mapBrowserEvent.map;\n            map.getView().beginInteraction();\n            this.lastAngle_ = undefined;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    return DragRotate;\n}(PointerInteraction));\nexport default DragRotate;\n"]},"metadata":{},"sourceType":"module"}