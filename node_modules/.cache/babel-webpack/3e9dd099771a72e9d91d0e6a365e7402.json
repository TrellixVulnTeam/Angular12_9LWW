{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\n\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\n\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\n\nvar FullScreen = function (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function FullScreen(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.button_ = document.createElement('button');\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    _this.setClassName_(_this.button_, isFullScreen());\n\n    _this.button_.setAttribute('type', 'button');\n\n    _this.button_.title = tipLabel;\n\n    _this.button_.appendChild(_this.labelNode_);\n\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n\n    var cssClasses = _this.cssClassName_ + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + ' ' + (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.button_);\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n\n    _this.source_ = options.source;\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreen_ = function () {\n    if (!isFullScreenSupported()) {\n      return;\n    }\n\n    var map = this.getMap();\n\n    if (!map) {\n      return;\n    }\n\n    if (isFullScreen()) {\n      exitFullScreen();\n    } else {\n      var element = void 0;\n\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? document.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n\n    if (isFullScreen()) {\n      this.setClassName_(this.button_, true);\n      replaceNode(this.labelActiveNode_, this.labelNode_);\n      this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n    } else {\n      this.setClassName_(this.button_, false);\n      replaceNode(this.labelNode_, this.labelActiveNode_);\n      this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n    }\n\n    if (map) {\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n\n\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c;\n\n    var activeClassName = this.activeClassName_;\n    var inactiveClassName = this.inactiveClassName_;\n    var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n\n    (_a = element.classList).remove.apply(_a, activeClassName);\n\n    (_b = element.classList).remove.apply(_b, inactiveClassName);\n\n    (_c = element.classList).add.apply(_c, nextClassName);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  FullScreen.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        this.listenerKeys.push(listen(document, events[i], this.handleFullScreenChange_, this));\n      }\n    }\n  };\n\n  return FullScreen;\n}(Control);\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\n\n\nfunction isFullScreenSupported() {\n  var body = document.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && document['msFullscreenEnabled'] || body.requestFullscreen && document.fullscreenEnabled);\n}\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\n\n\nfunction isFullScreen() {\n  return !!(document['webkitIsFullScreen'] || document['msFullscreenElement'] || document.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\n\n\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n */\n\n\nfunction exitFullScreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document['msExitFullscreen']) {\n    document['msExitFullscreen']();\n  } else if (document['webkitExitFullscreen']) {\n    document['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/control/FullScreen.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Control","EventType","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","_super","opt_options","_this","options","element","document","createElement","target","on","once","un","cssClassName_","className","undefined","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","button_","tipLabel","setClassName_","isFullScreen","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","bind","cssClasses","isFullScreenSupported","keys_","keys","source_","source","event","preventDefault","handleFullScreen_","map","getMap","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","dispatchEvent","updateSize","fullscreen","_a","_b","_c","nextClassName","classList","remove","apply","add","setMap","i","ii","length","listenerKeys","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = [\n    'fullscreenchange',\n    'webkitfullscreenchange',\n    'MSFullscreenChange',\n];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n    /**\n     * Triggered after the map entered fullscreen.\n     * @event FullScreenEventType#enterfullscreen\n     * @api\n     */\n    ENTERFULLSCREEN: 'enterfullscreen',\n    /**\n     * Triggered after the map leave fullscreen.\n     * @event FullScreenEventType#leavefullscreen\n     * @api\n     */\n    LEAVEFULLSCREEN: 'leavefullscreen',\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */ (function (_super) {\n    __extends(FullScreen, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function FullScreen(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            target: options.target,\n        }) || this;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {FullScreenOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.cssClassName_ =\n            options.className !== undefined ? options.className : 'ol-full-screen';\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.activeClassName_ =\n            options.activeClassName !== undefined\n                ? options.activeClassName.split(' ')\n                : [_this.cssClassName_ + '-true'];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.inactiveClassName_ =\n            options.inactiveClassName !== undefined\n                ? options.inactiveClassName.split(' ')\n                : [_this.cssClassName_ + '-false'];\n        var label = options.label !== undefined ? options.label : '\\u2922';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelNode_ =\n            typeof label === 'string' ? document.createTextNode(label) : label;\n        var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelActiveNode_ =\n            typeof labelActive === 'string'\n                ? document.createTextNode(labelActive)\n                : labelActive;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.button_ = document.createElement('button');\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n        _this.setClassName_(_this.button_, isFullScreen());\n        _this.button_.setAttribute('type', 'button');\n        _this.button_.title = tipLabel;\n        _this.button_.appendChild(_this.labelNode_);\n        _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        var cssClasses = _this.cssClassName_ +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            ' ' +\n            (!isFullScreenSupported() ? CLASS_UNSUPPORTED : '');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.button_);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.keys_ = options.keys !== undefined ? options.keys : false;\n        /**\n         * @private\n         * @type {HTMLElement|string|undefined}\n         */\n        _this.source_ = options.source;\n        return _this;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    FullScreen.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleFullScreen_();\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreen_ = function () {\n        if (!isFullScreenSupported()) {\n            return;\n        }\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        if (isFullScreen()) {\n            exitFullScreen();\n        }\n        else {\n            var element = void 0;\n            if (this.source_) {\n                element =\n                    typeof this.source_ === 'string'\n                        ? document.getElementById(this.source_)\n                        : this.source_;\n            }\n            else {\n                element = map.getTargetElement();\n            }\n            if (this.keys_) {\n                requestFullScreenWithKeys(element);\n            }\n            else {\n                requestFullScreen(element);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreenChange_ = function () {\n        var map = this.getMap();\n        if (isFullScreen()) {\n            this.setClassName_(this.button_, true);\n            replaceNode(this.labelActiveNode_, this.labelNode_);\n            this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n        }\n        else {\n            this.setClassName_(this.button_, false);\n            replaceNode(this.labelNode_, this.labelActiveNode_);\n            this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n        }\n        if (map) {\n            map.updateSize();\n        }\n    };\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n    FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n        var _a, _b, _c;\n        var activeClassName = this.activeClassName_;\n        var inactiveClassName = this.inactiveClassName_;\n        var nextClassName = fullscreen ? activeClassName : inactiveClassName;\n        (_a = element.classList).remove.apply(_a, activeClassName);\n        (_b = element.classList).remove.apply(_b, inactiveClassName);\n        (_c = element.classList).add.apply(_c, nextClassName);\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    FullScreen.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            for (var i = 0, ii = events.length; i < ii; ++i) {\n                this.listenerKeys.push(listen(document, events[i], this.handleFullScreenChange_, this));\n            }\n        }\n    };\n    return FullScreen;\n}(Control));\n/**\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported() {\n    var body = document.body;\n    return !!(body['webkitRequestFullscreen'] ||\n        (body['msRequestFullscreen'] && document['msFullscreenEnabled']) ||\n        (body.requestFullscreen && document.fullscreenEnabled));\n}\n/**\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen() {\n    return !!(document['webkitIsFullScreen'] ||\n        document['msFullscreenElement'] ||\n        document.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element['msRequestFullscreen']) {\n        element['msRequestFullscreen']();\n    }\n    else if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n    if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n    else {\n        requestFullScreen(element);\n    }\n}\n/**\n * Exit fullscreen.\n */\nfunction exitFullScreen() {\n    if (document.exitFullscreen) {\n        document.exitFullscreen();\n    }\n    else if (document['msExitFullscreen']) {\n        document['msExitFullscreen']();\n    }\n    else if (document['webkitExitFullscreen']) {\n        document['webkitExitFullscreen']();\n    }\n}\nexport default FullScreen;\n"]},"metadata":{},"sourceType":"module"}