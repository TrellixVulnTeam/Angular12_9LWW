{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\n\n\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { cssOpacity } from '../../css.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\n\nvar CanvasVectorLayerRenderer = function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n\n\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n\n\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n\n    _this.animatingOrInteracting_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.dirty_ = false;\n    /**\n     * @type {ImageData}\n     */\n\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    _this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n\n    _this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n\n    _this.replayGroupChanged = true;\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n\n    _this.declutterExecutorGroup = null;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n\n    _this.clipping = true;\n    return _this;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n\n    _super.prototype.useContainer.call(this, target, transform, opacity);\n  };\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    var pixelRatio = frameState.pixelRatio;\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    var context = this.context;\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n\n    do {\n      var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n    } while (++world < endWorld);\n  };\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n    if (this.declutterExecutorGroup) {\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex]; // set forward and inverse pixel transforms\n\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    var declutterExecutorGroup = this.declutterExecutorGroup;\n\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      return null;\n    } // resize and clear\n\n\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n    var viewState = frameState.viewState;\n    var projection = viewState.projection; // clipped rendering if layer extent is set\n\n    var clipped = false;\n    var render = true;\n\n    if (layerState.extent && this.clipping) {\n      var layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n    var opacity = cssOpacity(layerState.opacity);\n    var container = this.container;\n\n    if (opacity !== container.style.opacity) {\n      container.style.opacity = opacity;\n    }\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n\n    return this.container;\n  };\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(\n    /**\n     * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (resolve) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        var size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        var center = this.renderedCenter_;\n        var resolution = this.renderedResolution_;\n        var rotation = this.renderedRotation_;\n        var projection = this.renderedProjection_;\n        var extent = this.wrappedRenderedExtent_;\n        var layer = this.getLayer();\n        var transforms = [];\n        var width = size[0] * HIT_DETECT_RESOLUTION;\n        var height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        var source = layer.getSource();\n        var projectionExtent = projection.getExtent();\n\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          var startX = extent[0];\n          var worldWidth = getWidth(projectionExtent);\n          var world = 0;\n          var offsetX = void 0;\n\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n\n          world = 0;\n          startX = extent[2];\n\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    var _this = this;\n\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    var layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n\n    var features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n\n    var featureCallback = function (feature, geometry, distanceSq) {\n      var key = getUid(feature);\n      var match = features[key];\n\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n\n      return undefined;\n    };\n\n    var result;\n    var executorGroups = [this.replayGroup_];\n\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n\n    executorGroups.some(function (executorGroup) {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup ? frameState.declutterTree.all().map(function (item) {\n        return item.value;\n      }) : null);\n    });\n    return result;\n  };\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n\n    if (!vectorSource) {\n      return false;\n    }\n\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    var center = viewState.center.slice();\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var renderedExtent = extent.slice();\n    var loadExtents = [extent.slice()];\n    var projectionExtent = projection.getExtent();\n\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      var loadExtent = wrapExtentX(loadExtents[0], projection); // If the extent crosses the date line, we load data for both edges of the worlds\n\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n\n    if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n    this.dirty_ = false;\n    var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    var declutterBuilderGroup;\n\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n\n    var userProjection = getUserProjection();\n    var userTransform;\n\n    if (userProjection) {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        var extent_1 = loadExtents[i];\n        var userExtent_1 = toUserExtent(extent_1, projection);\n        vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n      }\n\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n    var render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n\n    var userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n\n    this.renderedFeatures_ = features;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n\n\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n\n    var loading = false;\n\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n    }\n\n    return loading;\n  };\n\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\n\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/renderer/canvas/VectorLayer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","CanvasBuilderGroup","CanvasLayerRenderer","ExecutorGroup","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","cssOpacity","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","_super","vectorLayer","_this","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","dirty_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","useContainer","target","transform","opacity","renderWorlds","executorGroup","frameState","opt_declutterTree","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","size","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","getRenderTransform","execute","undefined","renderDeclutter","declutterTree","renderFrame","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","canvas","replayGroup","isEmpty","style","containerReused","clearRect","preRender","clipped","render","layerExtent","clipUnrotated","restore","postRender","container","getFeatures","pixel","Promise","resolve","layer","transforms","push","slice","source","startX","offsetX","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","declutterBuilderGroup","getDeclutter","userProjection","userTransform","i","ii","length","extent_1","userExtent_1","loadFeatures","squaredTolerance","styles","styleFunction","dirty","userExtent","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","opt_transform","opt_declutterBuilderGroup","loading","isArray"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString, } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX, } from '../../extent.js';\nimport { cssOpacity } from '../../css.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution, } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n     */\n    function CanvasVectorLayerRenderer(vectorLayer) {\n        var _this = _super.call(this, vectorLayer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @type {boolean}\n         */\n        _this.animatingOrInteracting_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.dirty_ = false;\n        /**\n         * @type {ImageData}\n         */\n        _this.hitDetectionImageData_ = null;\n        /**\n         * @type {Array<import(\"../../Feature.js\").default>}\n         */\n        _this.renderedFeatures_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedResolution_ = NaN;\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.wrappedRenderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../coordinate\").Coordinate}\n         */\n        _this.renderedCenter_ = null;\n        /**\n         * @private\n         * @type {import(\"../../proj/Projection\").default}\n         */\n        _this.renderedProjection_ = null;\n        /**\n         * @private\n         * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n         */\n        _this.renderedRenderOrder_ = null;\n        /**\n         * @private\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.replayGroup_ = null;\n        /**\n         * A new replay group had to be created by `prepareFrame()`\n         * @type {boolean}\n         */\n        _this.replayGroupChanged = true;\n        /**\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        /**\n         * Clipping to be performed by `renderFrame()`\n         * @type {boolean}\n         */\n        _this.clipping = true;\n        return _this;\n    }\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {number} opacity Opacity.\n     */\n    CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n        if (opacity < 1) {\n            target = null;\n        }\n        _super.prototype.useContainer.call(this, target, transform, opacity);\n    };\n    /**\n     * @param {ExecutorGroup} executorGroup Executor group.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n        var extent = frameState.extent;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var rotation = viewState.rotation;\n        var projectionExtent = projection.getExtent();\n        var vectorSource = this.getLayer().getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewHints = frameState.viewHints;\n        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var context = this.context;\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var world = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        do {\n            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n        } while (++world < endWorld);\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        if (this.declutterExecutorGroup) {\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n        }\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var pixelRatio = frameState.pixelRatio;\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = transformToString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity);\n        var context = this.context;\n        var canvas = context.canvas;\n        var replayGroup = this.replayGroup_;\n        var declutterExecutorGroup = this.declutterExecutorGroup;\n        if ((!replayGroup || replayGroup.isEmpty()) &&\n            (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n            return null;\n        }\n        // resize and clear\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) {\n                canvas.style.transform = canvasTransform;\n            }\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        this.preRender(context, frameState);\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent && this.clipping) {\n            var layerExtent = fromUserExtent(layerState.extent, projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(context, frameState, layerExtent);\n            }\n        }\n        if (render) {\n            this.renderWorlds(replayGroup, frameState);\n        }\n        if (clipped) {\n            context.restore();\n        }\n        this.postRender(context, frameState);\n        var opacity = cssOpacity(layerState.opacity);\n        var container = this.container;\n        if (opacity !== container.style.opacity) {\n            container.style.opacity = opacity;\n        }\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(\n        /**\n         * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (resolve) {\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                var size = [this.context.canvas.width, this.context.canvas.height];\n                apply(this.pixelTransform, size);\n                var center = this.renderedCenter_;\n                var resolution = this.renderedResolution_;\n                var rotation = this.renderedRotation_;\n                var projection = this.renderedProjection_;\n                var extent = this.wrappedRenderedExtent_;\n                var layer = this.getLayer();\n                var transforms = [];\n                var width = size[0] * HIT_DETECT_RESOLUTION;\n                var height = size[1] * HIT_DETECT_RESOLUTION;\n                transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n                var source = layer.getSource();\n                var projectionExtent = projection.getExtent();\n                if (source.getWrapX() &&\n                    projection.canWrapX() &&\n                    !containsExtent(projectionExtent, extent)) {\n                    var startX = extent[0];\n                    var worldWidth = getWidth(projectionExtent);\n                    var world = 0;\n                    var offsetX = void 0;\n                    while (startX < projectionExtent[0]) {\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while (startX > projectionExtent[2]) {\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var _this = this;\n        if (!this.replayGroup_) {\n            return undefined;\n        }\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        var layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = getUid(feature);\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var result;\n        var executorGroups = [this.replayGroup_];\n        if (this.declutterExecutorGroup) {\n            executorGroups.push(this.declutterExecutorGroup);\n        }\n        executorGroups.some(function (executorGroup) {\n            return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup\n                ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                : null));\n        });\n        return result;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var vectorLayer = this.getLayer();\n        var vectorSource = vectorLayer.getSource();\n        if (!vectorSource) {\n            return false;\n        }\n        var animating = frameState.viewHints[ViewHint.ANIMATING];\n        var interacting = frameState.viewHints[ViewHint.INTERACTING];\n        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if ((!this.dirty_ && !updateWhileAnimating && animating) ||\n            (!updateWhileInteracting && interacting)) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        var frameStateExtent = frameState.extent;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var pixelRatio = frameState.pixelRatio;\n        var vectorLayerRevision = vectorLayer.getRevision();\n        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) {\n            vectorLayerRenderOrder = defaultRenderOrder;\n        }\n        var center = viewState.center.slice();\n        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        var renderedExtent = extent.slice();\n        var loadExtents = [extent.slice()];\n        var projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            var worldWidth = getWidth(projectionExtent);\n            var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            wrapCoordinateX(center, projection);\n            var loadExtent = wrapExtentX(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] &&\n                loadExtent[2] < projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] + worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] + worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n            else if (loadExtent[0] > projectionExtent[0] &&\n                loadExtent[2] > projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] - worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] - worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n        }\n        if (!this.dirty_ &&\n            this.renderedResolution_ == resolution &&\n            this.renderedRevision_ == vectorLayerRevision &&\n            this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n            containsExtent(this.wrappedRenderedExtent_, extent)) {\n            if (!equals(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        this.dirty_ = false;\n        var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        var declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) {\n            declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        }\n        var userProjection = getUserProjection();\n        var userTransform;\n        if (userProjection) {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                var extent_1 = loadExtents[i];\n                var userExtent_1 = toUserExtent(extent_1, projection);\n                vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n            }\n            userTransform = getTransformFromProjections(userProjection, projection);\n        }\n        else {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n            }\n        }\n        var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n        var render = \n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (feature) {\n            var styles;\n            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) {\n                styles = styleFunction(feature, resolution);\n            }\n            if (styles) {\n                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                this.dirty_ = this.dirty_ || dirty;\n            }\n        }.bind(this);\n        var userExtent = toUserExtent(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */\n        var features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) {\n            features.sort(vectorLayerRenderOrder);\n        }\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            render(features[i]);\n        }\n        this.renderedFeatures_ = features;\n        var replayGroupInstructions = replayGroup.finish();\n        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) {\n            this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        }\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasVectorLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}