{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ThrottlingUtils, ClientAuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RedirectHandler = function (_super) {\n  __extends(RedirectHandler, _super);\n\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n\n\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3\n            /*break*/\n            , 7]; // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n\n            if (params.redirectStartPage) {\n              this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            } // Set interaction status in the library.\n\n\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3\n            /*break*/\n            , 4];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3\n            /*break*/\n            , 2];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            // Navigate window to request URL\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4\n            /*yield*/\n            , params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n\n\n  RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            } // Interaction is completed - remove interaction status.\n\n\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            } // Remove throttle if it exists\n\n\n            if (clientId) {\n              ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n\n  return RedirectHandler;\n}(InteractionHandler);\n\nexport { RedirectHandler };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.js"],"names":["__extends","__awaiter","__generator","StringUtils","ThrottlingUtils","ClientAuthError","BrowserAuthError","TemporaryCacheKeys","BrowserConstants","ApiId","InteractionHandler","RedirectHandler","_super","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","browserCrypto","_this","call","prototype","initiateAuthRequest","requestUrl","params","navigationOptions","navigate","_a","label","verbose","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","ORIGIN_URI","INTERACTION_STATUS_KEY","INTERACTION_IN_PROGRESS_VALUE","cacheCodeRequest","infoPii","apiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigationClient","navigateExternal","sent","info","createEmptyNavigationUriError","handleCodeResponse","locationHash","state","authority","networkModule","clientId","stateKey","requestState","authCodeResponse","nonceKey","cachedNonce","cachedCcsCred","tokenResponse","createEmptyHashError","removeItem","generateCacheKey","generateStateKey","getTemporaryCache","createStateNotFoundError","authModule","handleFragmentResponse","generateNonceKey","code","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","checkCcsCredentials","ccsCredential","removeThrottle","scopes","acquireToken","cleanRequestByState"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ThrottlingUtils, ClientAuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RedirectHandler = /** @class */ (function (_super) {\r\n    __extends(RedirectHandler, _super);\r\n    function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {\r\n        var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\r\n        _this.browserCrypto = browserCrypto;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate\r\n     */\r\n    RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var navigationOptions, navigate;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\r\n                        if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];\r\n                        // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\r\n                        if (params.redirectStartPage) {\r\n                            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\r\n                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\r\n                        }\r\n                        // Set interaction status in the library.\r\n                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\r\n                        this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\r\n                        this.browserRequestLogger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\r\n                        navigationOptions = {\r\n                            apiId: ApiId.acquireTokenRedirect,\r\n                            timeout: params.redirectTimeout,\r\n                            noHistory: false\r\n                        };\r\n                        if (!(typeof params.onRedirectNavigate === \"function\")) return [3 /*break*/, 4];\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\r\n                        navigate = params.onRedirectNavigate(requestUrl);\r\n                        if (!(navigate !== false)) return [3 /*break*/, 2];\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\r\n                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 2:\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\r\n                        return [2 /*return*/];\r\n                    case 3: return [3 /*break*/, 6];\r\n                    case 4:\r\n                        // Navigate window to request URL\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\r\n                        return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 6: return [3 /*break*/, 8];\r\n                    case 7:\r\n                        // Throw error if request URL is empty.\r\n                        this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\r\n                        throw BrowserAuthError.createEmptyNavigationUriError();\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash\r\n     */\r\n    RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\r\n                        // Check that location hash isn't empty.\r\n                        if (StringUtils.isEmpty(locationHash)) {\r\n                            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n                        }\r\n                        // Interaction is completed - remove interaction status.\r\n                        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n                        stateKey = this.browserStorage.generateStateKey(state);\r\n                        requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                        if (!requestState) {\r\n                            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                        }\r\n                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n                        nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n                        // Assign code to request\r\n                        this.authCodeRequest.code = authCodeResponse.code;\r\n                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        authCodeResponse.nonce = cachedNonce || undefined;\r\n                        authCodeResponse.state = requestState;\r\n                        // Add CCS parameters if available\r\n                        if (authCodeResponse.client_info) {\r\n                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n                        }\r\n                        else {\r\n                            cachedCcsCred = this.checkCcsCredentials();\r\n                            if (cachedCcsCred) {\r\n                                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n                            }\r\n                        }\r\n                        // Remove throttle if it exists\r\n                        if (clientId) {\r\n                            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\r\n                        }\r\n                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\r\n                    case 3:\r\n                        tokenResponse = _a.sent();\r\n                        this.browserStorage.cleanRequestByState(state);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RedirectHandler;\r\n}(InteractionHandler));\n\nexport { RedirectHandler };\n"]},"metadata":{},"sourceType":"module"}