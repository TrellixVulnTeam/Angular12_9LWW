{"ast":null,"code":"/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\n\nexport var cosh = function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var cosh;\n\n  if ('cosh' in Math) {\n    // The environment supports the native Math.cosh function, use it…\n    cosh = Math.cosh;\n  } else {\n    // … else, use the reference implementation of MDN:\n    cosh = function (x) {\n      var y =\n      /** @type {Math} */\n      Math.exp(x);\n      return (y + 1 / y) / 2;\n    };\n  }\n\n  return cosh;\n}();\n/**\n * Return the base 2 logarithm of a given number. The method will use the\n * native `Math.log2` function if it is available, otherwise the base 2\n * logarithm will be calculated via the reference implementation of the\n * Mozilla developer network.\n *\n * @param {number} x X.\n * @return {number} Base 2 logarithm of x.\n */\n\nexport var log2 = function () {\n  // Wrapped in a iife, to save the overhead of checking for the native\n  // implementation on every invocation.\n  var log2;\n\n  if ('log2' in Math) {\n    // The environment supports the native Math.log2 function, use it…\n    log2 = Math.log2;\n  } else {\n    // … else, use the reference implementation of MDN:\n    log2 = function (x) {\n      return Math.log(x) * Math.LOG2E;\n    };\n  }\n\n  return log2;\n}();\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n\n  return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\n\nexport function squaredDistance(x1, y1, x2, y2) {\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\n\nexport function solveLinearSystem(mat) {\n  var n = mat.length;\n\n  for (var i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    var maxRow = i;\n    var maxEl = Math.abs(mat[i][i]);\n\n    for (var r = i + 1; r < n; r++) {\n      var absValue = Math.abs(mat[r][i]);\n\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    } // Swap max row with i-th (current) row\n\n\n    var tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp; // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n\n    for (var j = i + 1; j < n; j++) {\n      var coef = -mat[j][i] / mat[i][i];\n\n      for (var k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  } // Solve Ax=b for upper triangular matrix A (mat)\n\n\n  var x = new Array(n);\n\n  for (var l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n\n    for (var m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n\n  return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\n\nexport function toDegrees(angleInRadians) {\n  return angleInRadians * 180 / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\n\nexport function toRadians(angleInDegrees) {\n  return angleInDegrees * Math.PI / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\n\nexport function modulo(a, b) {\n  var r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\n\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/math.js"],"names":["clamp","value","min","max","Math","cosh","x","y","exp","log2","log","LOG2E","squaredSegmentDistance","x1","y1","x2","y2","dx","dy","t","squaredDistance","solveLinearSystem","mat","n","length","i","maxRow","maxEl","abs","r","absValue","tmp","j","coef","k","Array","l","m","toDegrees","angleInRadians","PI","toRadians","angleInDegrees","modulo","a","b","lerp"],"mappings":"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","sourcesContent":["/**\n * @module ol/math\n */\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var cosh;\n    if ('cosh' in Math) {\n        // The environment supports the native Math.cosh function, use it…\n        cosh = Math.cosh;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        cosh = function (x) {\n            var y = /** @type {Math} */ (Math).exp(x);\n            return (y + 1 / y) / 2;\n        };\n    }\n    return cosh;\n})();\n/**\n * Return the base 2 logarithm of a given number. The method will use the\n * native `Math.log2` function if it is available, otherwise the base 2\n * logarithm will be calculated via the reference implementation of the\n * Mozilla developer network.\n *\n * @param {number} x X.\n * @return {number} Base 2 logarithm of x.\n */\nexport var log2 = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var log2;\n    if ('log2' in Math) {\n        // The environment supports the native Math.log2 function, use it…\n        log2 = Math.log2;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        log2 = function (x) {\n            return Math.log(x) * Math.LOG2E;\n        };\n    }\n    return log2;\n})();\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        }\n        else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n    var n = mat.length;\n    for (var i = 0; i < n; i++) {\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        var maxRow = i;\n        var maxEl = Math.abs(mat[i][i]);\n        for (var r = i + 1; r < n; r++) {\n            var absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) {\n            return null; // matrix is singular\n        }\n        // Swap max row with i-th (current) row\n        var tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for (var j = i + 1; j < n; j++) {\n            var coef = -mat[j][i] / mat[i][i];\n            for (var k = i; k < n + 1; k++) {\n                if (i == k) {\n                    mat[j][k] = 0;\n                }\n                else {\n                    mat[j][k] += coef * mat[i][k];\n                }\n            }\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    var x = new Array(n);\n    for (var l = n - 1; l >= 0; l--) {\n        x[l] = mat[l][n] / mat[l][l];\n        for (var m = l - 1; m >= 0; m--) {\n            mat[m][n] -= mat[m][l] * x[l];\n        }\n    }\n    return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n    return (angleInRadians * 180) / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n    return (angleInDegrees * Math.PI) / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n    var r = a % b;\n    return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n    return a + x * (b - a);\n}\n"]},"metadata":{},"sourceType":"module"}