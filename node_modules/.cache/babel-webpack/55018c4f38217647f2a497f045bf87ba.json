{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __spread } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, AccountEntity, CacheManager, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, PersistentCacheKeys, ThrottlingEntity, Constants, StringUtils, ProtocolUtils, CcsCredentialType } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\n\nvar BrowserCacheManager = function (_super) {\n  __extends(BrowserCacheManager, _super);\n\n  function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\n    var _this = _super.call(this, clientId, cryptoImpl) || this; // Cookie life calculation (hours * minutes * seconds * ms)\n\n\n    _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    _this.cacheConfig = cacheConfig;\n    _this.logger = logger;\n    _this.internalStorage = new MemoryStorage();\n    _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\n    _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation); // Migrate any cache entries from older versions of MSAL.\n\n    _this.migrateCacheEntries();\n\n    return _this;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n\n    }\n\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  };\n  /**\r\n   *\r\n   * @param cacheLocation\r\n   */\n\n\n  BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  };\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntries = function () {\n    var _this = this;\n\n    var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\n    var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\n    var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\n    var idTokenValue = this.browserStorage.getItem(idTokenKey);\n    var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    var errorValue = this.browserStorage.getItem(errorKey);\n    var errorDescValue = this.browserStorage.getItem(errorDescKey);\n    var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach(function (cacheKey, index) {\n      return _this.migrateCacheEntry(cacheKey, values[index]);\n    });\n  };\n  /**\r\n   * Utility function to help with migration.\r\n   * @param newKey\r\n   * @param value\r\n   * @param storeAuthStateInCookie\r\n   */\n\n\n  BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  };\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n\n\n  BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\n    try {\n      var parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getItem = function (key) {\n    return this.browserStorage.getItem(key);\n  };\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setItem = function (key, value) {\n    this.browserStorage.setItem(key, value);\n  };\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccount = function (accountKey) {\n    var account = this.getItem(accountKey);\n\n    if (!account) {\n      return null;\n    }\n\n    var parsedAccount = this.validateAndParseJson(account);\n\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      return null;\n    }\n\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  };\n  /**\r\n   * set account entity in the platform cache\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccount = function (account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    var key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n  };\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\n    var value = this.getItem(idTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedIdToken = this.validateAndParseJson(value);\n\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  };\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    var idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n  };\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\n    var value = this.getItem(accessTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedAccessToken = this.validateAndParseJson(value);\n\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  };\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    var accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n  };\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\n    var value = this.getItem(refreshTokenKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    var parsedRefreshToken = this.validateAndParseJson(value);\n\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  };\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n\n\n  BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    var refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n  };\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\n    var value = this.getItem(appMetadataKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  };\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n\n\n  BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    var appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  };\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\n    var value = this.getItem(serverTelemetryKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  };\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n\n\n  BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\n    var value = this.internalStorage.getItem(key);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n\n    var parsedMetadata = this.validateAndParseJson(value);\n\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n\n    return null;\n  };\n  /**\r\n   *\r\n   */\n\n\n  BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\n    var _this = this;\n\n    var allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(function (key) {\n      return _this.isAuthorityMetadata(key);\n    });\n  };\n  /**\r\n   *\r\n   * @param entity\r\n   */\n\n\n  BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  };\n  /**\r\n   * Gets the active account\r\n   */\n\n\n  BrowserCacheManager.prototype.getActiveAccount = function () {\n    var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    var activeAccountId = this.browserStorage.getItem(activeAccountIdKey);\n\n    if (!activeAccountId) {\n      return null;\n    }\n\n    return this.getAccountInfoByFilter({\n      localAccountId: activeAccountId\n    })[0] || null;\n  };\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.setActiveAccount = function (account) {\n    var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountIdKey);\n    }\n  };\n  /**\r\n   * Gets a list of accounts that match all of the filters provided\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\n    var allAccounts = this.getAllAccounts();\n    return allAccounts.filter(function (accountObj) {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n\n\n  BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\n    var value = this.getItem(throttlingCacheKey);\n\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    var parsedThrottlingCache = this.validateAndParseJson(value);\n\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  };\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n\n\n  BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  };\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      var itemCookie = this.getItemCookie(key);\n\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n\n    var value = this.temporaryCacheStorage.getItem(key);\n\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        var item = this.browserStorage.getItem(key);\n\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  };\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n\n\n  BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\r\n   * Removes the cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.removeItem = function (key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n\n    return true;\n  };\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key\r\n   */\n\n\n  BrowserCacheManager.prototype.containsKey = function (key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  };\n  /**\r\n   * Gets all keys in window.\r\n   */\n\n\n  BrowserCacheManager.prototype.getKeys = function () {\n    return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\n  };\n  /**\r\n   * Clears all cache entries created by MSAL (except tokens).\r\n   */\n\n\n  BrowserCacheManager.prototype.clear = function () {\n    var _this = this;\n\n    this.removeAllAccounts();\n    this.removeAppMetadata();\n    this.getKeys().forEach(function (cacheKey) {\n      // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n      if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) {\n        _this.removeItem(cacheKey);\n      }\n    });\n    this.internalStorage.clear();\n  };\n  /**\r\n   * Add value to cookies\r\n   * @param cookieName\r\n   * @param cookieValue\r\n   * @param expires\r\n   */\n\n\n  BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\n    var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;\";\n\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Get one item by key from cookies\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\n    var name = encodeURIComponent(cookieName) + \"=\";\n    var cookieList = document.cookie.split(\";\");\n\n    for (var i = 0; i < cookieList.length; i++) {\n      var cookie = cookieList[i];\n\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n   */\n\n\n  BrowserCacheManager.prototype.clearMsalCookies = function () {\n    var _this = this;\n\n    var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\n    var cookieList = document.cookie.split(\";\");\n    cookieList.forEach(function (cookie) {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        var cookieKey = cookie.split(\"=\")[0];\n\n        _this.clearItemCookie(cookieKey);\n      }\n    });\n  };\n  /**\r\n   * Clear an item in the cookies by key\r\n   * @param cookieName\r\n   */\n\n\n  BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\n    this.setItemCookie(cookieName, \"\", -1);\n  };\n  /**\r\n   * Get cookie expiration time\r\n   * @param cookieLifeDays\r\n   */\n\n\n  BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  };\n  /**\r\n   * Gets the cache object referenced by the browser\r\n   */\n\n\n  BrowserCacheManager.prototype.getCache = function () {\n    return this.browserStorage;\n  };\n  /**\r\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n   */\n\n\n  BrowserCacheManager.prototype.setCache = function () {// sets nothing\n  };\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n\n\n  BrowserCacheManager.prototype.generateCacheKey = function (key) {\n    var generatedKey = this.validateAndParseJson(key);\n\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n\n      return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\n    }\n\n    return JSON.stringify(key);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\n  };\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\n  };\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n\n\n  BrowserCacheManager.prototype.generateStateKey = function (stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\n  };\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\n    var stateCacheKey = this.generateStateKey(cachedState);\n    var state = this.getTemporaryCache(stateCacheKey);\n\n    if (!state) {\n      return null;\n    }\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  };\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n\n\n  BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\"); // Cache the request state\n\n    var stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false); // Cache the nonce\n\n    var nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false); // Cache authorityKey\n\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n    if (account) {\n      var ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      var ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  };\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n\n\n  BrowserCacheManager.prototype.resetRequestCache = function (state) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\"); // check state and remove associated cache items\n\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(function (key) {\n        if (key.indexOf(state) !== -1) {\n          _this.removeItem(key);\n        }\n      });\n    } // delete generic interactive request parameters\n\n\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n  };\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\"); // Interaction is completed - remove interaction status.\n\n    if (stateString) {\n      var stateKey = this.generateStateKey(stateString);\n      var cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\n      this.resetRequestCache(cachedState || \"\");\n    }\n\n    this.clearMsalCookies();\n  };\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n\n\n  BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\n    var _this = this;\n\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\"); // Loop through all keys to find state key\n\n    this.getKeys().forEach(function (key) {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      } // Retrieve state value, return if not a valid value\n\n\n      var stateValue = _this.temporaryCacheStorage.getItem(key);\n\n      if (!stateValue) {\n        return;\n      } // Extract state and ensure it matches given InteractionType, then clean request cache\n\n\n      var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\n\n      if (parsedState && parsedState.interactionType === interactionType) {\n        _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\n\n        _this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n  };\n\n  BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  };\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n\n\n  BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\"); // Get token request from cache and parse as TokenExchangeParameters.\n\n    var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n\n    var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)); // Get cached authority and use if no authority is cached with request.\n\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      var authorityCacheKey = this.generateAuthorityKey(state);\n      var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n\n      parsedRequest.authority = cachedAuthority;\n    }\n\n    return parsedRequest;\n  };\n\n  return BrowserCacheManager;\n}(CacheManager);\n\nvar DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {\n  var cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.js"],"names":["__extends","__spread","DEFAULT_CRYPTO_IMPLEMENTATION","AccountEntity","CacheManager","IdTokenEntity","AccessTokenEntity","RefreshTokenEntity","AppMetadataEntity","ServerTelemetryEntity","AuthorityMetadataEntity","PersistentCacheKeys","ThrottlingEntity","Constants","StringUtils","ProtocolUtils","CcsCredentialType","BrowserAuthError","BrowserCacheLocation","TemporaryCacheKeys","BrowserStorage","MemoryStorage","BrowserProtocolUtils","BrowserCacheManager","_super","clientId","cacheConfig","cryptoImpl","logger","_this","call","COOKIE_LIFE_MULTIPLIER","internalStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","migrateCacheEntries","prototype","LocalStorage","SessionStorage","e","verbose","idTokenKey","CACHE_PREFIX","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","validateAndParseJson","jsonValue","parsedJson","JSON","parse","error","key","setItem","getAccount","accountKey","account","parsedAccount","isAccountEntity","toObject","setAccount","trace","generateAccountKey","stringify","getIdTokenCredential","parsedIdToken","isIdTokenEntity","setIdTokenCredential","idToken","generateCredentialKey","getAccessTokenCredential","accessTokenKey","parsedAccessToken","isAccessTokenEntity","setAccessTokenCredential","accessToken","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","isRefreshTokenEntity","setRefreshTokenCredential","refreshToken","getAppMetadata","appMetadataKey","parsedMetadata","isAppMetadataEntity","setAppMetadata","appMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetryKey","isServerTelemetryEntity","setServerTelemetry","serverTelemetry","getAuthorityMetadata","isAuthorityMetadataEntity","getAuthorityMetadataKeys","allKeys","getKeys","filter","isAuthorityMetadata","setAuthorityMetadata","entity","getActiveAccount","activeAccountIdKey","generateCacheKey","ACTIVE_ACCOUNT","activeAccountId","getAccountInfoByFilter","localAccountId","setActiveAccount","removeItem","accountFilter","allAccounts","getAllAccounts","accountObj","username","toLowerCase","homeAccountId","tenantId","environment","getThrottlingCache","throttlingCacheKey","parsedThrottlingCache","isThrottlingEntity","setThrottlingCache","throttlingCache","getTemporaryCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","item","setItemCookie","clearItemCookie","containsKey","clear","removeAllAccounts","removeAppMetadata","indexOf","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","length","charAt","substring","decodeURIComponent","clearMsalCookies","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","toUTCString","getCache","setCache","generatedKey","startsWith","ADAL_ID_TOKEN","generateAuthorityKey","stateString","stateId","parseRequestState","libraryState","id","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","cachedState","stateCacheKey","state","authorityCacheKey","updateCacheEntries","nonce","authorityInstance","loginHint","nonceCacheKey","ccsCredential","credential","type","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","resetRequestCache","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","INTERACTION_STATUS_KEY","cleanRequestByState","stateKey","infoPii","cleanRequestByInteractionType","interactionType","stateValue","parsedState","extractBrowserRequestState","cacheCodeRequest","authCodeRequest","browserCrypto","encodedValue","base64Encode","getCachedRequest","encodedTokenRequest","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __extends, __spread } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, AccountEntity, CacheManager, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, PersistentCacheKeys, ThrottlingEntity, Constants, StringUtils, ProtocolUtils, CcsCredentialType } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\r\nvar BrowserCacheManager = /** @class */ (function (_super) {\r\n    __extends(BrowserCacheManager, _super);\r\n    function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\r\n        var _this = _super.call(this, clientId, cryptoImpl) || this;\r\n        // Cookie life calculation (hours * minutes * seconds * ms)\r\n        _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\r\n        _this.cacheConfig = cacheConfig;\r\n        _this.logger = logger;\r\n        _this.internalStorage = new MemoryStorage();\r\n        _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\r\n        _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation);\r\n        // Migrate any cache entries from older versions of MSAL.\r\n        _this.migrateCacheEntries();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */\r\n    BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                    return new BrowserStorage(cacheLocation);\r\n                }\r\n                catch (e) {\r\n                    this.logger.verbose(e);\r\n                    break;\r\n                }\r\n        }\r\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\r\n        return new MemoryStorage();\r\n    };\r\n    /**\r\n     *\r\n     * @param cacheLocation\r\n     */\r\n    BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                    return new BrowserStorage(BrowserCacheLocation.SessionStorage);\r\n                }\r\n                catch (e) {\r\n                    this.logger.verbose(e);\r\n                    return this.internalStorage;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                return this.internalStorage;\r\n        }\r\n    };\r\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    BrowserCacheManager.prototype.migrateCacheEntries = function () {\r\n        var _this = this;\r\n        var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\r\n        var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\r\n        var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\r\n        var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\r\n        var idTokenValue = this.browserStorage.getItem(idTokenKey);\r\n        var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\r\n        var errorValue = this.browserStorage.getItem(errorKey);\r\n        var errorDescValue = this.browserStorage.getItem(errorDescKey);\r\n        var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\r\n        keysToMigrate.forEach(function (cacheKey, index) { return _this.migrateCacheEntry(cacheKey, values[index]); });\r\n    };\r\n    /**\r\n     * Utility function to help with migration.\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\r\n        if (value) {\r\n            this.setTemporaryCache(newKey, value, true);\r\n        }\r\n    };\r\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */\r\n    BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\r\n        try {\r\n            var parsedJson = JSON.parse(jsonValue);\r\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */\r\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\r\n        }\r\n        catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */\r\n    BrowserCacheManager.prototype.getItem = function (key) {\r\n        return this.browserStorage.getItem(key);\r\n    };\r\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */\r\n    BrowserCacheManager.prototype.setItem = function (key, value) {\r\n        this.browserStorage.setItem(key, value);\r\n    };\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */\r\n    BrowserCacheManager.prototype.getAccount = function (accountKey) {\r\n        var account = this.getItem(accountKey);\r\n        if (!account) {\r\n            return null;\r\n        }\r\n        var parsedAccount = this.validateAndParseJson(account);\r\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\r\n            return null;\r\n        }\r\n        return CacheManager.toObject(new AccountEntity(), parsedAccount);\r\n    };\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    BrowserCacheManager.prototype.setAccount = function (account) {\r\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\r\n        var key = account.generateAccountKey();\r\n        this.setItem(key, JSON.stringify(account));\r\n    };\r\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */\r\n    BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\r\n        var value = this.getItem(idTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedIdToken = this.validateAndParseJson(value);\r\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\r\n    };\r\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */\r\n    BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\r\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\r\n        var idTokenKey = idToken.generateCredentialKey();\r\n        this.setItem(idTokenKey, JSON.stringify(idToken));\r\n    };\r\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */\r\n    BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\r\n        var value = this.getItem(accessTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedAccessToken = this.validateAndParseJson(value);\r\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\r\n    };\r\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */\r\n    BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\r\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\r\n        var accessTokenKey = accessToken.generateCredentialKey();\r\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\r\n    };\r\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */\r\n    BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\r\n        var value = this.getItem(refreshTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedRefreshToken = this.validateAndParseJson(value);\r\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\r\n    };\r\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\r\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\r\n        var refreshTokenKey = refreshToken.generateCredentialKey();\r\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\r\n    };\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\r\n        var value = this.getItem(appMetadataKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\r\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\r\n    };\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\r\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\r\n        var appMetadataKey = appMetadata.generateAppMetadataKey();\r\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\r\n    };\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\r\n        var value = this.getItem(serverTelemetryKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\r\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\r\n    };\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\r\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\r\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\r\n        var value = this.internalStorage.getItem(key);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedMetadata = this.validateAndParseJson(value);\r\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\r\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\r\n        var _this = this;\r\n        var allKeys = this.internalStorage.getKeys();\r\n        return allKeys.filter(function (key) {\r\n            return _this.isAuthorityMetadata(key);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\r\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\r\n        this.internalStorage.setItem(key, JSON.stringify(entity));\r\n    };\r\n    /**\r\n     * Gets the active account\r\n     */\r\n    BrowserCacheManager.prototype.getActiveAccount = function () {\r\n        var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        var activeAccountId = this.browserStorage.getItem(activeAccountIdKey);\r\n        if (!activeAccountId) {\r\n            return null;\r\n        }\r\n        return this.getAccountInfoByFilter({ localAccountId: activeAccountId })[0] || null;\r\n    };\r\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account\r\n     */\r\n    BrowserCacheManager.prototype.setActiveAccount = function (account) {\r\n        var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        if (account) {\r\n            this.logger.verbose(\"setActiveAccount: Active account set\");\r\n            this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);\r\n        }\r\n        else {\r\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\r\n            this.browserStorage.removeItem(activeAccountIdKey);\r\n        }\r\n    };\r\n    /**\r\n     * Gets a list of accounts that match all of the filters provided\r\n     * @param account\r\n     */\r\n    BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\r\n        var allAccounts = this.getAllAccounts();\r\n        return allAccounts.filter(function (accountObj) {\r\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\r\n                return false;\r\n            }\r\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\r\n                return false;\r\n            }\r\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\r\n                return false;\r\n            }\r\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\r\n                return false;\r\n            }\r\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    };\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\r\n        var value = this.getItem(throttlingCacheKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n        var parsedThrottlingCache = this.validateAndParseJson(value);\r\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\r\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\r\n    };\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\r\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\r\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\r\n    };\r\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\r\n        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            var itemCookie = this.getItemCookie(key);\r\n            if (itemCookie) {\r\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\r\n                return itemCookie;\r\n            }\r\n        }\r\n        var value = this.temporaryCacheStorage.getItem(key);\r\n        if (!value) {\r\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\r\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\r\n                var item = this.browserStorage.getItem(key);\r\n                if (item) {\r\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\r\n                    return item;\r\n                }\r\n            }\r\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\r\n        return value;\r\n    };\r\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\r\n        var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n        this.temporaryCacheStorage.setItem(key, value);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\r\n            this.setItemCookie(key, value);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    BrowserCacheManager.prototype.removeItem = function (key) {\r\n        this.browserStorage.removeItem(key);\r\n        this.temporaryCacheStorage.removeItem(key);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\r\n            this.clearItemCookie(key);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key\r\n     */\r\n    BrowserCacheManager.prototype.containsKey = function (key) {\r\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\r\n    };\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    BrowserCacheManager.prototype.getKeys = function () {\r\n        return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\r\n    };\r\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */\r\n    BrowserCacheManager.prototype.clear = function () {\r\n        var _this = this;\r\n        this.removeAllAccounts();\r\n        this.removeAppMetadata();\r\n        this.getKeys().forEach(function (cacheKey) {\r\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\r\n            if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(_this.clientId) !== -1))) {\r\n                _this.removeItem(cacheKey);\r\n            }\r\n        });\r\n        this.internalStorage.clear();\r\n    };\r\n    /**\r\n     * Add value to cookies\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param expires\r\n     */\r\n    BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\r\n        var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;\";\r\n        if (expires) {\r\n            var expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += \"expires=\" + expireTime + \";\";\r\n        }\r\n        if (this.cacheConfig.secureCookies) {\r\n            cookieStr += \"Secure;\";\r\n        }\r\n        document.cookie = cookieStr;\r\n    };\r\n    /**\r\n     * Get one item by key from cookies\r\n     * @param cookieName\r\n     */\r\n    BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\r\n        var name = encodeURIComponent(cookieName) + \"=\";\r\n        var cookieList = document.cookie.split(\";\");\r\n        for (var i = 0; i < cookieList.length; i++) {\r\n            var cookie = cookieList[i];\r\n            while (cookie.charAt(0) === \" \") {\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(name) === 0) {\r\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\r\n            }\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n     */\r\n    BrowserCacheManager.prototype.clearMsalCookies = function () {\r\n        var _this = this;\r\n        var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\r\n        var cookieList = document.cookie.split(\";\");\r\n        cookieList.forEach(function (cookie) {\r\n            while (cookie.charAt(0) === \" \") {\r\n                // eslint-disable-next-line no-param-reassign\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(cookiePrefix) === 0) {\r\n                var cookieKey = cookie.split(\"=\")[0];\r\n                _this.clearItemCookie(cookieKey);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cookieName\r\n     */\r\n    BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\r\n        this.setItemCookie(cookieName, \"\", -1);\r\n    };\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\r\n        var today = new Date();\r\n        var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\r\n        return expr.toUTCString();\r\n    };\r\n    /**\r\n     * Gets the cache object referenced by the browser\r\n     */\r\n    BrowserCacheManager.prototype.getCache = function () {\r\n        return this.browserStorage;\r\n    };\r\n    /**\r\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n     */\r\n    BrowserCacheManager.prototype.setCache = function () {\r\n        // sets nothing\r\n    };\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    BrowserCacheManager.prototype.generateCacheKey = function (key) {\r\n        var generatedKey = this.validateAndParseJson(key);\r\n        if (!generatedKey) {\r\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\r\n                return key;\r\n            }\r\n            return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\r\n        }\r\n        return JSON.stringify(key);\r\n    };\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\r\n        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\r\n        return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\r\n    };\r\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */\r\n    BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\r\n        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\r\n        return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\r\n    };\r\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */\r\n    BrowserCacheManager.prototype.generateStateKey = function (stateString) {\r\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\r\n        var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\r\n        return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\r\n    };\r\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */\r\n    BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\r\n        var stateCacheKey = this.generateStateKey(cachedState);\r\n        var state = this.getTemporaryCache(stateCacheKey);\r\n        if (!state) {\r\n            return null;\r\n        }\r\n        var authorityCacheKey = this.generateAuthorityKey(state);\r\n        return this.getTemporaryCache(authorityCacheKey);\r\n    };\r\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */\r\n    BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\r\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\r\n        // Cache the request state\r\n        var stateCacheKey = this.generateStateKey(state);\r\n        this.setTemporaryCache(stateCacheKey, state, false);\r\n        // Cache the nonce\r\n        var nonceCacheKey = this.generateNonceKey(state);\r\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\r\n        // Cache authorityKey\r\n        var authorityCacheKey = this.generateAuthorityKey(state);\r\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\r\n        if (account) {\r\n            var ccsCredential = {\r\n                credential: account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        }\r\n        else if (!StringUtils.isEmpty(loginHint)) {\r\n            var ccsCredential = {\r\n                credential: loginHint,\r\n                type: CcsCredentialType.UPN\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        }\r\n    };\r\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */\r\n    BrowserCacheManager.prototype.resetRequestCache = function (state) {\r\n        var _this = this;\r\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\r\n        // check state and remove associated cache items\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.getKeys().forEach(function (key) {\r\n                if (key.indexOf(state) !== -1) {\r\n                    _this.removeItem(key);\r\n                }\r\n            });\r\n        }\r\n        // delete generic interactive request parameters\r\n        if (state) {\r\n            this.removeItem(this.generateStateKey(state));\r\n            this.removeItem(this.generateNonceKey(state));\r\n            this.removeItem(this.generateAuthorityKey(state));\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\r\n    };\r\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString\r\n     */\r\n    BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\r\n        // Interaction is completed - remove interaction status.\r\n        if (stateString) {\r\n            var stateKey = this.generateStateKey(stateString);\r\n            var cachedState = this.temporaryCacheStorage.getItem(stateKey);\r\n            this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\r\n            this.resetRequestCache(cachedState || \"\");\r\n        }\r\n        this.clearMsalCookies();\r\n    };\r\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType\r\n     */\r\n    BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\r\n        var _this = this;\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\r\n        // Loop through all keys to find state key\r\n        this.getKeys().forEach(function (key) {\r\n            // If this key is not the state key, move on\r\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\r\n                return;\r\n            }\r\n            // Retrieve state value, return if not a valid value\r\n            var stateValue = _this.temporaryCacheStorage.getItem(key);\r\n            if (!stateValue) {\r\n                return;\r\n            }\r\n            // Extract state and ensure it matches given InteractionType, then clean request cache\r\n            var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\r\n            if (parsedState && parsedState.interactionType === interactionType) {\r\n                _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\r\n                _this.resetRequestCache(stateValue);\r\n            }\r\n        });\r\n        this.clearMsalCookies();\r\n    };\r\n    BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\r\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\r\n        var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\r\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\r\n    };\r\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */\r\n    BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\r\n        // Get token request from cache and parse as TokenExchangeParameters.\r\n        var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\r\n        if (!encodedTokenRequest) {\r\n            throw BrowserAuthError.createNoTokenRequestCacheError();\r\n        }\r\n        var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\r\n        if (!parsedRequest) {\r\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n        // Get cached authority and use if no authority is cached with request.\r\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\r\n            var authorityCacheKey = this.generateAuthorityKey(state);\r\n            var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\r\n            if (!cachedAuthority) {\r\n                throw BrowserAuthError.createNoCachedAuthorityError();\r\n            }\r\n            parsedRequest.authority = cachedAuthority;\r\n        }\r\n        return parsedRequest;\r\n    };\r\n    return BrowserCacheManager;\r\n}(CacheManager));\r\nvar DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {\r\n    var cacheOptions = {\r\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        storeAuthStateInCookie: false,\r\n        secureCookies: false\r\n    };\r\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\r\n};\n\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };\n"]},"metadata":{},"sourceType":"module"}