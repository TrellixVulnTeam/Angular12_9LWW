{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\n\n\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\n\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\n\nvar MIN_RATIO = 0.1;\n\nvar ControlledMap = function (_super) {\n  __extends(ControlledMap, _super);\n\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ControlledMap.prototype.createRenderer = function () {\n    return new CompositeMapRenderer(this);\n  };\n\n  return ControlledMap;\n}(PluggableMap);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\n\n\nvar OverviewMap = function (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options} [opt_options] OverviewMap options.\n   */\n\n\n  function OverviewMap(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n\n    var label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n\n    _this.view_ = options.view;\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: OverlayPositioning.CENTER_CENTER,\n      element: box\n    });\n\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n\n\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n\n    var move = function (event) {\n      var position = computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(position);\n      overlay.setPosition(coordinates);\n    };\n\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n\n    if (map === oldMap) {\n      return;\n    }\n\n    if (oldMap) {\n      var oldView = oldMap.getView();\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      this.ovmap_.setTarget(null);\n    }\n\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n\n      if (view) {\n        this.bindView_(view);\n\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView = event.oldValue;\n\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.bindView_ = function (view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      var newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_); // Sync once with the new view\n\n    this.handleRotationChanged_();\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n\n\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n\n\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize = map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n\n    this.viewExtent_ = extent;\n    var ovmapSize = ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n\n\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize = map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView(); // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n\n\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    var mapSize = map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution; // set position using center coordinates\n\n    overlay.setPosition(center); // set box size calculated from map extent size and overview map resolution\n\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n\n\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n\n    this.collapsed_ = !this.collapsed_; // manage overview map if it had not been rendered before and control\n    // is expanded\n\n    var ovmap = this.ovmap_;\n\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n\n\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n\n    this.rotateWithView_ = rotateWithView;\n\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n\n\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  OverviewMap.prototype.render = function (mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  };\n\n  return OverviewMap;\n}(Control);\n\nexport default OverviewMap;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/control/OverviewMap.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","CompositeMapRenderer","Control","EventType","MapEventType","MapProperty","ObjectEventType","Overlay","OverlayPositioning","PluggableMap","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","ControlledMap","_super","apply","arguments","createRenderer","OverviewMap","opt_options","_this","options","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap_","ovmap","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","CENTER_CENTER","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","setMap","map","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport OverlayPositioning from '../OverlayPositioning.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter, } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */ (function (_super) {\n    __extends(ControlledMap, _super);\n    function ControlledMap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ControlledMap.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return ControlledMap;\n}(PluggableMap));\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */ (function (_super) {\n    __extends(OverviewMap, _super);\n    /**\n     * @param {Options} [opt_options] OverviewMap options.\n     */\n    function OverviewMap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         */\n        _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotateWithView_ =\n            options.rotateWithView !== undefined ? options.rotateWithView : false;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        _this.viewExtent_ = undefined;\n        var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : '\\u203A';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(activeLabel);\n        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        _this.ovmapDiv_ = document.createElement('div');\n        _this.ovmapDiv_.className = 'ol-overviewmap-map';\n        /**\n         * Explicitly given view to be used instead of a view derived from the main map.\n         * @type {View}\n         * @private\n         */\n        _this.view_ = options.view;\n        /**\n         * @type {ControlledMap}\n         * @private\n         */\n        _this.ovmap_ = new ControlledMap({\n            view: options.view,\n        });\n        var ovmap = _this.ovmap_;\n        if (options.layers) {\n            options.layers.forEach(function (layer) {\n                ovmap.addLayer(layer);\n            });\n        }\n        var box = document.createElement('div');\n        box.className = 'ol-overviewmap-box';\n        box.style.boxSizing = 'border-box';\n        /**\n         * @type {import(\"../Overlay.js\").default}\n         * @private\n         */\n        _this.boxOverlay_ = new Overlay({\n            position: [0, 0],\n            positioning: OverlayPositioning.CENTER_CENTER,\n            element: box,\n        });\n        _this.ovmap_.addOverlay(_this.boxOverlay_);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.ovmapDiv_);\n        element.appendChild(button);\n        /* Interactive map */\n        var scope = _this;\n        var overlay = _this.boxOverlay_;\n        var overlayBox = _this.boxOverlay_.getElement();\n        /* Functions definition */\n        var computeDesiredMousePosition = function (mousePosition) {\n            return {\n                clientX: mousePosition.clientX,\n                clientY: mousePosition.clientY,\n            };\n        };\n        var move = function (event) {\n            var position = /** @type {?} */ (computeDesiredMousePosition(event));\n            var coordinates = ovmap.getEventCoordinateInternal(\n            /** @type {MouseEvent} */ (position));\n            overlay.setPosition(coordinates);\n        };\n        var endMoving = function (event) {\n            var coordinates = ovmap.getEventCoordinateInternal(event);\n            scope.getMap().getView().setCenterInternal(coordinates);\n            window.removeEventListener('mousemove', move);\n            window.removeEventListener('mouseup', endMoving);\n        };\n        /* Binding */\n        overlayBox.addEventListener('mousedown', function () {\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', endMoving);\n        });\n        return _this;\n    }\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    OverviewMap.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (map === oldMap) {\n            return;\n        }\n        if (oldMap) {\n            var oldView = oldMap.getView();\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            this.ovmap_.setTarget(null);\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.ovmap_.setTarget(this.ovmapDiv_);\n            this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n            var view = map.getView();\n            if (view) {\n                this.bindView_(view);\n                if (view.isDef()) {\n                    this.ovmap_.updateSize();\n                    this.resetExtent_();\n                }\n            }\n            if (!this.ovmap_.isRendered()) {\n                this.updateBoxAfterOvmapIsRendered_();\n            }\n        }\n    };\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n    OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n        if (event.key === MapProperty.VIEW) {\n            var oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            var newView = this.getMap().getView();\n            this.bindView_(newView);\n        }\n        else if (!this.ovmap_.isRendered() &&\n            (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n            this.ovmap_.updateSize();\n        }\n    };\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.bindView_ = function (view) {\n        if (!this.view_) {\n            // Unless an explicit view definition was given, derive default from whatever main map uses.\n            var newView = new View({\n                projection: view.getProjection(),\n            });\n            this.ovmap_.setView(newView);\n        }\n        view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n        // Sync once with the new view\n        this.handleRotationChanged_();\n    };\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.unbindView_ = function (view) {\n        view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    };\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n    OverviewMap.prototype.handleRotationChanged_ = function () {\n        if (this.rotateWithView_) {\n            this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n        }\n    };\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n    OverviewMap.prototype.validateExtent_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n            // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n            return;\n        }\n        this.viewExtent_ = extent;\n        var ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n        var ovview = ovmap.getView();\n        var ovextent = ovview.calculateExtentInternal(ovmapSize);\n        var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n        var ovmapWidth = ovmapSize[0];\n        var ovmapHeight = ovmapSize[1];\n        if (boxWidth < ovmapWidth * MIN_RATIO ||\n            boxHeight < ovmapHeight * MIN_RATIO ||\n            boxWidth > ovmapWidth * MAX_RATIO ||\n            boxHeight > ovmapHeight * MAX_RATIO) {\n            this.resetExtent_();\n        }\n        else if (!containsExtent(ovextent, extent)) {\n            this.recenter_();\n        }\n    };\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n    OverviewMap.prototype.resetExtent_ = function () {\n        if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n            return;\n        }\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        var ovview = ovmap.getView();\n        // get how many times the current map overview could hold different\n        // box sizes using the min and max ratio, pick the step in the middle used\n        // to calculate the extent from the main map to set it to the overview map,\n        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n        scaleFromCenter(extent, ratio);\n        ovview.fitInternal(polygonFromExtent(extent));\n    };\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n    OverviewMap.prototype.recenter_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        ovview.setCenterInternal(view.getCenterInternal());\n    };\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n    OverviewMap.prototype.updateBox_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n        var overlay = this.boxOverlay_;\n        var box = this.boxOverlay_.getElement();\n        var center = view.getCenterInternal();\n        var resolution = view.getResolution();\n        var ovresolution = ovview.getResolution();\n        var width = (mapSize[0] * resolution) / ovresolution;\n        var height = (mapSize[1] * resolution) / ovresolution;\n        // set position using center coordinates\n        overlay.setPosition(center);\n        // set box size calculated from map extent size and overview map resolution\n        if (box) {\n            box.style.width = width + 'px';\n            box.style.height = height + 'px';\n            var transform = 'rotate(' + rotation + 'rad)';\n            box.style.transform = transform;\n        }\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n        if (this.ovmapPostrenderKey_) {\n            return;\n        }\n        this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n            delete this.ovmapPostrenderKey_;\n            this.updateBox_();\n        }, this);\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    OverviewMap.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        // manage overview map if it had not been rendered before and control\n        // is expanded\n        var ovmap = this.ovmap_;\n        if (!this.collapsed_) {\n            if (ovmap.isRendered()) {\n                this.viewExtent_ = undefined;\n                ovmap.render();\n                return;\n            }\n            ovmap.updateSize();\n            this.resetExtent_();\n            this.updateBoxAfterOvmapIsRendered_();\n        }\n    };\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (!collapsible && this.collapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsed = function (collapsed) {\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n    OverviewMap.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n    OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n        if (this.rotateWithView_ === rotateWithView) {\n            return;\n        }\n        this.rotateWithView_ = rotateWithView;\n        if (this.getMap().getView().getRotation() !== 0) {\n            if (this.rotateWithView_) {\n                this.handleRotationChanged_();\n            }\n            else {\n                this.ovmap_.getView().setRotation(0);\n            }\n            this.viewExtent_ = undefined;\n            this.validateExtent_();\n            this.updateBox_();\n        }\n    };\n    /**\n     * Return the overview map.\n     * @return {import(\"../PluggableMap.js\").default} Overview map.\n     * @api\n     */\n    OverviewMap.prototype.getOverviewMap = function () {\n        return this.ovmap_;\n    };\n    /**\n     * Update the overview map element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    OverviewMap.prototype.render = function (mapEvent) {\n        this.validateExtent_();\n        this.updateBox_();\n    };\n    return OverviewMap;\n}(Control));\nexport default OverviewMap;\n"]},"metadata":{},"sourceType":"module"}