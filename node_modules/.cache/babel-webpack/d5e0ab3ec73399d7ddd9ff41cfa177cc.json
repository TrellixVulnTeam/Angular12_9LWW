{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\n\nvar RegularShape = function (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n\n\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n\n    _this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n\n    _this.renderOptions_ = null;\n\n    _this.render();\n\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n\n\n  RegularShape.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAnchor = function () {\n    return this.anchor_;\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n\n\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n\n\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n\n\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    var image = this.canvas_[pixelRatio];\n\n    if (!image) {\n      var renderOptions = this.renderOptions_;\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n\n    return image;\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  RegularShape.prototype.getImageSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n\n\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n\n\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n\n\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n\n\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n\n\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n\n\n  RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    } // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n\n\n    var r1 = this.radius_;\n    var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n\n    if (r1 < r2) {\n      var tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n\n    var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    var alpha = 2 * Math.PI / points;\n    var a = r2 * Math.sin(alpha);\n    var b = Math.sqrt(r2 * r2 - a * a);\n    var d = r1 - b;\n    var e = Math.sqrt(a * a + d * d);\n    var miterRatio = e / a;\n\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    } // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n\n\n    var k = strokeWidth / 2 / miterRatio;\n    var l = strokeWidth / 2 * (d / e);\n    var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    var bevelAdd = maxr - r1;\n\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    } // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n\n\n    var aa = r1 * Math.sin(alpha);\n    var bb = Math.sqrt(r1 * r1 - aa * aa);\n    var dd = r2 - bb;\n    var ee = Math.sqrt(aa * aa + dd * dd);\n    var innerMiterRatio = ee / aa;\n\n    if (innerMiterRatio <= miterLimit) {\n      var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n\n    return bevelAdd * 2;\n  };\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n\n\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n\n      miterLimit = this.stroke_.getMiterLimit();\n\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    var size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n\n\n  RegularShape.prototype.render = function () {\n    this.renderOptions_ = this.createRenderOptions();\n    var size = this.renderOptions_.size;\n    var displacement = this.getDisplacement();\n    this.canvas_ = {};\n    this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n    this.size_ = [size, size];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n\n\n  RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio); // set origin to canvas center\n\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n\n\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    if (this.fill_) {\n      var color = this.fill_.getColor(); // determine if fill is transparent (or pattern or gradient)\n\n      var opacity = 0;\n\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n\n\n  RegularShape.prototype.createPath_ = function (context) {\n    var points = this.points_;\n    var radius = this.radius_;\n\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n\n      var startAngle = this.angle_ - Math.PI / 2;\n      var step = 2 * Math.PI / points;\n\n      for (var i = 0; i < points; i++) {\n        var angle0 = startAngle + i * step;\n        var radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n\n      context.closePath();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n\n\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n\n  return RegularShape;\n}(ImageStyle);\n\nexport default RegularShape;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/style/RegularShape.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","_super","options","_this","rotateWithView","undefined","opacity","rotation","scale","displacement","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","anchor_","size_","renderOptions_","render","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","isArray","slice","getDisplacement","setOpacity","getOpacity","getAnchor","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","size","draw_","canvas","getPixelRatio","getImageSize","getImageState","LOADED","getOrigin","getSize","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","sqrt","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/RegularShape\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /** @class */ (function (_super) {\n    __extends(RegularShape, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function RegularShape(options) {\n        var _this = this;\n        /**\n         * @type {boolean}\n         */\n        var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        _this = _super.call(this, {\n            opacity: 1,\n            rotateWithView: rotateWithView,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            scale: options.scale !== undefined ? options.scale : 1,\n            displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n        }) || this;\n        /**\n         * @private\n         * @type {Object<number, HTMLCanvasElement>}\n         */\n        _this.canvas_ = undefined;\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.hitDetectionCanvas_ = null;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        _this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.origin_ = [0, 0];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.points_ = options.points;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.radius_ =\n            options.radius !== undefined ? options.radius : options.radius1;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.radius2_ = options.radius2;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.angle_ = options.angle !== undefined ? options.angle : 0;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.anchor_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.size_ = null;\n        /**\n         * @private\n         * @type {RenderOptions}\n         */\n        _this.renderOptions_ = null;\n        _this.render();\n        return _this;\n    }\n    /**\n     * Clones the style.\n     * @return {RegularShape} The cloned style.\n     * @api\n     */\n    RegularShape.prototype.clone = function () {\n        var scale = this.getScale();\n        var style = new RegularShape({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            points: this.getPoints(),\n            radius: this.getRadius(),\n            radius2: this.getRadius2(),\n            angle: this.getAngle(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            displacement: this.getDisplacement().slice(),\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n    RegularShape.prototype.getAnchor = function () {\n        return this.anchor_;\n    };\n    /**\n     * Get the angle used in generating the shape.\n     * @return {number} Shape's rotation in radians.\n     * @api\n     */\n    RegularShape.prototype.getAngle = function () {\n        return this.angle_;\n    };\n    /**\n     * Get the fill style for the shape.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    RegularShape.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * @return {HTMLCanvasElement} Image element.\n     */\n    RegularShape.prototype.getHitDetectionImage = function () {\n        if (!this.hitDetectionCanvas_) {\n            this.createHitDetectionCanvas_(this.renderOptions_);\n        }\n        return this.hitDetectionCanvas_;\n    };\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n    RegularShape.prototype.getImage = function (pixelRatio) {\n        var image = this.canvas_[pixelRatio];\n        if (!image) {\n            var renderOptions = this.renderOptions_;\n            var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n            this.draw_(renderOptions, context, pixelRatio);\n            image = context.canvas;\n            this.canvas_[pixelRatio] = image;\n        }\n        return image;\n    };\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n    RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n        return pixelRatio;\n    };\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    RegularShape.prototype.getImageSize = function () {\n        return this.size_;\n    };\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    RegularShape.prototype.getImageState = function () {\n        return ImageState.LOADED;\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n    RegularShape.prototype.getOrigin = function () {\n        return this.origin_;\n    };\n    /**\n     * Get the number of points for generating the shape.\n     * @return {number} Number of points for stars and regular polygons.\n     * @api\n     */\n    RegularShape.prototype.getPoints = function () {\n        return this.points_;\n    };\n    /**\n     * Get the (primary) radius for the shape.\n     * @return {number} Radius.\n     * @api\n     */\n    RegularShape.prototype.getRadius = function () {\n        return this.radius_;\n    };\n    /**\n     * Get the secondary radius for the shape.\n     * @return {number|undefined} Radius2.\n     * @api\n     */\n    RegularShape.prototype.getRadius2 = function () {\n        return this.radius2_;\n    };\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @return {import(\"../size.js\").Size} Size.\n     * @api\n     */\n    RegularShape.prototype.getSize = function () {\n        return this.size_;\n    };\n    /**\n     * Get the stroke style for the shape.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    RegularShape.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.listenImageChange = function (listener) { };\n    /**\n     * Load not yet loaded URI.\n     */\n    RegularShape.prototype.load = function () { };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    RegularShape.prototype.unlistenImageChange = function (listener) { };\n    /**\n     * Calculate additional canvas size needed for the miter.\n     * @param {string} lineJoin Line join\n     * @param {number} strokeWidth Stroke width\n     * @param {number} miterLimit Miter limit\n     * @return {number} Additional canvas size needed\n     * @private\n     */\n    RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n        if (strokeWidth === 0 ||\n            this.points_ === Infinity ||\n            (lineJoin !== 'bevel' && lineJoin !== 'miter')) {\n            return strokeWidth;\n        }\n        // m  | ^\n        // i  | |\\                  .\n        // t >|  #\\\n        // e  | |\\ \\              .\n        // r      \\s\\\n        //      |  \\t\\          .                 .\n        //          \\r\\                      .   .\n        //      |    \\o\\      .          .  . . .\n        //          e \\k\\            .  .    . .\n        //      |      \\e\\  .    .  .       . .\n        //       d      \\ \\  .  .          . .\n        //      | _ _a_ _\\#  .            . .\n        //   r1          / `             . .\n        //      |                       . .\n        //       b     /               . .\n        //      |                     . .\n        //           / r2            . .\n        //      |                        .   .\n        //         /                           .   .\n        //      |α                                   .   .\n        //       /                                         .   .\n        //      ° center\n        var r1 = this.radius_;\n        var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n        if (r1 < r2) {\n            var tmp = r1;\n            r1 = r2;\n            r2 = tmp;\n        }\n        var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n        var alpha = (2 * Math.PI) / points;\n        var a = r2 * Math.sin(alpha);\n        var b = Math.sqrt(r2 * r2 - a * a);\n        var d = r1 - b;\n        var e = Math.sqrt(a * a + d * d);\n        var miterRatio = e / a;\n        if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n            return miterRatio * strokeWidth;\n        }\n        // Calculate the distnce from center to the stroke corner where\n        // it was cut short because of the miter limit.\n        //              l\n        //        ----+---- <= distance from center to here is maxr\n        //       /####|k ##\\\n        //      /#####^#####\\\n        //     /#### /+\\# s #\\\n        //    /### h/+++\\# t #\\\n        //   /### t/+++++\\# r #\\\n        //  /### a/+++++++\\# o #\\\n        // /### p/++ fill +\\# k #\\\n        ///#### /+++++^+++++\\# e #\\\n        //#####/+++++/+\\+++++\\#####\\\n        var k = strokeWidth / 2 / miterRatio;\n        var l = (strokeWidth / 2) * (d / e);\n        var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n        var bevelAdd = maxr - r1;\n        if (this.radius2_ === undefined || lineJoin === 'bevel') {\n            return bevelAdd * 2;\n        }\n        // If outer miter is over the miter limit the inner miter may reach through the\n        // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n        var aa = r1 * Math.sin(alpha);\n        var bb = Math.sqrt(r1 * r1 - aa * aa);\n        var dd = r2 - bb;\n        var ee = Math.sqrt(aa * aa + dd * dd);\n        var innerMiterRatio = ee / aa;\n        if (innerMiterRatio <= miterLimit) {\n            var innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n            return 2 * Math.max(bevelAdd, innerLength);\n        }\n        return bevelAdd * 2;\n    };\n    /**\n     * @return {RenderOptions}  The render options\n     * @protected\n     */\n    RegularShape.prototype.createRenderOptions = function () {\n        var lineJoin = defaultLineJoin;\n        var miterLimit = 0;\n        var lineDash = null;\n        var lineDashOffset = 0;\n        var strokeStyle;\n        var strokeWidth = 0;\n        if (this.stroke_) {\n            strokeStyle = this.stroke_.getColor();\n            if (strokeStyle === null) {\n                strokeStyle = defaultStrokeStyle;\n            }\n            strokeStyle = asColorLike(strokeStyle);\n            strokeWidth = this.stroke_.getWidth();\n            if (strokeWidth === undefined) {\n                strokeWidth = defaultLineWidth;\n            }\n            lineDash = this.stroke_.getLineDash();\n            lineDashOffset = this.stroke_.getLineDashOffset();\n            lineJoin = this.stroke_.getLineJoin();\n            if (lineJoin === undefined) {\n                lineJoin = defaultLineJoin;\n            }\n            miterLimit = this.stroke_.getMiterLimit();\n            if (miterLimit === undefined) {\n                miterLimit = defaultMiterLimit;\n            }\n        }\n        var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n        var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n        var size = Math.ceil(2 * maxRadius + add);\n        return {\n            strokeStyle: strokeStyle,\n            strokeWidth: strokeWidth,\n            size: size,\n            lineDash: lineDash,\n            lineDashOffset: lineDashOffset,\n            lineJoin: lineJoin,\n            miterLimit: miterLimit,\n        };\n    };\n    /**\n     * @protected\n     */\n    RegularShape.prototype.render = function () {\n        this.renderOptions_ = this.createRenderOptions();\n        var size = this.renderOptions_.size;\n        var displacement = this.getDisplacement();\n        this.canvas_ = {};\n        this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n        this.size_ = [size, size];\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The rendering context.\n     * @param {number} pixelRatio The pixel ratio.\n     */\n    RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n        context.scale(pixelRatio, pixelRatio);\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            if (color === null) {\n                color = defaultFillStyle;\n            }\n            context.fillStyle = asColorLike(color);\n            context.fill();\n        }\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (context.setLineDash && renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     */\n    RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n        if (this.fill_) {\n            var color = this.fill_.getColor();\n            // determine if fill is transparent (or pattern or gradient)\n            var opacity = 0;\n            if (typeof color === 'string') {\n                color = asArray(color);\n            }\n            if (color === null) {\n                opacity = 1;\n            }\n            else if (Array.isArray(color)) {\n                opacity = color.length === 4 ? color[3] : 1;\n            }\n            if (opacity === 0) {\n                // if a transparent fill style is set, create an extra hit-detection image\n                // with a default fill style\n                var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n                this.hitDetectionCanvas_ = context.canvas;\n                this.drawHitDetectionCanvas_(renderOptions, context);\n            }\n        }\n        if (!this.hitDetectionCanvas_) {\n            this.hitDetectionCanvas_ = this.getImage(1);\n        }\n    };\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} context The context to draw in.\n     */\n    RegularShape.prototype.createPath_ = function (context) {\n        var points = this.points_;\n        var radius = this.radius_;\n        if (points === Infinity) {\n            context.arc(0, 0, radius, 0, 2 * Math.PI);\n        }\n        else {\n            var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n            if (this.radius2_ !== undefined) {\n                points *= 2;\n            }\n            var startAngle = this.angle_ - Math.PI / 2;\n            var step = (2 * Math.PI) / points;\n            for (var i = 0; i < points; i++) {\n                var angle0 = startAngle + i * step;\n                var radiusC = i % 2 === 0 ? radius : radius2;\n                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n            }\n            context.closePath();\n        }\n    };\n    /**\n     * @private\n     * @param {RenderOptions} renderOptions Render options.\n     * @param {CanvasRenderingContext2D} context The context.\n     */\n    RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        context.fillStyle = defaultFillStyle;\n        context.fill();\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    };\n    return RegularShape;\n}(ImageStyle));\nexport default RegularShape;\n"]},"metadata":{},"sourceType":"module"}