{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler = function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js"],"names":["__awaiter","__generator","StringUtils","ClientAuthError","AuthorityFactory","BrowserAuthError","TemporaryCacheKeys","InteractionHandler","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","authModule","browserStorage","prototype","handleCodeResponse","locationHash","state","authority","networkModule","stateKey","requestState","authCodeResponse","nonceKey","cachedNonce","cachedCcsCred","tokenResponse","_a","label","verbose","isEmpty","createEmptyHashError","generateStateKey","getTemporaryCache","createStateNotFoundError","handleFragmentResponse","generateNonceKey","code","cloud_instance_host_name","updateTokenEndpointAuthority","sent","nonce","undefined","client_info","clientInfo","checkCcsCredentials","ccsCredential","acquireToken","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","cloudInstanceAuthority","tenant","createDiscoveredInstance","options","updateAuthority","CCS_CREDENTIAL","JSON","parse","e","logger","error","errorPii"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nvar InteractionHandler = /** @class */ (function () {\r\n    function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.browserRequestLogger = browserRequestLogger;\r\n    }\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n                        // Check that location hash isn't empty.\r\n                        if (StringUtils.isEmpty(locationHash)) {\r\n                            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n                        }\r\n                        stateKey = this.browserStorage.generateStateKey(state);\r\n                        requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                        if (!requestState) {\r\n                            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                        }\r\n                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n                        nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n                        // Assign code to request\r\n                        this.authCodeRequest.code = authCodeResponse.code;\r\n                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        authCodeResponse.nonce = cachedNonce || undefined;\r\n                        authCodeResponse.state = requestState;\r\n                        // Add CCS parameters if available\r\n                        if (authCodeResponse.client_info) {\r\n                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n                        }\r\n                        else {\r\n                            cachedCcsCred = this.checkCcsCredentials();\r\n                            if (cachedCcsCred) {\r\n                                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\r\n                    case 3:\r\n                        tokenResponse = _a.sent();\r\n                        this.browserStorage.cleanRequestByState(state);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname\r\n     * @param authority\r\n     * @param networkModule\r\n     */\r\n    InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cloudInstanceAuthorityUri, cloudInstanceAuthority;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\r\n                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\r\n                    case 1:\r\n                        cloudInstanceAuthority = _a.sent();\r\n                        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    InteractionHandler.prototype.checkCcsCredentials = function () {\r\n        // Look up ccs credential in temp cache\r\n        var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred);\r\n            }\r\n            catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return InteractionHandler;\r\n}());\n\nexport { InteractionHandler };\n"]},"metadata":{},"sourceType":"module"}