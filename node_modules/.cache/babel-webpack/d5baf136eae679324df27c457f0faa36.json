{"ast":null,"code":"/**\n * @module ol/format/XML\n */\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\n\nvar XML = function () {\n  function XML() {}\n  /**\n   * Read the source document.\n   *\n   * @param {Document|Element|string} source The XML source.\n   * @return {Object} An object representing the source.\n   * @api\n   */\n\n\n  XML.prototype.read = function (source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFromDocument(source);\n    } else {\n      return this.readFromNode(source);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @return {Object} Object\n   */\n\n\n  XML.prototype.readFromDocument = function (doc) {\n    for (var n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFromNode(n);\n      }\n    }\n\n    return null;\n  };\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @return {Object} Object\n   */\n\n\n  XML.prototype.readFromNode = function (node) {};\n\n  return XML;\n}();\n\nexport default XML;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/format/XML.js"],"names":["isDocument","parse","XML","prototype","read","source","doc","readFromDocument","readFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","node"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,UAAT,EAAqBC,KAArB,QAAkC,WAAlC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG,GAAkB,YAAY;AACjC,WAASA,GAAT,GAAe,CACd;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,GAAG,CAACC,SAAJ,CAAcC,IAAd,GAAqB,UAAUC,MAAV,EAAkB;AACnC,QAAI,CAACA,MAAL,EAAa;AACT,aAAO,IAAP;AACH,KAFD,MAGK,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACjC,UAAIC,GAAG,GAAGL,KAAK,CAACI,MAAD,CAAf;AACA,aAAO,KAAKE,gBAAL,CAAsBD,GAAtB,CAAP;AACH,KAHI,MAIA,IAAIN,UAAU,CAACK,MAAD,CAAd,EAAwB;AACzB,aAAO,KAAKE,gBAAL,CAA+CF,MAA/C,CAAP;AACH,KAFI,MAGA;AACD,aAAO,KAAKG,YAAL,CAA0CH,MAA1C,CAAP;AACH;AACJ,GAdD;AAeA;AACJ;AACA;AACA;;;AACIH,EAAAA,GAAG,CAACC,SAAJ,CAAcI,gBAAd,GAAiC,UAAUD,GAAV,EAAe;AAC5C,SAAK,IAAIG,CAAC,GAAGH,GAAG,CAACI,UAAjB,EAA6BD,CAA7B,EAAgCA,CAAC,GAAGA,CAAC,CAACE,WAAtC,EAAmD;AAC/C,UAAIF,CAAC,CAACG,QAAF,IAAcC,IAAI,CAACC,YAAvB,EAAqC;AACjC,eAAO,KAAKN,YAAL,CAA0CC,CAA1C,CAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,GAAG,CAACC,SAAJ,CAAcK,YAAd,GAA6B,UAAUO,IAAV,EAAgB,CAAG,CAAhD;;AACA,SAAOb,GAAP;AACH,CA5CwB,EAAzB;;AA6CA,eAAeA,GAAf","sourcesContent":["/**\n * @module ol/format/XML\n */\nimport { isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\nvar XML = /** @class */ (function () {\n    function XML() {\n    }\n    /**\n     * Read the source document.\n     *\n     * @param {Document|Element|string} source The XML source.\n     * @return {Object} An object representing the source.\n     * @api\n     */\n    XML.prototype.read = function (source) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readFromDocument(doc);\n        }\n        else if (isDocument(source)) {\n            return this.readFromDocument(/** @type {Document} */ (source));\n        }\n        else {\n            return this.readFromNode(/** @type {Element} */ (source));\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromDocument = function (doc) {\n        for (var n = doc.firstChild; n; n = n.nextSibling) {\n            if (n.nodeType == Node.ELEMENT_NODE) {\n                return this.readFromNode(/** @type {Element} */ (n));\n            }\n        }\n        return null;\n    };\n    /**\n     * @abstract\n     * @param {Element} node Node.\n     * @return {Object} Object\n     */\n    XML.prototype.readFromNode = function (node) { };\n    return XML;\n}());\nexport default XML;\n"]},"metadata":{},"sourceType":"module"}