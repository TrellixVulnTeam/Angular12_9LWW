{"ast":null,"code":"import { IStorageStrategy } from './IStorageStrategy';\nimport { GlobalCacheConfig } from '.';\n/**\n * @deprecated Use {@link LocalStorageStrategy} instead.\n */\n\nexport class DOMStorageStrategy extends IStorageStrategy {\n  constructor() {\n    super();\n    this.masterCacheKey = GlobalCacheConfig.globalCacheKey;\n\n    if (typeof localStorage == 'undefined') {\n      throw new Error('Platform not supported.');\n    }\n  }\n\n  add(cachePair, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (!allCachedData[cacheKey]) {\n      allCachedData[cacheKey] = [];\n    }\n\n    allCachedData[cacheKey].push(cachePair);\n    this.storeRawData(allCachedData);\n  }\n\n  addMany(cachePairs, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (!allCachedData[cacheKey]) {\n      allCachedData[cacheKey] = [];\n    }\n\n    allCachedData[cacheKey] = cachePairs;\n    this.storeRawData(allCachedData);\n  }\n\n  getAll(cacheKey) {\n    return this.getRawData()[cacheKey] || [];\n  }\n\n  removeAtIndex(index, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].splice(index, 1);\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  remove(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].splice(index, 1);\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  updateAtIndex(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n      allCachedData[cacheKey][index] = entity;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  update(index, entity, cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n      allCachedData[cacheKey][index] = entity;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  removeAll(cacheKey) {\n    const allCachedData = this.getRawData();\n\n    if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n      allCachedData[cacheKey].length = 0;\n    }\n\n    this.storeRawData(allCachedData);\n  }\n\n  getRawData() {\n    const data = localStorage.getItem(this.masterCacheKey);\n\n    try {\n      return JSON.parse(data) || {};\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  storeRawData(data) {\n    localStorage.setItem(this.masterCacheKey, JSON.stringify(data));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ts-cacheable/dist/esm2015/common/DOMStorageStrategy.js"],"names":["IStorageStrategy","GlobalCacheConfig","DOMStorageStrategy","constructor","masterCacheKey","globalCacheKey","localStorage","Error","add","cachePair","cacheKey","allCachedData","getRawData","push","storeRawData","addMany","cachePairs","getAll","removeAtIndex","index","length","splice","remove","entity","updateAtIndex","update","removeAll","data","getItem","JSON","parse","error","setItem","stringify"],"mappings":"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","sourcesContent":["import { IStorageStrategy } from './IStorageStrategy';\nimport { GlobalCacheConfig } from '.';\n/**\n * @deprecated Use {@link LocalStorageStrategy} instead.\n */\nexport class DOMStorageStrategy extends IStorageStrategy {\n    constructor() {\n        super();\n        this.masterCacheKey = GlobalCacheConfig.globalCacheKey;\n        if (typeof localStorage == 'undefined') {\n            throw new Error('Platform not supported.');\n        }\n    }\n    add(cachePair, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (!allCachedData[cacheKey]) {\n            allCachedData[cacheKey] = [];\n        }\n        allCachedData[cacheKey].push(cachePair);\n        this.storeRawData(allCachedData);\n    }\n    ;\n    addMany(cachePairs, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (!allCachedData[cacheKey]) {\n            allCachedData[cacheKey] = [];\n        }\n        allCachedData[cacheKey] = cachePairs;\n        this.storeRawData(allCachedData);\n    }\n    ;\n    getAll(cacheKey) {\n        return this.getRawData()[cacheKey] || [];\n    }\n    ;\n    removeAtIndex(index, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n            allCachedData[cacheKey].splice(index, 1);\n        }\n        this.storeRawData(allCachedData);\n    }\n    remove(index, entity, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n            allCachedData[cacheKey].splice(index, 1);\n        }\n        this.storeRawData(allCachedData);\n    }\n    updateAtIndex(index, entity, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n            allCachedData[cacheKey][index] = entity;\n        }\n        this.storeRawData(allCachedData);\n    }\n    update(index, entity, cacheKey) {\n        const allCachedData = this.getRawData();\n        if (allCachedData[cacheKey] && allCachedData[cacheKey][index]) {\n            allCachedData[cacheKey][index] = entity;\n        }\n        this.storeRawData(allCachedData);\n    }\n    removeAll(cacheKey) {\n        const allCachedData = this.getRawData();\n        if (allCachedData[cacheKey] && allCachedData[cacheKey].length) {\n            allCachedData[cacheKey].length = 0;\n        }\n        this.storeRawData(allCachedData);\n    }\n    getRawData() {\n        const data = localStorage.getItem(this.masterCacheKey);\n        try {\n            return JSON.parse(data) || {};\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n    storeRawData(data) {\n        localStorage.setItem(this.masterCacheKey, JSON.stringify(data));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}