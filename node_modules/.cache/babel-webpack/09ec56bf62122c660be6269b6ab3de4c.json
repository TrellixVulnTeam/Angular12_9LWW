{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Control\n */\n\n\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\n\nvar Control = function (_super) {\n  __extends(Control, _super);\n  /**\n   * @param {Options} options Control options.\n   */\n\n\n  function Control(options) {\n    var _this = _super.call(this) || this;\n\n    var element = options.element;\n\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n\n    _this.element = element ? element : null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n\n    _this.target_ = null;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default}\n     */\n\n    _this.map_ = null;\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n\n    _this.listenerKeys = [];\n\n    if (options.render) {\n      _this.render = options.render;\n    }\n\n    if (options.target) {\n      _this.setTarget(options.target);\n    }\n\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  Control.prototype.disposeInternal = function () {\n    removeNode(this.element);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../PluggableMap.js\").default|undefined} Map.\n   * @api\n   */\n\n\n  Control.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} [map] Map.\n   * @api\n   */\n\n\n  Control.prototype.setMap = function (map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n\n    if (this.map_) {\n      var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n\n      map.render();\n    }\n  };\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n\n\n  Control.prototype.render = function (mapEvent) {};\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n\n\n  Control.prototype.setTarget = function (target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  };\n\n  return Control;\n}(BaseObject);\n\nexport default Control;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/control/Control.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","MapEventType","VOID","listen","unlistenByKey","removeNode","Control","_super","options","_this","element","target","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","disposeInternal","getMap","setMap","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nvar Control = /** @class */ (function (_super) {\n    __extends(Control, _super);\n    /**\n     * @param {Options} options Control options.\n     */\n    function Control(options) {\n        var _this = _super.call(this) || this;\n        var element = options.element;\n        if (element && !options.target && !element.style.pointerEvents) {\n            element.style.pointerEvents = 'auto';\n        }\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = element ? element : null;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.target_ = null;\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").default}\n         */\n        _this.map_ = null;\n        /**\n         * @protected\n         * @type {!Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.listenerKeys = [];\n        if (options.render) {\n            _this.render = options.render;\n        }\n        if (options.target) {\n            _this.setTarget(options.target);\n        }\n        return _this;\n    }\n    /**\n     * Clean up.\n     */\n    Control.prototype.disposeInternal = function () {\n        removeNode(this.element);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * Get the map associated with this control.\n     * @return {import(\"../PluggableMap.js\").default|undefined} Map.\n     * @api\n     */\n    Control.prototype.getMap = function () {\n        return this.map_;\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} [map] Map.\n     * @api\n     */\n    Control.prototype.setMap = function (map) {\n        if (this.map_) {\n            removeNode(this.element);\n        }\n        for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n            unlistenByKey(this.listenerKeys[i]);\n        }\n        this.listenerKeys.length = 0;\n        this.map_ = map;\n        if (this.map_) {\n            var target = this.target_\n                ? this.target_\n                : map.getOverlayContainerStopEvent();\n            target.appendChild(this.element);\n            if (this.render !== VOID) {\n                this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n            }\n            map.render();\n        }\n    };\n    /**\n     * Renders the control.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @api\n     */\n    Control.prototype.render = function (mapEvent) { };\n    /**\n     * This function is used to set a target element for the control. It has no\n     * effect if it is called after the control has been added to the map (i.e.\n     * after `setMap` is called on the control). If no `target` is set in the\n     * options passed to the control constructor and if `setTarget` is not called\n     * then the control is added to the map's overlay container.\n     * @param {HTMLElement|string} target Target.\n     * @api\n     */\n    Control.prototype.setTarget = function (target) {\n        this.target_ =\n            typeof target === 'string' ? document.getElementById(target) : target;\n    };\n    return Control;\n}(BaseObject));\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}