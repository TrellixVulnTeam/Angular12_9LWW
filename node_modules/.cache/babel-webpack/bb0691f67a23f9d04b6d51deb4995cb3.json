{"ast":null,"code":"import { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nlet MatRecycleRows = /*#__PURE__*/(() => {\n  class MatRecycleRows {}\n\n  MatRecycleRows.ɵfac = function MatRecycleRows_Factory(t) {\n    return new (t || MatRecycleRows)();\n  };\n\n  MatRecycleRows.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatRecycleRows,\n    selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }])]\n  });\n  return MatRecycleRows;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nlet MatTable = /*#__PURE__*/(() => {\n  class MatTable extends CdkTable {\n    constructor() {\n      super(...arguments);\n      /** Overrides the sticky CSS class set by the `CdkTable`. */\n\n      this.stickyCssClass = 'mat-table-sticky';\n      /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n\n      this.needsPositionStickyOnElement = false;\n    }\n\n  }\n\n  MatTable.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTable_BaseFactory;\n    return function MatTable_Factory(t) {\n      return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable);\n    };\n  }();\n\n  MatTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTable,\n    selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n    hostAttrs: [1, \"mat-table\"],\n    hostVars: 2,\n    hostBindings: function MatTable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n      }\n    },\n    exportAs: [\"matTable\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: CdkTable,\n      useExisting: MatTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatTable\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 0,\n    consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n    template: function MatTable_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n      }\n    },\n    directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.NoDataRowOutlet, ɵngcc1.FooterRowOutlet],\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"],\n    encapsulation: 2\n  });\n  return MatTable;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nlet MatCellDef = /*#__PURE__*/(() => {\n  class MatCellDef extends CdkCellDef {}\n\n  MatCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatCellDef_BaseFactory;\n    return function MatCellDef_Factory(t) {\n      return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef);\n    };\n  }();\n\n  MatCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatCellDef,\n    selectors: [[\"\", \"matCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nlet MatHeaderCellDef = /*#__PURE__*/(() => {\n  class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n  MatHeaderCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderCellDef_BaseFactory;\n    return function MatHeaderCellDef_Factory(t) {\n      return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef);\n    };\n  }();\n\n  MatHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderCellDef,\n    selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nlet MatFooterCellDef = /*#__PURE__*/(() => {\n  class MatFooterCellDef extends CdkFooterCellDef {}\n\n  MatFooterCellDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterCellDef_BaseFactory;\n    return function MatFooterCellDef_Factory(t) {\n      return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef);\n    };\n  }();\n\n  MatFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterCellDef,\n    selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterCellDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n\n\nlet MatColumnDef = /*#__PURE__*/(() => {\n  class MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n      return this._name;\n    }\n\n    set name(name) {\n      this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n\n\n    _updateColumnCssClassName() {\n      super._updateColumnCssClassName();\n\n      this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n\n  }\n\n  MatColumnDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatColumnDef_BaseFactory;\n    return function MatColumnDef_Factory(t) {\n      return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef);\n    };\n  }();\n\n  MatColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatColumnDef,\n    selectors: [[\"\", \"matColumnDef\", \"\"]],\n    inputs: {\n      sticky: \"sticky\",\n      name: [\"matColumnDef\", \"name\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatColumnDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatColumnDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header cell template container that adds the right classes and role. */\n\n\nlet MatHeaderCell = /*#__PURE__*/(() => {\n  class MatHeaderCell extends CdkHeaderCell {}\n\n  MatHeaderCell.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderCell_BaseFactory;\n    return function MatHeaderCell_Factory(t) {\n      return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell);\n    };\n  }();\n\n  MatHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderCell,\n    selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n    hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nlet MatFooterCell = /*#__PURE__*/(() => {\n  class MatFooterCell extends CdkFooterCell {}\n\n  MatFooterCell.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterCell_BaseFactory;\n    return function MatFooterCell_Factory(t) {\n      return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell);\n    };\n  }();\n\n  MatFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterCell,\n    selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nlet MatCell = /*#__PURE__*/(() => {\n  class MatCell extends CdkCell {}\n\n  MatCell.ɵfac = /*@__PURE__*/function () {\n    let ɵMatCell_BaseFactory;\n    return function MatCell_Factory(t) {\n      return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell);\n    };\n  }();\n\n  MatCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatCell,\n    selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n    hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatCell;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nlet MatHeaderRowDef = /*#__PURE__*/(() => {\n  class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n  MatHeaderRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderRowDef_BaseFactory;\n    return function MatHeaderRowDef_Factory(t) {\n      return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef);\n    };\n  }();\n\n  MatHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatHeaderRowDef,\n    selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matHeaderRowDef\", \"columns\"],\n      sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatHeaderRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nlet MatFooterRowDef = /*#__PURE__*/(() => {\n  class MatFooterRowDef extends CdkFooterRowDef {}\n\n  MatFooterRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterRowDef_BaseFactory;\n    return function MatFooterRowDef_Factory(t) {\n      return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef);\n    };\n  }();\n\n  MatFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatFooterRowDef,\n    selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matFooterRowDef\", \"columns\"],\n      sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatFooterRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nlet MatRowDef = /*#__PURE__*/(() => {\n  class MatRowDef extends CdkRowDef {}\n\n  MatRowDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatRowDef_BaseFactory;\n    return function MatRowDef_Factory(t) {\n      return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef);\n    };\n  }();\n\n  MatRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatRowDef,\n    selectors: [[\"\", \"matRowDef\", \"\"]],\n    inputs: {\n      columns: [\"matRowDefColumns\", \"columns\"],\n      when: [\"matRowDefWhen\", \"when\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRowDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nlet MatHeaderRow = /*#__PURE__*/(() => {\n  class MatHeaderRow extends CdkHeaderRow {}\n\n  MatHeaderRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatHeaderRow_BaseFactory;\n    return function MatHeaderRow_Factory(t) {\n      return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow);\n    };\n  }();\n\n  MatHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatHeaderRow,\n    selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n    exportAs: [\"matHeaderRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatHeaderRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatHeaderRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nlet MatFooterRow = /*#__PURE__*/(() => {\n  class MatFooterRow extends CdkFooterRow {}\n\n  MatFooterRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatFooterRow_BaseFactory;\n    return function MatFooterRow_Factory(t) {\n      return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow);\n    };\n  }();\n\n  MatFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatFooterRow,\n    selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n    exportAs: [\"matFooterRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatFooterRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatFooterRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nlet MatRow = /*#__PURE__*/(() => {\n  class MatRow extends CdkRow {}\n\n  MatRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatRow_BaseFactory;\n    return function MatRow_Factory(t) {\n      return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow);\n    };\n  }();\n\n  MatRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatRow,\n    selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n    hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n    exportAs: [\"matRow\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkCellOutlet\", \"\"]],\n    template: function MatRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [ɵngcc1.CdkCellOutlet],\n    encapsulation: 2\n  });\n  return MatRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nlet MatNoDataRow = /*#__PURE__*/(() => {\n  class MatNoDataRow extends CdkNoDataRow {}\n\n  MatNoDataRow.ɵfac = /*@__PURE__*/function () {\n    let ɵMatNoDataRow_BaseFactory;\n    return function MatNoDataRow_Factory(t) {\n      return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow);\n    };\n  }();\n\n  MatNoDataRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatNoDataRow,\n    selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkNoDataRow,\n      useExisting: MatNoDataRow\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNoDataRow;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nlet MatTextColumn = /*#__PURE__*/(() => {\n  class MatTextColumn extends CdkTextColumn {}\n\n  MatTextColumn.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTextColumn_BaseFactory;\n    return function MatTextColumn_Factory(t) {\n      return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn);\n    };\n  }();\n\n  MatTextColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTextColumn,\n    selectors: [[\"mat-text-column\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n    template: function MatTextColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n      }\n    },\n    directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell],\n    encapsulation: 2\n  });\n  return MatTextColumn;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EXPORTED_DECLARATIONS = [// Table\nMatTable, MatRecycleRows, // Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, // Cell directives\nMatHeaderCell, MatCell, MatFooterCell, // Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\nlet MatTableModule = /*#__PURE__*/(() => {\n  class MatTableModule {}\n\n  MatTableModule.ɵfac = function MatTableModule_Factory(t) {\n    return new (t || MatTableModule)();\n  };\n\n  MatTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTableModule\n  });\n  MatTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CdkTableModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTableModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, {\n    declarations: function () {\n      return [MatTable, MatRecycleRows, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n    },\n    imports: function () {\n      return [CdkTableModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatTable, MatRecycleRows, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\n\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\n\nclass _MatTableDataSource extends DataSource {\n  constructor(initialData = []) {\n    super();\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n\n    this._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n\n    this._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n\n    this._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n\n    this._renderChangesSubscription = null;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n\n    this.sortingDataAccessor = (data, sortHeaderId) => {\n      const value = data[sortHeaderId];\n\n      if (_isNumberValue(value)) {\n        const numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n\n\n    this.sortData = (data, sort) => {\n      const active = sort.active;\n      const direction = sort.direction;\n\n      if (!active || direction == '') {\n        return data;\n      }\n\n      return data.sort((a, b) => {\n        let valueA = this.sortingDataAccessor(a, active);\n        let valueB = this.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n\n\n        let comparatorResult = 0;\n\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n\n\n    this.filterPredicate = (data, filter) => {\n      // Transform the data into a lowercase string of all property values.\n      const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.\n\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n\n    this._data = new BehaviorSubject(initialData);\n\n    this._updateChangeSubscription();\n  }\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data) {\n    this._data.next(data); // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n\n\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n\n\n  get filter() {\n    return this._filter.value;\n  }\n\n  set filter(filter) {\n    this._filter.next(filter); // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n\n\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n\n\n  get sort() {\n    return this._sort;\n  }\n\n  set sort(sort) {\n    this._sort = sort;\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n\n\n  get paginator() {\n    return this._paginator;\n  }\n\n  set paginator(paginator) {\n    this._paginator = paginator;\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n\n\n  _updateChangeSubscription() {\n    var _a; // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n\n\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    const pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n    const dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.\n\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data))); // Watch for filtered data or sort changes to provide an ordered set of data.\n\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data))); // Watch for ordered data or page changes to provide a paged set of data.\n\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data))); // Watched for paged data changes and send the result to the table to render.\n\n    (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n\n\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n\n\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n\n\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n\n\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) {\n        return;\n      }\n\n      paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.\n\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n\n\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n\n\n  disconnect() {\n    var _a;\n\n    (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\n\n\nclass MatTableDataSource extends _MatTableDataSource {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/table.js"],"names":["Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","CdkTable","CDK_TABLE_TEMPLATE","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","STICKY_POSITIONING_LISTENER","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CDK_ROW_TEMPLATE","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","DataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","MatCommonModule","_isNumberValue","BehaviorSubject","Subject","merge","of","combineLatest","map","ɵngcc0","ɵngcc1","_c0","_c1","MatTextColumn_th_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","MatTextColumn_td_2_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","MatRecycleRows","ɵfac","MatRecycleRows_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","provide","useClass","ngDevMode","MatTable","constructor","arguments","stickyCssClass","needsPositionStickyOnElement","ɵMatTable_BaseFactory","MatTable_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatTable_HostBindings","ɵɵclassProp","fixedLayout","exportAs","useExisting","useValue","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatTable_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵelementContainer","directives","HeaderRowOutlet","DataRowOutlet","NoDataRowOutlet","FooterRowOutlet","styles","encapsulation","MatCellDef","ɵMatCellDef_BaseFactory","MatCellDef_Factory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatHeaderCellDef_Factory","MatFooterCellDef","ɵMatFooterCellDef_BaseFactory","MatFooterCellDef_Factory","MatColumnDef","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","ɵMatColumnDef_BaseFactory","MatColumnDef_Factory","inputs","sticky","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatHeaderCell_Factory","MatFooterCell","ɵMatFooterCell_BaseFactory","MatFooterCell_Factory","MatCell","ɵMatCell_BaseFactory","MatCell_Factory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatHeaderRowDef_Factory","columns","MatFooterRowDef","ɵMatFooterRowDef_BaseFactory","MatFooterRowDef_Factory","MatRowDef","ɵMatRowDef_BaseFactory","MatRowDef_Factory","when","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatHeaderRow_Factory","MatHeaderRow_Template","CdkCellOutlet","MatFooterRow","ɵMatFooterRow_BaseFactory","MatFooterRow_Factory","MatFooterRow_Template","MatRow","ɵMatRow_BaseFactory","MatRow_Factory","MatRow_Template","MatNoDataRow","ɵMatNoDataRow_BaseFactory","MatNoDataRow_Factory","MatTextColumn","ɵMatTextColumn_BaseFactory","MatTextColumn_Factory","MatTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","MatTableModule","MatTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MAX_SAFE_INTEGER","_MatTableDataSource","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","data","sortHeaderId","value","numberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","filter","dataStr","Object","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","trim","indexOf","_data","_updateChangeSubscription","next","_filterData","_sort","paginator","_paginator","_a","sortChange","initialized","pageChange","page","dataStream","filteredData","pipe","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect","MatTableDataSource"],"mappings":"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","sourcesContent":["import { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction MatTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nclass MatRecycleRows {\n}\nMatRecycleRows.ɵfac = function MatRecycleRows_Factory(t) { return new (t || MatRecycleRows)(); };\nMatRecycleRows.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRecycleRows, selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRecycleRows, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatTable.ɵfac = /*@__PURE__*/ function () { let ɵMatTable_BaseFactory; return function MatTable_Factory(t) { return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable); }; }();\nMatTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTable, selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]], hostAttrs: [1, \"mat-table\"], hostVars: 2, hostBindings: function MatTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n    } }, exportAs: [\"matTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function MatTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.NoDataRowOutlet, ɵngcc1.FooterRowOutlet], styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTable, [{\n        type: Component,\n        args: [{\n                selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'mat-table',\n                    '[class.mat-table-fixed-layout]': 'fixedLayout'\n                },\n                providers: [\n                    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                    //  is only included in the build if used.\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: CdkTable, useExisting: MatTable },\n                    { provide: CDK_TABLE, useExisting: MatTable },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatCellDef_BaseFactory; return function MatCellDef_Factory(t) { return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef); }; }();\nMatCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCellDef, selectors: [[\"\", \"matCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: MatCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderCellDef_BaseFactory; return function MatHeaderCellDef_Factory(t) { return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef); }; }();\nMatHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCellDef, selectors: [[\"\", \"matHeaderCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterCellDef_BaseFactory; return function MatFooterCellDef_Factory(t) { return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef); }; }();\nMatFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterCellDef, selectors: [[\"\", \"matFooterCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatColumnDef.ɵfac = /*@__PURE__*/ function () { let ɵMatColumnDef_BaseFactory; return function MatColumnDef_Factory(t) { return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef); }; }();\nMatColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatColumnDef, selectors: [[\"\", \"matColumnDef\", \"\"]], inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matColumnDef]',\n                inputs: ['sticky'],\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['matColumnDef']\n        }] }); })();\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n}\nMatHeaderCell.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderCell_BaseFactory; return function MatHeaderCell_Factory(t) { return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell); }; }();\nMatHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCell, selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], null, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n}\nMatFooterCell.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterCell_BaseFactory; return function MatFooterCell_Factory(t) { return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell); }; }();\nMatFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterCell, selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], null, null); })();\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n}\nMatCell.ɵfac = /*@__PURE__*/ function () { let ɵMatCell_BaseFactory; return function MatCell_Factory(t) { return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell); }; }();\nMatCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCell, selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderRowDef_BaseFactory; return function MatHeaderRowDef_Factory(t) { return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef); }; }();\nMatHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderRowDef, selectors: [[\"\", \"matHeaderRowDef\", \"\"]], inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n            }]\n    }], null, null); })();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterRowDef_BaseFactory; return function MatFooterRowDef_Factory(t) { return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef); }; }();\nMatFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterRowDef, selectors: [[\"\", \"matFooterRowDef\", \"\"]], inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n            }]\n    }], null, null); })();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatRowDef_BaseFactory; return function MatRowDef_Factory(t) { return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef); }; }();\nMatRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRowDef, selectors: [[\"\", \"matRowDef\", \"\"]], inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: MatRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n            }]\n    }], null, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderRow_BaseFactory; return function MatHeaderRow_Factory(t) { return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow); }; }();\nMatHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatHeaderRow, selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"], exportAs: [\"matHeaderRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterRow_BaseFactory; return function MatFooterRow_Factory(t) { return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow); }; }();\nMatFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatFooterRow, selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"], exportAs: [\"matFooterRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRow, useExisting: MatFooterRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }]\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n}\nMatRow.ɵfac = /*@__PURE__*/ function () { let ɵMatRow_BaseFactory; return function MatRow_Factory(t) { return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow); }; }();\nMatRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRow, selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-row\"], exportAs: [\"matRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRow, useExisting: MatRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }]\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n}\nMatNoDataRow.ɵfac = /*@__PURE__*/ function () { let ɵMatNoDataRow_BaseFactory; return function MatNoDataRow_Factory(t) { return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow); }; }();\nMatNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNoDataRow, selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matNoDataRow]',\n                providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.ɵfac = /*@__PURE__*/ function () { let ɵMatTextColumn_BaseFactory; return function MatTextColumn_Factory(t) { return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn); }; }();\nMatTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTextColumn, selectors: [[\"mat-text-column\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 0, consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]], template: function MatTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.ɵfac = function MatTableModule_Factory(t) { return new (t || MatTableModule)(); };\nMatTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTableModule });\nMatTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CdkTableModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CdkTableModule,\n                    MatCommonModule,\n                ],\n                exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, { declarations: function () { return [MatTable, MatRecycleRows, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; }, imports: function () { return [CdkTableModule,\n        MatCommonModule]; }, exports: function () { return [MatCommonModule, MatTable, MatRecycleRows, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() { return this._data.value; }\n    set data(data) {\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() { return this._filter.value; }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() { return this._sort; }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() { return this._paginator; }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        var _a;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort ?\n            merge(this._sort.sortChange, this._sort.initialized) :\n            of(null);\n        const pageChange = this._paginator ?\n            merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n            of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData = (this.filter == null || this.filter === '') ? data :\n            data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        var _a;\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n\n"]},"metadata":{},"sourceType":"module"}