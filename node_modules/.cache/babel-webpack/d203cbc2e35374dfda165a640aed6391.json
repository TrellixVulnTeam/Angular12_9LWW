{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\n\nvar ClientAuthError = function (_super) {\n  __extends(ClientAuthError, _super);\n\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n\n\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n\n\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n\n\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n\n\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n\n\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n\n\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n\n\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n\n\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n\n\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n\n\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n\n\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n\n\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n\n\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n   */\n\n\n  ClientAuthError.createNoTokensFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n\n\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n\n\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n\n\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n\n\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n\n\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n\n\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n\n\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n\n\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n\n\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n\n\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n\n\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n\n\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n\n\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n\n\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n\n\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n\n  return ClientAuthError;\n}(AuthError);\n\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/error/ClientAuthError.js"],"names":["__extends","AuthError","ClientAuthErrorMessage","clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","ClientAuthError","_super","errorCode","errorMessage","_this","call","name","Object","setPrototypeOf","prototype","createClientInfoDecodingError","caughtError","createClientInfoEmptyError","createTokenParsingError","caughtExtractionError","createTokenNullOrEmptyError","invalidRawTokenString","createEndpointDiscoveryIncompleteError","errDetail","createNetworkError","endpoint","split","createUnableToGetOpenidConfigError","createHashNotDeserializedError","hashParamObj","createInvalidStateError","invalidState","errorString","createStateMismatchError","createStateNotFoundError","missingState","createNonceMismatchError","createNonceNotFoundError","missingNonce","createNoTokensFoundError","createMultipleMatchingTokensInCacheError","createMultipleMatchingAccountsInCacheError","createMultipleMatchingAppMetadataInCacheError","createTokenRequestCannotBeMadeError","createAppendEmptyScopeToSetError","givenScope","createRemoveEmptyScopeFromSetError","createAppendScopeSetError","appendError","createEmptyInputScopeSetError","createDeviceCodeCancelledError","createDeviceCodeExpiredError","createDeviceCodeUnknownError","createNoAccountInSilentRequestError","createNullOrUndefinedCacheRecord","createInvalidCacheEnvironmentError","createNoAccountFoundError","createCachePluginError","createNoCryptoObjectError","operationName","createInvalidCacheTypeError","createUnexpectedAccountTypeError","createUnexpectedCredentialTypeError","createInvalidAssertionError","createInvalidCredentialError","createRefreshRequiredError","createUserTimeoutReachedError","createTokenClaimsRequiredError","createNoAuthCodeInServerResponseError"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    ClientAuthError.createClientInfoEmptyError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    ClientAuthError.createNetworkError = function (endpoint, errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    ClientAuthError.createStateMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    ClientAuthError.createStateNotFoundError = function (missingState) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    ClientAuthError.createNonceMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    ClientAuthError.createNonceNotFoundError = function (missingNonce) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    ClientAuthError.createNoTokensFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    ClientAuthError.createTokenRequestCannotBeMadeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    ClientAuthError.createAppendScopeSetError = function (appendError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\r\n    };\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    ClientAuthError.createEmptyInputScopeSetError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\r\n    };\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    ClientAuthError.createDeviceCodeCancelledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeExpiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeUnknownError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\r\n    };\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    ClientAuthError.createNoAccountInSilentRequestError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    ClientAuthError.createNullOrUndefinedCacheRecord = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    ClientAuthError.createInvalidCacheEnvironmentError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    };\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    ClientAuthError.createNoAccountFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    };\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    ClientAuthError.createCachePluginError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\r\n    };\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    ClientAuthError.createNoCryptoObjectError = function (operationName) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\r\n    };\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    ClientAuthError.createInvalidCacheTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    ClientAuthError.createUnexpectedAccountTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    ClientAuthError.createUnexpectedCredentialTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidAssertionError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidCredentialError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\r\n    };\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    ClientAuthError.createRefreshRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    ClientAuthError.createUserTimeoutReachedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    };\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    ClientAuthError.createTokenClaimsRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    ClientAuthError.createNoAuthCodeInServerResponseError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError));\n\nexport { ClientAuthError, ClientAuthErrorMessage };\n"]},"metadata":{},"sourceType":"module"}