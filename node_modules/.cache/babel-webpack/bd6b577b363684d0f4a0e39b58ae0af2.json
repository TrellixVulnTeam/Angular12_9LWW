{"ast":null,"code":"import { LanguageService, MediaService } from '@igo2/core';\nimport { IgoMap, DataSourceService, LayerService } from '@igo2/geo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/core\";\nimport * as i2 from \"@igo2/geo\";\nimport * as i3 from \"@angular/material/card\";\nexport let AppHoverComponent = /*#__PURE__*/(() => {\n  class AppHoverComponent {\n    constructor(languageService, dataSourceService, layerService, mediaService) {\n      this.languageService = languageService;\n      this.dataSourceService = dataSourceService;\n      this.layerService = layerService;\n      this.mediaService = mediaService;\n      this.pointerCoordDelay = 0;\n      this.pointerHoverFeatureDelay = 0;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          },\n          scaleLine: true\n        }\n      });\n      this.view = {\n        center: [-73, 47.2],\n        zoom: 8,\n        projection: 'EPSG:3857'\n      };\n      this.dataSourceService.createAsyncDataSource({\n        type: 'wmts',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/carto/wmts/1.0.0/wmts',\n        layer: 'carte_gouv_qc_public',\n        matrixSet: 'EPSG_3857',\n        version: '1.3.0'\n      }).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Quebec',\n          visible: true,\n          baseLayer: true,\n          source: dataSource\n        }));\n      });\n      const wfsDatasourcePolygon = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'adn_bassin_n1_public_v',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '3.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'shp'\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(wfsDatasourcePolygon).subscribe(dataSource => {\n        const layer = {\n          title: 'WFS (polygon)',\n          visible: true,\n          source: dataSource\n        };\n        this.map.addLayer(this.layerService.createLayer(layer));\n      });\n      const wfsDatasourcePoint = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'CASERNE',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'shp'\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(wfsDatasourcePoint).subscribe(dataSource => {\n        const layer = {\n          title: 'WFS (point)',\n          visible: true,\n          source: dataSource,\n          styleByAttribute: {\n            attribute: 'en_caserne',\n            data: ['true', 'false'],\n            stroke: ['red', 'blue'],\n            fill: ['#ffffff', '#ffffff'],\n            radius: [7, 7],\n            width: [2, 2]\n          },\n          hoverStyle: {\n            label: {\n              attribute: 'Caserne: ${nom_service_incendie} \\n Mun: ${ville}',\n              style: {\n                textAlign: 'left',\n                textBaseline: 'top',\n                font: '12px Calibri,sans-serif',\n                fill: {\n                  color: '#000'\n                },\n                backgroundFill: {\n                  color: 'rgba(255, 255, 255, 0.5)'\n                },\n                backgroundStroke: {\n                  color: 'rgba(200, 200, 200, 0.75)',\n                  width: 2\n                },\n                stroke: {\n                  color: '#fff',\n                  width: 3\n                },\n                overflow: true,\n                offsetX: 20,\n                offsetY: 10,\n                padding: [2.5, 2.5, 2.5, 2.5]\n              }\n            },\n            baseStyle: {\n              circle: {\n                stroke: {\n                  color: 'orange',\n                  width: 5\n                },\n                width: [5],\n                radius: 15\n              }\n            }\n          }\n        };\n        this.map.addLayer(this.layerService.createLayer(layer));\n      });\n    }\n\n    get media() {\n      return this.mediaService.getMedia();\n    }\n\n    get isTouchScreen() {\n      return this.mediaService.isTouchScreen();\n    }\n\n  }\n\n  AppHoverComponent.ɵfac = function AppHoverComponent_Factory(t) {\n    return new (t || AppHoverComponent)(i0.ɵɵdirectiveInject(i1.LanguageService), i0.ɵɵdirectiveInject(i2.DataSourceService), i0.ɵɵdirectiveInject(i2.LayerService), i0.ɵɵdirectiveInject(i1.MediaService));\n  };\n\n  AppHoverComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppHoverComponent,\n    selectors: [[\"app-hover\"]],\n    decls: 18,\n    vars: 9,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/hover\"], [\"igoHoverFeature\", \"\", 3, \"map\", \"view\", \"igoHoverFeatureDelay\", \"igoHoverFeatureEnabled\"], [\"color\", \"primary\", 3, \"map\"], [\"color\", \"primary\", 3, \"map\", \"showIfNoRotation\"]],\n    template: function AppHoverComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Hover\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"Dependencies: LanguageService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" See the \");\n        i0.ɵɵelementStart(10, \"a\", 0);\n        i0.ɵɵtext(11, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"hr\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"igo-map-browser\", 1);\n        i0.ɵɵelement(14, \"igo-zoom-button\", 2);\n        i0.ɵɵelement(15, \"igo-geolocate-button\", 2);\n        i0.ɵɵelement(16, \"igo-home-extent-button\", 2);\n        i0.ɵɵelement(17, \"igo-rotation-button\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view)(\"igoHoverFeatureDelay\", ctx.pointerHoverFeatureDelay)(\"igoHoverFeatureEnabled\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"showIfNoRotation\", true);\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardSubtitle, i3.MatCardTitle, i3.MatCardContent, i2.MapBrowserComponent, i2.HoverFeatureDirective, i2.ZoomButtonComponent, i2.GeolocateButtonComponent, i2.HomeExtentButtonComponent, i2.RotationButtonComponent],\n    styles: [\"igo-map-browser[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 500px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvdmVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7QUFDRiIsImZpbGUiOiJob3Zlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlnby1tYXAtYnJvd3NlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDUwMHB4O1xufVxuIl19 */\"]\n  });\n  return AppHoverComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\hover\\hover.component.ts","C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\hover\\hover.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\n\nimport { LanguageService, MediaService } from '@igo2/core';\nimport { IgoMap, DataSourceService, LayerService, WFSDataSourceOptions, VectorLayerOptions, WFSDataSource } from '@igo2/geo';\n\n@Component({\n  selector: 'app-hover',\n  templateUrl: './hover.component.html',\n  styleUrls: ['./hover.component.scss']\n})\nexport class AppHoverComponent {\n  public selected;\n  public pointerCoord;\n  public pointerCoordDelay: number = 0;\n  public pointerHoverFeatureDelay: number = 0;\n  public map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      },\n      scaleLine: true\n    }\n  });\n\n  public view = {\n    center: [-73, 47.2],\n    zoom: 8,\n    projection: 'EPSG:3857'\n  };\n\n\n  get media() {\n    return this.mediaService.getMedia();\n  }\n\n  get isTouchScreen() {\n    return this.mediaService.isTouchScreen();\n  }\n\n  constructor(\n    private languageService: LanguageService,\n    private dataSourceService: DataSourceService,\n    private layerService: LayerService,\n    private mediaService: MediaService\n  ) {\n\n    this.dataSourceService\n    .createAsyncDataSource({\n      type: 'wmts',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/carto/wmts/1.0.0/wmts',\n      layer: 'carte_gouv_qc_public',\n      matrixSet: 'EPSG_3857',\n      version: '1.3.0'\n    })\n    .subscribe(dataSource => {\n      this.map.addLayer(\n        this.layerService.createLayer({\n          title: 'Quebec',\n          visible: true,\n          baseLayer: true,\n          source: dataSource\n        })\n      );\n    });\n\n    interface WFSDataOptions\n      extends WFSDataSourceOptions {}\n\n    const wfsDatasourcePolygon: WFSDataOptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'adn_bassin_n1_public_v',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '3.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'shp'\n      }\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(wfsDatasourcePolygon)\n      .subscribe((dataSource: WFSDataSource) => {\n        const layer: VectorLayerOptions = {\n          title: 'WFS (polygon)',\n          visible: true,\n          source: dataSource\n        };\n        this.map.addLayer(this.layerService.createLayer(layer));\n      });\n\n    const wfsDatasourcePoint: WFSDataOptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'CASERNE',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'shp'\n      }\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(wfsDatasourcePoint)\n      .subscribe((dataSource: WFSDataSource) => {\n        const layer: VectorLayerOptions = {\n          title: 'WFS (point)',\n          visible: true,\n          source: dataSource,\n          styleByAttribute: {\n            attribute: 'en_caserne',\n            data: ['true', 'false'],\n            stroke: ['red', 'blue'],\n            fill: ['#ffffff', '#ffffff'],\n            radius: [7, 7],\n            width: [2, 2]\n          },\n          hoverStyle: {\n            label: {\n              attribute: 'Caserne: ${nom_service_incendie} \\n Mun: ${ville}',\n              style: {\n                textAlign: 'left',\n                textBaseline: 'top',\n                font: '12px Calibri,sans-serif',\n                fill: { color: '#000' },\n                backgroundFill: { color: 'rgba(255, 255, 255, 0.5)' },\n                backgroundStroke: { color: 'rgba(200, 200, 200, 0.75)', width: 2 },\n                stroke: { color: '#fff', width: 3 },\n                overflow: true,\n                offsetX: 20,\n                offsetY: 10,\n                padding: [2.5, 2.5, 2.5, 2.5]\n              }\n            },\n            baseStyle: {\n              circle: {\n                stroke: {\n                  color: 'orange',\n                  width: 5\n                },\n                width: [5],\n                radius: 15\n              }\n            }\n          }\n        };\n        this.map.addLayer(this.layerService.createLayer(layer));\n      });\n\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Hover</mat-card-title>\n  <mat-card-content>\n    <li>Dependencies: LanguageService</li>\n\n    <br>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/hover\">code of this example</a>\n    <hr>\n  </mat-card-content>\n\n  <igo-map-browser [map]=\"map\" [view]=\"view\"\n  igoHoverFeature\n  [igoHoverFeatureDelay]=\"pointerHoverFeatureDelay\"\n  [igoHoverFeatureEnabled]=\"true\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n    <igo-geolocate-button [map]=\"map\" color=\"primary\"></igo-geolocate-button>\n    <igo-home-extent-button [map]=\"map\" color=\"primary\"></igo-home-extent-button>\n    <igo-rotation-button [map]=\"map\" [showIfNoRotation]=\"true\" color=\"primary\"></igo-rotation-button>\n  </igo-map-browser>\n\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}