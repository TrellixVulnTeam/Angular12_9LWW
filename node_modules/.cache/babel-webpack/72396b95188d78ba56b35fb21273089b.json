{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\n\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\n\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\n\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\n\nvar ModifyEvent = function (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent}.\n   */\n\n\n  function ModifyEvent(type, features, MapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n\n\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n\n    _this.mapBrowserEvent = MapBrowserEvent;\n    return _this;\n  }\n\n  return ModifyEvent;\n}(Event);\n\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerane`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\n\nvar Modify = function (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  function Modify(options) {\n    var _this = _super.call(this, options) || this;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n\n    _this.un;\n    /** @private */\n\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n\n    _this.featuresBeingModified_ = null;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n\n    _this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n\n    _this.source_ = null;\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n\n    _this.hitDetection_ = null;\n    var features;\n\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    }\n\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n\n    if (options.hitDetection) {\n      _this.hitDetection_ = options.hitDetection;\n    }\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n\n\n    _this.features_ = features;\n\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n\n\n    _this.lastPointerEvent_ = null;\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n\n    _this.delta_ = [0, 0];\n    /**\n     * @private\n     */\n\n    _this.snapToPointer_ = options.snapToPointer === undefined ? !_this.hitDetection_ : options.snapToPointer;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n\n    var map = this.getMap();\n\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n\n\n  Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      var features = this.featuresBeingModified_.getArray();\n\n      for (var i = 0, ii = segments.length; i < ii; ++i) {\n        var segment = segments[i];\n\n        for (var s = 0, ss = segment.length; s < ss; ++s) {\n          var feature = segment[s].feature;\n\n          if (feature && features.indexOf(feature) === -1) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature); // Remove the vertex feature if the collection of canditate features is empty.\n\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n\n\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n\n\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n\n\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n\n\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature = evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    var circleGeometry = geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n    }\n\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n\n\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n\n\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n    var vertexFeature = this.vertexFeature_;\n\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n\n\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n\n\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    var vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    var features = [];\n    var geometries = [];\n\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var feature = segmentData.feature;\n\n      if (features.indexOf(feature) === -1) {\n        features.push(feature);\n      }\n\n      var geometry = segmentData.geometry;\n\n      if (geometries.indexOf(geometry) === -1) {\n        geometries.push(geometry);\n      }\n\n      var depth = segmentData.depth;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n\n        case GeometryType.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            var userProjection = getUserProjection();\n\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    var vertexFeature = this.vertexFeature_;\n\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n\n          continue;\n        }\n\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n   * @private\n   */\n\n\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var _this = this;\n\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    /** @type {Array<SegmentData>|undefined} */\n\n\n    var nodes;\n    var hitPointGeometry;\n\n    if (this.hitDetection_) {\n      var layerFilter = typeof this.hitDetection_ === 'object' ? function (layer) {\n        return layer === _this.hitDetection_;\n      } : undefined;\n      map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n        geometry = geometry || feature.getGeometry();\n\n        if (geometry.getType() === GeometryType.POINT && includes(_this.features_.getArray(), feature)) {\n          hitPointGeometry = geometry;\n          var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n\n        return true;\n      }, {\n        layerFilter: layerFilter\n      });\n    }\n\n    if (!nodes) {\n      var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      var buffer = map.getView().getResolution() * this.pixelTolerance_;\n      var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n\n    if (nodes && nodes.length > 0) {\n      var node = nodes.sort(sortByDistance)[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          var geometries = {};\n          geometries[getUid(node.geometry)] = true;\n\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              var geometryUid = getUid(nodes[i].geometry);\n\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n\n\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n\n\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      var removed = this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n\n\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n\n          break;\n\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n\n        /* falls through */\n\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n\n            component.splice(index, 1);\n            deleted = true;\n\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n\n          break;\n\n        default: // pass\n\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n\n        dragSegments.length = 0;\n      }\n    }\n\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n\n\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n\n\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\n\n\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\n\n\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = geometry;\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n\n      if (userProjection) {\n        circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      }\n\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\n\n\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = geometry;\n    var userProjection = getUserProjection();\n\n    if (userProjection) {\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n    }\n\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\n\n\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/interaction/Modify.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Collection","CollectionEventType","Event","EventType","Feature","GeometryType","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","includes","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","_super","type","features","MapBrowserEvent","_this","mapBrowserEvent","Modify","options","on","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","i","ii","length","segment","s","ss","indexOf","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","geometry_1","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","set","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","POINT","MULTI_POINT","LINE_STRING","MULTI_LINE_STRING","POLYGON","MULTI_POLYGON","CIRCLE","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","opt_coordinate","getCoordinateFromPixel","sortByDistance","a","projectedDistanceToSegmentDataSquared","nodes","hitPointGeometry","layerFilter","layer","forEachFeatureAtPixel","getFlatCoordinates","viewExtent","getResolution","box","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick, } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent, } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n    /**\n     * Triggered upon feature modification start\n     * @event ModifyEvent#modifystart\n     * @api\n     */\n    MODIFYSTART: 'modifystart',\n    /**\n     * Triggered upon feature modification end\n     * @event ModifyEvent#modifyend\n     * @api\n     */\n    MODIFYEND: 'modifyend',\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */ (function (_super) {\n    __extends(ModifyEvent, _super);\n    /**\n     * @param {ModifyEventType} type Type.\n     * @param {Collection<import(\"../Feature\").FeatureLike>} features\n     * The features modified.\n     * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n     * Associated {@link module:ol/MapBrowserEvent}.\n     */\n    function ModifyEvent(type, features, MapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features being modified.\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @api\n         */\n        _this.features = features;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = MapBrowserEvent;\n        return _this;\n    }\n    return ModifyEvent;\n}(Event));\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerane`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */ (function (_super) {\n    __extends(Modify, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Modify(options) {\n        var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */ (options)) || this;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ModifyOnSignature<void>}\n         */\n        _this.un;\n        /** @private */\n        _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : primaryAction;\n        /**\n         * @private\n         * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n         * @return {boolean} Combined condition result.\n         */\n        _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n            return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n        };\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.deleteCondition_ = options.deleteCondition\n            ? options.deleteCondition\n            : _this.defaultDeleteCondition_;\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.insertVertexCondition_ = options.insertVertexCondition\n            ? options.insertVertexCondition\n            : always;\n        /**\n         * Editing vertex.\n         * @type {Feature}\n         * @private\n         */\n        _this.vertexFeature_ = null;\n        /**\n         * Segments intersecting {@link this.vertexFeature_} by segment uid.\n         * @type {Object<string, boolean>}\n         * @private\n         */\n        _this.vertexSegments_ = null;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.lastPixel_ = [0, 0];\n        /**\n         * Tracks if the next `singleclick` event should be ignored to prevent\n         * accidental deletion right after vertex creation.\n         * @type {boolean}\n         * @private\n         */\n        _this.ignoreNextSingleClick_ = false;\n        /**\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @private\n         */\n        _this.featuresBeingModified_ = null;\n        /**\n         * Segment RTree for each layer\n         * @type {RBush<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.snappedToVertex_ = false;\n        /**\n         * Indicate whether the interaction is currently changing a feature's\n         * coordinates.\n         * @type {boolean}\n         * @private\n         */\n        _this.changingFeature_ = false;\n        /**\n         * @type {Array}\n         * @private\n         */\n        _this.dragSegments_ = [];\n        /**\n         * Draw overlay where sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: !!options.wrapX,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n        });\n        /**\n         * @const\n         * @private\n         * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n        };\n        /**\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = null;\n        /**\n         * @type {boolean|import(\"../layer/BaseVector\").default}\n         */\n        _this.hitDetection_ = null;\n        var features;\n        if (options.features) {\n            features = options.features;\n        }\n        else if (options.source) {\n            _this.source_ = options.source;\n            features = new Collection(_this.source_.getFeatures());\n            _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n            _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n        }\n        if (!features) {\n            throw new Error('The modify interaction requires features, a source or a layer');\n        }\n        if (options.hitDetection) {\n            _this.hitDetection_ = options.hitDetection;\n        }\n        /**\n         * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n         * @private\n         */\n        _this.features_ = features;\n        _this.features_.forEach(_this.addFeature_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n        /**\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @private\n         */\n        _this.lastPointerEvent_ = null;\n        /**\n         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n         * @type {Array<number>}\n         */\n        _this.delta_ = [0, 0];\n        /**\n         * @private\n         */\n        _this.snapToPointer_ =\n            options.snapToPointer === undefined\n                ? !_this.hitDetection_\n                : options.snapToPointer;\n        return _this;\n    }\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.addFeature_ = function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (writer) {\n                writer(feature, geometry);\n            }\n        }\n        var map = this.getMap();\n        if (map && map.isRendered() && this.getActive()) {\n            this.handlePointerAtPixel_(this.lastPixel_, map);\n        }\n        feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n    Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n        if (!this.featuresBeingModified_) {\n            this.featuresBeingModified_ = new Collection();\n            var features = this.featuresBeingModified_.getArray();\n            for (var i = 0, ii = segments.length; i < ii; ++i) {\n                var segment = segments[i];\n                for (var s = 0, ss = segment.length; s < ss; ++s) {\n                    var feature = segment[s].feature;\n                    if (feature && features.indexOf(feature) === -1) {\n                        this.featuresBeingModified_.push(feature);\n                    }\n                }\n            }\n            if (this.featuresBeingModified_.getLength() === 0) {\n                this.featuresBeingModified_ = null;\n            }\n            else {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeature_ = function (feature) {\n        this.removeFeatureSegmentData_(feature);\n        // Remove the vertex feature if the collection of canditate features is empty.\n        if (this.vertexFeature_ && this.features_.getLength() === 0) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n        var rBush = this.rBush_;\n        /** @type {Array<SegmentData>} */\n        var nodesToRemove = [];\n        rBush.forEach(\n        /**\n         * @param {SegmentData} node RTree node.\n         */\n        function (node) {\n            if (feature === node.feature) {\n                nodesToRemove.push(node);\n            }\n        });\n        for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n            var nodeToRemove = nodesToRemove[i];\n            for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n                if (this.dragSegments_[j][0] === nodeToRemove) {\n                    this.dragSegments_.splice(j, 1);\n                }\n            }\n            rBush.remove(nodeToRemove);\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Modify.prototype.setActive = function (active) {\n        if (this.vertexFeature_ && !active) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Modify.prototype.setMap = function (map) {\n        this.overlay_.setMap(map);\n        _super.prototype.setMap.call(this, map);\n    };\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Modify.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceAdd_ = function (event) {\n        if (event.feature) {\n            this.features_.push(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceRemove_ = function (event) {\n        if (event.feature) {\n            this.features_.remove(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureAdd_ = function (evt) {\n        this.addFeature_(/** @type {Feature} */ (evt.element));\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureChange_ = function (evt) {\n        if (!this.changingFeature_) {\n            var feature = /** @type {Feature} */ (evt.target);\n            this.removeFeature_(feature);\n            this.addFeature_(feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = /** @type {Feature} */ (evt.element);\n        this.removeFeature_(feature);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        /** @type {SegmentData} */\n        var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                depth: [i],\n                index: i,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                index: i,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    /** @type {SegmentData} */\n                    var segmentData = {\n                        feature: feature,\n                        geometry: geometry,\n                        depth: [j, k],\n                        index: i,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCenter();\n        /** @type {SegmentData} */\n        var centerSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CENTER_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        /** @type {SegmentData} */\n        var circumferenceSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CIRCUMFERENCE_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        var featureSegments = [centerSegmentData, circumferenceSegmentData];\n        centerSegmentData.featureSegments = featureSegments;\n        circumferenceSegmentData.featureSegments = featureSegments;\n        this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection && this.getMap()) {\n            var projection = this.getMap().getView().getProjection();\n            circleGeometry = circleGeometry\n                .clone()\n                .transform(userProjection, projection);\n            circleGeometry = fromCircle(\n            /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)).transform(projection, userProjection);\n        }\n        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var geometry_1 = geometries[i];\n            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n            writer(feature, geometry_1);\n        }\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n    Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n        var vertexFeature = this.vertexFeature_;\n        if (!vertexFeature) {\n            vertexFeature = new Feature(new Point(coordinates));\n            this.vertexFeature_ = vertexFeature;\n            this.overlay_.getSource().addFeature(vertexFeature);\n        }\n        else {\n            var geometry = vertexFeature.getGeometry();\n            geometry.setCoordinates(coordinates);\n        }\n        vertexFeature.set('features', features);\n        vertexFeature.set('geometries', geometries);\n        return vertexFeature;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Modify.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) {\n            return true;\n        }\n        this.lastPointerEvent_ = mapBrowserEvent;\n        var handled;\n        if (!mapBrowserEvent.map.getView().getInteracting() &&\n            mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n            !this.handlingDownUpSequence) {\n            this.handlePointerMove_(mapBrowserEvent);\n        }\n        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n            if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n                !this.ignoreNextSingleClick_) {\n                handled = this.removePoint();\n            }\n            else {\n                handled = true;\n            }\n        }\n        if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n            this.ignoreNextSingleClick_ = false;\n        }\n        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n    Modify.prototype.handleDragEvent = function (evt) {\n        this.ignoreNextSingleClick_ = false;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var vertex = [\n            evt.coordinate[0] + this.delta_[0],\n            evt.coordinate[1] + this.delta_[1],\n        ];\n        var features = [];\n        var geometries = [];\n        for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n            var dragSegment = this.dragSegments_[i];\n            var segmentData = dragSegment[0];\n            var feature = segmentData.feature;\n            if (features.indexOf(feature) === -1) {\n                features.push(feature);\n            }\n            var geometry = segmentData.geometry;\n            if (geometries.indexOf(geometry) === -1) {\n                geometries.push(geometry);\n            }\n            var depth = segmentData.depth;\n            var coordinates = void 0;\n            var segment = segmentData.segment;\n            var index = dragSegment[1];\n            while (vertex.length < geometry.getStride()) {\n                vertex.push(segment[index][vertex.length]);\n            }\n            switch (geometry.getType()) {\n                case GeometryType.POINT:\n                    coordinates = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case GeometryType.MULTI_POINT:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index] = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case GeometryType.LINE_STRING:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.MULTI_LINE_STRING:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.POLYGON:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.MULTI_POLYGON:\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case GeometryType.CIRCLE:\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    if (segmentData.index === CIRCLE_CENTER_INDEX) {\n                        this.changingFeature_ = true;\n                        geometry.setCenter(vertex);\n                        this.changingFeature_ = false;\n                    }\n                    else {\n                        // We're dragging the circle's circumference:\n                        this.changingFeature_ = true;\n                        var projection = evt.map.getView().getProjection();\n                        var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n                        var userProjection = getUserProjection();\n                        if (userProjection) {\n                            var circleGeometry = geometry\n                                .clone()\n                                .transform(userProjection, projection);\n                            circleGeometry.setRadius(radius);\n                            radius = circleGeometry\n                                .transform(projection, userProjection)\n                                .getRadius();\n                        }\n                        geometry.setRadius(radius);\n                        this.changingFeature_ = false;\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (coordinates) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n            }\n        }\n        this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleDownEvent = function (evt) {\n        if (!this.condition_(evt)) {\n            return false;\n        }\n        var pixelCoordinate = evt.coordinate;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n        this.dragSegments_.length = 0;\n        this.featuresBeingModified_ = null;\n        var vertexFeature = this.vertexFeature_;\n        if (vertexFeature) {\n            var projection = evt.map.getView().getProjection();\n            var insertVertices = [];\n            var vertex = vertexFeature.getGeometry().getCoordinates();\n            var vertexExtent = boundingExtent([vertex]);\n            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n            var componentSegments = {};\n            segmentDataMatches.sort(compareIndexes);\n            for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n                var segmentDataMatch = segmentDataMatches[i];\n                var segment = segmentDataMatch.segment;\n                var uid = getUid(segmentDataMatch.geometry);\n                var depth = segmentDataMatch.depth;\n                if (depth) {\n                    uid += '-' + depth.join('-'); // separate feature components\n                }\n                if (!componentSegments[uid]) {\n                    componentSegments[uid] = new Array(2);\n                }\n                if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n                    segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n                    if (coordinatesEqual(closestVertex, vertex) &&\n                        !componentSegments[uid][0]) {\n                        this.dragSegments_.push([segmentDataMatch, 0]);\n                        componentSegments[uid][0] = segmentDataMatch;\n                    }\n                    continue;\n                }\n                if (coordinatesEqual(segment[0], vertex) &&\n                    !componentSegments[uid][0]) {\n                    this.dragSegments_.push([segmentDataMatch, 0]);\n                    componentSegments[uid][0] = segmentDataMatch;\n                    continue;\n                }\n                if (coordinatesEqual(segment[1], vertex) &&\n                    !componentSegments[uid][1]) {\n                    // prevent dragging closed linestrings by the connecting node\n                    if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING ||\n                        segmentDataMatch.geometry.getType() ===\n                            GeometryType.MULTI_LINE_STRING) &&\n                        componentSegments[uid][0] &&\n                        componentSegments[uid][0].index === 0) {\n                        continue;\n                    }\n                    this.dragSegments_.push([segmentDataMatch, 1]);\n                    componentSegments[uid][1] = segmentDataMatch;\n                    continue;\n                }\n                if (getUid(segment) in this.vertexSegments_ &&\n                    !componentSegments[uid][0] &&\n                    !componentSegments[uid][1] &&\n                    this.insertVertexCondition_(evt)) {\n                    insertVertices.push(segmentDataMatch);\n                }\n            }\n            if (insertVertices.length) {\n                this.willModifyFeatures_(evt, [insertVertices]);\n            }\n            for (var j = insertVertices.length - 1; j >= 0; --j) {\n                this.insertVertex_(insertVertices[j], vertex);\n            }\n        }\n        return !!this.vertexFeature_;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleUpEvent = function (evt) {\n        for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n            var segmentData = this.dragSegments_[i][0];\n            var geometry = segmentData.geometry;\n            if (geometry.getType() === GeometryType.CIRCLE) {\n                // Update a circle object in the R* bush:\n                var coordinates = geometry.getCenter();\n                var centerSegmentData = segmentData.featureSegments[0];\n                var circumferenceSegmentData = segmentData.featureSegments[1];\n                centerSegmentData.segment[0] = coordinates;\n                centerSegmentData.segment[1] = coordinates;\n                circumferenceSegmentData.segment[0] = coordinates;\n                circumferenceSegmentData.segment[1] = coordinates;\n                this.rBush_.update(createExtent(coordinates), centerSegmentData);\n                var circleGeometry = geometry;\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    var projection = evt.map.getView().getProjection();\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                    circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n                }\n                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n            }\n            else {\n                this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n            }\n        }\n        if (this.featuresBeingModified_) {\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handlePointerMove_ = function (evt) {\n        this.lastPixel_ = evt.pixel;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n     * @private\n     */\n    Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n        var _this = this;\n        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n        var projection = map.getView().getProjection();\n        var sortByDistance = function (a, b) {\n            return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n                projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));\n        };\n        /** @type {Array<SegmentData>|undefined} */\n        var nodes;\n        var hitPointGeometry;\n        if (this.hitDetection_) {\n            var layerFilter = typeof this.hitDetection_ === 'object'\n                ? function (layer) { return layer === _this.hitDetection_; }\n                : undefined;\n            map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n                geometry =\n                    geometry ||\n                        /** @type {import(\"../geom/SimpleGeometry\").default} */ (feature.getGeometry());\n                if (geometry.getType() === GeometryType.POINT &&\n                    includes(_this.features_.getArray(), feature)) {\n                    hitPointGeometry = geometry;\n                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n                    nodes = [\n                        {\n                            feature: feature,\n                            geometry: geometry,\n                            segment: [coordinate, coordinate],\n                        },\n                    ];\n                }\n                return true;\n            }, { layerFilter: layerFilter });\n        }\n        if (!nodes) {\n            var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n            var buffer = map.getView().getResolution() * this.pixelTolerance_;\n            var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n            nodes = this.rBush_.getInExtent(box);\n        }\n        if (nodes && nodes.length > 0) {\n            var node = nodes.sort(sortByDistance)[0];\n            var closestSegment = node.segment;\n            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n            var vertexPixel = map.getPixelFromCoordinate(vertex);\n            var dist = coordinateDistance(pixel, vertexPixel);\n            if (hitPointGeometry || dist <= this.pixelTolerance_) {\n                /** @type {Object<string, boolean>} */\n                var vertexSegments = {};\n                vertexSegments[getUid(closestSegment)] = true;\n                if (!this.snapToPointer_) {\n                    this.delta_[0] = vertex[0] - pixelCoordinate[0];\n                    this.delta_[1] = vertex[1] - pixelCoordinate[1];\n                }\n                if (node.geometry.getType() === GeometryType.CIRCLE &&\n                    node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    this.snappedToVertex_ = true;\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                }\n                else {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    this.snappedToVertex_ = dist <= this.pixelTolerance_;\n                    if (this.snappedToVertex_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                    }\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                    var geometries = {};\n                    geometries[getUid(node.geometry)] = true;\n                    for (var i = 1, ii = nodes.length; i < ii; ++i) {\n                        var segment = nodes[i].segment;\n                        if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                            coordinatesEqual(closestSegment[1], segment[1])) ||\n                            (coordinatesEqual(closestSegment[0], segment[1]) &&\n                                coordinatesEqual(closestSegment[1], segment[0]))) {\n                            var geometryUid = getUid(nodes[i].geometry);\n                            if (!(geometryUid in geometries)) {\n                                geometries[geometryUid] = true;\n                                vertexSegments[getUid(segment)] = true;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                this.vertexSegments_ = vertexSegments;\n                return;\n            }\n        }\n        if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n    };\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n    Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n        var segment = segmentData.segment;\n        var feature = segmentData.feature;\n        var geometry = segmentData.geometry;\n        var depth = segmentData.depth;\n        var index = segmentData.index;\n        var coordinates;\n        while (vertex.length < geometry.getStride()) {\n            vertex.push(0);\n        }\n        switch (geometry.getType()) {\n            case GeometryType.MULTI_LINE_STRING:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.POLYGON:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.MULTI_POLYGON:\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case GeometryType.LINE_STRING:\n                coordinates = geometry.getCoordinates();\n                coordinates.splice(index + 1, 0, vertex);\n                break;\n            default:\n                return;\n        }\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var rTree = this.rBush_;\n        rTree.remove(segmentData);\n        this.updateSegmentIndices_(geometry, index, depth, 1);\n        /** @type {SegmentData} */\n        var newSegmentData = {\n            segment: [segment[0], vertex],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index,\n        };\n        rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        this.dragSegments_.push([newSegmentData, 1]);\n        /** @type {SegmentData} */\n        var newSegmentData2 = {\n            segment: [vertex, segment[1]],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index + 1,\n        };\n        rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n        this.dragSegments_.push([newSegmentData2, 0]);\n        this.ignoreNextSingleClick_ = true;\n    };\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n    Modify.prototype.removePoint = function () {\n        if (this.lastPointerEvent_ &&\n            this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n            var evt = this.lastPointerEvent_;\n            this.willModifyFeatures_(evt, this.dragSegments_);\n            var removed = this.removeVertex_();\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n            return removed;\n        }\n        return false;\n    };\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n    Modify.prototype.removeVertex_ = function () {\n        var dragSegments = this.dragSegments_;\n        var segmentsByFeature = {};\n        var deleted = false;\n        var component, coordinates, dragSegment, geometry, i, index, left;\n        var newIndex, right, segmentData, uid;\n        for (i = dragSegments.length - 1; i >= 0; --i) {\n            dragSegment = dragSegments[i];\n            segmentData = dragSegment[0];\n            uid = getUid(segmentData.feature);\n            if (segmentData.depth) {\n                // separate feature components\n                uid += '-' + segmentData.depth.join('-');\n            }\n            if (!(uid in segmentsByFeature)) {\n                segmentsByFeature[uid] = {};\n            }\n            if (dragSegment[1] === 0) {\n                segmentsByFeature[uid].right = segmentData;\n                segmentsByFeature[uid].index = segmentData.index;\n            }\n            else if (dragSegment[1] == 1) {\n                segmentsByFeature[uid].left = segmentData;\n                segmentsByFeature[uid].index = segmentData.index + 1;\n            }\n        }\n        for (uid in segmentsByFeature) {\n            right = segmentsByFeature[uid].right;\n            left = segmentsByFeature[uid].left;\n            index = segmentsByFeature[uid].index;\n            newIndex = index - 1;\n            if (left !== undefined) {\n                segmentData = left;\n            }\n            else {\n                segmentData = right;\n            }\n            if (newIndex < 0) {\n                newIndex = 0;\n            }\n            geometry = segmentData.geometry;\n            coordinates = geometry.getCoordinates();\n            component = coordinates;\n            deleted = false;\n            switch (geometry.getType()) {\n                case GeometryType.MULTI_LINE_STRING:\n                    if (coordinates[segmentData.depth[0]].length > 2) {\n                        coordinates[segmentData.depth[0]].splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case GeometryType.LINE_STRING:\n                    if (coordinates.length > 2) {\n                        coordinates.splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case GeometryType.MULTI_POLYGON:\n                    component = component[segmentData.depth[1]];\n                /* falls through */\n                case GeometryType.POLYGON:\n                    component = component[segmentData.depth[0]];\n                    if (component.length > 4) {\n                        if (index == component.length - 1) {\n                            index = 0;\n                        }\n                        component.splice(index, 1);\n                        deleted = true;\n                        if (index === 0) {\n                            // close the ring again\n                            component.pop();\n                            component.push(component[0]);\n                            newIndex = component.length - 1;\n                        }\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (deleted) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n                var segments = [];\n                if (left !== undefined) {\n                    this.rBush_.remove(left);\n                    segments.push(left.segment[0]);\n                }\n                if (right !== undefined) {\n                    this.rBush_.remove(right);\n                    segments.push(right.segment[1]);\n                }\n                if (left !== undefined && right !== undefined) {\n                    /** @type {SegmentData} */\n                    var newSegmentData = {\n                        depth: segmentData.depth,\n                        feature: segmentData.feature,\n                        geometry: segmentData.geometry,\n                        index: newIndex,\n                        segment: segments,\n                    };\n                    this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n                }\n                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n                if (this.vertexFeature_) {\n                    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n                    this.vertexFeature_ = null;\n                }\n                dragSegments.length = 0;\n            }\n        }\n        return deleted;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n    Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n        this.changingFeature_ = true;\n        geometry.setCoordinates(coordinates);\n        this.changingFeature_ = false;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n    Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n        this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n            if (segmentDataMatch.geometry === geometry &&\n                (depth === undefined ||\n                    segmentDataMatch.depth === undefined ||\n                    equals(segmentDataMatch.depth, depth)) &&\n                segmentDataMatch.index > index) {\n                segmentDataMatch.index += delta;\n            }\n        });\n    };\n    return Modify;\n}(PointerInteraction));\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n    return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === GeometryType.CIRCLE) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n            }\n            var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n            return distanceToCircumference * distanceToCircumference;\n        }\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === GeometryType.CIRCLE &&\n        segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var style = createEditingStyle();\n    return function (feature, resolution) {\n        return style[GeometryType.POINT];\n    };\n}\nexport default Modify;\n"]},"metadata":{},"sourceType":"module"}