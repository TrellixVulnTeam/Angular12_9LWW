{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/UrlTile\n */\n\n\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\n\nvar UrlTile = function (_super) {\n  __extends(UrlTile, _super);\n  /**\n   * @param {Options} options Image tile options.\n   */\n\n\n  function UrlTile(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n\n    _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n\n    _this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      _this.tileUrlFunction = options.tileUrlFunction;\n    }\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n\n\n    _this.urls = null;\n\n    if (options.urls) {\n      _this.setUrls(options.urls);\n    } else if (options.url) {\n      _this.setUrl(options.url);\n    }\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n\n\n    _this.tileLoadingKeys_ = {};\n    return _this;\n  }\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileLoadFunction = function () {\n    return this.tileLoadFunction;\n  };\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n\n\n  UrlTile.prototype.getTileUrlFunction = function () {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n  };\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.getUrls = function () {\n    return this.urls;\n  };\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  UrlTile.prototype.handleTileChange = function (event) {\n    var tile = event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n\n\n  UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrl = function (url) {\n    var urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  };\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n\n\n  UrlTile.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n\n\n  UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    return undefined;\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n\n\n  UrlTile.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n\n  return UrlTile;\n}(TileSource);\n\nexport default UrlTile;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/UrlTile.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","TileEventType","TileSource","TileSourceEvent","TileState","createFromTemplates","expandUrl","getKeyZXY","getUid","UrlTile","_super","options","_this","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","key","attributionsCollapsible","zDirection","generateTileUrlFunction_","tileUrlFunction","tileLoadFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","bind","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","setTileUrlFunction","pruneExceptNewestZ","setKey","join","tileCoord","pixelRatio","useTile","z","x","y","tileCoordKey","containsKey","get"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nvar UrlTile = /** @class */ (function (_super) {\n    __extends(UrlTile, _super);\n    /**\n     * @param {Options} options Image tile options.\n     */\n    function UrlTile(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            opaque: options.opaque,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tilePixelRatio: options.tilePixelRatio,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.generateTileUrlFunction_ =\n            _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n        /**\n         * @protected\n         * @type {import(\"../Tile.js\").LoadFunction}\n         */\n        _this.tileLoadFunction = options.tileLoadFunction;\n        if (options.tileUrlFunction) {\n            _this.tileUrlFunction = options.tileUrlFunction;\n        }\n        /**\n         * @protected\n         * @type {!Array<string>|null}\n         */\n        _this.urls = null;\n        if (options.urls) {\n            _this.setUrls(options.urls);\n        }\n        else if (options.url) {\n            _this.setUrl(options.url);\n        }\n        /**\n         * @private\n         * @type {!Object<string, boolean>}\n         */\n        _this.tileLoadingKeys_ = {};\n        return _this;\n    }\n    /**\n     * Return the tile load function of the source.\n     * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n     * @api\n     */\n    UrlTile.prototype.getTileLoadFunction = function () {\n        return this.tileLoadFunction;\n    };\n    /**\n     * Return the tile URL function of the source.\n     * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n     * @api\n     */\n    UrlTile.prototype.getTileUrlFunction = function () {\n        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n            ? this.tileUrlFunction.bind(this)\n            : this.tileUrlFunction;\n    };\n    /**\n     * Return the URLs used for this source.\n     * When a tileUrlFunction is used instead of url or urls,\n     * null will be returned.\n     * @return {!Array<string>|null} URLs.\n     * @api\n     */\n    UrlTile.prototype.getUrls = function () {\n        return this.urls;\n    };\n    /**\n     * Handle tile change events.\n     * @param {import(\"../events/Event.js\").default} event Event.\n     * @protected\n     */\n    UrlTile.prototype.handleTileChange = function (event) {\n        var tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n        var uid = getUid(tile);\n        var tileState = tile.getState();\n        var type;\n        if (tileState == TileState.LOADING) {\n            this.tileLoadingKeys_[uid] = true;\n            type = TileEventType.TILELOADSTART;\n        }\n        else if (uid in this.tileLoadingKeys_) {\n            delete this.tileLoadingKeys_[uid];\n            type =\n                tileState == TileState.ERROR\n                    ? TileEventType.TILELOADERROR\n                    : tileState == TileState.LOADED\n                        ? TileEventType.TILELOADEND\n                        : undefined;\n        }\n        if (type != undefined) {\n            this.dispatchEvent(new TileSourceEvent(type, tile));\n        }\n    };\n    /**\n     * Set the tile load function of the source.\n     * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n     * @api\n     */\n    UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {\n        this.tileCache.clear();\n        this.tileLoadFunction = tileLoadFunction;\n        this.changed();\n    };\n    /**\n     * Set the tile URL function of the source.\n     * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n     * @param {string} [key] Optional new tile key for the source.\n     * @api\n     */\n    UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {\n        this.tileUrlFunction = tileUrlFunction;\n        this.tileCache.pruneExceptNewestZ();\n        if (typeof key !== 'undefined') {\n            this.setKey(key);\n        }\n        else {\n            this.changed();\n        }\n    };\n    /**\n     * Set the URL to use for requests.\n     * @param {string} url URL.\n     * @api\n     */\n    UrlTile.prototype.setUrl = function (url) {\n        var urls = expandUrl(url);\n        this.urls = urls;\n        this.setUrls(urls);\n    };\n    /**\n     * Set the URLs to use for requests.\n     * @param {Array<string>} urls URLs.\n     * @api\n     */\n    UrlTile.prototype.setUrls = function (urls) {\n        this.urls = urls;\n        var key = urls.join('\\n');\n        if (this.generateTileUrlFunction_) {\n            this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n        }\n        else {\n            this.setKey(key);\n        }\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n        return undefined;\n    };\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     */\n    UrlTile.prototype.useTile = function (z, x, y) {\n        var tileCoordKey = getKeyZXY(z, x, y);\n        if (this.tileCache.containsKey(tileCoordKey)) {\n            this.tileCache.get(tileCoordKey);\n        }\n    };\n    return UrlTile;\n}(TileSource));\nexport default UrlTile;\n"]},"metadata":{},"sourceType":"module"}