{"ast":null,"code":"import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\n\nconst MAT_BUTTON_TOGGLE_GROUP = /*#__PURE__*/new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\n\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatButtonToggleGroup),\n  multi: true\n}; // Counter used to generate unique IDs.\n\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\n\nclass MatButtonToggleChange {\n  constructor(\n  /** The MatButtonToggle that emits the event. */\n  source,\n  /** The value assigned to the MatButtonToggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n\n\nlet MatButtonToggleGroup = /*#__PURE__*/(() => {\n  class MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n      this._changeDetector = _changeDetector;\n      this._vertical = false;\n      this._multiple = false;\n      this._disabled = false;\n      /**\n       * The method to be called in order to update ngModel.\n       * Now `ngModel` binding is not supported in multiple selection mode.\n       */\n\n      this._controlValueAccessorChangeFn = () => {};\n      /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n\n      this._onTouched = () => {};\n\n      this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n      /**\n       * Event that emits whenever the value of the group changes.\n       * Used to facilitate two-way data binding.\n       * @docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n      /** Event emitted when the group's value changes. */\n\n      this.change = new EventEmitter();\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(toggle => {\n          toggle.name = this._name;\n\n          toggle._markForCheck();\n        });\n      }\n    }\n    /** Whether the toggle group is vertical. */\n\n\n    get vertical() {\n      return this._vertical;\n    }\n\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n\n\n    get value() {\n      const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(toggle => toggle.value);\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n\n\n    get selected() {\n      const selected = this._selectionModel ? this._selectionModel.selected : [];\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multiple(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(toggle => toggle._markForCheck());\n      }\n    }\n\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n      this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n\n\n    _emitChangeEvent() {\n      const selected = this.selected;\n      const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      const event = new MatButtonToggleChange(source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n\n\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        this.selected.checked = false;\n      }\n\n      if (this._selectionModel) {\n        if (select) {\n          this._selectionModel.select(toggle);\n        } else {\n          this._selectionModel.deselect(toggle);\n        }\n      } else {\n        deferEvents = true;\n      } // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n      // the side-effect is that we may end up updating the model value out of sequence in others\n      // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n\n\n      if (deferEvents) {\n        Promise.resolve().then(() => this._updateModelValue(isUserInput));\n      } else {\n        this._updateModelValue(isUserInput);\n      }\n    }\n    /** Checks whether a button toggle is selected. */\n\n\n    _isSelected(toggle) {\n      return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n\n\n    _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n\n\n    _setSelectionByValue(value) {\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(currentValue => this._selectValue(currentValue));\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /** Clears the selected toggles. */\n\n\n    _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n\n\n    _selectValue(value) {\n      const correspondingOption = this._buttonToggles.find(toggle => {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n\n\n    _updateModelValue(isUserInput) {\n      // Only emit the change event for user input.\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n\n  }\n\n  MatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n    return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n\n  MatButtonToggleGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatButtonToggleGroup,\n    selectors: [[\"mat-button-toggle-group\"]],\n    contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n    hostVars: 5,\n    hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      appearance: \"appearance\",\n      name: \"name\",\n      vertical: \"vertical\",\n      value: \"value\",\n      multiple: \"multiple\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggleGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n      provide: MAT_BUTTON_TOGGLE_GROUP,\n      useExisting: MatButtonToggleGroup\n    }])]\n  });\n  return MatButtonToggleGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to the MatButtonToggle class.\n\n/** @docs-private */\n\n\nconst _MatButtonToggleBase = /*#__PURE__*/mixinDisableRipple(class {});\n/** Single button inside of a toggle group. */\n\n\nlet MatButtonToggle = /*#__PURE__*/(() => {\n  class MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n      super();\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._isSingleSelector = false;\n      this._checked = false;\n      /**\n       * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n       */\n\n      this.ariaLabelledby = null;\n      this._disabled = false;\n      /** Event emitted when the group value changes. */\n\n      this.change = new EventEmitter();\n      const parsedTabIndex = Number(defaultTabIndex);\n      this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n      this.buttonToggleGroup = toggleGroup;\n      this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n\n\n    get buttonId() {\n      return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n\n\n    get appearance() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n\n    set appearance(value) {\n      this._appearance = value;\n    }\n    /** Whether the button is checked. */\n\n\n    get checked() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n\n    set checked(value) {\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the button is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    ngOnInit() {\n      const group = this.buttonToggleGroup;\n      this._isSingleSelector = group && !group.multiple;\n      this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n\n      if (this._isSingleSelector) {\n        this.name = group.name;\n      }\n\n      if (group) {\n        if (group._isPrechecked(this)) {\n          this.checked = true;\n        } else if (group._isSelected(this) !== this._checked) {\n          // As as side effect of the circular dependency between the toggle group and the button,\n          // we may end up in a state where the button is supposed to be checked on init, but it\n          // isn't, because the checked value was assigned too early. This can happen when Ivy\n          // assigns the static input value before the `ngOnInit` has run.\n          group._syncButtonToggle(this, this._checked);\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n\n    ngOnDestroy() {\n      const group = this.buttonToggleGroup;\n\n      this._focusMonitor.stopMonitoring(this._elementRef); // Remove the toggle from the selection once it's destroyed. Needs to happen\n      // on the next tick in order to avoid \"changed after checked\" errors.\n\n\n      if (group && group._isSelected(this)) {\n        group._syncButtonToggle(this, false, false, true);\n      }\n    }\n    /** Focuses the button. */\n\n\n    focus(options) {\n      this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n\n\n    _onButtonClick() {\n      const newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n\n\n    _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  MatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n    return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n  };\n\n  MatButtonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatButtonToggle,\n    selectors: [[\"mat-button-toggle\"]],\n    viewQuery: function MatButtonToggle_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n    hostVars: 12,\n    hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n          return ctx.focus();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      tabIndex: \"tabIndex\",\n      appearance: \"appearance\",\n      checked: \"checked\",\n      disabled: \"disabled\",\n      id: \"id\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"matButtonToggle\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 9,\n    consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n    template: function MatButtonToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n          return ctx._onButtonClick();\n        });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n      }\n    },\n    directives: [ɵngcc2.MatRipple],\n    styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatButtonToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatButtonToggleModule = /*#__PURE__*/(() => {\n  class MatButtonToggleModule {}\n\n  MatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n    return new (t || MatButtonToggleModule)();\n  };\n\n  MatButtonToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatButtonToggleModule\n  });\n  MatButtonToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n  });\n  return MatButtonToggleModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function () {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function () {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/button-toggle.js"],"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","ngDevMode","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","inputs","outputs","exportAs","features","ɵɵProvidersFeature","_MatButtonToggleBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","MatButtonToggle_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","ɵɵlistener","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","MatButtonToggle_Template_button_click_0_listener","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","ɵɵadvance","directives","MatRipple","styles","encapsulation","changeDetection","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n"]},"metadata":{},"sourceType":"module"}