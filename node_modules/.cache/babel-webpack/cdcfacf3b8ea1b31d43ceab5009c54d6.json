{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { NgModule, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nlet LayoutModule = /*#__PURE__*/(() => {\n  class LayoutModule {}\n\n  LayoutModule.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n\n  LayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return LayoutModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Global registry for all dynamically-created, injected media queries. */\n\n\nconst mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\n\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\n\nlet MediaMatcher = /*#__PURE__*/(() => {\n  class MediaMatcher {\n    constructor(_platform) {\n      this._platform = _platform;\n      this._matchMedia = this._platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n      // call it from a different scope.\n      window.matchMedia.bind(window) : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n\n\n    matchMedia(query) {\n      if (this._platform.WEBKIT || this._platform.BLINK) {\n        createEmptyStyleRule(query);\n      }\n\n      return this._matchMedia(query);\n    }\n\n  }\n\n  MediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n    return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  MediaMatcher.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function MediaMatcher_Factory() {\n      return new MediaMatcher(i0.ɵɵinject(i1.Platform));\n    },\n    token: MediaMatcher,\n    providedIn: \"root\"\n  });\n  return MediaMatcher;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {}\n  };\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Utility for checking the matching state of @media queries. */\n\n\nlet BreakpointObserver = /*#__PURE__*/(() => {\n  class BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n      this._mediaMatcher = _mediaMatcher;\n      this._zone = _zone;\n      /**  A map of all media queries currently being listened for. */\n\n      this._queries = new Map();\n      /** A subject for all other observables to takeUntil based on. */\n\n      this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n\n\n    ngOnDestroy() {\n      this._destroySubject.next();\n\n      this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n\n\n    isMatched(value) {\n      const queries = splitQueries(coerceArray(value));\n      return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n\n\n    observe(value) {\n      const queries = splitQueries(coerceArray(value));\n      const observables = queries.map(query => this._registerQuery(query).observable);\n      let stateObservable = combineLatest(observables); // Emit the first state immediately, and then debounce the subsequent emissions.\n\n      stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n      return stateObservable.pipe(map(breakpointStates => {\n        const response = {\n          matches: false,\n          breakpoints: {}\n        };\n        breakpointStates.forEach(({\n          matches,\n          query\n        }) => {\n          response.matches = response.matches || matches;\n          response.breakpoints[query] = matches;\n        });\n        return response;\n      }));\n    }\n    /** Registers a specific query to be listened for. */\n\n\n    _registerQuery(query) {\n      // Only set up a new MediaQueryList if it is not already being listened for.\n      if (this._queries.has(query)) {\n        return this._queries.get(query);\n      }\n\n      const mql = this._mediaMatcher.matchMedia(query); // Create callback for match changes and add it is as a listener.\n\n\n      const queryObservable = new Observable(observer => {\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        const handler = e => this._zone.run(() => observer.next(e));\n\n        mql.addListener(handler);\n        return () => {\n          mql.removeListener(handler);\n        };\n      }).pipe(startWith(mql), map(({\n        matches\n      }) => ({\n        query,\n        matches\n      })), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n      const output = {\n        observable: queryObservable,\n        mql\n      };\n\n      this._queries.set(query, output);\n\n      return output;\n    }\n\n  }\n\n  BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n    return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  BreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function BreakpointObserver_Factory() {\n      return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone));\n    },\n    token: BreakpointObserver,\n    providedIn: \"root\"\n  });\n  return BreakpointObserver;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n\nconst Breakpoints = {\n  XSmall: '(max-width: 599.98px)',\n  Small: '(min-width: 600px) and (max-width: 959.98px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.98px) and (orientation: portrait), ' + '(max-width: 959.98px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/cdk/fesm2015/layout.js"],"names":["i0","NgModule","Injectable","NgZone","coerceArray","Subject","combineLatest","concat","Observable","take","skip","debounceTime","map","startWith","takeUntil","i1","Platform","ɵngcc0","ɵngcc1","LayoutModule","ɵfac","LayoutModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","ngDevMode","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","constructor","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","createEmptyStyleRule","MediaMatcher_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","ngOnDestroy","next","complete","isMatched","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observe","observables","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","get","queryObservable","observer","handler","run","output","set","BreakpointObserver_Factory","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵfac = function LayoutModule_Factory(t) { return new (t || LayoutModule)(); };\nLayoutModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(i0.ɵɵinject(i1.Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(i0.ɵɵinject(MediaMatcher), i0.ɵɵinject(i0.NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n"]},"metadata":{},"sourceType":"module"}