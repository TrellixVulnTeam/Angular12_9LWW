{"ast":null,"code":"import { LanguageService } from '@igo2/core';\nimport { IgoMap, DataSourceService, LayerService, OgcFilterOperatorType } from '@igo2/geo';\nimport { Fill, Stroke, Circle, Style } from 'ol/style';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/core\";\nimport * as i2 from \"@igo2/geo\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@igo2/common\";\nexport let AppOgcFilterComponent = /*#__PURE__*/(() => {\n  class AppOgcFilterComponent {\n    constructor(languageService, dataSourceService, layerService) {\n      this.languageService = languageService;\n      this.dataSourceService = dataSourceService;\n      this.layerService = layerService;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          }\n        }\n      });\n      this.view = {\n        center: [-73, 47.2],\n        zoom: 7\n      };\n      this.dataSourceService.createAsyncDataSource({\n        type: 'osm'\n      }).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'OSM',\n          source: dataSource\n        }));\n      });\n      const datasource = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'code_municipalite',\n          alias: '# de la municipalitée'\n        }, {\n          name: 'date_observation',\n          excludeFromOgcFilters: true\n        }, {\n          name: 'urgence',\n          values: ['immédiate', 'inconnue']\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            logical: 'Or',\n            filters: [{\n              operator: 'PropertyIsEqualTo',\n              propertyName: 'code_municipalite',\n              expression: '10043'\n            }, {\n              operator: 'Intersects',\n              geometryName: 'the_geom',\n              wkt_geometry: `MULTIPOLYGON(((\n              -8379441.158019895 5844447.897707146,\n              -8379441.158019895 5936172.331649357,\n              -8134842.66750733 5936172.331649357,\n              -8134842.66750733 5844447.897707146,\n              -8379441.158019895 5844447.897707146\n            ), (\n              -8015003 5942074,\n              -8015003 5780349,\n              -7792364 5780349,\n              -7792364 5942074,\n              -8015003 5942074\n            )))`\n            }]\n          }\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(datasource).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (PropertyIsEqualTo OR Intersects)',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'orange',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilter = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-21T00:00:00-05:00',\n            end: '2016-01-26T00:00:00-05:00'\n          }\n        },\n        minDate: '2016-01-01T00:00:00-05:00',\n        maxDate: '2016-02-10T00:00:00-05:00',\n        stepDate: 'P2D'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilter).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, Step: P2D)',\n          id: '1',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'red',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilterTime = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-01T04:00:00-05:00',\n            end: '2016-01-12T16:00:00-05:00'\n          }\n        },\n        minDate: '2016-01-01T00:00:00-05:00',\n        maxDate: '2016-02-14T20:00:00-05:00',\n        stepDate: 'PT4H'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilterTime).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, Step: PT4H)',\n          id: '2',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'blue',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilterTimeMonth = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-01T00:00:00-05:00',\n            end: '2016-03-31T00:00:00-05:00',\n            displayFormat: 'MMMM'\n          }\n        },\n        minDate: '2016-01-01T00:00:00-05:00',\n        maxDate: '2018-12-31T00:00:00-05:00',\n        stepDate: 'P1M'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilterTimeMonth).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, Step: P1M)',\n          id: '3',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'yellow',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilterTimeYear = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2014-01-01T00:00:00-05:00',\n            end: '2019-12-31T00:00:00-05:00',\n            sliderOptions: {\n              interval: 2000,\n              displayFormat: 'YY'\n            },\n            displayFormat: 'YYYY'\n          }\n        },\n        minDate: '2014-01-01T00:00:00-05:00',\n        maxDate: '2019-12-31T00:00:00-05:00',\n        stepDate: 'P1Y'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilterTimeYear).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, Step: P1Y)',\n          id: '4',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'green',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilterTimeInterval = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: 'today - 2 days',\n            end: 'today' // \"now\" can also be used. Instead of midnight, the current time will be used\n\n          }\n        },\n        minDate: '2016-01-01T00:00:00-05:00',\n        maxDate: '2025-12-31T00:00:00-05:00',\n        stepDate: 'P1D'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilterTimeInterval).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, Interval from Now, Step: P1D)',\n          id: '5',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'white'\n              }),\n              stroke: new Stroke({\n                color: 'black',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const datasourceDuringFilterTimeRestrictedToStep = {\n        type: 'wfs',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        params: {\n          featureTypes: 'vg_observation_v_autre_wmst',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '2.0.0',\n          outputFormat: undefined,\n          outputFormatDownload: 'SHP' // based on service capabilities\n\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          allowedOperatorsType: OgcFilterOperatorType.All,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2019-01-01 00:00:00',\n            restrictToStep: true\n          }\n        },\n        minDate: '2016-01-01T00:00:00-05:00',\n        maxDate: '2025-12-31T00:00:00-05:00',\n        stepDate: 'P1M'\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceDuringFilterTimeRestrictedToStep).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle (During, RestrictToStep, Step: P1M)',\n          id: '6',\n          source: dataSource,\n          style: new Style({\n            image: new Circle({\n              radius: 5,\n              fill: new Fill({\n                color: 'black'\n              }),\n              stroke: new Stroke({\n                color: 'red',\n                width: 1\n              })\n            })\n          })\n        }));\n      });\n      const wmsOgcFilterOptions = {\n        type: 'wms',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        optionsFromCapabilities: true,\n        params: {\n          LAYERS: 'vg_observation_v_inondation23avril2017_wmst',\n          VERSION: '1.3.0'\n        },\n        sourceFields: [{\n          name: 'date_observation',\n          alias: 'Date de l\\'observation',\n          allowedOperatorsType: 'Time'\n        }],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          filters: {\n            operator: 'During',\n            propertyName: 'date_observation'\n          },\n          allowedOperatorsType: OgcFilterOperatorType.Time\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(wmsOgcFilterOptions).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Inondation (During, optionsFromCapabilities)',\n          source: dataSource\n        }));\n      });\n      const filterableWMSwithPushButtons = {\n        type: 'wms',\n        url: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n        urlWfs: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n        params: {\n          LAYERS: 'radars_photos',\n          VERSION: '1.3.0'\n        },\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          pushButtons: {\n            selectorType: 'pushButton',\n            order: 2,\n            groups: [{\n              title: 'Nom du group1 - push',\n              name: '1 - push',\n              ids: ['id1']\n            }],\n            bundles: [{\n              id: 'id1',\n              title: 'Régions',\n              logical: 'Or',\n              vertical: true,\n              selectors: [{\n                title: 'Montréal & Laval',\n                enabled: false,\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  logical: 'Or',\n                  filters: [{\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'region',\n                    expression: 'Montréal'\n                  }, {\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'region',\n                    expression: 'Laval'\n                  }]\n                }\n              }, {\n                title: 'Outside Montréal & Laval',\n                enabled: false,\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  logical: 'And',\n                  filters: [{\n                    operator: 'PropertyIsNotEqualTo',\n                    propertyName: 'region',\n                    expression: 'Montréal'\n                  }, {\n                    operator: 'PropertyIsNotEqualTo',\n                    propertyName: 'region',\n                    expression: 'Laval'\n                  }]\n                }\n              }]\n            }]\n          },\n          checkboxes: {\n            selectorType: 'checkbox',\n            order: 1,\n            groups: [{\n              title: 'Nom du group1 - checkbox',\n              name: '1 - checkbox',\n              ids: ['id1']\n            }],\n            bundles: [{\n              id: 'id1',\n              title: 'Type de radar photo',\n              logical: 'Or',\n              selectors: [{\n                title: 'Radar photo fixe',\n                enabled: true,\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  operator: 'PropertyIsEqualTo',\n                  propertyName: 'typeAppareil',\n                  expression: 'Radar photo fixe'\n                }\n              }, {\n                title: 'Radar photo mobile',\n                enabled: false,\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  operator: 'PropertyIsEqualTo',\n                  propertyName: 'typeAppareil',\n                  expression: 'Radar photo mobile'\n                }\n              }, {\n                title: 'Radar photo fixe + feu rouge',\n                enabled: false,\n                color: '0,200,0',\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  operator: 'PropertyIsEqualTo',\n                  propertyName: 'typeAppareil',\n                  expression: 'Radar photo fixe et surveillance au feu rouge'\n                }\n              }, {\n                title: 'Radar feu rouge',\n                enabled: false,\n                color: '255,0,0',\n                tooltip: 'Here a tooltip explaning ...',\n                filters: {\n                  operator: 'PropertyIsEqualTo',\n                  propertyName: 'typeAppareil',\n                  expression: 'Appareil de surveillance au feu rouge'\n                }\n              }]\n            }]\n          },\n          allowedOperatorsType: OgcFilterOperatorType.Basic\n        },\n        paramsWFS: {\n          featureTypes: 'radars_photos',\n          fieldNameGeometry: 'geometry',\n          maxFeatures: 10000,\n          version: '1.1.0',\n          outputFormat: 'geojson',\n          outputFormatDownload: 'shp'\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(filterableWMSwithPushButtons).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Filterable WMS layers with predefined filters (push buttons)',\n          source: dataSource\n        }));\n      }); // const datasourceWmsWith2Layers: WMSoptions = {\n      //   type: 'wms',\n      //   url: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n      //   urlWfs: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n      //   params: {\n      //     layers: 'stations_meteoroutieres,histo_stations_meteoroutieres',\n      //     version: '1.3.0'\n      //   },\n      //   ogcFilters: {\n      //     enabled: true,\n      //     editable: true\n      //   },\n      //   paramsWFS: {\n      //     featureTypes: 'histo_stations_meteoroutieres',\n      //     fieldNameGeometry: 'geometry',\n      //     maxFeatures: 10000,\n      //     version: '1.1.0',\n      //     outputFormat: 'geojson',\n      //     outputFormatDownload: 'shp'\n      //   } as WFSDataSourceOptionsParams\n      // };\n      //\n      // this.dataSourceService\n      //   .createAsyncDataSource(datasourceWmsWith2Layers)\n      //   .subscribe(dataSource => {\n      //     this.map.addLayer(\n      //       this.layerService.createLayer({\n      //         title: 'Layer build from 2 WMS layers',\n      //         source: dataSource\n      //       })\n      //     );\n      //   });\n      // const datasourceWms: WMSoptions = {\n      //   type: 'wms',\n      //   url: '/geoserver/wms',\n      //   urlWfs: '/geoserver/wfs',\n      //   params: {\n      //     LAYERS: 'water_areas',\n      //     VERSION: '1.3.0'\n      //   },\n      //   ogcFilters: {\n      //     enabled: true,\n      //     editable: true,\n      //     filters: {\n      //       operator: 'PropertyIsEqualTo',\n      //       propertyName: 'waterway',\n      //       expression: 'riverbank'\n      //     }\n      //   },\n      //   sourceFields: [\n      //     { name: 'waterway', alias: 'Chemin d eau' },\n      //     { name: 'osm_id' },\n      //     { name: 'landuse', values: ['yes', 'no'] }\n      //   ],\n      //   paramsWFS: {\n      //     featureTypes: 'water_areas',\n      //     fieldNameGeometry: 'the_geom',\n      //     maxFeatures: 10000,\n      //     version: '1.1.0',\n      //     outputFormat: 'application/json',\n      //     outputFormatDownload: 'application/vnd.google-earth.kml+xml'\n      //   } as WFSDataSourceOptionsParams\n      // };\n      //\n      // this.dataSourceService\n      //   .createAsyncDataSource(datasourceWms)\n      //   .subscribe(dataSource => {\n      //     this.map.addLayer(\n      //       this.layerService.createLayer({\n      //         title: 'Geoserver water_areas',\n      //         source: dataSource\n      //       })\n      //     );\n      //   });\n    }\n\n  }\n\n  AppOgcFilterComponent.ɵfac = function AppOgcFilterComponent_Factory(t) {\n    return new (t || AppOgcFilterComponent)(i0.ɵɵdirectiveInject(i1.LanguageService), i0.ɵɵdirectiveInject(i2.DataSourceService), i0.ɵɵdirectiveInject(i2.LayerService));\n  };\n\n  AppOgcFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppOgcFilterComponent,\n    selectors: [[\"app-ogc-filter\"]],\n    decls: 17,\n    vars: 5,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/ogc-filter\"], [3, \"map\", \"view\"], [\"color\", \"primary\", 3, \"map\"], [\"title\", \"Layers\"], [3, \"map\", \"layers\"]],\n    template: function AppOgcFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Ogc filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"Dependencies: LanguageService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" See the \");\n        i0.ɵɵelementStart(10, \"a\", 0);\n        i0.ɵɵtext(11, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"hr\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"igo-map-browser\", 1);\n        i0.ɵɵelement(14, \"igo-zoom-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"igo-panel\", 3);\n        i0.ɵɵelement(16, \"igo-ogc-filterable-list\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"layers\", ctx.map.layers);\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardSubtitle, i3.MatCardTitle, i3.MatCardContent, i2.MapBrowserComponent, i2.ZoomButtonComponent, i4.PanelComponent, i2.OgcFilterableListComponent],\n    styles: [\"igo-map-browser[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 300px;\\n}\\n\\nigo-panel[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding-top: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9nYy1maWx0ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsYUFBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtFQUNBLGlCQUFBO0FBQ0YiLCJmaWxlIjoib2djLWZpbHRlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlnby1tYXAtYnJvd3NlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDMwMHB4O1xufVxuXG5pZ28tcGFuZWwge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZy10b3A6IDEwcHg7XG59XG4iXX0= */\"]\n  });\n  return AppOgcFilterComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\ogc-filter\\ogc-filter.component.ts","C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\ogc-filter\\ogc-filter.component.html"],"names":[],"mappings":"AAEA,SAAS,eAAT,QAAgC,YAAhC;AACA,SACE,MADF,EAEE,iBAFF,EAGE,YAHF,EASE,qBATF,QAWO,WAXP;AAaA,SAAQ,IAAR,EAAc,MAAd,EAAsB,MAAtB,EAA8B,KAA9B,QAA0C,UAA1C;;;;;;AAOA,WAAa,qBAAb;AAAM,QAAO,qBAAP,CAA4B;AAchC,IAAA,WAAA,CACU,eADV,EAEU,iBAFV,EAGU,YAHV,EAGoC;AAF1B,WAAA,eAAA,GAAA,eAAA;AACA,WAAA,iBAAA,GAAA,iBAAA;AACA,WAAA,YAAA,GAAA,YAAA;AAhBH,WAAA,GAAA,GAAM,IAAI,MAAJ,CAAW;AACtB,QAAA,QAAQ,EAAE;AACR,UAAA,WAAW,EAAE;AACX,YAAA,SAAS,EAAE;AADA;AADL;AADY,OAAX,CAAN;AAQA,WAAA,IAAA,GAAO;AACZ,QAAA,MAAM,EAAE,CAAC,CAAC,EAAF,EAAM,IAAN,CADI;AAEZ,QAAA,IAAI,EAAE;AAFM,OAAP;AAUL,WAAK,iBAAL,CACG,qBADH,CACyB;AACrB,QAAA,IAAI,EAAE;AADe,OADzB,EAIG,SAJH,CAIa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,KADqB;AAE5B,UAAA,MAAM,EAAE;AAFoB,SAA9B,CADF;AAMD,OAXH;AAiBA,YAAM,UAAU,GAAe;AAC7B,QAAA,IAAI,EAAE,KADuB;AAE7B,QAAA,GAAG,EAAE,2DAFwB;AAG7B,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAHqB;AAW7B,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,mBAAR;AAA6B,UAAA,KAAK,EAAE;AAApC,SADY,EAEZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,qBAAqB,EAAE;AAAnD,SAFY,EAGZ;AAAE,UAAA,IAAI,EAAE,SAAR;AAAmB,UAAA,MAAM,EAAE,CAAC,WAAD,EAAc,UAAd;AAA3B,SAHY,CAXe;AAgB7B,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EAAE;AACP,YAAA,OAAO,EAAE,IADF;AAEP,YAAA,OAAO,EAAE,CACP;AACE,cAAA,QAAQ,EAAE,mBADZ;AAEE,cAAA,YAAY,EAAE,mBAFhB;AAGE,cAAA,UAAU,EAAE;AAHd,aADO,EAMP;AACE,cAAA,QAAQ,EAAE,YADZ;AAEE,cAAA,YAAY,EAAE,UAFhB;AAGE,cAAA,YAAY,EAAE;;;;;;;;;;;;AAYZ;AAfJ,aANO;AAFF;AAJC;AAhBiB,OAA/B;AAkDA,WAAK,iBAAL,CACG,qBADH,CACyB,UADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,2CADqB;AAE5B,UAAA,MAAM,EAAE,UAFoB;AAG5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,QADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAHqB,SAA9B,CADF;AAkBD,OArBH;AAuBA,YAAM,sBAAsB,GAAe;AACzC,QAAA,IAAI,EAAE,KADmC;AAEzC,QAAA,GAAG,EAAE,2DAFoC;AAGzC,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAHiC;AAWzC,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,2BAHT;AAIE,YAAA,GAAG,EAAE;AAJP;AALQ,SAX6B;AAuBzC,QAAA,OAAO,EAAE,2BAvBgC;AAwBzC,QAAA,OAAO,EAAE,2BAxBgC;AAyBzC,QAAA,QAAQ,EAAE;AAzB+B,OAA3C;AA4BA,WAAK,iBAAL,CACG,qBADH,CACyB,sBADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,6BADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,KADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAyBA,YAAM,0BAA0B,GAAe;AAC7C,QAAA,IAAI,EAAE,KADuC;AAE7C,QAAA,GAAG,EAAE,2DAFwC;AAG7C,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAHqC;AAW7C,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CAX+B;AAc7C,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,2BAHT;AAIE,YAAA,GAAG,EAAE;AAJP;AALQ,SAdiC;AA0B7C,QAAA,OAAO,EAAE,2BA1BoC;AA2B7C,QAAA,OAAO,EAAE,2BA3BoC;AA4B7C,QAAA,QAAQ,EAAE;AA5BmC,OAA/C;AA+BA,WAAK,iBAAL,CACG,qBADH,CACyB,0BADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,8BADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,MADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAwBA,YAAM,+BAA+B,GAAe;AAClD,QAAA,IAAI,EAAE,KAD4C;AAElD,QAAA,GAAG,EAAE,2DAF6C;AAGlD,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAH0C;AAWlD,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CAXoC;AAclD,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,2BAHT;AAIE,YAAA,GAAG,EAAE,2BAJP;AAKE,YAAA,aAAa,EAAE;AALjB;AALQ,SAdsC;AA2BlD,QAAA,OAAO,EAAE,2BA3ByC;AA4BlD,QAAA,OAAO,EAAE,2BA5ByC;AA6BlD,QAAA,QAAQ,EAAE;AA7BwC,OAApD;AAgCA,WAAK,iBAAL,CACG,qBADH,CACyB,+BADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,6BADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,QADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAwBA,YAAM,8BAA8B,GAAe;AACjD,QAAA,IAAI,EAAE,KAD2C;AAEjD,QAAA,GAAG,EAAE,2DAF4C;AAGjD,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAHyC;AAWjD,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CAXmC;AAcjD,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,2BAHT;AAIE,YAAA,GAAG,EAAE,2BAJP;AAKE,YAAA,aAAa,EAAE;AACb,cAAA,QAAQ,EAAE,IADG;AAEb,cAAA,aAAa,EAAE;AAFF,aALjB;AASE,YAAA,aAAa,EAAE;AATjB;AALQ,SAdqC;AA+BjD,QAAA,OAAO,EAAE,2BA/BwC;AAgCjD,QAAA,OAAO,EAAE,2BAhCwC;AAiCjD,QAAA,QAAQ,EAAE;AAjCuC,OAAnD;AAoCA,WAAK,iBAAL,CACG,qBADH,CACyB,8BADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,6BADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,OADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAwBA,YAAM,kCAAkC,GAAe;AACrD,QAAA,IAAI,EAAE,KAD+C;AAErD,QAAA,GAAG,EAAE,2DAFgD;AAGrD,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAH6C;AAWrD,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CAXuC;AAcrD,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,gBAHT;AAIE,YAAA,GAAG,EAAE,OAJP,CAIgB;;AAJhB;AALQ,SAdyC;AA0BrD,QAAA,OAAO,EAAE,2BA1B4C;AA2BrD,QAAA,OAAO,EAAE,2BA3B4C;AA4BrD,QAAA,QAAQ,EAAE;AA5B2C,OAAvD;AA+BA,WAAK,iBAAL,CACG,qBADH,CACyB,kCADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,gDADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,OADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAwBA,YAAM,0CAA0C,GAAe;AAC7D,QAAA,IAAI,EAAE,KADuD;AAE7D,QAAA,GAAG,EAAE,2DAFwD;AAG7D,QAAA,MAAM,EAAE;AACN,UAAA,YAAY,EAAE,6BADR;AAEN,UAAA,iBAAiB,EAAE,UAFb;AAGN,UAAA,WAAW,EAAE,KAHP;AAIN,UAAA,OAAO,EAAE,OAJH;AAKN,UAAA,YAAY,EAAE,SALR;AAMN,UAAA,oBAAoB,EAAE,KANhB,CAMsB;;AANtB,SAHqD;AAW7D,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CAX+C;AAc7D,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC,GAHlC;AAIV,UAAA,OAAO,EACL;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE,kBAFhB;AAGE,YAAA,KAAK,EAAE,qBAHT;AAIE,YAAA,cAAc,EAAE;AAJlB;AALQ,SAdiD;AA0B7D,QAAA,OAAO,EAAE,2BA1BoD;AA2B7D,QAAA,OAAO,EAAE,2BA3BoD;AA4B7D,QAAA,QAAQ,EAAE;AA5BmD,OAA/D;AA+BA,WAAK,iBAAL,CACG,qBADH,CACyB,0CADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,6CADqB;AAE5B,UAAA,EAAE,EAAE,GAFwB;AAG5B,UAAA,MAAM,EAAE,UAHoB;AAI5B,UAAA,KAAK,EAAE,IAAI,KAAJ,CAAU;AACf,YAAA,KAAK,EAAE,IAAI,MAAJ,CAAW;AAChB,cAAA,MAAM,EAAE,CADQ;AAEhB,cAAA,IAAI,EAAE,IAAI,IAAJ,CAAS;AACb,gBAAA,KAAK,EAAE;AADM,eAAT,CAFU;AAKhB,cAAA,MAAM,EAAE,IAAI,MAAJ,CAAW;AACjB,gBAAA,KAAK,EAAE,KADU;AAEjB,gBAAA,KAAK,EAAE;AAFU,eAAX;AALQ,aAAX;AADQ,WAAV;AAJqB,SAA9B,CADF;AAmBD,OAtBH;AAwBA,YAAM,mBAAmB,GAAe;AACpC,QAAA,IAAI,EAAE,KAD8B;AAEpC,QAAA,GAAG,EAAE,2DAF+B;AAGpC,QAAA,uBAAuB,EAAE,IAHW;AAIpC,QAAA,MAAM,EAAE;AACN,UAAA,MAAM,EAAE,6CADF;AAEN,UAAA,OAAO,EAAE;AAFH,SAJ4B;AAQpC,QAAA,YAAY,EAAE,CACZ;AAAE,UAAA,IAAI,EAAE,kBAAR;AAA4B,UAAA,KAAK,EAAE,wBAAnC;AAA6D,UAAA,oBAAoB,EAAE;AAAnF,SADY,CARsB;AAWpC,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,OAAO,EACP;AACE,YAAA,QAAQ,EAAE,QADZ;AAEE,YAAA,YAAY,EAAE;AAFhB,WAJU;AAQV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC;AARlC;AAXwB,OAAxC;AAuBA,WAAK,iBAAL,CACG,qBADH,CACyB,mBADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,8CADqB;AAE5B,UAAA,MAAM,EAAE;AAFoB,SAA9B,CADF;AAMD,OATH;AAeA,YAAM,4BAA4B,GAAe;AAC/C,QAAA,IAAI,EAAE,KADyC;AAE/C,QAAA,GAAG,EAAE,iDAF0C;AAG/C,QAAA,MAAM,EAAE,iDAHuC;AAI/C,QAAA,MAAM,EAAE;AACN,UAAA,MAAM,EAAE,eADF;AAEN,UAAA,OAAO,EAAE;AAFH,SAJuC;AAQ/C,QAAA,UAAU,EAAE;AACV,UAAA,OAAO,EAAE,IADC;AAEV,UAAA,QAAQ,EAAE,IAFA;AAGV,UAAA,WAAW,EAAE;AACX,YAAA,YAAY,EAAE,YADH;AAEX,YAAA,KAAK,EAAE,CAFI;AAGX,YAAA,MAAM,EAAG,CACP;AAAC,cAAA,KAAK,EAAE,sBAAR;AAAgC,cAAA,IAAI,EAAE,UAAtC;AAAkD,cAAA,GAAG,EAAG,CAAC,KAAD;AAAxD,aADO,CAHE;AAMX,YAAA,OAAO,EAAE,CACP;AACE,cAAA,EAAE,EAAE,KADN;AAEE,cAAA,KAAK,EAAE,SAFT;AAGE,cAAA,OAAO,EAAE,IAHX;AAIE,cAAA,QAAQ,EAAE,IAJZ;AAKE,cAAA,SAAS,EAAE,CACT;AACE,gBAAA,KAAK,EAAE,kBADT;AAEE,gBAAA,OAAO,EAAE,KAFX;AAGE,gBAAA,OAAO,EAAE,8BAHX;AAIE,gBAAA,OAAO,EAAE;AACP,kBAAA,OAAO,EAAE,IADF;AAEP,kBAAA,OAAO,EAAE,CACP;AACE,oBAAA,QAAQ,EAAE,mBADZ;AAEE,oBAAA,YAAY,EAAE,QAFhB;AAGE,oBAAA,UAAU,EAAE;AAHd,mBADO,EAMP;AACE,oBAAA,QAAQ,EAAE,mBADZ;AAEE,oBAAA,YAAY,EAAE,QAFhB;AAGE,oBAAA,UAAU,EAAE;AAHd,mBANO;AAFF;AAJX,eADS,EAqBT;AACE,gBAAA,KAAK,EAAE,0BADT;AAEE,gBAAA,OAAO,EAAE,KAFX;AAGE,gBAAA,OAAO,EAAE,8BAHX;AAIE,gBAAA,OAAO,EAAE;AACP,kBAAA,OAAO,EAAE,KADF;AAEP,kBAAA,OAAO,EAAE,CACP;AACE,oBAAA,QAAQ,EAAE,sBADZ;AAEE,oBAAA,YAAY,EAAE,QAFhB;AAGE,oBAAA,UAAU,EAAE;AAHd,mBADO,EAMP;AACE,oBAAA,QAAQ,EAAE,sBADZ;AAEE,oBAAA,YAAY,EAAE,QAFhB;AAGE,oBAAA,UAAU,EAAE;AAHd,mBANO;AAFF;AAJX,eArBS;AALb,aADO;AANE,WAHH;AA4DV,UAAA,UAAU,EAAE;AACV,YAAA,YAAY,EAAE,UADJ;AAEV,YAAA,KAAK,EAAE,CAFG;AAGV,YAAA,MAAM,EAAG,CACP;AAAC,cAAA,KAAK,EAAE,0BAAR;AAAoC,cAAA,IAAI,EAAE,cAA1C;AAA0D,cAAA,GAAG,EAAG,CAAC,KAAD;AAAhE,aADO,CAHC;AAMV,YAAA,OAAO,EAAE,CACP;AACE,cAAA,EAAE,EAAE,KADN;AAEE,cAAA,KAAK,EAAE,qBAFT;AAGE,cAAA,OAAO,EAAE,IAHX;AAIE,cAAA,SAAS,EAAE,CACT;AACE,gBAAA,KAAK,EAAE,kBADT;AAEE,gBAAA,OAAO,EAAE,IAFX;AAGE,gBAAA,OAAO,EAAE,8BAHX;AAIE,gBAAA,OAAO,EAAE;AACP,kBAAA,QAAQ,EAAE,mBADH;AAEP,kBAAA,YAAY,EAAE,cAFP;AAGP,kBAAA,UAAU,EAAE;AAHL;AAJX,eADS,EAWT;AACE,gBAAA,KAAK,EAAE,oBADT;AAEE,gBAAA,OAAO,EAAE,KAFX;AAGE,gBAAA,OAAO,EAAE,8BAHX;AAIE,gBAAA,OAAO,EAAE;AACP,kBAAA,QAAQ,EAAE,mBADH;AAEP,kBAAA,YAAY,EAAE,cAFP;AAGP,kBAAA,UAAU,EAAE;AAHL;AAJX,eAXS,EAqBT;AACE,gBAAA,KAAK,EAAE,8BADT;AAEE,gBAAA,OAAO,EAAE,KAFX;AAGE,gBAAA,KAAK,EAAE,SAHT;AAIE,gBAAA,OAAO,EAAE,8BAJX;AAKE,gBAAA,OAAO,EAAE;AACP,kBAAA,QAAQ,EAAE,mBADH;AAEP,kBAAA,YAAY,EAAE,cAFP;AAGP,kBAAA,UAAU,EAAE;AAHL;AALX,eArBS,EAgCT;AACE,gBAAA,KAAK,EAAE,iBADT;AAEE,gBAAA,OAAO,EAAE,KAFX;AAGE,gBAAA,KAAK,EAAE,SAHT;AAIE,gBAAA,OAAO,EAAE,8BAJX;AAKE,gBAAA,OAAO,EAAE;AACP,kBAAA,QAAQ,EAAE,mBADH;AAEP,kBAAA,YAAY,EAAE,cAFP;AAGP,kBAAA,UAAU,EAAE;AAHL;AALX,eAhCS;AAJb,aADO;AANC,WA5DF;AAsHV,UAAA,oBAAoB,EAAE,qBAAqB,CAAC;AAtHlC,SARmC;AAgI/C,QAAA,SAAS,EAAE;AACT,UAAA,YAAY,EAAE,eADL;AAET,UAAA,iBAAiB,EAAE,UAFV;AAGT,UAAA,WAAW,EAAE,KAHJ;AAIT,UAAA,OAAO,EAAE,OAJA;AAKT,UAAA,YAAY,EAAE,SALL;AAMT,UAAA,oBAAoB,EAAE;AANb;AAhIoC,OAAjD;AA0IA,WAAK,iBAAL,CACG,qBADH,CACyB,4BADzB,EAEG,SAFH,CAEa,UAAU,IAAG;AACtB,aAAK,GAAL,CAAS,QAAT,CACE,KAAK,YAAL,CAAkB,WAAlB,CAA8B;AAC5B,UAAA,KAAK,EAAE,8DADqB;AAE5B,UAAA,MAAM,EAAE;AAFoB,SAA9B,CADF;AAMD,OATH,EA1lBkC,CAqmBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAjsB+B;;;qBAArB,qB,EAAqB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,eAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,iBAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,G;;;UAArB,qB;AAAqB,IAAA,SAAA,EAAA,CAAA,CAAA,gBAAA,CAAA,C;AAAA,IAAA,KAAA,EAAA,E;AAAA,IAAA,IAAA,EAAA,C;AAAA,IAAA,MAAA,EAAA,CAAA,CAAA,MAAA,EAAA,uFAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,QAAA,CAAA,C;AAAA,IAAA,QAAA,EAAA,SAAA,8BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,UAAA,EAAA,GAAA,CAAA,EAAA;ACvBlC,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA;AACE,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,mBAAA;AAAmB,QAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA;AAAG,QAAA,EAAA,CAAA,YAAA;AACtB,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,gBAAA;AAAgB,QAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,YAAA;AAAU,QAAA,EAAA,CAAA,YAAA;AAC1B,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,kBAAA;AACE,QAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA;AAAI,QAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,+BAAA;AAA6B,QAAA,EAAA,CAAA,YAAA;AAEjC,QAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,IAAA;AACA,QAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,WAAA;AAAQ,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA;AAAgG,QAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,sBAAA;AAAoB,QAAA,EAAA,CAAA,YAAA;AAC5H,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,IAAA;AACF,QAAA,EAAA,CAAA,YAAA;AAEA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,CAAA;AACE,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,CAAA;AACF,QAAA,EAAA,CAAA,YAAA;AAEA,QAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,WAAA,EAAA,CAAA;AACE,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,yBAAA,EAAA,CAAA;AAGF,QAAA,EAAA,CAAA,YAAA;AAEF,QAAA,EAAA,CAAA,YAAA;;;;AAVmB,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA;AAAA,QAAA,EAAA,CAAA,UAAA,CAAA,KAAA,EAAA,GAAA,CAAA,GAAA,EAAW,MAAX,EAAW,GAAA,CAAA,IAAX;AACE,QAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,QAAA,EAAA,CAAA,UAAA,CAAA,KAAA,EAAA,GAAA,CAAA,GAAA;AAIQ,QAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,QAAA,EAAA,CAAA,UAAA,CAAA,KAAA,EAAA,GAAA,CAAA,GAAA,EAAW,QAAX,EAAW,GAAA,CAAA,GAAA,CAAA,MAAX;;;;;;ADO7B,SAAa,qBAAb;AAAA","sourcesContent":["import { Component } from '@angular/core';\n\nimport { LanguageService } from '@igo2/core';\nimport {\n  IgoMap,\n  DataSourceService,\n  LayerService,\n  WMSDataSourceOptions,\n  WFSDataSourceOptions,\n  WFSDataSourceOptionsParams,\n  OgcFilterableDataSourceOptions,\n  AnyBaseOgcFilterOptions,\n  OgcFilterOperatorType,\n  OgcFilterDuringOptions\n} from '@igo2/geo';\n\nimport {Fill, Stroke, Circle, Style} from 'ol/style';\n\n@Component({\n  selector: 'app-ogc-filter',\n  templateUrl: './ogc-filter.component.html',\n  styleUrls: ['./ogc-filter.component.scss']\n})\nexport class AppOgcFilterComponent {\n  public map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      }\n    }\n  });\n\n  public view = {\n    center: [-73, 47.2],\n    zoom: 7\n  };\n\n  constructor(\n    private languageService: LanguageService,\n    private dataSourceService: DataSourceService,\n    private layerService: LayerService\n  ) {\n    this.dataSourceService\n      .createAsyncDataSource({\n        type: 'osm'\n      })\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'OSM',\n            source: dataSource\n          })\n        );\n      });\n\n    interface WFSoptions\n      extends WFSDataSourceOptions,\n        OgcFilterableDataSourceOptions {}\n\n    const datasource: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'code_municipalite', alias: '# de la municipalitée' },\n        { name: 'date_observation', excludeFromOgcFilters: true },\n        { name: 'urgence', values: ['immédiate', 'inconnue'] }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters: {\n          logical: 'Or',\n          filters: [\n            {\n              operator: 'PropertyIsEqualTo',\n              propertyName: 'code_municipalite',\n              expression: '10043'\n            },\n            {\n              operator: 'Intersects',\n              geometryName: 'the_geom',\n              wkt_geometry: `MULTIPOLYGON(((\n              -8379441.158019895 5844447.897707146,\n              -8379441.158019895 5936172.331649357,\n              -8134842.66750733 5936172.331649357,\n              -8134842.66750733 5844447.897707146,\n              -8379441.158019895 5844447.897707146\n            ), (\n              -8015003 5942074,\n              -8015003 5780349,\n              -7792364 5780349,\n              -7792364 5942074,\n              -8015003 5942074\n            )))`\n            }\n          ] as AnyBaseOgcFilterOptions[]\n        }\n      }\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasource)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (PropertyIsEqualTo OR Intersects)',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'orange',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const datasourceDuringFilter: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-21T00:00:00-05:00',\n            end: '2016-01-26T00:00:00-05:00'\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2016-01-01T00:00:00-05:00',\n      maxDate: '2016-02-10T00:00:00-05:00',\n      stepDate: 'P2D'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilter)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, Step: P2D)',\n            id: '1',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'red',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n\n    const datasourceDuringFilterTime: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-01T04:00:00-05:00',\n            end: '2016-01-12T16:00:00-05:00'\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2016-01-01T00:00:00-05:00',\n      maxDate: '2016-02-14T20:00:00-05:00',\n      stepDate: 'PT4H'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilterTime)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, Step: PT4H)',\n            id: '2',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'blue',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const datasourceDuringFilterTimeMonth: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2016-01-01T00:00:00-05:00',\n            end: '2016-03-31T00:00:00-05:00',\n            displayFormat: 'MMMM'\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2016-01-01T00:00:00-05:00',\n      maxDate: '2018-12-31T00:00:00-05:00',\n      stepDate: 'P1M'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilterTimeMonth)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, Step: P1M)',\n            id: '3',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'yellow',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const datasourceDuringFilterTimeYear: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2014-01-01T00:00:00-05:00',\n            end: '2019-12-31T00:00:00-05:00',\n            sliderOptions: {\n              interval: 2000,\n              displayFormat: 'YY'\n            },\n            displayFormat: 'YYYY'\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2014-01-01T00:00:00-05:00',\n      maxDate: '2019-12-31T00:00:00-05:00',\n      stepDate: 'P1Y'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilterTimeYear)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, Step: P1Y)',\n            id: '4',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'green',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const datasourceDuringFilterTimeInterval: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: 'today - 2 days', // \"now\" can also be used. Instead of midnight, the current time will be used\n            end: 'today', // \"now\" can also be used. Instead of midnight, the current time will be used\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2016-01-01T00:00:00-05:00',\n      maxDate: '2025-12-31T00:00:00-05:00',\n      stepDate: 'P1D'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilterTimeInterval)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, Interval from Now, Step: P1D)',\n            id: '5',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'white'\n                }),\n                stroke: new Stroke({\n                  color: 'black',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const datasourceDuringFilterTimeRestrictedToStep: WFSoptions = {\n      type: 'wfs',\n      url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n      params: {\n        featureTypes: 'vg_observation_v_autre_wmst',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '2.0.0',\n        outputFormat: undefined,\n        outputFormatDownload: 'SHP' // based on service capabilities\n      },\n      sourceFields: [\n        { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n      ],\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        allowedOperatorsType: OgcFilterOperatorType.All,\n        filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation',\n            begin: '2019-01-01 00:00:00',\n            restrictToStep: true\n          } as OgcFilterDuringOptions\n      },\n      minDate: '2016-01-01T00:00:00-05:00',\n      maxDate: '2025-12-31T00:00:00-05:00',\n      stepDate: 'P1M'\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceDuringFilterTimeRestrictedToStep)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle (During, RestrictToStep, Step: P1M)',\n            id: '6',\n            source: dataSource,\n            style: new Style({\n              image: new Circle({\n                radius: 5,\n                fill: new Fill({\n                  color: 'black'\n                }),\n                stroke: new Stroke({\n                  color: 'red',\n                  width: 1\n                })\n              })\n            })\n          })\n        );\n      });\n\n    const wmsOgcFilterOptions: WMSoptions = {\n        type: 'wms',\n        url: 'https://geoegl.msp.gouv.qc.ca/apis/ws/igo_gouvouvert.fcgi',\n        optionsFromCapabilities: true,\n        params: {\n          LAYERS: 'vg_observation_v_inondation23avril2017_wmst',\n          VERSION: '1.3.0'\n        },\n        sourceFields: [\n          { name: 'date_observation', alias: 'Date de l\\'observation', allowedOperatorsType: 'Time' as OgcFilterOperatorType }\n        ],\n        ogcFilters: {\n          enabled: true,\n          editable: true,\n          filters:\n          {\n            operator: 'During',\n            propertyName: 'date_observation'\n          } as OgcFilterDuringOptions,\n          allowedOperatorsType: OgcFilterOperatorType.Time\n        }\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(wmsOgcFilterOptions)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Inondation (During, optionsFromCapabilities)',\n            source: dataSource\n          })\n        );\n      });\n\n    interface WMSoptions\n      extends WMSDataSourceOptions,\n        OgcFilterableDataSourceOptions {}\n\n    const filterableWMSwithPushButtons: WMSoptions = {\n      type: 'wms',\n      url: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n      urlWfs: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n      params: {\n        LAYERS: 'radars_photos',\n        VERSION: '1.3.0'\n      },\n      ogcFilters: {\n        enabled: true,\n        editable: true,\n        pushButtons: {\n          selectorType: 'pushButton',\n          order: 2,\n          groups : [\n            {title: 'Nom du group1 - push', name: '1 - push', ids : ['id1']},\n          ],\n          bundles: [\n            {\n              id: 'id1',\n              title: 'Régions',\n              logical: 'Or',\n              vertical: true,\n              selectors: [\n                {\n                  title: 'Montréal & Laval',\n                  enabled: false,\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    logical: 'Or',\n                    filters: [\n                      {\n                        operator: 'PropertyIsEqualTo',\n                        propertyName: 'region',\n                        expression: 'Montréal'\n                      },\n                      {\n                        operator: 'PropertyIsEqualTo',\n                        propertyName: 'region',\n                        expression: 'Laval'\n                      }\n                    ]\n                  }\n                },\n                {\n                  title: 'Outside Montréal & Laval',\n                  enabled: false,\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    logical: 'And',\n                    filters: [\n                      {\n                        operator: 'PropertyIsNotEqualTo',\n                        propertyName: 'region',\n                        expression: 'Montréal'\n                      },\n                      {\n                        operator: 'PropertyIsNotEqualTo',\n                        propertyName: 'region',\n                        expression: 'Laval'\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          ]\n        },\n        checkboxes: {\n          selectorType: 'checkbox',\n          order: 1,\n          groups : [\n            {title: 'Nom du group1 - checkbox', name: '1 - checkbox', ids : ['id1']},\n          ],\n          bundles: [\n            {\n              id: 'id1',\n              title: 'Type de radar photo',\n              logical: 'Or',\n              selectors: [\n                {\n                  title: 'Radar photo fixe',\n                  enabled: true,\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'typeAppareil',\n                    expression: 'Radar photo fixe'\n                  }\n                },\n                {\n                  title: 'Radar photo mobile',\n                  enabled: false,\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'typeAppareil',\n                    expression: 'Radar photo mobile'\n                  }\n                },\n                {\n                  title: 'Radar photo fixe + feu rouge',\n                  enabled: false,\n                  color: '0,200,0',\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'typeAppareil',\n                    expression: 'Radar photo fixe et surveillance au feu rouge'\n                  }\n                },\n                {\n                  title: 'Radar feu rouge',\n                  enabled: false,\n                  color: '255,0,0',\n                  tooltip: 'Here a tooltip explaning ...',\n                  filters: {\n                    operator: 'PropertyIsEqualTo',\n                    propertyName: 'typeAppareil',\n                    expression: 'Appareil de surveillance au feu rouge'\n                  }\n                }\n              ]\n            }\n          ]\n        },\n        allowedOperatorsType: OgcFilterOperatorType.Basic\n        },\n      paramsWFS: {\n        featureTypes: 'radars_photos',\n        fieldNameGeometry: 'geometry',\n        maxFeatures: 10000,\n        version: '1.1.0',\n        outputFormat: 'geojson',\n        outputFormatDownload: 'shp'\n      } as WFSDataSourceOptionsParams\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(filterableWMSwithPushButtons)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Filterable WMS layers with predefined filters (push buttons)',\n            source: dataSource\n          })\n        );\n      });\n\n    // const datasourceWmsWith2Layers: WMSoptions = {\n    //   type: 'wms',\n    //   url: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n    //   urlWfs: 'https://ws.mapserver.transports.gouv.qc.ca/swtq',\n    //   params: {\n    //     layers: 'stations_meteoroutieres,histo_stations_meteoroutieres',\n    //     version: '1.3.0'\n    //   },\n    //   ogcFilters: {\n    //     enabled: true,\n    //     editable: true\n    //   },\n    //   paramsWFS: {\n    //     featureTypes: 'histo_stations_meteoroutieres',\n    //     fieldNameGeometry: 'geometry',\n    //     maxFeatures: 10000,\n    //     version: '1.1.0',\n    //     outputFormat: 'geojson',\n    //     outputFormatDownload: 'shp'\n    //   } as WFSDataSourceOptionsParams\n    // };\n    //\n    // this.dataSourceService\n    //   .createAsyncDataSource(datasourceWmsWith2Layers)\n    //   .subscribe(dataSource => {\n    //     this.map.addLayer(\n    //       this.layerService.createLayer({\n    //         title: 'Layer build from 2 WMS layers',\n    //         source: dataSource\n    //       })\n    //     );\n    //   });\n\n    // const datasourceWms: WMSoptions = {\n    //   type: 'wms',\n    //   url: '/geoserver/wms',\n    //   urlWfs: '/geoserver/wfs',\n    //   params: {\n    //     LAYERS: 'water_areas',\n    //     VERSION: '1.3.0'\n    //   },\n    //   ogcFilters: {\n    //     enabled: true,\n    //     editable: true,\n    //     filters: {\n    //       operator: 'PropertyIsEqualTo',\n    //       propertyName: 'waterway',\n    //       expression: 'riverbank'\n    //     }\n    //   },\n    //   sourceFields: [\n    //     { name: 'waterway', alias: 'Chemin d eau' },\n    //     { name: 'osm_id' },\n    //     { name: 'landuse', values: ['yes', 'no'] }\n    //   ],\n    //   paramsWFS: {\n    //     featureTypes: 'water_areas',\n    //     fieldNameGeometry: 'the_geom',\n    //     maxFeatures: 10000,\n    //     version: '1.1.0',\n    //     outputFormat: 'application/json',\n    //     outputFormatDownload: 'application/vnd.google-earth.kml+xml'\n    //   } as WFSDataSourceOptionsParams\n    // };\n    //\n    // this.dataSourceService\n    //   .createAsyncDataSource(datasourceWms)\n    //   .subscribe(dataSource => {\n    //     this.map.addLayer(\n    //       this.layerService.createLayer({\n    //         title: 'Geoserver water_areas',\n    //         source: dataSource\n    //       })\n    //     );\n    //   });\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Ogc filter</mat-card-title>\n  <mat-card-content>\n    <li>Dependencies: LanguageService</li>\n\n    <br>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/ogc-filter\">code of this example</a>\n    <hr>\n  </mat-card-content>\n\n  <igo-map-browser [map]=\"map\" [view]=\"view\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n  </igo-map-browser>\n\n  <igo-panel title=\"Layers\">\n    <igo-ogc-filterable-list [map]=\"map\" [layers]=\"map.layers\">\n\n    </igo-ogc-filterable-list>\n  </igo-panel>\n\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}