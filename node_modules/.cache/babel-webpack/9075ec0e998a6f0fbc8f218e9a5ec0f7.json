{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\n\nvar RBush = function () {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n\n\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n\n\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value); // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n\n\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n\n\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n\n\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n\n\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n\n\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n\n\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n\n  return RBush;\n}();\n\nexport default RBush;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/structs/RBush.js"],"names":["RBush_","createOrUpdate","equals","getUid","isEmpty","RBush","opt_maxEntries","rbush_","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","forEach_","forEachInExtent","result","clear","getExtent","opt_extent","data","toJSON","concat","rbush"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,OAAnB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,cAAvC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAkB,YAAY;AACnC;AACJ;AACA;AACI,WAASA,KAAT,CAAeC,cAAf,EAA+B;AAC3B;AACR;AACA;AACQ,SAAKC,MAAL,GAAc,IAAIP,MAAJ,CAAWM,cAAX,CAAd;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKE,MAAL,GAAc,EAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIH,EAAAA,KAAK,CAACI,SAAN,CAAgBC,MAAhB,GAAyB,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC9C;AACA,QAAIC,IAAI,GAAG;AACPC,MAAAA,IAAI,EAAEH,MAAM,CAAC,CAAD,CADL;AAEPI,MAAAA,IAAI,EAAEJ,MAAM,CAAC,CAAD,CAFL;AAGPK,MAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD,CAHL;AAIPM,MAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD,CAJL;AAKPC,MAAAA,KAAK,EAAEA;AALA,KAAX;AAOA,SAAKL,MAAL,CAAYG,MAAZ,CAAmBG,IAAnB;AACA,SAAKL,MAAL,CAAYL,MAAM,CAACS,KAAD,CAAlB,IAA6BC,IAA7B;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;;;AACIR,EAAAA,KAAK,CAACI,SAAN,CAAgBS,IAAhB,GAAuB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC9C,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,MAAM,CAACG,MAAjB,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,MAAM,CAACG,MAA3B,EAAmCC,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAIb,MAAM,GAAGQ,OAAO,CAACK,CAAD,CAApB;AACA,UAAIZ,KAAK,GAAGQ,MAAM,CAACI,CAAD,CAAlB;AACA;;AACA,UAAIX,IAAI,GAAG;AACPC,QAAAA,IAAI,EAAEH,MAAM,CAAC,CAAD,CADL;AAEPI,QAAAA,IAAI,EAAEJ,MAAM,CAAC,CAAD,CAFL;AAGPK,QAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD,CAHL;AAIPM,QAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD,CAJL;AAKPC,QAAAA,KAAK,EAAEA;AALA,OAAX;AAOAS,MAAAA,KAAK,CAACG,CAAD,CAAL,GAAWX,IAAX;AACA,WAAKL,MAAL,CAAYL,MAAM,CAACS,KAAD,CAAlB,IAA6BC,IAA7B;AACH;;AACD,SAAKN,MAAL,CAAYW,IAAZ,CAAiBG,KAAjB;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;;;AACIhB,EAAAA,KAAK,CAACI,SAAN,CAAgBiB,MAAhB,GAAyB,UAAUd,KAAV,EAAiB;AACtC,QAAIe,GAAG,GAAGxB,MAAM,CAACS,KAAD,CAAhB,CADsC,CAEtC;AACA;;AACA,QAAIC,IAAI,GAAG,KAAKL,MAAL,CAAYmB,GAAZ,CAAX;AACA,WAAO,KAAKnB,MAAL,CAAYmB,GAAZ,CAAP;AACA,WAAO,KAAKpB,MAAL,CAAYmB,MAAZ,CAAmBb,IAAnB,MAA6B,IAApC;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIR,EAAAA,KAAK,CAACI,SAAN,CAAgBmB,MAAhB,GAAyB,UAAUjB,MAAV,EAAkBC,KAAlB,EAAyB;AAC9C,QAAIC,IAAI,GAAG,KAAKL,MAAL,CAAYL,MAAM,CAACS,KAAD,CAAlB,CAAX;AACA,QAAIiB,IAAI,GAAG,CAAChB,IAAI,CAACC,IAAN,EAAYD,IAAI,CAACE,IAAjB,EAAuBF,IAAI,CAACG,IAA5B,EAAkCH,IAAI,CAACI,IAAvC,CAAX;;AACA,QAAI,CAACf,MAAM,CAAC2B,IAAD,EAAOlB,MAAP,CAAX,EAA2B;AACvB,WAAKe,MAAL,CAAYd,KAAZ;AACA,WAAKF,MAAL,CAAYC,MAAZ,EAAoBC,KAApB;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;;;AACIP,EAAAA,KAAK,CAACI,SAAN,CAAgBqB,MAAhB,GAAyB,YAAY;AACjC,QAAIT,KAAK,GAAG,KAAKd,MAAL,CAAYwB,GAAZ,EAAZ;AACA,WAAOV,KAAK,CAACW,GAAN,CAAU,UAAUnB,IAAV,EAAgB;AAC7B,aAAOA,IAAI,CAACD,KAAZ;AACH,KAFM,CAAP;AAGH,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,KAAK,CAACI,SAAN,CAAgBwB,WAAhB,GAA8B,UAAUtB,MAAV,EAAkB;AAC5C;AACA,QAAIkB,IAAI,GAAG;AACPf,MAAAA,IAAI,EAAEH,MAAM,CAAC,CAAD,CADL;AAEPI,MAAAA,IAAI,EAAEJ,MAAM,CAAC,CAAD,CAFL;AAGPK,MAAAA,IAAI,EAAEL,MAAM,CAAC,CAAD,CAHL;AAIPM,MAAAA,IAAI,EAAEN,MAAM,CAAC,CAAD;AAJL,KAAX;AAMA,QAAIU,KAAK,GAAG,KAAKd,MAAL,CAAY2B,MAAZ,CAAmBL,IAAnB,CAAZ;AACA,WAAOR,KAAK,CAACW,GAAN,CAAU,UAAUnB,IAAV,EAAgB;AAC7B,aAAOA,IAAI,CAACD,KAAZ;AACH,KAFM,CAAP;AAGH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,KAAK,CAACI,SAAN,CAAgB0B,OAAhB,GAA0B,UAAUC,QAAV,EAAoB;AAC1C,WAAO,KAAKC,QAAL,CAAc,KAAKP,MAAL,EAAd,EAA6BM,QAA7B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,KAAK,CAACI,SAAN,CAAgB6B,eAAhB,GAAkC,UAAU3B,MAAV,EAAkByB,QAAlB,EAA4B;AAC1D,WAAO,KAAKC,QAAL,CAAc,KAAKJ,WAAL,CAAiBtB,MAAjB,CAAd,EAAwCyB,QAAxC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,KAAK,CAACI,SAAN,CAAgB4B,QAAhB,GAA2B,UAAUjB,MAAV,EAAkBgB,QAAlB,EAA4B;AACnD,QAAIG,MAAJ;;AACA,SAAK,IAAIf,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,MAAM,CAACG,MAA3B,EAAmCC,CAAC,GAAGC,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3Ce,MAAAA,MAAM,GAAGH,QAAQ,CAAChB,MAAM,CAACI,CAAD,CAAP,CAAjB;;AACA,UAAIe,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;AACJ;;AACD,WAAOA,MAAP;AACH,GATD;AAUA;AACJ;AACA;;;AACIlC,EAAAA,KAAK,CAACI,SAAN,CAAgBL,OAAhB,GAA0B,YAAY;AAClC,WAAOA,OAAO,CAAC,KAAKI,MAAN,CAAd;AACH,GAFD;AAGA;AACJ;AACA;;;AACIH,EAAAA,KAAK,CAACI,SAAN,CAAgB+B,KAAhB,GAAwB,YAAY;AAChC,SAAKjC,MAAL,CAAYiC,KAAZ;AACA,SAAKhC,MAAL,GAAc,EAAd;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIH,EAAAA,KAAK,CAACI,SAAN,CAAgBgC,SAAhB,GAA4B,UAAUC,UAAV,EAAsB;AAC9C,QAAIC,IAAI,GAAG,KAAKpC,MAAL,CAAYqC,MAAZ,EAAX;AACA,WAAO3C,cAAc,CAAC0C,IAAI,CAAC7B,IAAN,EAAY6B,IAAI,CAAC5B,IAAjB,EAAuB4B,IAAI,CAAC3B,IAA5B,EAAkC2B,IAAI,CAAC1B,IAAvC,EAA6CyB,UAA7C,CAArB;AACH,GAHD;AAIA;AACJ;AACA;;;AACIrC,EAAAA,KAAK,CAACI,SAAN,CAAgBoC,MAAhB,GAAyB,UAAUC,KAAV,EAAiB;AACtC,SAAKvC,MAAL,CAAYW,IAAZ,CAAiB4B,KAAK,CAACvC,MAAN,CAAawB,GAAb,EAAjB;;AACA,SAAK,IAAIP,CAAT,IAAcsB,KAAK,CAACtC,MAApB,EAA4B;AACxB,WAAKA,MAAL,CAAYgB,CAAZ,IAAiBsB,KAAK,CAACtC,MAAN,CAAagB,CAAb,CAAjB;AACH;AACJ,GALD;;AAMA,SAAOnB,KAAP;AACH,CAjL0B,EAA3B;;AAkLA,eAAeA,KAAf","sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /** @class */ (function () {\n    /**\n     * @param {number} [opt_maxEntries] Max entries.\n     */\n    function RBush(opt_maxEntries) {\n        /**\n         * @private\n         */\n        this.rbush_ = new RBush_(opt_maxEntries);\n        /**\n         * A mapping between the objects added to this rbush wrapper\n         * and the objects that are actually added to the internal rbush.\n         * @private\n         * @type {Object<string, Entry>}\n         */\n        this.items_ = {};\n    }\n    /**\n     * Insert a value into the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.insert = function (extent, value) {\n        /** @type {Entry} */\n        var item = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n            value: value,\n        };\n        this.rbush_.insert(item);\n        this.items_[getUid(value)] = item;\n    };\n    /**\n     * Bulk-insert values into the RBush.\n     * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n     * @param {Array<T>} values Values.\n     */\n    RBush.prototype.load = function (extents, values) {\n        var items = new Array(values.length);\n        for (var i = 0, l = values.length; i < l; i++) {\n            var extent = extents[i];\n            var value = values[i];\n            /** @type {Entry} */\n            var item = {\n                minX: extent[0],\n                minY: extent[1],\n                maxX: extent[2],\n                maxY: extent[3],\n                value: value,\n            };\n            items[i] = item;\n            this.items_[getUid(value)] = item;\n        }\n        this.rbush_.load(items);\n    };\n    /**\n     * Remove a value from the RBush.\n     * @param {T} value Value.\n     * @return {boolean} Removed.\n     */\n    RBush.prototype.remove = function (value) {\n        var uid = getUid(value);\n        // get the object in which the value was wrapped when adding to the\n        // internal rbush. then use that object to do the removal.\n        var item = this.items_[uid];\n        delete this.items_[uid];\n        return this.rbush_.remove(item) !== null;\n    };\n    /**\n     * Update the extent of a value in the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n    RBush.prototype.update = function (extent, value) {\n        var item = this.items_[getUid(value)];\n        var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n        if (!equals(bbox, extent)) {\n            this.remove(value);\n            this.insert(extent, value);\n        }\n    };\n    /**\n     * Return all values in the RBush.\n     * @return {Array<T>} All.\n     */\n    RBush.prototype.getAll = function () {\n        var items = this.rbush_.all();\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Return all values in the given extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {Array<T>} All in extent.\n     */\n    RBush.prototype.getInExtent = function (extent) {\n        /** @type {Entry} */\n        var bbox = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n        };\n        var items = this.rbush_.search(bbox);\n        return items.map(function (item) {\n            return item.value;\n        });\n    };\n    /**\n     * Calls a callback function with each value in the tree.\n     * If the callback returns a truthy value, this value is returned without\n     * checking the rest of the tree.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach = function (callback) {\n        return this.forEach_(this.getAll(), callback);\n    };\n    /**\n     * Calls a callback function with each value in the provided extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEachInExtent = function (extent, callback) {\n        return this.forEach_(this.getInExtent(extent), callback);\n    };\n    /**\n     * @param {Array<T>} values Values.\n     * @param {function(T): *} callback Callback.\n     * @private\n     * @return {*} Callback return value.\n     */\n    RBush.prototype.forEach_ = function (values, callback) {\n        var result;\n        for (var i = 0, l = values.length; i < l; i++) {\n            result = callback(values[i]);\n            if (result) {\n                return result;\n            }\n        }\n        return result;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    RBush.prototype.isEmpty = function () {\n        return isEmpty(this.items_);\n    };\n    /**\n     * Remove all values from the RBush.\n     */\n    RBush.prototype.clear = function () {\n        this.rbush_.clear();\n        this.items_ = {};\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n    RBush.prototype.getExtent = function (opt_extent) {\n        var data = this.rbush_.toJSON();\n        return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n    };\n    /**\n     * @param {RBush} rbush R-Tree.\n     */\n    RBush.prototype.concat = function (rbush) {\n        this.rbush_.load(rbush.rbush_.all());\n        for (var i in rbush.items_) {\n            this.items_[i] = rbush.items_[i];\n        }\n    };\n    return RBush;\n}());\nexport default RBush;\n"]},"metadata":{},"sourceType":"module"}