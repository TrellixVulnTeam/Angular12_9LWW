{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\n\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\n\nvar PriorityQueue = function () {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  function PriorityQueue(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n\n    this.keyFunction_ = keyFunction;\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n\n    this.elements_ = [];\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    this.priorities_ = [];\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n\n    this.queuedElements_ = {};\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  PriorityQueue.prototype.clear = function () {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  };\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n\n\n  PriorityQueue.prototype.dequeue = function () {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[0];\n\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n\n    var elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  };\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n\n\n  PriorityQueue.prototype.enqueue = function (element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n\n    var priority = this.priorityFunction_(element);\n\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @return {number} Count.\n   */\n\n\n  PriorityQueue.prototype.getCount = function () {\n    return this.elements_.length;\n  };\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n\n\n  PriorityQueue.prototype.getLeftChildIndex_ = function (index) {\n    return index * 2 + 1;\n  };\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n\n\n  PriorityQueue.prototype.getRightChildIndex_ = function (index) {\n    return index * 2 + 2;\n  };\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n\n\n  PriorityQueue.prototype.getParentIndex_ = function (index) {\n    return index - 1 >> 1;\n  };\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n\n\n  PriorityQueue.prototype.heapify_ = function () {\n    var i;\n\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  PriorityQueue.prototype.isEmpty = function () {\n    return this.elements_.length === 0;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n\n\n  PriorityQueue.prototype.isKeyQueued = function (key) {\n    return key in this.queuedElements_;\n  };\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n\n\n  PriorityQueue.prototype.isQueued = function (element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  };\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n\n\n  PriorityQueue.prototype.siftUp_ = function (index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var count = elements.length;\n    var element = elements[index];\n    var priority = priorities[index];\n    var startIndex = index;\n\n    while (index < count >> 1) {\n      var lIndex = this.getLeftChildIndex_(index);\n      var rIndex = this.getRightChildIndex_(index);\n      var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  };\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n\n\n  PriorityQueue.prototype.siftDown_ = function (startIndex, index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[index];\n    var priority = priorities[index];\n\n    while (index > startIndex) {\n      var parentIndex = this.getParentIndex_(index);\n\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  PriorityQueue.prototype.reprioritize = function () {\n    var priorityFunction = this.priorityFunction_;\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var index = 0;\n    var n = elements.length;\n    var element, i, priority;\n\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  };\n\n  return PriorityQueue;\n}();\n\nexport default PriorityQueue;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/structs/PriorityQueue.js"],"names":["assert","clear","DROP","Infinity","PriorityQueue","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","prototype","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * @param {function(T): number} priorityFunction Priority function.\n     * @param {function(T): string} keyFunction Key function.\n     */\n    function PriorityQueue(priorityFunction, keyFunction) {\n        /**\n         * @type {function(T): number}\n         * @private\n         */\n        this.priorityFunction_ = priorityFunction;\n        /**\n         * @type {function(T): string}\n         * @private\n         */\n        this.keyFunction_ = keyFunction;\n        /**\n         * @type {Array<T>}\n         * @private\n         */\n        this.elements_ = [];\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this.priorities_ = [];\n        /**\n         * @type {!Object<string, boolean>}\n         * @private\n         */\n        this.queuedElements_ = {};\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.elements_.length = 0;\n        this.priorities_.length = 0;\n        clear(this.queuedElements_);\n    };\n    /**\n     * Remove and return the highest-priority element. O(log N).\n     * @return {T} Element.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var element = elements[0];\n        if (elements.length == 1) {\n            elements.length = 0;\n            priorities.length = 0;\n        }\n        else {\n            elements[0] = elements.pop();\n            priorities[0] = priorities.pop();\n            this.siftUp_(0);\n        }\n        var elementKey = this.keyFunction_(element);\n        delete this.queuedElements_[elementKey];\n        return element;\n    };\n    /**\n     * Enqueue an element. O(log N).\n     * @param {T} element Element.\n     * @return {boolean} The element was added to the queue.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n        var priority = this.priorityFunction_(element);\n        if (priority != DROP) {\n            this.elements_.push(element);\n            this.priorities_.push(priority);\n            this.queuedElements_[this.keyFunction_(element)] = true;\n            this.siftDown_(0, this.elements_.length - 1);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @return {number} Count.\n     */\n    PriorityQueue.prototype.getCount = function () {\n        return this.elements_.length;\n    };\n    /**\n     * Gets the index of the left child of the node at the given index.\n     * @param {number} index The index of the node to get the left child for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    PriorityQueue.prototype.getLeftChildIndex_ = function (index) {\n        return index * 2 + 1;\n    };\n    /**\n     * Gets the index of the right child of the node at the given index.\n     * @param {number} index The index of the node to get the right child for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    PriorityQueue.prototype.getRightChildIndex_ = function (index) {\n        return index * 2 + 2;\n    };\n    /**\n     * Gets the index of the parent of the node at the given index.\n     * @param {number} index The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    PriorityQueue.prototype.getParentIndex_ = function (index) {\n        return (index - 1) >> 1;\n    };\n    /**\n     * Make this a heap. O(N).\n     * @private\n     */\n    PriorityQueue.prototype.heapify_ = function () {\n        var i;\n        for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n            this.siftUp_(i);\n        }\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.elements_.length === 0;\n    };\n    /**\n     * @param {string} key Key.\n     * @return {boolean} Is key queued.\n     */\n    PriorityQueue.prototype.isKeyQueued = function (key) {\n        return key in this.queuedElements_;\n    };\n    /**\n     * @param {T} element Element.\n     * @return {boolean} Is queued.\n     */\n    PriorityQueue.prototype.isQueued = function (element) {\n        return this.isKeyQueued(this.keyFunction_(element));\n    };\n    /**\n     * @param {number} index The index of the node to move down.\n     * @private\n     */\n    PriorityQueue.prototype.siftUp_ = function (index) {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var count = elements.length;\n        var element = elements[index];\n        var priority = priorities[index];\n        var startIndex = index;\n        while (index < count >> 1) {\n            var lIndex = this.getLeftChildIndex_(index);\n            var rIndex = this.getRightChildIndex_(index);\n            var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex]\n                ? rIndex\n                : lIndex;\n            elements[index] = elements[smallerChildIndex];\n            priorities[index] = priorities[smallerChildIndex];\n            index = smallerChildIndex;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n        this.siftDown_(startIndex, index);\n    };\n    /**\n     * @param {number} startIndex The index of the root.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    PriorityQueue.prototype.siftDown_ = function (startIndex, index) {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var element = elements[index];\n        var priority = priorities[index];\n        while (index > startIndex) {\n            var parentIndex = this.getParentIndex_(index);\n            if (priorities[parentIndex] > priority) {\n                elements[index] = elements[parentIndex];\n                priorities[index] = priorities[parentIndex];\n                index = parentIndex;\n            }\n            else {\n                break;\n            }\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    PriorityQueue.prototype.reprioritize = function () {\n        var priorityFunction = this.priorityFunction_;\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var index = 0;\n        var n = elements.length;\n        var element, i, priority;\n        for (i = 0; i < n; ++i) {\n            element = elements[i];\n            priority = priorityFunction(element);\n            if (priority == DROP) {\n                delete this.queuedElements_[this.keyFunction_(element)];\n            }\n            else {\n                priorities[index] = priority;\n                elements[index++] = element;\n            }\n        }\n        elements.length = index;\n        priorities.length = index;\n        this.heapify_();\n    };\n    return PriorityQueue;\n}());\nexport default PriorityQueue;\n"]},"metadata":{},"sourceType":"module"}