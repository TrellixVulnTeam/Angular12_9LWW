{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\n\nvar IconImageCache = function () {\n  function IconImageCache() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.cacheSize_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    this.maxCacheSize_ = 32;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n\n\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n\n\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n\n\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n\n\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\n\n\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\n\nexport var shared = new IconImageCache();","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/style/IconImageCache.js"],"names":["asString","IconImageCache","cache_","cacheSize_","maxCacheSize_","prototype","clear","canExpireCache","expire","i","key","iconImage","hasListener","get","src","crossOrigin","color","getKey","set","setSize","maxCacheSize","colorString","shared"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,aAAzB;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAkB,YAAY;AAC5C,WAASA,cAAT,GAA0B;AACtB;AACR;AACA;AACA;AACQ,SAAKC,MAAL,GAAc,EAAd;AACA;AACR;AACA;AACA;;AACQ,SAAKC,UAAL,GAAkB,CAAlB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,aAAL,GAAqB,EAArB;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,cAAc,CAACI,SAAf,CAAyBC,KAAzB,GAAiC,YAAY;AACzC,SAAKJ,MAAL,GAAc,EAAd;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH,GAHD;AAIA;AACJ;AACA;;;AACIF,EAAAA,cAAc,CAACI,SAAf,CAAyBE,cAAzB,GAA0C,YAAY;AAClD,WAAO,KAAKJ,UAAL,GAAkB,KAAKC,aAA9B;AACH,GAFD;AAGA;AACJ;AACA;;;AACIH,EAAAA,cAAc,CAACI,SAAf,CAAyBG,MAAzB,GAAkC,YAAY;AAC1C,QAAI,KAAKD,cAAL,EAAJ,EAA2B;AACvB,UAAIE,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIC,GAAT,IAAgB,KAAKR,MAArB,EAA6B;AACzB,YAAIS,SAAS,GAAG,KAAKT,MAAL,CAAYQ,GAAZ,CAAhB;;AACA,YAAI,CAACD,CAAC,KAAK,CAAP,MAAc,CAAd,IAAmB,CAACE,SAAS,CAACC,WAAV,EAAxB,EAAiD;AAC7C,iBAAO,KAAKV,MAAL,CAAYQ,GAAZ,CAAP;AACA,YAAE,KAAKP,UAAP;AACH;AACJ;AACJ;AACJ,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,cAAc,CAACI,SAAf,CAAyBQ,GAAzB,GAA+B,UAAUC,GAAV,EAAeC,WAAf,EAA4BC,KAA5B,EAAmC;AAC9D,QAAIN,GAAG,GAAGO,MAAM,CAACH,GAAD,EAAMC,WAAN,EAAmBC,KAAnB,CAAhB;AACA,WAAON,GAAG,IAAI,KAAKR,MAAZ,GAAqB,KAAKA,MAAL,CAAYQ,GAAZ,CAArB,GAAwC,IAA/C;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,cAAc,CAACI,SAAf,CAAyBa,GAAzB,GAA+B,UAAUJ,GAAV,EAAeC,WAAf,EAA4BC,KAA5B,EAAmCL,SAAnC,EAA8C;AACzE,QAAID,GAAG,GAAGO,MAAM,CAACH,GAAD,EAAMC,WAAN,EAAmBC,KAAnB,CAAhB;AACA,SAAKd,MAAL,CAAYQ,GAAZ,IAAmBC,SAAnB;AACA,MAAE,KAAKR,UAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,cAAc,CAACI,SAAf,CAAyBc,OAAzB,GAAmC,UAAUC,YAAV,EAAwB;AACvD,SAAKhB,aAAL,GAAqBgB,YAArB;AACA,SAAKZ,MAAL;AACH,GAHD;;AAIA,SAAOP,cAAP;AACH,CA/EmC,EAApC;AAgFA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,MAAT,CAAgBH,GAAhB,EAAqBC,WAArB,EAAkCC,KAAlC,EAAyC;AACrC,MAAIK,WAAW,GAAGL,KAAK,GAAGhB,QAAQ,CAACgB,KAAD,CAAX,GAAqB,MAA5C;AACA,SAAOD,WAAW,GAAG,GAAd,GAAoBD,GAApB,GAA0B,GAA1B,GAAgCO,WAAvC;AACH;;AACD,eAAepB,cAAf;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIqB,MAAM,GAAG,IAAIrB,cAAJ,EAAb","sourcesContent":["/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.\n */\nvar IconImageCache = /** @class */ (function () {\n    function IconImageCache() {\n        /**\n         * @type {!Object<string, import(\"./IconImage.js\").default>}\n         * @private\n         */\n        this.cache_ = {};\n        /**\n         * @type {number}\n         * @private\n         */\n        this.cacheSize_ = 0;\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCacheSize_ = 32;\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.clear = function () {\n        this.cache_ = {};\n        this.cacheSize_ = 0;\n    };\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    IconImageCache.prototype.canExpireCache = function () {\n        return this.cacheSize_ > this.maxCacheSize_;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.expire = function () {\n        if (this.canExpireCache()) {\n            var i = 0;\n            for (var key in this.cache_) {\n                var iconImage = this.cache_[key];\n                if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n                    delete this.cache_[key];\n                    --this.cacheSize_;\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @return {import(\"./IconImage.js\").default} Icon image.\n     */\n    IconImageCache.prototype.get = function (src, crossOrigin, color) {\n        var key = getKey(src, crossOrigin, color);\n        return key in this.cache_ ? this.cache_[key] : null;\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n     */\n    IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n        var key = getKey(src, crossOrigin, color);\n        this.cache_[key] = iconImage;\n        ++this.cacheSize_;\n    };\n    /**\n     * Set the cache size of the icon cache. Default is `32`. Change this value when\n     * your map uses more than 32 different icon images and you are not caching icon\n     * styles on the application level.\n     * @param {number} maxCacheSize Cache max size.\n     * @api\n     */\n    IconImageCache.prototype.setSize = function (maxCacheSize) {\n        this.maxCacheSize_ = maxCacheSize;\n        this.expire();\n    };\n    return IconImageCache;\n}());\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n    var colorString = color ? asString(color) : 'null';\n    return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();\n"]},"metadata":{},"sourceType":"module"}