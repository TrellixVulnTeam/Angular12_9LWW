{"ast":null,"code":"import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet MatDivider = /*#__PURE__*/(() => {\n  class MatDivider {\n    constructor() {\n      this._vertical = false;\n      this._inset = false;\n    }\n    /** Whether the divider is vertically aligned. */\n\n\n    get vertical() {\n      return this._vertical;\n    }\n\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** Whether the divider is an inset divider. */\n\n\n    get inset() {\n      return this._inset;\n    }\n\n    set inset(value) {\n      this._inset = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MatDivider.ɵfac = function MatDivider_Factory(t) {\n    return new (t || MatDivider)();\n  };\n\n  MatDivider.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDivider,\n    selectors: [[\"mat-divider\"]],\n    hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"],\n    hostVars: 7,\n    hostBindings: function MatDivider_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n      }\n    },\n    inputs: {\n      vertical: \"vertical\",\n      inset: \"inset\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function MatDivider_Template(rf, ctx) {},\n    styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDivider;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatDividerModule = /*#__PURE__*/(() => {\n  class MatDividerModule {}\n\n  MatDividerModule.ɵfac = function MatDividerModule_Factory(t) {\n    return new (t || MatDividerModule)();\n  };\n\n  MatDividerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatDividerModule\n  });\n  MatDividerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatCommonModule], MatCommonModule]\n  });\n  return MatDividerModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, {\n    declarations: function () {\n      return [MatDivider];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatDivider, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatDivider, MatDividerModule };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/divider.js"],"names":["Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","coerceBooleanProperty","MatCommonModule","ɵngcc0","MatDivider","constructor","_vertical","_inset","vertical","value","inset","ɵfac","MatDivider_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDivider_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","inputs","decls","vars","template","MatDivider_Template","styles","encapsulation","changeDetection","ngDevMode","MatDividerModule","MatDividerModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /** Whether the divider is vertically aligned. */\n    get vertical() { return this._vertical; }\n    set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n    /** Whether the divider is an inset divider. */\n    get inset() { return this._inset; }\n    set inset(value) { this._inset = coerceBooleanProperty(value); }\n}\nMatDivider.ɵfac = function MatDivider_Factory(t) { return new (t || MatDivider)(); };\nMatDivider.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDivider, selectors: [[\"mat-divider\"]], hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"], hostVars: 7, hostBindings: function MatDivider_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n    } }, inputs: { vertical: \"vertical\", inset: \"inset\" }, decls: 0, vars: 0, template: function MatDivider_Template(rf, ctx) { }, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatDivider.propDecorators = {\n    vertical: [{ type: Input }],\n    inset: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDivider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }]\n    }], function () { return []; }, { vertical: [{\n            type: Input\n        }], inset: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDividerModule {\n}\nMatDividerModule.ɵfac = function MatDividerModule_Factory(t) { return new (t || MatDividerModule)(); };\nMatDividerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDividerModule });\nMatDividerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, { declarations: function () { return [MatDivider]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatDivider, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n\n"]},"metadata":{},"sourceType":"module"}