{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\n\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\"; // SHA-256 hashing algorithm\n\nvar S256_HASH_ALG = \"SHA-256\"; // MOD length for PoP tokens\n\nvar MODULUS_LENGTH = 2048; // Public Exponent\n\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\n\nvar BrowserCrypto = function () {\n  function BrowserCrypto() {\n    if (!this.hasCryptoAPI()) {\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto or msCrypto object not available.\");\n    }\n\n    this._keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n\n\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        return [2\n        /*return*/\n        , this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n\n\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    var cryptoObj = window[\"msCrypto\"] || window.crypto;\n\n    if (!cryptoObj.getRandomValues) {\n      throw BrowserAuthError.createCryptoNotAvailableError(\"getRandomValues does not exist.\");\n    }\n\n    cryptoObj.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.hasIECrypto() ? this.msCryptoGenerateKey(extractable, usages) : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n\n\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyString, keyBuffer;\n      return __generator(this, function (_a) {\n        keyString = BrowserCrypto.getJwkString(key);\n        keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);\n        return [2\n        /*return*/\n        , this.hasIECrypto() ? this.msCryptoImportKey(keyBuffer, extractable, usages) : window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.hasIECrypto() ? this.msCryptoSign(key, data) : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasCryptoAPI = function () {\n    return this.hasIECrypto() || this.hasBrowserCrypto();\n  };\n  /**\r\n   * Checks whether IE crypto (AKA msCrypto) is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n\n\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Helper function for SHA digest.\r\n   * @param algorithm\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.getSubtleCryptoDigest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n  /**\r\n   * IE Helper function for SHA digest.\r\n   * @param algorithm\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.getMSCryptoDigest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var digestOperation = window[\"msCrypto\"].subtle.digest(algorithm, data.buffer);\n          digestOperation.addEventListener(\"complete\", function (e) {\n            resolve(e.target.result);\n          });\n          digestOperation.addEventListener(\"error\", function (error) {\n            reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * IE Helper function for generating a keypair\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.msCryptoGenerateKey = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var msGenerateKey = window[\"msCrypto\"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);\n          msGenerateKey.addEventListener(\"complete\", function (e) {\n            resolve(e.target.result);\n          });\n          msGenerateKey.addEventListener(\"error\", function (error) {\n            reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * IE Helper function for exportKey\r\n   * @param key\r\n   * @param format\r\n   */\n\n\n  BrowserCrypto.prototype.msCryptoExportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var msExportKey = window[\"msCrypto\"].subtle.exportKey(KEY_FORMAT_JWK, key);\n          msExportKey.addEventListener(\"complete\", function (e) {\n            var resultBuffer = e.target.result;\n            var resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer)).replace(/\\r/g, \"\").replace(/\\n/g, \"\").replace(/\\t/g, \"\").split(\" \").join(\"\").replace(\"\\u0000\", \"\");\n\n            try {\n              resolve(JSON.parse(resultString));\n            } catch (e) {\n              reject(e);\n            }\n          });\n          msExportKey.addEventListener(\"error\", function (error) {\n            reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * IE Helper function for importKey\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n\n\n  BrowserCrypto.prototype.msCryptoImportKey = function (keyBuffer, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var msImportKey = window[\"msCrypto\"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);\n          msImportKey.addEventListener(\"complete\", function (e) {\n            resolve(e.target.result);\n          });\n          msImportKey.addEventListener(\"error\", function (error) {\n            reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * IE Helper function for sign JWT\r\n   * @param key\r\n   * @param data\r\n   */\n\n\n  BrowserCrypto.prototype.msCryptoSign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var msSign = window[\"msCrypto\"].subtle.sign(_this._keygenAlgorithmOptions, key, data);\n          msSign.addEventListener(\"complete\", function (e) {\n            resolve(e.target.result);\n          });\n          msSign.addEventListener(\"error\", function (error) {\n            reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns stringified jwk.\r\n   * @param jwk\r\n   */\n\n\n  BrowserCrypto.getJwkString = function (jwk) {\n    return JSON.stringify(jwk, Object.keys(jwk).sort());\n  };\n\n  return BrowserCrypto;\n}();\n\nexport { BrowserCrypto };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js"],"names":["__awaiter","__generator","BrowserStringUtils","BrowserAuthError","KEY_FORMAT_JWK","PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","hasCryptoAPI","createCryptoNotAvailableError","_keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","prototype","sha256Digest","dataString","data","_a","stringToUtf8Arr","hasIECrypto","getMSCryptoDigest","getSubtleCryptoDigest","getRandomValues","dataBuffer","cryptoObj","window","crypto","generateKeyPair","extractable","usages","msCryptoGenerateKey","subtle","generateKey","exportJwk","key","msCryptoExportJwk","exportKey","importJwk","keyString","keyBuffer","getJwkString","stringToArrayBuffer","msCryptoImportKey","importKey","sign","msCryptoSign","hasBrowserCrypto","algorithm","digest","Promise","resolve","reject","digestOperation","buffer","addEventListener","e","target","result","error","_this","msGenerateKey","msExportKey","resultBuffer","resultString","utf8ArrToString","replace","split","join","JSON","parse","msImportKey","msSign","jwk","stringify","Object","keys","sort"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// RSA KeyGen Algorithm\r\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\n// SHA-256 hashing algorithm\r\nvar S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nvar MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nvar BrowserCrypto = /** @class */ (function () {\r\n    function BrowserCrypto() {\r\n        if (!(this.hasCryptoAPI())) {\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto or msCrypto object not available.\");\r\n        }\r\n        this._keygenAlgorithmOptions = {\r\n            name: PKCS1_V15_KEYGEN_ALG,\r\n            hash: S256_HASH_ALG,\r\n            modulusLength: MODULUS_LENGTH,\r\n            publicExponent: PUBLIC_EXPONENT\r\n        };\r\n    }\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString\r\n     */\r\n    BrowserCrypto.prototype.sha256Digest = function (dataString) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n                return [2 /*return*/, this.hasIECrypto() ? this.getMSCryptoDigest(S256_HASH_ALG, data) : this.getSubtleCryptoDigest(S256_HASH_ALG, data)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer\r\n     */\r\n    BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\r\n        var cryptoObj = window[\"msCrypto\"] || window.crypto;\r\n        if (!cryptoObj.getRandomValues) {\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"getRandomValues does not exist.\");\r\n        }\r\n        cryptoObj.getRandomValues(dataBuffer);\r\n    };\r\n    /**\r\n     * Generates a keypair based on current keygen algorithm config.\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, (this.hasIECrypto() ?\r\n                        this.msCryptoGenerateKey(extractable, usages)\r\n                        : window.crypto.subtle.generateKey(this._keygenAlgorithmOptions, extractable, usages))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Export key as Json Web Key (JWK)\r\n     * @param key\r\n     * @param format\r\n     */\r\n    BrowserCrypto.prototype.exportJwk = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.hasIECrypto() ? this.msCryptoExportJwk(key) : window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n     * @param key\r\n     * @param format\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var keyString, keyBuffer;\r\n            return __generator(this, function (_a) {\r\n                keyString = BrowserCrypto.getJwkString(key);\r\n                keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);\r\n                return [2 /*return*/, this.hasIECrypto() ?\r\n                        this.msCryptoImportKey(keyBuffer, extractable, usages)\r\n                        : window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, this._keygenAlgorithmOptions, extractable, usages)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs given data with given key\r\n     * @param key\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.sign = function (key, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.hasIECrypto() ?\r\n                        this.msCryptoSign(key, data)\r\n                        : window.crypto.subtle.sign(this._keygenAlgorithmOptions, key, data)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    BrowserCrypto.prototype.hasCryptoAPI = function () {\r\n        return this.hasIECrypto() || this.hasBrowserCrypto();\r\n    };\r\n    /**\r\n     * Checks whether IE crypto (AKA msCrypto) is available.\r\n     */\r\n    BrowserCrypto.prototype.hasIECrypto = function () {\r\n        return \"msCrypto\" in window;\r\n    };\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    BrowserCrypto.prototype.hasBrowserCrypto = function () {\r\n        return \"crypto\" in window;\r\n    };\r\n    /**\r\n     * Helper function for SHA digest.\r\n     * @param algorithm\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.getSubtleCryptoDigest = function (algorithm, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IE Helper function for SHA digest.\r\n     * @param algorithm\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.getMSCryptoDigest = function (algorithm, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var digestOperation = window[\"msCrypto\"].subtle.digest(algorithm, data.buffer);\r\n                        digestOperation.addEventListener(\"complete\", function (e) {\r\n                            resolve(e.target.result);\r\n                        });\r\n                        digestOperation.addEventListener(\"error\", function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IE Helper function for generating a keypair\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.msCryptoGenerateKey = function (extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var msGenerateKey = window[\"msCrypto\"].subtle.generateKey(_this._keygenAlgorithmOptions, extractable, usages);\r\n                        msGenerateKey.addEventListener(\"complete\", function (e) {\r\n                            resolve(e.target.result);\r\n                        });\r\n                        msGenerateKey.addEventListener(\"error\", function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IE Helper function for exportKey\r\n     * @param key\r\n     * @param format\r\n     */\r\n    BrowserCrypto.prototype.msCryptoExportJwk = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var msExportKey = window[\"msCrypto\"].subtle.exportKey(KEY_FORMAT_JWK, key);\r\n                        msExportKey.addEventListener(\"complete\", function (e) {\r\n                            var resultBuffer = e.target.result;\r\n                            var resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))\r\n                                .replace(/\\r/g, \"\")\r\n                                .replace(/\\n/g, \"\")\r\n                                .replace(/\\t/g, \"\")\r\n                                .split(\" \").join(\"\")\r\n                                .replace(\"\\u0000\", \"\");\r\n                            try {\r\n                                resolve(JSON.parse(resultString));\r\n                            }\r\n                            catch (e) {\r\n                                reject(e);\r\n                            }\r\n                        });\r\n                        msExportKey.addEventListener(\"error\", function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IE Helper function for importKey\r\n     * @param key\r\n     * @param format\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.msCryptoImportKey = function (keyBuffer, extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var msImportKey = window[\"msCrypto\"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, _this._keygenAlgorithmOptions, extractable, usages);\r\n                        msImportKey.addEventListener(\"complete\", function (e) {\r\n                            resolve(e.target.result);\r\n                        });\r\n                        msImportKey.addEventListener(\"error\", function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * IE Helper function for sign JWT\r\n     * @param key\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.msCryptoSign = function (key, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        var msSign = window[\"msCrypto\"].subtle.sign(_this._keygenAlgorithmOptions, key, data);\r\n                        msSign.addEventListener(\"complete\", function (e) {\r\n                            resolve(e.target.result);\r\n                        });\r\n                        msSign.addEventListener(\"error\", function (error) {\r\n                            reject(error);\r\n                        });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns stringified jwk.\r\n     * @param jwk\r\n     */\r\n    BrowserCrypto.getJwkString = function (jwk) {\r\n        return JSON.stringify(jwk, Object.keys(jwk).sort());\r\n    };\r\n    return BrowserCrypto;\r\n}());\n\nexport { BrowserCrypto };\n"]},"metadata":{},"sourceType":"module"}