{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\n\nvar ScopeSet = function () {\n  function ScopeSet(inputScopes) {\n    var _this = this; // Filter empty string and null/undefined array items\n\n\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : []; // Validate and filter scopes (validate function throws if validation fails)\n\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n\n\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || \"\";\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n\n\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes); // compare lowercase scopes\n\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n\n\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n\n\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n\n\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n\n\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n\n\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    } // Do not allow OIDC scopes to be the only intersecting scopes\n\n\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n\n\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n\n\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n\n\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n\n\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/request/ScopeSet.js"],"names":["__spreadArrays","ClientConfigurationError","StringUtils","ClientAuthError","OIDC_SCOPES","ScopeSet","inputScopes","_this","scopeArr","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","split","prototype","length","createEmptyScopesArrayError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","containsScopeSet","scopeSet","size","asArray","every","containsOnlyOIDCScopes","defaultScopeCount","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","createAppendScopeSetError","removeScope","createRemoveEmptyScopeFromSetError","delete","removeOIDCScopes","unionScopeSets","otherScopes","createEmptyInputScopeSetError","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet(inputScopes) {\r\n        var _this = this;\r\n        // Filter empty string and null/undefined array items\r\n        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\r\n        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    ScopeSet.fromString = function (inputScopeString) {\r\n        var scopeString = inputScopeString || \"\";\r\n        var inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    };\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    ScopeSet.prototype.validateInputScopes = function (inputScopes) {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    };\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.containsScope = function (scope) {\r\n        var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    };\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    ScopeSet.prototype.containsScopeSet = function (scopeSet) {\r\n        var _this = this;\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));\r\n    };\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    ScopeSet.prototype.containsOnlyOIDCScopes = function () {\r\n        var _this = this;\r\n        var defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            if (_this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    };\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    ScopeSet.prototype.appendScope = function (newScope) {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    };\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    ScopeSet.prototype.appendScopes = function (newScopes) {\r\n        var _this = this;\r\n        try {\r\n            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.removeScope = function (scope) {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    };\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    ScopeSet.prototype.removeOIDCScopes = function () {\r\n        var _this = this;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            _this.scopes.delete(defaultScope);\r\n        });\r\n    };\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.unionScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        var unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        return unionScopes;\r\n    };\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        var unionScopes = this.unionScopeSets(otherScopes);\r\n        var sizeOtherScopes = otherScopes.getScopeCount();\r\n        var sizeThisScopes = this.getScopeCount();\r\n        var sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    };\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    ScopeSet.prototype.getScopeCount = function () {\r\n        return this.scopes.size;\r\n    };\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    ScopeSet.prototype.asArray = function () {\r\n        var array = [];\r\n        this.scopes.forEach(function (val) { return array.push(val); });\r\n        return array;\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    ScopeSet.prototype.printScopes = function () {\r\n        if (this.scopes) {\r\n            var scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    ScopeSet.prototype.printScopesLowerCase = function () {\r\n        return this.printScopes().toLowerCase();\r\n    };\r\n    return ScopeSet;\r\n}());\n\nexport { ScopeSet };\n"]},"metadata":{},"sourceType":"module"}