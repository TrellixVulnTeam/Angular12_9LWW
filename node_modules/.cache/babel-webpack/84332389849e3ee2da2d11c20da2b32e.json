{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\n\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\n\nvar Text = function () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Text(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.font_ = options.font;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.text_ = options.text;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textAlign_ = options.textAlign;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.textBaseline_ = options.textBaseline;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.overflow_ = !!options.overflow;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n\n\n  Text.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding()\n    });\n  };\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n\n\n  Text.prototype.getOverflow = function () {\n    return this.overflow_;\n  };\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n\n\n  Text.prototype.getFont = function () {\n    return this.font_;\n  };\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.getMaxAngle = function () {\n    return this.maxAngle_;\n  };\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n\n\n  Text.prototype.getPlacement = function () {\n    return this.placement_;\n  };\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetX = function () {\n    return this.offsetX_;\n  };\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.getOffsetY = function () {\n    return this.offsetY_;\n  };\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n\n\n  Text.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n\n\n  Text.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n\n\n  Text.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Get the text to be rendered.\n   * @return {string|undefined} Text.\n   * @api\n   */\n\n\n  Text.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n\n\n  Text.prototype.getTextAlign = function () {\n    return this.textAlign_;\n  };\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.getTextBaseline = function () {\n    return this.textBaseline_;\n  };\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundFill = function () {\n    return this.backgroundFill_;\n  };\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.getBackgroundStroke = function () {\n    return this.backgroundStroke_;\n  };\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>} Padding.\n   * @api\n   */\n\n\n  Text.prototype.getPadding = function () {\n    return this.padding_;\n  };\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n\n\n  Text.prototype.setOverflow = function (overflow) {\n    this.overflow_ = overflow;\n  };\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n\n\n  Text.prototype.setFont = function (font) {\n    this.font_ = font;\n  };\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n\n\n  Text.prototype.setMaxAngle = function (maxAngle) {\n    this.maxAngle_ = maxAngle;\n  };\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetX = function (offsetX) {\n    this.offsetX_ = offsetX;\n  };\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n\n\n  Text.prototype.setOffsetY = function (offsetY) {\n    this.offsetY_ = offsetY;\n  };\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n\n\n  Text.prototype.setPlacement = function (placement) {\n    this.placement_ = placement;\n  };\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n\n\n  Text.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n\n\n  Text.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n\n\n  Text.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  };\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Set the text.\n   *\n   * @param {string|undefined} text Text.\n   * @api\n   */\n\n\n  Text.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n\n\n  Text.prototype.setTextAlign = function (textAlign) {\n    this.textAlign_ = textAlign;\n  };\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n\n\n  Text.prototype.setTextBaseline = function (textBaseline) {\n    this.textBaseline_ = textBaseline;\n  };\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundFill = function (fill) {\n    this.backgroundFill_ = fill;\n  };\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Text.prototype.setBackgroundStroke = function (stroke) {\n    this.backgroundStroke_ = stroke;\n  };\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {!Array<number>} padding Padding.\n   * @api\n   */\n\n\n  Text.prototype.setPadding = function (padding) {\n    this.padding_ = padding;\n  };\n\n  return Text;\n}();\n\nexport default Text;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/style/Text.js"],"names":["Fill","TextPlacement","toSize","DEFAULT_FILL_COLOR","Text","opt_options","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","clone","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string} [text] Text content.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Text(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.font_ = options.font;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size|undefined}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.text_ = options.text;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textAlign_ = options.textAlign;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textBaseline_ = options.textBaseline;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ =\n            options.fill !== undefined\n                ? options.fill\n                : new Fill({ color: DEFAULT_FILL_COLOR });\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxAngle_ =\n            options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\n         * @private\n         * @type {import(\"./TextPlacement.js\").default|string}\n         */\n        this.placement_ =\n            options.placement !== undefined ? options.placement : TextPlacement.POINT;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overflow_ = !!options.overflow;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.backgroundFill_ = options.backgroundFill\n            ? options.backgroundFill\n            : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.backgroundStroke_ = options.backgroundStroke\n            ? options.backgroundStroke\n            : null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.padding_ = options.padding === undefined ? null : options.padding;\n    }\n    /**\n     * Clones the style.\n     * @return {Text} The cloned style.\n     * @api\n     */\n    Text.prototype.clone = function () {\n        var scale = this.getScale();\n        return new Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill()\n                ? this.getBackgroundFill().clone()\n                : undefined,\n            backgroundStroke: this.getBackgroundStroke()\n                ? this.getBackgroundStroke().clone()\n                : undefined,\n            padding: this.getPadding(),\n        });\n    };\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n    Text.prototype.getOverflow = function () {\n        return this.overflow_;\n    };\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n    Text.prototype.getFont = function () {\n        return this.font_;\n    };\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n    Text.prototype.getMaxAngle = function () {\n        return this.maxAngle_;\n    };\n    /**\n     * Get the label placement.\n     * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n     * @api\n     */\n    Text.prototype.getPlacement = function () {\n        return this.placement_;\n    };\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n    Text.prototype.getOffsetX = function () {\n        return this.offsetX_;\n    };\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n    Text.prototype.getOffsetY = function () {\n        return this.offsetY_;\n    };\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n    Text.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n    Text.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n    Text.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    Text.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Get the text to be rendered.\n     * @return {string|undefined} Text.\n     * @api\n     */\n    Text.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Get the text alignment.\n     * @return {string|undefined} Text align.\n     * @api\n     */\n    Text.prototype.getTextAlign = function () {\n        return this.textAlign_;\n    };\n    /**\n     * Get the text baseline.\n     * @return {string|undefined} Text baseline.\n     * @api\n     */\n    Text.prototype.getTextBaseline = function () {\n        return this.textBaseline_;\n    };\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getBackgroundFill = function () {\n        return this.backgroundFill_;\n    };\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getBackgroundStroke = function () {\n        return this.backgroundStroke_;\n    };\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>} Padding.\n     * @api\n     */\n    Text.prototype.getPadding = function () {\n        return this.padding_;\n    };\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n    Text.prototype.setOverflow = function (overflow) {\n        this.overflow_ = overflow;\n    };\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n    Text.prototype.setFont = function (font) {\n        this.font_ = font;\n    };\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n    Text.prototype.setMaxAngle = function (maxAngle) {\n        this.maxAngle_ = maxAngle;\n    };\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n    Text.prototype.setOffsetX = function (offsetX) {\n        this.offsetX_ = offsetX;\n    };\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n    Text.prototype.setOffsetY = function (offsetY) {\n        this.offsetY_ = offsetY;\n    };\n    /**\n     * Set the text placement.\n     *\n     * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n     * @api\n     */\n    Text.prototype.setPlacement = function (placement) {\n        this.placement_ = placement;\n    };\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    Text.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n    Text.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n    Text.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    };\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Set the text.\n     *\n     * @param {string|undefined} text Text.\n     * @api\n     */\n    Text.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Set the text alignment.\n     *\n     * @param {string|undefined} textAlign Text align.\n     * @api\n     */\n    Text.prototype.setTextAlign = function (textAlign) {\n        this.textAlign_ = textAlign;\n    };\n    /**\n     * Set the text baseline.\n     *\n     * @param {string|undefined} textBaseline Text baseline.\n     * @api\n     */\n    Text.prototype.setTextBaseline = function (textBaseline) {\n        this.textBaseline_ = textBaseline;\n    };\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setBackgroundFill = function (fill) {\n        this.backgroundFill_ = fill;\n    };\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setBackgroundStroke = function (stroke) {\n        this.backgroundStroke_ = stroke;\n    };\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {!Array<number>} padding Padding.\n     * @api\n     */\n    Text.prototype.setPadding = function (padding) {\n        this.padding_ = padding;\n    };\n    return Text;\n}());\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}