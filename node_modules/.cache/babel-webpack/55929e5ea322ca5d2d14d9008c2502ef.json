{"ast":null,"code":"/**\n * @module ol/source/CartoDB\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport SourceState from './State.js';\nimport XYZ from './XYZ.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\n\nvar CartoDB = function (_super) {\n  __extends(CartoDB, _super);\n  /**\n   * @param {Options} options CartoDB options.\n   */\n\n\n  function CartoDB(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n      minZoom: options.minZoom,\n      projection: options.projection,\n      transition: options.transition,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @type {string}\n     * @private\n     */\n\n\n    _this.account_ = options.account;\n    /**\n     * @type {string}\n     * @private\n     */\n\n    _this.mapId_ = options.map || '';\n    /**\n     * @type {!Object}\n     * @private\n     */\n\n    _this.config_ = options.config || {};\n    /**\n     * @type {!Object<string, CartoDBLayerInfo>}\n     * @private\n     */\n\n    _this.templateCache_ = {};\n\n    _this.initializeMap_();\n\n    return _this;\n  }\n  /**\n   * Returns the current config.\n   * @return {!Object} The current configuration.\n   * @api\n   */\n\n\n  CartoDB.prototype.getConfig = function () {\n    return this.config_;\n  };\n  /**\n   * Updates the carto db config.\n   * @param {Object} config a key-value lookup. Values will replace current values\n   *     in the config.\n   * @api\n   */\n\n\n  CartoDB.prototype.updateConfig = function (config) {\n    assign(this.config_, config);\n    this.initializeMap_();\n  };\n  /**\n   * Sets the CartoDB config\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n   *     object.\n   * If using named maps, a key-value lookup with the template parameters.\n   * @api\n   */\n\n\n  CartoDB.prototype.setConfig = function (config) {\n    this.config_ = config || {};\n    this.initializeMap_();\n  };\n  /**\n   * Issue a request to initialize the CartoDB map.\n   * @private\n   */\n\n\n  CartoDB.prototype.initializeMap_ = function () {\n    var paramHash = JSON.stringify(this.config_);\n\n    if (this.templateCache_[paramHash]) {\n      this.applyTemplate_(this.templateCache_[paramHash]);\n      return;\n    }\n\n    var mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n\n    if (this.mapId_) {\n      mapUrl += '/named/' + this.mapId_;\n    }\n\n    var client = new XMLHttpRequest();\n    client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n    client.addEventListener('error', this.handleInitError_.bind(this));\n    client.open('POST', mapUrl);\n    client.setRequestHeader('Content-type', 'application/json');\n    client.send(JSON.stringify(this.config_));\n  };\n  /**\n   * Handle map initialization response.\n   * @param {string} paramHash a hash representing the parameter set that was used\n   *     for the request\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  CartoDB.prototype.handleInitResponse_ = function (paramHash, event) {\n    var client = event.target; // status will be 0 for file:// urls\n\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n\n      try {\n        response = JSON.parse(client.responseText);\n      } catch (err) {\n        this.setState(SourceState.ERROR);\n        return;\n      }\n\n      this.applyTemplate_(response);\n      this.templateCache_[paramHash] = response;\n      this.setState(SourceState.READY);\n    } else {\n      this.setState(SourceState.ERROR);\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event Event.\n   */\n\n\n  CartoDB.prototype.handleInitError_ = function (event) {\n    this.setState(SourceState.ERROR);\n  };\n  /**\n   * Apply the new tile urls returned by carto db\n   * @param {CartoDBLayerInfo} data Result of carto db call.\n   * @private\n   */\n\n\n  CartoDB.prototype.applyTemplate_ = function (data) {\n    var tilesUrl = 'https://' + data.cdn_url.https + '/' + this.account_ + '/api/v1/map/' + data.layergroupid + '/{z}/{x}/{y}.png';\n    this.setUrl(tilesUrl);\n  };\n\n  return CartoDB;\n}(XYZ);\n\nexport default CartoDB;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/source/CartoDB.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","SourceState","XYZ","assign","CartoDB","_super","options","_this","attributions","cacheSize","crossOrigin","maxZoom","undefined","minZoom","projection","transition","wrapX","zDirection","account_","account","mapId_","map","config_","config","templateCache_","initializeMap_","getConfig","updateConfig","setConfig","paramHash","JSON","stringify","applyTemplate_","mapUrl","client","XMLHttpRequest","addEventListener","handleInitResponse_","bind","handleInitError_","open","setRequestHeader","send","event","target","status","response","parse","responseText","err","setState","ERROR","READY","data","tilesUrl","cdn_url","https","layergroupid","setUrl"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/CartoDB\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport SourceState from './State.js';\nimport XYZ from './XYZ.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [maxZoom=18] Max zoom.\n * @property {number} [minZoom] Minimum zoom.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\n * for more detail.\n * If using named maps, a key-value lookup with the template parameters.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [map] If using named maps, this will be the name of the template to load.\n * See https://carto.com/developers/maps-api/guides/named-maps/\n * for more detail.\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @typedef {Object} CartoDBLayerInfo\n * @property {string} layergroupid The layer group ID\n * @property {{https: string}} cdn_url The CDN URL\n */\n/**\n * @classdesc\n * Layer source for the CartoDB Maps API.\n * @api\n */\nvar CartoDB = /** @class */ (function (_super) {\n    __extends(CartoDB, _super);\n    /**\n     * @param {Options} options CartoDB options.\n     */\n    function CartoDB(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\n            minZoom: options.minZoom,\n            projection: options.projection,\n            transition: options.transition,\n            wrapX: options.wrapX,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @type {string}\n         * @private\n         */\n        _this.account_ = options.account;\n        /**\n         * @type {string}\n         * @private\n         */\n        _this.mapId_ = options.map || '';\n        /**\n         * @type {!Object}\n         * @private\n         */\n        _this.config_ = options.config || {};\n        /**\n         * @type {!Object<string, CartoDBLayerInfo>}\n         * @private\n         */\n        _this.templateCache_ = {};\n        _this.initializeMap_();\n        return _this;\n    }\n    /**\n     * Returns the current config.\n     * @return {!Object} The current configuration.\n     * @api\n     */\n    CartoDB.prototype.getConfig = function () {\n        return this.config_;\n    };\n    /**\n     * Updates the carto db config.\n     * @param {Object} config a key-value lookup. Values will replace current values\n     *     in the config.\n     * @api\n     */\n    CartoDB.prototype.updateConfig = function (config) {\n        assign(this.config_, config);\n        this.initializeMap_();\n    };\n    /**\n     * Sets the CartoDB config\n     * @param {Object} config In the case of anonymous maps, a CartoDB configuration\n     *     object.\n     * If using named maps, a key-value lookup with the template parameters.\n     * @api\n     */\n    CartoDB.prototype.setConfig = function (config) {\n        this.config_ = config || {};\n        this.initializeMap_();\n    };\n    /**\n     * Issue a request to initialize the CartoDB map.\n     * @private\n     */\n    CartoDB.prototype.initializeMap_ = function () {\n        var paramHash = JSON.stringify(this.config_);\n        if (this.templateCache_[paramHash]) {\n            this.applyTemplate_(this.templateCache_[paramHash]);\n            return;\n        }\n        var mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\n        if (this.mapId_) {\n            mapUrl += '/named/' + this.mapId_;\n        }\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.handleInitResponse_.bind(this, paramHash));\n        client.addEventListener('error', this.handleInitError_.bind(this));\n        client.open('POST', mapUrl);\n        client.setRequestHeader('Content-type', 'application/json');\n        client.send(JSON.stringify(this.config_));\n    };\n    /**\n     * Handle map initialization response.\n     * @param {string} paramHash a hash representing the parameter set that was used\n     *     for the request\n     * @param {Event} event Event.\n     * @private\n     */\n    CartoDB.prototype.handleInitResponse_ = function (paramHash, event) {\n        var client = /** @type {XMLHttpRequest} */ (event.target);\n        // status will be 0 for file:// urls\n        if (!client.status || (client.status >= 200 && client.status < 300)) {\n            var response = void 0;\n            try {\n                response = /** @type {CartoDBLayerInfo} */ (JSON.parse(client.responseText));\n            }\n            catch (err) {\n                this.setState(SourceState.ERROR);\n                return;\n            }\n            this.applyTemplate_(response);\n            this.templateCache_[paramHash] = response;\n            this.setState(SourceState.READY);\n        }\n        else {\n            this.setState(SourceState.ERROR);\n        }\n    };\n    /**\n     * @private\n     * @param {Event} event Event.\n     */\n    CartoDB.prototype.handleInitError_ = function (event) {\n        this.setState(SourceState.ERROR);\n    };\n    /**\n     * Apply the new tile urls returned by carto db\n     * @param {CartoDBLayerInfo} data Result of carto db call.\n     * @private\n     */\n    CartoDB.prototype.applyTemplate_ = function (data) {\n        var tilesUrl = 'https://' +\n            data.cdn_url.https +\n            '/' +\n            this.account_ +\n            '/api/v1/map/' +\n            data.layergroupid +\n            '/{z}/{x}/{y}.png';\n        this.setUrl(tilesUrl);\n    };\n    return CartoDB;\n}(XYZ));\nexport default CartoDB;\n"]},"metadata":{},"sourceType":"module"}