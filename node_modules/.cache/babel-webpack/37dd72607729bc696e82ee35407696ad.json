{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient = function (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    return __awaiter(this, void 0, void 0, function () {\n      var refreshToken, refreshTokenRequest;\n      return __generator(this, function (_a) {\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci); // no refresh Token\n\n        if (!refreshToken) {\n          throw ClientAuthError.createNoTokensFoundError();\n        }\n\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b, clientInfo;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            _b = (_a = parameterBuilder).addPopToken;\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            _b.apply(_a, [_c.sent()]);\n\n            _c.label = 2;\n\n          case 2:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js"],"names":["__extends","__awaiter","__generator","__assign","BaseClient","RequestParameterBuilder","AuthenticationScheme","GrantType","Errors","ResponseHandler","PopTokenGenerator","StringUtils","ClientConfigurationError","ClientAuthError","ClientAuthErrorMessage","ServerError","TimeUtils","UrlString","CcsCredentialType","buildClientInfoFromHomeAccountId","RefreshTokenClient","_super","configuration","call","prototype","acquireToken","request","reqTimestamp","response","responseHandler","_a","label","nowSeconds","executeTokenRequest","authority","sent","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","acquireTokenByRefreshToken","isFOCI","noFamilyRTInCache","clientMismatchErrorWithFamilyRT","createEmptyTokenRequestError","account","createNoAccountInSilentRequestError","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","errorCode","noTokensFoundError","code","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","refreshToken","refreshTokenRequest","readRefreshTokenFromCache","createNoTokensFoundError","secret","authenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","HOME_ACCOUNT_ID","requestBody","queryParameters","headers","thumbprint","endpoint","createTokenRequestBody","createTokenQueryParameters","createTokenRequestHeaders","canonicalAuthority","scopes","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","correlationId","clientAssertion","popTokenGenerator","_b","clientInfo","_c","addClientId","addScopes","addGrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","addPopToken","generateCnf","apply","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsOid","verbose","UPN","addCcsUpn"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nvar RefreshTokenClient = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenClient, _super);\r\n    function RefreshTokenClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    RefreshTokenClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\r\n            return __generator(this, function (_a) {\r\n                // Cannot renew token if no request object is given.\r\n                if (!request) {\r\n                    throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                }\r\n                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                if (!request.account) {\r\n                    throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                }\r\n                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n                if (isFOCI) {\r\n                    try {\r\n                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\r\n                    }\r\n                    catch (e) {\r\n                        noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\r\n                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n                            // throw in all other cases\r\n                        }\r\n                        else {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                }\r\n                // fall back to application refresh token acquisition\r\n                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var refreshToken, refreshTokenRequest;\r\n            return __generator(this, function (_a) {\r\n                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n                // no refresh Token\r\n                if (!refreshToken) {\r\n                    throw ClientAuthError.createNoTokensFoundError();\r\n                }\r\n                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER, ccsCredential: {\r\n                        credential: request.account.homeAccountId,\r\n                        type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                    } });\r\n                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, queryParameters, headers, thumbprint, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b, clientInfo;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        parameterBuilder.addRefreshToken(request.refreshToken);\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        _b = (_a = parameterBuilder).addPopToken;\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        _b.apply(_a, [_c.sent()]);\r\n                        _c.label = 2;\r\n                    case 2:\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n                            switch (request.ccsCredential.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RefreshTokenClient;\r\n}(BaseClient));\n\nexport { RefreshTokenClient };\n"]},"metadata":{},"sourceType":"module"}