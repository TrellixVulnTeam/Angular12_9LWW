{"ast":null,"code":"/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\n\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\n\nexport function clear() {\n  transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\n\nexport function add(source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\n\nexport function remove(source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n\n  return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\n\nexport function get(sourceCode, destinationCode) {\n  var transform;\n\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n\n  return transform;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/proj/transforms.js"],"names":["isEmpty","transforms","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","remove","transform","get"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,WAAxB;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;AACpBD,EAAAA,UAAU,GAAG,EAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,GAAT,CAAaC,MAAb,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+C;AAClD,MAAIC,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAjB;AACA,MAAIC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAtB;;AACA,MAAI,EAAED,UAAU,IAAIN,UAAhB,CAAJ,EAAiC;AAC7BA,IAAAA,UAAU,CAACM,UAAD,CAAV,GAAyB,EAAzB;AACH;;AACDN,EAAAA,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,IAA0CH,WAA1C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBN,MAAhB,EAAwBC,WAAxB,EAAqC;AACxC,MAAIE,UAAU,GAAGH,MAAM,CAACI,OAAP,EAAjB;AACA,MAAIC,eAAe,GAAGJ,WAAW,CAACG,OAAZ,EAAtB;AACA,MAAIG,SAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAhB;AACA,SAAOR,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAP;;AACA,MAAIT,OAAO,CAACC,UAAU,CAACM,UAAD,CAAX,CAAX,EAAqC;AACjC,WAAON,UAAU,CAACM,UAAD,CAAjB;AACH;;AACD,SAAOI,SAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaL,UAAb,EAAyBE,eAAzB,EAA0C;AAC7C,MAAIE,SAAJ;;AACA,MAAIJ,UAAU,IAAIN,UAAd,IAA4BQ,eAAe,IAAIR,UAAU,CAACM,UAAD,CAA7D,EAA2E;AACvEI,IAAAA,SAAS,GAAGV,UAAU,CAACM,UAAD,CAAV,CAAuBE,eAAvB,CAAZ;AACH;;AACD,SAAOE,SAAP;AACH","sourcesContent":["/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n    transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    if (!(sourceCode in transforms)) {\n        transforms[sourceCode] = {};\n    }\n    transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    var transform = transforms[sourceCode][destinationCode];\n    delete transforms[sourceCode][destinationCode];\n    if (isEmpty(transforms[sourceCode])) {\n        delete transforms[sourceCode];\n    }\n    return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n    var transform;\n    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n        transform = transforms[sourceCode][destinationCode];\n    }\n    return transform;\n}\n"]},"metadata":{},"sourceType":"module"}