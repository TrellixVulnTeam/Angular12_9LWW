{"ast":null,"code":"import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nclass BaseTreeControl {\n  constructor() {\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n\n\n  toggle(dataNode) {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n  /** Expands one single data node. */\n\n\n  expand(dataNode) {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n  /** Collapses one single data node. */\n\n\n  collapse(dataNode) {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n\n\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n  /** Toggles a subtree rooted at `node` recursively. */\n\n\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /** Collapse all dataNodes in the tree. */\n\n\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /** Expands a subtree rooted at given data node recursively. */\n\n\n  expandDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  /** Collapses a subtree rooted at given data node recursively. */\n\n\n  collapseDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n\n  _trackByValue(value) {\n    return this.trackBy ? this.trackBy(value) : value;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\n\n\nclass FlatTreeControl extends BaseTreeControl {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(getLevel, isExpandable, options) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n\n\n  getDescendants(dataNode) {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results = []; // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\n\n\nclass NestedTreeControl extends BaseTreeControl {\n  /** Construct with nested tree function getChildren. */\n  constructor(getChildren, options) {\n    super();\n    this.getChildren = getChildren;\n    this.options = options;\n\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n\n\n  expandAll() {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n\n\n  getDescendants(dataNode) {\n    const descendants = [];\n\n    this._getDescendants(descendants, dataNode); // Remove the node itself\n\n\n    return descendants.splice(1);\n  }\n  /** A helper function to get descendants recursively. */\n\n\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        for (const child of children) {\n          this._getDescendants(descendants, child);\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_TREE_NODE_OUTLET_NODE = /*#__PURE__*/new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nlet CdkTreeNodeOutlet = /*#__PURE__*/(() => {\n  class CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n      this.viewContainer = viewContainer;\n      this._node = _node;\n    }\n\n  }\n\n  CdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n    return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  CdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeOutlet,\n    selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n  });\n  return CdkTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Context provided to the tree node component. */\n\n\nclass CdkTreeNodeOutletContext {\n  constructor(data) {\n    this.$implicit = data;\n  }\n\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nlet CdkTreeNodeDef = /*#__PURE__*/(() => {\n  class CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  CdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n    return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeDef,\n    selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"cdkTreeNodeDefWhen\", \"when\"]\n    }\n  });\n  return CdkTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\n\n\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\n\n\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\n\n\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\n\n\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\n\n\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n\n\nlet CdkTree = /*#__PURE__*/(() => {\n  class CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n      this._differs = _differs;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      /** Level of nodes */\n\n      this._levels = new Map(); // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n      //     Remove the MAX_VALUE in viewChange\n\n      /**\n       * Stream containing the latest information on what rows are being displayed on screen.\n       * Can be used by the data source to as a heuristic of what data should be provided.\n       */\n\n      this.viewChange = new BehaviorSubject({\n        start: 0,\n        end: Number.MAX_VALUE\n      });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n\n\n    get dataSource() {\n      return this._dataSource;\n    }\n\n    set dataSource(dataSource) {\n      if (this._dataSource !== dataSource) {\n        this._switchDataSource(dataSource);\n      }\n    }\n\n    ngOnInit() {\n      this._dataDiffer = this._differs.find([]).create(this.trackBy);\n\n      if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlMissingError();\n      }\n    }\n\n    ngOnDestroy() {\n      this._nodeOutlet.viewContainer.clear();\n\n      this.viewChange.complete();\n\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n\n      if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      }\n    }\n\n    ngAfterContentChecked() {\n      const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n\n      if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeMultipleDefaultNodeDefsError();\n      }\n\n      this._defaultNodeDef = defaultNodeDefs[0];\n\n      if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n        this._observeRenderChanges();\n      }\n    } // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n\n\n    _switchDataSource(dataSource) {\n      if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n        this.dataSource.disconnect(this);\n      }\n\n      if (this._dataSubscription) {\n        this._dataSubscription.unsubscribe();\n\n        this._dataSubscription = null;\n      } // Remove the all dataNodes if there is now no data source\n\n\n      if (!dataSource) {\n        this._nodeOutlet.viewContainer.clear();\n      }\n\n      this._dataSource = dataSource;\n\n      if (this._nodeDefs) {\n        this._observeRenderChanges();\n      }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n\n\n    _observeRenderChanges() {\n      let dataStream;\n\n      if (isDataSource(this._dataSource)) {\n        dataStream = this._dataSource.connect(this);\n      } else if (isObservable(this._dataSource)) {\n        dataStream = this._dataSource;\n      } else if (Array.isArray(this._dataSource)) {\n        dataStream = of(this._dataSource);\n      }\n\n      if (dataStream) {\n        this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getTreeNoValidDataSourceError();\n      }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n\n\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n      const changes = dataDiffer.diff(data);\n\n      if (!changes) {\n        return;\n      }\n\n      changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex);\n\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex);\n          viewContainer.move(view, currentIndex);\n        }\n      });\n\n      this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n\n\n    _getNodeDef(data, i) {\n      if (this._nodeDefs.length === 1) {\n        return this._nodeDefs.first;\n      }\n\n      const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n      if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeMissingMatchingNodeDefError();\n      }\n\n      return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n\n\n    insertNode(nodeData, index, viewContainer, parentData) {\n      const node = this._getNodeDef(nodeData, index); // Node context that will be provided to created embedded view\n\n\n      const context = new CdkTreeNodeOutletContext(nodeData); // If the tree is flat tree, then use the `getLevel` function in flat tree control\n      // Otherwise, use the level of parent node.\n\n      if (this.treeControl.getLevel) {\n        context.level = this.treeControl.getLevel(nodeData);\n      } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n        context.level = this._levels.get(parentData) + 1;\n      } else {\n        context.level = 0;\n      }\n\n      this._levels.set(nodeData, context.level); // Use default tree nodeOutlet, or nested node's nodeOutlet\n\n\n      const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n      container.createEmbeddedView(node.template, context, index); // Set the data to just created `CdkTreeNode`.\n      // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n      //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n\n      if (CdkTreeNode.mostRecentTreeNode) {\n        CdkTreeNode.mostRecentTreeNode.data = nodeData;\n      }\n    }\n\n  }\n\n  CdkTree.ɵfac = function CdkTree_Factory(t) {\n    return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  CdkTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CdkTree,\n    selectors: [[\"cdk-tree\"]],\n    contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n      }\n    },\n    viewQuery: function CdkTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n    inputs: {\n      dataSource: \"dataSource\",\n      treeControl: \"treeControl\",\n      trackBy: \"trackBy\"\n    },\n    exportAs: [\"cdkTree\"],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n    template: function CdkTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [CdkTreeNodeOutlet],\n    encapsulation: 2\n  });\n  return CdkTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n\n\nlet CdkTreeNode = /*#__PURE__*/(() => {\n  class CdkTreeNode {\n    constructor(_elementRef, _tree) {\n      this._elementRef = _elementRef;\n      this._tree = _tree;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** Emits when the node's data has changed. */\n\n      this._dataChanges = new Subject();\n      CdkTreeNode.mostRecentTreeNode = this; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      this._elementRef.nativeElement.classList.add('cdk-tree-node');\n\n      this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n\n\n    get role() {\n      return 'treeitem';\n    }\n\n    set role(_role) {\n      // TODO: move to host after View Engine deprecation\n      this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n\n\n    get data() {\n      return this._data;\n    }\n\n    set data(value) {\n      if (value !== this._data) {\n        this._data = value;\n\n        this._setRoleFromData();\n\n        this._dataChanges.next();\n      }\n    }\n\n    get isExpanded() {\n      return this._tree.treeControl.isExpanded(this._data);\n    }\n\n    _setExpanded(_expanded) {\n      this._isAriaExpanded = _expanded;\n\n      this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n\n    get level() {\n      // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n      // aria-level off the parent node and use it as the level for this node (note aria-level is\n      // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n      return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n\n    ngOnInit() {\n      this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n\n      this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n\n    ngDoCheck() {\n      // aria-expanded is be set here because the expanded state is stored in the tree control and\n      // the node isn't aware when the state is changed.\n      // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n      // TODO: move to host after View Engine deprecation\n      if (this.isExpanded != this._isAriaExpanded) {\n        this._setExpanded(this.isExpanded);\n      }\n    }\n\n    ngOnDestroy() {\n      // If this is the last tree node being destroyed,\n      // clear out the reference to avoid leaking memory.\n      if (CdkTreeNode.mostRecentTreeNode === this) {\n        CdkTreeNode.mostRecentTreeNode = null;\n      }\n\n      this._dataChanges.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n\n\n    focus() {\n      this._elementRef.nativeElement.focus();\n    } // TODO: role should eventually just be set in the component host\n\n\n    _setRoleFromData() {\n      if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlFunctionsMissingError();\n      }\n\n      this.role = 'treeitem';\n    }\n\n  }\n\n  CdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n    return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree));\n  };\n\n  CdkTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNode,\n    selectors: [[\"cdk-tree-node\"]],\n    inputs: {\n      role: \"role\"\n    },\n    exportAs: [\"cdkTreeNode\"]\n  });\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n\n  CdkTreeNode.mostRecentTreeNode = null;\n  return CdkTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction getParentNodeAriaLevel(nodeElement) {\n  let parent = nodeElement.parentElement;\n\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\n\nfunction isNodeElement(element) {\n  const classList = element.classList;\n  return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n\n\nlet CdkNestedTreeNode = /*#__PURE__*/(() => {\n  class CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n      super(elementRef, tree);\n      this._differs = _differs; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n\n    ngAfterContentInit() {\n      this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n\n      if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTreeControlFunctionsMissingError();\n      }\n\n      const childrenNodes = this._tree.treeControl.getChildren(this.data);\n\n      if (Array.isArray(childrenNodes)) {\n        this.updateChildrenNodes(childrenNodes);\n      } else if (isObservable(childrenNodes)) {\n        childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n      }\n\n      this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n    } // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck();\n    }\n\n    ngOnDestroy() {\n      this._clear();\n\n      super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n\n\n    updateChildrenNodes(children) {\n      const outlet = this._getNodeOutlet();\n\n      if (children) {\n        this._children = children;\n      }\n\n      if (outlet && this._children) {\n        const viewContainer = outlet.viewContainer;\n\n        this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n      } else {\n        // Reset the data differ if there's no children nodes displayed\n        this._dataDiffer.diff([]);\n      }\n    }\n    /** Clear the children dataNodes. */\n\n\n    _clear() {\n      const outlet = this._getNodeOutlet();\n\n      if (outlet) {\n        outlet.viewContainer.clear();\n\n        this._dataDiffer.diff([]);\n      }\n    }\n    /** Gets the outlet for the current node. */\n\n\n    _getNodeOutlet() {\n      const outlets = this.nodeOutlet; // Note that since we use `descendants: true` on the query, we have to ensure\n      // that we don't pick up the outlet of a child node by accident.\n\n      return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n\n  }\n\n  CdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n    return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  CdkNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkNestedTreeNode,\n    selectors: [[\"cdk-nested-tree-node\"]],\n    contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n      }\n    },\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"cdkNestedTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: CdkNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: CdkNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return CdkNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex used to split a string on its CSS units. */\n\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n\nlet CdkTreeNodePadding = /*#__PURE__*/(() => {\n  class CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n      this._treeNode = _treeNode;\n      this._tree = _tree;\n      this._element = _element;\n      this._dir = _dir;\n      /** Subject that emits when the component has been destroyed. */\n\n      this._destroyed = new Subject();\n      /** CSS units used for the indentation value. */\n\n      this.indentUnits = 'px';\n      this._indent = 40;\n\n      this._setPadding();\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n      } // In Ivy the indentation binding might be set before the tree node's data has been added,\n      // which means that we'll miss the first render. We have to subscribe to changes in the\n      // data to ensure that everything is up to date.\n\n\n      _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n\n\n    get level() {\n      return this._level;\n    }\n\n    set level(value) {\n      this._setLevelInput(value);\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n\n\n    get indent() {\n      return this._indent;\n    }\n\n    set indent(indent) {\n      this._setIndentInput(indent);\n    }\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n\n\n    _paddingIndent() {\n      const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n      const level = this._level == null ? nodeLevel : this._level;\n      return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n\n    _setPadding(forceChange = false) {\n      const padding = this._paddingIndent();\n\n      if (padding !== this._currentPadding || forceChange) {\n        const element = this._element.nativeElement;\n        const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n        const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n        element.style[paddingProp] = padding || '';\n        element.style[resetProp] = '';\n        this._currentPadding = padding;\n      }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n\n    _setLevelInput(value) {\n      // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n      // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n      // they set 0 explicitly.\n      this._level = coerceNumberProperty(value, null);\n\n      this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n\n\n    _setIndentInput(indent) {\n      let value = indent;\n      let units = 'px';\n\n      if (typeof indent === 'string') {\n        const parts = indent.split(cssUnitPattern);\n        value = parts[0];\n        units = parts[1] || units;\n      }\n\n      this.indentUnits = units;\n      this._indent = coerceNumberProperty(value);\n\n      this._setPadding();\n    }\n\n  }\n\n  CdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n    return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n  };\n\n  CdkTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodePadding,\n    selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"cdkTreeNodePadding\", \"level\"],\n      indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n    }\n  });\n  return CdkTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Node toggle to expand/collapse the node.\n */\n\n\nlet CdkTreeNodeToggle = /*#__PURE__*/(() => {\n  class CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n      this._tree = _tree;\n      this._treeNode = _treeNode;\n      this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n\n\n    get recursive() {\n      return this._recursive;\n    }\n\n    set recursive(value) {\n      this._recursive = coerceBooleanProperty(value);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _toggle(event) {\n      this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n      event.stopPropagation();\n    }\n\n  }\n\n  CdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n    return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode));\n  };\n\n  CdkTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTreeNodeToggle,\n    selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n    hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n          return ctx._toggle($event);\n        });\n      }\n    },\n    inputs: {\n      recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n    }\n  });\n  return CdkTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nlet CdkTreeModule = /*#__PURE__*/(() => {\n  class CdkTreeModule {}\n\n  CdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n    return new (t || CdkTreeModule)();\n  };\n\n  CdkTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTreeModule\n  });\n  CdkTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CdkTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, {\n    declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet],\n    exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/cdk/fesm2015/tree.js"],"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","InjectionToken","Directive","ViewContainerRef","Inject","Optional","TemplateRef","Component","ViewEncapsulation","ChangeDetectionStrategy","IterableDiffers","ChangeDetectorRef","Input","ViewChild","ContentChildren","ElementRef","HostListener","NgModule","coerceNumberProperty","coerceBooleanProperty","Directionality","ɵngcc0","ɵngcc1","BaseTreeControl","constructor","expansionModel","toggle","dataNode","_trackByValue","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","expandAll","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","treeControl","ngOnDestroy","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","directives","encapsulation","_elementRef","_tree","_destroyed","_dataChanges","nativeElement","classList","add","role","_role","setAttribute","_data","_setRoleFromData","_setExpanded","_expanded","_isAriaExpanded","_parentNodeAriaLevel","getParentNodeAriaLevel","ngDoCheck","focus","CdkTreeNode_Factory","nodeElement","parent","parentElement","isNodeElement","contains","getAttribute","element","CdkNestedTreeNode","elementRef","tree","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","disabled","tabIndex","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","_paddingIndent","nodeLevel","forceChange","padding","_currentPadding","paddingProp","resetProp","style","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","CdkTreeNodeToggle_Factory","hostBindings","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, HostListener, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() { return this._dataSource; }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.classList.add('cdk-tree-node');\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() { return 'treeitem'; }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() { return this._data; }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    _setExpanded(_expanded) {\n        this._isAriaExpanded = _expanded;\n        this._elementRef.nativeElement.setAttribute('aria-expanded', `${_expanded}`);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel ?\n            this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngDoCheck() {\n        // aria-expanded is be set here because the expanded state is stored in the tree control and\n        // the node isn't aware when the state is changed.\n        // It is not set using a @HostBinding because they sometimes get lost with Mixin based classes.\n        // TODO: move to host after View Engine deprecation\n        if (this.isExpanded != this._isAriaExpanded) {\n            this._setExpanded(this.isExpanded);\n        }\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!((classList === null || classList === void 0 ? void 0 : classList.contains('cdk-nested-tree-node')) || (classList === null || classList === void 0 ? void 0 : classList.contains('cdk-tree')));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('cdk-nested-tree-node');\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() { return this._recursive; }\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); };\nCdkTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n"]},"metadata":{},"sourceType":"module"}