{"ast":null,"code":"/**\n * @module ol/MapBrowserEventHandler\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport { PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { VOID } from './functions.js';\nimport { listen, unlistenByKey } from './events.js';\n\nvar MapBrowserEventHandler = function (_super) {\n  __extends(MapBrowserEventHandler, _super);\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n\n\n  function MapBrowserEventHandler(map, moveTolerance) {\n    var _this = _super.call(this, map) || this;\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n\n\n    _this.map_ = map;\n    /**\n     * @type {any}\n     * @private\n     */\n\n    _this.clickTimeoutId_;\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n\n    _this.emulateClicks_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.dragging_ = false;\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.dragListenerKeys_ = [];\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent}\n     * @private\n     */\n\n    _this.down_ = null;\n\n    var element = _this.map_.getViewport();\n    /**\n     * @type {number}\n     * @private\n     */\n\n\n    _this.activePointers_ = 0;\n    /**\n     * @type {!Object<number, boolean>}\n     * @private\n     */\n\n    _this.trackedTouches_ = {};\n    _this.element_ = element;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n\n    _this.originalPointerMoveEvent_;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n\n    _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);\n    /**\n     * @private\n     */\n\n    _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);\n\n    _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? {\n      passive: false\n    } : false);\n\n    return _this;\n  }\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n      /** @this {MapBrowserEventHandler} */\n      function () {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n    var event = pointerEvent;\n\n    if (event.type == MapBrowserEventType.POINTERUP || event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[event.pointerId];\n    } else if (event.type == MapBrowserEventType.POINTERDOWN) {\n      this.trackedTouches_[event.pointerId] = true;\n    }\n\n    this.activePointers_ = Object.keys(this.trackedTouches_).length;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n\n    if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_ === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n    this.emulateClicks_ = this.activePointers_ === 0;\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent); // Store a copy of the down event\n\n    this.down_ = {};\n\n    for (var property in pointerEvent) {\n      var value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      var doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(listen(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n      /* Note that the listener for `pointercancel is set up on\n       * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n       * the `pointerup` and `pointermove` listeners.\n       *\n       * The reason for this is the following: `TouchSource.vacuumTouches_()`\n       * issues `pointercancel` events, when there was no `touchend` for a\n       * `touchstart`. Now, let's say a first `touchstart` is registered on\n       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n       * But `documentPointerEventHandler_` doesn't know about the first\n       * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n       * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n       * only registered there.\n       */\n      listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));\n      }\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.dragging_ = true;\n      var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);\n      this.dispatchEvent(newEvent);\n    }\n  };\n  /**\n   * Wrap and relay a pointer event.  Note that this requires that the type\n   * string for the MapBrowserEvent matches the PointerEvent type.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));\n  };\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    var originalEvent = this.originalPointerMoveEvent_;\n\n    if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== 'boolean' || event.cancelable === true)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n\n\n  MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n    return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  MapBrowserEventHandler.prototype.disposeInternal = function () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n\n    this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n    this.element_ = null;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return MapBrowserEventHandler;\n}(Target);\n\nexport default MapBrowserEventHandler;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/MapBrowserEventHandler.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventType","MapBrowserEvent","MapBrowserEventType","PointerEventType","Target","PASSIVE_EVENT_LISTENERS","VOID","listen","unlistenByKey","MapBrowserEventHandler","_super","map","moveTolerance","_this","map_","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","undefined","down_","element","getViewport","activePointers_","trackedTouches_","element_","pointerdownListenerKey_","POINTERDOWN","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","POINTERMOVE","relayEvent_","boundHandleTouchMove_","handleTouchMove_","bind","addEventListener","TOUCHMOVE","passive","emulateClick_","pointerEvent","newEvent","CLICK","dispatchEvent","clearTimeout","DBLCLICK","setTimeout","SINGLECLICK","updateActivePointers_","event","type","POINTERUP","POINTERCANCEL","pointerId","keys","length","handlePointerUp_","defaultPrevented","isMouseActionButton_","forEach","button","property","value","doc","getOwnerDocument","push","handlePointerMove_","getRootNode","isMoving_","POINTERDRAG","dragging","originalEvent","cancelable","preventDefault","Math","abs","clientX","clientY","disposeInternal","removeEventListener"],"mappings":"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","sourcesContent":["/**\n * @module ol/MapBrowserEventHandler\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport { PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { VOID } from './functions.js';\nimport { listen, unlistenByKey } from './events.js';\nvar MapBrowserEventHandler = /** @class */ (function (_super) {\n    __extends(MapBrowserEventHandler, _super);\n    /**\n     * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n     * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n     */\n    function MapBrowserEventHandler(map, moveTolerance) {\n        var _this = _super.call(this, map) || this;\n        /**\n         * This is the element that we will listen to the real events on.\n         * @type {import(\"./PluggableMap.js\").default}\n         * @private\n         */\n        _this.map_ = map;\n        /**\n         * @type {any}\n         * @private\n         */\n        _this.clickTimeoutId_;\n        /**\n         * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n         * @type {boolean}\n         */\n        _this.emulateClicks_ = false;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.dragging_ = false;\n        /**\n         * @type {!Array<import(\"./events.js\").EventsKey>}\n         * @private\n         */\n        _this.dragListenerKeys_ = [];\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n        /**\n         * The most recent \"down\" type event (or null if none have occurred).\n         * Set on pointerdown.\n         * @type {PointerEvent}\n         * @private\n         */\n        _this.down_ = null;\n        var element = _this.map_.getViewport();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.activePointers_ = 0;\n        /**\n         * @type {!Object<number, boolean>}\n         * @private\n         */\n        _this.trackedTouches_ = {};\n        _this.element_ = element;\n        /**\n         * @type {?import(\"./events.js\").EventsKey}\n         * @private\n         */\n        _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n        /**\n         * @type {PointerEvent}\n         * @private\n         */\n        _this.originalPointerMoveEvent_;\n        /**\n         * @type {?import(\"./events.js\").EventsKey}\n         * @private\n         */\n        _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);\n        /**\n         * @private\n         */\n        _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);\n        _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? { passive: false } : false);\n        return _this;\n    }\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n        if (this.clickTimeoutId_ !== undefined) {\n            // double-click\n            clearTimeout(this.clickTimeoutId_);\n            this.clickTimeoutId_ = undefined;\n            newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n            this.dispatchEvent(newEvent);\n        }\n        else {\n            // click\n            this.clickTimeoutId_ = setTimeout(\n            /** @this {MapBrowserEventHandler} */\n            function () {\n                this.clickTimeoutId_ = undefined;\n                var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n                this.dispatchEvent(newEvent);\n            }.bind(this), 250);\n        }\n    };\n    /**\n     * Keeps track on how many pointers are currently active.\n     *\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n        var event = pointerEvent;\n        if (event.type == MapBrowserEventType.POINTERUP ||\n            event.type == MapBrowserEventType.POINTERCANCEL) {\n            delete this.trackedTouches_[event.pointerId];\n        }\n        else if (event.type == MapBrowserEventType.POINTERDOWN) {\n            this.trackedTouches_[event.pointerId] = true;\n        }\n        this.activePointers_ = Object.keys(this.trackedTouches_).length;\n    };\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n        this.updateActivePointers_(pointerEvent);\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n        // We emulate click events on left mouse button click, touch contact, and pen\n        // contact. isMouseActionButton returns true in these cases (evt.button is set\n        // to 0).\n        // See http://www.w3.org/TR/pointerevents/#button-states\n        // We only fire click, singleclick, and doubleclick if nobody has called\n        // event.preventDefault().\n        if (this.emulateClicks_ &&\n            !newEvent.defaultPrevented &&\n            !this.dragging_ &&\n            this.isMouseActionButton_(pointerEvent)) {\n            this.emulateClick_(this.down_);\n        }\n        if (this.activePointers_ === 0) {\n            this.dragListenerKeys_.forEach(unlistenByKey);\n            this.dragListenerKeys_.length = 0;\n            this.dragging_ = false;\n            this.down_ = null;\n        }\n    };\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @return {boolean} If the left mouse button was pressed.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n        return pointerEvent.button === 0;\n    };\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n        this.emulateClicks_ = this.activePointers_ === 0;\n        this.updateActivePointers_(pointerEvent);\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n        // Store a copy of the down event\n        this.down_ = /** @type {PointerEvent} */ ({});\n        for (var property in pointerEvent) {\n            var value = pointerEvent[property];\n            this.down_[property] = typeof value === 'function' ? VOID : value;\n        }\n        if (this.dragListenerKeys_.length === 0) {\n            var doc = this.map_.getOwnerDocument();\n            this.dragListenerKeys_.push(listen(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this), \n            /* Note that the listener for `pointercancel is set up on\n             * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n             * the `pointerup` and `pointermove` listeners.\n             *\n             * The reason for this is the following: `TouchSource.vacuumTouches_()`\n             * issues `pointercancel` events, when there was no `touchend` for a\n             * `touchstart`. Now, let's say a first `touchstart` is registered on\n             * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n             * But `documentPointerEventHandler_` doesn't know about the first\n             * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n             * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n             * only registered there.\n             */\n            listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n            if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n                this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));\n            }\n        }\n    };\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n        // Between pointerdown and pointerup, pointermove events are triggered.\n        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n        // moved a significant distance.\n        if (this.isMoving_(pointerEvent)) {\n            this.dragging_ = true;\n            var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);\n            this.dispatchEvent(newEvent);\n        }\n    };\n    /**\n     * Wrap and relay a pointer event.  Note that this requires that the type\n     * string for the MapBrowserEvent matches the PointerEvent type.\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {\n        this.originalPointerMoveEvent_ = pointerEvent;\n        var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n        this.dispatchEvent(new MapBrowserEvent(pointerEvent.type, this.map_, pointerEvent, dragging));\n    };\n    /**\n     * Flexible handling of a `touch-action: none` css equivalent: because calling\n     * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n     * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n     * when an interaction (currently `DragPan` handles the event.\n     * @param {TouchEvent} event Event.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {\n        // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n        // may not be initialized yet when we get here on a platform without native pointer events.\n        var originalEvent = this.originalPointerMoveEvent_;\n        if ((!originalEvent || originalEvent.defaultPrevented) &&\n            (typeof event.cancelable !== 'boolean' || event.cancelable === true)) {\n            event.preventDefault();\n        }\n    };\n    /**\n     * @param {PointerEvent} pointerEvent Pointer\n     * event.\n     * @return {boolean} Is moving.\n     * @private\n     */\n    MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n        return (this.dragging_ ||\n            Math.abs(pointerEvent.clientX - this.down_.clientX) >\n                this.moveTolerance_ ||\n            Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_);\n    };\n    /**\n     * Clean up.\n     */\n    MapBrowserEventHandler.prototype.disposeInternal = function () {\n        if (this.relayedListenerKey_) {\n            unlistenByKey(this.relayedListenerKey_);\n            this.relayedListenerKey_ = null;\n        }\n        this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);\n        if (this.pointerdownListenerKey_) {\n            unlistenByKey(this.pointerdownListenerKey_);\n            this.pointerdownListenerKey_ = null;\n        }\n        this.dragListenerKeys_.forEach(unlistenByKey);\n        this.dragListenerKeys_.length = 0;\n        this.element_ = null;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return MapBrowserEventHandler;\n}(Target));\nexport default MapBrowserEventHandler;\n"]},"metadata":{},"sourceType":"module"}