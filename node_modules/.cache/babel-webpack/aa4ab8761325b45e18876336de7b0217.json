{"ast":null,"code":"/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [opt_precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  var decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\n\nexport function compareVersions(v1, v2) {\n  var s1 = ('' + v1).split('.');\n  var s2 = ('' + v2).split('.');\n\n  for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n    var n1 = parseInt(s1[i] || '0', 10);\n    var n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/string.js"],"names":["padNumber","number","width","opt_precision","numberString","undefined","toFixed","decimal","indexOf","length","Array","join","compareVersions","v1","v2","s1","split","s2","i","Math","max","n1","parseInt","n2"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCC,aAAlC,EAAiD;AACpD,MAAIC,YAAY,GAAGD,aAAa,KAAKE,SAAlB,GAA8BJ,MAAM,CAACK,OAAP,CAAeH,aAAf,CAA9B,GAA8D,KAAKF,MAAtF;AACA,MAAIM,OAAO,GAAGH,YAAY,CAACI,OAAb,CAAqB,GAArB,CAAd;AACAD,EAAAA,OAAO,GAAGA,OAAO,KAAK,CAAC,CAAb,GAAiBH,YAAY,CAACK,MAA9B,GAAuCF,OAAjD;AACA,SAAOA,OAAO,GAAGL,KAAV,GACDE,YADC,GAED,IAAIM,KAAJ,CAAU,IAAIR,KAAJ,GAAYK,OAAtB,EAA+BI,IAA/B,CAAoC,GAApC,IAA2CP,YAFjD;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiC;AACpC,MAAIC,EAAE,GAAG,CAAC,KAAKF,EAAN,EAAUG,KAAV,CAAgB,GAAhB,CAAT;AACA,MAAIC,EAAE,GAAG,CAAC,KAAKH,EAAN,EAAUE,KAAV,CAAgB,GAAhB,CAAT;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,EAAE,CAACN,MAAZ,EAAoBQ,EAAE,CAACR,MAAvB,CAApB,EAAoDS,CAAC,EAArD,EAAyD;AACrD,QAAIG,EAAE,GAAGC,QAAQ,CAACP,EAAE,CAACG,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAjB;AACA,QAAIK,EAAE,GAAGD,QAAQ,CAACL,EAAE,CAACC,CAAD,CAAF,IAAS,GAAV,EAAe,EAAf,CAAjB;;AACA,QAAIG,EAAE,GAAGE,EAAT,EAAa;AACT,aAAO,CAAP;AACH;;AACD,QAAIA,EAAE,GAAGF,EAAT,EAAa;AACT,aAAO,CAAC,CAAR;AACH;AACJ;;AACD,SAAO,CAAP;AACH","sourcesContent":["/**\n * @module ol/string\n */\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [opt_precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n    var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n    var decimal = numberString.indexOf('.');\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width\n        ? numberString\n        : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n    var s1 = ('' + v1).split('.');\n    var s2 = ('' + v2).split('.');\n    for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n        var n1 = parseInt(s1[i] || '0', 10);\n        var n2 = parseInt(s2[i] || '0', 10);\n        if (n1 > n2) {\n            return 1;\n        }\n        if (n2 > n1) {\n            return -1;\n        }\n    }\n    return 0;\n}\n"]},"metadata":{},"sourceType":"module"}