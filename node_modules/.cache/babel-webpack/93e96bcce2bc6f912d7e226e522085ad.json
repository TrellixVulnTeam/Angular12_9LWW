{"ast":null,"code":"/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\n\nvar ImageStyle = function () {\n  /**\n   * @param {Options} options Options.\n   */\n  function ImageStyle(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.scaleArray_ = toSize(options.scale);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.displacement_ = options.displacement;\n  }\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n\n\n  ImageStyle.prototype.clone = function () {\n    var scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice()\n    });\n  };\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n\n\n  ImageStyle.prototype.getOpacity = function () {\n    return this.opacity_;\n  };\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n\n\n  ImageStyle.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n\n\n  ImageStyle.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n\n\n  ImageStyle.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n\n\n  ImageStyle.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n\n\n  ImageStyle.prototype.getDisplacement = function () {\n    return this.displacement_;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n\n\n  ImageStyle.prototype.getAnchor = function () {\n    return abstract();\n  };\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n\n\n  ImageStyle.prototype.getImage = function (pixelRatio) {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n\n\n  ImageStyle.prototype.getHitDetectionImage = function () {\n    return abstract();\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n\n\n  ImageStyle.prototype.getPixelRatio = function (pixelRatio) {\n    return 1;\n  };\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n\n\n  ImageStyle.prototype.getImageState = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n\n\n  ImageStyle.prototype.getImageSize = function () {\n    return abstract();\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n\n\n  ImageStyle.prototype.getOrigin = function () {\n    return abstract();\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n\n\n  ImageStyle.prototype.getSize = function () {\n    return abstract();\n  };\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n\n\n  ImageStyle.prototype.setOpacity = function (opacity) {\n    this.opacity_ = opacity;\n  };\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n\n\n  ImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n\n\n  ImageStyle.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n\n\n  ImageStyle.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  ImageStyle.prototype.listenImageChange = function (listener) {\n    abstract();\n  };\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n\n\n  ImageStyle.prototype.load = function () {\n    abstract();\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n\n\n  ImageStyle.prototype.unlistenImageChange = function (listener) {\n    abstract();\n  };\n\n  return ImageStyle;\n}();\n\nexport default ImageStyle;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/style/Image.js"],"names":["abstract","toSize","ImageStyle","options","opacity_","opacity","rotateWithView_","rotateWithView","rotation_","rotation","scale_","scale","scaleArray_","displacement_","displacement","prototype","clone","getScale","getOpacity","Array","isArray","slice","getRotation","getRotateWithView","getDisplacement","getScaleArray","getAnchor","getImage","pixelRatio","getHitDetectionImage","getPixelRatio","getImageState","getImageSize","getOrigin","getSize","setOpacity","setRotateWithView","setRotation","setScale","listenImageChange","listener","load","unlistenImageChange"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n */\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = /** @class */ (function () {\n    /**\n     * @param {Options} options Options.\n     */\n    function ImageStyle(options) {\n        /**\n         * @private\n         * @type {number}\n         */\n        this.opacity_ = options.opacity;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale);\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.displacement_ = options.displacement;\n    }\n    /**\n     * Clones the style.\n     * @return {ImageStyle} The cloned style.\n     * @api\n     */\n    ImageStyle.prototype.clone = function () {\n        var scale = this.getScale();\n        return new ImageStyle({\n            opacity: this.getOpacity(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n        });\n    };\n    /**\n     * Get the symbolizer opacity.\n     * @return {number} Opacity.\n     * @api\n     */\n    ImageStyle.prototype.getOpacity = function () {\n        return this.opacity_;\n    };\n    /**\n     * Determine whether the symbolizer rotates with the map.\n     * @return {boolean} Rotate with map.\n     * @api\n     */\n    ImageStyle.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the symoblizer rotation.\n     * @return {number} Rotation.\n     * @api\n     */\n    ImageStyle.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the symbolizer scale.\n     * @return {number|import(\"../size.js\").Size} Scale.\n     * @api\n     */\n    ImageStyle.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    ImageStyle.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the displacement of the shape\n     * @return {Array<number>} Shape's center displacement\n     * @api\n     */\n    ImageStyle.prototype.getDisplacement = function () {\n        return this.displacement_;\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @abstract\n     * @return {Array<number>} Anchor.\n     */\n    ImageStyle.prototype.getAnchor = function () {\n        return abstract();\n    };\n    /**\n     * Get the image element for the symbolizer.\n     * @abstract\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n    ImageStyle.prototype.getImage = function (pixelRatio) {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n    ImageStyle.prototype.getHitDetectionImage = function () {\n        return abstract();\n    };\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n    ImageStyle.prototype.getPixelRatio = function (pixelRatio) {\n        return 1;\n    };\n    /**\n     * @abstract\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    ImageStyle.prototype.getImageState = function () {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    ImageStyle.prototype.getImageSize = function () {\n        return abstract();\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @abstract\n     * @return {Array<number>} Origin.\n     */\n    ImageStyle.prototype.getOrigin = function () {\n        return abstract();\n    };\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @abstract\n     * @return {import(\"../size.js\").Size} Size.\n     */\n    ImageStyle.prototype.getSize = function () {\n        return abstract();\n    };\n    /**\n     * Set the opacity.\n     *\n     * @param {number} opacity Opacity.\n     * @api\n     */\n    ImageStyle.prototype.setOpacity = function (opacity) {\n        this.opacity_ = opacity;\n    };\n    /**\n     * Set whether to rotate the style with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    ImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number} rotation Rotation.\n     * @api\n     */\n    ImageStyle.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @api\n     */\n    ImageStyle.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale);\n    };\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    ImageStyle.prototype.listenImageChange = function (listener) {\n        abstract();\n    };\n    /**\n     * Load not yet loaded URI.\n     * @abstract\n     */\n    ImageStyle.prototype.load = function () {\n        abstract();\n    };\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    ImageStyle.prototype.unlistenImageChange = function (listener) {\n        abstract();\n    };\n    return ImageStyle;\n}());\nexport default ImageStyle;\n"]},"metadata":{},"sourceType":"module"}