{"ast":null,"code":"/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\n\nexport function toContext(context, opt_options) {\n  var canvas = context.canvas;\n  var options = opt_options ? opt_options : {};\n  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  var size = options.size;\n\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n\n  var extent = [0, 0, canvas.width, canvas.height];\n  var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\n\nexport function getVectorContext(event) {\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  var canvasPixelRatio = event.inversePixelTransform[0];\n  var frameState = event.frameState;\n  var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n  var userTransform;\n  var userProjection = getUserProjection();\n\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n\n  return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\n\nexport function getRenderPixel(event, pixel) {\n  var result = pixel.slice(0);\n  applyTransform(event.inversePixelTransform.slice(), result);\n  return result;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/render.js"],"names":["CanvasImmediateRenderer","DEVICE_PIXEL_RATIO","apply","applyTransform","create","createTransform","multiply","multiplyTransform","scale","scaleTransform","getSquaredTolerance","getTransformFromProjections","getUserProjection","toContext","context","opt_options","canvas","options","pixelRatio","size","width","height","style","extent","transform","getVectorContext","event","canvasPixelRatio","inversePixelTransform","frameState","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userTransform","userProjection","projection","rotation","getRenderPixel","pixel","result"],"mappings":"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","sourcesContent":["/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform, } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n    var canvas = context.canvas;\n    var options = opt_options ? opt_options : {};\n    var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n    var size = options.size;\n    if (size) {\n        canvas.width = size[0] * pixelRatio;\n        canvas.height = size[1] * pixelRatio;\n        canvas.style.width = size[0] + 'px';\n        canvas.style.height = size[1] + 'px';\n    }\n    var extent = [0, 0, canvas.width, canvas.height];\n    var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n    return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n    // canvas may be at a different pixel ratio than frameState.pixelRatio\n    var canvasPixelRatio = event.inversePixelTransform[0];\n    var frameState = event.frameState;\n    var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n    var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n    var userTransform;\n    var userProjection = getUserProjection();\n    if (userProjection) {\n        userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n    }\n    return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n    var result = pixel.slice(0);\n    applyTransform(event.inversePixelTransform.slice(), result);\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}