{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RequestParameterBuilder = function () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n\n\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n\n\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n\n\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n\n    RequestValidator.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims; // Parse provided claims into JSON object or initialize empty object\n\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      } // Add xms_cc claim with provided clientCapabilities to access_token key\n\n\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n\n\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, username);\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, password);\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n\n\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n\n\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n\n\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n\n  return RequestParameterBuilder;\n}();\n\nexport { RequestParameterBuilder };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.js"],"names":["__spreadArrays","AADServerParamKeys","Constants","ResponseMode","OIDC_DEFAULT_SCOPES","SSOTypes","HeaderNames","CLIENT_INFO","ClaimsRequestKeys","PasswordGrantConstants","AuthenticationScheme","ThrottlingConstants","ScopeSet","ClientConfigurationError","RequestValidator","StringUtils","RequestParameterBuilder","parameters","Map","prototype","addResponseTypeCode","set","RESPONSE_TYPE","encodeURIComponent","CODE_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","QUERY","addScopes","scopes","addOidcScopes","requestScopes","scopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","X_CLIENT_OS","os","X_CLIENT_CPU","cpu","addPrompt","prompt","validatePrompt","PROMPT","addState","state","isEmpty","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","createInvalidCodeChallengeParamsError","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","addExtraQueryParameters","eQparams","_this","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","POP","REQ_CNF","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","X_MS_LIB_CAPABILITY_VALUE","createQueryString","queryParameterArray","Array","value","push","join"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { ScopeSet } from './ScopeSet.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from './RequestValidator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RequestParameterBuilder = /** @class */ (function () {\r\n    function RequestParameterBuilder() {\r\n        this.parameters = new Map();\r\n    }\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseTypeCode = function () {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\r\n    };\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));\r\n    };\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\r\n        if (addOidcScopes === void 0) { addOidcScopes = true; }\r\n        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\r\n        var scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    };\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    RequestParameterBuilder.prototype.addClientId = function (clientId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    };\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    };\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    };\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\r\n    };\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    RequestParameterBuilder.prototype.addSid = function (sid) {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    };\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    };\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    };\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    };\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    RequestParameterBuilder.prototype.addPrompt = function (prompt) {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\r\n    };\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    RequestParameterBuilder.prototype.addState = function (state) {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    };\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    RequestParameterBuilder.prototype.addNonce = function (nonce) {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    };\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        }\r\n        else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addDeviceCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    };\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    };\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    };\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    };\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    };\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addGrantType = function (grantType) {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    };\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    RequestParameterBuilder.prototype.addClientInfo = function () {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    };\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\r\n        var _this = this;\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach(function (key) {\r\n            _this.parameters.set(key, eQparams[key]);\r\n        });\r\n    };\r\n    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims;\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        }\r\n        else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n        return JSON.stringify(mergedClaims);\r\n    };\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    RequestParameterBuilder.prototype.addUsername = function (username) {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    };\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    RequestParameterBuilder.prototype.addPassword = function (password) {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    };\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    };\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */\r\n    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    };\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    RequestParameterBuilder.prototype.addThrottling = function () {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    };\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    RequestParameterBuilder.prototype.createQueryString = function () {\r\n        var queryParameterArray = new Array();\r\n        this.parameters.forEach(function (value, key) {\r\n            queryParameterArray.push(key + \"=\" + value);\r\n        });\r\n        return queryParameterArray.join(\"&\");\r\n    };\r\n    return RequestParameterBuilder;\r\n}());\n\nexport { RequestParameterBuilder };\n"]},"metadata":{},"sourceType":"module"}