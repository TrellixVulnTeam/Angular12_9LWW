{"ast":null,"code":"/**\n * @module ol/source/TileArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { createEmpty } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\n\nvar TileArcGISRest = function (_super) {\n  __extends(TileArcGISRest, _super);\n  /**\n   * @param {Options} [opt_options] Tile ArcGIS Rest options.\n   */\n\n\n  function TileArcGISRest(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    _this.tmpExtent_ = createEmpty();\n\n    _this.setKey(_this.getKeyForParams_());\n\n    return _this;\n  }\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n\n\n  TileArcGISRest.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n\n    return res.join('/');\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  TileArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n\n\n  TileArcGISRest.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n\n    if (!urls) {\n      return undefined;\n    } // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n\n\n    var srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n    var url;\n\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileArcGISRest.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  TileArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n\n\n  TileArcGISRest.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    } // Apply default params and override with user specified values.\n\n\n    var baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n\n  return TileArcGISRest;\n}(TileImage);\n\nexport default TileArcGISRest;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/TileArcGISRest.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","TileImage","appendParams","assign","createEmpty","modulo","scale","scaleSize","toSize","hash","tileCoordHash","TileArcGISRest","_super","opt_options","_this","options","attributions","cacheSize","crossOrigin","imageSmoothing","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","zDirection","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","index","modifiedUrl","replace","getTilePixelRatio","updateParams","tileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { createEmpty } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nvar TileArcGISRest = /** @class */ (function (_super) {\n    __extends(TileArcGISRest, _super);\n    /**\n     * @param {Options} [opt_options] Tile ArcGIS Rest options.\n     */\n    function TileArcGISRest(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            imageSmoothing: options.imageSmoothing,\n            projection: options.projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @private\n         * @type {!Object}\n         */\n        _this.params_ = options.params || {};\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        _this.tmpExtent_ = createEmpty();\n        _this.setKey(_this.getKeyForParams_());\n        return _this;\n    }\n    /**\n     * @private\n     * @return {string} The key for the current params.\n     */\n    TileArcGISRest.prototype.getKeyForParams_ = function () {\n        var i = 0;\n        var res = [];\n        for (var key in this.params_) {\n            res[i++] = key + '-' + this.params_[key];\n        }\n        return res.join('/');\n    };\n    /**\n     * Get the user-provided params, i.e. those passed to the constructor through\n     * the \"params\" option, and possibly updated using the updateParams method.\n     * @return {Object} Params.\n     * @api\n     */\n    TileArcGISRest.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../size.js\").Size} tileSize Tile size.\n     * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {Object} params Params.\n     * @return {string|undefined} Request URL.\n     * @private\n     */\n    TileArcGISRest.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n        var urls = this.urls;\n        if (!urls) {\n            return undefined;\n        }\n        // ArcGIS Server only wants the numeric portion of the projection ID.\n        // (if there is no numeric portion the entire projection code must\n        // form a valid ArcGIS SpatialReference definition).\n        var srid = projection\n            .getCode()\n            .split(/:(?=\\d+$)/)\n            .pop();\n        params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n        params['BBOX'] = tileExtent.join(',');\n        params['BBOXSR'] = srid;\n        params['IMAGESR'] = srid;\n        params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n        var url;\n        if (urls.length == 1) {\n            url = urls[0];\n        }\n        else {\n            var index = modulo(tileCoordHash(tileCoord), urls.length);\n            url = urls[index];\n        }\n        var modifiedUrl = url\n            .replace(/MapServer\\/?$/, 'MapServer/export')\n            .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n        return appendParams(modifiedUrl, params);\n    };\n    /**\n     * Get the tile pixel ratio for this source.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n    TileArcGISRest.prototype.getTilePixelRatio = function (pixelRatio) {\n        return this.hidpi_ ? pixelRatio : 1;\n    };\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n    TileArcGISRest.prototype.updateParams = function (params) {\n        assign(this.params_, params);\n        this.setKey(this.getKeyForParams_());\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n     * @param {number} pixelRatio The pixel ratio\n     * @param {import(\"../proj/Projection.js\").default} projection The projection\n     * @return {string|undefined} The tile URL\n     * @override\n     */\n    TileArcGISRest.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n        var tileGrid = this.getTileGrid();\n        if (!tileGrid) {\n            tileGrid = this.getTileGridForProjection(projection);\n        }\n        if (tileGrid.getResolutions().length <= tileCoord[0]) {\n            return undefined;\n        }\n        if (pixelRatio != 1 && !this.hidpi_) {\n            pixelRatio = 1;\n        }\n        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n        var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n        if (pixelRatio != 1) {\n            tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n        }\n        // Apply default params and override with user specified values.\n        var baseParams = {\n            'F': 'image',\n            'FORMAT': 'PNG32',\n            'TRANSPARENT': true,\n        };\n        assign(baseParams, this.params_);\n        return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n    };\n    return TileArcGISRest;\n}(TileImage));\nexport default TileArcGISRest;\n"]},"metadata":{},"sourceType":"module"}