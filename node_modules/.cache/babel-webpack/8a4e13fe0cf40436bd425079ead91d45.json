{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants, Separators } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\n\nfunction buildClientInfo(rawClientInfo, crypto) {\n  if (StringUtils.isEmpty(rawClientInfo)) {\n    throw ClientAuthError.createClientInfoEmptyError();\n  }\n\n  try {\n    var decodedClientInfo = crypto.base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw ClientAuthError.createClientInfoDecodingError(e);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\n\n\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (StringUtils.isEmpty(homeAccountId)) {\n    throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n  }\n\n  var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/account/ClientInfo.js"],"names":["ClientAuthError","StringUtils","Constants","Separators","buildClientInfo","rawClientInfo","crypto","isEmpty","createClientInfoEmptyError","decodedClientInfo","base64Decode","JSON","parse","e","createClientInfoDecodingError","buildClientInfoFromHomeAccountId","homeAccountId","clientInfoParts","split","CLIENT_INFO_SEPARATOR","uid","utid","length","EMPTY_STRING"],"mappings":"AAAA;AACA;;AACA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,uBAAtC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,MAAxC,EAAgD;AAC5C,MAAIL,WAAW,CAACM,OAAZ,CAAoBF,aAApB,CAAJ,EAAwC;AACpC,UAAML,eAAe,CAACQ,0BAAhB,EAAN;AACH;;AACD,MAAI;AACA,QAAIC,iBAAiB,GAAGH,MAAM,CAACI,YAAP,CAAoBL,aAApB,CAAxB;AACA,WAAOM,IAAI,CAACC,KAAL,CAAWH,iBAAX,CAAP;AACH,GAHD,CAIA,OAAOI,CAAP,EAAU;AACN,UAAMb,eAAe,CAACc,6BAAhB,CAA8CD,CAA9C,CAAN;AACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASE,gCAAT,CAA0CC,aAA1C,EAAyD;AACrD,MAAIf,WAAW,CAACM,OAAZ,CAAoBS,aAApB,CAAJ,EAAwC;AACpC,UAAMhB,eAAe,CAACc,6BAAhB,CAA8C,4BAA9C,CAAN;AACH;;AACD,MAAIG,eAAe,GAAGD,aAAa,CAACE,KAAd,CAAoBf,UAAU,CAACgB,qBAA/B,EAAsD,CAAtD,CAAtB;AACA,SAAO;AACHC,IAAAA,GAAG,EAAEH,eAAe,CAAC,CAAD,CADjB;AAEHI,IAAAA,IAAI,EAAEJ,eAAe,CAACK,MAAhB,GAAyB,CAAzB,GAA6BpB,SAAS,CAACqB,YAAvC,GAAsDN,eAAe,CAAC,CAAD;AAFxE,GAAP;AAIH;;AAED,SAASb,eAAT,EAA0BW,gCAA1B","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { Constants, Separators } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, crypto) {\r\n    if (StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError();\r\n    }\r\n    try {\r\n        var decodedClientInfo = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError(e);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (StringUtils.isEmpty(homeAccountId)) {\r\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\r\n    }\r\n    var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\r\n    };\r\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };\n"]},"metadata":{},"sourceType":"module"}