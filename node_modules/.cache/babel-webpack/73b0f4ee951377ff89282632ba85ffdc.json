{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * @hidden\r\n */\n\nvar StringUtils = function () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n\n\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n\n\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n\n\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n\n    return true;\n  };\n\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n\n\n  StringUtils.queryStringToObject = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(pl, \" \"));\n    };\n\n    var obj = {};\n    match = search.exec(query);\n\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n\n\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n\n\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n\n\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n\n\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n    return regex.test(input);\n  };\n\n  return StringUtils;\n}();\n\nexport { StringUtils };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/utils/StringUtils.js"],"names":["ClientAuthError","StringUtils","decodeAuthToken","authToken","isEmpty","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","isEmptyObj","strObj","obj","parse","Object","keys","e","startsWith","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","match","pl","decode","s","decodeURIComponent","replace","trimArrayEntries","arr","map","entry","trim","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    StringUtils.decodeAuthToken = function (authToken) {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    StringUtils.isEmptyObj = function (strObj) {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                var obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    };\r\n    StringUtils.startsWith = function (str, search) {\r\n        return str.indexOf(search) === 0;\r\n    };\r\n    StringUtils.endsWith = function (str, search) {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimArrayEntries = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim(); });\r\n    };\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    StringUtils.removeEmptyStringsFromArray = function (arr) {\r\n        return arr.filter(function (entry) {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    };\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    StringUtils.jsonParseHelper = function (str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    StringUtils.matchPattern = function (pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\r\n        return regex.test(input);\r\n    };\r\n    return StringUtils;\r\n}());\n\nexport { StringUtils };\n"]},"metadata":{},"sourceType":"module"}