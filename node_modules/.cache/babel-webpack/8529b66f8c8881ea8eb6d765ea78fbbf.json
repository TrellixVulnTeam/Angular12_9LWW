{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\n\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\n\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\n\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\n\nexport function memoizeOne(fn) {\n  var called = false;\n  /** @type {ReturnType} */\n\n  var lastResult;\n  /** @type {Array<any>} */\n\n  var lastArgs;\n  var lastThis;\n  return function () {\n    var nextArgs = Array.prototype.slice.call(arguments);\n\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n\n    return lastResult;\n  };\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/functions.js"],"names":["equals","arrayEquals","TRUE","FALSE","VOID","memoizeOne","fn","called","lastResult","lastArgs","lastThis","nextArgs","Array","prototype","slice","call","arguments","apply"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,MAAM,IAAIC,WAAnB,QAAsC,YAAtC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB;AACnB,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;AACpB,SAAO,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB,CAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AAC3B,MAAIC,MAAM,GAAG,KAAb;AACA;;AACA,MAAIC,UAAJ;AACA;;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,SAAO,YAAY;AACf,QAAIC,QAAQ,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAf;;AACA,QAAI,CAACT,MAAD,IAAW,SAASG,QAApB,IAAgC,CAACT,WAAW,CAACU,QAAD,EAAWF,QAAX,CAAhD,EAAsE;AAClEF,MAAAA,MAAM,GAAG,IAAT;AACAG,MAAAA,QAAQ,GAAG,IAAX;AACAD,MAAAA,QAAQ,GAAGE,QAAX;AACAH,MAAAA,UAAU,GAAGF,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeD,SAAf,CAAb;AACH;;AACD,WAAOR,UAAP;AACH,GATD;AAUH","sourcesContent":["/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n    return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n    return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() { }\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n    var called = false;\n    /** @type {ReturnType} */\n    var lastResult;\n    /** @type {Array<any>} */\n    var lastArgs;\n    var lastThis;\n    return function () {\n        var nextArgs = Array.prototype.slice.call(arguments);\n        if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n            called = true;\n            lastThis = this;\n            lastArgs = nextArgs;\n            lastResult = fn.apply(this, arguments);\n        }\n        return lastResult;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}