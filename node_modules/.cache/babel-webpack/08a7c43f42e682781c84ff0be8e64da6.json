{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/TileImage\n */\n\n\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { IMAGE_SMOOTHING_DISABLED } from './common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\n\nvar TileImage = function (_super) {\n  __extends(TileImage, _super);\n  /**\n   * @param {!Options} options Image tile options.\n   */\n\n\n  function TileImage(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @protected\n     * @type {?string}\n     */\n\n\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n\n    _this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n\n    _this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {object|undefined}\n     */\n\n    _this.contextOptions_ = options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileImage.prototype.canExpireCache = function () {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.canExpireCache.call(this);\n    }\n\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileImage.prototype.expireCache = function (projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      _super.prototype.expireCache.call(this, projection, usedTiles);\n\n      return;\n    }\n\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @return {Object|undefined} Context options.\n   */\n\n\n  TileImage.prototype.getContextOptions = function () {\n    return this.contextOptions_;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutterForProjection = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n  /**\n   * @return {number} Gutter.\n   */\n\n\n  TileImage.prototype.getGutter = function () {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n\n\n  TileImage.prototype.getKey = function () {\n    return _super.prototype.getKey.call(this) + (this.contextOptions_ ? '\\n' + JSON.stringify(this.contextOptions_) : '');\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileImage.prototype.getOpaque = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return _super.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileImage.prototype.getTileGridForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileGridForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n\n      return this.tileGridForProjection[projKey];\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n\n\n  TileImage.prototype.getTileCacheForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileCacheForProjection.call(this, projection);\n    }\n\n    var thisProj = this.getProjection();\n\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @private\n   */\n\n\n  TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n\n\n  TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile = void 0;\n      var tileCoordKey = getKey(tileCoord);\n\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n\n      var key = this.getKey();\n\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.contextOptions_);\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   * @protected\n   */\n\n\n  TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key); //make the new tile the head of the list,\n\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n\n\n  TileImage.prototype.setRenderReprojectionEdges = function (render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n\n    this.renderReprojectionEdges_ = render;\n\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n\n\n  TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n\n      if (proj) {\n        var projKey = getUid(proj);\n\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\n\n\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  imageTile.getImage().src = src;\n}\n\nexport default TileImage;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/source/TileImage.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","ENABLE_RASTER_REPROJECTION","IMAGE_SMOOTHING_DISABLED","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","_super","options","_this","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","key","attributionsCollapsible","zDirection","crossOrigin","undefined","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","contextOptions_","imageSmoothing","renderReprojectionEdges_","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getContextOptions","getGutterForProjection","getGutter","JSON","stringify","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnB,QAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;AACJF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASW,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBb,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;AACH,GAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,0BAAT,QAA2C,qBAA3C;AACA,SAASC,wBAAT,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,GAAG,IAAIC,aAA5B,QAAiD,YAAjD;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,iBAAlC;AACA,SAASC,gBAAgB,IAAIC,wBAA7B,QAA6D,gBAA7D;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAkB,UAAUC,MAAV,EAAkB;AAC7ClC,EAAAA,SAAS,CAACiC,SAAD,EAAYC,MAAZ,CAAT;AACA;AACJ;AACA;;;AACI,WAASD,SAAT,CAAmBE,OAAnB,EAA4B;AACxB,QAAIC,KAAK,GAAGF,MAAM,CAACvB,IAAP,CAAY,IAAZ,EAAkB;AAC1B0B,MAAAA,YAAY,EAAEF,OAAO,CAACE,YADI;AAE1BC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SAFO;AAG1BC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAHU;AAI1BC,MAAAA,UAAU,EAAEL,OAAO,CAACK,UAJM;AAK1BC,MAAAA,KAAK,EAAEN,OAAO,CAACM,KALW;AAM1BC,MAAAA,QAAQ,EAAEP,OAAO,CAACO,QANQ;AAO1BC,MAAAA,gBAAgB,EAAER,OAAO,CAACQ,gBAAR,GACZR,OAAO,CAACQ,gBADI,GAEZC,uBAToB;AAU1BC,MAAAA,cAAc,EAAEV,OAAO,CAACU,cAVE;AAW1BC,MAAAA,eAAe,EAAEX,OAAO,CAACW,eAXC;AAY1BC,MAAAA,GAAG,EAAEZ,OAAO,CAACY,GAZa;AAa1BC,MAAAA,IAAI,EAAEb,OAAO,CAACa,IAbY;AAc1BC,MAAAA,KAAK,EAAEd,OAAO,CAACc,KAdW;AAe1BC,MAAAA,UAAU,EAAEf,OAAO,CAACe,UAfM;AAgB1BC,MAAAA,GAAG,EAAEhB,OAAO,CAACgB,GAhBa;AAiB1BC,MAAAA,uBAAuB,EAAEjB,OAAO,CAACiB,uBAjBP;AAkB1BC,MAAAA,UAAU,EAAElB,OAAO,CAACkB;AAlBM,KAAlB,KAmBN,IAnBN;AAoBA;AACR;AACA;AACA;;;AACQjB,IAAAA,KAAK,CAACkB,WAAN,GACInB,OAAO,CAACmB,WAAR,KAAwBC,SAAxB,GAAoCpB,OAAO,CAACmB,WAA5C,GAA0D,IAD9D;AAEA;AACR;AACA;AACA;;AACQlB,IAAAA,KAAK,CAACoB,SAAN,GACIrB,OAAO,CAACqB,SAAR,KAAsBD,SAAtB,GAAkCpB,OAAO,CAACqB,SAA1C,GAAsDtC,SAD1D;AAEA;AACR;AACA;AACA;;AACQkB,IAAAA,KAAK,CAACqB,sBAAN,GAA+B,EAA/B;AACA;AACR;AACA;AACA;;AACQrB,IAAAA,KAAK,CAACsB,qBAAN,GAA8B,EAA9B;AACA;AACR;AACA;AACA;;AACQtB,IAAAA,KAAK,CAACuB,2BAAN,GAAoCxB,OAAO,CAACyB,0BAA5C;AACA;AACR;AACA;AACA;;AACQxB,IAAAA,KAAK,CAACyB,eAAN,GACI1B,OAAO,CAAC2B,cAAR,KAA2B,KAA3B,GAAmCtC,wBAAnC,GAA8D+B,SADlE;AAEA;AACR;AACA;AACA;;AACQnB,IAAAA,KAAK,CAAC2B,wBAAN,GAAiC,KAAjC;AACA,WAAO3B,KAAP;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,SAAS,CAACxB,SAAV,CAAoBuD,cAApB,GAAqC,YAAY;AAC7C,QAAI,CAACzC,0BAAL,EAAiC;AAC7B,aAAOW,MAAM,CAACzB,SAAP,CAAiBuD,cAAjB,CAAgCrD,IAAhC,CAAqC,IAArC,CAAP;AACH;;AACD,QAAI,KAAKsD,SAAL,CAAeD,cAAf,EAAJ,EAAqC;AACjC,aAAO,IAAP;AACH,KAFD,MAGK;AACD,WAAK,IAAIb,GAAT,IAAgB,KAAKM,sBAArB,EAA6C;AACzC,YAAI,KAAKA,sBAAL,CAA4BN,GAA5B,EAAiCa,cAAjC,EAAJ,EAAuD;AACnD,iBAAO,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH,GAfD;AAgBA;AACJ;AACA;AACA;;;AACI/B,EAAAA,SAAS,CAACxB,SAAV,CAAoByD,WAApB,GAAkC,UAAU1B,UAAV,EAAsB2B,SAAtB,EAAiC;AAC/D,QAAI,CAAC5C,0BAAL,EAAiC;AAC7BW,MAAAA,MAAM,CAACzB,SAAP,CAAiByD,WAAjB,CAA6BvD,IAA7B,CAAkC,IAAlC,EAAwC6B,UAAxC,EAAoD2B,SAApD;;AACA;AACH;;AACD,QAAIC,aAAa,GAAG,KAAKC,yBAAL,CAA+B7B,UAA/B,CAApB;AACA,SAAKyB,SAAL,CAAeC,WAAf,CAA2B,KAAKD,SAAL,IAAkBG,aAAlB,GAAkCD,SAAlC,GAA8C,EAAzE;;AACA,SAAK,IAAIG,EAAT,IAAe,KAAKb,sBAApB,EAA4C;AACxC,UAAIQ,SAAS,GAAG,KAAKR,sBAAL,CAA4Ba,EAA5B,CAAhB;AACAL,MAAAA,SAAS,CAACC,WAAV,CAAsBD,SAAS,IAAIG,aAAb,GAA6BD,SAA7B,GAAyC,EAA/D;AACH;AACJ,GAXD;AAYA;AACJ;AACA;;;AACIlC,EAAAA,SAAS,CAACxB,SAAV,CAAoB8D,iBAApB,GAAwC,YAAY;AAChD,WAAO,KAAKV,eAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACI5B,EAAAA,SAAS,CAACxB,SAAV,CAAoB+D,sBAApB,GAA6C,UAAUhC,UAAV,EAAsB;AAC/D,QAAIjB,0BAA0B,IAC1B,KAAKI,aAAL,EADA,IAEAa,UAFA,IAGA,CAACf,UAAU,CAAC,KAAKE,aAAL,EAAD,EAAuBa,UAAvB,CAHf,EAGmD;AAC/C,aAAO,CAAP;AACH,KALD,MAMK;AACD,aAAO,KAAKiC,SAAL,EAAP;AACH;AACJ,GAVD;AAWA;AACJ;AACA;;;AACIxC,EAAAA,SAAS,CAACxB,SAAV,CAAoBgE,SAApB,GAAgC,YAAY;AACxC,WAAO,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIxC,EAAAA,SAAS,CAACxB,SAAV,CAAoBmB,MAApB,GAA6B,YAAY;AACrC,WAAQM,MAAM,CAACzB,SAAP,CAAiBmB,MAAjB,CAAwBjB,IAAxB,CAA6B,IAA7B,KACH,KAAKkD,eAAL,GAAuB,OAAOa,IAAI,CAACC,SAAL,CAAe,KAAKd,eAApB,CAA9B,GAAqE,EADlE,CAAR;AAEH,GAHD;AAIA;AACJ;AACA;AACA;;;AACI5B,EAAAA,SAAS,CAACxB,SAAV,CAAoBmE,SAApB,GAAgC,UAAUpC,UAAV,EAAsB;AAClD,QAAIjB,0BAA0B,IAC1B,KAAKI,aAAL,EADA,IAEAa,UAFA,IAGA,CAACf,UAAU,CAAC,KAAKE,aAAL,EAAD,EAAuBa,UAAvB,CAHf,EAGmD;AAC/C,aAAO,KAAP;AACH,KALD,MAMK;AACD,aAAON,MAAM,CAACzB,SAAP,CAAiBmE,SAAjB,CAA2BjE,IAA3B,CAAgC,IAAhC,EAAsC6B,UAAtC,CAAP;AACH;AACJ,GAVD;AAWA;AACJ;AACA;AACA;;;AACIP,EAAAA,SAAS,CAACxB,SAAV,CAAoBsB,wBAApB,GAA+C,UAAUS,UAAV,EAAsB;AACjE,QAAI,CAACjB,0BAAL,EAAiC;AAC7B,aAAOW,MAAM,CAACzB,SAAP,CAAiBsB,wBAAjB,CAA0CpB,IAA1C,CAA+C,IAA/C,EAAqD6B,UAArD,CAAP;AACH;;AACD,QAAIqC,QAAQ,GAAG,KAAKlD,aAAL,EAAf;;AACA,QAAI,KAAKe,QAAL,KAAkB,CAACmC,QAAD,IAAapD,UAAU,CAACoD,QAAD,EAAWrC,UAAX,CAAzC,CAAJ,EAAsE;AAClE,aAAO,KAAKE,QAAZ;AACH,KAFD,MAGK;AACD,UAAIoC,OAAO,GAAG9C,MAAM,CAACQ,UAAD,CAApB;;AACA,UAAI,EAAEsC,OAAO,IAAI,KAAKpB,qBAAlB,CAAJ,EAA8C;AAC1C,aAAKA,qBAAL,CAA2BoB,OAA3B,IACI/C,wBAAwB,CAACS,UAAD,CAD5B;AAEH;;AACD,aAAO,KAAKkB,qBAAL,CAA2BoB,OAA3B,CAAP;AACH;AACJ,GAhBD;AAiBA;AACJ;AACA;AACA;;;AACI7C,EAAAA,SAAS,CAACxB,SAAV,CAAoB4D,yBAApB,GAAgD,UAAU7B,UAAV,EAAsB;AAClE,QAAI,CAACjB,0BAAL,EAAiC;AAC7B,aAAOW,MAAM,CAACzB,SAAP,CAAiB4D,yBAAjB,CAA2C1D,IAA3C,CAAgD,IAAhD,EAAsD6B,UAAtD,CAAP;AACH;;AACD,QAAIqC,QAAQ,GAAG,KAAKlD,aAAL,EAAf;;AACA,QAAI,CAACkD,QAAD,IAAapD,UAAU,CAACoD,QAAD,EAAWrC,UAAX,CAA3B,EAAmD;AAC/C,aAAO,KAAKyB,SAAZ;AACH,KAFD,MAGK;AACD,UAAIa,OAAO,GAAG9C,MAAM,CAACQ,UAAD,CAApB;;AACA,UAAI,EAAEsC,OAAO,IAAI,KAAKrB,sBAAlB,CAAJ,EAA+C;AAC3C,aAAKA,sBAAL,CAA4BqB,OAA5B,IAAuC,IAAI1D,SAAJ,CAAc,KAAK6C,SAAL,CAAec,aAA7B,CAAvC;AACH;;AACD,aAAO,KAAKtB,sBAAL,CAA4BqB,OAA5B,CAAP;AACH;AACJ,GAfD;AAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7C,EAAAA,SAAS,CAACxB,SAAV,CAAoBuE,WAApB,GAAkC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+B5C,UAA/B,EAA2CW,GAA3C,EAAgD;AAC9E,QAAIkC,SAAS,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACA,QAAIG,YAAY,GAAG,KAAKC,8BAAL,CAAoCF,SAApC,EAA+C7C,UAA/C,CAAnB;AACA,QAAIgD,OAAO,GAAGF,YAAY,GACpB,KAAKxC,eAAL,CAAqBwC,YAArB,EAAmCF,UAAnC,EAA+C5C,UAA/C,CADoB,GAEpBe,SAFN;AAGA,QAAIkC,IAAI,GAAG,IAAI,KAAKjC,SAAT,CAAmB6B,SAAnB,EAA8BG,OAAO,KAAKjC,SAAZ,GAAwBlC,SAAS,CAACqE,IAAlC,GAAyCrE,SAAS,CAACsE,KAAjF,EAAwFH,OAAO,KAAKjC,SAAZ,GAAwBiC,OAAxB,GAAkC,EAA1H,EAA8H,KAAKlC,WAAnI,EAAgJ,KAAKX,gBAArJ,EAAuK,KAAKiD,WAA5K,CAAX;AACAH,IAAAA,IAAI,CAACtC,GAAL,GAAWA,GAAX;AACAsC,IAAAA,IAAI,CAACI,gBAAL,CAAsB5E,SAAS,CAAC6E,MAAhC,EAAwC,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxC;AACA,WAAOP,IAAP;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxD,EAAAA,SAAS,CAACxB,SAAV,CAAoBwF,OAApB,GAA8B,UAAUhB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+B5C,UAA/B,EAA2C;AACrE,QAAI0D,gBAAgB,GAAG,KAAKvE,aAAL,EAAvB;;AACA,QAAI,CAACJ,0BAAD,IACA,CAAC2E,gBADD,IAEA,CAAC1D,UAFD,IAGAf,UAAU,CAACyE,gBAAD,EAAmB1D,UAAnB,CAHd,EAG8C;AAC1C,aAAO,KAAK2D,eAAL,CAAqBlB,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,UAA9B,EAA0Cc,gBAAgB,IAAI1D,UAA9D,CAAP;AACH,KALD,MAMK;AACD,UAAI4D,KAAK,GAAG,KAAK/B,yBAAL,CAA+B7B,UAA/B,CAAZ;AACA,UAAI6C,SAAS,GAAG,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACA,UAAIM,IAAI,GAAG,KAAK,CAAhB;AACA,UAAIY,YAAY,GAAGzE,MAAM,CAACyD,SAAD,CAAzB;;AACA,UAAIe,KAAK,CAACE,WAAN,CAAkBD,YAAlB,CAAJ,EAAqC;AACjCZ,QAAAA,IAAI,GAAGW,KAAK,CAAC1E,GAAN,CAAU2E,YAAV,CAAP;AACH;;AACD,UAAIlD,GAAG,GAAG,KAAKvB,MAAL,EAAV;;AACA,UAAI6D,IAAI,IAAIA,IAAI,CAACtC,GAAL,IAAYA,GAAxB,EAA6B;AACzB,eAAOsC,IAAP;AACH,OAFD,MAGK;AACD,YAAIc,cAAc,GAAG,KAAKxE,wBAAL,CAA8BmE,gBAA9B,CAArB;AACA,YAAIM,cAAc,GAAG,KAAKzE,wBAAL,CAA8BS,UAA9B,CAArB;AACA,YAAIiE,gBAAgB,GAAG,KAAKlB,8BAAL,CAAoCF,SAApC,EAA+C7C,UAA/C,CAAvB;AACA,YAAIkE,OAAO,GAAG,IAAIvF,UAAJ,CAAe+E,gBAAf,EAAiCK,cAAjC,EAAiD/D,UAAjD,EAA6DgE,cAA7D,EAA6EnB,SAA7E,EAAwFoB,gBAAxF,EAA0G,KAAKE,iBAAL,CAAuBvB,UAAvB,CAA1G,EAA8I,KAAKX,SAAL,EAA9I,EAAgK,UAAUQ,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+B;AACzM,iBAAO,KAAKe,eAAL,CAAqBlB,CAArB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,UAA9B,EAA0Cc,gBAA1C,CAAP;AACH,SAF6K,CAE5KF,IAF4K,CAEvK,IAFuK,CAAhK,EAEA,KAAKrC,2BAFL,EAEkC,KAAKI,wBAFvC,EAEiE,KAAKF,eAFtE,CAAd;AAGA6C,QAAAA,OAAO,CAACvD,GAAR,GAAcA,GAAd;;AACA,YAAIsC,IAAJ,EAAU;AACNiB,UAAAA,OAAO,CAACE,WAAR,GAAsBnB,IAAtB;AACAiB,UAAAA,OAAO,CAACG,mBAAR;AACAT,UAAAA,KAAK,CAACU,OAAN,CAAcT,YAAd,EAA4BK,OAA5B;AACH,SAJD,MAKK;AACDN,UAAAA,KAAK,CAACW,GAAN,CAAUV,YAAV,EAAwBK,OAAxB;AACH;;AACD,eAAOA,OAAP;AACH;AACJ;AACJ,GAvCD;AAwCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzE,EAAAA,SAAS,CAACxB,SAAV,CAAoB0F,eAApB,GAAsC,UAAUlB,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,UAAnB,EAA+B5C,UAA/B,EAA2C;AAC7E,QAAIiD,IAAI,GAAG,IAAX;AACA,QAAIY,YAAY,GAAGxE,SAAS,CAACoD,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAA5B;AACA,QAAIhC,GAAG,GAAG,KAAKvB,MAAL,EAAV;;AACA,QAAI,CAAC,KAAKqC,SAAL,CAAeqC,WAAf,CAA2BD,YAA3B,CAAL,EAA+C;AAC3CZ,MAAAA,IAAI,GAAG,KAAKT,WAAL,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,EAAsC5C,UAAtC,EAAkDW,GAAlD,CAAP;AACA,WAAKc,SAAL,CAAe8C,GAAf,CAAmBV,YAAnB,EAAiCZ,IAAjC;AACH,KAHD,MAIK;AACDA,MAAAA,IAAI,GAAG,KAAKxB,SAAL,CAAevC,GAAf,CAAmB2E,YAAnB,CAAP;;AACA,UAAIZ,IAAI,CAACtC,GAAL,IAAYA,GAAhB,EAAqB;AACjB;AACA;AACA;AACA,YAAIyD,WAAW,GAAGnB,IAAlB;AACAA,QAAAA,IAAI,GAAG,KAAKT,WAAL,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,EAAsC5C,UAAtC,EAAkDW,GAAlD,CAAP,CALiB,CAMjB;;AACA,YAAIyD,WAAW,CAACI,QAAZ,MAA0B3F,SAAS,CAACqE,IAAxC,EAA8C;AAC1C;AACAD,UAAAA,IAAI,CAACmB,WAAL,GAAmBA,WAAW,CAACA,WAA/B;AACH,SAHD,MAIK;AACDnB,UAAAA,IAAI,CAACmB,WAAL,GAAmBA,WAAnB;AACH;;AACDnB,QAAAA,IAAI,CAACoB,mBAAL;AACA,aAAK5C,SAAL,CAAe6C,OAAf,CAAuBT,YAAvB,EAAqCZ,IAArC;AACH;AACJ;;AACD,WAAOA,IAAP;AACH,GA7BD;AA8BA;AACJ;AACA;AACA;AACA;;;AACIxD,EAAAA,SAAS,CAACxB,SAAV,CAAoBwG,0BAApB,GAAiD,UAAUC,MAAV,EAAkB;AAC/D,QAAI,CAAC3F,0BAAD,IACA,KAAKwC,wBAAL,IAAiCmD,MADrC,EAC6C;AACzC;AACH;;AACD,SAAKnD,wBAAL,GAAgCmD,MAAhC;;AACA,SAAK,IAAI5C,EAAT,IAAe,KAAKb,sBAApB,EAA4C;AACxC,WAAKA,sBAAL,CAA4Ba,EAA5B,EAAgC6C,KAAhC;AACH;;AACD,SAAKC,OAAL;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInF,EAAAA,SAAS,CAACxB,SAAV,CAAoB4G,wBAApB,GAA+C,UAAU7E,UAAV,EAAsB8E,QAAtB,EAAgC;AAC3E,QAAI/F,0BAAJ,EAAgC;AAC5B,UAAIgG,IAAI,GAAG5F,aAAa,CAACa,UAAD,CAAxB;;AACA,UAAI+E,IAAJ,EAAU;AACN,YAAIzC,OAAO,GAAG9C,MAAM,CAACuF,IAAD,CAApB;;AACA,YAAI,EAAEzC,OAAO,IAAI,KAAKpB,qBAAlB,CAAJ,EAA8C;AAC1C,eAAKA,qBAAL,CAA2BoB,OAA3B,IAAsCwC,QAAtC;AACH;AACJ;AACJ;AACJ,GAVD;;AAWA,SAAOrF,SAAP;AACH,CArV8B,CAqV7BX,OArV6B,CAA/B;AAsVA;AACA;AACA;AACA;;;AACA,SAASsB,uBAAT,CAAiC4E,SAAjC,EAA4CC,GAA5C,EAAiD;AAC7C;AAAkDD,EAAAA,SAAS,CAACE,QAAV,EAAD,CAAuBD,GAAvB,GAC7CA,GAD6C;AAEpD;;AACD,eAAexF,SAAf","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { IMAGE_SMOOTHING_DISABLED } from './common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /** @class */ (function (_super) {\n    __extends(TileImage, _super);\n    /**\n     * @param {!Options} options Image tile options.\n     */\n    function TileImage(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            opaque: options.opaque,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction\n                ? options.tileLoadFunction\n                : defaultTileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @protected\n         * @type {?string}\n         */\n        _this.crossOrigin =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @protected\n         * @type {typeof ImageTile}\n         */\n        _this.tileClass =\n            options.tileClass !== undefined ? options.tileClass : ImageTile;\n        /**\n         * @protected\n         * @type {!Object<string, TileCache>}\n         */\n        _this.tileCacheForProjection = {};\n        /**\n         * @protected\n         * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n         */\n        _this.tileGridForProjection = {};\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n        /**\n         * @private\n         * @type {object|undefined}\n         */\n        _this.contextOptions_ =\n            options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderReprojectionEdges_ = false;\n        return _this;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    TileImage.prototype.canExpireCache = function () {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.canExpireCache.call(this);\n        }\n        if (this.tileCache.canExpireCache()) {\n            return true;\n        }\n        else {\n            for (var key in this.tileCacheForProjection) {\n                if (this.tileCacheForProjection[key].canExpireCache()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n    TileImage.prototype.expireCache = function (projection, usedTiles) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            _super.prototype.expireCache.call(this, projection, usedTiles);\n            return;\n        }\n        var usedTileCache = this.getTileCacheForProjection(projection);\n        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n        for (var id in this.tileCacheForProjection) {\n            var tileCache = this.tileCacheForProjection[id];\n            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n        }\n    };\n    /**\n     * @return {Object|undefined} Context options.\n     */\n    TileImage.prototype.getContextOptions = function () {\n        return this.contextOptions_;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n    TileImage.prototype.getGutterForProjection = function (projection) {\n        if (ENABLE_RASTER_REPROJECTION &&\n            this.getProjection() &&\n            projection &&\n            !equivalent(this.getProjection(), projection)) {\n            return 0;\n        }\n        else {\n            return this.getGutter();\n        }\n    };\n    /**\n     * @return {number} Gutter.\n     */\n    TileImage.prototype.getGutter = function () {\n        return 0;\n    };\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     * @protected\n     */\n    TileImage.prototype.getKey = function () {\n        return (_super.prototype.getKey.call(this) +\n            (this.contextOptions_ ? '\\n' + JSON.stringify(this.contextOptions_) : ''));\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n    TileImage.prototype.getOpaque = function (projection) {\n        if (ENABLE_RASTER_REPROJECTION &&\n            this.getProjection() &&\n            projection &&\n            !equivalent(this.getProjection(), projection)) {\n            return false;\n        }\n        else {\n            return _super.prototype.getOpaque.call(this, projection);\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n    TileImage.prototype.getTileGridForProjection = function (projection) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.getTileGridForProjection.call(this, projection);\n        }\n        var thisProj = this.getProjection();\n        if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n            return this.tileGrid;\n        }\n        else {\n            var projKey = getUid(projection);\n            if (!(projKey in this.tileGridForProjection)) {\n                this.tileGridForProjection[projKey] =\n                    getTileGridForProjection(projection);\n            }\n            return this.tileGridForProjection[projKey];\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     */\n    TileImage.prototype.getTileCacheForProjection = function (projection) {\n        if (!ENABLE_RASTER_REPROJECTION) {\n            return _super.prototype.getTileCacheForProjection.call(this, projection);\n        }\n        var thisProj = this.getProjection();\n        if (!thisProj || equivalent(thisProj, projection)) {\n            return this.tileCache;\n        }\n        else {\n            var projKey = getUid(projection);\n            if (!(projKey in this.tileCacheForProjection)) {\n                this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n            }\n            return this.tileCacheForProjection[projKey];\n        }\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {string} key The key set on the tile.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     * @private\n     */\n    TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n        var tileCoord = [z, x, y];\n        var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var tileUrl = urlTileCoord\n            ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n            : undefined;\n        var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n        tile.key = key;\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n        return tile;\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     */\n    TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n        var sourceProjection = this.getProjection();\n        if (!ENABLE_RASTER_REPROJECTION ||\n            !sourceProjection ||\n            !projection ||\n            equivalent(sourceProjection, projection)) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n        }\n        else {\n            var cache = this.getTileCacheForProjection(projection);\n            var tileCoord = [z, x, y];\n            var tile = void 0;\n            var tileCoordKey = getKey(tileCoord);\n            if (cache.containsKey(tileCoordKey)) {\n                tile = cache.get(tileCoordKey);\n            }\n            var key = this.getKey();\n            if (tile && tile.key == key) {\n                return tile;\n            }\n            else {\n                var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n                var targetTileGrid = this.getTileGridForProjection(projection);\n                var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n                var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n                    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n                }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.contextOptions_);\n                newTile.key = key;\n                if (tile) {\n                    newTile.interimTile = tile;\n                    newTile.refreshInterimChain();\n                    cache.replace(tileCoordKey, newTile);\n                }\n                else {\n                    cache.set(tileCoordKey, newTile);\n                }\n                return newTile;\n            }\n        }\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     * @protected\n     */\n    TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n        var tile = null;\n        var tileCoordKey = getKeyZXY(z, x, y);\n        var key = this.getKey();\n        if (!this.tileCache.containsKey(tileCoordKey)) {\n            tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n            this.tileCache.set(tileCoordKey, tile);\n        }\n        else {\n            tile = this.tileCache.get(tileCoordKey);\n            if (tile.key != key) {\n                // The source's params changed. If the tile has an interim tile and if we\n                // can use it then we use it. Otherwise we create a new tile.  In both\n                // cases we attempt to assign an interim tile to the new tile.\n                var interimTile = tile;\n                tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n                //make the new tile the head of the list,\n                if (interimTile.getState() == TileState.IDLE) {\n                    //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n                    tile.interimTile = interimTile.interimTile;\n                }\n                else {\n                    tile.interimTile = interimTile;\n                }\n                tile.refreshInterimChain();\n                this.tileCache.replace(tileCoordKey, tile);\n            }\n        }\n        return tile;\n    };\n    /**\n     * Sets whether to render reprojection edges or not (usually for debugging).\n     * @param {boolean} render Render the edges.\n     * @api\n     */\n    TileImage.prototype.setRenderReprojectionEdges = function (render) {\n        if (!ENABLE_RASTER_REPROJECTION ||\n            this.renderReprojectionEdges_ == render) {\n            return;\n        }\n        this.renderReprojectionEdges_ = render;\n        for (var id in this.tileCacheForProjection) {\n            this.tileCacheForProjection[id].clear();\n        }\n        this.changed();\n    };\n    /**\n     * Sets the tile grid to use when reprojecting the tiles to the given\n     * projection instead of the default tile grid for the projection.\n     *\n     * This can be useful when the default tile grid cannot be created\n     * (e.g. projection has no extent defined) or\n     * for optimization reasons (custom tile size, resolutions, ...).\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n     * @api\n     */\n    TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n        if (ENABLE_RASTER_REPROJECTION) {\n            var proj = getProjection(projection);\n            if (proj) {\n                var projKey = getUid(proj);\n                if (!(projKey in this.tileGridForProjection)) {\n                    this.tileGridForProjection[projKey] = tilegrid;\n                }\n            }\n        }\n    };\n    return TileImage;\n}(UrlTile));\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n        src;\n}\nexport default TileImage;\n"]},"metadata":{},"sourceType":"module"}