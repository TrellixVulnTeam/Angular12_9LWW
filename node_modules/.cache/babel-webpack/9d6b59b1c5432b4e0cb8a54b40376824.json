{"ast":null,"code":"/**\n * @module ol/control/ZoomSlider\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { clamp } from '../math.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\n\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\n\nvar ZoomSlider = function (_super) {\n  __extends(ZoomSlider, _super);\n  /**\n   * @param {Options} [opt_options] Zoom slider options.\n   */\n\n\n  function ZoomSlider(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render\n    }) || this;\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n\n    _this.dragListenerKeys_ = [];\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.currentResolution_ = undefined;\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n\n    _this.direction_ = Direction.VERTICAL;\n    /**\n     * @type {boolean}\n     * @private\n     */\n\n    _this.dragging_;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.heightLimit_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.widthLimit_ = 0;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.startX_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n\n    _this.startY_;\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n\n    _this.thumbSize_ = null;\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n\n    _this.sliderInitialized_ = false;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = _this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n    containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n\n\n  ZoomSlider.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n\n    if (map) {\n      map.render();\n    }\n  };\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n\n\n  ZoomSlider.prototype.initSlider_ = function () {\n    var container = this.element;\n    var containerWidth = container.offsetWidth;\n    var containerHeight = container.offsetHeight;\n\n    if (containerWidth === 0 && containerHeight === 0) {\n      return this.sliderInitialized_ = false;\n    }\n\n    var containerStyle = getComputedStyle(container);\n    containerWidth -= parseFloat(containerStyle['paddingRight']) + parseFloat(containerStyle['paddingLeft']);\n    containerHeight -= parseFloat(containerStyle['paddingTop']) + parseFloat(containerStyle['paddingBottom']);\n    var thumb = container.firstElementChild;\n    var thumbStyle = getComputedStyle(thumb);\n    var thumbWidth = thumb.offsetWidth + parseFloat(thumbStyle['marginRight']) + parseFloat(thumbStyle['marginLeft']);\n    var thumbHeight = thumb.offsetHeight + parseFloat(thumbStyle['marginTop']) + parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n\n    return this.sliderInitialized_ = true;\n  };\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleContainerClick_ = function (event) {\n    var view = this.getMap().getView();\n    var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n    var resolution = this.getResolutionForPosition_(relativePosition);\n    var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut\n    });\n  };\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      var element = this.element.firstElementChild;\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        var drag = this.handleDraggerDrag_;\n        var end = this.handleDraggerEnd_;\n        var doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(listen(doc, PointerEventType.POINTERMOVE, drag, this), listen(doc, PointerEventType.POINTERUP, end, this));\n      }\n    }\n  };\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n    if (this.dragging_) {\n      var deltaX = event.clientX - this.startX_;\n      var deltaY = event.clientY - this.startY_;\n      var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  };\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n    if (this.dragging_) {\n      var view = this.getMap().getView();\n      view.endInteraction();\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  };\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.setThumbPosition_ = function (res) {\n    var position = this.getPositionForResolution_(res);\n    var thumb = this.element.firstElementChild;\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  };\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n    var amount;\n\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n\n    return clamp(amount, 0, 1);\n  };\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n    var fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  };\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n\n\n  ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n    var fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  };\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n\n\n  ZoomSlider.prototype.render = function (mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n\n    var res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  };\n\n  return ZoomSlider;\n}(Control);\n\nexport default ZoomSlider;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/control/ZoomSlider.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Control","EventType","PointerEventType","CLASS_CONTROL","CLASS_UNSELECTABLE","clamp","easeOut","listen","unlistenByKey","stopPropagation","Direction","VERTICAL","HORIZONTAL","ZoomSlider","_super","opt_options","_this","options","element","document","createElement","render","dragListenerKeys_","currentResolution_","undefined","direction_","dragging_","heightLimit_","widthLimit_","startX_","startY_","thumbSize_","sliderInitialized_","duration_","duration","className","thumbElement","setAttribute","containerElement","appendChild","addEventListener","POINTERDOWN","handleDraggerStart_","bind","POINTERMOVE","handleDraggerDrag_","POINTERUP","handleDraggerEnd_","CLICK","handleContainerClick_","setMap","map","initSlider_","container","containerWidth","offsetWidth","containerHeight","offsetHeight","containerStyle","getComputedStyle","parseFloat","thumb","firstElementChild","thumbStyle","thumbWidth","thumbHeight","event","view","getMap","getView","relativePosition","getRelativePosition_","offsetX","offsetY","resolution","getResolutionForPosition_","zoom","getConstrainedZoom","getZoomForResolution","animateInternal","easing","target","beginInteraction","clientX","style","left","clientY","top","length","drag","end","doc","getOwnerDocument","push","deltaX","deltaY","setResolution","endInteraction","forEach","setThumbPosition_","res","position","getPositionForResolution_","x","y","amount","fn","getResolutionForValueFunction","getValueForResolutionFunction","mapEvent","frameState","viewState"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { clamp } from '../math.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nvar Direction = {\n    VERTICAL: 0,\n    HORIZONTAL: 1,\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nvar ZoomSlider = /** @class */ (function (_super) {\n    __extends(ZoomSlider, _super);\n    /**\n     * @param {Options} [opt_options] Zoom slider options.\n     */\n    function ZoomSlider(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n        }) || this;\n        /**\n         * @type {!Array<import(\"../events.js\").EventsKey>}\n         * @private\n         */\n        _this.dragListenerKeys_ = [];\n        /**\n         * Will hold the current resolution of the view.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        _this.currentResolution_ = undefined;\n        /**\n         * The direction of the slider. Will be determined from actual display of the\n         * container and defaults to Direction.VERTICAL.\n         *\n         * @type {Direction}\n         * @private\n         */\n        _this.direction_ = Direction.VERTICAL;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.dragging_;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.heightLimit_ = 0;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.widthLimit_ = 0;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.startX_;\n        /**\n         * @type {number|undefined}\n         * @private\n         */\n        _this.startY_;\n        /**\n         * The calculated thumb size (border box plus margins).  Set when initSlider_\n         * is called.\n         * @type {import(\"../size.js\").Size}\n         * @private\n         */\n        _this.thumbSize_ = null;\n        /**\n         * Whether the slider is initialized.\n         * @type {boolean}\n         * @private\n         */\n        _this.sliderInitialized_ = false;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.duration_ = options.duration !== undefined ? options.duration : 200;\n        var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n        var thumbElement = document.createElement('button');\n        thumbElement.setAttribute('type', 'button');\n        thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n        var containerElement = _this.element;\n        containerElement.className =\n            className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n        containerElement.appendChild(thumbElement);\n        containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n        containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n        containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n        containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n        thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n        return _this;\n    }\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @api\n     */\n    ZoomSlider.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            map.render();\n        }\n    };\n    /**\n     * Initializes the slider element. This will determine and set this controls\n     * direction_ and also constrain the dragging of the thumb to always be within\n     * the bounds of the container.\n     *\n     * @return {boolean} Initialization successful\n     * @private\n     */\n    ZoomSlider.prototype.initSlider_ = function () {\n        var container = this.element;\n        var containerWidth = container.offsetWidth;\n        var containerHeight = container.offsetHeight;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return (this.sliderInitialized_ = false);\n        }\n        var containerStyle = getComputedStyle(container);\n        containerWidth -=\n            parseFloat(containerStyle['paddingRight']) +\n                parseFloat(containerStyle['paddingLeft']);\n        containerHeight -=\n            parseFloat(containerStyle['paddingTop']) +\n                parseFloat(containerStyle['paddingBottom']);\n        var thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n        var thumbStyle = getComputedStyle(thumb);\n        var thumbWidth = thumb.offsetWidth +\n            parseFloat(thumbStyle['marginRight']) +\n            parseFloat(thumbStyle['marginLeft']);\n        var thumbHeight = thumb.offsetHeight +\n            parseFloat(thumbStyle['marginTop']) +\n            parseFloat(thumbStyle['marginBottom']);\n        this.thumbSize_ = [thumbWidth, thumbHeight];\n        if (containerWidth > containerHeight) {\n            this.direction_ = Direction.HORIZONTAL;\n            this.widthLimit_ = containerWidth - thumbWidth;\n        }\n        else {\n            this.direction_ = Direction.VERTICAL;\n            this.heightLimit_ = containerHeight - thumbHeight;\n        }\n        return (this.sliderInitialized_ = true);\n    };\n    /**\n     * @param {PointerEvent} event The browser event to handle.\n     * @private\n     */\n    ZoomSlider.prototype.handleContainerClick_ = function (event) {\n        var view = this.getMap().getView();\n        var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n        var resolution = this.getResolutionForPosition_(relativePosition);\n        var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n        view.animateInternal({\n            zoom: zoom,\n            duration: this.duration_,\n            easing: easeOut,\n        });\n    };\n    /**\n     * Handle dragger start events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n        if (!this.dragging_ && event.target === this.element.firstElementChild) {\n            var element = /** @type {HTMLElement} */ (this.element.firstElementChild);\n            this.getMap().getView().beginInteraction();\n            this.startX_ = event.clientX - parseFloat(element.style.left);\n            this.startY_ = event.clientY - parseFloat(element.style.top);\n            this.dragging_ = true;\n            if (this.dragListenerKeys_.length === 0) {\n                var drag = this.handleDraggerDrag_;\n                var end = this.handleDraggerEnd_;\n                var doc = this.getMap().getOwnerDocument();\n                this.dragListenerKeys_.push(listen(doc, PointerEventType.POINTERMOVE, drag, this), listen(doc, PointerEventType.POINTERUP, end, this));\n            }\n        }\n    };\n    /**\n     * Handle dragger drag events.\n     *\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n        if (this.dragging_) {\n            var deltaX = event.clientX - this.startX_;\n            var deltaY = event.clientY - this.startY_;\n            var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n            this.currentResolution_ =\n                this.getResolutionForPosition_(relativePosition);\n            this.getMap().getView().setResolution(this.currentResolution_);\n        }\n    };\n    /**\n     * Handle dragger end events.\n     * @param {PointerEvent} event The drag event.\n     * @private\n     */\n    ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n        if (this.dragging_) {\n            var view = this.getMap().getView();\n            view.endInteraction();\n            this.dragging_ = false;\n            this.startX_ = undefined;\n            this.startY_ = undefined;\n            this.dragListenerKeys_.forEach(unlistenByKey);\n            this.dragListenerKeys_.length = 0;\n        }\n    };\n    /**\n     * Positions the thumb inside its container according to the given resolution.\n     *\n     * @param {number} res The res.\n     * @private\n     */\n    ZoomSlider.prototype.setThumbPosition_ = function (res) {\n        var position = this.getPositionForResolution_(res);\n        var thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n        if (this.direction_ == Direction.HORIZONTAL) {\n            thumb.style.left = this.widthLimit_ * position + 'px';\n        }\n        else {\n            thumb.style.top = this.heightLimit_ * position + 'px';\n        }\n    };\n    /**\n     * Calculates the relative position of the thumb given x and y offsets.  The\n     * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n     * in pixel units within the dragger limits.\n     *\n     * @param {number} x Pixel position relative to the left of the slider.\n     * @param {number} y Pixel position relative to the top of the slider.\n     * @return {number} The relative position of the thumb.\n     * @private\n     */\n    ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n        var amount;\n        if (this.direction_ === Direction.HORIZONTAL) {\n            amount = x / this.widthLimit_;\n        }\n        else {\n            amount = y / this.heightLimit_;\n        }\n        return clamp(amount, 0, 1);\n    };\n    /**\n     * Calculates the corresponding resolution of the thumb given its relative\n     * position (where 0 is the minimum and 1 is the maximum).\n     *\n     * @param {number} position The relative position of the thumb.\n     * @return {number} The corresponding resolution.\n     * @private\n     */\n    ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n        var fn = this.getMap().getView().getResolutionForValueFunction();\n        return fn(1 - position);\n    };\n    /**\n     * Determines the relative position of the slider for the given resolution.  A\n     * relative position of 0 corresponds to the minimum view resolution.  A\n     * relative position of 1 corresponds to the maximum view resolution.\n     *\n     * @param {number} res The resolution.\n     * @return {number} The relative position value (between 0 and 1).\n     * @private\n     */\n    ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n        var fn = this.getMap().getView().getValueForResolutionFunction();\n        return clamp(1 - fn(res), 0, 1);\n    };\n    /**\n     * Update the zoomslider element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    ZoomSlider.prototype.render = function (mapEvent) {\n        if (!mapEvent.frameState) {\n            return;\n        }\n        if (!this.sliderInitialized_ && !this.initSlider_()) {\n            return;\n        }\n        var res = mapEvent.frameState.viewState.resolution;\n        this.currentResolution_ = res;\n        this.setThumbPosition_(res);\n    };\n    return ZoomSlider;\n}(Control));\nexport default ZoomSlider;\n"]},"metadata":{},"sourceType":"module"}