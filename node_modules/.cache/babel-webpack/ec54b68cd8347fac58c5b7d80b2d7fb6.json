{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\n\nvar FetchClient = function () {\n  function FetchClient() {}\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.GET,\n              headers: this.getFetchHeaders(options)\n            })];\n\n          case 1:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_1 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createGetRequestFailedError(e_1, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 4:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 5:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqBody, response, e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reqBody = options && options.body || \"\";\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.POST,\n              headers: this.getFetchHeaders(options),\n              body: reqBody\n            })];\n\n          case 2:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_3 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createPostRequestFailedError(e_3, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 5:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 6:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n\n\n  FetchClient.prototype.getFetchHeaders = function (options) {\n    var headers = new Headers();\n\n    if (!(options && options.headers)) {\n      return headers;\n    }\n\n    var optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(function (key) {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  };\n\n  FetchClient.prototype.getHeaderDict = function (headers) {\n    var headerDict = {};\n    headers.forEach(function (value, key) {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  };\n\n  return FetchClient;\n}();\n\nexport { FetchClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/network/FetchClient.js"],"names":["__awaiter","__generator","BrowserAuthError","HTTP_REQUEST_TYPE","FetchClient","prototype","sendGetRequestAsync","url","options","response","e_1","_a","_b","label","trys","push","fetch","method","GET","headers","getFetchHeaders","sent","window","navigator","onLine","createGetRequestFailedError","createNoNetworkConnectivityError","getHeaderDict","json","body","status","createFailedToParseNetworkResponseError","sendPostRequestAsync","reqBody","e_3","POST","createPostRequestFailedError","Headers","optionsHeaders","Object","keys","forEach","key","append","headerDict","value"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\r\nvar FetchClient = /** @class */ (function () {\r\n    function FetchClient() {\r\n    }\r\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    FetchClient.prototype.sendGetRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, e_1, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _b.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, fetch(url, {\r\n                                method: HTTP_REQUEST_TYPE.GET,\r\n                                headers: this.getFetchHeaders(options)\r\n                            })];\r\n                    case 1:\r\n                        response = _b.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        e_1 = _b.sent();\r\n                        if (window.navigator.onLine) {\r\n                            throw BrowserAuthError.createGetRequestFailedError(e_1, url);\r\n                        }\r\n                        else {\r\n                            throw BrowserAuthError.createNoNetworkConnectivityError();\r\n                        }\r\n                    case 3:\r\n                        _b.trys.push([3, 5, , 6]);\r\n                        _a = {\r\n                            headers: this.getHeaderDict(response.headers)\r\n                        };\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 4: return [2 /*return*/, (_a.body = (_b.sent()),\r\n                            _a.status = response.status,\r\n                            _a)];\r\n                    case 5:\r\n                        _b.sent();\r\n                        throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    FetchClient.prototype.sendPostRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqBody, response, e_3, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        reqBody = (options && options.body) || \"\";\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, fetch(url, {\r\n                                method: HTTP_REQUEST_TYPE.POST,\r\n                                headers: this.getFetchHeaders(options),\r\n                                body: reqBody\r\n                            })];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_3 = _b.sent();\r\n                        if (window.navigator.onLine) {\r\n                            throw BrowserAuthError.createPostRequestFailedError(e_3, url);\r\n                        }\r\n                        else {\r\n                            throw BrowserAuthError.createNoNetworkConnectivityError();\r\n                        }\r\n                    case 4:\r\n                        _b.trys.push([4, 6, , 7]);\r\n                        _a = {\r\n                            headers: this.getHeaderDict(response.headers)\r\n                        };\r\n                        return [4 /*yield*/, response.json()];\r\n                    case 5: return [2 /*return*/, (_a.body = (_b.sent()),\r\n                            _a.status = response.status,\r\n                            _a)];\r\n                    case 6:\r\n                        _b.sent();\r\n                        throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get Fetch API Headers object from string map\r\n     * @param inputHeaders\r\n     */\r\n    FetchClient.prototype.getFetchHeaders = function (options) {\r\n        var headers = new Headers();\r\n        if (!(options && options.headers)) {\r\n            return headers;\r\n        }\r\n        var optionsHeaders = options.headers;\r\n        Object.keys(optionsHeaders).forEach(function (key) {\r\n            headers.append(key, optionsHeaders[key]);\r\n        });\r\n        return headers;\r\n    };\r\n    FetchClient.prototype.getHeaderDict = function (headers) {\r\n        var headerDict = {};\r\n        headers.forEach(function (value, key) {\r\n            headerDict[key] = value;\r\n        });\r\n        return headerDict;\r\n    };\r\n    return FetchClient;\r\n}());\n\nexport { FetchClient };\n"]},"metadata":{},"sourceType":"module"}