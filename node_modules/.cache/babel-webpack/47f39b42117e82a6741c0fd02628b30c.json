{"ast":null,"code":"import { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, HostBinding, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nconst _c0 = [\"mat-menu-item\", \"\"];\n\nfunction MatMenuItem__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 2);\n    ɵngcc0.ɵɵelement(1, \"polygon\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._handleKeydown($event);\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.closed.emit(\"click\");\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4._onAnimationStart($event);\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5._onAnimationDone($event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: /*#__PURE__*/trigger('transformMenu', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), /*#__PURE__*/transition('void => enter', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: /*#__PURE__*/trigger('fadeInItems', [\n  /*#__PURE__*/\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/transition('void => *', [/*#__PURE__*/style({\n    opacity: 0\n  }), /*#__PURE__*/animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst transformMenu = matMenuAnimations.transformMenu;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_MENU_CONTENT = /*#__PURE__*/new InjectionToken('MatMenuContent');\n\nlet _MatMenuContentBase = /*#__PURE__*/(() => {\n  class _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n      this._template = _template;\n      this._componentFactoryResolver = _componentFactoryResolver;\n      this._appRef = _appRef;\n      this._injector = _injector;\n      this._viewContainerRef = _viewContainerRef;\n      this._document = _document;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Emits when the menu content has been attached. */\n\n      this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n\n\n    attach(context = {}) {\n      if (!this._portal) {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      }\n\n      this.detach();\n\n      if (!this._outlet) {\n        this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n      }\n\n      const element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n      // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n      // risk it staying attached to a pane that's no longer in the DOM.\n\n      element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n      // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n      // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n      // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n      // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n      // @breaking-change 9.0.0 Make change detector ref required\n\n      if (this._changeDetectorRef) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._portal.attach(this._outlet, context);\n\n      this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n\n\n    detach() {\n      if (this._portal.isAttached) {\n        this._portal.detach();\n      }\n    }\n\n    ngOnDestroy() {\n      if (this._outlet) {\n        this._outlet.dispose();\n      }\n    }\n\n  }\n\n  _MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) {\n    return new (t || _MatMenuContentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  _MatMenuContentBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatMenuContentBase\n  });\n  return _MatMenuContentBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\n\nlet MatMenuContent = /*#__PURE__*/(() => {\n  class MatMenuContent extends _MatMenuContentBase {}\n\n  MatMenuContent.ɵfac = /*@__PURE__*/function () {\n    let ɵMatMenuContent_BaseFactory;\n    return function MatMenuContent_Factory(t) {\n      return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n    };\n  }();\n\n  MatMenuContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuContent,\n    selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_CONTENT,\n      useExisting: MatMenuContent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatMenuContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\n\n\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\n\n\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\n\n\nconst MAT_MENU_PANEL = /*#__PURE__*/new InjectionToken('MAT_MENU_PANEL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/** @docs-private */\n\nconst _MatMenuItemBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinDisabled(class {}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nlet MatMenuItem = /*#__PURE__*/(() => {\n  class MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef,\n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu,\n    /**\n     * @deprecated `_changeDetectorRef` to become a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _changeDetectorRef) {\n      // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n      super();\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this._parentMenu = _parentMenu;\n      this._changeDetectorRef = _changeDetectorRef;\n      /** ARIA role for the menu item. */\n\n      this.role = 'menuitem';\n      /** Stream that emits when the menu item is hovered. */\n\n      this._hovered = new Subject();\n      /** Stream that emits when the menu item is focused. */\n\n      this._focused = new Subject();\n      /** Whether the menu item is highlighted. */\n\n      this._highlighted = false;\n      /** Whether the menu item acts as a trigger for a sub-menu. */\n\n      this._triggersSubmenu = false;\n\n      if (_parentMenu && _parentMenu.addItem) {\n        _parentMenu.addItem(this);\n      }\n    }\n    /** Focuses the menu item. */\n\n\n    focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n\n      this._focused.next(this);\n    }\n\n    ngAfterViewInit() {\n      if (this._focusMonitor) {\n        // Start monitoring the element so it gets the appropriate focused classes. We want\n        // to show the focus style for menu items only when the focus was not caused by a\n        // mouse or touch interaction.\n        this._focusMonitor.monitor(this._elementRef, false);\n      }\n    }\n\n    ngOnDestroy() {\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      if (this._parentMenu && this._parentMenu.removeItem) {\n        this._parentMenu.removeItem(this);\n      }\n\n      this._hovered.complete();\n\n      this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n\n\n    _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n\n\n    _getHostElement() {\n      return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _checkDisabled(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _handleMouseEnter() {\n      this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n\n\n    getLabel() {\n      var _a, _b;\n\n      const clone = this._elementRef.nativeElement.cloneNode(true);\n\n      const icons = clone.querySelectorAll('mat-icon, .material-icons'); // Strip away icons so they don't show up in the text.\n\n      for (let i = 0; i < icons.length; i++) {\n        const icon = icons[i];\n        (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n      }\n\n      return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n    }\n\n    _setHighlighted(isHighlighted) {\n      var _a; // We need to mark this for check for the case where the content is coming from a\n      // `matMenuContent` whose change detection tree is at the declaration position,\n      // not the insertion position. See #23175.\n      // @breaking-change 14.0.0 Remove null check for `_changeDetectorRef`.\n\n\n      this._highlighted = isHighlighted;\n      (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n\n  }\n\n  MatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n    return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  MatMenuItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatMenuItem,\n    selectors: [[\"\", \"mat-menu-item\", \"\"]],\n    hostAttrs: [1, \"mat-focus-indicator\"],\n    hostVars: 10,\n    hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n          return ctx._checkDisabled($event);\n        })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n          return ctx._handleMouseEnter();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      role: \"role\"\n    },\n    exportAs: [\"matMenuItem\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 3,\n    consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 1, \"mat-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n    template: function MatMenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(2, MatMenuItem__svg_svg_2_Template, 2, 0, \"svg\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n      }\n    },\n    directives: [ɵngcc2.MatRipple, ɵngcc3.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatMenuItem;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-menu`. */\n\n\nconst MAT_MENU_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\n\nlet _MatMenuBase = /*#__PURE__*/(() => {\n  class _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions;\n      this._xPosition = this._defaultOptions.xPosition;\n      this._yPosition = this._defaultOptions.yPosition;\n      /** Only the direct descendant menu items. */\n\n      this._directDescendantItems = new QueryList();\n      /** Subscription to tab events on the menu panel */\n\n      this._tabSubscription = Subscription.EMPTY;\n      /** Config object to be passed into the menu's ngClass */\n\n      this._classList = {};\n      /** Current state of the panel animation. */\n\n      this._panelAnimationState = 'void';\n      /** Emits whenever an animation on the menu completes. */\n\n      this._animationDone = new Subject();\n      /** Class or list of classes to be added to the overlay panel. */\n\n      this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n      /** Class to be added to the backdrop element. */\n\n      this.backdropClass = this._defaultOptions.backdropClass;\n      this._overlapTrigger = this._defaultOptions.overlapTrigger;\n      this._hasBackdrop = this._defaultOptions.hasBackdrop;\n      /** Event emitted when the menu is closed. */\n\n      this.closed = new EventEmitter();\n      /**\n       * Event emitted when the menu is closed.\n       * @deprecated Switch to `closed` instead\n       * @breaking-change 8.0.0\n       */\n\n      this.close = this.closed;\n      this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n\n\n    get xPosition() {\n      return this._xPosition;\n    }\n\n    set xPosition(value) {\n      if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionX();\n      }\n\n      this._xPosition = value;\n      this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n\n\n    get yPosition() {\n      return this._yPosition;\n    }\n\n    set yPosition(value) {\n      if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuInvalidPositionY();\n      }\n\n      this._yPosition = value;\n      this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n\n\n    get overlapTrigger() {\n      return this._overlapTrigger;\n    }\n\n    set overlapTrigger(value) {\n      this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n\n\n    get hasBackdrop() {\n      return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n\n\n    set panelClass(classes) {\n      const previousPanelClass = this._previousPanelClass;\n\n      if (previousPanelClass && previousPanelClass.length) {\n        previousPanelClass.split(' ').forEach(className => {\n          this._classList[className] = false;\n        });\n      }\n\n      this._previousPanelClass = classes;\n\n      if (classes && classes.length) {\n        classes.split(' ').forEach(className => {\n          this._classList[className] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n\n\n    get classList() {\n      return this.panelClass;\n    }\n\n    set classList(classes) {\n      this.panelClass = classes;\n    }\n\n    ngOnInit() {\n      this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n      this._updateDirectDescendants();\n\n      this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n      this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab')); // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n      // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n      // is internal and we know that it gets completed on destroy.\n\n      this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n\n    ngOnDestroy() {\n      this._directDescendantItems.destroy();\n\n      this._tabSubscription.unsubscribe();\n\n      this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n\n\n    _hovered() {\n      // Coerce the `changes` property because Angular types it as `Observable<any>`\n      const itemChanges = this._directDescendantItems.changes;\n      return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n\n\n    addItem(_item) {}\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n\n\n    removeItem(_item) {}\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n\n\n    _handleKeydown(event) {\n      const keyCode = event.keyCode;\n      const manager = this._keyManager;\n\n      switch (keyCode) {\n        case ESCAPE:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case LEFT_ARROW:\n          if (this.parentMenu && this.direction === 'ltr') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case RIGHT_ARROW:\n          if (this.parentMenu && this.direction === 'rtl') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        default:\n          if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n            manager.setFocusOrigin('keyboard');\n          }\n\n          manager.onKeydown(event);\n      }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n\n\n    focusFirstItem(origin = 'program') {\n      // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n      if (this.lazyContent) {\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n      } else {\n        this._focusFirstItem(origin);\n      }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n\n\n    _focusFirstItem(origin) {\n      const manager = this._keyManager;\n      manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n      // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n      // give _some_ feedback to screen readers.\n\n      if (!manager.activeItem && this._directDescendantItems.length) {\n        let element = this._directDescendantItems.first._getHostElement().parentElement; // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n\n\n        while (element) {\n          if (element.getAttribute('role') === 'menu') {\n            element.focus();\n            break;\n          } else {\n            element = element.parentElement;\n          }\n        }\n      }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n\n\n    resetActiveItem() {\n      this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n\n\n    setElevation(depth) {\n      // The elevation starts at the base and increases by one for each level.\n      // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n      const elevation = Math.min(this._baseElevation + depth, 24);\n      const newElevation = `${this._elevationPrefix}${elevation}`;\n      const customElevation = Object.keys(this._classList).find(className => {\n        return className.startsWith(this._elevationPrefix);\n      });\n\n      if (!customElevation || customElevation === this._previousElevation) {\n        if (this._previousElevation) {\n          this._classList[this._previousElevation] = false;\n        }\n\n        this._classList[newElevation] = true;\n        this._previousElevation = newElevation;\n      }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n\n\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n      const classes = this._classList;\n      classes['mat-menu-before'] = posX === 'before';\n      classes['mat-menu-after'] = posX === 'after';\n      classes['mat-menu-above'] = posY === 'above';\n      classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n\n\n    _startAnimation() {\n      // @breaking-change 8.0.0 Combine with _resetAnimation.\n      this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n\n\n    _resetAnimation() {\n      // @breaking-change 8.0.0 Combine with _startAnimation.\n      this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n\n\n    _onAnimationDone(event) {\n      this._animationDone.next(event);\n\n      this._isAnimating = false;\n    }\n\n    _onAnimationStart(event) {\n      this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n      // because we move focus to the first item while it's still being animated, which can throw\n      // the browser off when it determines the scroll position. Alternatively we can move focus\n      // when the animation is done, however moving focus asynchronously will interrupt screen\n      // readers which are in the process of reading out the menu already. We take the `element`\n      // from the `event` since we can't use a `ViewChild` to access the pane.\n\n      if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n        event.element.scrollTop = 0;\n      }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n\n\n    _updateDirectDescendants() {\n      this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n\n        this._directDescendantItems.notifyOnChanges();\n      });\n    }\n\n  }\n\n  _MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n    return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  _MatMenuBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatMenuBase,\n    contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function _MatMenuBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      backdropClass: \"backdropClass\",\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlapTrigger: \"overlapTrigger\",\n      hasBackdrop: \"hasBackdrop\",\n      panelClass: [\"class\", \"panelClass\"],\n      classList: \"classList\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      closed: \"closed\",\n      close: \"close\"\n    }\n  });\n  return _MatMenuBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** @docs-public MatMenu */\n\n\nlet MatMenu = /*#__PURE__*/(() => {\n  class MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions) {\n      super(elementRef, ngZone, defaultOptions);\n      this._elevationPrefix = 'mat-elevation-z';\n      this._baseElevation = 4;\n    }\n\n  }\n\n  MatMenu.ɵfac = function MatMenu_Factory(t) {\n    return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n  };\n\n  MatMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatMenu,\n    selectors: [[\"mat-menu\"]],\n    hostVars: 3,\n    hostBindings: function MatMenu_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n      }\n    },\n    exportAs: [\"matMenu\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n    template: function MatMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n      }\n    },\n    directives: [ɵngcc3.NgClass],\n    styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n    },\n    changeDetection: 0\n  });\n  return MatMenu;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the menu is open. */\n\n\nconst MAT_MENU_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Default top padding of the menu panel. */\n\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\n\nconst passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\nlet _MatMenuTriggerBase = /*#__PURE__*/(() => {\n  class _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n      this._overlay = _overlay;\n      this._element = _element;\n      this._viewContainerRef = _viewContainerRef;\n      this._menuItemInstance = _menuItemInstance;\n      this._dir = _dir;\n      this._focusMonitor = _focusMonitor;\n      this._overlayRef = null;\n      this._menuOpen = false;\n      this._closingActionsSubscription = Subscription.EMPTY;\n      this._hoverSubscription = Subscription.EMPTY;\n      this._menuCloseSubscription = Subscription.EMPTY;\n      /**\n       * Handles touch start events on the trigger.\n       * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n       */\n\n      this._handleTouchStart = event => {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n          this._openedBy = 'touch';\n        }\n      }; // Tracking input type is necessary so it's possible to only auto-focus\n      // the first item of the list when the menu is opened via the keyboard\n\n\n      this._openedBy = undefined;\n      this._ariaHaspopup = true;\n      /**\n       * Whether focus should be restored when the menu is closed.\n       * Note that disabling this option can have accessibility implications\n       * and it's up to you to manage focus, if you decide to turn it off.\n       */\n\n      this.restoreFocus = true;\n      /** Event emitted when the associated menu is opened. */\n\n      this.menuOpened = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is opened.\n       * @deprecated Switch to `menuOpened` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuOpen = this.menuOpened;\n      /** Event emitted when the associated menu is closed. */\n\n      this.menuClosed = new EventEmitter();\n      /**\n       * Event emitted when the associated menu is closed.\n       * @deprecated Switch to `menuClosed` instead\n       * @breaking-change 8.0.0\n       */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onMenuClose = this.menuClosed;\n      this._scrollStrategy = scrollStrategy;\n      this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n      _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      if (_menuItemInstance) {\n        _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n      }\n    }\n\n    get _ariaExpanded() {\n      return this.menuOpen || null;\n    }\n\n    get _ariaControl() {\n      return this.menuOpen ? this.menu.panelId : null;\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n\n\n    get _deprecatedMatMenuTriggerFor() {\n      return this.menu;\n    }\n\n    set _deprecatedMatMenuTriggerFor(v) {\n      this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n\n\n    get menu() {\n      return this._menu;\n    }\n\n    set menu(menu) {\n      if (menu === this._menu) {\n        return;\n      }\n\n      this._menu = menu;\n\n      this._menuCloseSubscription.unsubscribe();\n\n      if (menu) {\n        if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatMenuRecursiveError();\n        }\n\n        this._menuCloseSubscription = menu.close.subscribe(reason => {\n          this._destroyMenu(reason); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n          if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n            this._parentMaterialMenu.closed.emit(reason);\n          }\n        });\n      }\n    }\n\n    ngAfterContentInit() {\n      this._checkMenu();\n\n      this._handleHover();\n    }\n\n    ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n\n      this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      this._menuCloseSubscription.unsubscribe();\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n\n\n    get menuOpen() {\n      return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n\n\n    get dir() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n\n\n    triggersSubmenu() {\n      return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n\n\n    toggleMenu() {\n      return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n\n\n    openMenu() {\n      if (this._menuOpen) {\n        return;\n      }\n\n      this._checkMenu();\n\n      const overlayRef = this._createOverlay();\n\n      const overlayConfig = overlayRef.getConfig();\n\n      this._setPosition(overlayConfig.positionStrategy);\n\n      overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n      overlayRef.attach(this._getPortal());\n\n      if (this.menu.lazyContent) {\n        this.menu.lazyContent.attach(this.menuData);\n      }\n\n      this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n\n      this._initMenu();\n\n      if (this.menu instanceof _MatMenuBase) {\n        this.menu._startAnimation();\n      }\n    }\n    /** Closes the menu. */\n\n\n    closeMenu() {\n      this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n\n\n    focus(origin, options) {\n      if (this._focusMonitor && origin) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n\n\n    updatePosition() {\n      var _a;\n\n      (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n\n\n    _destroyMenu(reason) {\n      if (!this._overlayRef || !this.menuOpen) {\n        return;\n      }\n\n      const menu = this.menu;\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._overlayRef.detach(); // Always restore focus if the user is navigating using the keyboard or the menu was opened\n      // programmatically. We don't restore for non-root triggers, because it can prevent focus\n      // from making it back to the root trigger when closing a long chain of menus by clicking\n      // on the backdrop.\n\n\n      if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n        this.focus(this._openedBy);\n      }\n\n      this._openedBy = undefined;\n\n      if (menu instanceof _MatMenuBase) {\n        menu._resetAnimation();\n\n        if (menu.lazyContent) {\n          // Wait for the exit animation to finish before detaching the content.\n          menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1), // Interrupt if the content got re-attached.\n          takeUntil(menu.lazyContent._attached)).subscribe({\n            next: () => menu.lazyContent.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n        } else {\n          this._setIsMenuOpen(false);\n        }\n      } else {\n        this._setIsMenuOpen(false);\n\n        if (menu.lazyContent) {\n          menu.lazyContent.detach();\n        }\n      }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n\n\n    _initMenu() {\n      this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n      this.menu.direction = this.dir;\n\n      this._setMenuElevation();\n\n      this.menu.focusFirstItem(this._openedBy || 'program');\n\n      this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n\n\n    _setMenuElevation() {\n      if (this.menu.setElevation) {\n        let depth = 0;\n        let parentMenu = this.menu.parentMenu;\n\n        while (parentMenu) {\n          depth++;\n          parentMenu = parentMenu.parentMenu;\n        }\n\n        this.menu.setElevation(depth);\n      }\n    } // set state rather than toggle to support triggers sharing a menu\n\n\n    _setIsMenuOpen(isOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n\n\n    _checkMenu() {\n      if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuMissingError();\n      }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n\n\n    _createOverlay() {\n      if (!this._overlayRef) {\n        const config = this._getOverlayConfig();\n\n        this._subscribeToPositions(config.positionStrategy);\n\n        this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n        // Ideally we'd also have our keyboard event logic in here, however doing so will\n        // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n        this._overlayRef.keydownEvents().subscribe();\n      }\n\n      return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n\n\n    _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n        backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n        panelClass: this.menu.overlayPanelClass,\n        scrollStrategy: this._scrollStrategy(),\n        direction: this._dir\n      });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n\n\n    _subscribeToPositions(position) {\n      if (this.menu.setPositionClasses) {\n        position.positionChanges.subscribe(change => {\n          const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n          this.menu.setPositionClasses(posX, posY);\n        });\n      }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n\n\n    _setPosition(positionStrategy) {\n      let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n      let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n      let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n      let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n      let offsetY = 0;\n\n      if (this.triggersSubmenu()) {\n        // When the menu is a sub-menu, it should always align itself\n        // to the edges of the trigger, instead of overlapping it.\n        overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n        offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n      } else if (!this.menu.overlapTrigger) {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n\n      positionStrategy.withPositions([{\n        originX,\n        originY,\n        overlayX,\n        overlayY,\n        offsetY\n      }, {\n        originX: originFallbackX,\n        originY,\n        overlayX: overlayFallbackX,\n        overlayY,\n        offsetY\n      }, {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n\n\n    _menuClosingActions() {\n      const backdrop = this._overlayRef.backdropClick();\n\n      const detachments = this._overlayRef.detachments();\n\n      const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n      const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n      return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n\n\n    _handleMousedown(event) {\n      if (!isFakeMousedownFromScreenReader(event)) {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : undefined; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n\n        if (this.triggersSubmenu()) {\n          event.preventDefault();\n        }\n      }\n    }\n    /** Handles key presses on the trigger. */\n\n\n    _handleKeydown(event) {\n      const keyCode = event.keyCode; // Pressing enter on the trigger will trigger the click handler later.\n\n      if (keyCode === ENTER || keyCode === SPACE) {\n        this._openedBy = 'keyboard';\n      }\n\n      if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n        this._openedBy = 'keyboard';\n        this.openMenu();\n      }\n    }\n    /** Handles click events on the trigger. */\n\n\n    _handleClick(event) {\n      if (this.triggersSubmenu()) {\n        // Stop event propagation to avoid closing the parent menu.\n        event.stopPropagation();\n        this.openMenu();\n      } else {\n        this.toggleMenu();\n      }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n\n\n    _handleHover() {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n        return;\n      }\n\n      this._hoverSubscription = this._parentMaterialMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n        this._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n\n        if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n\n\n    _getPortal() {\n      // Note that we can avoid this check by keeping the portal on the menu panel.\n      // While it would be cleaner, we'd have to introduce another required method on\n      // `MatMenuPanel`, making it harder to consume.\n      if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n        this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      }\n\n      return this._portal;\n    }\n\n  }\n\n  _MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n    return new (t || _MatMenuTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  _MatMenuTriggerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatMenuTriggerBase,\n    hostVars: 3,\n    hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n          return ctx._handleMousedown($event);\n        })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._ariaHaspopup)(\"aria-expanded\", ctx._ariaExpanded)(\"aria-controls\", ctx._ariaControl);\n      }\n    },\n    inputs: {\n      restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"],\n      _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n      menu: [\"matMenuTriggerFor\", \"menu\"],\n      menuData: [\"matMenuTriggerData\", \"menuData\"]\n    },\n    outputs: {\n      menuOpened: \"menuOpened\",\n      onMenuOpen: \"onMenuOpen\",\n      menuClosed: \"menuClosed\",\n      onMenuClose: \"onMenuClose\"\n    }\n  });\n  return _MatMenuTriggerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\n\n\nlet MatMenuTrigger = /*#__PURE__*/(() => {\n  class MatMenuTrigger extends _MatMenuTriggerBase {}\n\n  MatMenuTrigger.ɵfac = /*@__PURE__*/function () {\n    let ɵMatMenuTrigger_BaseFactory;\n    return function MatMenuTrigger_Factory(t) {\n      return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n    };\n  }();\n\n  MatMenuTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatMenuTrigger,\n    selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n    hostAttrs: [1, \"mat-menu-trigger\"],\n    exportAs: [\"matMenuTrigger\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatMenuTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatMenuModule = /*#__PURE__*/(() => {\n  class MatMenuModule {}\n\n  MatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n    return new (t || MatMenuModule)();\n  };\n\n  MatMenuModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatMenuModule\n  });\n  MatMenuModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule, MatCommonModule]\n  });\n  return MatMenuModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function () {\n      return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/menu.js"],"names":["FocusMonitor","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","InjectionToken","Directive","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","ChangeDetectorRef","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Optional","Input","HostListener","QueryList","EventEmitter","NgZone","ContentChildren","ViewChild","ContentChild","Output","Self","HostBinding","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","filter","takeUntil","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","DOCUMENT","CommonModule","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatMenuItem__svg_svg_2_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","_c1","MatMenu_ng_template_0_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","MatMenu_ng_template_0_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","_handleKeydown","MatMenu_ng_template_0_Template_div_click_0_listener","ctx_r3","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","ctx_r4","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","ctx_r5","_onAnimationDone","ɵɵprojection","ctx_r0","ɵɵproperty","panelId","_classList","_panelAnimationState","ɵɵattribute","ariaLabel","ariaLabelledby","ariaDescribedby","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","_MatMenuContentBase","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","ɵfac","_MatMenuContentBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","ngDevMode","MatMenuContent","ɵMatMenuContent_BaseFactory","MatMenuContent_Factory","ɵɵgetInheritedFactory","selectors","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","_a","_b","clone","cloneNode","icons","querySelectorAll","i","length","icon","removeChild","textContent","trim","_setHighlighted","isHighlighted","MatMenuItem_Factory","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","MatMenuItem_mouseenter_HostBindingHandler","toString","ɵɵclassProp","inputs","disableRipple","exportAs","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵadvance","directives","MatRipple","NgIf","encapsulation","changeDetection","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","close","value","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","items","map","item","focusedItem","updateActiveItem","destroy","unsubscribe","itemChanges","_item","keyCode","manager","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","_focusFirstItem","setFirstItemActive","activeItem","first","parentElement","getAttribute","resetActiveItem","setActiveItem","setElevation","depth","elevation","Math","min","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","activeItemIndex","scrollTop","_allItems","reset","notifyOnChanges","_MatMenuBase_Factory","contentQueries","_MatMenuBase_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","_MatMenuBase_Query","ɵɵviewQuery","templateRef","outputs","MatMenu","ngZone","defaultOptions","MatMenu_Factory","MatMenu_HostBindings","MatMenu_Template","NgClass","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","_MatMenuTriggerBase","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","undefined","_ariaHaspopup","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","_ariaExpanded","menuOpen","_ariaControl","menu","_deprecatedMatMenuTriggerFor","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","_MatMenuTriggerBase_Factory","_MatMenuTriggerBase_HostBindings","_MatMenuTriggerBase_mousedown_HostBindingHandler","_MatMenuTriggerBase_keydown_HostBindingHandler","_MatMenuTriggerBase_click_HostBindingHandler","MatMenuTrigger","ɵMatMenuTrigger_BaseFactory","MatMenuTrigger_Factory","MatMenuModule","MatMenuModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵangular_material_src_material_menu_menu_a","ɵangular_material_src_material_menu_menu_b","ɵangular_material_src_material_menu_menu_c"],"mappings":"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","sourcesContent":["import { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, HostBinding, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nconst _c0 = [\"mat-menu-item\", \"\"];\nfunction MatMenuItem__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 2);\n    ɵngcc0.ɵɵelement(1, \"polygon\", 3);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c1 = [\"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._handleKeydown($event); })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.closed.emit(\"click\"); })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._onAnimationStart($event); })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5._onAnimationDone($event); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n} }\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)'\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) { return new (t || _MatMenuContentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatMenuContentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatMenuContentBase });\n_MatMenuContentBase.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatMenuContentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = /*@__PURE__*/ function () { let ɵMatMenuContent_BaseFactory; return function MatMenuContent_Factory(t) { return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent); }; }();\nMatMenuContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuContent, selectors: [[\"ng-template\", \"matMenuContent\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matMenuContent]',\n                providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, \n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu, \n    /**\n     * @deprecated `_changeDetectorRef` to become a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _changeDetectorRef) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a, _b;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            const icon = icons[i];\n            (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n        }\n        return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n    }\n    _setHighlighted(isHighlighted) {\n        var _a;\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 14.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n}\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) { return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenuItem, selectors: [[\"\", \"mat-menu-item\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 10, hostBindings: function MatMenuItem_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, exportAs: [\"matMenuItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 3, vars: 3, consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 1, \"mat-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]], template: function MatMenuItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(2, MatMenuItem__svg_svg_2_Template, 2, 0, \"svg\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.NgIf], encapsulation: 2, changeDetection: 0 });\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n        type: Component,\n        args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { role: [{\n            type: Input\n        }], \n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], \n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter: [{\n            type: HostListener,\n            args: ['mouseenter']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() { return this._xPosition; }\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() { return this._yPosition; }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() { return this._overlapTrigger; }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() { return this.panelClass; }\n    set classList(classes) { this.panelClass = classes; }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable\n                .pipe(take(1))\n                .subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) { return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenuBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatMenuBase, contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    } }, viewQuery: function _MatMenuBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    } }, inputs: { backdropClass: \"backdropClass\", xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { closed: \"closed\", close: \"close\" } });\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n    lazyContent: [{ type: ContentChild, args: [MAT_MENU_CONTENT,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatMenuBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, { backdropClass: [{\n            type: Input\n        }], closed: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], overlapTrigger: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], panelClass: [{\n            type: Input,\n            args: ['class']\n        }], classList: [{\n            type: Input\n        }], _allItems: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], templateRef: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], items: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: false }]\n        }], lazyContent: [{\n            type: ContentChild,\n            args: [MAT_MENU_CONTENT]\n        }] }); })();\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = function MatMenu_Factory(t) { return new (t || MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\nMatMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatMenu, selectors: [[\"mat-menu\"]], hostVars: 3, hostBindings: function MatMenu_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    } }, exportAs: [\"matMenu\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]], template: function MatMenu_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    } }, directives: [ɵngcc3.NgClass], styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, data: { animation: [\n            matMenuAnimations.transformMenu,\n            matMenuAnimations.fadeInItems\n        ] }, changeDetection: 0 });\nMatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n        type: Component,\n        args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                host: {\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null'\n                },\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                ],\n                styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, \n    // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        this._ariaHaspopup = true;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    get _ariaExpanded() {\n        return this.menuOpen || null;\n    }\n    get _ariaControl() {\n        return this.menuOpen ? this.menu.panelId : null;\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() { return this._menu; }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition(overlayConfig.positionStrategy);\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false)\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                this.menu.setPositionClasses(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) { return new (t || _MatMenuTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatMenuTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatMenuTriggerBase, hostVars: 3, hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._ariaHaspopup)(\"aria-expanded\", ctx._ariaExpanded)(\"aria-controls\", ctx._ariaControl);\n    } }, inputs: { restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"], _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" } });\n_MatMenuTriggerBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\n_MatMenuTriggerBase.propDecorators = {\n    _ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],\n    _ariaControl: [{ type: HostBinding, args: ['attr.aria-controls',] }],\n    _ariaHaspopup: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }],\n    _handleMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],\n    _handleKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    _handleClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatMenuTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_SCROLL_STRATEGY]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }, { type: MatMenuItem, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }]; }, { _ariaHaspopup: [{\n            type: HostBinding,\n            args: ['attr.aria-haspopup']\n        }], restoreFocus: [{\n            type: Input,\n            args: ['matMenuTriggerRestoreFocus']\n        }], menuOpened: [{\n            type: Output\n        }], onMenuOpen: [{\n            type: Output\n        }], menuClosed: [{\n            type: Output\n        }], onMenuClose: [{\n            type: Output\n        }], _ariaExpanded: [{\n            type: HostBinding,\n            args: ['attr.aria-expanded']\n        }], _ariaControl: [{\n            type: HostBinding,\n            args: ['attr.aria-controls']\n        }], _deprecatedMatMenuTriggerFor: [{\n            type: Input,\n            args: ['mat-menu-trigger-for']\n        }], menu: [{\n            type: Input,\n            args: ['matMenuTriggerFor']\n        }], \n    /** Handles mouse presses on the trigger. */\n    _handleMousedown: [{\n            type: HostListener,\n            args: ['mousedown', ['$event']]\n        }], \n    /** Handles key presses on the trigger. */\n    _handleKeydown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }], \n    /** Handles click events on the trigger. */\n    _handleClick: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], menuData: [{\n            type: Input,\n            args: ['matMenuTriggerData']\n        }] }); })();\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatMenuTrigger_BaseFactory; return function MatMenuTrigger_Factory(t) { return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger); }; }();\nMatMenuTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatMenuTrigger, selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]], hostAttrs: [1, \"mat-menu-trigger\"], exportAs: [\"matMenuTrigger\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger'\n                },\n                exportAs: 'matMenuTrigger'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) { return new (t || MatMenuModule)(); };\nMatMenuModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatMenuModule });\nMatMenuModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            CommonModule,\n            MatCommonModule,\n            MatRippleModule,\n            OverlayModule,\n        ], CdkScrollableModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatMenu,\n                    MatMenuItem,\n                    MatMenuTrigger,\n                    MatMenuContent\n                ],\n                declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, { declarations: function () { return [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule]; }, exports: function () { return [CdkScrollableModule,\n        MatCommonModule, MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n\n"]},"metadata":{},"sourceType":"module"}