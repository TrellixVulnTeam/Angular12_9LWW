{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/SimpleGeometry\n */\n\n\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\n\nvar SimpleGeometry = function (_super) {\n  __extends(SimpleGeometry, _super);\n\n  function SimpleGeometry() {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"./GeometryLayout.js\").default}\n     */\n\n\n    _this.layout = GeometryLayout.XY;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.stride = 2;\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n\n    _this.flatCoordinates = null;\n    return _this;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n\n\n  SimpleGeometry.prototype.computeExtent = function (extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * @abstract\n   * @return {Array<*>} Coordinates.\n   */\n\n\n  SimpleGeometry.prototype.getCoordinates = function () {\n    return abstract();\n  };\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getFirstCoordinate = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n\n\n  SimpleGeometry.prototype.getFlatCoordinates = function () {\n    return this.flatCoordinates;\n  };\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getLastCoordinate = function () {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.getLayout = function () {\n    return this.layout;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n\n\n  SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    } // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n\n\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n\n    var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n\n\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * @return {number} Stride.\n   */\n\n\n  SimpleGeometry.prototype.getStride = function () {\n    return this.stride;\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n\n\n  SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n\n\n  SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n    abstract();\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n\n\n  SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n    /** @type {number} */\n    var stride;\n\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = coordinates[0];\n        }\n      }\n\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n\n    this.layout = layout;\n    this.stride = stride;\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.applyTransform = function (transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.rotate = function (angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n\n    if (sy === undefined) {\n      sy = sx;\n    }\n\n    var anchor = opt_anchor;\n\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n\n\n  SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n\n  return SimpleGeometry;\n}(Geometry);\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\n\n\nfunction getLayoutForStride(stride) {\n  var layout;\n\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n\n  return layout;\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\n\n\nexport function getStrideForLayout(layout) {\n  var stride;\n\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n\n  return stride;\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\n\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/geom/SimpleGeometry.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Geometry","GeometryLayout","abstract","createOrUpdateFromFlatCoordinates","getCenter","rotate","scale","transform2D","translate","SimpleGeometry","_super","_this","layout","XY","stride","flatCoordinates","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","opt_layout","setLayout","nesting","i","getLayoutForStride","applyTransform","transformFn","changed","angle","anchor","sx","opt_sy","opt_anchor","sy","undefined","getExtent","deltaX","deltaY","XYZ","XYZM","XYM","transformGeom2D","simpleGeometry","transform","opt_dest"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /** @class */ (function (_super) {\n    __extends(SimpleGeometry, _super);\n    function SimpleGeometry() {\n        var _this = _super.call(this) || this;\n        /**\n         * @protected\n         * @type {import(\"./GeometryLayout.js\").default}\n         */\n        _this.layout = GeometryLayout.XY;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.stride = 2;\n        /**\n         * @protected\n         * @type {Array<number>}\n         */\n        _this.flatCoordinates = null;\n        return _this;\n    }\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    SimpleGeometry.prototype.computeExtent = function (extent) {\n        return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * @abstract\n     * @return {Array<*>} Coordinates.\n     */\n    SimpleGeometry.prototype.getCoordinates = function () {\n        return abstract();\n    };\n    /**\n     * Return the first coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n     * @api\n     */\n    SimpleGeometry.prototype.getFirstCoordinate = function () {\n        return this.flatCoordinates.slice(0, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat coordinates.\n     */\n    SimpleGeometry.prototype.getFlatCoordinates = function () {\n        return this.flatCoordinates;\n    };\n    /**\n     * Return the last coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} Last point.\n     * @api\n     */\n    SimpleGeometry.prototype.getLastCoordinate = function () {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    };\n    /**\n     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n     * @return {import(\"./GeometryLayout.js\").default} Layout.\n     * @api\n     */\n    SimpleGeometry.prototype.getLayout = function () {\n        return this.layout;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n            return simplifiedGeometry;\n        }\n        else {\n            // Simplification did not actually remove any coordinates.  We now know\n            // that any calls to getSimplifiedGeometry with a squaredTolerance less\n            // than or equal to the current squaredTolerance will also not have any\n            // effect.  This allows us to short circuit simplification (saving CPU\n            // cycles) and prevents the cache of simplified geometries from filling\n            // up with useless identical copies of this geometry (saving memory).\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     * @protected\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        return this;\n    };\n    /**\n     * @return {number} Stride.\n     */\n    SimpleGeometry.prototype.getStride = function () {\n        return this.stride;\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n     * @param {Array<number>} flatCoordinates Flat coordinates.\n     */\n    SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n        this.stride = getStrideForLayout(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    };\n    /**\n     * @abstract\n     * @param {!Array<*>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n        abstract();\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n     * @param {Array<*>} coordinates Coordinates.\n     * @param {number} nesting Nesting.\n     * @protected\n     */\n    SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n        /** @type {number} */\n        var stride;\n        if (layout) {\n            stride = getStrideForLayout(layout);\n        }\n        else {\n            for (var i = 0; i < nesting; ++i) {\n                if (coordinates.length === 0) {\n                    this.layout = GeometryLayout.XY;\n                    this.stride = 2;\n                    return;\n                }\n                else {\n                    coordinates = /** @type {Array} */ (coordinates[0]);\n                }\n            }\n            stride = coordinates.length;\n            layout = getLayoutForStride(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    SimpleGeometry.prototype.applyTransform = function (transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n            this.changed();\n        }\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in counter-clockwise radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    SimpleGeometry.prototype.rotate = function (angle, anchor) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var sy = opt_sy;\n        if (sy === undefined) {\n            sy = sx;\n        }\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    };\n    return SimpleGeometry;\n}(Geometry));\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n    var layout;\n    if (stride == 2) {\n        layout = GeometryLayout.XY;\n    }\n    else if (stride == 3) {\n        layout = GeometryLayout.XYZ;\n    }\n    else if (stride == 4) {\n        layout = GeometryLayout.XYZM;\n    }\n    return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n    var stride;\n    if (layout == GeometryLayout.XY) {\n        stride = 2;\n    }\n    else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n        stride = 3;\n    }\n    else if (layout == GeometryLayout.XYZM) {\n        stride = 4;\n    }\n    return /** @type {number} */ (stride);\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n    var flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) {\n        return null;\n    }\n    else {\n        var stride = simpleGeometry.getStride();\n        return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n    }\n}\nexport default SimpleGeometry;\n"]},"metadata":{},"sourceType":"module"}