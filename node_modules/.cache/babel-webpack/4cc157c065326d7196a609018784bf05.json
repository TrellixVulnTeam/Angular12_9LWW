{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken = function () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/account/AuthToken.js"],"names":["ClientAuthError","StringUtils","AuthToken","rawToken","crypto","isEmpty","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError"],"mappings":"AAAA;AACA;;AACA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAkB,YAAY;AACvC,WAASA,SAAT,CAAmBC,QAAnB,EAA6BC,MAA7B,EAAqC;AACjC,QAAIH,WAAW,CAACI,OAAZ,CAAoBF,QAApB,CAAJ,EAAmC;AAC/B,YAAMH,eAAe,CAACM,2BAAhB,CAA4CH,QAA5C,CAAN;AACH;;AACD,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKI,MAAL,GAAcL,SAAS,CAACM,kBAAV,CAA6BL,QAA7B,EAAuCC,MAAvC,CAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,SAAS,CAACM,kBAAV,GAA+B,UAAUC,YAAV,EAAwBL,MAAxB,EAAgC;AAC3D,QAAIM,YAAY,GAAGT,WAAW,CAACU,eAAZ,CAA4BF,YAA5B,CAAnB,CAD2D,CAE3D;;AACA,QAAI;AACA,UAAIG,kBAAkB,GAAGF,YAAY,CAACG,UAAtC,CADA,CAEA;;AACA,UAAIC,aAAa,GAAGV,MAAM,CAACW,YAAP,CAAoBH,kBAApB,CAApB;AACA,aAAOI,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAP;AACH,KALD,CAMA,OAAOI,GAAP,EAAY;AACR,YAAMlB,eAAe,CAACmB,uBAAhB,CAAwCD,GAAxC,CAAN;AACH;AACJ,GAZD;;AAaA,SAAOhB,SAAP;AACH,CA3B8B,EAA/B;;AA6BA,SAASA,SAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nvar AuthToken = /** @class */ (function () {\r\n    function AuthToken(rawToken, crypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    AuthToken.extractTokenClaims = function (encodedToken, crypto) {\r\n        var decodedToken = StringUtils.decodeAuthToken(encodedToken);\r\n        // token will be decoded to get the username\r\n        try {\r\n            var base64TokenPayload = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    };\r\n    return AuthToken;\r\n}());\n\nexport { AuthToken };\n"]},"metadata":{},"sourceType":"module"}