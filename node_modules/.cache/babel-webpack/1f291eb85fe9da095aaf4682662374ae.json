{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\n\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\n\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\n\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\n\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\n\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSlider),\n  multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\n\nclass MatSliderChange {} // Boilerplate for applying mixins to MatSlider.\n\n/** @docs-private */\n\n\nconst _MatSliderBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinColor( /*#__PURE__*/mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nlet MatSlider = /*#__PURE__*/(() => {\n  class MatSlider extends _MatSliderBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n      super(elementRef);\n      this._focusMonitor = _focusMonitor;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      this._ngZone = _ngZone;\n      this._animationMode = _animationMode;\n      this._invert = false;\n      this._max = 100;\n      this._min = 0;\n      this._step = 1;\n      this._thumbLabel = false;\n      this._tickInterval = 0;\n      this._value = null;\n      this._vertical = false;\n      /** Event emitted when the slider value has changed. */\n\n      this.change = new EventEmitter();\n      /** Event emitted when the slider thumb moves. */\n\n      this.input = new EventEmitter();\n      /**\n       * Emits when the raw value of the slider changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n      /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n      this.onTouched = () => {};\n\n      this._percent = 0;\n      /**\n       * Whether or not the thumb is sliding and what the user is using to slide it with.\n       * Used to determine if there should be a transition for the thumb and fill track.\n       */\n\n      this._isSliding = null;\n      /**\n       * Whether or not the slider is active (clicked or sliding).\n       * Used to shrink and grow the thumb as according to the Material Design spec.\n       */\n\n      this._isActive = false;\n      /** The size of a tick interval as a percentage of the size of the track. */\n\n      this._tickIntervalPercent = 0;\n      /** The dimensions of the slider. */\n\n      this._sliderDimensions = null;\n\n      this._controlValueAccessorChangeFn = () => {};\n      /** Subscription to the Directionality change EventEmitter. */\n\n\n      this._dirChangeSubscription = Subscription.EMPTY;\n      /** Called when the user has put their pointer down on the slider. */\n\n      this._pointerDown = event => {\n        // Don't do anything if the slider is disabled or the\n        // user is using anything other than the main mouse button.\n        if (this.disabled || this._isSliding || !isTouchEvent(event) && event.button !== 0) {\n          return;\n        }\n\n        this._ngZone.run(() => {\n          this._touchId = isTouchEvent(event) ? getTouchIdForSlider(event, this._elementRef.nativeElement) : undefined;\n          const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n          if (pointerPosition) {\n            const oldValue = this.value;\n            this._isSliding = 'pointer';\n            this._lastPointerEvent = event;\n            event.preventDefault();\n\n            this._focusHostElement();\n\n            this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n\n\n            this._bindGlobalEvents(event);\n\n            this._focusHostElement();\n\n            this._updateValueFromPosition(pointerPosition);\n\n            this._valueOnSlideStart = oldValue; // Emit a change and input event if the value changed.\n\n            if (oldValue != this.value) {\n              this._emitInputEvent();\n            }\n          }\n        });\n      };\n      /**\n       * Called when the user has moved their pointer after\n       * starting to drag. Bound on the document level.\n       */\n\n\n      this._pointerMove = event => {\n        if (this._isSliding === 'pointer') {\n          const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n\n          if (pointerPosition) {\n            // Prevent the slide from selecting anything else.\n            event.preventDefault();\n            const oldValue = this.value;\n            this._lastPointerEvent = event;\n\n            this._updateValueFromPosition(pointerPosition); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n            if (oldValue != this.value) {\n              this._emitInputEvent();\n            }\n          }\n        }\n      };\n      /** Called when the user has lifted their pointer. Bound on the document level. */\n\n\n      this._pointerUp = event => {\n        if (this._isSliding === 'pointer') {\n          if (!isTouchEvent(event) || typeof this._touchId !== 'number' || // Note that we use `changedTouches`, rather than `touches` because it\n          // seems like in most cases `touches` is empty for `touchend` events.\n          findMatchingTouch(event.changedTouches, this._touchId)) {\n            event.preventDefault();\n\n            this._removeGlobalEvents();\n\n            this._isSliding = null;\n            this._touchId = undefined;\n\n            if (this._valueOnSlideStart != this.value && !this.disabled) {\n              this._emitChangeEvent();\n            }\n\n            this._valueOnSlideStart = this._lastPointerEvent = null;\n          }\n        }\n      };\n      /** Called when the window has lost focus. */\n\n\n      this._windowBlur = () => {\n        // If the window is blurred while dragging we need to stop dragging because the\n        // browser won't dispatch the `mouseup` and `touchend` events anymore.\n        if (this._lastPointerEvent) {\n          this._pointerUp(this._lastPointerEvent);\n        }\n      };\n\n      this._document = _document;\n      this.tabIndex = parseInt(tabIndex) || 0;\n\n      _ngZone.runOutsideAngular(() => {\n        const element = elementRef.nativeElement;\n        element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n      });\n    }\n    /** Whether the slider is inverted. */\n\n\n    get invert() {\n      return this._invert;\n    }\n\n    set invert(value) {\n      this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n\n\n    get max() {\n      return this._max;\n    }\n\n    set max(v) {\n      this._max = coerceNumberProperty(v, this._max);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n\n\n    get min() {\n      return this._min;\n    }\n\n    set min(v) {\n      this._min = coerceNumberProperty(v, this._min);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n\n\n    get step() {\n      return this._step;\n    }\n\n    set step(v) {\n      this._step = coerceNumberProperty(v, this._step);\n\n      if (this._step % 1 !== 0) {\n        this._roundToDecimal = this._step.toString().split('.').pop().length;\n      } // Since this could modify the label, we need to notify the change detection.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n\n\n    get thumbLabel() {\n      return this._thumbLabel;\n    }\n\n    set thumbLabel(value) {\n      this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n\n\n    get tickInterval() {\n      return this._tickInterval;\n    }\n\n    set tickInterval(value) {\n      if (value === 'auto') {\n        this._tickInterval = 'auto';\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n      } else {\n        this._tickInterval = 0;\n      }\n    }\n    /** Value of the slider. */\n\n\n    get value() {\n      // If the value needs to be read and it is still uninitialized, initialize it to the min.\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      return this._value;\n    }\n\n    set value(v) {\n      if (v !== this._value) {\n        let value = coerceNumberProperty(v, 0); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n        // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n        if (this._roundToDecimal && value !== this.min && value !== this.max) {\n          value = parseFloat(value.toFixed(this._roundToDecimal));\n        }\n\n        this._value = value;\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the slider is vertical. */\n\n\n    get vertical() {\n      return this._vertical;\n    }\n\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n\n\n    get displayValue() {\n      if (this.displayWith) {\n        // Value is never null but since setters and getters cannot have\n        // different types, the value getter is also typed to return null.\n        return this.displayWith(this.value);\n      } // Note that this could be improved further by rounding something like 0.999 to 1 or\n      // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n      // every change detection cycle.\n\n\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n\n      return this.value || 0;\n    }\n    /** set focus to the host element */\n\n\n    focus(options) {\n      this._focusHostElement(options);\n    }\n    /** blur the host element */\n\n\n    blur() {\n      this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n\n\n    get percent() {\n      return this._clamp(this._percent);\n    }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n\n\n    _shouldInvertAxis() {\n      // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n      // top. However from a y-axis standpoint this is inverted.\n      return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n\n\n    _isMinValue() {\n      return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n\n\n    _getThumbGap() {\n      if (this.disabled) {\n        return DISABLED_THUMB_GAP;\n      }\n\n      if (this._isMinValue() && !this.thumbLabel) {\n        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n      }\n\n      return 0;\n    }\n    /** CSS styles for the track background element. */\n\n\n    _getTrackBackgroundStyles() {\n      const axis = this.vertical ? 'Y' : 'X';\n      const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n      const sign = this._shouldInvertMouseCoords() ? '-' : '';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n      };\n    }\n    /** CSS styles for the track fill element. */\n\n\n    _getTrackFillStyles() {\n      const percent = this.percent;\n      const axis = this.vertical ? 'Y' : 'X';\n      const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n      const sign = this._shouldInvertMouseCoords() ? '' : '-';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n        // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n        // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n        // the value of the slider is 0, we can easily get into this situation. We force a\n        // recalculation by changing the element's `display` when it goes from 0 to any other value.\n        display: percent === 0 ? 'none' : ''\n      };\n    }\n    /** CSS styles for the ticks container element. */\n\n\n    _getTicksContainerStyles() {\n      let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n      let offset = this._tickIntervalPercent / 2 * 100;\n      return {\n        'transform': `translate${axis}(${sign}${offset}%)`\n      };\n    }\n    /** CSS styles for the ticks element. */\n\n\n    _getTicksStyles() {\n      let tickSize = this._tickIntervalPercent * 100;\n      let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n      let axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n      // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n      // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n      let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n      let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n      let styles = {\n        'backgroundSize': backgroundSize,\n        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n        'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n      };\n\n      if (this._isMinValue() && this._getThumbGap()) {\n        const shouldInvertAxis = this._shouldInvertAxis();\n\n        let side;\n\n        if (this.vertical) {\n          side = shouldInvertAxis ? 'Bottom' : 'Top';\n        } else {\n          side = shouldInvertAxis ? 'Right' : 'Left';\n        }\n\n        styles[`padding${side}`] = `${this._getThumbGap()}px`;\n      }\n\n      return styles;\n    }\n\n    _getThumbContainerStyles() {\n      const shouldInvertAxis = this._shouldInvertAxis();\n\n      let axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      let invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n      let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n      return {\n        'transform': `translate${axis}(-${offset}%)`\n      };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n\n\n    _shouldInvertMouseCoords() {\n      const shouldInvertAxis = this._shouldInvertAxis();\n\n      return this._getDirection() == 'rtl' && !this.vertical ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n\n\n    _getDirection() {\n      return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n        this._isActive = !!origin && origin !== 'keyboard';\n\n        this._changeDetectorRef.detectChanges();\n      });\n\n      if (this._dir) {\n        this._dirChangeSubscription = this._dir.change.subscribe(() => {\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      const element = this._elementRef.nativeElement;\n      element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n      this._lastPointerEvent = null;\n\n      this._removeGlobalEvents();\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._dirChangeSubscription.unsubscribe();\n    }\n\n    _onMouseenter() {\n      if (this.disabled) {\n        return;\n      } // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n\n\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n\n    _onFocus() {\n      // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n\n    _onBlur() {\n      this.onTouched();\n    }\n\n    _onKeydown(event) {\n      if (this.disabled || hasModifierKey(event) || this._isSliding && this._isSliding !== 'keyboard') {\n        return;\n      }\n\n      const oldValue = this.value;\n\n      switch (event.keyCode) {\n        case PAGE_UP:\n          this._increment(10);\n\n          break;\n\n        case PAGE_DOWN:\n          this._increment(-10);\n\n          break;\n\n        case END:\n          this.value = this.max;\n          break;\n\n        case HOME:\n          this.value = this.min;\n          break;\n\n        case LEFT_ARROW:\n          // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n          // inverted slider the thumb moves in that direction. However for a blind user, nothing\n          // about the slider indicates that it is inverted. They will expect left to be decrement,\n          // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n          // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n          // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n          // sighted users, therefore we do not swap the meaning.\n          this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n          break;\n\n        case UP_ARROW:\n          this._increment(1);\n\n          break;\n\n        case RIGHT_ARROW:\n          // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n          this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n          break;\n\n        case DOWN_ARROW:\n          this._increment(-1);\n\n          break;\n\n        default:\n          // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n          // it.\n          return;\n      }\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n\n      this._isSliding = 'keyboard';\n      event.preventDefault();\n    }\n\n    _onKeyup() {\n      if (this._isSliding === 'keyboard') {\n        this._isSliding = null;\n      }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n\n\n    _bindGlobalEvents(triggerEvent) {\n      // Note that we bind the events to the `document`, because it allows us to capture\n      // drag cancel events where the user's pointer is outside the browser window.\n      const document = this._document;\n      const isTouch = isTouchEvent(triggerEvent);\n      const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n      const endEventName = isTouch ? 'touchend' : 'mouseup';\n      document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n      document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n      if (isTouch) {\n        document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n      }\n\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.addEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Removes any global event listeners that we may have added. */\n\n\n    _removeGlobalEvents() {\n      const document = this._document;\n      document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.removeEventListener('blur', this._windowBlur);\n      }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n\n\n    _increment(numSteps) {\n      this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n\n\n    _updateValueFromPosition(pos) {\n      if (!this._sliderDimensions) {\n        return;\n      }\n\n      let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n      let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n      let percent = this._clamp((posComponent - offset) / size);\n\n      if (this._shouldInvertMouseCoords()) {\n        percent = 1 - percent;\n      } // Since the steps may not divide cleanly into the max value, if the user\n      // slid to 0 or 100 percent, we jump to the min/max value. This approach\n      // is slightly more intuitive than using `Math.ceil` below, because it\n      // follows the user's pointer closer.\n\n\n      if (percent === 0) {\n        this.value = this.min;\n      } else if (percent === 1) {\n        this.value = this.max;\n      } else {\n        const exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n        // whole number divisible by the step relative to the min.\n\n\n        const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n\n\n    _emitChangeEvent() {\n      this._controlValueAccessorChangeFn(this.value);\n\n      this.valueChange.emit(this.value);\n      this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n\n\n    _emitInputEvent() {\n      this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n\n\n    _updateTickIntervalPercent() {\n      if (!this.tickInterval || !this._sliderDimensions) {\n        return;\n      }\n\n      if (this.tickInterval == 'auto') {\n        let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n        let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n        let pixelsPerTick = stepsPerTick * this.step;\n        this._tickIntervalPercent = pixelsPerTick / trackSize;\n      } else {\n        this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n      }\n    }\n    /** Creates a slider change object from the specified value. */\n\n\n    _createChangeEvent(value = this.value) {\n      let event = new MatSliderChange();\n      event.source = this;\n      event.value = value;\n      return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n\n\n    _calculatePercentage(value) {\n      return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n\n\n    _calculateValue(percentage) {\n      return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n\n\n    _clamp(value, min = 0, max = 1) {\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n\n\n    _getSliderDimensions() {\n      return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n\n\n    _focusHostElement(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n\n\n    _blurHostElement() {\n      this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n  }\n\n  MatSlider.ɵfac = function MatSlider_Factory(t) {\n    return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatSlider.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSlider,\n    selectors: [[\"mat-slider\"]],\n    viewQuery: function MatSlider_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"],\n    hostVars: 29,\n    hostBindings: function MatSlider_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n          return ctx._onKeyup();\n        })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n          return ctx._onMouseenter();\n        })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) {\n          return $event.preventDefault();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.valueText == null ? ctx.displayValue : ctx.valueText)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      color: \"color\",\n      tabIndex: \"tabIndex\",\n      invert: \"invert\",\n      max: \"max\",\n      min: \"min\",\n      step: \"step\",\n      thumbLabel: \"thumbLabel\",\n      tickInterval: \"tickInterval\",\n      value: \"value\",\n      vertical: \"vertical\",\n      displayWith: \"displayWith\",\n      valueText: \"valueText\"\n    },\n    outputs: {\n      change: \"change\",\n      input: \"input\",\n      valueChange: \"valueChange\"\n    },\n    exportAs: [\"matSlider\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 13,\n    vars: 6,\n    consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n    template: function MatSlider_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n      }\n    },\n    directives: [ɵngcc3.NgStyle],\n    styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSlider;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Returns whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\n\n\nfunction getPointerPositionOnPage(event, id) {\n  let point;\n\n  if (isTouchEvent(event)) {\n    // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n    // If that's the case, attribute the first touch to all active sliders. This should still cover\n    // the most common case while only breaking multi-touch.\n    if (typeof id === 'number') {\n      point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n    } else {\n      // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n      point = event.touches[0] || event.changedTouches[0];\n    }\n  } else {\n    point = event;\n  }\n\n  return point ? {\n    x: point.clientX,\n    y: point.clientY\n  } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\n\n\nfunction findMatchingTouch(touches, id) {\n  for (let i = 0; i < touches.length; i++) {\n    if (touches[i].identifier === id) {\n      return touches[i];\n    }\n  }\n\n  return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\n\n\nfunction getTouchIdForSlider(event, sliderHost) {\n  for (let i = 0; i < event.touches.length; i++) {\n    const target = event.touches[i].target;\n\n    if (sliderHost === target || sliderHost.contains(target)) {\n      return event.touches[i].identifier;\n    }\n  }\n\n  return undefined;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSliderModule = /*#__PURE__*/(() => {\n  class MatSliderModule {}\n\n  MatSliderModule.ɵfac = function MatSliderModule_Factory(t) {\n    return new (t || MatSliderModule)();\n  };\n\n  MatSliderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSliderModule\n  });\n  MatSliderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule], MatCommonModule]\n  });\n  return MatSliderModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, {\n    declarations: function () {\n      return [MatSlider];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatSlider, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/slider.js"],"names":["DOCUMENT","CommonModule","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Optional","Attribute","NgZone","Inject","Input","Output","ViewChild","NgModule","mixinTabIndex","mixinColor","mixinDisabled","MatCommonModule","FocusMonitor","Directionality","coerceBooleanProperty","coerceNumberProperty","hasModifierKey","DOWN_ARROW","RIGHT_ARROW","UP_ARROW","LEFT_ARROW","HOME","END","PAGE_DOWN","PAGE_UP","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","normalizePassiveListenerOptions","Subscription","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","activeEventOptions","passive","MIN_AUTO_TICK_SEPARATION","DISABLED_THUMB_GAP","MIN_VALUE_NONACTIVE_THUMB_GAP","MIN_VALUE_ACTIVE_THUMB_GAP","MAT_SLIDER_VALUE_ACCESSOR","provide","useExisting","MatSlider","multi","MatSliderChange","_MatSliderBase","constructor","_elementRef","elementRef","_focusMonitor","_changeDetectorRef","_dir","tabIndex","_ngZone","_document","_animationMode","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","change","input","valueChange","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","EMPTY","_pointerDown","event","disabled","isTouchEvent","button","run","_touchId","getTouchIdForSlider","nativeElement","undefined","pointerPosition","getPointerPositionOnPage","oldValue","value","_lastPointerEvent","preventDefault","_focusHostElement","_onMouseenter","_bindGlobalEvents","_updateValueFromPosition","_valueOnSlideStart","_emitInputEvent","_pointerMove","_pointerUp","findMatchingTouch","changedTouches","_removeGlobalEvents","_emitChangeEvent","_windowBlur","parseInt","runOutsideAngular","element","addEventListener","invert","max","v","_calculatePercentage","markForCheck","min","step","_roundToDecimal","toString","split","pop","length","thumbLabel","tickInterval","parseFloat","toFixed","vertical","displayValue","displayWith","focus","options","blur","_blurHostElement","percent","_clamp","_shouldInvertAxis","_isMinValue","_getThumbGap","_getTrackBackgroundStyles","axis","scale","sign","_shouldInvertMouseCoords","transform","_getTrackFillStyles","display","_getTicksContainerStyles","_getDirection","offset","_getTicksStyles","tickSize","backgroundSize","rotate","styles","shouldInvertAxis","side","_getThumbContainerStyles","invertOffset","ngAfterViewInit","monitor","subscribe","origin","detectChanges","ngOnDestroy","removeEventListener","stopMonitoring","unsubscribe","_getSliderDimensions","_updateTickIntervalPercent","_onFocus","_onBlur","_onKeydown","keyCode","_increment","_onKeyup","_getWindow","defaultView","window","triggerEvent","document","isTouch","moveEventName","endEventName","numSteps","pos","top","left","size","height","width","posComponent","y","x","exactValue","_calculateValue","closestValue","Math","round","emit","_createChangeEvent","trackSize","pixelsPerStep","stepsPerTick","ceil","pixelsPerTick","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","MatSlider_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlider_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","MatSlider_HostBindings","ɵɵlistener","MatSlider_focus_HostBindingHandler","MatSlider_blur_HostBindingHandler","MatSlider_keydown_HostBindingHandler","$event","MatSlider_keyup_HostBindingHandler","MatSlider_mouseenter_HostBindingHandler","MatSlider_selectstart_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","valueText","ɵɵclassProp","inputs","color","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatSlider_Template","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵproperty","ɵɵtextInterpolate","directives","NgStyle","encapsulation","changeDetection","ngDevMode","id","point","touches","clientX","clientY","i","identifier","sliderHost","target","contains","MatSliderModule","MatSliderModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nconst _MatSliderBase = mixinTabIndex(mixinColor(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = () => { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding and what the user is using to slide it with.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = null;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = () => { };\n        /** Subscription to the Directionality change EventEmitter. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        this._pointerDown = (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._ngZone.run(() => {\n                this._touchId = isTouchEvent(event) ?\n                    getTouchIdForSlider(event, this._elementRef.nativeElement) : undefined;\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    const oldValue = this.value;\n                    this._isSliding = 'pointer';\n                    this._lastPointerEvent = event;\n                    event.preventDefault();\n                    this._focusHostElement();\n                    this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                    this._bindGlobalEvents(event);\n                    this._focusHostElement();\n                    this._updateValueFromPosition(pointerPosition);\n                    this._valueOnSlideStart = oldValue;\n                    // Emit a change and input event if the value changed.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (event) => {\n            if (this._isSliding === 'pointer') {\n                const pointerPosition = getPointerPositionOnPage(event, this._touchId);\n                if (pointerPosition) {\n                    // Prevent the slide from selecting anything else.\n                    event.preventDefault();\n                    const oldValue = this.value;\n                    this._lastPointerEvent = event;\n                    this._updateValueFromPosition(pointerPosition);\n                    // Native range elements always emit `input` events when the value changed while sliding.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        this._pointerUp = (event) => {\n            if (this._isSliding === 'pointer') {\n                if (!isTouchEvent(event) || typeof this._touchId !== 'number' ||\n                    // Note that we use `changedTouches`, rather than `touches` because it\n                    // seems like in most cases `touches` is empty for `touchend` events.\n                    findMatchingTouch(event.changedTouches, this._touchId)) {\n                    event.preventDefault();\n                    this._removeGlobalEvents();\n                    this._isSliding = null;\n                    this._touchId = undefined;\n                    if (this._valueOnSlideStart != this.value && !this.disabled) {\n                        this._emitChangeEvent();\n                    }\n                    this._valueOnSlideStart = this._lastPointerEvent = null;\n                }\n            }\n        };\n        /** Called when the window has lost focus. */\n        this._windowBlur = () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        };\n        this._document = _document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        _ngZone.runOutsideAngular(() => {\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        });\n    }\n    /** Whether the slider is inverted. */\n    get invert() { return this._invert; }\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n    get max() { return this._max; }\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n    get min() { return this._min; }\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n    get step() { return this._step; }\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = this._step.toString().split('.').pop().length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n    get thumbLabel() { return this._thumbLabel; }\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    get tickInterval() { return this._tickInterval; }\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /** Value of the slider. */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            let value = coerceNumberProperty(v, 0);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal && value !== this.min && value !== this.max) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the slider is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith(this.value);\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /** set focus to the host element */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /** blur the host element */\n    blur() {\n        this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    _shouldInvertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n    _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    _getThumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue() && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /** CSS styles for the track background element. */\n    _getTrackBackgroundStyles() {\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n        };\n    }\n    /** CSS styles for the track fill element. */\n    _getTrackFillStyles() {\n        const percent = this.percent;\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /** CSS styles for the ticks container element. */\n    _getTicksContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /** CSS styles for the ticks element. */\n    _getTicksStyles() {\n        let tickSize = this._tickIntervalPercent * 100;\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue() && this._getThumbGap()) {\n            const shouldInvertAxis = this._shouldInvertAxis();\n            let side;\n            if (this.vertical) {\n                side = shouldInvertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = shouldInvertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._getThumbGap()}px`;\n        }\n        return styles;\n    }\n    _getThumbContainerStyles() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    _shouldInvertMouseCoords() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onBlur() {\n        this.onTouched();\n    }\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event) ||\n            (this._isSliding && this._isSliding !== 'keyboard')) {\n            return;\n        }\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = 'keyboard';\n        event.preventDefault();\n    }\n    _onKeyup() {\n        if (this._isSliding === 'keyboard') {\n            this._isSliding = null;\n        }\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        const document = this._document;\n        const isTouch = isTouchEvent(triggerEvent);\n        const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        const endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n        if (isTouch) {\n            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Removes any global event listeners that we may have added. */\n    _removeGlobalEvents() {\n        const document = this._document;\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /** Creates a slider change object from the specified value. */\n    _createChangeEvent(value = this.value) {\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 29, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.valueText == null ? ctx.displayValue : ctx.valueText)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", value: \"value\", vertical: \"vertical\", displayWith: \"displayWith\", valueText: \"valueText\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    valueText: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    // NVDA and Jaws appear to announce the `aria-valuenow` by calculating its percentage based\n                    // on its value between `aria-valuemin` and `aria-valuemax`. Due to how decimals are handled,\n                    // it can cause the slider to read out a very long value like 0.20000068 if the current value\n                    // is 0.2 with a min of 0 and max of 1. We work around the issue by setting `aria-valuetext`\n                    // to the same value that we set on the slider's thumb which will be truncated.\n                    '[attr.aria-valuetext]': 'valueText == null ? displayValue : valueText',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue()',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{-webkit-print-color-adjust:exact;color-adjust:exact;position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], valueText: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event, id) {\n    let point;\n    if (isTouchEvent(event)) {\n        // The `identifier` could be undefined if the browser doesn't support `TouchEvent.identifier`.\n        // If that's the case, attribute the first touch to all active sliders. This should still cover\n        // the most common case while only breaking multi-touch.\n        if (typeof id === 'number') {\n            point = findMatchingTouch(event.touches, id) || findMatchingTouch(event.changedTouches, id);\n        }\n        else {\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            point = event.touches[0] || event.changedTouches[0];\n        }\n    }\n    else {\n        point = event;\n    }\n    return point ? { x: point.clientX, y: point.clientY } : undefined;\n}\n/** Finds a `Touch` with a specific ID in a `TouchList`. */\nfunction findMatchingTouch(touches, id) {\n    for (let i = 0; i < touches.length; i++) {\n        if (touches[i].identifier === id) {\n            return touches[i];\n        }\n    }\n    return undefined;\n}\n/** Gets the unique ID of a touch that matches a specific slider. */\nfunction getTouchIdForSlider(event, sliderHost) {\n    for (let i = 0; i < event.touches.length; i++) {\n        const target = event.touches[i].target;\n        if (sliderHost === target || sliderHost.contains(target)) {\n            return event.touches[i].identifier;\n        }\n    }\n    return undefined;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵfac = function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); };\nMatSliderModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n"]},"metadata":{},"sourceType":"module"}