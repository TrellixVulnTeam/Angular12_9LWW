{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** ID used for the body container where all messages are appended. */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\n\nconst messageRegistry = /*#__PURE__*/new Map();\n/** Container for all registered messages. */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n\nlet AriaDescriber = /*#__PURE__*/(() => {\n  class AriaDescriber {\n    constructor(_document) {\n      this._document = _document;\n    }\n\n    describe(hostElement, message, role) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      const key = getKey(message, role);\n\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        setMessageId(message);\n        messageRegistry.set(key, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!messageRegistry.has(key)) {\n        this._createMessageElement(message, role);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, key)) {\n        this._addMessageReference(hostElement, key);\n      }\n    }\n\n    removeDescription(hostElement, message, role) {\n      if (!message || !this._isElementNode(hostElement)) {\n        return;\n      }\n\n      const key = getKey(message, role);\n\n      if (this._isElementDescribedByMessage(hostElement, key)) {\n        this._removeMessageReference(hostElement, key);\n      } // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n      if (typeof message === 'string') {\n        const registeredMessage = messageRegistry.get(key);\n\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(key);\n        }\n      }\n\n      if (messagesContainer && messagesContainer.childNodes.length === 0) {\n        this._deleteMessagesContainer();\n      }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n\n\n    ngOnDestroy() {\n      const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n      for (let i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      if (messagesContainer) {\n        this._deleteMessagesContainer();\n      }\n\n      messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n\n\n    _createMessageElement(message, role) {\n      const messageElement = this._document.createElement('div');\n\n      setMessageId(messageElement);\n      messageElement.textContent = message;\n\n      if (role) {\n        messageElement.setAttribute('role', role);\n      }\n\n      this._createMessagesContainer();\n\n      messagesContainer.appendChild(messageElement);\n      messageRegistry.set(getKey(message, role), {\n        messageElement,\n        referenceCount: 0\n      });\n    }\n    /** Deletes the message element from the global messages container. */\n\n\n    _deleteMessageElement(key) {\n      const registeredMessage = messageRegistry.get(key);\n      const messageElement = registeredMessage && registeredMessage.messageElement;\n\n      if (messagesContainer && messageElement) {\n        messagesContainer.removeChild(messageElement);\n      }\n\n      messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n\n\n    _createMessagesContainer() {\n      if (!messagesContainer) {\n        const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n\n\n        if (preExistingContainer && preExistingContainer.parentNode) {\n          preExistingContainer.parentNode.removeChild(preExistingContainer);\n        }\n\n        messagesContainer = this._document.createElement('div');\n        messagesContainer.id = MESSAGES_CONTAINER_ID; // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n\n        messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n\n        messagesContainer.classList.add('cdk-visually-hidden');\n\n        this._document.body.appendChild(messagesContainer);\n      }\n    }\n    /** Deletes the global messages container. */\n\n\n    _deleteMessagesContainer() {\n      if (messagesContainer && messagesContainer.parentNode) {\n        messagesContainer.parentNode.removeChild(messagesContainer);\n        messagesContainer = null;\n      }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n\n\n    _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n      const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n\n\n    _addMessageReference(element, key) {\n      const registeredMessage = messageRegistry.get(key); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n      registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n\n\n    _removeMessageReference(element, key) {\n      const registeredMessage = messageRegistry.get(key);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n\n\n    _isElementDescribedByMessage(element, key) {\n      const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      const registeredMessage = messageRegistry.get(key);\n      const messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n\n\n    _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n\n      const trimmedMessage = message == null ? '' : `${message}`.trim();\n      const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n\n\n    _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n\n  }\n\n  AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n    return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  AriaDescriber.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function AriaDescriber_Factory() {\n      return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT));\n    },\n    token: AriaDescriber,\n    providedIn: \"root\"\n  });\n  return AriaDescriber;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Gets a key that can be used to look messages up in the registry. */\n\n\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\nfunction setMessageId(element) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\n\n\nclass ListKeyManager {\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n\n\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n\n\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n\n\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n\n\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n\n\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n\n\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n\n\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for the isFocusable method.\n */\n\n\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n\n} // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nlet InteractivityChecker = /*#__PURE__*/(() => {\n  class InteractivityChecker {\n    constructor(_platform) {\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n\n\n    isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n\n\n    isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n\n\n    isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n\n      const frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        // Frame elements inherit their tabindex onto all child elements.\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n        if (!this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n\n      let nodeName = element.nodeName.toLowerCase();\n      let tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe' || nodeName === 'object') {\n        // The frame or object's content may be tabbable depending on the content, but it's\n        // not possibly to reliably detect the content of the frames. We always consider such\n        // elements as non-tabbable.\n        return false;\n      } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        // Audio elements without controls enabled are never tabbable, regardless\n        // of the tabindex attribute explicitly being set.\n        if (!element.hasAttribute('controls')) {\n          return false;\n        } // Audio elements with controls are by default tabbable unless the\n        // tabindex attribute is set to `-1` explicitly.\n\n\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'video') {\n        // For all video elements, if the tabindex attribute is set to `-1`, the video\n        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n        // tabindex attribute is the source of truth here.\n        if (tabIndexValue === -1) {\n          return false;\n        } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n        // video element is always tabbable (regardless of whether it has controls or not).\n\n\n        if (tabIndexValue !== null) {\n          return true;\n        } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n        // has controls enabled. Firefox is special as videos are always tabbable regardless\n        // of whether there are controls or not.\n\n\n        return this._platform.FIREFOX || element.hasAttribute('controls');\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n\n\n    isFocusable(element, config) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n\n  }\n\n  InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n    return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  InteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function InteractivityChecker_Factory() {\n      return new InteractivityChecker(i0.ɵɵinject(i1.Platform));\n    },\n    token: InteractivityChecker,\n    providedIn: \"root\"\n  });\n  return InteractivityChecker;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\n\n\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n\n\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n        focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus(options);\n      return true;\n    }\n\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Creates an anchor element. */\n\n\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n\n\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\n\n\nlet FocusTrapFactory = /*#__PURE__*/(() => {\n  class FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n\n\n    create(element, deferCaptureElements = false) {\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n\n  }\n\n  FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n    return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  FocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FocusTrapFactory_Factory() {\n      return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT));\n    },\n    token: FocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return FocusTrapFactory;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Directive for trapping focus within a region. */\n\n\nlet CdkTrapFocus = /*#__PURE__*/(() => {\n  class CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory,\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n      this._previouslyFocusedElement = null;\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n\n\n    get enabled() {\n      return this.focusTrap.enabled;\n    }\n\n    set enabled(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n\n\n    get autoCapture() {\n      return this._autoCapture;\n    }\n\n    set autoCapture(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n\n    ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n\n    ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._captureFocus();\n      }\n    }\n\n    ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n\n    ngOnChanges(changes) {\n      const autoCaptureChange = changes['autoCapture'];\n\n      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n        this._captureFocus();\n      }\n    }\n\n    _captureFocus() {\n      this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n\n  }\n\n  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n    return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTrapFocus,\n    selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n    inputs: {\n      enabled: [\"cdkTrapFocus\", \"enabled\"],\n      autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n    },\n    exportAs: [\"cdkTrapFocus\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkTrapFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nclass ConfigurableFocusTrap extends FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n\n    this._focusTrapManager.register(this);\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n\n  destroy() {\n    this._focusTrapManager.deregister(this);\n\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n\n    this.toggleAnchors(false);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nconst FOCUS_TRAP_INERT_STRATEGY = /*#__PURE__*/new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\n\n\nfunction polyfillClosest(element, selector) {\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\n\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n\n    this._listener = e => this._trapFocus(focusTrap, e);\n\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n\n\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n\n\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\n\nlet FocusTrapManager = /*#__PURE__*/(() => {\n  class FocusTrapManager {\n    constructor() {\n      // A stack of the FocusTraps on the page. Only the FocusTrap at the\n      // top of the stack is active.\n      this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n\n\n    register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n      let stack = this._focusTrapStack;\n\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n\n      stack.push(focusTrap);\n\n      focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n\n\n    deregister(focusTrap) {\n      focusTrap._disable();\n\n      const stack = this._focusTrapStack;\n      const i = stack.indexOf(focusTrap);\n\n      if (i !== -1) {\n        stack.splice(i, 1);\n\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n\n  }\n\n  FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n    return new (t || FocusTrapManager)();\n  };\n\n  FocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FocusTrapManager_Factory() {\n      return new FocusTrapManager();\n    },\n    token: FocusTrapManager,\n    providedIn: \"root\"\n  });\n  return FocusTrapManager;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n\n\nlet ConfigurableFocusTrapFactory = /*#__PURE__*/(() => {\n  class ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._focusTrapManager = _focusTrapManager;\n      this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n\n    create(element, config = {\n      defer: false\n    }) {\n      let configObject;\n\n      if (typeof config === 'boolean') {\n        configObject = {\n          defer: config\n        };\n      } else {\n        configObject = config;\n      }\n\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n\n  }\n\n  ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n    return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  };\n\n  ConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ConfigurableFocusTrapFactory_Factory() {\n      return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n    },\n    token: ConfigurableFocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return ConfigurableFocusTrapFactory;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n  // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n  // zero. Note that there's an edge case where the user could click the 0x0 spot of the screen\n  // themselves, but that is unlikely to contain interaction elements. Historially we used to check\n  // `event.buttons === 0`, however that no longer works on recent versions of NVDA.\n  return event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\n\n\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\n\n\nconst INPUT_MODALITY_DETECTOR_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\n\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\n\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\n\nconst modalityEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\n\nlet InputModalityDetector = /*#__PURE__*/(() => {\n  class InputModalityDetector {\n    constructor(_platform, ngZone, document, options) {\n      this._platform = _platform;\n      /**\n       * The most recently detected input modality event target. Is null if no input modality has been\n       * detected or if the associated event target is null for some unknown reason.\n       */\n\n      this._mostRecentTarget = null;\n      /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n\n      this._modality = new BehaviorSubject(null);\n      /**\n       * The timestamp of the last touch input modality. Used to determine whether mousedown events\n       * should be attributed to mouse or touch.\n       */\n\n      this._lastTouchMs = 0;\n      /**\n       * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n       * bound.\n       */\n\n      this._onKeydown = event => {\n        var _a, _b; // If this is one of the keys we should ignore, then ignore it and don't update the input\n        // modality to keyboard.\n\n\n        if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n          return;\n        }\n\n        this._modality.next('keyboard');\n\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n\n\n      this._onMousedown = event => {\n        // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n        // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n        // after the previous touch event.\n        if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n          return;\n        } // Fake mousedown events are fired by some screen readers when controls are activated by the\n        // screen reader. Attribute them to keyboard input modality.\n\n\n        this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n      /**\n       * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n       * gets bound.\n       */\n\n\n      this._onTouchstart = event => {\n        // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n        // events are fired. Again, attribute to keyboard input modality.\n        if (isFakeTouchstartFromScreenReader(event)) {\n          this._modality.next('keyboard');\n\n          return;\n        } // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n        // triggered via mouse vs touch.\n\n\n        this._lastTouchMs = Date.now();\n\n        this._modality.next('touch');\n\n        this._mostRecentTarget = _getEventTarget(event);\n      };\n\n      this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options); // Skip the first emission as it's null.\n\n      this.modalityDetected = this._modality.pipe(skip(1));\n      this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged()); // If we're not in a browser, this service should do nothing, as there's no relevant input\n      // modality to detect.\n\n      if (_platform.isBrowser) {\n        ngZone.runOutsideAngular(() => {\n          document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n          document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n          document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        });\n      }\n    }\n    /** The most recently detected input modality. */\n\n\n    get mostRecentModality() {\n      return this._modality.value;\n    }\n\n    ngOnDestroy() {\n      this._modality.complete();\n\n      if (this._platform.isBrowser) {\n        document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n        document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n        document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n      }\n    }\n\n  }\n\n  InputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) {\n    return new (t || InputModalityDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n  };\n\n  InputModalityDetector.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function InputModalityDetector_Factory() {\n      return new InputModalityDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));\n    },\n    token: InputModalityDetector,\n    providedIn: \"root\"\n  });\n  return InputModalityDetector;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = /*#__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet LiveAnnouncer = /*#__PURE__*/(() => {\n  class LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n\n    announce(message, ...args) {\n      const defaultOptions = this._defaultOptions;\n      let politeness;\n      let duration;\n\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        [politeness, duration] = args;\n      }\n\n      this.clear();\n      clearTimeout(this._previousTimeout);\n\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      } // TODO: ensure changing the politeness works on all environments we support.\n\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(() => {\n        return new Promise(resolve => {\n          clearTimeout(this._previousTimeout);\n          this._previousTimeout = setTimeout(() => {\n            this._liveElement.textContent = message;\n            resolve();\n\n            if (typeof duration === 'number') {\n              this._previousTimeout = setTimeout(() => this.clear(), duration);\n            }\n          }, 100);\n        });\n      });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n\n\n    clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n\n    ngOnDestroy() {\n      clearTimeout(this._previousTimeout);\n\n      if (this._liveElement && this._liveElement.parentNode) {\n        this._liveElement.parentNode.removeChild(this._liveElement);\n\n        this._liveElement = null;\n      }\n    }\n\n    _createLiveElement() {\n      const elementClass = 'cdk-live-announcer-element';\n\n      const previousElements = this._document.getElementsByClassName(elementClass);\n\n      const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (let i = 0; i < previousElements.length; i++) {\n        previousElements[i].parentNode.removeChild(previousElements[i]);\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n\n  }\n\n  LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n    return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  };\n\n  LiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function LiveAnnouncer_Factory() {\n      return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n    },\n    token: LiveAnnouncer,\n    providedIn: \"root\"\n  });\n  return LiveAnnouncer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nlet CdkAriaLive = /*#__PURE__*/(() => {\n  class CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n\n\n    get politeness() {\n      return this._politeness;\n    }\n\n    set politeness(value) {\n      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(() => {\n          return this._contentObserver.observe(this._elementRef).subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness);\n\n              this._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n    return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAriaLive,\n    selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n    inputs: {\n      politeness: [\"cdkAriaLive\", \"politeness\"]\n    },\n    exportAs: [\"cdkAriaLive\"]\n  });\n  return CdkAriaLive;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** InjectionToken for FocusMonitorOptions. */\n\n\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\n\nconst captureEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n\nlet FocusMonitor = /*#__PURE__*/(() => {\n  class FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector,\n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._inputModalityDetector = _inputModalityDetector;\n      /** The focus origin that the next focus event is a result of. */\n\n      this._origin = null;\n      /** Whether the window has just been focused. */\n\n      this._windowFocused = false;\n      /**\n       * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n       * focus events to touch interactions requires special logic.\n       */\n\n      this._originFromTouchInteraction = false;\n      /** Map of elements being monitored to their info. */\n\n      this._elementInfo = new Map();\n      /** The number of elements currently being monitored. */\n\n      this._monitoredElementCount = 0;\n      /**\n       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n       * as well as the number of monitored elements that they contain. We have to treat focus/blur\n       * handlers differently from the rest of the events, because the browser won't emit events\n       * to the document when focus moves inside of a shadow root.\n       */\n\n      this._rootNodeFocusListenerCount = new Map();\n      /**\n       * Event listener for `focus` events on the window.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n      this._windowFocusListener = () => {\n        // Make a note of when the window regains focus, so we can\n        // restore the origin info for the focused element.\n        this._windowFocused = true;\n        this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n      };\n      /** Subject for stopping our InputModalityDetector subscription. */\n\n\n      this._stopInputModalityDetector = new Subject();\n      /**\n       * Event listener for `focus` and 'blur' events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n      this._rootNodeFocusAndBlurListener = event => {\n        const target = _getEventTarget(event);\n\n        const handler = event.type === 'focus' ? this._onFocus : this._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n        for (let element = target; element; element = element.parentElement) {\n          handler.call(this, event, element);\n        }\n      };\n\n      this._document = document;\n      this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n      /* IMMEDIATE */\n      ;\n    }\n\n    monitor(element, checkChildren = false) {\n      const nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n        return of(null);\n      } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n\n\n      const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n      const cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n\n        return cachedInfo.subject;\n      } // Create monitored element info.\n\n\n      const info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._registerGlobalListeners(info);\n\n      return info.subject;\n    }\n\n    stopMonitoring(element) {\n      const nativeElement = coerceElement(element);\n\n      const elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n\n    focusVia(element, origin, options) {\n      const nativeElement = coerceElement(element);\n\n      const focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n      // which means that the focus classes won't be updated. If that's the case, update the classes\n      // directly without waiting for an event.\n\n\n      if (nativeElement === focusedElement) {\n        this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n      } else {\n        this._setOrigin(origin); // `focus` isn't available on the server\n\n\n        if (typeof nativeElement.focus === 'function') {\n          nativeElement.focus(options);\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n\n\n    _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      const doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n\n    _toggleClass(element, className, shouldSet) {\n      if (shouldSet) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    }\n\n    _getFocusOrigin(focusEventTarget) {\n      if (this._origin) {\n        // If the origin was realized via a touch interaction, we need to perform additional checks\n        // to determine whether the focus origin should be attributed to touch or program.\n        if (this._originFromTouchInteraction) {\n          return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n        } else {\n          return this._origin;\n        }\n      } // If the window has just regained focus, we can restore the most recent origin from before the\n      // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n      // focus. This typically means one of two things happened:\n      //\n      // 1) The element was programmatically focused, or\n      // 2) The element was focused via screen reader navigation (which generally doesn't fire\n      //    events).\n      //\n      // Because we can't distinguish between these two cases, we default to setting `program`.\n\n\n      return this._windowFocused && this._lastFocusOrigin ? this._lastFocusOrigin : 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n\n\n    _shouldBeAttributedToTouch(focusEventTarget) {\n      // Please note that this check is not perfect. Consider the following edge case:\n      //\n      // <div #parent tabindex=\"0\">\n      //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n      // #child, #parent is programmatically focused. This code will attribute the focus to touch\n      // instead of program. This is a relatively minor edge-case that can be worked around by using\n      // focusVia(parent, 'program') to focus #parent.\n      return this._detectionMode === 1\n      /* EVENTUAL */\n      || !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n\n\n    _setClasses(element, origin) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n\n\n    _setOrigin(origin, isFromInteraction = false) {\n      this._ngZone.runOutsideAngular(() => {\n        this._origin = origin;\n        this._originFromTouchInteraction = origin === 'touch' && isFromInteraction; // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n        // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n        // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n        // a touch event because when a touch event is fired, the associated focus event isn't yet in\n        // the event queue. Before doing so, clear any pending timeouts.\n\n        if (this._detectionMode === 0\n        /* IMMEDIATE */\n        ) {\n          clearTimeout(this._originTimeoutId);\n          const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n          this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n        }\n      });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n\n\n    _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n      const elementInfo = this._elementInfo.get(element);\n\n      const focusEventTarget = _getEventTarget(event);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {\n        return;\n      }\n\n      this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n\n\n    _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n      const elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo.subject, null);\n    }\n\n    _emitOrigin(subject, origin) {\n      this._ngZone.run(() => subject.next(origin));\n    }\n\n    _registerGlobalListeners(elementInfo) {\n      if (!this._platform.isBrowser) {\n        return;\n      }\n\n      const rootNode = elementInfo.rootNode;\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(() => {\n          rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(() => {\n          const window = this._getWindow();\n\n          window.addEventListener('focus', this._windowFocusListener);\n        }); // The InputModalityDetector is also just a collection of global listeners.\n\n\n        this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe(modality => {\n          this._setOrigin(modality, true\n          /* isFromInteraction */\n          );\n        });\n      }\n    }\n\n    _removeGlobalListeners(elementInfo) {\n      const rootNode = elementInfo.rootNode;\n\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      } // Unregister global listeners when last element is unmonitored.\n\n\n      if (! --this._monitoredElementCount) {\n        const window = this._getWindow();\n\n        window.removeEventListener('focus', this._windowFocusListener); // Equivalently, stop our InputModalityDetector subscription.\n\n        this._stopInputModalityDetector.next(); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n\n\n    _originChanged(element, origin, elementInfo) {\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo.subject, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n\n\n    _getClosestElementsInfo(element) {\n      const results = [];\n\n      this._elementInfo.forEach((info, currentElement) => {\n        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n          results.push([currentElement, info]);\n        }\n      });\n\n      return results;\n    }\n\n  }\n\n  FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n    return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(InputModalityDetector), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  };\n\n  FocusMonitor.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FocusMonitor_Factory() {\n      return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n    },\n    token: FocusMonitor,\n    providedIn: \"root\"\n  });\n  return FocusMonitor;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nlet CdkMonitorFocus = /*#__PURE__*/(() => {\n  class CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this.cdkFocusChange = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      const element = this._elementRef.nativeElement;\n      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      if (this._monitorSubscription) {\n        this._monitorSubscription.unsubscribe();\n      }\n    }\n\n  }\n\n  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n    return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n  };\n\n  CdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkMonitorFocus,\n    selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n    outputs: {\n      cdkFocusChange: \"cdkFocusChange\"\n    }\n  });\n  return CdkMonitorFocus;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n\nlet HighContrastModeDetector = /*#__PURE__*/(() => {\n  class HighContrastModeDetector {\n    constructor(_platform, document) {\n      this._platform = _platform;\n      this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n\n\n    getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return 0\n        /* NONE */\n        ;\n      } // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n      const testElement = this._document.createElement('div');\n\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n\n      this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n      const documentWindow = this._document.defaultView || window;\n      const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n      this._document.body.removeChild(testElement);\n\n      switch (computedColor) {\n        case 'rgb(0,0,0)':\n          return 2\n          /* WHITE_ON_BLACK */\n          ;\n\n        case 'rgb(255,255,255)':\n          return 1\n          /* BLACK_ON_WHITE */\n          ;\n      }\n\n      return 0\n      /* NONE */\n      ;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n\n    _applyBodyHighContrastModeCssClasses() {\n      if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n        const bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n        bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n        this._hasCheckedHighContrastMode = true;\n        const mode = this.getHighContrastMode();\n\n        if (mode === 1\n        /* BLACK_ON_WHITE */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === 2\n        /* WHITE_ON_BLACK */\n        ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n        }\n      }\n    }\n\n  }\n\n  HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n    return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  HighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function HighContrastModeDetector_Factory() {\n      return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT));\n    },\n    token: HighContrastModeDetector,\n    providedIn: \"root\"\n  });\n  return HighContrastModeDetector;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet A11yModule = /*#__PURE__*/(() => {\n  class A11yModule {\n    constructor(highContrastModeDetector) {\n      highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n\n  }\n\n  A11yModule.ɵfac = function A11yModule_Factory(t) {\n    return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n  };\n\n  A11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: A11yModule\n  });\n  A11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[PlatformModule, ObserversModule]]\n  });\n  return A11yModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/cdk/fesm2015/a11y.js"],"names":["i2","DOCUMENT","i0","Injectable","Inject","QueryList","NgZone","Directive","ElementRef","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","Subject","Subscription","BehaviorSubject","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","ALT","CONTROL","MAC_META","META","SHIFT","tap","debounceTime","filter","map","take","skip","distinctUntilChanged","takeUntil","coerceBooleanProperty","coerceElement","i1","Platform","_getFocusedElementPierceShadowDom","normalizePassiveListenerOptions","_getEventTarget","_getShadowRoot","PlatformModule","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","removeChild","delete","preExistingContainer","getElementById","parentNode","style","visibility","classList","add","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","isFocusable","config","isPotentiallyFocusable","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","type","isAnchorWithHref","isAnchorElement","hasValidTabIndex","undefined","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","options","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","hasAttached","root","children","tabbableChild","anchor","isEnabled","toggleAnchors","fn","isStable","onStable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","_captureFocus","ngDoCheck","ngOnChanges","autoCaptureChange","firstChange","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","_enable","preventFocus","_disable","allowFocus","FOCUS_TRAP_INERT_STRATEGY","closest","selector","Node","curr","Element","hasNativeClosest","polyfillClosest","matches","prototype","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","setTimeout","activeElement","FocusTrapManager","_focusTrapStack","ft","stack","splice","FocusTrapManager_Factory","ConfigurableFocusTrapFactory","configObject","ConfigurableFocusTrapFactory_Factory","isFakeMousedownFromScreenReader","offsetX","offsetY","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","INPUT_MODALITY_DETECTOR_OPTIONS","INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS","ignoreKeys","TOUCH_BUFFER_MS","modalityEventListenerOptions","passive","capture","InputModalityDetector","ngZone","document","_mostRecentTarget","_modality","_lastTouchMs","_onKeydown","_b","_options","_onMousedown","Date","now","_onTouchstart","Object","assign","modalityDetected","modalityChanged","mostRecentModality","complete","InputModalityDetector_Factory","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","args","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","CdkAriaLive_Factory","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","FocusMonitor","_inputModalityDetector","_windowFocused","_originFromTouchInteraction","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_windowFocusListener","_windowFocusTimeoutId","_stopInputModalityDetector","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","call","_detectionMode","detectionMode","monitor","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","stopMonitoring","elementInfo","_setClasses","_removeGlobalListeners","focusVia","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_setOrigin","_info","_getWindow","doc","_toggleClass","className","shouldSet","remove","_getFocusOrigin","focusEventTarget","_shouldBeAttributedToTouch","_lastFocusOrigin","isFromInteraction","_originTimeoutId","ms","relatedTarget","_emitOrigin","run","rootNodeFocusListeners","modality","results","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","ngAfterViewInit","_monitorSubscription","emit","CdkMonitorFocus_Factory","outputs","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","getHighContrastMode","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","_applyBodyHighContrastModeCssClasses","_hasCheckedHighContrastMode","bodyClasses","mode","HighContrastModeDetector_Factory","A11yModule","highContrastModeDetector","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵangular_material_src_cdk_a11y_a11y_a"],"mappings":"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","sourcesContent":["import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, BehaviorSubject, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB, ALT, CONTROL, MAC_META, META, SHIFT } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take, skip, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getEventTarget, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document) {\n        this._document = _document;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message);\n            messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        const registeredMessage = messageRegistry.get(key);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer && preExistingContainer.parentNode) {\n                preExistingContainer.parentNode.removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            // We add `visibility: hidden` in order to prevent text in this container from\n            // being searchable by the browser's Ctrl + F functionality.\n            // Screen-readers will still read the description for elements with aria-describedby even\n            // when the description element is not visible.\n            messagesContainer.style.visibility = 'hidden';\n            // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n            // the description element doesn't impact page layout.\n            messagesContainer.classList.add('cdk-visually-hidden');\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /** Deletes the global messages container. */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = i0.ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function'))) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(i0.ɵɵinject(i1.Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this.focusTrap.enabled; }\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() { return this._autoCapture; }\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n    if (!(element instanceof Node)) {\n        return null;\n    }\n    let curr = element;\n    while (curr != null && !(curr instanceof Element)) {\n        curr = curr.parentNode;\n    }\n    return curr && (hasNativeClosest ?\n        curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n    let curr = element;\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n        curr = curr.parentNode;\n    }\n    return (curr || null);\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n    return element.matches ?\n        element.matches(selector) :\n        element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) { return new (t || FocusTrapManager)(); };\nFocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) { return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); };\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\nConfigurableFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: FocusTrapManager },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_TRAP_INERT_STRATEGY]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // Some screen readers will dispatch a fake `mousedown` event when pressing enter or space on\n    // a clickable element. We can distinguish these events when both `offsetX` and `offsetY` are\n    // zero. Note that there's an edge case where the user could click the 0x0 spot of the screen\n    // themselves, but that is unlikely to contain interaction elements. Historially we used to check\n    // `event.buttons === 0`, however that no longer works on recent versions of NVDA.\n    return event.offsetX === 0 && event.offsetY === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) ||\n        (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable options for the InputModalityDetector. These are shallowly merged with the default\n * options.\n */\nconst INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken('cdk-input-modality-detector-options');\n/**\n * Default options for the InputModalityDetector.\n *\n * Modifier keys are ignored by default (i.e. when pressed won't cause the service to detect\n * keyboard input modality) for two reasons:\n *\n * 1. Modifier keys are commonly used with mouse to perform actions such as 'right click' or 'open\n *    in new tab', and are thus less representative of actual keyboard interaction.\n * 2. VoiceOver triggers some keyboard events when linearly navigating with Control + Option (but\n *    confusingly not with Caps Lock). Thus, to have parity with other screen readers, we ignore\n *    these keys so as to not update the input modality.\n *\n * Note that we do not by default ignore the right Meta key on Safari because it has the same key\n * code as the ContextMenu key on other browsers. When we switch to using event.key, we can\n * distinguish between the two.\n */\nconst INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {\n    ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT],\n};\n/**\n * The amount of time needed to pass after a touchstart event in order for a subsequent mousedown\n * event to be attributed as mouse and not touch.\n *\n * This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n * that a value of around 650ms seems appropriate.\n */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Event listener options that enable capturing and also mark the listener as passive if the browser\n * supports it.\n */\nconst modalityEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true,\n});\n/**\n * Service that detects the user's input modality.\n *\n * This service does not update the input modality when a user navigates with a screen reader\n * (e.g. linear navigation with VoiceOver, object navigation / browse mode with NVDA, virtual PC\n * cursor mode with JAWS). This is in part due to technical limitations (i.e. keyboard events do not\n * fire as expected in these modes) but is also arguably the correct behavior. Navigating with a\n * screen reader is akin to visually scanning a page, and should not be interpreted as actual user\n * input interaction.\n *\n * When a user is not navigating but *interacting* with a screen reader, this service attempts to\n * update the input modality to keyboard, but in general this service's behavior is largely\n * undefined.\n */\nclass InputModalityDetector {\n    constructor(_platform, ngZone, document, options) {\n        this._platform = _platform;\n        /**\n         * The most recently detected input modality event target. Is null if no input modality has been\n         * detected or if the associated event target is null for some unknown reason.\n         */\n        this._mostRecentTarget = null;\n        /** The underlying BehaviorSubject that emits whenever an input modality is detected. */\n        this._modality = new BehaviorSubject(null);\n        /**\n         * The timestamp of the last touch input modality. Used to determine whether mousedown events\n         * should be attributed to mouse or touch.\n         */\n        this._lastTouchMs = 0;\n        /**\n         * Handles keydown events. Must be an arrow function in order to preserve the context when it gets\n         * bound.\n         */\n        this._onKeydown = (event) => {\n            var _a, _b;\n            // If this is one of the keys we should ignore, then ignore it and don't update the input\n            // modality to keyboard.\n            if ((_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.ignoreKeys) === null || _b === void 0 ? void 0 : _b.some(keyCode => keyCode === event.keyCode)) {\n                return;\n            }\n            this._modality.next('keyboard');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles mousedown events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onMousedown = (event) => {\n            // Touches trigger both touch and mouse events, so we need to distinguish between mouse events\n            // that were triggered via mouse vs touch. To do so, check if the mouse event occurs closely\n            // after the previous touch event.\n            if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {\n                return;\n            }\n            // Fake mousedown events are fired by some screen readers when controls are activated by the\n            // screen reader. Attribute them to keyboard input modality.\n            this._modality.next(isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        /**\n         * Handles touchstart events. Must be an arrow function in order to preserve the context when it\n         * gets bound.\n         */\n        this._onTouchstart = (event) => {\n            // Same scenario as mentioned in _onMousedown, but on touch screen devices, fake touchstart\n            // events are fired. Again, attribute to keyboard input modality.\n            if (isFakeTouchstartFromScreenReader(event)) {\n                this._modality.next('keyboard');\n                return;\n            }\n            // Store the timestamp of this touch event, as it's used to distinguish between mouse events\n            // triggered via mouse vs touch.\n            this._lastTouchMs = Date.now();\n            this._modality.next('touch');\n            this._mostRecentTarget = _getEventTarget(event);\n        };\n        this._options = Object.assign(Object.assign({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);\n        // Skip the first emission as it's null.\n        this.modalityDetected = this._modality.pipe(skip(1));\n        this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());\n        // If we're not in a browser, this service should do nothing, as there's no relevant input\n        // modality to detect.\n        if (_platform.isBrowser) {\n            ngZone.runOutsideAngular(() => {\n                document.addEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n                document.addEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n                document.addEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n            });\n        }\n    }\n    /** The most recently detected input modality. */\n    get mostRecentModality() {\n        return this._modality.value;\n    }\n    ngOnDestroy() {\n        this._modality.complete();\n        if (this._platform.isBrowser) {\n            document.removeEventListener('keydown', this._onKeydown, modalityEventListenerOptions);\n            document.removeEventListener('mousedown', this._onMousedown, modalityEventListenerOptions);\n            document.removeEventListener('touchstart', this._onTouchstart, modalityEventListenerOptions);\n        }\n    }\n}\nInputModalityDetector.ɵfac = function InputModalityDetector_Factory(t) { return new (t || InputModalityDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8)); };\nInputModalityDetector.ɵprov = i0.ɵɵdefineInjectable({ factory: function InputModalityDetector_Factory() { return new InputModalityDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8)); }, token: InputModalityDetector, providedIn: \"root\" });\nInputModalityDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INPUT_MODALITY_DETECTOR_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InputModalityDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [INPUT_MODALITY_DETECTOR_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = null;\n        }\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\nLiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() { return this._politeness; }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, _inputModalityDetector, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._inputModalityDetector = _inputModalityDetector;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /**\n         * Whether the origin was determined via a touch interaction. Necessary as properly attributing\n         * focus events to touch interactions requires special logic.\n         */\n        this._originFromTouchInteraction = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        /** Subject for stopping our InputModalityDetector subscription. */\n        this._stopInputModalityDetector = new Subject();\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = _getEventTarget(event);\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                handler.call(this, event, element);\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement)\n                .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOrigin(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    _getFocusOrigin(focusEventTarget) {\n        if (this._origin) {\n            // If the origin was realized via a touch interaction, we need to perform additional checks\n            // to determine whether the focus origin should be attributed to touch or program.\n            if (this._originFromTouchInteraction) {\n                return this._shouldBeAttributedToTouch(focusEventTarget) ? 'touch' : 'program';\n            }\n            else {\n                return this._origin;\n            }\n        }\n        // If the window has just regained focus, we can restore the most recent origin from before the\n        // window blurred. Otherwise, we've reached the point where we can't identify the source of the\n        // focus. This typically means one of two things happened:\n        //\n        // 1) The element was programmatically focused, or\n        // 2) The element was focused via screen reader navigation (which generally doesn't fire\n        //    events).\n        //\n        // Because we can't distinguish between these two cases, we default to setting `program`.\n        return (this._windowFocused && this._lastFocusOrigin) ? this._lastFocusOrigin : 'program';\n    }\n    /**\n     * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a\n     * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we\n     * handle a focus event following a touch interaction, we need to determine whether (1) the focus\n     * event was directly caused by the touch interaction or (2) the focus event was caused by a\n     * subsequent programmatic focus call triggered by the touch interaction.\n     * @param focusEventTarget The target of the focus event under examination.\n     */\n    _shouldBeAttributedToTouch(focusEventTarget) {\n        // Please note that this check is not perfect. Consider the following edge case:\n        //\n        // <div #parent tabindex=\"0\">\n        //   <div #child tabindex=\"0\" (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // Suppose there is a FocusMonitor in IMMEDIATE mode attached to #parent. When the user touches\n        // #child, #parent is programmatically focused. This code will attribute the focus to touch\n        // instead of program. This is a relatively minor edge-case that can be worked around by using\n        // focusVia(parent, 'program') to focus #parent.\n        return (this._detectionMode === 1 /* EVENTUAL */) ||\n            !!(focusEventTarget === null || focusEventTarget === void 0 ? void 0 : focusEventTarget.contains(this._inputModalityDetector._mostRecentTarget));\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Updates the focus origin. If we're using immediate detection mode, we schedule an async\n     * function to clear the origin at the end of a timeout. The duration of the timeout depends on\n     * the origin being set.\n     * @param origin The origin to set.\n     * @param isFromInteraction Whether we are setting the origin from an interaction event.\n     */\n    _setOrigin(origin, isFromInteraction = false) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            this._originFromTouchInteraction = (origin === 'touch') && isFromInteraction;\n            // If we're in IMMEDIATE mode, reset the origin at the next tick (or in `TOUCH_BUFFER_MS` ms\n            // for a touch event). We reset the origin at the next tick because Firefox focuses one tick\n            // after the interaction event. We wait `TOUCH_BUFFER_MS` ms before resetting the origin for\n            // a touch event because when a touch event is fired, the associated focus event isn't yet in\n            // the event queue. Before doing so, clear any pending timeouts.\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\n                clearTimeout(this._originTimeoutId);\n                const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;\n                this._originTimeoutId = setTimeout(() => this._origin = null, ms);\n            }\n        });\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        const focusEventTarget = _getEventTarget(event);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== focusEventTarget)) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n            // The InputModalityDetector is also just a collection of global listeners.\n            this._inputModalityDetector.modalityDetected\n                .pipe(takeUntil(this._stopInputModalityDetector))\n                .subscribe(modality => { this._setOrigin(modality, true /* isFromInteraction */); });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const window = this._getWindow();\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Equivalently, stop our InputModalityDetector subscription.\n            this._stopInputModalityDetector.next();\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(InputModalityDetector), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); };\nFocusMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(InputModalityDetector), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: InputModalityDetector },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: InputModalityDetector }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n            documentWindow.getComputedStyle(testElement) : null;\n        const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n        this._document.body.removeChild(testElement);\n        switch (computedColor) {\n            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\n        }\n        return 0 /* NONE */;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            // IE11 doesn't support `classList` operations with multiple arguments\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) { return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT)); };\nHighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\nHighContrastModeDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector)); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule, ObserversModule]] });\nA11yModule.ctorParameters = () => [\n    { type: HighContrastModeDetector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], function () { return [{ type: HighContrastModeDetector }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS, INPUT_MODALITY_DETECTOR_OPTIONS, InputModalityDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };\n\n"]},"metadata":{},"sourceType":"module"}