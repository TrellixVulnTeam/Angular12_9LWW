{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RegionDiscovery = function () {\n  function RegionDiscovery(networkInterface) {\n    this.networkInterface = networkInterface;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3\n            /*break*/\n            , 8];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(Constants.IMDS_VERSION)];\n\n          case 2:\n            localIMDSVersionResponse = _a.sent();\n\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getCurrentVersion()];\n\n          case 3:\n            currentIMDSVersion = _a.sent();\n\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(currentIMDSVersion)];\n\n          case 4:\n            currentIMDSVersionResponse = _a.sent();\n\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            _a.sent();\n\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2\n            /*return*/\n            , null];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _a.label = 9;\n\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n\n            return [2\n            /*return*/\n            , autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n\n\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.getCurrentVersion = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\n\n          case 1:\n            response = _a.sent(); // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2\n              /*return*/\n              , response.body[\"newest-versions\"][0]];\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Options for the IMDS endpoint request\n\n\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      \"Metadata\": \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\n\nexport { RegionDiscovery };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js"],"names":["__awaiter","__generator","RegionDiscoverySources","ResponseCodes","Constants","RegionDiscovery","networkInterface","prototype","detectRegion","environmentRegion","regionDiscoveryMetadata","autodetectedRegionName","localIMDSVersionResponse","currentIMDSVersion","currentIMDSVersionResponse","_a","label","trys","push","getRegionFromIMDS","IMDS_VERSION","sent","status","httpSuccess","body","region_source","IMDS","httpBadRequest","getCurrentVersion","FAILED_AUTO_DETECTION","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_OPTIONS","IMDS_TIMEOUT","response","length","headers"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,uBAAvC;AACA,SAASC,sBAAT,EAAiCC,aAAjC,EAAgDC,SAAhD,QAAiE,uBAAjE;AAEA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAkB,YAAY;AAC7C,WAASA,eAAT,CAAyBC,gBAAzB,EAA2C;AACvC,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACID,EAAAA,eAAe,CAACE,SAAhB,CAA0BC,YAA1B,GAAyC,UAAUC,iBAAV,EAA6BC,uBAA7B,EAAsD;AAC3F,WAAOV,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIW,sBAAJ,EAA4BC,wBAA5B,EAAsDC,kBAAtD,EAA0EC,0BAA1E;AACA,aAAOb,WAAW,CAAC,IAAD,EAAO,UAAUc,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACC,KAAX;AACI,eAAK,CAAL;AACIL,YAAAA,sBAAsB,GAAGF,iBAAzB;AACA,gBAAI,CAAC,CAACE,sBAAN,EAA8B,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AAC9BI,YAAAA,EAAE,CAACC,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACID,YAAAA,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKC,iBAAL,CAAuBf,SAAS,CAACgB,YAAjC,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIR,YAAAA,wBAAwB,GAAGG,EAAE,CAACM,IAAH,EAA3B;;AACA,gBAAIT,wBAAwB,CAACU,MAAzB,KAAoCnB,aAAa,CAACoB,WAAtD,EAAmE;AAC/DZ,cAAAA,sBAAsB,GAAGC,wBAAwB,CAACY,IAAlD;AACAd,cAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAACwB,IAA/D;AACH;;AACD,gBAAI,EAAEd,wBAAwB,CAACU,MAAzB,KAAoCnB,aAAa,CAACwB,cAApD,CAAJ,EAAyE,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACzE,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKC,iBAAL,EAAd,CAAP;;AACJ,eAAK,CAAL;AACIf,YAAAA,kBAAkB,GAAGE,EAAE,CAACM,IAAH,EAArB;;AACA,gBAAI,CAACR,kBAAL,EAAyB;AACrBH,cAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAAC2B,qBAA/D;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAe,IAAf,CAAP;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKV,iBAAL,CAAuBN,kBAAvB,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIC,YAAAA,0BAA0B,GAAGC,EAAE,CAACM,IAAH,EAA7B;;AACA,gBAAIP,0BAA0B,CAACQ,MAA3B,KAAsCnB,aAAa,CAACoB,WAAxD,EAAqE;AACjEZ,cAAAA,sBAAsB,GAAGG,0BAA0B,CAACU,IAApD;AACAd,cAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAACwB,IAA/D;AACH;;AACDX,YAAAA,EAAE,CAACC,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACR,eAAK,CAAL;AACID,YAAAA,EAAE,CAACM,IAAH;;AACAX,YAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAAC2B,qBAA/D;AACA,mBAAO,CAAC;AAAE;AAAH,cAAe,IAAf,CAAP;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACR,eAAK,CAAL;AACInB,YAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAAC4B,oBAA/D;AACAf,YAAAA,EAAE,CAACC,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI;AACA,gBAAI,CAACL,sBAAL,EAA6B;AACzBD,cAAAA,uBAAuB,CAACe,aAAxB,GAAwCvB,sBAAsB,CAAC2B,qBAA/D;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAelB,sBAAsB,IAAI,IAAzC,CAAP;AA5CR;AA8CH,OA/CiB,CAAlB;AAgDH,KAlDe,CAAhB;AAmDH,GApDD;AAqDA;AACJ;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,eAAe,CAACE,SAAhB,CAA0BY,iBAA1B,GAA8C,UAAUY,OAAV,EAAmB;AAC7D,WAAO/B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,aAAOC,WAAW,CAAC,IAAD,EAAO,UAAUc,EAAV,EAAc;AACnC,eAAO,CAAC;AAAE;AAAH,UAAe,KAAKT,gBAAL,CAAsB0B,mBAAtB,CAA0C5B,SAAS,CAAC6B,aAAV,GAA0B,eAA1B,GAA4CF,OAA5C,GAAsD,cAAhG,EAAgH1B,eAAe,CAAC6B,YAAhI,EAA8I9B,SAAS,CAAC+B,YAAxJ,CAAf,CAAP;AACH,OAFiB,CAAlB;AAGH,KAJe,CAAhB;AAKH,GAND;AAOA;AACJ;AACA;AACA;AACA;;;AACI9B,EAAAA,eAAe,CAACE,SAAhB,CAA0BqB,iBAA1B,GAA8C,YAAY;AACtD,WAAO5B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIoC,QAAJ;AACA,aAAOnC,WAAW,CAAC,IAAD,EAAO,UAAUc,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACC,KAAX;AACI,eAAK,CAAL;AACID,YAAAA,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKZ,gBAAL,CAAsB0B,mBAAtB,CAA0C5B,SAAS,CAAC6B,aAAV,GAA0B,cAApE,EAAoF5B,eAAe,CAAC6B,YAApG,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIE,YAAAA,QAAQ,GAAGrB,EAAE,CAACM,IAAH,EAAX,CADJ,CAEI;;AACA,gBAAIe,QAAQ,CAACd,MAAT,KAAoBnB,aAAa,CAACwB,cAAlC,IAAoDS,QAAQ,CAACZ,IAA7D,IAAqEY,QAAQ,CAACZ,IAAT,CAAc,iBAAd,CAArE,IAAyGY,QAAQ,CAACZ,IAAT,CAAc,iBAAd,EAAiCa,MAAjC,GAA0C,CAAvJ,EAA0J;AACtJ,qBAAO,CAAC;AAAE;AAAH,gBAAeD,QAAQ,CAACZ,IAAT,CAAc,iBAAd,EAAiC,CAAjC,CAAf,CAAP;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAe,IAAf,CAAP;;AACJ,eAAK,CAAL;AACIT,YAAAA,EAAE,CAACM,IAAH;;AACA,mBAAO,CAAC;AAAE;AAAH,cAAe,IAAf,CAAP;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,aAAP;AAdZ;AAgBH,OAjBiB,CAAlB;AAkBH,KApBe,CAAhB;AAqBH,GAtBD,CAhF6C,CAuG7C;;;AACAhB,EAAAA,eAAe,CAAC6B,YAAhB,GAA+B;AAAEI,IAAAA,OAAO,EAAE;AAAE,kBAAY;AAAd;AAAX,GAA/B;AACA,SAAOjC,eAAP;AACH,CA1GoC,EAArC;;AA4GA,SAASA,eAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 6, , 7]);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _a.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.getCurrentVersion()];\r\n                    case 3:\r\n                        currentIMDSVersion = _a.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _a.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _a.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _a.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = { headers: { \"Metadata\": \"true\" } };\r\n    return RegionDiscovery;\r\n}());\n\nexport { RegionDiscovery };\n"]},"metadata":{},"sourceType":"module"}