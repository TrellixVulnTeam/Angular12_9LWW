{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/Polyline\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { assert } from '../asserts.js';\nimport { flipXY } from '../geom/flat/flip.js';\nimport { get as getProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * When reading features, the coordinates are assumed to be in two dimensions\n * and in [latitude, longitude] order.\n *\n * As Polyline sources contain a single feature,\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\n * feature in an array.\n *\n * @api\n */\n\nvar Polyline = function (_super) {\n  __extends(Polyline, _super);\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n\n\n  function Polyline(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.factor_ = options.factor ? options.factor : 1e5;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryLayout\").default}\n     */\n\n    _this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : GeometryLayout.XY;\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  Polyline.prototype.readFeatureFromText = function (text, opt_options) {\n    var geometry = this.readGeometryFromText(text, opt_options);\n    return new Feature(geometry);\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  Polyline.prototype.readFeaturesFromText = function (text, opt_options) {\n    var feature = this.readFeatureFromText(text, opt_options);\n    return [feature];\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  Polyline.prototype.readGeometryFromText = function (text, opt_options) {\n    var stride = getStrideForLayout(this.geometryLayout_);\n    var flatCoordinates = decodeDeltas(text, stride, this.factor_);\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    var coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);\n    var lineString = new LineString(coordinates, this.geometryLayout_);\n    return transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeFeatureText = function (feature, opt_options) {\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      return this.writeGeometryText(geometry, opt_options);\n    } else {\n      assert(false, 40); // Expected `feature` to have a geometry\n\n      return '';\n    }\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeFeaturesText = function (features, opt_options) {\n    return this.writeFeatureText(features[0], opt_options);\n  };\n  /**\n   * @param {LineString} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  Polyline.prototype.writeGeometryText = function (geometry, opt_options) {\n    geometry = transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options));\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\n  };\n\n  return Polyline;\n}(TextFeature);\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\n\n\nexport function encodeDeltas(numbers, stride, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var d;\n  var lastNumbers = new Array(stride);\n\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  for (var i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      var num = numbers[i];\n      var delta = num - lastNumbers[d];\n      lastNumbers[d] = num;\n      numbers[i] = delta;\n    }\n  }\n\n  return encodeFloats(numbers, factor);\n}\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number} [opt_factor] The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array<number>} A list of n-dimensional points.\n * @api\n */\n\nexport function decodeDeltas(encoded, stride, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var d;\n  /** @type {Array<number>} */\n\n  var lastNumbers = new Array(stride);\n\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  var numbers = decodeFloats(encoded, factor);\n\n  for (var i = 0, ii = numbers.length; i < ii;) {\n    for (d = 0; d < stride; ++d, ++i) {\n      lastNumbers[d] += numbers[i];\n      numbers[i] = lastNumbers[d];\n    }\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of floating point numbers.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\n\nexport function encodeFloats(numbers, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] = Math.round(numbers[i] * factor);\n  }\n\n  return encodeSignedIntegers(numbers);\n}\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} [opt_factor] The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array<number>} A list of floating point numbers.\n * @api\n */\n\nexport function decodeFloats(encoded, opt_factor) {\n  var factor = opt_factor ? opt_factor : 1e5;\n  var numbers = decodeSignedIntegers(encoded);\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] /= factor;\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\n\nexport function encodeSignedIntegers(numbers) {\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    var num = numbers[i];\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\n  }\n\n  return encodeUnsignedIntegers(numbers);\n}\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of signed integers.\n */\n\nexport function decodeSignedIntegers(encoded) {\n  var numbers = decodeUnsignedIntegers(encoded);\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    var num = numbers[i];\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\n  }\n\n  return numbers;\n}\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\n\nexport function encodeUnsignedIntegers(numbers) {\n  var encoded = '';\n\n  for (var i = 0, ii = numbers.length; i < ii; ++i) {\n    encoded += encodeUnsignedInteger(numbers[i]);\n  }\n\n  return encoded;\n}\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of unsigned integers.\n */\n\nexport function decodeUnsignedIntegers(encoded) {\n  var numbers = [];\n  var current = 0;\n  var shift = 0;\n\n  for (var i = 0, ii = encoded.length; i < ii; ++i) {\n    var b = encoded.charCodeAt(i) - 63;\n    current |= (b & 0x1f) << shift;\n\n    if (b < 0x20) {\n      numbers.push(current);\n      current = 0;\n      shift = 0;\n    } else {\n      shift += 5;\n    }\n  }\n\n  return numbers;\n}\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\n\nexport function encodeUnsignedInteger(num) {\n  var value,\n      encoded = '';\n\n  while (num >= 0x20) {\n    value = (0x20 | num & 0x1f) + 63;\n    encoded += String.fromCharCode(value);\n    num >>= 5;\n  }\n\n  value = num + 63;\n  encoded += String.fromCharCode(value);\n  return encoded;\n}\nexport default Polyline;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/Polyline.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Feature","GeometryLayout","LineString","TextFeature","assert","flipXY","get","getProjection","getStrideForLayout","inflateCoordinates","transformGeometryWithOptions","Polyline","_super","opt_options","_this","options","dataProjection","factor_","factor","geometryLayout_","geometryLayout","XY","readFeatureFromText","text","geometry","readGeometryFromText","readFeaturesFromText","feature","stride","flatCoordinates","decodeDeltas","length","coordinates","lineString","adaptOptions","writeFeatureText","getGeometry","writeGeometryText","writeFeaturesText","features","getFlatCoordinates","getStride","encodeDeltas","numbers","opt_factor","lastNumbers","i","ii","num","delta","encodeFloats","encoded","decodeFloats","Math","round","encodeSignedIntegers","decodeSignedIntegers","encodeUnsignedIntegers","decodeUnsignedIntegers","encodeUnsignedInteger","current","shift","charCodeAt","push","value","fromCharCode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/Polyline\n */\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { assert } from '../asserts.js';\nimport { flipXY } from '../geom/flat/flip.js';\nimport { get as getProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\nimport { inflateCoordinates } from '../geom/flat/inflate.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * When reading features, the coordinates are assumed to be in two dimensions\n * and in [latitude, longitude] order.\n *\n * As Polyline sources contain a single feature,\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\n * feature in an array.\n *\n * @api\n */\nvar Polyline = /** @class */ (function (_super) {\n    __extends(Polyline, _super);\n    /**\n     * @param {Options} [opt_options] Optional configuration object.\n     */\n    function Polyline(opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection('EPSG:4326');\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.factor_ = options.factor ? options.factor : 1e5;\n        /**\n         * @private\n         * @type {import(\"../geom/GeometryLayout\").default}\n         */\n        _this.geometryLayout_ = options.geometryLayout\n            ? options.geometryLayout\n            : GeometryLayout.XY;\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    Polyline.prototype.readFeatureFromText = function (text, opt_options) {\n        var geometry = this.readGeometryFromText(text, opt_options);\n        return new Feature(geometry);\n    };\n    /**\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    Polyline.prototype.readFeaturesFromText = function (text, opt_options) {\n        var feature = this.readFeatureFromText(text, opt_options);\n        return [feature];\n    };\n    /**\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    Polyline.prototype.readGeometryFromText = function (text, opt_options) {\n        var stride = getStrideForLayout(this.geometryLayout_);\n        var flatCoordinates = decodeDeltas(text, stride, this.factor_);\n        flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n        var coordinates = inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);\n        var lineString = new LineString(coordinates, this.geometryLayout_);\n        return transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    Polyline.prototype.writeFeatureText = function (feature, opt_options) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            return this.writeGeometryText(geometry, opt_options);\n        }\n        else {\n            assert(false, 40); // Expected `feature` to have a geometry\n            return '';\n        }\n    };\n    /**\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    Polyline.prototype.writeFeaturesText = function (features, opt_options) {\n        return this.writeFeatureText(features[0], opt_options);\n    };\n    /**\n     * @param {LineString} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    Polyline.prototype.writeGeometryText = function (geometry, opt_options) {\n        geometry =\n            /** @type {LineString} */\n            (transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options)));\n        var flatCoordinates = geometry.getFlatCoordinates();\n        var stride = geometry.getStride();\n        flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n        return encodeDeltas(flatCoordinates, stride, this.factor_);\n    };\n    return Polyline;\n}(TextFeature));\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeDeltas(numbers, stride, opt_factor) {\n    var factor = opt_factor ? opt_factor : 1e5;\n    var d;\n    var lastNumbers = new Array(stride);\n    for (d = 0; d < stride; ++d) {\n        lastNumbers[d] = 0;\n    }\n    for (var i = 0, ii = numbers.length; i < ii;) {\n        for (d = 0; d < stride; ++d, ++i) {\n            var num = numbers[i];\n            var delta = num - lastNumbers[d];\n            lastNumbers[d] = num;\n            numbers[i] = delta;\n        }\n    }\n    return encodeFloats(numbers, factor);\n}\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number} [opt_factor] The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array<number>} A list of n-dimensional points.\n * @api\n */\nexport function decodeDeltas(encoded, stride, opt_factor) {\n    var factor = opt_factor ? opt_factor : 1e5;\n    var d;\n    /** @type {Array<number>} */\n    var lastNumbers = new Array(stride);\n    for (d = 0; d < stride; ++d) {\n        lastNumbers[d] = 0;\n    }\n    var numbers = decodeFloats(encoded, factor);\n    for (var i = 0, ii = numbers.length; i < ii;) {\n        for (d = 0; d < stride; ++d, ++i) {\n            lastNumbers[d] += numbers[i];\n            numbers[i] = lastNumbers[d];\n        }\n    }\n    return numbers;\n}\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of floating point numbers.\n * @param {number} [opt_factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeFloats(numbers, opt_factor) {\n    var factor = opt_factor ? opt_factor : 1e5;\n    for (var i = 0, ii = numbers.length; i < ii; ++i) {\n        numbers[i] = Math.round(numbers[i] * factor);\n    }\n    return encodeSignedIntegers(numbers);\n}\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} [opt_factor] The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array<number>} A list of floating point numbers.\n * @api\n */\nexport function decodeFloats(encoded, opt_factor) {\n    var factor = opt_factor ? opt_factor : 1e5;\n    var numbers = decodeSignedIntegers(encoded);\n    for (var i = 0, ii = numbers.length; i < ii; ++i) {\n        numbers[i] /= factor;\n    }\n    return numbers;\n}\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\nexport function encodeSignedIntegers(numbers) {\n    for (var i = 0, ii = numbers.length; i < ii; ++i) {\n        var num = numbers[i];\n        numbers[i] = num < 0 ? ~(num << 1) : num << 1;\n    }\n    return encodeUnsignedIntegers(numbers);\n}\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of signed integers.\n */\nexport function decodeSignedIntegers(encoded) {\n    var numbers = decodeUnsignedIntegers(encoded);\n    for (var i = 0, ii = numbers.length; i < ii; ++i) {\n        var num = numbers[i];\n        numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\n    }\n    return numbers;\n}\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedIntegers(numbers) {\n    var encoded = '';\n    for (var i = 0, ii = numbers.length; i < ii; ++i) {\n        encoded += encodeUnsignedInteger(numbers[i]);\n    }\n    return encoded;\n}\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of unsigned integers.\n */\nexport function decodeUnsignedIntegers(encoded) {\n    var numbers = [];\n    var current = 0;\n    var shift = 0;\n    for (var i = 0, ii = encoded.length; i < ii; ++i) {\n        var b = encoded.charCodeAt(i) - 63;\n        current |= (b & 0x1f) << shift;\n        if (b < 0x20) {\n            numbers.push(current);\n            current = 0;\n            shift = 0;\n        }\n        else {\n            shift += 5;\n        }\n    }\n    return numbers;\n}\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedInteger(num) {\n    var value, encoded = '';\n    while (num >= 0x20) {\n        value = (0x20 | (num & 0x1f)) + 63;\n        encoded += String.fromCharCode(value);\n        num >>= 5;\n    }\n    value = num + 63;\n    encoded += String.fromCharCode(value);\n    return encoded;\n}\nexport default Polyline;\n"]},"metadata":{},"sourceType":"module"}