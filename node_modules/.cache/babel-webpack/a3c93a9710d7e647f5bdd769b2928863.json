{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/TextFeature\n */\n\n\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @abstract\n */\n\nvar TextFeature = function (_super) {\n  __extends(TextFeature, _super);\n\n  function TextFeature() {\n    return _super.call(this) || this;\n  }\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  TextFeature.prototype.getType = function () {\n    return FormatType.TEXT;\n  };\n  /**\n   * Read the feature from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  TextFeature.prototype.readFeature = function (source, opt_options) {\n    return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  TextFeature.prototype.readFeatureFromText = function (text, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the features from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  TextFeature.prototype.readFeatures = function (source, opt_options) {\n    return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  TextFeature.prototype.readFeaturesFromText = function (text, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the geometry from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n\n\n  TextFeature.prototype.readGeometry = function (source, opt_options) {\n    return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  TextFeature.prototype.readGeometryFromText = function (text, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   * @api\n   */\n\n\n  TextFeature.prototype.readProjection = function (source) {\n    return this.readProjectionFromText(getText(source));\n  };\n  /**\n   * @param {string} text Text.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n\n\n  TextFeature.prototype.readProjectionFromText = function (text) {\n    return this.dataProjection;\n  };\n  /**\n   * Encode a feature as a string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n\n\n  TextFeature.prototype.writeFeature = function (feature, opt_options) {\n    return this.writeFeatureText(feature, this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  TextFeature.prototype.writeFeatureText = function (feature, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n\n\n  TextFeature.prototype.writeFeatures = function (features, opt_options) {\n    return this.writeFeaturesText(features, this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  TextFeature.prototype.writeFeaturesText = function (features, opt_options) {\n    return abstract();\n  };\n  /**\n   * Write a single geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Geometry.\n   * @api\n   */\n\n\n  TextFeature.prototype.writeGeometry = function (geometry, opt_options) {\n    return this.writeGeometryText(geometry, this.adaptOptions(opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n\n\n  TextFeature.prototype.writeGeometryText = function (geometry, opt_options) {\n    return abstract();\n  };\n\n  return TextFeature;\n}(FeatureFormat);\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {string} Text.\n */\n\n\nfunction getText(source) {\n  if (typeof source === 'string') {\n    return source;\n  } else {\n    return '';\n  }\n}\n\nexport default TextFeature;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/TextFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","FeatureFormat","FormatType","abstract","TextFeature","_super","getType","TEXT","readFeature","source","opt_options","readFeatureFromText","getText","adaptOptions","text","readFeatures","readFeaturesFromText","readGeometry","readGeometryFromText","readProjection","readProjectionFromText","dataProjection","writeFeature","feature","writeFeatureText","writeFeatures","features","writeFeaturesText","writeGeometry","geometry","writeGeometryText"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/TextFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for text feature formats.\n *\n * @abstract\n */\nvar TextFeature = /** @class */ (function (_super) {\n    __extends(TextFeature, _super);\n    function TextFeature() {\n        return _super.call(this) || this;\n    }\n    /**\n     * @return {import(\"./FormatType.js\").default} Format.\n     */\n    TextFeature.prototype.getType = function () {\n        return FormatType.TEXT;\n    };\n    /**\n     * Read the feature from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     * @api\n     */\n    TextFeature.prototype.readFeature = function (source, opt_options) {\n        return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    TextFeature.prototype.readFeatureFromText = function (text, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the features from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     * @api\n     */\n    TextFeature.prototype.readFeatures = function (source, opt_options) {\n        return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    TextFeature.prototype.readFeaturesFromText = function (text, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the geometry from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     * @api\n     */\n    TextFeature.prototype.readGeometry = function (source, opt_options) {\n        return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    TextFeature.prototype.readGeometryFromText = function (text, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     * @api\n     */\n    TextFeature.prototype.readProjection = function (source) {\n        return this.readProjectionFromText(getText(source));\n    };\n    /**\n     * @param {string} text Text.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     */\n    TextFeature.prototype.readProjectionFromText = function (text) {\n        return this.dataProjection;\n    };\n    /**\n     * Encode a feature as a string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded feature.\n     * @api\n     */\n    TextFeature.prototype.writeFeature = function (feature, opt_options) {\n        return this.writeFeatureText(feature, this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    TextFeature.prototype.writeFeatureText = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded features.\n     * @api\n     */\n    TextFeature.prototype.writeFeatures = function (features, opt_options) {\n        return this.writeFeaturesText(features, this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    TextFeature.prototype.writeFeaturesText = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Write a single geometry.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Geometry.\n     * @api\n     */\n    TextFeature.prototype.writeGeometry = function (geometry, opt_options) {\n        return this.writeGeometryText(geometry, this.adaptOptions(opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @protected\n     * @return {string} Text.\n     */\n    TextFeature.prototype.writeGeometryText = function (geometry, opt_options) {\n        return abstract();\n    };\n    return TextFeature;\n}(FeatureFormat));\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {string} Text.\n */\nfunction getText(source) {\n    if (typeof source === 'string') {\n        return source;\n    }\n    else {\n        return '';\n    }\n}\nexport default TextFeature;\n"]},"metadata":{},"sourceType":"module"}