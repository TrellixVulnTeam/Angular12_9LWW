{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, CacheOutcome } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient = function (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   * TODO: Move this call to cacheManager instead\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: \"\",\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient);\n\nexport { ClientCredentialClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/ClientCredentialClient.js"],"names":["__extends","__awaiter","__generator","BaseClient","RequestParameterBuilder","ScopeSet","CredentialType","GrantType","CacheOutcome","ResponseHandler","TimeUtils","StringUtils","ClientAuthError","ClientCredentialClient","_super","configuration","call","prototype","acquireToken","request","cachedAuthenticationResult","_a","label","scopeSet","scopes","skipCache","executeTokenRequest","authority","sent","getCachedAuthenticationResult","_b","cachedAccessToken","_c","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","NO_CACHED_ACCESS_TOKEN","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","accessTokenFilter","homeAccountId","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","length","createMultipleMatchingTokensInCacheError","requestBody","headers","thumbprint","reqTimestamp","response","responseHandler","tokenResponse","createTokenRequestBody","createTokenRequestHeaders","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","parameterBuilder","addClientId","addScopes","addGrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","claims","clientCapabilities","addClaims","createQueryString"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, CacheOutcome } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nvar ClientCredentialClient = /** @class */ (function (_super) {\r\n    __extends(ClientCredentialClient, _super);\r\n    function ClientCredentialClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken) {\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: null,\r\n                                idToken: null,\r\n                                accessToken: cachedAccessToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads access token from the cache\r\n     * TODO: Move this call to cacheManager instead\r\n     */\r\n    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            homeAccountId: \"\",\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase()\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return ClientCredentialClient;\r\n}(BaseClient));\n\nexport { ClientCredentialClient };\n"]},"metadata":{},"sourceType":"module"}