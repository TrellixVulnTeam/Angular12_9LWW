{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\n\nvar tmpTileCoord = [0, 0, 0];\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\n\nvar TileGrid = function () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n    // check if we've got a consistent zoom factor and origin\n\n    var zoomFactor;\n\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n\n    this.zoomFactor_ = zoomFactor;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    this.maxZoom = this.resolutions_.length - 1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n\n    this.origins_ = null;\n\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    var extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n\n    this.tileSizes_ = null;\n\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n\n\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = extent !== undefined ? extent : null;\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n\n    this.fullTileRanges_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.tmpSize_ = [0, 0];\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n\n        if (extent) {\n          var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n\n    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n\n\n  TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n    var tileRange, x, y;\n    var tileCoordExtent = null;\n    var z = tileCoord[0] - 1;\n\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n      }\n\n      if (callback(z, tileRange)) {\n        return true;\n      }\n\n      --z;\n    }\n\n    return false;\n  };\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMaxZoom = function () {\n    return this.maxZoom;\n  };\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n\n\n  TileGrid.prototype.getMinZoom = function () {\n    return this.minZoom;\n  };\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n\n\n  TileGrid.prototype.getOrigin = function (z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  };\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolution = function (z) {\n    return this.resolutions_[z];\n  };\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n\n\n  TileGrid.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        var minX = tileCoord[1] * 2;\n        var minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n      }\n\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n    }\n\n    return null;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForTileCoordAndZ = function (tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    var tileCoordZ = tileCoord[0];\n    var tileCoordX = tileCoord[1];\n    var tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);\n    }\n\n    if (this.zoomFactor_) {\n      var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      var minX = Math.floor(tileCoordX * factor);\n      var minY = Math.floor(tileCoordY * factor);\n\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  };\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n\n\n  TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n\n\n  TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n    var tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    var minX = tileCoord[1];\n    var minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n\n\n  TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  };\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    var maxX = minX + tileSize[0] * resolution;\n    var maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  };\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    var z = this.getZForResolution(resolution);\n    var scale = resolution / this.getResolution(z);\n    var origin = this.getOrigin(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    var tileCoordX = scale * xFromOrigin / tileSize[0];\n    var tileCoordY = scale * yFromOrigin / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n\n\n  TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    var tileCoordX = xFromOrigin / tileSize[0];\n    var tileCoordY = yFromOrigin / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n\n\n  TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  };\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n\n\n  TileGrid.prototype.getTileSize = function (z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  };\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n\n\n  TileGrid.prototype.getFullTileRange = function (z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n\n\n  TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  };\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n\n\n  TileGrid.prototype.calculateTileRanges_ = function (extent) {\n    var length = this.resolutions_.length;\n    var fullTileRanges = new Array(length);\n\n    for (var z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n\n    this.fullTileRanges_ = fullTileRanges;\n  };\n\n  return TileGrid;\n}();\n\nexport default TileGrid;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/tilegrid/TileGrid.js"],"names":["TileRange","createOrUpdate","createOrUpdateTileRange","DEFAULT_TILE_SIZE","assert","clamp","getTopLeft","createOrUpdateTileCoord","isSorted","linearFindNearest","toSize","tmpTileCoord","TileGrid","options","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","size","z","tileRange","Math","min","max","restrictedTileRange","getTileRangeForExtentAndZ","minX","maxX","minY","maxY","calculateTileRanges_","prototype","forEachTileCoord","zoom","callback","j","jj","forEachTileCoordParentTileRange","tileCoord","opt_tileRange","opt_extent","x","y","tileCoordExtent","getTileCoordExtent","floor","getExtent","getMaxZoom","getMinZoom","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","factor","pow","getTileRangeExtent","resolution","getTileSize","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","adjustX","adjustY","xFromOrigin","yFromOrigin","ceil","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","fullTileRanges","Array"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAP,IAAoBC,cAAc,IAAIC,uBAAtC,QAAsE,iBAAtE;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASJ,cAAT,EAAyBK,UAAzB,QAA2C,cAA3C;AACA,SAASL,cAAc,IAAIM,uBAA3B,QAA0D,iBAA1D;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,aAA5C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAkB,YAAY;AACtC;AACJ;AACA;AACI,WAASA,QAAT,CAAkBC,OAAlB,EAA2B;AACvB;AACR;AACA;AACA;AACQ,SAAKC,OAAL,GAAeD,OAAO,CAACC,OAAR,KAAoBC,SAApB,GAAgCF,OAAO,CAACC,OAAxC,GAAkD,CAAjE;AACA;AACR;AACA;AACA;;AACQ,SAAKE,YAAL,GAAoBH,OAAO,CAACI,WAA5B;AACAb,IAAAA,MAAM,CAACI,QAAQ,CAAC,KAAKQ,YAAN,EAAoB,UAAUE,CAAV,EAAaC,CAAb,EAAgB;AAC/C,aAAOA,CAAC,GAAGD,CAAX;AACH,KAFc,EAEZ,IAFY,CAAT,EAEI,EAFJ,CAAN,CAXuB,CAaR;AACf;;AACA,QAAIE,UAAJ;;AACA,QAAI,CAACP,OAAO,CAACQ,OAAb,EAAsB;AAClB,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAKP,YAAL,CAAkBQ,MAAlB,GAA2B,CAAhD,EAAmDF,CAAC,GAAGC,EAAvD,EAA2D,EAAED,CAA7D,EAAgE;AAC5D,YAAI,CAACF,UAAL,EAAiB;AACbA,UAAAA,UAAU,GAAG,KAAKJ,YAAL,CAAkBM,CAAlB,IAAuB,KAAKN,YAAL,CAAkBM,CAAC,GAAG,CAAtB,CAApC;AACH,SAFD,MAGK;AACD,cAAI,KAAKN,YAAL,CAAkBM,CAAlB,IAAuB,KAAKN,YAAL,CAAkBM,CAAC,GAAG,CAAtB,CAAvB,KAAoDF,UAAxD,EAAoE;AAChEA,YAAAA,UAAU,GAAGL,SAAb;AACA;AACH;AACJ;AACJ;AACJ;AACD;AACR;AACA;AACA;;;AACQ,SAAKU,WAAL,GAAmBL,UAAnB;AACA;AACR;AACA;AACA;;AACQ,SAAKM,OAAL,GAAe,KAAKV,YAAL,CAAkBQ,MAAlB,GAA2B,CAA1C;AACA;AACR;AACA;AACA;;AACQ,SAAKG,OAAL,GAAed,OAAO,CAACe,MAAR,KAAmBb,SAAnB,GAA+BF,OAAO,CAACe,MAAvC,GAAgD,IAA/D;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,IAAhB;;AACA,QAAIhB,OAAO,CAACQ,OAAR,KAAoBN,SAAxB,EAAmC;AAC/B,WAAKc,QAAL,GAAgBhB,OAAO,CAACQ,OAAxB;AACAjB,MAAAA,MAAM,CAAC,KAAKyB,QAAL,CAAcL,MAAd,IAAwB,KAAKR,YAAL,CAAkBQ,MAA3C,EAAmD,EAAnD,CAAN,CAF+B,CAE+B;AACjE;;AACD,QAAIM,MAAM,GAAGjB,OAAO,CAACiB,MAArB;;AACA,QAAIA,MAAM,KAAKf,SAAX,IAAwB,CAAC,KAAKY,OAA9B,IAAyC,CAAC,KAAKE,QAAnD,EAA6D;AACzD,WAAKF,OAAL,GAAerB,UAAU,CAACwB,MAAD,CAAzB;AACH;;AACD1B,IAAAA,MAAM,CAAE,CAAC,KAAKuB,OAAN,IAAiB,KAAKE,QAAvB,IAAqC,KAAKF,OAAL,IAAgB,CAAC,KAAKE,QAA5D,EAAuE,EAAvE,CAAN,CAzDuB,CAyD2D;;AAClF;AACR;AACA;AACA;;AACQ,SAAKE,UAAL,GAAkB,IAAlB;;AACA,QAAIlB,OAAO,CAACmB,SAAR,KAAsBjB,SAA1B,EAAqC;AACjC,WAAKgB,UAAL,GAAkBlB,OAAO,CAACmB,SAA1B;AACA5B,MAAAA,MAAM,CAAC,KAAK2B,UAAL,CAAgBP,MAAhB,IAA0B,KAAKR,YAAL,CAAkBQ,MAA7C,EAAqD,EAArD,CAAN,CAFiC,CAE+B;AACnE;AACD;AACR;AACA;AACA;;;AACQ,SAAKS,SAAL,GACIpB,OAAO,CAACqB,QAAR,KAAqBnB,SAArB,GACMF,OAAO,CAACqB,QADd,GAEM,CAAC,KAAKH,UAAN,GACI5B,iBADJ,GAEI,IALd;AAMAC,IAAAA,MAAM,CAAE,CAAC,KAAK6B,SAAN,IAAmB,KAAKF,UAAzB,IACF,KAAKE,SAAL,IAAkB,CAAC,KAAKF,UADvB,EACoC,EADpC,CAAN,CA7EuB,CA8EwB;;AAC/C;AACR;AACA;AACA;;AACQ,SAAKI,OAAL,GAAeL,MAAM,KAAKf,SAAX,GAAuBe,MAAvB,GAAgC,IAA/C;AACA;AACR;AACA;AACA;;AACQ,SAAKM,eAAL,GAAuB,IAAvB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,UAAL,GAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAlB;;AACA,QAAIzB,OAAO,CAAC0B,KAAR,KAAkBxB,SAAtB,EAAiC;AAC7B,WAAKqB,eAAL,GAAuBvB,OAAO,CAAC0B,KAAR,CAAcC,GAAd,CAAkB,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACxD,YAAIC,SAAS,GAAG,IAAI3C,SAAJ,CAAc4C,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,IAAI,CAAC,CAAD,CAAhB,CAAd,EAAoCG,IAAI,CAACE,GAAL,CAASL,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB,EAAsB,CAAC,CAAvB,CAApC,EAA+DG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,IAAI,CAAC,CAAD,CAAhB,CAA/D,EAAqFG,IAAI,CAACE,GAAL,CAASL,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB,EAAsB,CAAC,CAAvB,CAArF,CAAhB;;AACA,YAAIX,MAAJ,EAAY;AACR,cAAIiB,mBAAmB,GAAG,KAAKC,yBAAL,CAA+BlB,MAA/B,EAAuCY,CAAvC,CAA1B;AACAC,UAAAA,SAAS,CAACM,IAAV,GAAiBL,IAAI,CAACE,GAAL,CAASC,mBAAmB,CAACE,IAA7B,EAAmCN,SAAS,CAACM,IAA7C,CAAjB;AACAN,UAAAA,SAAS,CAACO,IAAV,GAAiBN,IAAI,CAACC,GAAL,CAASE,mBAAmB,CAACG,IAA7B,EAAmCP,SAAS,CAACO,IAA7C,CAAjB;AACAP,UAAAA,SAAS,CAACQ,IAAV,GAAiBP,IAAI,CAACE,GAAL,CAASC,mBAAmB,CAACI,IAA7B,EAAmCR,SAAS,CAACQ,IAA7C,CAAjB;AACAR,UAAAA,SAAS,CAACS,IAAV,GAAiBR,IAAI,CAACC,GAAL,CAASE,mBAAmB,CAACK,IAA7B,EAAmCT,SAAS,CAACS,IAA7C,CAAjB;AACH;;AACD,eAAOT,SAAP;AACH,OAVsB,EAUpB,IAVoB,CAAvB;AAWH,KAZD,MAaK,IAAIb,MAAJ,EAAY;AACb,WAAKuB,oBAAL,CAA0BvB,MAA1B;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlB,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBC,gBAAnB,GAAsC,UAAUzB,MAAV,EAAkB0B,IAAlB,EAAwBC,QAAxB,EAAkC;AACpE,QAAId,SAAS,GAAG,KAAKK,yBAAL,CAA+BlB,MAA/B,EAAuC0B,IAAvC,CAAhB;;AACA,SAAK,IAAIlC,CAAC,GAAGqB,SAAS,CAACM,IAAlB,EAAwB1B,EAAE,GAAGoB,SAAS,CAACO,IAA5C,EAAkD5B,CAAC,IAAIC,EAAvD,EAA2D,EAAED,CAA7D,EAAgE;AAC5D,WAAK,IAAIoC,CAAC,GAAGf,SAAS,CAACQ,IAAlB,EAAwBQ,EAAE,GAAGhB,SAAS,CAACS,IAA5C,EAAkDM,CAAC,IAAIC,EAAvD,EAA2D,EAAED,CAA7D,EAAgE;AAC5DD,QAAAA,QAAQ,CAAC,CAACD,IAAD,EAAOlC,CAAP,EAAUoC,CAAV,CAAD,CAAR;AACH;AACJ;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI9C,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBM,+BAAnB,GAAqD,UAAUC,SAAV,EAAqBJ,QAArB,EAA+BK,aAA/B,EAA8CC,UAA9C,EAA0D;AAC3G,QAAIpB,SAAJ,EAAeqB,CAAf,EAAkBC,CAAlB;AACA,QAAIC,eAAe,GAAG,IAAtB;AACA,QAAIxB,CAAC,GAAGmB,SAAS,CAAC,CAAD,CAAT,GAAe,CAAvB;;AACA,QAAI,KAAKpC,WAAL,KAAqB,CAAzB,EAA4B;AACxBuC,MAAAA,CAAC,GAAGH,SAAS,CAAC,CAAD,CAAb;AACAI,MAAAA,CAAC,GAAGJ,SAAS,CAAC,CAAD,CAAb;AACH,KAHD,MAIK;AACDK,MAAAA,eAAe,GAAG,KAAKC,kBAAL,CAAwBN,SAAxB,EAAmCE,UAAnC,CAAlB;AACH;;AACD,WAAOrB,CAAC,IAAI,KAAK5B,OAAjB,EAA0B;AACtB,UAAI,KAAKW,WAAL,KAAqB,CAAzB,EAA4B;AACxBuC,QAAAA,CAAC,GAAGpB,IAAI,CAACwB,KAAL,CAAWJ,CAAC,GAAG,CAAf,CAAJ;AACAC,QAAAA,CAAC,GAAGrB,IAAI,CAACwB,KAAL,CAAWH,CAAC,GAAG,CAAf,CAAJ;AACAtB,QAAAA,SAAS,GAAGzC,uBAAuB,CAAC8D,CAAD,EAAIA,CAAJ,EAAOC,CAAP,EAAUA,CAAV,EAAaH,aAAb,CAAnC;AACH,OAJD,MAKK;AACDnB,QAAAA,SAAS,GAAG,KAAKK,yBAAL,CAA+BkB,eAA/B,EAAgDxB,CAAhD,EAAmDoB,aAAnD,CAAZ;AACH;;AACD,UAAIL,QAAQ,CAACf,CAAD,EAAIC,SAAJ,CAAZ,EAA4B;AACxB,eAAO,IAAP;AACH;;AACD,QAAED,CAAF;AACH;;AACD,WAAO,KAAP;AACH,GA1BD;AA2BA;AACJ;AACA;AACA;AACA;;;AACI9B,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBe,SAAnB,GAA+B,YAAY;AACvC,WAAO,KAAKlC,OAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIvB,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBgB,UAAnB,GAAgC,YAAY;AACxC,WAAO,KAAK5C,OAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACId,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBiB,UAAnB,GAAgC,YAAY;AACxC,WAAO,KAAKzD,OAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBkB,SAAnB,GAA+B,UAAU9B,CAAV,EAAa;AACxC,QAAI,KAAKf,OAAT,EAAkB;AACd,aAAO,KAAKA,OAAZ;AACH,KAFD,MAGK;AACD,aAAO,KAAKE,QAAL,CAAca,CAAd,CAAP;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI9B,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBmB,aAAnB,GAAmC,UAAU/B,CAAV,EAAa;AAC5C,WAAO,KAAK1B,YAAL,CAAkB0B,CAAlB,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI9B,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBoB,cAAnB,GAAoC,YAAY;AAC5C,WAAO,KAAK1D,YAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBqB,0BAAnB,GAAgD,UAAUd,SAAV,EAAqBC,aAArB,EAAoCC,UAApC,EAAgD;AAC5F,QAAIF,SAAS,CAAC,CAAD,CAAT,GAAe,KAAKnC,OAAxB,EAAiC;AAC7B,UAAI,KAAKD,WAAL,KAAqB,CAAzB,EAA4B;AACxB,YAAIwB,IAAI,GAAGY,SAAS,CAAC,CAAD,CAAT,GAAe,CAA1B;AACA,YAAIV,IAAI,GAAGU,SAAS,CAAC,CAAD,CAAT,GAAe,CAA1B;AACA,eAAO3D,uBAAuB,CAAC+C,IAAD,EAAOA,IAAI,GAAG,CAAd,EAAiBE,IAAjB,EAAuBA,IAAI,GAAG,CAA9B,EAAiCW,aAAjC,CAA9B;AACH;;AACD,UAAII,eAAe,GAAG,KAAKC,kBAAL,CAAwBN,SAAxB,EAAmCE,UAAU,IAAI,KAAKzB,UAAtD,CAAtB;AACA,aAAO,KAAKU,yBAAL,CAA+BkB,eAA/B,EAAgDL,SAAS,CAAC,CAAD,CAAT,GAAe,CAA/D,EAAkEC,aAAlE,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;;;AACIlD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBsB,4BAAnB,GAAkD,UAAUf,SAAV,EAAqBnB,CAArB,EAAwBoB,aAAxB,EAAuC;AACrF,QAAIpB,CAAC,GAAG,KAAKhB,OAAT,IAAoBgB,CAAC,GAAG,KAAK5B,OAAjC,EAA0C;AACtC,aAAO,IAAP;AACH;;AACD,QAAI+D,UAAU,GAAGhB,SAAS,CAAC,CAAD,CAA1B;AACA,QAAIiB,UAAU,GAAGjB,SAAS,CAAC,CAAD,CAA1B;AACA,QAAIkB,UAAU,GAAGlB,SAAS,CAAC,CAAD,CAA1B;;AACA,QAAInB,CAAC,KAAKmC,UAAV,EAAsB;AAClB,aAAO3E,uBAAuB,CAAC4E,UAAD,EAAaC,UAAb,EAAyBD,UAAzB,EAAqCC,UAArC,EAAiDjB,aAAjD,CAA9B;AACH;;AACD,QAAI,KAAKrC,WAAT,EAAsB;AAClB,UAAIuD,MAAM,GAAGpC,IAAI,CAACqC,GAAL,CAAS,KAAKxD,WAAd,EAA2BiB,CAAC,GAAGmC,UAA/B,CAAb;AACA,UAAI5B,IAAI,GAAGL,IAAI,CAACwB,KAAL,CAAWU,UAAU,GAAGE,MAAxB,CAAX;AACA,UAAI7B,IAAI,GAAGP,IAAI,CAACwB,KAAL,CAAWW,UAAU,GAAGC,MAAxB,CAAX;;AACA,UAAItC,CAAC,GAAGmC,UAAR,EAAoB;AAChB,eAAO3E,uBAAuB,CAAC+C,IAAD,EAAOA,IAAP,EAAaE,IAAb,EAAmBA,IAAnB,EAAyBW,aAAzB,CAA9B;AACH;;AACD,UAAIZ,IAAI,GAAGN,IAAI,CAACwB,KAAL,CAAWY,MAAM,IAAIF,UAAU,GAAG,CAAjB,CAAjB,IAAwC,CAAnD;AACA,UAAI1B,IAAI,GAAGR,IAAI,CAACwB,KAAL,CAAWY,MAAM,IAAID,UAAU,GAAG,CAAjB,CAAjB,IAAwC,CAAnD;AACA,aAAO7E,uBAAuB,CAAC+C,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBU,aAAzB,CAA9B;AACH;;AACD,QAAII,eAAe,GAAG,KAAKC,kBAAL,CAAwBN,SAAxB,EAAmC,KAAKvB,UAAxC,CAAtB;AACA,WAAO,KAAKU,yBAAL,CAA+BkB,eAA/B,EAAgDxB,CAAhD,EAAmDoB,aAAnD,CAAP;AACH,GAvBD;AAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIlD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB4B,kBAAnB,GAAwC,UAAUxC,CAAV,EAAaC,SAAb,EAAwBoB,UAAxB,EAAoC;AACxE,QAAInC,MAAM,GAAG,KAAK4C,SAAL,CAAe9B,CAAf,CAAb;AACA,QAAIyC,UAAU,GAAG,KAAKV,aAAL,CAAmB/B,CAAnB,CAAjB;AACA,QAAIR,QAAQ,GAAGxB,MAAM,CAAC,KAAK0E,WAAL,CAAiB1C,CAAjB,CAAD,EAAsB,KAAKL,QAA3B,CAArB;AACA,QAAIY,IAAI,GAAGrB,MAAM,CAAC,CAAD,CAAN,GAAYe,SAAS,CAACM,IAAV,GAAiBf,QAAQ,CAAC,CAAD,CAAzB,GAA+BiD,UAAtD;AACA,QAAIjC,IAAI,GAAGtB,MAAM,CAAC,CAAD,CAAN,GAAY,CAACe,SAAS,CAACO,IAAV,GAAiB,CAAlB,IAAuBhB,QAAQ,CAAC,CAAD,CAA/B,GAAqCiD,UAA5D;AACA,QAAIhC,IAAI,GAAGvB,MAAM,CAAC,CAAD,CAAN,GAAYe,SAAS,CAACQ,IAAV,GAAiBjB,QAAQ,CAAC,CAAD,CAAzB,GAA+BiD,UAAtD;AACA,QAAI/B,IAAI,GAAGxB,MAAM,CAAC,CAAD,CAAN,GAAY,CAACe,SAAS,CAACS,IAAV,GAAiB,CAAlB,IAAuBlB,QAAQ,CAAC,CAAD,CAA/B,GAAqCiD,UAA5D;AACA,WAAOlF,cAAc,CAACgD,IAAD,EAAOE,IAAP,EAAaD,IAAb,EAAmBE,IAAnB,EAAyBW,UAAzB,CAArB;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBN,yBAAnB,GAA+C,UAAUlB,MAAV,EAAkBY,CAAlB,EAAqBoB,aAArB,EAAoC;AAC/E,QAAID,SAAS,GAAGlD,YAAhB;AACA,SAAK0E,sBAAL,CAA4BvD,MAAM,CAAC,CAAD,CAAlC,EAAuCA,MAAM,CAAC,CAAD,CAA7C,EAAkDY,CAAlD,EAAqD,KAArD,EAA4DmB,SAA5D;AACA,QAAIZ,IAAI,GAAGY,SAAS,CAAC,CAAD,CAApB;AACA,QAAIV,IAAI,GAAGU,SAAS,CAAC,CAAD,CAApB;AACA,SAAKwB,sBAAL,CAA4BvD,MAAM,CAAC,CAAD,CAAlC,EAAuCA,MAAM,CAAC,CAAD,CAA7C,EAAkDY,CAAlD,EAAqD,IAArD,EAA2DmB,SAA3D;AACA,WAAO3D,uBAAuB,CAAC+C,IAAD,EAAOY,SAAS,CAAC,CAAD,CAAhB,EAAqBV,IAArB,EAA2BU,SAAS,CAAC,CAAD,CAApC,EAAyCC,aAAzC,CAA9B;AACH,GAPD;AAQA;AACJ;AACA;AACA;;;AACIlD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBgC,kBAAnB,GAAwC,UAAUzB,SAAV,EAAqB;AACzD,QAAIjC,MAAM,GAAG,KAAK4C,SAAL,CAAeX,SAAS,CAAC,CAAD,CAAxB,CAAb;AACA,QAAIsB,UAAU,GAAG,KAAKV,aAAL,CAAmBZ,SAAS,CAAC,CAAD,CAA5B,CAAjB;AACA,QAAI3B,QAAQ,GAAGxB,MAAM,CAAC,KAAK0E,WAAL,CAAiBvB,SAAS,CAAC,CAAD,CAA1B,CAAD,EAAiC,KAAKxB,QAAtC,CAArB;AACA,WAAO,CACHT,MAAM,CAAC,CAAD,CAAN,GAAY,CAACiC,SAAS,CAAC,CAAD,CAAT,GAAe,GAAhB,IAAuB3B,QAAQ,CAAC,CAAD,CAA/B,GAAqCiD,UAD9C,EAEHvD,MAAM,CAAC,CAAD,CAAN,GAAY,CAACiC,SAAS,CAAC,CAAD,CAAT,GAAe,GAAhB,IAAuB3B,QAAQ,CAAC,CAAD,CAA/B,GAAqCiD,UAF9C,CAAP;AAIH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvE,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBa,kBAAnB,GAAwC,UAAUN,SAAV,EAAqBE,UAArB,EAAiC;AACrE,QAAInC,MAAM,GAAG,KAAK4C,SAAL,CAAeX,SAAS,CAAC,CAAD,CAAxB,CAAb;AACA,QAAIsB,UAAU,GAAG,KAAKV,aAAL,CAAmBZ,SAAS,CAAC,CAAD,CAA5B,CAAjB;AACA,QAAI3B,QAAQ,GAAGxB,MAAM,CAAC,KAAK0E,WAAL,CAAiBvB,SAAS,CAAC,CAAD,CAA1B,CAAD,EAAiC,KAAKxB,QAAtC,CAArB;AACA,QAAIY,IAAI,GAAGrB,MAAM,CAAC,CAAD,CAAN,GAAYiC,SAAS,CAAC,CAAD,CAAT,GAAe3B,QAAQ,CAAC,CAAD,CAAvB,GAA6BiD,UAApD;AACA,QAAIhC,IAAI,GAAGvB,MAAM,CAAC,CAAD,CAAN,GAAY,CAACiC,SAAS,CAAC,CAAD,CAAT,GAAe,CAAhB,IAAqB3B,QAAQ,CAAC,CAAD,CAA7B,GAAmCiD,UAA1D;AACA,QAAIjC,IAAI,GAAGD,IAAI,GAAGf,QAAQ,CAAC,CAAD,CAAR,GAAciD,UAAhC;AACA,QAAI/B,IAAI,GAAGD,IAAI,GAAGjB,QAAQ,CAAC,CAAD,CAAR,GAAciD,UAAhC;AACA,WAAOlF,cAAc,CAACgD,IAAD,EAAOE,IAAP,EAAaD,IAAb,EAAmBE,IAAnB,EAAyBW,UAAzB,CAArB;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBiC,iCAAnB,GAAuD,UAAUC,UAAV,EAAsBL,UAAtB,EAAkCM,aAAlC,EAAiD;AACpG,WAAO,KAAKC,+BAAL,CAAqCF,UAAU,CAAC,CAAD,CAA/C,EAAoDA,UAAU,CAAC,CAAD,CAA9D,EAAmEL,UAAnE,EAA+E,KAA/E,EAAsFM,aAAtF,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7E,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBoC,+BAAnB,GAAqD,UAAU1B,CAAV,EAAaC,CAAb,EAAgBkB,UAAhB,EAA4BQ,yBAA5B,EAAuDF,aAAvD,EAAsE;AACvH,QAAI/C,CAAC,GAAG,KAAKkD,iBAAL,CAAuBT,UAAvB,CAAR;AACA,QAAIU,KAAK,GAAGV,UAAU,GAAG,KAAKV,aAAL,CAAmB/B,CAAnB,CAAzB;AACA,QAAId,MAAM,GAAG,KAAK4C,SAAL,CAAe9B,CAAf,CAAb;AACA,QAAIR,QAAQ,GAAGxB,MAAM,CAAC,KAAK0E,WAAL,CAAiB1C,CAAjB,CAAD,EAAsB,KAAKL,QAA3B,CAArB;AACA,QAAIyD,OAAO,GAAGH,yBAAyB,GAAG,GAAH,GAAS,CAAhD;AACA,QAAII,OAAO,GAAGJ,yBAAyB,GAAG,GAAH,GAAS,CAAhD;AACA,QAAIK,WAAW,GAAGpD,IAAI,CAACwB,KAAL,CAAW,CAACJ,CAAC,GAAGpC,MAAM,CAAC,CAAD,CAAX,IAAkBuD,UAAlB,GAA+BW,OAA1C,CAAlB;AACA,QAAIG,WAAW,GAAGrD,IAAI,CAACwB,KAAL,CAAW,CAACxC,MAAM,CAAC,CAAD,CAAN,GAAYqC,CAAb,IAAkBkB,UAAlB,GAA+BY,OAA1C,CAAlB;AACA,QAAIjB,UAAU,GAAIe,KAAK,GAAGG,WAAT,GAAwB9D,QAAQ,CAAC,CAAD,CAAjD;AACA,QAAI6C,UAAU,GAAIc,KAAK,GAAGI,WAAT,GAAwB/D,QAAQ,CAAC,CAAD,CAAjD;;AACA,QAAIyD,yBAAJ,EAA+B;AAC3Bb,MAAAA,UAAU,GAAGlC,IAAI,CAACsD,IAAL,CAAUpB,UAAV,IAAwB,CAArC;AACAC,MAAAA,UAAU,GAAGnC,IAAI,CAACsD,IAAL,CAAUnB,UAAV,IAAwB,CAArC;AACH,KAHD,MAIK;AACDD,MAAAA,UAAU,GAAGlC,IAAI,CAACwB,KAAL,CAAWU,UAAX,CAAb;AACAC,MAAAA,UAAU,GAAGnC,IAAI,CAACwB,KAAL,CAAWW,UAAX,CAAb;AACH;;AACD,WAAOxE,uBAAuB,CAACmC,CAAD,EAAIoC,UAAJ,EAAgBC,UAAhB,EAA4BU,aAA5B,CAA9B;AACH,GApBD;AAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7E,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB+B,sBAAnB,GAA4C,UAAUrB,CAAV,EAAaC,CAAb,EAAgBvB,CAAhB,EAAmBiD,yBAAnB,EAA8CF,aAA9C,EAA6D;AACrG,QAAI7D,MAAM,GAAG,KAAK4C,SAAL,CAAe9B,CAAf,CAAb;AACA,QAAIyC,UAAU,GAAG,KAAKV,aAAL,CAAmB/B,CAAnB,CAAjB;AACA,QAAIR,QAAQ,GAAGxB,MAAM,CAAC,KAAK0E,WAAL,CAAiB1C,CAAjB,CAAD,EAAsB,KAAKL,QAA3B,CAArB;AACA,QAAIyD,OAAO,GAAGH,yBAAyB,GAAG,GAAH,GAAS,CAAhD;AACA,QAAII,OAAO,GAAGJ,yBAAyB,GAAG,GAAH,GAAS,CAAhD;AACA,QAAIK,WAAW,GAAGpD,IAAI,CAACwB,KAAL,CAAW,CAACJ,CAAC,GAAGpC,MAAM,CAAC,CAAD,CAAX,IAAkBuD,UAAlB,GAA+BW,OAA1C,CAAlB;AACA,QAAIG,WAAW,GAAGrD,IAAI,CAACwB,KAAL,CAAW,CAACxC,MAAM,CAAC,CAAD,CAAN,GAAYqC,CAAb,IAAkBkB,UAAlB,GAA+BY,OAA1C,CAAlB;AACA,QAAIjB,UAAU,GAAGkB,WAAW,GAAG9D,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAI6C,UAAU,GAAGkB,WAAW,GAAG/D,QAAQ,CAAC,CAAD,CAAvC;;AACA,QAAIyD,yBAAJ,EAA+B;AAC3Bb,MAAAA,UAAU,GAAGlC,IAAI,CAACsD,IAAL,CAAUpB,UAAV,IAAwB,CAArC;AACAC,MAAAA,UAAU,GAAGnC,IAAI,CAACsD,IAAL,CAAUnB,UAAV,IAAwB,CAArC;AACH,KAHD,MAIK;AACDD,MAAAA,UAAU,GAAGlC,IAAI,CAACwB,KAAL,CAAWU,UAAX,CAAb;AACAC,MAAAA,UAAU,GAAGnC,IAAI,CAACwB,KAAL,CAAWW,UAAX,CAAb;AACH;;AACD,WAAOxE,uBAAuB,CAACmC,CAAD,EAAIoC,UAAJ,EAAgBC,UAAhB,EAA4BU,aAA5B,CAA9B;AACH,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7E,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB6C,wBAAnB,GAA8C,UAAUX,UAAV,EAAsB9C,CAAtB,EAAyB+C,aAAzB,EAAwC;AAClF,WAAO,KAAKJ,sBAAL,CAA4BG,UAAU,CAAC,CAAD,CAAtC,EAA2CA,UAAU,CAAC,CAAD,CAArD,EAA0D9C,CAA1D,EAA6D,KAA7D,EAAoE+C,aAApE,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACI7E,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB8C,sBAAnB,GAA4C,UAAUvC,SAAV,EAAqB;AAC7D,WAAO,KAAK7C,YAAL,CAAkB6C,SAAS,CAAC,CAAD,CAA3B,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjD,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB8B,WAAnB,GAAiC,UAAU1C,CAAV,EAAa;AAC1C,QAAI,KAAKT,SAAT,EAAoB;AAChB,aAAO,KAAKA,SAAZ;AACH,KAFD,MAGK;AACD,aAAO,KAAKF,UAAL,CAAgBW,CAAhB,CAAP;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;;;AACI9B,EAAAA,QAAQ,CAAC0C,SAAT,CAAmB+C,gBAAnB,GAAsC,UAAU3D,CAAV,EAAa;AAC/C,QAAI,CAAC,KAAKN,eAAV,EAA2B;AACvB,aAAO,KAAKD,OAAL,GACD,KAAKa,yBAAL,CAA+B,KAAKb,OAApC,EAA6CO,CAA7C,CADC,GAED,IAFN;AAGH,KAJD,MAKK;AACD,aAAO,KAAKN,eAAL,CAAqBM,CAArB,CAAP;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9B,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBsC,iBAAnB,GAAuC,UAAUT,UAAV,EAAsBmB,aAAtB,EAAqC;AACxE,QAAI5D,CAAC,GAAGjC,iBAAiB,CAAC,KAAKO,YAAN,EAAoBmE,UAApB,EAAgCmB,aAAa,IAAI,CAAjD,CAAzB;AACA,WAAOjG,KAAK,CAACqC,CAAD,EAAI,KAAK5B,OAAT,EAAkB,KAAKY,OAAvB,CAAZ;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACId,EAAAA,QAAQ,CAAC0C,SAAT,CAAmBD,oBAAnB,GAA0C,UAAUvB,MAAV,EAAkB;AACxD,QAAIN,MAAM,GAAG,KAAKR,YAAL,CAAkBQ,MAA/B;AACA,QAAI+E,cAAc,GAAG,IAAIC,KAAJ,CAAUhF,MAAV,CAArB;;AACA,SAAK,IAAIkB,CAAC,GAAG,KAAK5B,OAAlB,EAA2B4B,CAAC,GAAGlB,MAA/B,EAAuC,EAAEkB,CAAzC,EAA4C;AACxC6D,MAAAA,cAAc,CAAC7D,CAAD,CAAd,GAAoB,KAAKM,yBAAL,CAA+BlB,MAA/B,EAAuCY,CAAvC,CAApB;AACH;;AACD,SAAKN,eAAL,GAAuBmE,cAAvB;AACH,GAPD;;AAQA,SAAO3F,QAAP;AACH,CArf6B,EAA9B;;AAsfA,eAAeA,QAAf","sourcesContent":["/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange, } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = /** @class */ (function () {\n    /**\n     * @param {Options} options Tile grid options.\n     */\n    function TileGrid(options) {\n        /**\n         * @protected\n         * @type {number}\n         */\n        this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n        /**\n         * @private\n         * @type {!Array<number>}\n         */\n        this.resolutions_ = options.resolutions;\n        assert(isSorted(this.resolutions_, function (a, b) {\n            return b - a;\n        }, true), 17); // `resolutions` must be sorted in descending order\n        // check if we've got a consistent zoom factor and origin\n        var zoomFactor;\n        if (!options.origins) {\n            for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n                if (!zoomFactor) {\n                    zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n                }\n                else {\n                    if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n                        zoomFactor = undefined;\n                        break;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.zoomFactor_ = zoomFactor;\n        /**\n         * @protected\n         * @type {number}\n         */\n        this.maxZoom = this.resolutions_.length - 1;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        this.origin_ = options.origin !== undefined ? options.origin : null;\n        /**\n         * @private\n         * @type {Array<import(\"../coordinate.js\").Coordinate>}\n         */\n        this.origins_ = null;\n        if (options.origins !== undefined) {\n            this.origins_ = options.origins;\n            assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n        }\n        var extent = options.extent;\n        if (extent !== undefined && !this.origin_ && !this.origins_) {\n            this.origin_ = getTopLeft(extent);\n        }\n        assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both\n        /**\n         * @private\n         * @type {Array<number|import(\"../size.js\").Size>}\n         */\n        this.tileSizes_ = null;\n        if (options.tileSizes !== undefined) {\n            this.tileSizes_ = options.tileSizes;\n            assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n        }\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size}\n         */\n        this.tileSize_ =\n            options.tileSize !== undefined\n                ? options.tileSize\n                : !this.tileSizes_\n                    ? DEFAULT_TILE_SIZE\n                    : null;\n        assert((!this.tileSize_ && this.tileSizes_) ||\n            (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = extent !== undefined ? extent : null;\n        /**\n         * @private\n         * @type {Array<import(\"../TileRange.js\").default>}\n         */\n        this.fullTileRanges_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.tmpSize_ = [0, 0];\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.tmpExtent_ = [0, 0, 0, 0];\n        if (options.sizes !== undefined) {\n            this.fullTileRanges_ = options.sizes.map(function (size, z) {\n                var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n                if (extent) {\n                    var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n                    tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n                    tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n                    tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n                    tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n                }\n                return tileRange;\n            }, this);\n        }\n        else if (extent) {\n            this.calculateTileRanges_(extent);\n        }\n    }\n    /**\n     * Call a function with each tile coordinate for a given extent and zoom level.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} zoom Integer zoom level.\n     * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n        var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n        for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n            for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n                callback([zoom, i, j]);\n            }\n        }\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n     * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n     * @return {boolean} Callback succeeded.\n     */\n    TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n        var tileRange, x, y;\n        var tileCoordExtent = null;\n        var z = tileCoord[0] - 1;\n        if (this.zoomFactor_ === 2) {\n            x = tileCoord[1];\n            y = tileCoord[2];\n        }\n        else {\n            tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n        }\n        while (z >= this.minZoom) {\n            if (this.zoomFactor_ === 2) {\n                x = Math.floor(x / 2);\n                y = Math.floor(y / 2);\n                tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n            }\n            else {\n                tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n            }\n            if (callback(z, tileRange)) {\n                return true;\n            }\n            --z;\n        }\n        return false;\n    };\n    /**\n     * Get the extent for this tile grid, if it was configured.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    TileGrid.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the maximum zoom level for the grid.\n     * @return {number} Max zoom.\n     * @api\n     */\n    TileGrid.prototype.getMaxZoom = function () {\n        return this.maxZoom;\n    };\n    /**\n     * Get the minimum zoom level for the grid.\n     * @return {number} Min zoom.\n     * @api\n     */\n    TileGrid.prototype.getMinZoom = function () {\n        return this.minZoom;\n    };\n    /**\n     * Get the origin for the grid at the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {import(\"../coordinate.js\").Coordinate} Origin.\n     * @api\n     */\n    TileGrid.prototype.getOrigin = function (z) {\n        if (this.origin_) {\n            return this.origin_;\n        }\n        else {\n            return this.origins_[z];\n        }\n    };\n    /**\n     * Get the resolution for the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {number} Resolution.\n     * @api\n     */\n    TileGrid.prototype.getResolution = function (z) {\n        return this.resolutions_[z];\n    };\n    /**\n     * Get the list of resolutions for the tile grid.\n     * @return {Array<number>} Resolutions.\n     * @api\n     */\n    TileGrid.prototype.getResolutions = function () {\n        return this.resolutions_;\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n    TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n        if (tileCoord[0] < this.maxZoom) {\n            if (this.zoomFactor_ === 2) {\n                var minX = tileCoord[1] * 2;\n                var minY = tileCoord[2] * 2;\n                return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n            }\n            var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);\n            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n        }\n        return null;\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n    TileGrid.prototype.getTileRangeForTileCoordAndZ = function (tileCoord, z, opt_tileRange) {\n        if (z > this.maxZoom || z < this.minZoom) {\n            return null;\n        }\n        var tileCoordZ = tileCoord[0];\n        var tileCoordX = tileCoord[1];\n        var tileCoordY = tileCoord[2];\n        if (z === tileCoordZ) {\n            return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);\n        }\n        if (this.zoomFactor_) {\n            var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n            var minX = Math.floor(tileCoordX * factor);\n            var minY = Math.floor(tileCoordY * factor);\n            if (z < tileCoordZ) {\n                return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n            }\n            var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n            var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n            return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n        }\n        var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n    };\n    /**\n     * Get the extent for a tile range.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n    TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n        var origin = this.getOrigin(z);\n        var resolution = this.getResolution(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n        var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n        var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n        var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n    };\n    /**\n     * Get a tile range for the given extent and integer zoom level.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n    TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n        var tileCoord = tmpTileCoord;\n        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n        var minX = tileCoord[1];\n        var minY = tileCoord[2];\n        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n        return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n     */\n    TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n        var origin = this.getOrigin(tileCoord[0]);\n        var resolution = this.getResolution(tileCoord[0]);\n        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        return [\n            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n        ];\n    };\n    /**\n     * Get the extent of a tile coordinate.\n     *\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n        var origin = this.getOrigin(tileCoord[0]);\n        var resolution = this.getResolution(tileCoord[0]);\n        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n        var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n        var maxX = minX + tileSize[0] * resolution;\n        var maxY = minY + tileSize[1] * resolution;\n        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n    };\n    /**\n     * Get the tile coordinate for the given map coordinate and resolution.  This\n     * method considers that coordinates that intersect tile boundaries should be\n     * assigned the higher tile coordinate.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    };\n    /**\n     * Note that this method should not be called for resolutions that correspond\n     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {number} resolution Resolution (for a non-integer zoom level).\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n    TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n        var z = this.getZForResolution(resolution);\n        var scale = resolution / this.getResolution(z);\n        var origin = this.getOrigin(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n        var tileCoordX = (scale * xFromOrigin) / tileSize[0];\n        var tileCoordY = (scale * yFromOrigin) / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = Math.ceil(tileCoordX) - 1;\n            tileCoordY = Math.ceil(tileCoordY) - 1;\n        }\n        else {\n            tileCoordX = Math.floor(tileCoordX);\n            tileCoordY = Math.floor(tileCoordY);\n        }\n        return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    };\n    /**\n     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n     * they should have separate implementations.  This method is for integer zoom\n     * levels.  The other method should only be called for resolutions corresponding\n     * to non-integer zoom levels.\n     * @param {number} x Map x coordinate.\n     * @param {number} y Map y coordinate.\n     * @param {number} z Integer zoom level.\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n    TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n        var origin = this.getOrigin(z);\n        var resolution = this.getResolution(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n        var tileCoordX = xFromOrigin / tileSize[0];\n        var tileCoordY = yFromOrigin / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = Math.ceil(tileCoordX) - 1;\n            tileCoordY = Math.ceil(tileCoordY) - 1;\n        }\n        else {\n            tileCoordX = Math.floor(tileCoordX);\n            tileCoordY = Math.floor(tileCoordY);\n        }\n        return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    };\n    /**\n     * Get a tile coordinate given a map coordinate and zoom level.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} z Zoom level.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {number} Tile resolution.\n     */\n    TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n        return this.resolutions_[tileCoord[0]];\n    };\n    /**\n     * Get the tile size for a zoom level. The type of the return value matches the\n     * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n     * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n     * @param {number} z Z.\n     * @return {number|import(\"../size.js\").Size} Tile size.\n     * @api\n     */\n    TileGrid.prototype.getTileSize = function (z) {\n        if (this.tileSize_) {\n            return this.tileSize_;\n        }\n        else {\n            return this.tileSizes_[z];\n        }\n    };\n    /**\n     * @param {number} z Zoom level.\n     * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n     */\n    TileGrid.prototype.getFullTileRange = function (z) {\n        if (!this.fullTileRanges_) {\n            return this.extent_\n                ? this.getTileRangeForExtentAndZ(this.extent_, z)\n                : null;\n        }\n        else {\n            return this.fullTileRanges_[z];\n        }\n    };\n    /**\n     * @param {number} resolution Resolution.\n     * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n     *     If 0, the nearest resolution will be used.\n     *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n     *     nearest lower resolution (higher Z) will be used. Default is 0.\n     *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n     *\n     * For example to change tile Z at the midpoint of zoom levels\n     * ```js\n     * function(value, high, low) {\n     *   return value - low * Math.sqrt(high / low);\n     * }\n     * ```\n     * @return {number} Z.\n     * @api\n     */\n    TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n        var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n        return clamp(z, this.minZoom, this.maxZoom);\n    };\n    /**\n     * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n     * @private\n     */\n    TileGrid.prototype.calculateTileRanges_ = function (extent) {\n        var length = this.resolutions_.length;\n        var fullTileRanges = new Array(length);\n        for (var z = this.minZoom; z < length; ++z) {\n            fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n        }\n        this.fullTileRanges_ = fullTileRanges;\n    };\n    return TileGrid;\n}());\nexport default TileGrid;\n"]},"metadata":{},"sourceType":"module"}