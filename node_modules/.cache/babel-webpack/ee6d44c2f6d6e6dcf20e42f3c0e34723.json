{"ast":null,"code":"/**\n * @module ol/source/ImageArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageArcGISRest = function (_super) {\n  __extends(ImageArcGISRest, _super);\n  /**\n   * @param {Options} [opt_options] Image ArcGIS Rest Options.\n   */\n\n\n  function ImageArcGISRest(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  ImageArcGISRest.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    var params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    extent = extent.slice();\n    var centerX = (extent[0] + extent[2]) / 2;\n    var centerY = (extent[1] + extent[3]) / 2;\n\n    if (this.ratio_ != 1) {\n      var halfWidth = this.ratio_ * getWidth(extent) / 2;\n      var halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    var imageResolution = resolution / pixelRatio; // Compute an integer width and height.\n\n    var width = Math.ceil(getWidth(extent) / imageResolution);\n    var height = Math.ceil(getHeight(extent) / imageResolution); // Modify the extent to match the integer width and height.\n\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageArcGISRest.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    // (if there is no numeric portion the entire projection code must\n    // form a valid ArcGIS SpatialReference definition).\n    var srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    var url = this.url_;\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  };\n\n  return ImageArcGISRest;\n}(ImageSource);\n\nexport default ImageArcGISRest;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/source/ImageArcGISRest.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assert","assign","containsExtent","getHeight","getWidth","ImageArcGISRest","_super","opt_options","_this","options","attributions","imageSmoothing","projection","resolutions","crossOrigin_","crossOrigin","undefined","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","centerX","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageArcGISRest = /** @class */ (function (_super) {\n    __extends(ImageArcGISRest, _super);\n    /**\n     * @param {Options} [opt_options] Image ArcGIS Rest Options.\n     */\n    function ImageArcGISRest(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            imageSmoothing: options.imageSmoothing,\n            projection: options.projection,\n            resolutions: options.resolutions,\n        }) || this;\n        /**\n         * @private\n         * @type {?string}\n         */\n        _this.crossOrigin_ =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        _this.url_ = options.url;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").LoadFunction}\n         */\n        _this.imageLoadFunction_ =\n            options.imageLoadFunction !== undefined\n                ? options.imageLoadFunction\n                : defaultImageLoadFunction;\n        /**\n         * @private\n         * @type {!Object}\n         */\n        _this.params_ = options.params || {};\n        /**\n         * @private\n         * @type {import(\"../Image.js\").default}\n         */\n        _this.image_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.imageSize_ = [0, 0];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n        return _this;\n    }\n    /**\n     * Get the user-provided params, i.e. those passed to the constructor through\n     * the \"params\" option, and possibly updated using the updateParams method.\n     * @return {Object} Params.\n     * @api\n     */\n    ImageArcGISRest.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../Image.js\").default} Single image.\n     */\n    ImageArcGISRest.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        if (this.url_ === undefined) {\n            return null;\n        }\n        resolution = this.findNearestResolution(resolution);\n        pixelRatio = this.hidpi_ ? pixelRatio : 1;\n        var image = this.image_;\n        if (image &&\n            this.renderedRevision_ == this.getRevision() &&\n            image.getResolution() == resolution &&\n            image.getPixelRatio() == pixelRatio &&\n            containsExtent(image.getExtent(), extent)) {\n            return image;\n        }\n        var params = {\n            'F': 'image',\n            'FORMAT': 'PNG32',\n            'TRANSPARENT': true,\n        };\n        assign(params, this.params_);\n        extent = extent.slice();\n        var centerX = (extent[0] + extent[2]) / 2;\n        var centerY = (extent[1] + extent[3]) / 2;\n        if (this.ratio_ != 1) {\n            var halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n            var halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n            extent[0] = centerX - halfWidth;\n            extent[1] = centerY - halfHeight;\n            extent[2] = centerX + halfWidth;\n            extent[3] = centerY + halfHeight;\n        }\n        var imageResolution = resolution / pixelRatio;\n        // Compute an integer width and height.\n        var width = Math.ceil(getWidth(extent) / imageResolution);\n        var height = Math.ceil(getHeight(extent) / imageResolution);\n        // Modify the extent to match the integer width and height.\n        extent[0] = centerX - (imageResolution * width) / 2;\n        extent[2] = centerX + (imageResolution * width) / 2;\n        extent[1] = centerY - (imageResolution * height) / 2;\n        extent[3] = centerY + (imageResolution * height) / 2;\n        this.imageSize_[0] = width;\n        this.imageSize_[1] = height;\n        var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n        this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n        this.renderedRevision_ = this.getRevision();\n        this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n        return this.image_;\n    };\n    /**\n     * Return the image load function of the source.\n     * @return {import(\"../Image.js\").LoadFunction} The image load function.\n     * @api\n     */\n    ImageArcGISRest.prototype.getImageLoadFunction = function () {\n        return this.imageLoadFunction_;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {import(\"../size.js\").Size} size Size.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {Object} params Params.\n     * @return {string} Request URL.\n     * @private\n     */\n    ImageArcGISRest.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n        // ArcGIS Server only wants the numeric portion of the projection ID.\n        // (if there is no numeric portion the entire projection code must\n        // form a valid ArcGIS SpatialReference definition).\n        var srid = projection\n            .getCode()\n            .split(/:(?=\\d+$)/)\n            .pop();\n        params['SIZE'] = size[0] + ',' + size[1];\n        params['BBOX'] = extent.join(',');\n        params['BBOXSR'] = srid;\n        params['IMAGESR'] = srid;\n        params['DPI'] = Math.round(90 * pixelRatio);\n        var url = this.url_;\n        var modifiedUrl = url\n            .replace(/MapServer\\/?$/, 'MapServer/export')\n            .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n        if (modifiedUrl == url) {\n            assert(false, 50); // `options.featureTypes` should be an Array\n        }\n        return appendParams(modifiedUrl, params);\n    };\n    /**\n     * Return the URL used for this ArcGIS source.\n     * @return {string|undefined} URL.\n     * @api\n     */\n    ImageArcGISRest.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * Set the image load function of the source.\n     * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n     * @api\n     */\n    ImageArcGISRest.prototype.setImageLoadFunction = function (imageLoadFunction) {\n        this.image_ = null;\n        this.imageLoadFunction_ = imageLoadFunction;\n        this.changed();\n    };\n    /**\n     * Set the URL to use for requests.\n     * @param {string|undefined} url URL.\n     * @api\n     */\n    ImageArcGISRest.prototype.setUrl = function (url) {\n        if (url != this.url_) {\n            this.url_ = url;\n            this.image_ = null;\n            this.changed();\n        }\n    };\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n    ImageArcGISRest.prototype.updateParams = function (params) {\n        assign(this.params_, params);\n        this.image_ = null;\n        this.changed();\n    };\n    return ImageArcGISRest;\n}(ImageSource));\nexport default ImageArcGISRest;\n"]},"metadata":{},"sourceType":"module"}