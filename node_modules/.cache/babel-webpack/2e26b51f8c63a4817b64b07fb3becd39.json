{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar SilentFlowClient = function (_super) {\n  __extends(SilentFlowClient, _super);\n\n  function SilentFlowClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.acquireCachedToken(request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config);\n              return [2\n              /*return*/\n              , refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n\n\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var requestScopes, environment, authScheme, cacheRecord;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n\n            requestScopes = new ScopeSet(request.scopes || []);\n            environment = request.authority || this.authority.getPreferredCache();\n            authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\n\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (!StringUtils.isEmptyObj(request.claims)) {\n              // Must refresh due to request parameters.\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n\n            return [4\n            /*yield*/\n            , this.generateResultFromCacheRecord(cacheRecord, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _e.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n\n\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return SilentFlowClient;\n}(BaseClient);\n\nexport { SilentFlowClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/SilentFlowClient.js"],"names":["__extends","__awaiter","__generator","BaseClient","ScopeSet","AuthToken","TimeUtils","RefreshTokenClient","ClientAuthError","ClientAuthErrorMessage","ClientConfigurationError","ResponseHandler","CacheOutcome","AuthenticationScheme","StringUtils","SilentFlowClient","_super","configuration","call","prototype","acquireToken","request","e_1","refreshTokenClient","_a","label","trys","push","acquireCachedToken","sent","errorCode","tokenRefreshRequired","code","config","acquireTokenByRefreshToken","_b","_c","_d","requestScopes","environment","authScheme","cacheRecord","_e","createEmptyTokenRequestError","account","createNoAccountInSilentRequestError","scopes","authority","getPreferredCache","authenticationScheme","BEARER","cacheManager","readCacheRecord","authOptions","clientId","forceRefresh","serverTelemetryManager","setCacheOutcome","FORCE_REFRESH","createRefreshRequiredError","accessToken","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","isEmptyObj","claims","incrementCacheHits","generateResultFromCacheRecord","idTokenObj","idToken","secret","cryptoInterface","generateAuthenticationResult","cryptoUtils"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SilentFlowClient = /** @class */ (function (_super) {\r\n    __extends(SilentFlowClient, _super);\r\n    function SilentFlowClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1, refreshTokenClient;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.acquireCachedToken(request)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                            refreshTokenClient = new RefreshTokenClient(this.config);\r\n                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\r\n                        }\r\n                        else {\r\n                            throw e_1;\r\n                        }\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireCachedToken = function (request) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestScopes, environment, authScheme, cacheRecord;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                        if (!request.account) {\r\n                            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                        }\r\n                        requestScopes = new ScopeSet(request.scopes || []);\r\n                        environment = request.authority || this.authority.getPreferredCache();\r\n                        authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\r\n                        if (request.forceRefresh) {\r\n                            // Must refresh due to present force_refresh flag.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!cacheRecord.accessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Must refresh due to expired access_token.\r\n                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n                            // Must refresh due to the refresh_in value.\r\n                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!StringUtils.isEmptyObj(request.claims)) {\r\n                            // Must refresh due to request parameters.\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (cacheRecord.idToken) {\r\n                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SilentFlowClient;\r\n}(BaseClient));\n\nexport { SilentFlowClient };\n"]},"metadata":{},"sourceType":"module"}