{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: /*#__PURE__*/trigger('state', [/*#__PURE__*/state('initial, void, hidden', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), /*#__PURE__*/state('visible', /*#__PURE__*/style({\n    transform: 'scale(1)'\n  })), /*#__PURE__*/transition('* => visible', /*#__PURE__*/animate('200ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), /*#__PURE__*/style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), /*#__PURE__*/transition('* => hidden', /*#__PURE__*/animate('100ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nconst passiveListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nlet _MatTooltipBase = /*#__PURE__*/(() => {\n  class _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n      this._overlay = _overlay;\n      this._elementRef = _elementRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._viewContainerRef = _viewContainerRef;\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this._ariaDescriber = _ariaDescriber;\n      this._focusMonitor = _focusMonitor;\n      this._dir = _dir;\n      this._defaultOptions = _defaultOptions;\n      this._position = 'below';\n      this._disabled = false;\n      this._viewInitialized = false;\n      this._pointerExitEventsInitialized = false;\n      this._viewportMargin = 8;\n      this._cssClassPrefix = 'mat';\n      /** The default delay in ms before showing the tooltip after show is called */\n\n      this.showDelay = this._defaultOptions.showDelay;\n      /** The default delay in ms before hiding the tooltip after hide is called */\n\n      this.hideDelay = this._defaultOptions.hideDelay;\n      /**\n       * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n       * uses a long press gesture to show and hide, however it can conflict with the native browser\n       * gestures. To work around the conflict, Angular Material disables native gestures on the\n       * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n       * elements). The different values for this option configure the touch event handling as follows:\n       * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n       *   browser gestures on particular elements. In particular, it allows text selection on inputs\n       *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n       * - `on` - Enables touch gestures for all elements and disables native\n       *   browser gestures with no exceptions.\n       * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n       *   showing on touch devices.\n       */\n\n      this.touchGestures = 'auto';\n      this._message = '';\n      /** Manually-bound passive event listeners. */\n\n      this._passiveListeners = [];\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Handles the keydown events on the host element.\n       * Needs to be an arrow function so that we can use it in addEventListener.\n       */\n\n      this._handleKeydown = event => {\n        if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n\n          this._ngZone.run(() => this.hide(0));\n        }\n      };\n\n      this._scrollStrategy = scrollStrategy;\n      this._document = _document;\n\n      if (_defaultOptions) {\n        if (_defaultOptions.position) {\n          this.position = _defaultOptions.position;\n        }\n\n        if (_defaultOptions.touchGestures) {\n          this.touchGestures = _defaultOptions.touchGestures;\n        }\n      }\n\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._overlayRef) {\n          this._updatePosition(this._overlayRef);\n        }\n      });\n\n      _ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n      });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n    get position() {\n      return this._position;\n    }\n\n    set position(value) {\n      var _a;\n\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition(this._overlayRef);\n\n          (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /** Disables the display of the tooltip. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n      }\n    }\n    /** The message to be displayed in the tooltip */\n\n\n    get message() {\n      return this._message;\n    }\n\n    set message(value) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n      // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n      // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n      this._message = value != null ? String(value).trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n\n        this._updateTooltipMessage();\n\n        this._ngZone.runOutsideAngular(() => {\n          // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n          // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n          // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n          // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n          Promise.resolve().then(() => {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n          });\n        });\n      }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n\n    get tooltipClass() {\n      return this._tooltipClass;\n    }\n\n    set tooltipClass(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n\n    ngAfterViewInit() {\n      // This needs to happen after view init so the initial values for all inputs have been set.\n      this._viewInitialized = true;\n\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          this._ngZone.run(() => this.hide(0));\n        } else if (origin === 'keyboard') {\n          this._ngZone.run(() => this.show());\n        }\n      });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n\n\n    ngOnDestroy() {\n      const nativeElement = this._elementRef.nativeElement;\n      clearTimeout(this._touchstartTimeout);\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n      this._passiveListeners.forEach(([event, listener]) => {\n        nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n      });\n\n      this._passiveListeners.length = 0;\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n      this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n\n    show(delay = this.showDelay) {\n      if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n        return;\n      }\n\n      const overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n\n      this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n\n    hide(delay = this.hideDelay) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /** Shows/hides the tooltip */\n\n\n    toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n\n\n    _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n\n\n    _createOverlay() {\n      if (this._overlayRef) {\n        return this._overlayRef;\n      }\n\n      const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n      const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n        this._updateCurrentPositionClass(change.connectionPair);\n\n        if (this._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            this._ngZone.run(() => this.hide(0));\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition(this._overlayRef);\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n      this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        var _a;\n\n        return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n      });\n\n      return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n\n\n    _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n\n\n    _updatePosition(overlayRef) {\n      const position = overlayRef.getConfig().positionStrategy;\n\n      const origin = this._getOrigin();\n\n      const overlay = this._getOverlayPosition();\n\n      position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n\n\n    _addOffset(position) {\n      return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n\n\n    _getOrigin() {\n      const isLtr = !this._dir || this._dir.value == 'ltr';\n      const position = this.position;\n      let originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      const {\n        x,\n        y\n      } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n\n\n    _getOverlayPosition() {\n      const isLtr = !this._dir || this._dir.value == 'ltr';\n      const position = this.position;\n      let overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      const {\n        x,\n        y\n      } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n\n    _updateTooltipMessage() {\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n          if (this._tooltipInstance) {\n            this._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /** Updates the tooltip class */\n\n\n    _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /** Inverts an overlay position. */\n\n\n    _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x,\n        y\n      };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n\n\n    _updateCurrentPositionClass(connectionPair) {\n      const {\n        overlayY,\n        originX,\n        originY\n      } = connectionPair;\n      let newPosition; // If the overlay is in the middle along the Y axis,\n      // it means that it's either before or after.\n\n      if (overlayY === 'center') {\n        // Note that since this information is used for styling, we want to\n        // resolve `start` and `end` to their real values, otherwise consumers\n        // would have to remember to do it themselves on each consumption.\n        if (this._dir && this._dir.value === 'rtl') {\n          newPosition = originX === 'end' ? 'left' : 'right';\n        } else {\n          newPosition = originX === 'start' ? 'left' : 'right';\n        }\n      } else {\n        newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n      }\n\n      if (newPosition !== this._currentPosition) {\n        const overlayRef = this._overlayRef;\n\n        if (overlayRef) {\n          const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n          overlayRef.removePanelClass(classPrefix + this._currentPosition);\n          overlayRef.addPanelClass(classPrefix + newPosition);\n        }\n\n        this._currentPosition = newPosition;\n      }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n\n\n    _setupPointerEnterEventsIfNeeded() {\n      // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n      if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n        return;\n      } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n      // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n      if (this._platformSupportsMouseEvents()) {\n        this._passiveListeners.push(['mouseenter', () => {\n          this._setupPointerExitEventsIfNeeded();\n\n          this.show();\n        }]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        this._passiveListeners.push(['touchstart', () => {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          this._setupPointerExitEventsIfNeeded();\n\n          clearTimeout(this._touchstartTimeout);\n          this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n        }]);\n      }\n\n      this._addListeners(this._passiveListeners);\n    }\n\n    _setupPointerExitEventsIfNeeded() {\n      if (this._pointerExitEventsInitialized) {\n        return;\n      }\n\n      this._pointerExitEventsInitialized = true;\n      const exitListeners = [];\n\n      if (this._platformSupportsMouseEvents()) {\n        exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        const touchendListener = () => {\n          clearTimeout(this._touchstartTimeout);\n          this.hide(this._defaultOptions.touchendHideDelay);\n        };\n\n        exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n      }\n\n      this._addListeners(exitListeners);\n\n      this._passiveListeners.push(...exitListeners);\n    }\n\n    _addListeners(listeners) {\n      listeners.forEach(([event, listener]) => {\n        this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n      });\n    }\n\n    _platformSupportsMouseEvents() {\n      return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n\n\n    _wheelListener(event) {\n      if (this._isTooltipVisible()) {\n        const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n\n        const element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n        // won't fire if the user scrolls away using the wheel without moving their cursor. We\n        // work around it by finding the element under the user's cursor and closing the tooltip\n        // if it's not the trigger.\n\n        if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n          this.hide();\n        }\n      }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n\n    _disableNativeGesturesIfNecessary() {\n      const gestures = this.touchGestures;\n\n      if (gestures !== 'off') {\n        const element = this._elementRef.nativeElement;\n        const style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n        // textareas, because it prevents the user from typing into them on iOS Safari.\n\n        if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n          style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n        } // If we have `auto` gestures and the element uses native HTML dragging,\n        // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n        if (gestures === 'on' || !element.draggable) {\n          style.webkitUserDrag = 'none';\n        }\n\n        style.touchAction = 'none';\n        style.webkitTapHighlightColor = 'transparent';\n      }\n    }\n\n  }\n\n  _MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n    return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  _MatTooltipBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatTooltipBase,\n    inputs: {\n      showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n      hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n      touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n      position: [\"matTooltipPosition\", \"position\"],\n      disabled: [\"matTooltipDisabled\", \"disabled\"],\n      message: [\"matTooltip\", \"message\"],\n      tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n    }\n  });\n  return _MatTooltipBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nlet MatTooltip = /*#__PURE__*/(() => {\n  class MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n      super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n      this._tooltipComponent = TooltipComponent;\n    }\n\n  }\n\n  MatTooltip.ɵfac = function MatTooltip_Factory(t) {\n    return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  MatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTooltip,\n    selectors: [[\"\", \"matTooltip\", \"\"]],\n    hostAttrs: [1, \"mat-tooltip-trigger\"],\n    exportAs: [\"matTooltip\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTooltip;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet _TooltipComponentBase = /*#__PURE__*/(() => {\n  class _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n      this._changeDetectorRef = _changeDetectorRef;\n      /** Property watched by the animation framework to show or hide the tooltip */\n\n      this._visibility = 'initial';\n      /** Whether interactions on the page should close the tooltip */\n\n      this._closeOnInteraction = false;\n      /** Subject for notifying that the tooltip has been hidden from the view */\n\n      this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n\n\n    show(delay) {\n      // Cancel the delayed hide if it is scheduled\n      clearTimeout(this._hideTimeoutId); // Body interactions should cancel the tooltip if there is a delay in showing.\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(() => {\n        this._visibility = 'visible';\n        this._showTimeoutId = undefined;\n\n        this._onShow(); // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n\n        this._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n\n\n    hide(delay) {\n      // Cancel the delayed show if it is scheduled\n      clearTimeout(this._showTimeoutId);\n      this._hideTimeoutId = setTimeout(() => {\n        this._visibility = 'hidden';\n        this._hideTimeoutId = undefined; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        this._markForCheck();\n      }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n\n    afterHidden() {\n      return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n\n\n    isVisible() {\n      return this._visibility === 'visible';\n    }\n\n    ngOnDestroy() {\n      clearTimeout(this._showTimeoutId);\n      clearTimeout(this._hideTimeoutId);\n\n      this._onHide.complete();\n    }\n\n    _animationStart() {\n      this._closeOnInteraction = false;\n    }\n\n    _animationDone(event) {\n      const toState = event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n\n\n    _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n\n\n    _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n\n\n    _onShow() {}\n\n  }\n\n  _TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n    return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  _TooltipComponentBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _TooltipComponentBase\n  });\n  return _TooltipComponentBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nlet TooltipComponent = /*#__PURE__*/(() => {\n  class TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n      super(changeDetectorRef);\n      this._breakpointObserver = _breakpointObserver;\n      /** Stream that emits whether the user has a handset-sized display.  */\n\n      this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n\n  }\n\n  TooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n    return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n  };\n\n  TooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TooltipComponent,\n    selectors: [[\"mat-tooltip-component\"]],\n    hostAttrs: [\"aria-hidden\", \"true\"],\n    hostVars: 2,\n    hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 7,\n    consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n    template: function TooltipComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n          return ctx._animationStart();\n        })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n          return ctx._animationDone($event);\n        });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n      }\n    },\n    directives: [ɵngcc7.NgClass],\n    pipes: [ɵngcc7.AsyncPipe],\n    styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matTooltipAnimations.tooltipState]\n    },\n    changeDetection: 0\n  });\n  return TooltipComponent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatTooltipModule = /*#__PURE__*/(() => {\n  class MatTooltipModule {}\n\n  MatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  };\n\n  MatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTooltipModule\n  });\n  MatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n  });\n  return MatTooltipModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/tooltip.js"],"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Input","Optional","ChangeDetectorRef","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","runOutsideAngular","nativeElement","addEventListener","value","_a","_tooltipInstance","show","updatePosition","disabled","_setupPointerEnterEventsIfNeeded","message","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","_MatTooltipBase_Factory","t","ɵɵdirectiveInject","undefined","ɵdir","ɵɵdefineDirective","type","inputs","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","MatTooltip_Factory","selectors","hostAttrs","exportAs","features","ɵɵInheritDefinitionFeature","_TooltipComponentBase","_changeDetectorRef","_visibility","_closeOnInteraction","_onHide","_onShow","_animationStart","_animationDone","toState","markForCheck","_TooltipComponentBase_Factory","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","ɵɵlistener","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","$event","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","directives","NgClass","pipes","AsyncPipe","styles","encapsulation","data","animation","changeDetection","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal ||\n            new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef.outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) { return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\n_MatTooltipBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTooltipBase, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] } });\n_MatTooltipBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined },\n    { type: Directionality },\n    { type: undefined },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n_MatTooltipBase.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined }, { type: ɵngcc5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], exportAs: [\"matTooltip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) { return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _TooltipComponentBase });\n_TooltipComponentBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n"]},"metadata":{},"sourceType":"module"}