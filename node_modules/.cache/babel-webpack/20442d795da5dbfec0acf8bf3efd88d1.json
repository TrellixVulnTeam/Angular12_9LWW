{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 Device code client\r\n */\n\nvar DeviceCodeClient = function (_super) {\n  __extends(DeviceCodeClient, _super);\n\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDeviceCode(request)];\n\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n\n\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes\n        };\n        return [2\n        /*return*/\n        , this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n\n\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2\n            /*return*/\n            , {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n\n\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3\n            /*break*/\n            , 6];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error === Constants.AUTHORIZATION_PENDING)) return [3\n            /*break*/\n            , 4]; // user authorization is pending. Sleep for polling interval and try again\n\n            this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\n            return [4\n            /*yield*/\n            , TimeUtils.delay(pollingIntervalMilli)];\n\n          case 3:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2\n            /*return*/\n            , response.body];\n\n          case 5:\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n\n\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return requestParameters.createQueryString();\n  };\n\n  return DeviceCodeClient;\n}(BaseClient);\n\nexport { DeviceCodeClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/client/DeviceCodeClient.js"],"names":["__extends","__awaiter","__generator","BaseClient","ClientAuthError","RequestParameterBuilder","GrantType","Constants","TimeUtils","ResponseHandler","StringUtils","DeviceCodeClient","_super","configuration","call","prototype","acquireToken","request","deviceCodeResponse","reqTimestamp","response","responseHandler","_a","label","getDeviceCode","sent","deviceCodeCallback","nowSeconds","acquireTokenWithDeviceCode","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryString","headers","thumbprint","createQueryString","createTokenRequestHeaders","scopes","executePostRequestToDeviceCodeEndpoint","deviceCodeEndpoint","userCode","deviceCode","verificationUri","expiresIn","interval","message","_b","networkManager","sendPostRequest","body","user_code","device_code","verification_uri","expires_in","parameterBuilder","addScopes","addClientId","isEmpty","claims","clientCapabilities","length","addClaims","continuePolling","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","requestBody","pollingIntervalMilli","createTokenRequestBody","timeout","undefined","cancel","executePostToTokenEndpoint","tokenEndpoint","AUTHORIZATION_PENDING","info","error_description","delay","createDeviceCodeUnknownError","requestParameters","addGrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,QAAkD,uBAAlD;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,uBAAT,QAAwC,uCAAxC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAkB,UAAUC,MAAV,EAAkB;AACpDZ,EAAAA,SAAS,CAACW,gBAAD,EAAmBC,MAAnB,CAAT;;AACA,WAASD,gBAAT,CAA0BE,aAA1B,EAAyC;AACrC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,aAAlB,KAAoC,IAA3C;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BC,YAA3B,GAA0C,UAAUC,OAAV,EAAmB;AACzD,WAAOhB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIiB,kBAAJ,EAAwBC,YAAxB,EAAsCC,QAAtC,EAAgDC,eAAhD;AACA,aAAOnB,WAAW,CAAC,IAAD,EAAO,UAAUoB,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACC,KAAX;AACI,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKC,aAAL,CAAmBP,OAAnB,CAAd,CAAP;;AACR,eAAK,CAAL;AACIC,YAAAA,kBAAkB,GAAGI,EAAE,CAACG,IAAH,EAArB;AACAR,YAAAA,OAAO,CAACS,kBAAR,CAA2BR,kBAA3B;AACAC,YAAAA,YAAY,GAAGX,SAAS,CAACmB,UAAV,EAAf;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKC,0BAAL,CAAgCX,OAAhC,EAAyCC,kBAAzC,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIE,YAAAA,QAAQ,GAAGE,EAAE,CAACG,IAAH,EAAX;AACAJ,YAAAA,eAAe,GAAG,IAAIZ,eAAJ,CAAoB,KAAKoB,MAAL,CAAYC,WAAZ,CAAwBC,QAA5C,EAAsD,KAAKC,YAA3D,EAAyE,KAAKC,WAA9E,EAA2F,KAAKC,MAAhG,EAAwG,KAAKL,MAAL,CAAYM,iBAApH,EAAuI,KAAKN,MAAL,CAAYO,iBAAnJ,CAAlB,CAFJ,CAGI;;AACAf,YAAAA,eAAe,CAACgB,qBAAhB,CAAsCjB,QAAtC;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcC,eAAe,CAACiB,yBAAhB,CAA0ClB,QAA1C,EAAoD,KAAKmB,SAAzD,EAAoEpB,YAApE,EAAkFF,OAAlF,CAAd,CAAP;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAeK,EAAE,CAACG,IAAH,EAAf,CAAP;AAbZ;AAeH,OAhBiB,CAAlB;AAiBH,KAnBe,CAAhB;AAoBH,GArBD;AAsBA;AACJ;AACA;AACA;;;AACId,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BS,aAA3B,GAA2C,UAAUP,OAAV,EAAmB;AAC1D,WAAOhB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIuC,WAAJ,EAAiBC,OAAjB,EAA0BC,UAA1B;AACA,aAAOxC,WAAW,CAAC,IAAD,EAAO,UAAUoB,EAAV,EAAc;AACnCkB,QAAAA,WAAW,GAAG,KAAKG,iBAAL,CAAuB1B,OAAvB,CAAd;AACAwB,QAAAA,OAAO,GAAG,KAAKG,yBAAL,EAAV;AACAF,QAAAA,UAAU,GAAG;AACTX,UAAAA,QAAQ,EAAE,KAAKF,MAAL,CAAYC,WAAZ,CAAwBC,QADzB;AAETQ,UAAAA,SAAS,EAAEtB,OAAO,CAACsB,SAFV;AAGTM,UAAAA,MAAM,EAAE5B,OAAO,CAAC4B;AAHP,SAAb;AAKA,eAAO,CAAC;AAAE;AAAH,UAAe,KAAKC,sCAAL,CAA4C,KAAKP,SAAL,CAAeQ,kBAA3D,EAA+EP,WAA/E,EAA4FC,OAA5F,EAAqGC,UAArG,CAAf,CAAP;AACH,OATiB,CAAlB;AAUH,KAZe,CAAhB;AAaH,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;;;AACI/B,EAAAA,gBAAgB,CAACI,SAAjB,CAA2B+B,sCAA3B,GAAoE,UAAUC,kBAAV,EAA8BP,WAA9B,EAA2CC,OAA3C,EAAoDC,UAApD,EAAgE;AAChI,WAAOzC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIqB,EAAJ,EAAQ0B,QAAR,EAAkBC,UAAlB,EAA8BC,eAA9B,EAA+CC,SAA/C,EAA0DC,QAA1D,EAAoEC,OAApE;;AACA,aAAOnD,WAAW,CAAC,IAAD,EAAO,UAAUoD,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAAC/B,KAAX;AACI,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKgC,cAAL,CAAoBC,eAApB,CAAoCd,UAApC,EAAgDK,kBAAhD,EAAoE;AACzFU,cAAAA,IAAI,EAAEjB,WADmF;AAEzFC,cAAAA,OAAO,EAAEA;AAFgF,aAApE,CAAd,CAAP;;AAIR,eAAK,CAAL;AACInB,YAAAA,EAAE,GAAIgC,EAAE,CAAC7B,IAAH,EAAD,CAAYgC,IAAjB,EAAuBT,QAAQ,GAAG1B,EAAE,CAACoC,SAArC,EAAgDT,UAAU,GAAG3B,EAAE,CAACqC,WAAhE,EAA6ET,eAAe,GAAG5B,EAAE,CAACsC,gBAAlG,EAAoHT,SAAS,GAAG7B,EAAE,CAACuC,UAAnI,EAA+IT,QAAQ,GAAG9B,EAAE,CAAC8B,QAA7J,EAAuKC,OAAO,GAAG/B,EAAE,CAAC+B,OAApL;AACA,mBAAO,CAAC;AAAE;AAAH,cAAe;AACdL,cAAAA,QAAQ,EAAEA,QADI;AAEdC,cAAAA,UAAU,EAAEA,UAFE;AAGdC,cAAAA,eAAe,EAAEA,eAHH;AAIdC,cAAAA,SAAS,EAAEA,SAJG;AAKdC,cAAAA,QAAQ,EAAEA,QALI;AAMdC,cAAAA,OAAO,EAAEA;AANK,aAAf,CAAP;AAPR;AAgBH,OAjBiB,CAAlB;AAkBH,KApBe,CAAhB;AAqBH,GAtBD;AAuBA;AACJ;AACA;;;AACI1C,EAAAA,gBAAgB,CAACI,SAAjB,CAA2B4B,iBAA3B,GAA+C,UAAU1B,OAAV,EAAmB;AAC9D,QAAI6C,gBAAgB,GAAG,IAAIzD,uBAAJ,EAAvB;AACAyD,IAAAA,gBAAgB,CAACC,SAAjB,CAA2B9C,OAAO,CAAC4B,MAAnC;AACAiB,IAAAA,gBAAgB,CAACE,WAAjB,CAA6B,KAAKnC,MAAL,CAAYC,WAAZ,CAAwBC,QAArD;;AACA,QAAI,CAACrB,WAAW,CAACuD,OAAZ,CAAoBhD,OAAO,CAACiD,MAA5B,CAAD,IAAwC,KAAKrC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAAxB,IAA8C,KAAKtC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAAxB,CAA2CC,MAA3C,GAAoD,CAA9I,EAAiJ;AAC7IN,MAAAA,gBAAgB,CAACO,SAAjB,CAA2BpD,OAAO,CAACiD,MAAnC,EAA2C,KAAKrC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAAnE;AACH;;AACD,WAAOL,gBAAgB,CAACnB,iBAAjB,EAAP;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;;;AACIhC,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BuD,eAA3B,GAA6C,UAAUC,wBAAV,EAAoCC,oBAApC,EAA0DC,uBAA1D,EAAmF;AAC5H,QAAIA,uBAAJ,EAA6B;AACzB,WAAKvC,MAAL,CAAYwC,KAAZ,CAAkB,oEAAlB;AACA,YAAMtE,eAAe,CAACuE,8BAAhB,EAAN;AACH,KAHD,MAIK,IAAIH,oBAAoB,IAAIA,oBAAoB,GAAGD,wBAA/C,IAA2E/D,SAAS,CAACmB,UAAV,KAAyB6C,oBAAxG,EAA8H;AAC/H,WAAKtC,MAAL,CAAYwC,KAAZ,CAAkB,mFAAmFF,oBAArG;AACA,YAAMpE,eAAe,CAACwE,6BAAhB,EAAN;AACH,KAHI,MAIA,IAAIpE,SAAS,CAACmB,UAAV,KAAyB4C,wBAA7B,EAAuD;AACxD,UAAIC,oBAAJ,EAA0B;AACtB,aAAKtC,MAAL,CAAY2C,OAAZ,CAAoB,sIAAsIL,oBAA1J;AACH;;AACD,WAAKtC,MAAL,CAAYwC,KAAZ,CAAkB,6DAA6DH,wBAA/E;AACA,YAAMnE,eAAe,CAAC0E,4BAAhB,EAAN;AACH;;AACD,WAAO,IAAP;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;;;AACInE,EAAAA,gBAAgB,CAACI,SAAjB,CAA2Ba,0BAA3B,GAAwD,UAAUX,OAAV,EAAmBC,kBAAnB,EAAuC;AAC3F,WAAOjB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAI8E,WAAJ,EAAiBtC,OAAjB,EAA0B+B,oBAA1B,EAAgDD,wBAAhD,EAA0ES,oBAA1E,EAAgGtC,UAAhG,EAA4GtB,QAA5G;AACA,aAAOlB,WAAW,CAAC,IAAD,EAAO,UAAUoB,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAACC,KAAX;AACI,eAAK,CAAL;AACIwD,YAAAA,WAAW,GAAG,KAAKE,sBAAL,CAA4BhE,OAA5B,EAAqCC,kBAArC,CAAd;AACAuB,YAAAA,OAAO,GAAG,KAAKG,yBAAL,EAAV;AACA4B,YAAAA,oBAAoB,GAAGvD,OAAO,CAACiE,OAAR,GAAkB1E,SAAS,CAACmB,UAAV,KAAyBV,OAAO,CAACiE,OAAnD,GAA6DC,SAApF;AACAZ,YAAAA,wBAAwB,GAAG/D,SAAS,CAACmB,UAAV,KAAyBT,kBAAkB,CAACiC,SAAvE;AACA6B,YAAAA,oBAAoB,GAAG9D,kBAAkB,CAACkC,QAAnB,GAA8B,IAArD;AACA9B,YAAAA,EAAE,CAACC,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI,gBAAI,CAAC,KAAK+C,eAAL,CAAqBC,wBAArB,EAA+CC,oBAA/C,EAAqEvD,OAAO,CAACmE,MAA7E,CAAL,EAA2F,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AAC3F1C,YAAAA,UAAU,GAAG;AACTX,cAAAA,QAAQ,EAAE,KAAKF,MAAL,CAAYC,WAAZ,CAAwBC,QADzB;AAETQ,cAAAA,SAAS,EAAEtB,OAAO,CAACsB,SAFV;AAGTM,cAAAA,MAAM,EAAE5B,OAAO,CAAC4B;AAHP,aAAb;AAKA,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKwC,0BAAL,CAAgC,KAAK9C,SAAL,CAAe+C,aAA/C,EAA8DP,WAA9D,EAA2EtC,OAA3E,EAAoFC,UAApF,CAAd,CAAP;;AACJ,eAAK,CAAL;AACItB,YAAAA,QAAQ,GAAGE,EAAE,CAACG,IAAH,EAAX;AACA,gBAAI,EAAEL,QAAQ,CAACqC,IAAT,IAAiBrC,QAAQ,CAACqC,IAAT,CAAciB,KAAd,KAAwBnE,SAAS,CAACgF,qBAArD,CAAJ,EAAiF,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP,CAFrF,CAGI;;AACA,iBAAKrD,MAAL,CAAYsD,IAAZ,CAAiBpE,QAAQ,CAACqC,IAAT,CAAcgC,iBAAd,IAAmC,0CAApD;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcjF,SAAS,CAACkF,KAAV,CAAgBV,oBAAhB,CAAd,CAAP;;AACJ,eAAK,CAAL;AACI1D,YAAAA,EAAE,CAACG,IAAH;;AACA,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACJ,eAAK,CAAL;AACI,iBAAKS,MAAL,CAAY2C,OAAZ,CAAoB,wDAApB;AACA,mBAAO,CAAC;AAAE;AAAH,cAAezD,QAAQ,CAACqC,IAAxB,CAAP;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACR,eAAK,CAAL;AACI;AACxB;AACA;AACA;AACwB,iBAAKvB,MAAL,CAAYwC,KAAZ,CAAkB,sCAAlB;AACA,kBAAMtE,eAAe,CAACuF,4BAAhB,EAAN;AAnCR;AAqCH,OAtCiB,CAAlB;AAuCH,KAzCe,CAAhB;AA0CH,GA3CD;AA4CA;AACJ;AACA;AACA;AACA;;;AACIhF,EAAAA,gBAAgB,CAACI,SAAjB,CAA2BkE,sBAA3B,GAAoD,UAAUhE,OAAV,EAAmBC,kBAAnB,EAAuC;AACvF,QAAI0E,iBAAiB,GAAG,IAAIvF,uBAAJ,EAAxB;AACAuF,IAAAA,iBAAiB,CAAC7B,SAAlB,CAA4B9C,OAAO,CAAC4B,MAApC;AACA+C,IAAAA,iBAAiB,CAAC5B,WAAlB,CAA8B,KAAKnC,MAAL,CAAYC,WAAZ,CAAwBC,QAAtD;AACA6D,IAAAA,iBAAiB,CAACC,YAAlB,CAA+BvF,SAAS,CAACwF,iBAAzC;AACAF,IAAAA,iBAAiB,CAACG,aAAlB,CAAgC7E,kBAAkB,CAAC+B,UAAnD;AACA,QAAI+C,aAAa,GAAG/E,OAAO,CAAC+E,aAAR,IAAyB,KAAKnE,MAAL,CAAYoE,eAAZ,CAA4BC,aAA5B,EAA7C;AACAN,IAAAA,iBAAiB,CAACO,gBAAlB,CAAmCH,aAAnC;AACAJ,IAAAA,iBAAiB,CAACQ,aAAlB;AACAR,IAAAA,iBAAiB,CAACS,cAAlB,CAAiC,KAAKxE,MAAL,CAAYyE,WAA7C;AACAV,IAAAA,iBAAiB,CAACW,aAAlB;;AACA,QAAI,KAAKC,sBAAT,EAAiC;AAC7BZ,MAAAA,iBAAiB,CAACa,kBAAlB,CAAqC,KAAKD,sBAA1C;AACH;;AACD,QAAI,CAAC9F,WAAW,CAACgG,UAAZ,CAAuBzF,OAAO,CAACiD,MAA/B,CAAD,IAA2C,KAAKrC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAAxB,IAA8C,KAAKtC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAAxB,CAA2CC,MAA3C,GAAoD,CAAjJ,EAAoJ;AAChJwB,MAAAA,iBAAiB,CAACvB,SAAlB,CAA4BpD,OAAO,CAACiD,MAApC,EAA4C,KAAKrC,MAAL,CAAYC,WAAZ,CAAwBqC,kBAApE;AACH;;AACD,WAAOyB,iBAAiB,CAACjD,iBAAlB,EAAP;AACH,GAlBD;;AAmBA,SAAOhC,gBAAP;AACH,CA9LqC,CA8LpCR,UA9LoC,CAAtC;;AAgMA,SAASQ,gBAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 6];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        // user authorization is pending. Sleep for polling interval and try again\r\n                        this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 5: return [3 /*break*/, 1];\r\n                    case 6:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\nexport { DeviceCodeClient };\n"]},"metadata":{},"sourceType":"module"}