{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupUtils = function () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger; // Properly sets this reference for the unload event.\n\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popup) {\n        popupWindow = popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName) {\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var left = Math.max(0, width / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    var top = Math.max(0, height / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    return window.open(urlNavigate, popupName, \"width=\" + BrowserConstants.POPUP_WIDTH + \", height=\" + BrowserConstants.POPUP_HEIGHT + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n\n\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generatePopupName = function (clientId, request) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n\n  return PopupUtils;\n}();\n\nexport { PopupUtils };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-browser/dist/utils/PopupUtils.js"],"names":["StringUtils","Constants","BrowserAuthError","TemporaryCacheKeys","BrowserConstants","InteractionType","PopupUtils","storageImpl","logger","browserStorage","unloadWindow","bind","prototype","openPopup","urlNavigate","popupName","popup","popupWindow","verbosePii","location","assign","openSizedPopup","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","e","error","message","removeItem","generateCacheKey","INTERACTION_STATUS_KEY","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","width","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","left","Math","max","POPUP_WIDTH","top","POPUP_HEIGHT","open","cleanRequestByInteractionType","Popup","close","preventDefault","cleanPopup","removeEventListener","monitorPopupForSameOrigin","_this","Promise","resolve","reject","intervalId","setInterval","closed","clearInterval","createUserCancelledError","href","EMPTY_STRING","isEmpty","POLL_INTERVAL_MS","generatePopupName","clientId","request","POPUP_NAME_PREFIX","scopes","join","authority","correlationId","generateLogoutPopupName","homeAccountId","account"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, InteractionType } from './BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar PopupUtils = /** @class */ (function () {\r\n    function PopupUtils(storageImpl, logger) {\r\n        this.browserStorage = storageImpl;\r\n        this.logger = logger;\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n    }\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {\r\n        try {\r\n            var popupWindow = void 0;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popup) {\r\n                popupWindow = popup;\r\n                this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\r\n                popupWindow.location.assign(urlNavigate);\r\n            }\r\n            else if (typeof popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\r\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\r\n            }\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n            return popupWindow;\r\n        }\r\n        catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    };\r\n    PopupUtils.openSizedPopup = function (urlNavigate, popupName) {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        var winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        var left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        var top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n        return window.open(urlNavigate, popupName, \"width=\" + BrowserConstants.POPUP_WIDTH + \", height=\" + BrowserConstants.POPUP_HEIGHT + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\r\n    };\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    PopupUtils.prototype.unloadWindow = function (e) {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    };\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    PopupUtils.prototype.cleanPopup = function (popupWindow) {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n    };\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     */\r\n    PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var intervalId = setInterval(function () {\r\n                if (popupWindow.closed) {\r\n                    // Window is closed\r\n                    _this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n                var href = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                }\r\n                catch (e) { }\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n                clearInterval(intervalId);\r\n                resolve();\r\n            }, BrowserConstants.POLL_INTERVAL_MS);\r\n        });\r\n    };\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    PopupUtils.generatePopupName = function (clientId, request) {\r\n        return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\r\n    };\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    PopupUtils.generateLogoutPopupName = function (clientId, request) {\r\n        var homeAccountId = request.account && request.account.homeAccountId;\r\n        return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\r\n    };\r\n    return PopupUtils;\r\n}());\n\nexport { PopupUtils };\n"]},"metadata":{},"sourceType":"module"}