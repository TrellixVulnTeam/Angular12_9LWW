{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { makeStructureNS, pushParseAndPop } from '../xml.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {Array<null>}\n */\n\nvar NAMESPACE_URIS = [null];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\nvar WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'nd': readNd,\n  'tag': readTag\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'node': readNode,\n  'way': readWay\n});\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\n\nvar OSMXML = function (_super) {\n  __extends(OSMXML, _super);\n\n  function OSMXML() {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  OSMXML.prototype.readFeaturesFromNode = function (node, opt_options) {\n    var options = this.getReadOptions(node, opt_options);\n\n    if (node.localName == 'osm') {\n      var state = pushParseAndPop({\n        nodes: {},\n        ways: [],\n        features: []\n      }, PARSERS, node, [options]); // parse nodes in ways\n\n      for (var j = 0; j < state.ways.length; j++) {\n        var values = state.ways[j];\n        /** @type {Array<number>} */\n\n        var flatCoordinates = [];\n\n        for (var i = 0, ii = values.ndrefs.length; i < ii; i++) {\n          var point = state.nodes[values.ndrefs[i]];\n          extend(flatCoordinates, point);\n        }\n\n        var geometry = void 0;\n\n        if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n          // closed way\n          geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n        } else {\n          geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n        }\n\n        transformGeometryWithOptions(geometry, false, options);\n        var feature = new Feature(geometry);\n        feature.setId(values.id);\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n      }\n\n      if (state.features) {\n        return state.features;\n      }\n    }\n\n    return [];\n  };\n\n  return OSMXML;\n}(XMLFeature);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\n\n\nvar NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'tag': readTag\n});\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\nfunction readNode(node, objectStack) {\n  var options = objectStack[0];\n  var state = objectStack[objectStack.length - 1];\n  var id = node.getAttribute('id');\n  /** @type {import(\"../coordinate.js\").Coordinate} */\n\n  var coordinates = [parseFloat(node.getAttribute('lon')), parseFloat(node.getAttribute('lat'))];\n  state.nodes[id] = coordinates;\n  var values = pushParseAndPop({\n    tags: {}\n  }, NODE_PARSERS, node, objectStack);\n\n  if (!isEmpty(values.tags)) {\n    var geometry = new Point(coordinates);\n    transformGeometryWithOptions(geometry, false, options);\n    var feature = new Feature(geometry);\n    feature.setId(id);\n    feature.setProperties(values.tags, true);\n    state.features.push(feature);\n  }\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readWay(node, objectStack) {\n  var id = node.getAttribute('id');\n  var values = pushParseAndPop({\n    id: id,\n    ndrefs: [],\n    tags: {}\n  }, WAY_PARSERS, node, objectStack);\n  var state = objectStack[objectStack.length - 1];\n  state.ways.push(values);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readNd(node, objectStack) {\n  var values = objectStack[objectStack.length - 1];\n  values.ndrefs.push(node.getAttribute('ref'));\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\n\n\nfunction readTag(node, objectStack) {\n  var values = objectStack[objectStack.length - 1];\n  values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\n\nexport default OSMXML;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/format/OSMXML.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Feature","GeometryLayout","LineString","Point","Polygon","XMLFeature","extend","get","getProjection","isEmpty","makeStructureNS","pushParseAndPop","transformGeometryWithOptions","NAMESPACE_URIS","WAY_PARSERS","readNd","readTag","PARSERS","readNode","readWay","OSMXML","_super","_this","dataProjection","readFeaturesFromNode","node","opt_options","options","getReadOptions","localName","state","nodes","ways","features","j","length","values","flatCoordinates","i","ii","ndrefs","point","geometry","XY","feature","setId","id","setProperties","tags","push","NODE_PARSERS","objectStack","getAttribute","coordinates","parseFloat"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnB,QAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;AACJF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASW,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBb,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;AACH,GAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;AACA;;;AACA,OAAOG,OAAP,MAAoB,eAApB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,GAAG,IAAIC,aAAhB,QAAqC,YAArC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,WAAjD;AACA,SAASC,4BAAT,QAA6C,cAA7C;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,CAAC,IAAD,CAArB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAGJ,eAAe,CAACG,cAAD,EAAiB;AAC9C,QAAME,MADwC;AAE9C,SAAOC;AAFuC,CAAjB,CAAjC;AAIA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGP,eAAe,CAACG,cAAD,EAAiB;AAC1C,UAAQK,QADkC;AAE1C,SAAOC;AAFmC,CAAjB,CAA7B;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAkB,UAAUC,MAAV,EAAkB;AAC1CtC,EAAAA,SAAS,CAACqC,MAAD,EAASC,MAAT,CAAT;;AACA,WAASD,MAAT,GAAkB;AACd,QAAIE,KAAK,GAAGD,MAAM,CAAC3B,IAAP,CAAY,IAAZ,KAAqB,IAAjC;AACA;AACR;AACA;;;AACQ4B,IAAAA,KAAK,CAACC,cAAN,GAAuBf,aAAa,CAAC,WAAD,CAApC;AACA,WAAOc,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,MAAM,CAAC5B,SAAP,CAAiBgC,oBAAjB,GAAwC,UAAUC,IAAV,EAAgBC,WAAhB,EAA6B;AACjE,QAAIC,OAAO,GAAG,KAAKC,cAAL,CAAoBH,IAApB,EAA0BC,WAA1B,CAAd;;AACA,QAAID,IAAI,CAACI,SAAL,IAAkB,KAAtB,EAA6B;AACzB,UAAIC,KAAK,GAAGnB,eAAe,CAAC;AACxBoB,QAAAA,KAAK,EAAE,EADiB;AAExBC,QAAAA,IAAI,EAAE,EAFkB;AAGxBC,QAAAA,QAAQ,EAAE;AAHc,OAAD,EAIxBhB,OAJwB,EAIfQ,IAJe,EAIT,CAACE,OAAD,CAJS,CAA3B,CADyB,CAMzB;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACE,IAAN,CAAWG,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,YAAIE,MAAM,GAA0BN,KAAK,CAACE,IAAN,CAAWE,CAAX,CAApC;AACA;;AACA,YAAIG,eAAe,GAAG,EAAtB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGH,MAAM,CAACI,MAAP,CAAcL,MAAnC,EAA2CG,CAAC,GAAGC,EAA/C,EAAmDD,CAAC,EAApD,EAAwD;AACpD,cAAIG,KAAK,GAAGX,KAAK,CAACC,KAAN,CAAYK,MAAM,CAACI,MAAP,CAAcF,CAAd,CAAZ,CAAZ;AACAhC,UAAAA,MAAM,CAAC+B,eAAD,EAAkBI,KAAlB,CAAN;AACH;;AACD,YAAIC,QAAQ,GAAG,KAAK,CAApB;;AACA,YAAIN,MAAM,CAACI,MAAP,CAAc,CAAd,KAAoBJ,MAAM,CAACI,MAAP,CAAcJ,MAAM,CAACI,MAAP,CAAcL,MAAd,GAAuB,CAArC,CAAxB,EAAiE;AAC7D;AACAO,UAAAA,QAAQ,GAAG,IAAItC,OAAJ,CAAYiC,eAAZ,EAA6BpC,cAAc,CAAC0C,EAA5C,EAAgD,CACvDN,eAAe,CAACF,MADuC,CAAhD,CAAX;AAGH,SALD,MAMK;AACDO,UAAAA,QAAQ,GAAG,IAAIxC,UAAJ,CAAemC,eAAf,EAAgCpC,cAAc,CAAC0C,EAA/C,CAAX;AACH;;AACD/B,QAAAA,4BAA4B,CAAC8B,QAAD,EAAW,KAAX,EAAkBf,OAAlB,CAA5B;AACA,YAAIiB,OAAO,GAAG,IAAI5C,OAAJ,CAAY0C,QAAZ,CAAd;AACAE,QAAAA,OAAO,CAACC,KAAR,CAAcT,MAAM,CAACU,EAArB;AACAF,QAAAA,OAAO,CAACG,aAAR,CAAsBX,MAAM,CAACY,IAA7B,EAAmC,IAAnC;AACAlB,QAAAA,KAAK,CAACG,QAAN,CAAegB,IAAf,CAAoBL,OAApB;AACH;;AACD,UAAId,KAAK,CAACG,QAAV,EAAoB;AAChB,eAAOH,KAAK,CAACG,QAAb;AACH;AACJ;;AACD,WAAO,EAAP;AACH,GAtCD;;AAuCA,SAAOb,MAAP;AACH,CAxD2B,CAwD1Bf,UAxD0B,CAA5B;AAyDA;AACA;AACA;AACA;AACA;;;AACA,IAAI6C,YAAY,GAAGxC,eAAe,CAACG,cAAD,EAAiB;AAC/C,SAAOG;AADwC,CAAjB,CAAlC;AAGA;AACA;AACA;AACA;;AACA,SAASE,QAAT,CAAkBO,IAAlB,EAAwB0B,WAAxB,EAAqC;AACjC,MAAIxB,OAAO,GAAsDwB,WAAW,CAAC,CAAD,CAA5E;AACA,MAAIrB,KAAK,GAA0BqB,WAAW,CAACA,WAAW,CAAChB,MAAZ,GAAqB,CAAtB,CAA9C;AACA,MAAIW,EAAE,GAAGrB,IAAI,CAAC2B,YAAL,CAAkB,IAAlB,CAAT;AACA;;AACA,MAAIC,WAAW,GAAG,CACdC,UAAU,CAAC7B,IAAI,CAAC2B,YAAL,CAAkB,KAAlB,CAAD,CADI,EAEdE,UAAU,CAAC7B,IAAI,CAAC2B,YAAL,CAAkB,KAAlB,CAAD,CAFI,CAAlB;AAIAtB,EAAAA,KAAK,CAACC,KAAN,CAAYe,EAAZ,IAAkBO,WAAlB;AACA,MAAIjB,MAAM,GAAGzB,eAAe,CAAC;AACzBqC,IAAAA,IAAI,EAAE;AADmB,GAAD,EAEzBE,YAFyB,EAEXzB,IAFW,EAEL0B,WAFK,CAA5B;;AAGA,MAAI,CAAC1C,OAAO,CAAC2B,MAAM,CAACY,IAAR,CAAZ,EAA2B;AACvB,QAAIN,QAAQ,GAAG,IAAIvC,KAAJ,CAAUkD,WAAV,CAAf;AACAzC,IAAAA,4BAA4B,CAAC8B,QAAD,EAAW,KAAX,EAAkBf,OAAlB,CAA5B;AACA,QAAIiB,OAAO,GAAG,IAAI5C,OAAJ,CAAY0C,QAAZ,CAAd;AACAE,IAAAA,OAAO,CAACC,KAAR,CAAcC,EAAd;AACAF,IAAAA,OAAO,CAACG,aAAR,CAAsBX,MAAM,CAACY,IAA7B,EAAmC,IAAnC;AACAlB,IAAAA,KAAK,CAACG,QAAN,CAAegB,IAAf,CAAoBL,OAApB;AACH;AACJ;AACD;AACA;AACA;AACA;;;AACA,SAASzB,OAAT,CAAiBM,IAAjB,EAAuB0B,WAAvB,EAAoC;AAChC,MAAIL,EAAE,GAAGrB,IAAI,CAAC2B,YAAL,CAAkB,IAAlB,CAAT;AACA,MAAIhB,MAAM,GAAGzB,eAAe,CAAC;AACzBmC,IAAAA,EAAE,EAAEA,EADqB;AAEzBN,IAAAA,MAAM,EAAE,EAFiB;AAGzBQ,IAAAA,IAAI,EAAE;AAHmB,GAAD,EAIzBlC,WAJyB,EAIZW,IAJY,EAIN0B,WAJM,CAA5B;AAKA,MAAIrB,KAAK,GAA0BqB,WAAW,CAACA,WAAW,CAAChB,MAAZ,GAAqB,CAAtB,CAA9C;AACAL,EAAAA,KAAK,CAACE,IAAN,CAAWiB,IAAX,CAAgBb,MAAhB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASrB,MAAT,CAAgBU,IAAhB,EAAsB0B,WAAtB,EAAmC;AAC/B,MAAIf,MAAM,GAA0Be,WAAW,CAACA,WAAW,CAAChB,MAAZ,GAAqB,CAAtB,CAA/C;AACAC,EAAAA,MAAM,CAACI,MAAP,CAAcS,IAAd,CAAmBxB,IAAI,CAAC2B,YAAL,CAAkB,KAAlB,CAAnB;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASpC,OAAT,CAAiBS,IAAjB,EAAuB0B,WAAvB,EAAoC;AAChC,MAAIf,MAAM,GAA0Be,WAAW,CAACA,WAAW,CAAChB,MAAZ,GAAqB,CAAtB,CAA/C;AACAC,EAAAA,MAAM,CAACY,IAAP,CAAYvB,IAAI,CAAC2B,YAAL,CAAkB,GAAlB,CAAZ,IAAsC3B,IAAI,CAAC2B,YAAL,CAAkB,GAAlB,CAAtC;AACH;;AACD,eAAehC,MAAf","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/OSMXML\n */\n// FIXME add typedef for stack state objects\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport XMLFeature from './XMLFeature.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { makeStructureNS, pushParseAndPop } from '../xml.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {Array<null>}\n */\nvar NAMESPACE_URIS = [null];\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar WAY_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'nd': readNd,\n    'tag': readTag,\n});\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'node': readNode,\n    'way': readWay,\n});\n/**\n * @classdesc\n * Feature format for reading data in the\n * [OSMXML format](https://wiki.openstreetmap.org/wiki/OSM_XML).\n *\n * @api\n */\nvar OSMXML = /** @class */ (function (_super) {\n    __extends(OSMXML, _super);\n    function OSMXML() {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection('EPSG:4326');\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {Element} node Node.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    OSMXML.prototype.readFeaturesFromNode = function (node, opt_options) {\n        var options = this.getReadOptions(node, opt_options);\n        if (node.localName == 'osm') {\n            var state = pushParseAndPop({\n                nodes: {},\n                ways: [],\n                features: [],\n            }, PARSERS, node, [options]);\n            // parse nodes in ways\n            for (var j = 0; j < state.ways.length; j++) {\n                var values = /** @type {Object} */ (state.ways[j]);\n                /** @type {Array<number>} */\n                var flatCoordinates = [];\n                for (var i = 0, ii = values.ndrefs.length; i < ii; i++) {\n                    var point = state.nodes[values.ndrefs[i]];\n                    extend(flatCoordinates, point);\n                }\n                var geometry = void 0;\n                if (values.ndrefs[0] == values.ndrefs[values.ndrefs.length - 1]) {\n                    // closed way\n                    geometry = new Polygon(flatCoordinates, GeometryLayout.XY, [\n                        flatCoordinates.length,\n                    ]);\n                }\n                else {\n                    geometry = new LineString(flatCoordinates, GeometryLayout.XY);\n                }\n                transformGeometryWithOptions(geometry, false, options);\n                var feature = new Feature(geometry);\n                feature.setId(values.id);\n                feature.setProperties(values.tags, true);\n                state.features.push(feature);\n            }\n            if (state.features) {\n                return state.features;\n            }\n        }\n        return [];\n    };\n    return OSMXML;\n}(XMLFeature));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nvar NODE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n    'tag': readTag,\n});\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNode(node, objectStack) {\n    var options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\n    var state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    var id = node.getAttribute('id');\n    /** @type {import(\"../coordinate.js\").Coordinate} */\n    var coordinates = [\n        parseFloat(node.getAttribute('lon')),\n        parseFloat(node.getAttribute('lat')),\n    ];\n    state.nodes[id] = coordinates;\n    var values = pushParseAndPop({\n        tags: {},\n    }, NODE_PARSERS, node, objectStack);\n    if (!isEmpty(values.tags)) {\n        var geometry = new Point(coordinates);\n        transformGeometryWithOptions(geometry, false, options);\n        var feature = new Feature(geometry);\n        feature.setId(id);\n        feature.setProperties(values.tags, true);\n        state.features.push(feature);\n    }\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readWay(node, objectStack) {\n    var id = node.getAttribute('id');\n    var values = pushParseAndPop({\n        id: id,\n        ndrefs: [],\n        tags: {},\n    }, WAY_PARSERS, node, objectStack);\n    var state = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    state.ways.push(values);\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readNd(node, objectStack) {\n    var values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    values.ndrefs.push(node.getAttribute('ref'));\n}\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction readTag(node, objectStack) {\n    var values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    values.tags[node.getAttribute('k')] = node.getAttribute('v');\n}\nexport default OSMXML;\n"]},"metadata":{},"sourceType":"module"}