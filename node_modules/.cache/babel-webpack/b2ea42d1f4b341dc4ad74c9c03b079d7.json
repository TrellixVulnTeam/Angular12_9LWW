{"ast":null,"code":"/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution getPointResolution()} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\n\nvar Projection = function () {\n  /**\n   * @param {Options} options Projection options.\n   */\n  function Projection(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").default}\n     */\n\n    this.units_ = options.units;\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n\n    this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n    /**\n     * @private\n     * @type {string}\n     */\n\n    this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.global_ = options.global !== undefined ? options.global : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n\n    this.getPointResolutionFunc_ = options.getPointResolution;\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    this.defaultTileGrid_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n\n\n  Projection.prototype.canWrapX = function () {\n    return this.canWrapX_;\n  };\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n\n\n  Projection.prototype.getCode = function () {\n    return this.code_;\n  };\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  Projection.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").default} Units.\n   * @api\n   */\n\n\n  Projection.prototype.getUnits = function () {\n    return this.units_;\n  };\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n\n\n  Projection.prototype.getMetersPerUnit = function () {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  };\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  Projection.prototype.getWorldExtent = function () {\n    return this.worldExtent_;\n  };\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n\n\n  Projection.prototype.getAxisOrientation = function () {\n    return this.axisOrientation_;\n  };\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n\n\n  Projection.prototype.isGlobal = function () {\n    return this.global_;\n  };\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n\n\n  Projection.prototype.setGlobal = function (global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  };\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n\n\n  Projection.prototype.getDefaultTileGrid = function () {\n    return this.defaultTileGrid_;\n  };\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n\n\n  Projection.prototype.setDefaultTileGrid = function (tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  };\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  Projection.prototype.setExtent = function (extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  };\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n\n\n  Projection.prototype.setWorldExtent = function (worldExtent) {\n    this.worldExtent_ = worldExtent;\n  };\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n\n\n  Projection.prototype.setGetPointResolution = function (func) {\n    this.getPointResolutionFunc_ = func;\n  };\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n\n\n  Projection.prototype.getPointResolutionFunc = function () {\n    return this.getPointResolutionFunc_;\n  };\n\n  return Projection;\n}();\n\nexport default Projection;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/proj/Projection.js"],"names":["METERS_PER_UNIT","Projection","options","code_","code","units_","units","extent_","extent","undefined","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","prototype","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,YAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAkB,YAAY;AACxC;AACJ;AACA;AACI,WAASA,UAAT,CAAoBC,OAApB,EAA6B;AACzB;AACR;AACA;AACA;AACQ,SAAKC,KAAL,GAAaD,OAAO,CAACE,IAArB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,MAAL,GAA2DH,OAAO,CAACI,KAAnE;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKC,OAAL,GAAeL,OAAO,CAACM,MAAR,KAAmBC,SAAnB,GAA+BP,OAAO,CAACM,MAAvC,GAAgD,IAA/D;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKE,YAAL,GACIR,OAAO,CAACS,WAAR,KAAwBF,SAAxB,GAAoCP,OAAO,CAACS,WAA5C,GAA0D,IAD9D;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GACIV,OAAO,CAACW,eAAR,KAA4BJ,SAA5B,GAAwCP,OAAO,CAACW,eAAhD,GAAkE,KADtE;AAEA;AACR;AACA;AACA;;AACQ,SAAKC,OAAL,GAAeZ,OAAO,CAACa,MAAR,KAAmBN,SAAnB,GAA+BP,OAAO,CAACa,MAAvC,GAAgD,KAA/D;AACA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,CAAC,EAAE,KAAKF,OAAL,IAAgB,KAAKP,OAAvB,CAAlB;AACA;AACR;AACA;AACA;;AACQ,SAAKU,uBAAL,GAA+Bf,OAAO,CAACgB,kBAAvC;AACA;AACR;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,IAAxB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBlB,OAAO,C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","sourcesContent":["/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution getPointResolution()} function will be used.\n */\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nvar Projection = /** @class */ (function () {\n    /**\n     * @param {Options} options Projection options.\n     */\n    function Projection(options) {\n        /**\n         * @private\n         * @type {string}\n         */\n        this.code_ = options.code;\n        /**\n         * Units of projected coordinates. When set to `TILE_PIXELS`, a\n         * `this.extent_` and `this.worldExtent_` must be configured properly for each\n         * tile.\n         * @private\n         * @type {import(\"./Units.js\").default}\n         */\n        this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n        /**\n         * Validity extent of the projection in projected coordinates. For projections\n         * with `TILE_PIXELS` units, this is the extent of the tile in\n         * tile pixel space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n         * Extent of the world in EPSG:4326. For projections with\n         * `TILE_PIXELS` units, this is the extent of the tile in\n         * projected coordinate space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.worldExtent_ =\n            options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n         * @private\n         * @type {string}\n         */\n        this.axisOrientation_ =\n            options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.global_ = options.global !== undefined ? options.global : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n         * @private\n         * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n         */\n        this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n         * @private\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        this.defaultTileGrid_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n     * @return {boolean} The projection is suitable for wrapping the x-axis\n     */\n    Projection.prototype.canWrapX = function () {\n        return this.canWrapX_;\n    };\n    /**\n     * Get the code for this projection, e.g. 'EPSG:4326'.\n     * @return {string} Code.\n     * @api\n     */\n    Projection.prototype.getCode = function () {\n        return this.code_;\n    };\n    /**\n     * Get the validity extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the units of this projection.\n     * @return {import(\"./Units.js\").default} Units.\n     * @api\n     */\n    Projection.prototype.getUnits = function () {\n        return this.units_;\n    };\n    /**\n     * Get the amount of meters per unit of this projection.  If the projection is\n     * not configured with `metersPerUnit` or a units identifier, the return is\n     * `undefined`.\n     * @return {number|undefined} Meters.\n     * @api\n     */\n    Projection.prototype.getMetersPerUnit = function () {\n        return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n    };\n    /**\n     * Get the world extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getWorldExtent = function () {\n        return this.worldExtent_;\n    };\n    /**\n     * Get the axis orientation of this projection.\n     * Example values are:\n     * enu - the default easting, northing, elevation.\n     * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n     *     or south orientated transverse mercator.\n     * wnu - westing, northing, up - some planetary coordinate systems have\n     *     \"west positive\" coordinate systems\n     * @return {string} Axis orientation.\n     * @api\n     */\n    Projection.prototype.getAxisOrientation = function () {\n        return this.axisOrientation_;\n    };\n    /**\n     * Is this projection a global projection which spans the whole world?\n     * @return {boolean} Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.isGlobal = function () {\n        return this.global_;\n    };\n    /**\n     * Set if the projection is a global projection which spans the whole world\n     * @param {boolean} global Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.setGlobal = function (global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    };\n    /**\n     * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n     */\n    Projection.prototype.getDefaultTileGrid = function () {\n        return this.defaultTileGrid_;\n    };\n    /**\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n     */\n    Projection.prototype.setDefaultTileGrid = function (tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    };\n    /**\n     * Set the validity extent for this projection.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    Projection.prototype.setExtent = function (extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    };\n    /**\n     * Set the world extent for this projection.\n     * @param {import(\"../extent.js\").Extent} worldExtent World extent\n     *     [minlon, minlat, maxlon, maxlat].\n     * @api\n     */\n    Projection.prototype.setWorldExtent = function (worldExtent) {\n        this.worldExtent_ = worldExtent;\n    };\n    /**\n     * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n     * for this projection.\n     * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n     * @api\n     */\n    Projection.prototype.setGetPointResolution = function (func) {\n        this.getPointResolutionFunc_ = func;\n    };\n    /**\n     * Get the custom point resolution function for this projection (if set).\n     * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n     * resolution function (if set).\n     */\n    Projection.prototype.getPointResolutionFunc = function () {\n        return this.getPointResolutionFunc_;\n    };\n    return Projection;\n}());\nexport default Projection;\n"]},"metadata":{},"sourceType":"module"}