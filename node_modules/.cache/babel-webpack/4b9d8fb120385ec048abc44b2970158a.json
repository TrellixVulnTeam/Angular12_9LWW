{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\n\n\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\n\n\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all'); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\n\n\nfunction getMutableClientRect(element) {\n  const clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\n\n\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\n\n\nclass ParentPositionTracker {\n  constructor(_document, _viewportRuler) {\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    /** Cached positions of the scrollable parent elements. */\n\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n\n\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n\n\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this._viewportRuler.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n\n\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    } // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n    // parent is the `document`, we use the `documentElement`, because IE doesn't support\n    // `contains` on the `document`.\n\n\n    const scrolledParentNode = target === this._document ? target.documentElement : target;\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Creates a deep clone of an element. */\n\n\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase(); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\n\n\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n} // Counter for unique cloned radio button names.\n\n\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\n\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  } // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n\n\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\n\n\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch (_a) {}\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options that can be used to bind a passive event listener. */\n\n\nconst passiveEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\n\nconst activeEventListenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\n\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\n\nconst dragImportantProperties = /*#__PURE__*/new Set([// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\n\nclass DragRef {\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n\n    this._pointerDown = event => {\n      this.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n      if (this._handles.length) {\n        const targetHandle = this._handles.find(handle => {\n          const target = _getEventTarget(event);\n\n          return !!target && (target === handle || handle.contains(target));\n        });\n\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n\n\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      if (!this._hasStartedDragging) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n\n          const container = this._dropContainer;\n\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n\n            return;\n          } // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n\n\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            this._hasStartedDragging = true;\n\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n\n        return;\n      } // We only need the preview dimensions if we have a boundary element.\n\n\n      if (this._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n          this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n        }\n      } // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n\n\n      event.preventDefault();\n\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y); // Apply transform as attribute if dragging and svg element to work for IE\n\n\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n          const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n\n          this._rootElement.setAttribute('transform', appliedTransform);\n        }\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n\n\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /** Whether starting to drag this element is disabled. */\n\n\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n\n      this._toggleNativeDragInteractions();\n\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n    }\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n\n\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n\n\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n\n\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n\n\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n\n    this._toggleNativeDragInteractions(); // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n\n\n    const disabledHandles = new Set();\n\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n\n\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n\n\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n\n\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      });\n\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n\n\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n\n    this._resizeSubscription.unsubscribe();\n\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n\n\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n\n\n  dispose() {\n    this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n\n\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeNode(this._rootElement);\n    }\n\n    removeNode(this._anchor);\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._dragDropRegistry.removeDragItem(this);\n\n    this._removeSubscriptions();\n\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n\n    this._moveEvents.complete();\n\n    this._handles = [];\n\n    this._disabledHandles.clear();\n\n    this._dropContainer = undefined;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n\n\n  isDragging() {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n\n\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n\n\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n\n\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n\n\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n\n\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n\n\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n\n\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n\n\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n\n\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n\n\n  _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n\n    this._pointerUpSubscription.unsubscribe();\n\n    this._scrollSubscription.unsubscribe();\n  }\n  /** Destroys the preview element and its ViewRef. */\n\n\n  _destroyPreview() {\n    if (this._preview) {\n      removeNode(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n\n\n  _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeNode(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n\n\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n\n    this._dragDropRegistry.stopDragging(this);\n\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({\n      source: this\n    });\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n\n        this._cleanupCachedDimensions();\n\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      this._passiveTransform.y = this._activeTransform.y;\n\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition\n        });\n      });\n\n      this._cleanupCachedDimensions();\n\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n\n\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    const dropContainer = this._dropContainer;\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      const anchor = this._anchor = this._anchor || this._document.createComment(''); // Needs to happen before the root element is moved.\n\n\n      const shadowRoot = this._getShadowRoot(); // Insert an anchor node so that we can restore the element's position in the DOM.\n\n\n      parent.insertBefore(anchor, element); // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n\n      this._initialTransform = element.style.transform || ''; // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n\n      this._preview = this._createPreviewElement(); // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n      toggleVisibility(element, false, dragImportantProperties);\n\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n\n      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n\n      this.started.next({\n        source: this\n      }); // Emit before notifying the container.\n\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    } // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n\n\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n\n\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n\n    const target = _getEventTarget(event);\n\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event); // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    } // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n\n\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n\n    this._removeSubscriptions();\n\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    } // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n\n\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(referenceElement, event);\n\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n\n\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._boundaryRect = this._previewRect = this._initialTransform = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      const distance = this._getDragDistance(pointerPosition);\n\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n\n\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n\n\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n\n        this._dropContainer.exit(this); // Notify the new container that the item has entered.\n\n\n        this._dropContainer = newContainer;\n\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer && // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    } // Dragging may have been interrupted as a result of the events above.\n\n\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n  }\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n\n\n  _createPreviewElement() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      const element = this._rootElement;\n      preview = deepCloneNode(element);\n      matchElementSize(preview, element.getBoundingClientRect());\n\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': `${this._config.zIndex || 1000}`\n    }, dragImportantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n\n\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n    this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n\n\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          var _a;\n\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n\n\n        const timeout = setTimeout(handler, duration * 1.5);\n\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n\n\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n\n      this._placeholderRef.detectChanges();\n\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n\n\n  _getPointerPositionInElement(referenceElement, event) {\n    const elementRect = this._rootElement.getBoundingClientRect();\n\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n\n\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n\n\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {\n        x: pickupX,\n        y: pickupY\n      } = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n\n\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n\n\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n\n\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y); // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform && this._rootElement.style.transform != 'none' ? this._rootElement.style.transform : '';\n    } // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n\n\n    this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyPreviewTransform(x, y) {\n    var _a; // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n\n\n    const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.style.transform = combineTransforms(transform, initialTransform);\n  }\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n\n\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n\n\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n\n\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n    const elementRect = this._rootElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n\n\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    } // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n\n\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n\n\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n\n\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = _getEventTarget(event); // ClientRect dimensions are based on the scroll position of the page and its parent node so\n      // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n      // the `document` specifically since IE doesn't support `contains` on it.\n\n\n      if (this._boundaryRect && (target === this._document || target !== this._boundaryElement && target.contains(this._boundaryElement))) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n\n\n  _getViewportScrollPosition() {\n    const cachedPosition = this._parentPositions.positions.get(this._document);\n\n    return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n\n\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n\n    if (previewContainer === 'global') {\n      const documentRef = this._document; // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n\n    return coerceElement(previewContainer);\n  }\n\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\n\n\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\n\n\nfunction removeNode(node) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n/** Determines whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\n\n\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n\n  const wrapper = _document.createElement('div');\n\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\n\n\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\n\n\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\n\n\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\n\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\n\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new Subject();\n    /** Whether an item in the list is being dragged. */\n\n    this._isDragging = false;\n    /** Cache of the dimensions of all the items inside the container. */\n\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occured and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n    /** Draggable items in the container. */\n\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n\n    this._siblings = [];\n    /** Direction in which the list is oriented. */\n\n    this._orientation = 'vertical';\n    /** Connected siblings that currently have a dragged item. */\n\n    this._activeSiblings = new Set();\n    /** Layout direction of the drop list. */\n\n    this._direction = 'ltr';\n    /** Subscription to the window being scrolled. */\n\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n\n    this._verticalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Horizontal direction in which the list is currently scrolling. */\n\n    this._horizontalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n\n        if (this._verticalScrollDirection === 1\n        /* UP */\n        ) {\n          incrementVerticalScroll(node, -scrollStep);\n        } else if (this._verticalScrollDirection === 2\n        /* DOWN */\n        ) {\n          incrementVerticalScroll(node, scrollStep);\n        }\n\n        if (this._horizontalScrollDirection === 1\n        /* LEFT */\n        ) {\n          incrementHorizontalScroll(node, -scrollStep);\n        } else if (this._horizontalScrollDirection === 2\n        /* RIGHT */\n        ) {\n          incrementHorizontalScroll(node, scrollStep);\n        }\n      });\n    };\n\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n\n\n  dispose() {\n    this._stopScrolling();\n\n    this._stopScrollTimers.complete();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n\n    this._activeSiblings.clear();\n\n    this._scrollNode = null;\n\n    this._parentPositions.clear();\n\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n\n\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n\n\n  start() {\n    this._draggingStarted();\n\n    this._notifyReceivingSiblings();\n  }\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n\n\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted(); // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n\n\n    let newIndex;\n\n    if (index == null) {\n      newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n      if (newIndex === -1) {\n        // We use the coordinates of where the item entered the drop\n        // zone to figure out at which index it should be inserted.\n        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n      }\n    } else {\n      newIndex = index;\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n\n\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    } // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n\n\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      const reference = activeDraggables[0].getRootElement();\n      reference.parentNode.insertBefore(placeholder, reference);\n      activeDraggables.unshift(item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n    placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed and also parent rects.\n\n    this._cacheItemPositions();\n\n    this._cacheParentPositions(); // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n\n\n    this._notifyReceivingSiblings();\n\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n\n\n  exit(item) {\n    this._reset();\n\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   */\n\n\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n    this._reset();\n\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint\n    });\n  }\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n\n\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging()); // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._cacheItems();\n      }\n    }\n\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n\n\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n\n\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n\n\n  withOrientation(orientation) {\n    this._orientation = orientation;\n    return this;\n  }\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n\n\n  withScrollableParents(elements) {\n    const element = coerceElement(this.element); // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n\n\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n\n\n  getItemIndex(item) {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    } // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n\n\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n\n\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n\n\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.\n\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n\n\n    const oldOrder = siblings.slice(); // Shuffle the array in place.\n\n    moveItemInArray(siblings, currentIndex, newIndex);\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n      sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    }); // Note that it's important that we do this after the client rects have been adjusted.\n\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n  }\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n\n\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode;\n    let verticalScrollDirection = 0\n    /* NONE */\n    ;\n    let horizontalScrollDirection = 0\n    /* NONE */\n    ; // Check whether we should start scrolling any of the parent containers.\n\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    }); // Otherwise check if we can start scrolling the viewport.\n\n\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n\n      const clientRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n\n\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n\n\n  _draggingStarted() {\n    const styles = coerceElement(this.element).style;\n    this.beforeStarted.next();\n    this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n\n    this._cacheItems();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n\n\n  _cacheParentPositions() {\n    const element = coerceElement(this.element);\n\n    this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n\n\n    this._clientRect = this._parentPositions.positions.get(element).clientRect;\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n\n\n  _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /** Resets the container to its initial state. */\n\n\n  _reset() {\n    this._isDragging = false;\n    const styles = coerceElement(this.element).style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap; // TODO(crisbeto): may have to wait for the animations to finish.\n\n    this._activeDraggables.forEach(item => {\n      var _a;\n\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        const initialTransform = (_a = this._itemPositions.find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n\n    this._stopScrolling();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n\n\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this._orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n\n\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    const index = findIndex(this._itemPositions, ({\n      drag,\n      clientRect\n    }, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ? // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n    return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n  }\n  /** Caches the current items in the list and their positions. */\n\n\n  _cacheItems() {\n    this._activeDraggables = this._draggables.slice();\n\n    this._cacheItemPositions();\n\n    this._cacheParentPositions();\n  }\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n\n\n  _isOverContainer(x, y) {\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n  }\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _canReceive(item, x, y) {\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n\n\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element); // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n\n\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n\n      this._cacheParentPositions();\n\n      this._listenToScrollEvents();\n    }\n  }\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n\n\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n\n    this._viewportScrollSubscription.unsubscribe();\n  }\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n\n\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n\n        if (scrollDifference) {\n          // Since we know the amount that the user has scrolled we can shift all of the\n          // client rectangles ourselves. This is cheaper than re-measuring everything and\n          // we can avoid inconsistent behavior where we might be measuring the element before\n          // its position has changed.\n          this._itemPositions.forEach(({\n            clientRect\n          }) => {\n            adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n          }); // We need two loops for this, because we want all of the cached\n          // positions to be up-to-date before we re-sort the item.\n\n\n          this._itemPositions.forEach(({\n            drag\n          }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n              // We need to re-sort the item manually, because the pointer move\n              // events won't be dispatched while the user is scrolling.\n              drag._sortFromLastPointerPosition();\n            }\n          });\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\n\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n\n\n  _notifyReceivingSiblings() {\n    const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\n\n\nfunction findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementVerticalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollTop += amount;\n  }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementHorizontalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollLeft += amount;\n  }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1\n    /* UP */\n    ;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2\n    /* DOWN */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\n\n\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1\n    /* LEFT */\n    ;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2\n    /* RIGHT */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = 0\n  /* NONE */\n  ;\n  let horizontalScrollDirection = 0\n  /* NONE */\n  ; // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === 1\n    /* UP */\n    ) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1\n        /* UP */\n        ;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2\n      /* DOWN */\n      ;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === 1\n    /* LEFT */\n    ) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1\n        /* LEFT */\n        ;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2\n      /* RIGHT */\n      ;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event options that can be used to bind an active, capturing event. */\n\n\nconst activeCapturingEventOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n\nlet DragDropRegistry = /*#__PURE__*/(() => {\n  class DragDropRegistry {\n    constructor(_ngZone, _document) {\n      this._ngZone = _ngZone;\n      /** Registered drop container instances. */\n\n      this._dropInstances = new Set();\n      /** Registered drag item instances. */\n\n      this._dragInstances = new Set();\n      /** Drag item instances that are currently being dragged. */\n\n      this._activeDragInstances = [];\n      /** Keeps track of the event listeners that we've bound to the `document`. */\n\n      this._globalListeners = new Map();\n      /**\n       * Predicate function to check if an item is being dragged.  Moved out into a property,\n       * because it'll be called a lot and we don't want to create a new function every time.\n       */\n\n      this._draggingPredicate = item => item.isDragging();\n      /**\n       * Emits the `touchmove` or `mousemove` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n\n      this.pointerMove = new Subject();\n      /**\n       * Emits the `touchend` or `mouseup` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n      this.pointerUp = new Subject();\n      /**\n       * Emits when the viewport has been scrolled while the user is dragging an item.\n       * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n       * @breaking-change 13.0.0\n       */\n\n      this.scroll = new Subject();\n      /**\n       * Event listener that will prevent the default browser action while the user is dragging.\n       * @param event Event whose default action should be prevented.\n       */\n\n      this._preventDefaultWhileDragging = event => {\n        if (this._activeDragInstances.length > 0) {\n          event.preventDefault();\n        }\n      };\n      /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n\n\n      this._persistentTouchmoveListener = event => {\n        if (this._activeDragInstances.length > 0) {\n          // Note that we only want to prevent the default action after dragging has actually started.\n          // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n          // but it could be pushed back if the user has set up a drag delay or threshold.\n          if (this._activeDragInstances.some(this._draggingPredicate)) {\n            event.preventDefault();\n          }\n\n          this.pointerMove.next(event);\n        }\n      };\n\n      this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n\n\n    registerDropContainer(drop) {\n      if (!this._dropInstances.has(drop)) {\n        this._dropInstances.add(drop);\n      }\n    }\n    /** Adds a drag item instance to the registry. */\n\n\n    registerDragItem(drag) {\n      this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n      // won't preventDefault on a dynamically-added `touchmove` listener.\n      // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n      if (this._dragInstances.size === 1) {\n        this._ngZone.runOutsideAngular(() => {\n          // The event handler has to be explicitly active,\n          // because newer browsers make it passive by default.\n          this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        });\n      }\n    }\n    /** Removes a drop container from the registry. */\n\n\n    removeDropContainer(drop) {\n      this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n\n\n    removeDragItem(drag) {\n      this._dragInstances.delete(drag);\n\n      this.stopDragging(drag);\n\n      if (this._dragInstances.size === 0) {\n        this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n\n\n    startDragging(drag, event) {\n      // Do not process the same drag twice to avoid memory leaks and redundant listeners\n      if (this._activeDragInstances.indexOf(drag) > -1) {\n        return;\n      }\n\n      this._activeDragInstances.push(drag);\n\n      if (this._activeDragInstances.length === 1) {\n        const isTouchEvent = event.type.startsWith('touch'); // We explicitly bind __active__ listeners here, because newer browsers will default to\n        // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n        // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n        this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        }).set('scroll', {\n          handler: e => this.scroll.next(e),\n          // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n          // the document. See https://github.com/angular/components/issues/17144.\n          options: true\n        }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        }); // We don't have to bind a move event for touch drag sequences, because\n        // we already have a persistent global one bound from `registerDragItem`.\n\n\n        if (!isTouchEvent) {\n          this._globalListeners.set('mousemove', {\n            handler: e => this.pointerMove.next(e),\n            options: activeCapturingEventOptions\n          });\n        }\n\n        this._ngZone.runOutsideAngular(() => {\n          this._globalListeners.forEach((config, name) => {\n            this._document.addEventListener(name, config.handler, config.options);\n          });\n        });\n      }\n    }\n    /** Stops dragging a drag item instance. */\n\n\n    stopDragging(drag) {\n      const index = this._activeDragInstances.indexOf(drag);\n\n      if (index > -1) {\n        this._activeDragInstances.splice(index, 1);\n\n        if (this._activeDragInstances.length === 0) {\n          this._clearGlobalListeners();\n        }\n      }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n\n\n    isDragging(drag) {\n      return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n\n\n    scrolled(shadowRoot) {\n      const streams = [this.scroll];\n\n      if (shadowRoot && shadowRoot !== this._document) {\n        // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n        // because we want to guarantee that the event is bound outside of the `NgZone`. With\n        // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n        streams.push(new Observable(observer => {\n          return this._ngZone.runOutsideAngular(() => {\n            const eventOptions = true;\n\n            const callback = event => {\n              if (this._activeDragInstances.length) {\n                observer.next(event);\n              }\n            };\n\n            shadowRoot.addEventListener('scroll', callback, eventOptions);\n            return () => {\n              shadowRoot.removeEventListener('scroll', callback, eventOptions);\n            };\n          });\n        }));\n      }\n\n      return merge(...streams);\n    }\n\n    ngOnDestroy() {\n      this._dragInstances.forEach(instance => this.removeDragItem(instance));\n\n      this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n\n      this._clearGlobalListeners();\n\n      this.pointerMove.complete();\n      this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n\n\n    _clearGlobalListeners() {\n      this._globalListeners.forEach((config, name) => {\n        this._document.removeEventListener(name, config.handler, config.options);\n      });\n\n      this._globalListeners.clear();\n    }\n\n  }\n\n  DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n    return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  DragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DragDropRegistry_Factory() {\n      return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT));\n    },\n    token: DragDropRegistry,\n    providedIn: \"root\"\n  });\n  return DragDropRegistry;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default configuration to be used when creating a `DragRef`. */\n\n\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n\nlet DragDrop = /*#__PURE__*/(() => {\n  class DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n      this._document = _document;\n      this._ngZone = _ngZone;\n      this._viewportRuler = _viewportRuler;\n      this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n\n\n    createDrag(element, config = DEFAULT_CONFIG) {\n      return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n\n\n    createDropList(element) {\n      return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n\n  }\n\n  DragDrop.ɵfac = function DragDrop_Factory(t) {\n    return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry));\n  };\n\n  DragDrop.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DragDrop_Factory() {\n      return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n    },\n    token: DragDrop,\n    providedIn: \"root\"\n  });\n  return DragDrop;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_DRAG_PARENT = /*#__PURE__*/new InjectionToken('CDK_DRAG_PARENT');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_DROP_LIST_GROUP = /*#__PURE__*/new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n\nlet CdkDropListGroup = /*#__PURE__*/(() => {\n  class CdkDropListGroup {\n    constructor() {\n      /** Drop lists registered inside the group. */\n      this._items = new Set();\n      this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    ngOnDestroy() {\n      this._items.clear();\n    }\n\n  }\n\n  CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n    return new (t || CdkDropListGroup)();\n  };\n\n  CdkDropListGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropListGroup,\n    selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n    inputs: {\n      disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n    },\n    exportAs: [\"cdkDropListGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DROP_LIST_GROUP,\n      useExisting: CdkDropListGroup\n    }])]\n  });\n  return CdkDropListGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\n\n\nconst CDK_DRAG_CONFIG = /*#__PURE__*/new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\n\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique ids for drop zones. */\n\n\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_DROP_LIST = /*#__PURE__*/new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\n\nlet CdkDropList = /*#__PURE__*/(() => {\n  class CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n      this.element = element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._dir = _dir;\n      this._group = _group;\n      /** Emits when the list has been destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Other draggable containers that this container is connected to and into which the\n       * container's items can be transferred. Can either be references to other drop containers,\n       * or their unique IDs.\n       */\n\n      this.connectedTo = [];\n      /**\n       * Unique ID for the drop zone. Can be used as a reference\n       * in the `connectedTo` of another `CdkDropList`.\n       */\n\n      this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n      /**\n       * Function that is used to determine whether an item\n       * is allowed to be moved into a drop container.\n       */\n\n      this.enterPredicate = () => true;\n      /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n      this.sortPredicate = () => true;\n      /** Emits when the user drops an item inside the container. */\n\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits when the user has moved a new drag item into this container.\n       */\n\n      this.entered = new EventEmitter();\n      /**\n       * Emits when the user removes an item from the container\n       * by dragging it into another container.\n       */\n\n      this.exited = new EventEmitter();\n      /** Emits as the user is swapping items while actively dragging. */\n\n      this.sorted = new EventEmitter();\n      /**\n       * Keeps track of the items that are registered with this container. Historically we used to\n       * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n       * well which means that we can't handle cases like dragging the headers of a `mat-table`\n       * correctly. What we do instead is to have the items register themselves with the container\n       * and then we sort them based on their position in the DOM.\n       */\n\n      this._unsortedItems = new Set();\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDropList');\n      }\n\n      this._dropListRef = dragDrop.createDropList(element);\n      this._dropListRef.data = this;\n\n      if (config) {\n        this._assignDefaults(config);\n      }\n\n      this._dropListRef.enterPredicate = (drag, drop) => {\n        return this.enterPredicate(drag.data, drop.data);\n      };\n\n      this._dropListRef.sortPredicate = (index, drag, drop) => {\n        return this.sortPredicate(index, drag.data, drop.data);\n      };\n\n      this._setupInputSyncSubscription(this._dropListRef);\n\n      this._handleEvents(this._dropListRef);\n\n      CdkDropList._dropLists.push(this);\n\n      if (_group) {\n        _group._items.add(this);\n      }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n\n    get disabled() {\n      return this._disabled || !!this._group && this._group.disabled;\n    }\n\n    set disabled(value) {\n      // Usually we sync the directive and ref state right before dragging starts, in order to have\n      // a single point of failure and to avoid having to use setters for everything. `disabled` is\n      // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n      // the user in a disabled state, so we also need to sync it as it's being set.\n      this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n\n\n    addItem(item) {\n      this._unsortedItems.add(item);\n\n      if (this._dropListRef.isDragging()) {\n        this._syncItemsWithRef();\n      }\n    }\n    /** Removes an item from the drop list. */\n\n\n    removeItem(item) {\n      this._unsortedItems.delete(item);\n\n      if (this._dropListRef.isDragging()) {\n        this._syncItemsWithRef();\n      }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n\n\n    getSortedItems() {\n      return Array.from(this._unsortedItems).sort((a, b) => {\n        const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        // tslint:disable-next-line:no-bitwise\n\n\n        return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n      });\n    }\n\n    ngOnDestroy() {\n      const index = CdkDropList._dropLists.indexOf(this);\n\n      if (index > -1) {\n        CdkDropList._dropLists.splice(index, 1);\n      }\n\n      if (this._group) {\n        this._group._items.delete(this);\n      }\n\n      this._unsortedItems.clear();\n\n      this._dropListRef.dispose();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n\n\n    _setupInputSyncSubscription(ref) {\n      if (this._dir) {\n        this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n      }\n\n      ref.beforeStarted.subscribe(() => {\n        const siblings = coerceArray(this.connectedTo).map(drop => {\n          if (typeof drop === 'string') {\n            const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n            if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n              console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n            }\n\n            return correspondingDropList;\n          }\n\n          return drop;\n        });\n\n        if (this._group) {\n          this._group._items.forEach(drop => {\n            if (siblings.indexOf(drop) === -1) {\n              siblings.push(drop);\n            }\n          });\n        } // Note that we resolve the scrollable parents here so that we delay the resolution\n        // as long as possible, ensuring that the element is in its final place in the DOM.\n\n\n        if (!this._scrollableParentsResolved) {\n          const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n\n          this._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents\n          // shouldn't be able to change without the drop list being destroyed.\n\n\n          this._scrollableParentsResolved = true;\n        }\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n        ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n        ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n        ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n      });\n    }\n    /** Handles events from the underlying DropListRef. */\n\n\n    _handleEvents(ref) {\n      ref.beforeStarted.subscribe(() => {\n        this._syncItemsWithRef();\n\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.entered.subscribe(event => {\n        this.entered.emit({\n          container: this,\n          item: event.item.data,\n          currentIndex: event.currentIndex\n        });\n      });\n      ref.exited.subscribe(event => {\n        this.exited.emit({\n          container: this,\n          item: event.item.data\n        });\n\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.sorted.subscribe(event => {\n        this.sorted.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          container: this,\n          item: event.item.data\n        });\n      });\n      ref.dropped.subscribe(event => {\n        this.dropped.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          previousContainer: event.previousContainer.data,\n          container: event.container.data,\n          item: event.item.data,\n          isPointerOverContainer: event.isPointerOverContainer,\n          distance: event.distance,\n          dropPoint: event.dropPoint\n        }); // Mark for check since all of these events run outside of change\n        // detection and we're not guaranteed for something else to have triggered it.\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    /** Assigns the default input values based on a provided config object. */\n\n\n    _assignDefaults(config) {\n      const {\n        lockAxis,\n        draggingDisabled,\n        sortingDisabled,\n        listAutoScrollDisabled,\n        listOrientation\n      } = config;\n      this.disabled = draggingDisabled == null ? false : draggingDisabled;\n      this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n      this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n      this.orientation = listOrientation || 'vertical';\n\n      if (lockAxis) {\n        this.lockAxis = lockAxis;\n      }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n\n\n    _syncItemsWithRef() {\n      this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n\n  }\n\n  CdkDropList.ɵfac = function CdkDropList_Factory(t) {\n    return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n  };\n\n  CdkDropList.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropList,\n    selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n    hostAttrs: [1, \"cdk-drop-list\"],\n    hostVars: 7,\n    hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n      }\n    },\n    inputs: {\n      connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n      id: \"id\",\n      enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n      sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n      disabled: [\"cdkDropListDisabled\", \"disabled\"],\n      sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n      autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n      orientation: [\"cdkDropListOrientation\", \"orientation\"],\n      lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n      data: [\"cdkDropListData\", \"data\"],\n      autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n    },\n    outputs: {\n      dropped: \"cdkDropListDropped\",\n      entered: \"cdkDropListEntered\",\n      exited: \"cdkDropListExited\",\n      sorted: \"cdkDropListSorted\"\n    },\n    exportAs: [\"cdkDropList\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n    {\n      provide: CDK_DROP_LIST_GROUP,\n      useValue: ɵ0\n    }, {\n      provide: CDK_DROP_LIST,\n      useExisting: CdkDropList\n    }])]\n  });\n  /** Keeps track of the drop lists that are currently on the page. */\n\n  CdkDropList._dropLists = [];\n  return CdkDropList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_HANDLE = /*#__PURE__*/new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\n\nlet CdkDragHandle = /*#__PURE__*/(() => {\n  class CdkDragHandle {\n    constructor(element, parentDrag) {\n      this.element = element;\n      /** Emits when the state of the handle has changed. */\n\n      this._stateChanges = new Subject();\n      this._disabled = false;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDragHandle');\n      }\n\n      this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._stateChanges.next(this);\n    }\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n\n  }\n\n  CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n    return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDragHandle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragHandle,\n    selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n    hostAttrs: [1, \"cdk-drag-handle\"],\n    inputs: {\n      disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_HANDLE,\n      useExisting: CdkDragHandle\n    }])]\n  });\n  return CdkDragHandle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PLACEHOLDER = /*#__PURE__*/new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n\nlet CdkDragPlaceholder = /*#__PURE__*/(() => {\n  class CdkDragPlaceholder {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n    return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPlaceholder.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPlaceholder,\n    selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n    inputs: {\n      data: \"data\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PLACEHOLDER,\n      useExisting: CdkDragPlaceholder\n    }])]\n  });\n  return CdkDragPlaceholder;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PREVIEW = /*#__PURE__*/new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n\nlet CdkDragPreview = /*#__PURE__*/(() => {\n  class CdkDragPreview {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n      this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n\n\n    get matchSize() {\n      return this._matchSize;\n    }\n\n    set matchSize(value) {\n      this._matchSize = coerceBooleanProperty(value);\n    }\n\n  }\n\n  CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n    return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPreview.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPreview,\n    selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n    inputs: {\n      matchSize: \"matchSize\",\n      data: \"data\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PREVIEW,\n      useExisting: CdkDragPreview\n    }])]\n  });\n  return CdkDragPreview;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\n\nlet CdkDrag = /*#__PURE__*/(() => {\n  class CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element,\n    /** Droppable container that the draggable is a part of. */\n    dropContainer,\n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n      this.element = element;\n      this.dropContainer = dropContainer;\n      this._ngZone = _ngZone;\n      this._viewContainerRef = _viewContainerRef;\n      this._dir = _dir;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._selfHandle = _selfHandle;\n      this._parentDrag = _parentDrag;\n      this._destroyed = new Subject();\n      /** Emits when the user starts dragging the item. */\n\n      this.started = new EventEmitter();\n      /** Emits when the user has released a drag item, before any animations have started. */\n\n      this.released = new EventEmitter();\n      /** Emits when the user stops dragging an item in the container. */\n\n      this.ended = new EventEmitter();\n      /** Emits when the user has moved the item into a new container. */\n\n      this.entered = new EventEmitter();\n      /** Emits when the user removes the item its container by dragging it into another container. */\n\n      this.exited = new EventEmitter();\n      /** Emits when the user drops the item inside a container. */\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits as the user is dragging the item. Use with caution,\n       * because this event will fire for every pixel that the user has dragged.\n       */\n\n      this.moved = new Observable(observer => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n      this._dragRef = dragDrop.createDrag(element, {\n        dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n        pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n        zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n      });\n      this._dragRef.data = this; // We have to keep track of the drag instances in order to be able to match an element to\n      // a drag instance. We can't go through the global registry of `DragRef`, because the root\n      // element could be different.\n\n      CdkDrag._dragInstances.push(this);\n\n      if (config) {\n        this._assignDefaults(config);\n      } // Note that usually the container is assigned when the drop list is picks up the item, but in\n      // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n      // where there are no items on the first change detection pass, but the items get picked up as\n      // soon as the user triggers another pass by dragging. This is a problem, because the item would\n      // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n      // is too late since the two modes save different kinds of information. We work around it by\n      // assigning the drop container both from here and the list.\n\n\n      if (dropContainer) {\n        this._dragRef._withDropContainer(dropContainer._dropListRef);\n\n        dropContainer.addItem(this);\n      }\n\n      this._syncInputs(this._dragRef);\n\n      this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this.dropContainer && this.dropContainer.disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n      this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n\n\n    getPlaceholderElement() {\n      return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n\n\n    getRootElement() {\n      return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n\n\n    reset() {\n      this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n\n\n    getFreeDragPosition() {\n      return this._dragRef.getFreeDragPosition();\n    }\n\n    ngAfterViewInit() {\n      // Normally this isn't in the zone, but it can cause major performance regressions for apps\n      // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n      this._ngZone.runOutsideAngular(() => {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n          this._updateRootElement();\n\n          this._setupHandlesListener();\n\n          if (this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n          }\n        });\n      });\n    }\n\n    ngOnChanges(changes) {\n      const rootSelectorChange = changes['rootElementSelector'];\n      const positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being\n      // handled in `ngAfterViewInit` where it needs to be deferred.\n\n      if (rootSelectorChange && !rootSelectorChange.firstChange) {\n        this._updateRootElement();\n      } // Skip the first change since it's being handled in `ngAfterViewInit`.\n\n\n      if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n        this._dragRef.setFreeDragPosition(this.freeDragPosition);\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.dropContainer) {\n        this.dropContainer.removeItem(this);\n      }\n\n      const index = CdkDrag._dragInstances.indexOf(this);\n\n      if (index > -1) {\n        CdkDrag._dragInstances.splice(index, 1);\n      } // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._dragRef.dispose();\n      });\n    }\n    /** Syncs the root element with the `DragRef`. */\n\n\n    _updateRootElement() {\n      const element = this.element.nativeElement;\n      const rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n      if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        assertElementNode(rootElement, 'cdkDrag');\n      }\n\n      this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n\n\n    _getBoundaryElement() {\n      const boundary = this.boundaryElement;\n\n      if (!boundary) {\n        return null;\n      }\n\n      if (typeof boundary === 'string') {\n        return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n      }\n\n      const element = coerceElement(boundary);\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element.contains(this.element.nativeElement)) {\n        throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n      }\n\n      return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n\n\n    _syncInputs(ref) {\n      ref.beforeStarted.subscribe(() => {\n        if (!ref.isDragging()) {\n          const dir = this._dir;\n          const dragStartDelay = this.dragStartDelay;\n          const placeholder = this._placeholderTemplate ? {\n            template: this._placeholderTemplate.templateRef,\n            context: this._placeholderTemplate.data,\n            viewContainer: this._viewContainerRef\n          } : null;\n          const preview = this._previewTemplate ? {\n            template: this._previewTemplate.templateRef,\n            context: this._previewTemplate.data,\n            matchSize: this._previewTemplate.matchSize,\n            viewContainer: this._viewContainerRef\n          } : null;\n          ref.disabled = this.disabled;\n          ref.lockAxis = this.lockAxis;\n          ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n          ref.constrainPosition = this.constrainPosition;\n          ref.previewClass = this.previewClass;\n          ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n\n          if (dir) {\n            ref.withDirection(dir.value);\n          }\n        }\n      }); // This only needs to be resolved once.\n\n      ref.beforeStarted.pipe(take(1)).subscribe(() => {\n        var _a, _b; // If we managed to resolve a parent through DI, use it.\n\n\n        if (this._parentDrag) {\n          ref.withParent(this._parentDrag._dragRef);\n          return;\n        } // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n        // the item was projected into another item by something like `ngTemplateOutlet`.\n\n\n        let parent = this.element.nativeElement.parentElement;\n\n        while (parent) {\n          // `classList` needs to be null checked, because IE doesn't have it on some elements.\n          if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n            ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n              return drag.element.nativeElement === parent;\n            })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n            break;\n          }\n\n          parent = parent.parentElement;\n        }\n      });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n\n\n    _handleEvents(ref) {\n      ref.started.subscribe(() => {\n        this.started.emit({\n          source: this\n        }); // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.released.subscribe(() => {\n        this.released.emit({\n          source: this\n        });\n      });\n      ref.ended.subscribe(event => {\n        this.ended.emit({\n          source: this,\n          distance: event.distance,\n          dropPoint: event.dropPoint\n        }); // Since all of these events run outside of change detection,\n        // we need to ensure that everything is marked correctly.\n\n        this._changeDetectorRef.markForCheck();\n      });\n      ref.entered.subscribe(event => {\n        this.entered.emit({\n          container: event.container.data,\n          item: this,\n          currentIndex: event.currentIndex\n        });\n      });\n      ref.exited.subscribe(event => {\n        this.exited.emit({\n          container: event.container.data,\n          item: this\n        });\n      });\n      ref.dropped.subscribe(event => {\n        this.dropped.emit({\n          previousIndex: event.previousIndex,\n          currentIndex: event.currentIndex,\n          previousContainer: event.previousContainer.data,\n          container: event.container.data,\n          isPointerOverContainer: event.isPointerOverContainer,\n          item: this,\n          distance: event.distance,\n          dropPoint: event.dropPoint\n        });\n      });\n    }\n    /** Assigns the default input values based on a provided config object. */\n\n\n    _assignDefaults(config) {\n      const {\n        lockAxis,\n        dragStartDelay,\n        constrainPosition,\n        previewClass,\n        boundaryElement,\n        draggingDisabled,\n        rootElementSelector,\n        previewContainer\n      } = config;\n      this.disabled = draggingDisabled == null ? false : draggingDisabled;\n      this.dragStartDelay = dragStartDelay || 0;\n\n      if (lockAxis) {\n        this.lockAxis = lockAxis;\n      }\n\n      if (constrainPosition) {\n        this.constrainPosition = constrainPosition;\n      }\n\n      if (previewClass) {\n        this.previewClass = previewClass;\n      }\n\n      if (boundaryElement) {\n        this.boundaryElement = boundaryElement;\n      }\n\n      if (rootElementSelector) {\n        this.rootElementSelector = rootElementSelector;\n      }\n\n      if (previewContainer) {\n        this.previewContainer = previewContainer;\n      }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n\n\n    _setupHandlesListener() {\n      // Listen for any newly-added handles.\n      this._handles.changes.pipe(startWith(this._handles), // Sync the new handles with the DragRef.\n      tap(handles => {\n        const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element); // Usually handles are only allowed to be a descendant of the drag element, but if\n        // the consumer defined a different drag root, we should allow the drag element\n        // itself to be a handle too.\n\n        if (this._selfHandle && this.rootElementSelector) {\n          childHandleElements.push(this.element);\n        }\n\n        this._dragRef.withHandles(childHandleElements);\n      }), // Listen if the state of any of the handles changes.\n      switchMap(handles => {\n        return merge(...handles.map(item => {\n          return item._stateChanges.pipe(startWith(item));\n        }));\n      }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n        // Enabled/disable the handle that changed in the DragRef.\n        const dragRef = this._dragRef;\n        const handle = handleInstance.element.nativeElement;\n        handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n      });\n    }\n\n  }\n\n  CdkDrag.ɵfac = function CdkDrag_Factory(t) {\n    return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDrag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDrag,\n    selectors: [[\"\", \"cdkDrag\", \"\"]],\n    contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-drag\"],\n    hostVars: 4,\n    hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n      }\n    },\n    inputs: {\n      disabled: [\"cdkDragDisabled\", \"disabled\"],\n      dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n      lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n      constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n      previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n      boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n      rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n      previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"],\n      data: [\"cdkDragData\", \"data\"],\n      freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"]\n    },\n    outputs: {\n      started: \"cdkDragStarted\",\n      released: \"cdkDragReleased\",\n      ended: \"cdkDragEnded\",\n      entered: \"cdkDragEntered\",\n      exited: \"cdkDragExited\",\n      dropped: \"cdkDragDropped\",\n      moved: \"cdkDragMoved\"\n    },\n    exportAs: [\"cdkDrag\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PARENT,\n      useExisting: CdkDrag\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  CdkDrag._dragInstances = [];\n  return CdkDrag;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Gets the closest ancestor of an element that matches a selector. */\n\n\nfunction getClosestMatchingAncestor(element, selector) {\n  let currentElement = element.parentElement;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) : currentElement.msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet DragDropModule = /*#__PURE__*/(() => {\n  class DragDropModule {}\n\n  DragDropModule.ɵfac = function DragDropModule_Factory(t) {\n    return new (t || DragDropModule)();\n  };\n\n  DragDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DragDropModule\n  });\n  DragDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [DragDrop],\n    imports: [CdkScrollableModule]\n  });\n  return DragDropModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, {\n    declarations: function () {\n      return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    },\n    exports: function () {\n      return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/cdk/fesm2015/drag-drop.js"],"names":["i0","Injectable","NgZone","Inject","InjectionToken","Directive","Input","EventEmitter","ElementRef","ChangeDetectorRef","Optional","SkipSelf","Output","TemplateRef","ViewContainerRef","Self","ContentChildren","ContentChild","NgModule","i1","DOCUMENT","i2","ViewportRuler","ScrollDispatcher","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceArray","coerceNumberProperty","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","startWith","map","take","tap","switchMap","Directionality","ɵngcc0","ɵngcc1","ɵngcc2","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","_viewportRuler","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","withItems","items","previousItems","draggedItems","filter","every","_cacheItems","connectedTo","slice","withOrientation","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","ɵfac","DragDropRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","DragDrop_Factory","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","_unsortedItems","_dropListRef","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","addItem","_syncItemsWithRef","removeItem","getSortedItems","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","ɵɵdirectiveInject","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","outputs","useValue","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","rootElementSelector","getClosestMatchingAncestor","_getBoundaryElement","boundary","dir","_b","childHandleElements","handleInstance","dragRef","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","CdkDrag_HostBindings","ɵɵNgOnChangesFeature","currentElement","matches","msMatchesSelector","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em'\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none' ?\n        (transform + ' ' + initialTransform) :\n        transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position'\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = _getEventTarget(event);\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) :\n            isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    var _a;\n                    if (!event || (_getEventTarget(event) === this._preview &&\n                        event.propertyName === 'transform')) {\n                        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform\n                && this._rootElement.style.transform != 'none'\n                ? this._rootElement.style.transform\n                : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body;\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable\n                .pipe(take(1), takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], previewContainer: [{\n            type: Input,\n            args: ['cdkDragPreviewContainer']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n"]},"metadata":{},"sourceType":"module"}