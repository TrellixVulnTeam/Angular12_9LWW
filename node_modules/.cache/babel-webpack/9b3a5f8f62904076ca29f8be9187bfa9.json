{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\n\nvar UrlString = function () {\n  function UrlString(url) {\n    this._urlString = url;\n\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n\n      return lowerCaseUrl;\n    }\n\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n\n\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    } // Throw error if URI or path segments are not parseable.\n\n\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Throw error if uri is insecure.\n\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Function to remove query string params from url. Returns the new url.\r\n   * @param url\r\n   * @param name\r\n   */\n\n\n  UrlString.prototype.urlRemoveQueryStringParameter = function (name) {\n    var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\n    this._urlString = this.urlString.replace(regex, \"\"); // name=value&\n\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\n    this._urlString = this.urlString.replace(regex, \"\"); // name=value\n\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\n    this._urlString = this.urlString.replace(regex, \"\");\n    return this.urlString;\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n\n\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n\n\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n\n\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n\n\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n\n\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"); // If url string does not match regEx, we throw an error\n\n    var match = this.urlString.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    } // Url component object\n\n\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n\n    urlComponents.PathSegments = pathSegments;\n\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n\n    return urlComponents;\n  };\n\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\n    }\n\n    return match[2];\n  };\n\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n\n\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n\n    return \"\";\n  };\n\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n\n\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    } // Strip the # symbol if present\n\n\n    var parsedHash = UrlString.parseHash(hash); // If # symbol was not present, above will return empty string, so give original hash value\n\n    var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash); // Check if deserialization didn't work\n\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n\n    return deserializedHash;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n\n\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils.isEmpty(hash)) {\n      return false;\n    }\n\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n\n  return UrlString;\n}();\n\nexport { UrlString };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/url/UrlString.js"],"names":["ClientConfigurationError","ClientAuthError","StringUtils","AADAuthorityConstants","Constants","UrlString","url","_urlString","isEmpty","createUrlEmptyError","getHash","canonicalizeUri","Object","defineProperty","prototype","get","enumerable","configurable","lowerCaseUrl","toLowerCase","endsWith","slice","validateAsUri","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","urlRemoveQueryStringParameter","name","regex","RegExp","replace","appendQueryString","queryString","indexOf","removeHashFromUrl","split","replaceTenantPath","tenantId","urlObject","pathArray","length","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","getDomainFromUrl","getAbsoluteUrl","relativeUrl","baseUrl","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","join","getDeserializedHash","hash","parsedHash","deserializedHash","queryStringToObject","createHashNotDeserializedError","JSON","stringify","hashContainsKnownProperties","parameters","code","error_description","error","state"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            var lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Function to remove query string params from url. Returns the new url.\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlString.prototype.urlRemoveQueryStringParameter = function (name) {\r\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        return this.urlString;\r\n    };\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    UrlString.appendQueryString = function (url, queryString) {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\r\n    };\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    UrlString.removeHashFromUrl = function (url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        return UrlString.parseHash(this.urlString);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    };\r\n    UrlString.getDomainFromUrl = function (url) {\r\n        var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        var match = url.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\r\n        }\r\n        return match[2];\r\n    };\r\n    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            var url = new UrlString(baseUrl);\r\n            var baseComponents = url.getUrlComponents();\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        return relativeUrl;\r\n    };\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    UrlString.parseHash = function (hashString) {\r\n        var hashIndex1 = hashString.indexOf(\"#\");\r\n        var hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return \"\";\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedHash = function (hash) {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        var parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (hash) {\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return false;\r\n        }\r\n        var parameters = UrlString.getDeserializedHash(hash);\r\n        return !!(parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\nexport { UrlString };\n"]},"metadata":{},"sourceType":"module"}