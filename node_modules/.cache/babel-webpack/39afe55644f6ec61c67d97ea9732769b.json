{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\n\nvar RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\n\nvar PkceGenerator = function () {\n  function PkceGenerator(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n\n\n  PkceGenerator.prototype.generateCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var codeVerifier, codeChallenge;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            codeVerifier = this.generateCodeVerifier();\n            return [4\n            /*yield*/\n            , this.generateCodeChallengeFromVerifier(codeVerifier)];\n\n          case 1:\n            codeChallenge = _a.sent();\n            return [2\n            /*return*/\n            , {\n              verifier: codeVerifier,\n              challenge: codeChallenge\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n\n\n  PkceGenerator.prototype.generateCodeVerifier = function () {\n    try {\n      // Generate random values as utf-8\n      var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer); // encode verifier as base64\n\n      var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  };\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n\n\n  PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pkceHashedCodeVerifier, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.cryptoObj.sha256Digest(pkceCodeVerifier)];\n\n          case 1:\n            pkceHashedCodeVerifier = _a.sent(); // encode hash as base64\n\n            return [2\n            /*return*/\n            , this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\n\n          case 2:\n            e_1 = _a.sent();\n            throw BrowserAuthError.createPkceNotGeneratedError(e_1);\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PkceGenerator;\n}();\n\nexport { PkceGenerator };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.js"],"names":["__awaiter","__generator","BrowserAuthError","Base64Encode","RANDOM_BYTE_ARR_LENGTH","PkceGenerator","cryptoObj","base64Encode","prototype","generateCodes","codeVerifier","codeChallenge","_a","label","generateCodeVerifier","generateCodeChallengeFromVerifier","sent","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","createPkceNotGeneratedError","pkceCodeVerifier","pkceHashedCodeVerifier","e_1","trys","push","sha256Digest"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Constant byte array length\r\nvar RANDOM_BYTE_ARR_LENGTH = 32;\r\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\r\nvar PkceGenerator = /** @class */ (function () {\r\n    function PkceGenerator(cryptoObj) {\r\n        this.base64Encode = new Base64Encode();\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    /**\r\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n     */\r\n    PkceGenerator.prototype.generateCodes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var codeVerifier, codeChallenge;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        codeVerifier = this.generateCodeVerifier();\r\n                        return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];\r\n                    case 1:\r\n                        codeChallenge = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                verifier: codeVerifier,\r\n                                challenge: codeChallenge\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a random 32 byte buffer and returns the base64\r\n     * encoded string to be used as a PKCE Code Verifier\r\n     */\r\n    PkceGenerator.prototype.generateCodeVerifier = function () {\r\n        try {\r\n            // Generate random values as utf-8\r\n            var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // encode verifier as base64\r\n            var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\r\n            return pkceCodeVerifierB64;\r\n        }\r\n        catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a base64 encoded PKCE Code Challenge string from the\r\n     * hash created from the PKCE Code Verifier supplied\r\n     */\r\n    PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pkceHashedCodeVerifier, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];\r\n                    case 1:\r\n                        pkceHashedCodeVerifier = _a.sent();\r\n                        // encode hash as base64\r\n                        return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        throw BrowserAuthError.createPkceNotGeneratedError(e_1);\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PkceGenerator;\r\n}());\n\nexport { PkceGenerator };\n"]},"metadata":{},"sourceType":"module"}