{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient = function (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient);\n\nexport { UsernamePasswordClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/UsernamePasswordClient.js"],"names":["__extends","__awaiter","__generator","BaseClient","ResponseHandler","RequestParameterBuilder","GrantType","StringUtils","TimeUtils","CcsCredentialType","UsernamePasswordClient","_super","configuration","call","prototype","acquireToken","request","reqTimestamp","response","responseHandler","tokenResponse","_a","label","logger","info","nowSeconds","executeTokenRequest","authority","sent","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","thumbprint","requestBody","headers","canonicalAuthority","scopes","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addGrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, headers;\r\n            return __generator(this, function (_a) {\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes\r\n                };\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: CcsCredentialType.UPN\r\n                });\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\nexport { UsernamePasswordClient };\n"]},"metadata":{},"sourceType":"module"}