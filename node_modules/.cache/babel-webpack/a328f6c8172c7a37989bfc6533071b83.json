{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\n\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] * HIT_DETECT_RESOLUTION;\n  var height = size[1] * HIT_DETECT_RESOLUTION;\n  var context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  var featureCount = features.length; // Stretch hit detection index to use the whole available color range\n\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n\n    if (!styleFunction) {\n      continue;\n    }\n\n    var styles = featureStyleFunction(feature, resolution);\n\n    if (!styles) {\n      continue;\n    }\n\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n\n    var index = i * indexFactor;\n    var color = '#' + ('000000' + index.toString(16)).slice(-6);\n\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var geometry = originalStyle.getGeometryFunction()(feature);\n\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n\n      if (fill) {\n        fill.setColor(color);\n      }\n\n      var stroke = style.getStroke();\n\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n\n      if (image && image.getOpacity() !== 0) {\n        var imgSize = image.getImageSize();\n\n        if (!imgSize) {\n          continue;\n        }\n\n        var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        var img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: IconAnchorUnits.PIXELS,\n          anchorYUnits: IconAnchorUnits.PIXELS,\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n\n      var zIndex = style.getZIndex() || 0;\n      var byGeometryType = featuresByZIndex[zIndex];\n\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType[GeometryType.POLYGON] = [];\n        byGeometryType[GeometryType.CIRCLE] = [];\n        byGeometryType[GeometryType.LINE_STRING] = [];\n        byGeometryType[GeometryType.POINT] = [];\n      }\n\n      byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n    }\n  }\n\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);\n\n  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n\n    for (var type in byGeometryType) {\n      var geomAndStyle = byGeometryType[type];\n\n      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\n\nexport function hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n\n  if (imageData) {\n    var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION); // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n\n    var index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n\n  return resultFeatures;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/render/canvas/hitdetect.js"],"names":["CanvasImmediateRenderer","GeometryType","IconAnchorUnits","Icon","clamp","createCanvasContext2D","intersects","numberSafeCompareFunction","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","slice","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","getOpacity","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","PIXELS","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","POLYGON","CIRCLE","LINE_STRING","POINT","getType","replace","push","zIndexKeys","Object","keys","map","Number","sort","ii","type","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n    var width = size[0] * HIT_DETECT_RESOLUTION;\n    var height = size[1] * HIT_DETECT_RESOLUTION;\n    var context = createCanvasContext2D(width, height);\n    context.imageSmoothingEnabled = false;\n    var canvas = context.canvas;\n    var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n    var featureCount = features.length;\n    // Stretch hit detection index to use the whole available color range\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n    var featuresByZIndex = {};\n    for (var i = 1; i <= featureCount; ++i) {\n        var feature = features[i - 1];\n        var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n        if (!styleFunction) {\n            continue;\n        }\n        var styles = featureStyleFunction(feature, resolution);\n        if (!styles) {\n            continue;\n        }\n        if (!Array.isArray(styles)) {\n            styles = [styles];\n        }\n        var index = i * indexFactor;\n        var color = '#' + ('000000' + index.toString(16)).slice(-6);\n        for (var j = 0, jj = styles.length; j < jj; ++j) {\n            var originalStyle = styles[j];\n            var geometry = originalStyle.getGeometryFunction()(feature);\n            if (!geometry || !intersects(extent, geometry.getExtent())) {\n                continue;\n            }\n            var style = originalStyle.clone();\n            var fill = style.getFill();\n            if (fill) {\n                fill.setColor(color);\n            }\n            var stroke = style.getStroke();\n            if (stroke) {\n                stroke.setColor(color);\n                stroke.setLineDash(null);\n            }\n            style.setText(undefined);\n            var image = originalStyle.getImage();\n            if (image && image.getOpacity() !== 0) {\n                var imgSize = image.getImageSize();\n                if (!imgSize) {\n                    continue;\n                }\n                var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, { alpha: false });\n                var img = imgContext.canvas;\n                imgContext.fillStyle = color;\n                imgContext.fillRect(0, 0, img.width, img.height);\n                style.setImage(new Icon({\n                    img: img,\n                    imgSize: imgSize,\n                    anchor: image.getAnchor(),\n                    anchorXUnits: IconAnchorUnits.PIXELS,\n                    anchorYUnits: IconAnchorUnits.PIXELS,\n                    offset: image.getOrigin(),\n                    opacity: 1,\n                    size: image.getSize(),\n                    scale: image.getScale(),\n                    rotation: image.getRotation(),\n                    rotateWithView: image.getRotateWithView(),\n                }));\n            }\n            var zIndex = style.getZIndex() || 0;\n            var byGeometryType = featuresByZIndex[zIndex];\n            if (!byGeometryType) {\n                byGeometryType = {};\n                featuresByZIndex[zIndex] = byGeometryType;\n                byGeometryType[GeometryType.POLYGON] = [];\n                byGeometryType[GeometryType.CIRCLE] = [];\n                byGeometryType[GeometryType.LINE_STRING] = [];\n                byGeometryType[GeometryType.POINT] = [];\n            }\n            byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n    }\n    var zIndexKeys = Object.keys(featuresByZIndex)\n        .map(Number)\n        .sort(numberSafeCompareFunction);\n    for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n        var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n        for (var type in byGeometryType) {\n            var geomAndStyle = byGeometryType[type];\n            for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n                renderer.setStyle(geomAndStyle[j + 1]);\n                for (var k = 0, kk = transforms.length; k < kk; ++k) {\n                    renderer.setTransform(transforms[k]);\n                    renderer.drawGeometry(geomAndStyle[j]);\n                }\n            }\n        }\n    }\n    return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n    var resultFeatures = [];\n    if (imageData) {\n        var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n        var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n        // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n        // for browsers returning coordinates slightly larger than the actual canvas size\n        // due to a non-integer pixel ratio.\n        var index = (clamp(x, 0, imageData.width - 1) +\n            clamp(y, 0, imageData.height - 1) * imageData.width) *\n            4;\n        var r = imageData.data[index];\n        var g = imageData.data[index + 1];\n        var b = imageData.data[index + 2];\n        var i = b + 256 * (g + 256 * r);\n        var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n        if (i && i % indexFactor === 0) {\n            resultFeatures.push(features[i / indexFactor - 1]);\n        }\n    }\n    return resultFeatures;\n}\n"]},"metadata":{},"sourceType":"module"}