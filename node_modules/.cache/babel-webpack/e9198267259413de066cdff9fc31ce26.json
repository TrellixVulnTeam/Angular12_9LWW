{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param element The element to check for visibility\n * @returns true if element is hidden\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction elementIsHidden(element) {\n  return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param button.type The type of button cancel, back, or next\n * @param button.classes Classes to apply to the button\n * @param button.text The text for the button\n * @param button.action The action to call\n */\n\n\nfunction makeButton(button) {\n  const {\n    classes,\n    disabled,\n    label,\n    secondary,\n    type,\n    text\n  } = button;\n  const builtInButtonTypes = ['back', 'cancel', 'next'];\n\n  if (!type) {\n    return button;\n  }\n\n  if (builtInButtonTypes.indexOf(type) === -1) {\n    throw new Error(`'type' property must be one of 'back', 'cancel', or 'next'`);\n  }\n\n  return {\n    action: this[type].bind(this),\n    classes,\n    disabled,\n    label,\n    secondary,\n    text\n  };\n}\n\nlet ShepherdService = /*#__PURE__*/(() => {\n  class ShepherdService {\n    constructor() {\n      this.confirmCancel = false;\n      this.confirmCancelMessage = null;\n      this.defaultStepOptions = {};\n      this.errorTitle = null;\n      this.isActive = false;\n      this.messageForUser = null;\n      this.modal = false;\n      this.requiredElements = [];\n      this.steps = [];\n      this.tourName = undefined;\n      this.tourObject = null;\n    }\n    /**\n     * Get the tour object and call back\n     */\n\n\n    back() {\n      this.tourObject.back();\n    }\n    /**\n     * Cancel the tour\n     */\n\n\n    cancel() {\n      this.tourObject.cancel();\n    }\n    /**\n     * Complete the tour\n     */\n\n\n    complete() {\n      this.tourObject.complete();\n    }\n    /**\n     * Hides the current step\n     */\n\n\n    hide() {\n      this.tourObject.hide();\n    }\n    /**\n     * Advance the tour to the next step\n     */\n\n\n    next() {\n      this.tourObject.next();\n    }\n    /**\n     * Show a specific step, by passing its id\n     * @param id The id of the step you want to show\n     */\n\n\n    show(id) {\n      this.tourObject.show(id);\n    }\n    /**\n     * Start the tour\n     */\n\n\n    start() {\n      this.isActive = true;\n      this.tourObject.start();\n    }\n    /**\n     * This function is called when a tour is completed or cancelled to initiate cleanup.\n     * @param completeOrCancel 'complete' or 'cancel'\n     */\n\n\n    onTourFinish(completeOrCancel) {\n      this.isActive = false;\n    }\n    /**\n     * Take a set of steps and create a tour object based on the current configuration\n     * @param steps An array of steps\n     */\n\n\n    addSteps(steps) {\n      this._initialize();\n\n      const tour = this.tourObject; // Return nothing if there are no steps\n\n      if (!steps || !Array.isArray(steps) || steps.length === 0) {\n        return;\n      }\n\n      if (!this.requiredElementsPresent()) {\n        tour.addStep({\n          buttons: [{\n            text: 'Exit',\n            action: tour.cancel\n          }],\n          id: 'error',\n          title: this.errorTitle,\n          text: [this.messageForUser]\n        });\n        return;\n      }\n\n      steps.forEach(step => {\n        if (step.buttons) {\n          step.buttons = step.buttons.map(makeButton.bind(this), this);\n        }\n\n        tour.addStep(step);\n      });\n    }\n    /**\n     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n     */\n\n\n    requiredElementsPresent() {\n      let allElementsPresent = true;\n      /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n\n      this.requiredElements.forEach(element => {\n        const selectedElement = document.querySelector(element.selector);\n\n        if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n          allElementsPresent = false;\n          this.errorTitle = element.title;\n          this.messageForUser = element.message;\n        }\n      });\n      return allElementsPresent;\n    }\n    /**\n     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n     */\n\n\n    _initialize() {\n      const tourObject = new Shepherd.Tour({\n        confirmCancel: this.confirmCancel,\n        confirmCancelMessage: this.confirmCancelMessage,\n        defaultStepOptions: this.defaultStepOptions,\n        tourName: this.tourName,\n        useModalOverlay: this.modal\n      });\n      tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n      tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n      this.tourObject = tourObject;\n    }\n\n  }\n\n  ShepherdService.ɵfac = function ShepherdService_Factory(t) {\n    return new (t || ShepherdService)();\n  };\n  /** @nocollapse */\n\n\n  ShepherdService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ShepherdService_Factory() {\n      return new ShepherdService();\n    },\n    token: ShepherdService,\n    providedIn: \"root\"\n  });\n  /** @nocollapse */\n\n  return ShepherdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of shepherd\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ShepherdService };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/angular-shepherd/fesm2015/angular-shepherd.js"],"names":["i0","Injectable","Shepherd","ɵngcc0","elementIsHidden","element","offsetWidth","offsetHeight","makeButton","button","classes","disabled","label","secondary","type","text","builtInButtonTypes","indexOf","Error","action","bind","ShepherdService","constructor","confirmCancel","confirmCancelMessage","defaultStepOptions","errorTitle","isActive","messageForUser","modal","requiredElements","steps","tourName","undefined","tourObject","back","cancel","complete","hide","next","show","id","start","onTourFinish","completeOrCancel","addSteps","_initialize","tour","Array","isArray","length","requiredElementsPresent","addStep","buttons","title","forEach","step","map","allElementsPresent","selectedElement","document","querySelector","selector","message","Tour","useModalOverlay","on","ɵfac","ShepherdService_Factory","t","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport Shepherd from 'shepherd.js';\n\n/**\n * Helper method to check if element is hidden, since we cannot use :visible without jQuery\n * @param element The element to check for visibility\n * @returns true if element is hidden\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction elementIsHidden(element) {\n    return element.offsetWidth === 0 && element.offsetHeight === 0;\n}\n\n/**\n * Creates a button of the specified type, with the given classes and text\n *\n * @param button.type The type of button cancel, back, or next\n * @param button.classes Classes to apply to the button\n * @param button.text The text for the button\n * @param button.action The action to call\n */\nfunction makeButton(button) {\n    const { classes, disabled, label, secondary, type, text } = button;\n    const builtInButtonTypes = ['back', 'cancel', 'next'];\n    if (!type) {\n        return button;\n    }\n    if (builtInButtonTypes.indexOf(type) === -1) {\n        throw new Error(`'type' property must be one of 'back', 'cancel', or 'next'`);\n    }\n    return {\n        action: this[type].bind(this),\n        classes,\n        disabled,\n        label,\n        secondary,\n        text\n    };\n}\n\nclass ShepherdService {\n    constructor() {\n        this.confirmCancel = false;\n        this.confirmCancelMessage = null;\n        this.defaultStepOptions = {};\n        this.errorTitle = null;\n        this.isActive = false;\n        this.messageForUser = null;\n        this.modal = false;\n        this.requiredElements = [];\n        this.steps = [];\n        this.tourName = undefined;\n        this.tourObject = null;\n    }\n    /**\n     * Get the tour object and call back\n     */\n    back() {\n        this.tourObject.back();\n    }\n    /**\n     * Cancel the tour\n     */\n    cancel() {\n        this.tourObject.cancel();\n    }\n    /**\n     * Complete the tour\n     */\n    complete() {\n        this.tourObject.complete();\n    }\n    /**\n     * Hides the current step\n     */\n    hide() {\n        this.tourObject.hide();\n    }\n    /**\n     * Advance the tour to the next step\n     */\n    next() {\n        this.tourObject.next();\n    }\n    /**\n     * Show a specific step, by passing its id\n     * @param id The id of the step you want to show\n     */\n    show(id) {\n        this.tourObject.show(id);\n    }\n    /**\n     * Start the tour\n     */\n    start() {\n        this.isActive = true;\n        this.tourObject.start();\n    }\n    /**\n     * This function is called when a tour is completed or cancelled to initiate cleanup.\n     * @param completeOrCancel 'complete' or 'cancel'\n     */\n    onTourFinish(completeOrCancel) {\n        this.isActive = false;\n    }\n    /**\n     * Take a set of steps and create a tour object based on the current configuration\n     * @param steps An array of steps\n     */\n    addSteps(steps) {\n        this._initialize();\n        const tour = this.tourObject;\n        // Return nothing if there are no steps\n        if (!steps || !Array.isArray(steps) || steps.length === 0) {\n            return;\n        }\n        if (!this.requiredElementsPresent()) {\n            tour.addStep({\n                buttons: [{\n                        text: 'Exit',\n                        action: tour.cancel\n                    }],\n                id: 'error',\n                title: this.errorTitle,\n                text: [this.messageForUser]\n            });\n            return;\n        }\n        steps.forEach((step) => {\n            if (step.buttons) {\n                step.buttons = step.buttons.map(makeButton.bind(this), this);\n            }\n            tour.addStep(step);\n        });\n    }\n    /**\n     * Observes the array of requiredElements, which are the elements that must be present at the start of the tour,\n     * and determines if they exist, and are visible, if either is false, it will stop the tour from executing.\n     */\n    requiredElementsPresent() {\n        let allElementsPresent = true;\n        /* istanbul ignore next: also can't test this due to things attached to root blowing up tests */\n        this.requiredElements.forEach((element) => {\n            const selectedElement = document.querySelector(element.selector);\n            if (allElementsPresent && (!selectedElement || elementIsHidden(selectedElement))) {\n                allElementsPresent = false;\n                this.errorTitle = element.title;\n                this.messageForUser = element.message;\n            }\n        });\n        return allElementsPresent;\n    }\n    /**\n     * Initializes the tour, creates a new Shepherd.Tour. sets options, and binds events\n     */\n    _initialize() {\n        const tourObject = new Shepherd.Tour({\n            confirmCancel: this.confirmCancel,\n            confirmCancelMessage: this.confirmCancelMessage,\n            defaultStepOptions: this.defaultStepOptions,\n            tourName: this.tourName,\n            useModalOverlay: this.modal\n        });\n        tourObject.on('complete', this.onTourFinish.bind(this, 'complete'));\n        tourObject.on('cancel', this.onTourFinish.bind(this, 'cancel'));\n        this.tourObject = tourObject;\n    }\n}\nShepherdService.ɵfac = function ShepherdService_Factory(t) { return new (t || ShepherdService)(); };\n/** @nocollapse */ ShepherdService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShepherdService_Factory() { return new ShepherdService(); }, token: ShepherdService, providedIn: \"root\" });\n/** @nocollapse */\nShepherdService.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShepherdService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/*\n * Public API Surface of shepherd\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ShepherdService };\n\n"]},"metadata":{},"sourceType":"module"}