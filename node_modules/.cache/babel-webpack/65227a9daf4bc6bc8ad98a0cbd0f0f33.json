{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\n\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\n\nvar ImageWMS = function (_super) {\n  __extends(ImageWMS, _super);\n  /**\n   * @param {Options} [opt_options] ImageWMS options.\n   */\n\n\n  function ImageWMS(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.v13_ = true;\n\n    _this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n\n\n    _this.serverType_ = options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n\n      if (!isSingleLayer) {\n        return undefined;\n      }\n\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n\n    assign(baseParams, params);\n    return appendParams(this.url_, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n\n\n  ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    var imageResolution = resolution / pixelRatio;\n    var center = getCenter(extent);\n    var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n\n          break;\n\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n\n    params['BBOX'] = bbox.join(',');\n    return appendParams(this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageWMS.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n\n\n  ImageWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n\n  return ImageWMS;\n}(ImageSource);\n\nexport default ImageWMS;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/ImageWMS.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","DEFAULT_WMS_VERSION","EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","WMSServerType","appendParams","assert","assign","calculateSourceResolution","compareVersions","containsExtent","getCenter","getForViewAndSize","getHeight","getWidth","get","getProjection","transform","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","_super","opt_options","_this","options","attributions","imageSmoothing","projection","resolutions","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","v13_","updateV13_","serverType_","serverType","hidpi_","hidpi","image_","imageSize_","renderedRevision_","ratio_","ratio","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","isArray","length","mpu","getMetersPerUnit","pixelSize","getParams","getImageInternal","pixelRatio","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","image","getRevision","getResolution","getPixelRatio","getExtent","round","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","getCode","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","join","getUrl","setImageLoadFunction","changed","setUrl","updateParams","version"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth, } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageWMS = /** @class */ (function (_super) {\n    __extends(ImageWMS, _super);\n    /**\n     * @param {Options} [opt_options] ImageWMS options.\n     */\n    function ImageWMS(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            imageSmoothing: options.imageSmoothing,\n            projection: options.projection,\n            resolutions: options.resolutions,\n        }) || this;\n        /**\n         * @private\n         * @type {?string}\n         */\n        _this.crossOrigin_ =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        _this.url_ = options.url;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").LoadFunction}\n         */\n        _this.imageLoadFunction_ =\n            options.imageLoadFunction !== undefined\n                ? options.imageLoadFunction\n                : defaultImageLoadFunction;\n        /**\n         * @private\n         * @type {!Object}\n         */\n        _this.params_ = options.params || {};\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.v13_ = true;\n        _this.updateV13_();\n        /**\n         * @private\n         * @type {import(\"./WMSServerType.js\").default|undefined}\n         */\n        _this.serverType_ =\n            /** @type {import(\"./WMSServerType.js\").default|undefined} */ (options.serverType);\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n        /**\n         * @private\n         * @type {import(\"../Image.js\").default}\n         */\n        _this.image_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.imageSize_ = [0, 0];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n        return _this;\n    }\n    /**\n     * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n     * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n     * constructed.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n     * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n     *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n     *     in the `LAYERS` parameter will be used. `VERSION` should not be\n     *     specified here.\n     * @return {string|undefined} GetFeatureInfo URL.\n     * @api\n     */\n    ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n        if (this.url_ === undefined) {\n            return undefined;\n        }\n        var projectionObj = getProjection(projection);\n        var sourceProjectionObj = this.getProjection();\n        if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n            resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n            coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n        }\n        var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n        var baseParams = {\n            'SERVICE': 'WMS',\n            'VERSION': DEFAULT_WMS_VERSION,\n            'REQUEST': 'GetFeatureInfo',\n            'FORMAT': 'image/png',\n            'TRANSPARENT': true,\n            'QUERY_LAYERS': this.params_['LAYERS'],\n        };\n        assign(baseParams, this.params_, params);\n        var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n        var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n        baseParams[this.v13_ ? 'I' : 'X'] = x;\n        baseParams[this.v13_ ? 'J' : 'Y'] = y;\n        return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n    };\n    /**\n     * Return the GetLegendGraphic URL, optionally optimized for the passed\n     * resolution and possibly including any passed specific parameters. Returns\n     * `undefined` if the GetLegendGraphic URL cannot be constructed.\n     *\n     * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n     *     will not be calculated and included in URL.\n     * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n     *     request is generated for this wms layer, else it will try to use the\n     *     configured wms layer. Default `FORMAT` is `image/png`.\n     *     `VERSION` should not be specified here.\n     * @return {string|undefined} GetLegendGraphic URL.\n     * @api\n     */\n    ImageWMS.prototype.getLegendUrl = function (resolution, params) {\n        if (this.url_ === undefined) {\n            return undefined;\n        }\n        var baseParams = {\n            'SERVICE': 'WMS',\n            'VERSION': DEFAULT_WMS_VERSION,\n            'REQUEST': 'GetLegendGraphic',\n            'FORMAT': 'image/png',\n        };\n        if (params === undefined || params['LAYER'] === undefined) {\n            var layers = this.params_.LAYERS;\n            var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n            if (!isSingleLayer) {\n                return undefined;\n            }\n            baseParams['LAYER'] = layers;\n        }\n        if (resolution !== undefined) {\n            var mpu = this.getProjection()\n                ? this.getProjection().getMetersPerUnit()\n                : 1;\n            var pixelSize = 0.00028;\n            baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n        }\n        assign(baseParams, params);\n        return appendParams(/** @type {string} */ (this.url_), baseParams);\n    };\n    /**\n     * Get the user-provided params, i.e. those passed to the constructor through\n     * the \"params\" option, and possibly updated using the updateParams method.\n     * @return {Object} Params.\n     * @api\n     */\n    ImageWMS.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../Image.js\").default} Single image.\n     */\n    ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n        if (this.url_ === undefined) {\n            return null;\n        }\n        resolution = this.findNearestResolution(resolution);\n        if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n            pixelRatio = 1;\n        }\n        var imageResolution = resolution / pixelRatio;\n        var center = getCenter(extent);\n        var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n        var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n        var viewExtent = getForViewAndSize(center, imageResolution, 0, [\n            viewWidth,\n            viewHeight,\n        ]);\n        var requestWidth = Math.ceil((this.ratio_ * getWidth(extent)) / imageResolution);\n        var requestHeight = Math.ceil((this.ratio_ * getHeight(extent)) / imageResolution);\n        var requestExtent = getForViewAndSize(center, imageResolution, 0, [\n            requestWidth,\n            requestHeight,\n        ]);\n        var image = this.image_;\n        if (image &&\n            this.renderedRevision_ == this.getRevision() &&\n            image.getResolution() == resolution &&\n            image.getPixelRatio() == pixelRatio &&\n            containsExtent(image.getExtent(), viewExtent)) {\n            return image;\n        }\n        var params = {\n            'SERVICE': 'WMS',\n            'VERSION': DEFAULT_WMS_VERSION,\n            'REQUEST': 'GetMap',\n            'FORMAT': 'image/png',\n            'TRANSPARENT': true,\n        };\n        assign(params, this.params_);\n        this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n        this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n        var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n        this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n        this.renderedRevision_ = this.getRevision();\n        this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n        return this.image_;\n    };\n    /**\n     * Return the image load function of the source.\n     * @return {import(\"../Image.js\").LoadFunction} The image load function.\n     * @api\n     */\n    ImageWMS.prototype.getImageLoadFunction = function () {\n        return this.imageLoadFunction_;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {import(\"../size.js\").Size} size Size.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {Object} params Params.\n     * @return {string} Request URL.\n     * @private\n     */\n    ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n        assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n        params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n        if (!('STYLES' in this.params_)) {\n            params['STYLES'] = '';\n        }\n        if (pixelRatio != 1) {\n            switch (this.serverType_) {\n                case WMSServerType.GEOSERVER:\n                    var dpi = (90 * pixelRatio + 0.5) | 0;\n                    if ('FORMAT_OPTIONS' in params) {\n                        params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n                    }\n                    else {\n                        params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n                    }\n                    break;\n                case WMSServerType.MAPSERVER:\n                    params['MAP_RESOLUTION'] = 90 * pixelRatio;\n                    break;\n                case WMSServerType.CARMENTA_SERVER:\n                case WMSServerType.QGIS:\n                    params['DPI'] = 90 * pixelRatio;\n                    break;\n                default:\n                    assert(false, 8); // Unknown `serverType` configured\n                    break;\n            }\n        }\n        params['WIDTH'] = size[0];\n        params['HEIGHT'] = size[1];\n        var axisOrientation = projection.getAxisOrientation();\n        var bbox;\n        if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n            bbox = [extent[1], extent[0], extent[3], extent[2]];\n        }\n        else {\n            bbox = extent;\n        }\n        params['BBOX'] = bbox.join(',');\n        return appendParams(/** @type {string} */ (this.url_), params);\n    };\n    /**\n     * Return the URL used for this WMS source.\n     * @return {string|undefined} URL.\n     * @api\n     */\n    ImageWMS.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * Set the image load function of the source.\n     * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n     * @api\n     */\n    ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {\n        this.image_ = null;\n        this.imageLoadFunction_ = imageLoadFunction;\n        this.changed();\n    };\n    /**\n     * Set the URL to use for requests.\n     * @param {string|undefined} url URL.\n     * @api\n     */\n    ImageWMS.prototype.setUrl = function (url) {\n        if (url != this.url_) {\n            this.url_ = url;\n            this.image_ = null;\n            this.changed();\n        }\n    };\n    /**\n     * Update the user-provided params.\n     * @param {Object} params Params.\n     * @api\n     */\n    ImageWMS.prototype.updateParams = function (params) {\n        assign(this.params_, params);\n        this.updateV13_();\n        this.image_ = null;\n        this.changed();\n    };\n    /**\n     * @private\n     */\n    ImageWMS.prototype.updateV13_ = function () {\n        var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n        this.v13_ = compareVersions(version, '1.3') >= 0;\n    };\n    return ImageWMS;\n}(ImageSource));\nexport default ImageWMS;\n"]},"metadata":{},"sourceType":"module"}