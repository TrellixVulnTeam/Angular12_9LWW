{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\n\nvar BaseClient = function () {\n  function BaseClient(configuration) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration); // Initialize the logger\n\n    this.logger = new Logger(this.config.loggerOptions, name, version); // Initialize crypto\n\n    this.cryptoUtils = this.config.cryptoInterface; // Initialize storage interface\n\n    this.cacheManager = this.config.storageInterface; // Set the network interface\n\n    this.networkClient = this.config.networkInterface; // Set the NetworkManager\n\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager); // Set TelemetryManager\n\n    this.serverTelemetryManager = this.config.serverTelemetryManager; // set Authority\n\n    this.authority = this.config.authOptions.authority;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n\n\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n\n          break;\n\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n\n\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n\n          case 1:\n            response = _a.sent();\n\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n\n\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n\n    this.authority = updatedAuthority;\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/client/BaseClient.js"],"names":["__awaiter","__generator","buildClientConfiguration","NetworkManager","Logger","HeaderNames","Constants","name","version","ClientAuthError","CcsCredentialType","buildClientInfoFromHomeAccountId","BaseClient","configuration","config","logger","loggerOptions","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","serverTelemetryManager","authority","authOptions","prototype","createTokenRequestHeaders","ccsCred","headers","CONTENT_TYPE","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","HOME_ACCOUNT_ID","clientInfo","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","response","_a","label","sendPostRequest","body","sent","status","clearTelemetryCache","updateAuthority","updatedAuthority","discoveryComplete","createEndpointDiscoveryIncompleteError"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\r\nvar BaseClient = /** @class */ (function () {\r\n    function BaseClient(configuration) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set the NetworkManager\r\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\r\n        var headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\r\n                            // Telemetry data successfully logged by server, clear Telemetry cache\r\n                            this.config.serverTelemetryManager.clearTelemetryCache();\r\n                        }\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    BaseClient.prototype.updateAuthority = function (updatedAuthority) {\r\n        if (!updatedAuthority.discoveryComplete()) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\r\n        }\r\n        this.authority = updatedAuthority;\r\n    };\r\n    return BaseClient;\r\n}());\n\nexport { BaseClient };\n"]},"metadata":{},"sourceType":"module"}