{"ast":null,"code":"import { InjectionToken, Injectable, Inject, VERSION, Component, NgModule } from '@angular/core';\nimport { Location, DOCUMENT, CommonModule } from '@angular/common';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { map, concatMap, catchError, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\n/* eslint-disable header/header */\n\nconst name = \"@azure/msal-angular\";\nconst version = \"2.0.2\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nlet MsalService = /*#__PURE__*/(() => {\n  class MsalService {\n    constructor(instance, location) {\n      this.instance = instance;\n      this.location = location;\n      const hash = this.location.path(true).split(\"#\").pop();\n\n      if (hash) {\n        this.redirectHash = `#${hash}`;\n      }\n\n      this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n    }\n\n    acquireTokenPopup(request) {\n      return from(this.instance.acquireTokenPopup(request));\n    }\n\n    acquireTokenRedirect(request) {\n      return from(this.instance.acquireTokenRedirect(request));\n    }\n\n    acquireTokenSilent(silentRequest) {\n      return from(this.instance.acquireTokenSilent(silentRequest));\n    }\n\n    handleRedirectObservable(hash) {\n      return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n    }\n\n    loginPopup(request) {\n      return from(this.instance.loginPopup(request));\n    }\n\n    loginRedirect(request) {\n      return from(this.instance.loginRedirect(request));\n    }\n\n    logout(logoutRequest) {\n      return from(this.instance.logout(logoutRequest));\n    }\n\n    logoutRedirect(logoutRequest) {\n      return from(this.instance.logoutRedirect(logoutRequest));\n    }\n\n    logoutPopup(logoutRequest) {\n      return from(this.instance.logoutPopup(logoutRequest));\n    }\n\n    ssoSilent(request) {\n      return from(this.instance.ssoSilent(request));\n    }\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\n\n\n    getLogger() {\n      if (!this.logger) {\n        this.logger = this.instance.getLogger().clone(name, version);\n      }\n\n      return this.logger;\n    } // Create a logger instance for msal-angular with the same options as msal-browser\n\n\n    setLogger(logger) {\n      this.logger = logger.clone(name, version);\n      this.instance.setLogger(logger);\n    }\n\n  }\n\n  MsalService.ɵfac = function MsalService_Factory(t) {\n    return new (t || MsalService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n  };\n\n  MsalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MsalService,\n    factory: MsalService.ɵfac\n  });\n  return MsalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalBroadcastService = /*#__PURE__*/(() => {\n  class MsalBroadcastService {\n    constructor(msalInstance, authService) {\n      this.msalInstance = msalInstance;\n      this.authService = authService;\n      this._msalSubject = new Subject();\n      this.msalSubject$ = this._msalSubject.asObservable(); // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n\n      this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n      this.inProgress$ = this._inProgress.asObservable();\n      this.msalInstance.addEventCallback(message => {\n        this._msalSubject.next(message);\n\n        const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n        if (status !== null) {\n          this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\n\n          this._inProgress.next(status);\n        }\n      });\n    }\n\n  }\n\n  MsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) {\n    return new (t || MsalBroadcastService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(MsalService));\n  };\n\n  MsalBroadcastService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MsalBroadcastService,\n    factory: MsalBroadcastService.ɵfac\n  });\n  return MsalBroadcastService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalGuard = /*#__PURE__*/(() => {\n  class MsalGuard {\n    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\n      this.msalGuardConfig = msalGuardConfig;\n      this.msalBroadcastService = msalBroadcastService;\n      this.authService = authService;\n      this.location = location;\n      this.router = router; // Subscribing so events in MsalGuard will set inProgress$ observable\n\n      this.msalBroadcastService.inProgress$.subscribe();\n    }\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url\r\n     */\n\n\n    parseUrl(url) {\n      return this.router.parseUrl(url);\n    }\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\n\n\n    getDestinationUrl(path) {\n      this.authService.getLogger().verbose(\"Guard - getting destination url\"); // Absolute base url for the application (default to origin if base element not present)\n\n      const baseElements = document.getElementsByTagName(\"base\");\n      const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin); // Path of page (including hash, if using hash routing)\n\n      const pathUrl = this.location.prepareExternalUrl(path); // Hash location strategy\n\n      if (pathUrl.startsWith(\"#\")) {\n        this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\n        return `${baseUrl}/${pathUrl}`;\n      }\n      /*\r\n       * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n       * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n       */\n\n\n      return `${baseUrl}${path}`;\n    }\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\n\n\n    loginInteractively(state) {\n      const authRequest = typeof this.msalGuardConfig.authRequest === \"function\" ? this.msalGuardConfig.authRequest(this.authService, state) : Object.assign({}, this.msalGuardConfig.authRequest);\n\n      if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n        this.authService.getLogger().verbose(\"Guard - logging in by popup\");\n        return this.authService.loginPopup(authRequest).pipe(map(response => {\n          this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\n          this.authService.instance.setActiveAccount(response.account);\n          return true;\n        }));\n      }\n\n      this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\n      const redirectStartPage = this.getDestinationUrl(state.url);\n      return this.authService.loginRedirect(Object.assign({\n        redirectStartPage\n      }, authRequest)).pipe(map(() => false));\n    }\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\n\n\n    activateHelper(state) {\n      if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n        throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\n      }\n\n      this.authService.getLogger().verbose(\"MSAL Guard activated\");\n      /*\r\n       * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n       * short-circuit to prevent redirecting or popups.\r\n       * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n       */\n\n      if (typeof window !== \"undefined\") {\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\n          this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\n          return of(false);\n        }\n      } else {\n        this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\n        return of(true);\n      }\n      /**\r\n       * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n       */\n\n\n      if (this.msalGuardConfig.loginFailedRoute) {\n        this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n      } // Capture current path before it gets changed by handleRedirectObservable\n\n\n      const currentPath = this.location.path(true);\n      return this.authService.handleRedirectObservable().pipe(concatMap(() => {\n        if (!this.authService.instance.getAllAccounts().length) {\n          if (state) {\n            this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\n            return this.loginInteractively(state);\n          }\n\n          this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\n          return of(false);\n        }\n\n        this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\"); // Prevent navigating the app to /#code= or /code=\n\n        if (state && currentPath.indexOf(\"code=\") > -1) {\n          this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\"); // Path routing (navigate to current path without hash)\n\n          if (currentPath.indexOf(\"#\") > -1) {\n            return of(this.parseUrl(this.location.path()));\n          } // Hash routing (navigate to root path)\n\n\n          return of(this.parseUrl(\"\"));\n        }\n\n        return of(true);\n      }), catchError(error => {\n        this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\n        this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\n        /**\r\n         * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n         * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n         */\n\n        if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\n          this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\n          return of(this.loginFailedRoute);\n        }\n\n        return of(false);\n      }));\n    }\n\n    canActivate(route, state) {\n      this.authService.getLogger().verbose(\"Guard - canActivate\");\n      return this.activateHelper(state);\n    }\n\n    canActivateChild(route, state) {\n      this.authService.getLogger().verbose(\"Guard - canActivateChild\");\n      return this.activateHelper(state);\n    }\n\n    canLoad() {\n      this.authService.getLogger().verbose(\"Guard - canLoad\"); // @ts-ignore\n\n      return this.activateHelper();\n    }\n\n  }\n\n  MsalGuard.ɵfac = function MsalGuard_Factory(t) {\n    return new (t || MsalGuard)(ɵngcc0.ɵɵinject(MSAL_GUARD_CONFIG), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.Router));\n  };\n\n  MsalGuard.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MsalGuard,\n    factory: MsalGuard.ɵfac\n  });\n  return MsalGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalInterceptor = /*#__PURE__*/(() => {\n  class MsalInterceptor {\n    constructor(msalInterceptorConfig, authService, location, // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    document) {\n      this.msalInterceptorConfig = msalInterceptorConfig;\n      this.authService = authService;\n      this.location = location;\n      this._document = document;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    intercept(req, next) {\n      if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n        throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\n      }\n\n      this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\n      const scopes = this.getScopesForEndpoint(req.url, req.method); // If no scopes for endpoint, does not acquire token\n\n      if (!scopes || scopes.length === 0) {\n        this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\n        return next.handle(req);\n      } // Sets account as active account or first account\n\n\n      let account;\n\n      if (!!this.authService.instance.getActiveAccount()) {\n        this.authService.getLogger().verbose(\"Interceptor - active account selected\");\n        account = this.authService.instance.getActiveAccount();\n      } else {\n        this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\n        account = this.authService.instance.getAllAccounts()[0];\n      }\n\n      const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\" ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n        account: account\n      }) : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), {\n        account\n      });\n      this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n      this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`); // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n\n      return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), {\n        scopes,\n        account\n      })).pipe(catchError(() => {\n        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\n        return this.acquireTokenInteractively(authRequest, scopes);\n      }), switchMap(result => {\n        if (!result.accessToken) {\n          this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\n          return this.acquireTokenInteractively(authRequest, scopes);\n        }\n\n        return of(result);\n      }), switchMap(result => {\n        this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\n        const headers = req.headers.set(\"Authorization\", `Bearer ${result.accessToken}`);\n        const requestClone = req.clone({\n          headers\n        });\n        return next.handle(requestClone);\n      }));\n    }\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\n\n\n    acquireTokenInteractively(authRequest, scopes) {\n      if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\n        return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), {\n          scopes\n        }));\n      }\n\n      this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\n      const redirectStartPage = window.location.href;\n      this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), {\n        scopes,\n        redirectStartPage\n      }));\n      return EMPTY;\n    }\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\n\n\n    getScopesForEndpoint(endpoint, httpMethod) {\n      this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\"); // Ensures endpoints and protected resources compared are normalized\n\n      const normalizedEndpoint = this.location.normalize(endpoint);\n      const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n      const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint); // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\n\n      if (matchingProtectedResources.absoluteResources.length > 0) {\n        return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\n      } else if (matchingProtectedResources.relativeResources.length > 0) {\n        return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\n      }\n\n      return null;\n    }\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\n\n\n    matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\n      const matchingResources = {\n        absoluteResources: [],\n        relativeResources: []\n      };\n      protectedResourcesEndpoints.forEach(key => {\n        // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\n        const normalizedKey = this.location.normalize(key);\n\n        if (StringUtils.matchPattern(normalizedKey, endpoint)) {\n          matchingResources.absoluteResources.push(key);\n        } // Get url components for relative urls\n\n\n        const absoluteKey = this.getAbsoluteUrl(key);\n        const keyComponents = new UrlString(absoluteKey).getUrlComponents();\n        const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n        const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents(); // Normalized key should include query strings if applicable\n\n        const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath); // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\n\n        if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\") {\n          matchingResources.relativeResources.push(key);\n        }\n      });\n      return matchingResources;\n    }\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\n\n\n    getAbsoluteUrl(url) {\n      const link = this._document.createElement(\"a\");\n\n      link.href = url;\n      return link.href;\n    }\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\n\n\n    matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\n      const allMatchedScopes = []; // Check each matched endpoint for matching HttpMethod and scopes\n\n      endpointArray.forEach(matchedEndpoint => {\n        const scopesForEndpoint = [];\n        const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint); // Return if resource is unprotected\n\n        if (methodAndScopesArray === null) {\n          allMatchedScopes.push(null);\n          return;\n        }\n\n        methodAndScopesArray.forEach(entry => {\n          // Entry is either array of scopes or ProtectedResourceScopes object\n          if (typeof entry === \"string\") {\n            scopesForEndpoint.push(entry);\n          } else {\n            // Ensure methods being compared are normalized\n            const normalizedRequestMethod = httpMethod.toLowerCase();\n            const normalizedResourceMethod = entry.httpMethod.toLowerCase(); // Method in protectedResourceMap matches request http method\n\n            if (normalizedResourceMethod === normalizedRequestMethod) {\n              // Validate if scopes comes null to unprotect the resource in a certain http method \n              if (entry.scopes === null) {\n                allMatchedScopes.push(null);\n              } else {\n                entry.scopes.forEach(scope => {\n                  scopesForEndpoint.push(scope);\n                });\n              }\n            }\n          }\n        }); // Only add to all scopes if scopes for endpoint and method is found\n\n        if (scopesForEndpoint.length > 0) {\n          allMatchedScopes.push(scopesForEndpoint);\n        }\n      });\n\n      if (allMatchedScopes.length > 0) {\n        if (allMatchedScopes.length > 1) {\n          this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\n        } // Returns scopes for first matching endpoint\n\n\n        return allMatchedScopes[0];\n      }\n\n      return null;\n    }\n\n  }\n\n  MsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) {\n    return new (t || MsalInterceptor)(ɵngcc0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  MsalInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MsalInterceptor,\n    factory: MsalInterceptor.ɵfac\n  });\n  return MsalInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalRedirectComponent = /*#__PURE__*/(() => {\n  class MsalRedirectComponent {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    ngOnInit() {\n      this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\n      this.authService.handleRedirectObservable().subscribe();\n    }\n\n  }\n\n  MsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) {\n    return new (t || MsalRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(MsalService));\n  };\n\n  MsalRedirectComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MsalRedirectComponent,\n    selectors: [[\"app-redirect\"]],\n    decls: 0,\n    vars: 0,\n    template: function MsalRedirectComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return MsalRedirectComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalModule = /*#__PURE__*/(() => {\n  class MsalModule {\n    static forRoot(msalInstance, guardConfig, interceptorConfig) {\n      return {\n        ngModule: MsalModule,\n        providers: [{\n          provide: MSAL_INSTANCE,\n          useValue: msalInstance\n        }, {\n          provide: MSAL_GUARD_CONFIG,\n          useValue: guardConfig\n        }, {\n          provide: MSAL_INTERCEPTOR_CONFIG,\n          useValue: interceptorConfig\n        }, MsalService]\n      };\n    }\n\n  }\n\n  MsalModule.ɵfac = function MsalModule_Factory(t) {\n    return new (t || MsalModule)();\n  };\n\n  MsalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MsalModule\n  });\n  MsalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MsalGuard, MsalBroadcastService],\n    imports: [[CommonModule]]\n  });\n  return MsalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MsalModule, {\n    declarations: function () {\n      return [MsalRedirectComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    }\n  });\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\n\n\nlet MsalCustomNavigationClient = /*#__PURE__*/(() => {\n  class MsalCustomNavigationClient extends NavigationClient {\n    constructor(authService, router, location) {\n      super();\n      this.authService = authService;\n      this.router = router;\n      this.location = location;\n    }\n\n    navigateInternal(url, options) {\n      const _super = Object.create(null, {\n        navigateInternal: {\n          get: () => super.navigateInternal\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, function* () {\n        this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\n        this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\n        this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`); // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n\n        if (options.noHistory) {\n          return _super.navigateInternal.call(this, url, options);\n        } else {\n          // Normalizing newUrl if no query string\n          const urlComponents = new UrlString(url).getUrlComponents();\n          const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\n          this.router.navigateByUrl(newUrl, {\n            replaceUrl: options.noHistory\n          });\n        }\n\n        return Promise.resolve(options.noHistory);\n      });\n    }\n\n  }\n\n  MsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) {\n    return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.Location));\n  };\n\n  MsalCustomNavigationClient.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MsalCustomNavigationClient,\n    factory: MsalCustomNavigationClient.ɵfac\n  });\n  return MsalCustomNavigationClient;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-angular/fesm2015/azure-msal-angular.js"],"names":["InjectionToken","Injectable","Inject","VERSION","Component","NgModule","Location","DOCUMENT","CommonModule","WrapperSKU","InteractionStatus","EventMessageUtils","InteractionType","BrowserConfigurationAuthError","UrlString","BrowserUtils","StringUtils","NavigationClient","from","Subject","BehaviorSubject","of","EMPTY","Router","map","concatMap","catchError","switchMap","__awaiter","ɵngcc0","ɵngcc1","ɵngcc2","MSAL_INSTANCE","MSAL_GUARD_CONFIG","MSAL_INTERCEPTOR_CONFIG","name","version","MsalService","constructor","instance","location","hash","path","split","pop","redirectHash","initializeWrapperLibrary","Angular","acquireTokenPopup","request","acquireTokenRedirect","acquireTokenSilent","silentRequest","handleRedirectObservable","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRequest","logoutRedirect","logoutPopup","ssoSilent","getLogger","logger","clone","setLogger","ɵfac","MsalService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","MsalBroadcastService","msalInstance","authService","_msalSubject","msalSubject$","asObservable","_inProgress","Startup","inProgress$","addEventCallback","message","next","status","getInteractionStatusFromEvent","verbose","eventType","MsalBroadcastService_Factory","MsalGuard","msalGuardConfig","msalBroadcastService","router","subscribe","parseUrl","url","getDestinationUrl","baseElements","document","getElementsByTagName","baseUrl","normalize","length","href","window","origin","pathUrl","prepareExternalUrl","startsWith","loginInteractively","state","authRequest","Object","assign","interactionType","Popup","pipe","response","setActiveAccount","account","redirectStartPage","activateHelper","Redirect","hashContainsKnownProperties","isInIframe","warning","info","loginFailedRoute","currentPath","getAllAccounts","indexOf","error","errorPii","parseInt","major","canActivate","route","canActivateChild","canLoad","MsalGuard_Factory","MsalInterceptor","msalInterceptorConfig","_document","intercept","req","scopes","getScopesForEndpoint","method","handle","getActiveAccount","infoPii","acquireTokenInteractively","result","accessToken","headers","set","requestClone","endpoint","httpMethod","normalizedEndpoint","protectedResourcesArray","Array","protectedResourceMap","keys","matchingProtectedResources","matchResourcesToEndpoint","absoluteResources","matchScopesToEndpoint","relativeResources","protectedResourcesEndpoints","matchingResources","forEach","key","normalizedKey","matchPattern","push","absoluteKey","getAbsoluteUrl","keyComponents","getUrlComponents","absoluteEndpoint","endpointComponents","relativeNormalizedKey","QueryString","AbsolutePath","HostNameAndPort","link","createElement","endpointArray","allMatchedScopes","matchedEndpoint","scopesForEndpoint","methodAndScopesArray","get","entry","normalizedRequestMethod","toLowerCase","normalizedResourceMethod","scope","MsalInterceptor_Factory","MsalRedirectComponent","ngOnInit","MsalRedirectComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","MsalRedirectComponent_Template","rf","ctx","encapsulation","MsalModule","forRoot","guardConfig","interceptorConfig","ngModule","providers","provide","useValue","MsalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","MsalCustomNavigationClient","navigateInternal","options","_super","create","trace","verbosePii","noHistory","call","urlComponents","newUrl","navigateByUrl","replaceUrl","Promise","resolve","MsalCustomNavigationClient_Factory"],"mappings":"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","sourcesContent":["import { InjectionToken, Injectable, Inject, VERSION, Component, NgModule } from '@angular/core';\nimport { Location, DOCUMENT, CommonModule } from '@angular/common';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { map, concatMap, catchError, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\r\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\r\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\n\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-angular\";\r\nconst version = \"2.0.2\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalService {\r\n    constructor(instance, location) {\r\n        this.instance = instance;\r\n        this.location = location;\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\r\n    }\r\n    acquireTokenPopup(request) {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request) {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest) {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(hash) {\r\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\r\n    }\r\n    loginPopup(request) {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request) {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest) {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    logoutRedirect(logoutRequest) {\r\n        return from(this.instance.logoutRedirect(logoutRequest));\r\n    }\r\n    logoutPopup(logoutRequest) {\r\n        return from(this.instance.logoutPopup(logoutRequest));\r\n    }\r\n    ssoSilent(request) {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\r\n    getLogger() {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    // Create a logger instance for msal-angular with the same options as msal-browser\r\n    setLogger(logger) {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n}\nMsalService.ɵfac = function MsalService_Factory(t) { return new (t || MsalService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(ɵngcc1.Location)); };\nMsalService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalService, factory: MsalService.ɵfac });\r\nMsalService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INSTANCE,] }] },\r\n    { type: Location }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INSTANCE]\n            }] }, { type: ɵngcc1.Location }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalBroadcastService {\r\n    constructor(msalInstance, authService) {\r\n        this.msalInstance = msalInstance;\r\n        this.authService = authService;\r\n        this._msalSubject = new Subject();\r\n        this.msalSubject$ = this._msalSubject.asObservable();\r\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\r\n        this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\r\n        this.inProgress$ = this._inProgress.asObservable();\r\n        this.msalInstance.addEventCallback((message) => {\r\n            this._msalSubject.next(message);\r\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\r\n            if (status !== null) {\r\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\r\n                this._inProgress.next(status);\r\n            }\r\n        });\r\n    }\r\n}\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(t) { return new (t || MsalBroadcastService)(ɵngcc0.ɵɵinject(MSAL_INSTANCE), ɵngcc0.ɵɵinject(MsalService)); };\nMsalBroadcastService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalBroadcastService, factory: MsalBroadcastService.ɵfac });\r\nMsalBroadcastService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INSTANCE,] }] },\r\n    { type: MsalService }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalBroadcastService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INSTANCE]\n            }] }, { type: MsalService }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalGuard {\r\n    constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\r\n        this.msalGuardConfig = msalGuardConfig;\r\n        this.msalBroadcastService = msalBroadcastService;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this.router = router;\r\n        // Subscribing so events in MsalGuard will set inProgress$ observable\r\n        this.msalBroadcastService.inProgress$.subscribe();\r\n    }\r\n    /**\r\n     * Parses url string to UrlTree\r\n     * @param url\r\n     */\r\n    parseUrl(url) {\r\n        return this.router.parseUrl(url);\r\n    }\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path) {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    loginInteractively(state) {\r\n        const authRequest = typeof this.msalGuardConfig.authRequest === \"function\"\r\n            ? this.msalGuardConfig.authRequest(this.authService, state)\r\n            : Object.assign({}, this.msalGuardConfig.authRequest);\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup(authRequest)\r\n                .pipe(map((response) => {\r\n                this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\r\n                this.authService.instance.setActiveAccount(response.account);\r\n                return true;\r\n            }));\r\n        }\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(state.url);\r\n        return this.authService.loginRedirect(Object.assign({ redirectStartPage }, authRequest))\r\n            .pipe(map(() => false));\r\n    }\r\n    /**\r\n     * Helper which checks for the correct interaction type, prevents page with Guard to be set as reidrect, and calls handleRedirectObservable\r\n     * @param state\r\n     */\r\n    activateHelper(state) {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (typeof window !== \"undefined\") {\r\n            if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n                this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n                return of(false);\r\n            }\r\n        }\r\n        else {\r\n            this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\r\n            return of(true);\r\n        }\r\n        /**\r\n         * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n         */\r\n        if (this.msalGuardConfig.loginFailedRoute) {\r\n            this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\r\n        }\r\n        // Capture current path before it gets changed by handleRedirectObservable\r\n        const currentPath = this.location.path(true);\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(concatMap(() => {\r\n            if (!this.authService.instance.getAllAccounts().length) {\r\n                if (state) {\r\n                    this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                    return this.loginInteractively(state);\r\n                }\r\n                this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\r\n                return of(false);\r\n            }\r\n            this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\r\n            // Prevent navigating the app to /#code= or /code=\r\n            if (state && currentPath.indexOf(\"code=\") > -1) {\r\n                this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\r\n                // Path routing (navigate to current path without hash)\r\n                if (currentPath.indexOf(\"#\") > -1) {\r\n                    return of(this.parseUrl(this.location.path()));\r\n                }\r\n                // Hash routing (navigate to root path)\r\n                return of(this.parseUrl(\"\"));\r\n            }\r\n            return of(true);\r\n        }), catchError((error) => {\r\n            this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\r\n            this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\r\n            /**\r\n             * If a loginFailedRoute is set, checks to see if Angular 10+ is used and state is passed in before returning route\r\n             * Apps using Angular 9 will receive of(false) in canLoad interface, as it does not support UrlTree return types\r\n             */\r\n            if (this.loginFailedRoute && parseInt(VERSION.major, 10) > 9 && state) {\r\n                this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\r\n                return of(this.loginFailedRoute);\r\n            }\r\n            return of(false);\r\n        }));\r\n    }\r\n    canActivate(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivate\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canActivateChild(route, state) {\r\n        this.authService.getLogger().verbose(\"Guard - canActivateChild\");\r\n        return this.activateHelper(state);\r\n    }\r\n    canLoad() {\r\n        this.authService.getLogger().verbose(\"Guard - canLoad\");\r\n        // @ts-ignore\r\n        return this.activateHelper();\r\n    }\r\n}\nMsalGuard.ɵfac = function MsalGuard_Factory(t) { return new (t || MsalGuard)(ɵngcc0.ɵɵinject(MSAL_GUARD_CONFIG), ɵngcc0.ɵɵinject(MsalBroadcastService), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.Router)); };\nMsalGuard.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalGuard, factory: MsalGuard.ɵfac });\r\nMsalGuard.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_GUARD_CONFIG,] }] },\r\n    { type: MsalBroadcastService },\r\n    { type: MsalService },\r\n    { type: Location },\r\n    { type: Router }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalGuard, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_GUARD_CONFIG]\n            }] }, { type: MsalBroadcastService }, { type: MsalService }, { type: ɵngcc1.Location }, { type: ɵngcc2.Router }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalInterceptor {\r\n    constructor(msalInterceptorConfig, authService, location, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\n    document) {\r\n        this.msalInterceptorConfig = msalInterceptorConfig;\r\n        this.authService = authService;\r\n        this.location = location;\r\n        this._document = document;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    intercept(req, next) {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url, req.method);\r\n        // If no scopes for endpoint, does not acquire token\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n        // Sets account as active account or first account\r\n        let account;\r\n        if (!!this.authService.instance.getActiveAccount()) {\r\n            this.authService.getLogger().verbose(\"Interceptor - active account selected\");\r\n            account = this.authService.instance.getActiveAccount();\r\n        }\r\n        else {\r\n            this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\r\n            account = this.authService.instance.getAllAccounts()[0];\r\n        }\r\n        const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\"\r\n            ? this.msalInterceptorConfig.authRequest(this.authService, req, { account: account })\r\n            : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), { account });\r\n        this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\r\n        this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), { scopes, account }))\r\n            .pipe(catchError(() => {\r\n            this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\r\n            return this.acquireTokenInteractively(authRequest, scopes);\r\n        }), switchMap((result) => {\r\n            if (!result.accessToken) {\r\n                this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\r\n                return this.acquireTokenInteractively(authRequest, scopes);\r\n            }\r\n            return of(result);\r\n        }), switchMap((result) => {\r\n            this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n            const headers = req.headers\r\n                .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n            const requestClone = req.clone({ headers });\r\n            return next.handle(requestClone);\r\n        }));\r\n    }\r\n    /**\r\n     * Invoke interaction for the given set of scopes\r\n     * @param authRequest Request\r\n     * @param scopes Array of scopes for the request\r\n     * @returns Result from the interactive request\r\n     */\r\n    acquireTokenInteractively(authRequest, scopes) {\r\n        if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n            return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), { scopes }));\r\n        }\r\n        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n        const redirectStartPage = window.location.href;\r\n        this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), { scopes, redirectStartPage }));\r\n        return EMPTY;\r\n    }\r\n    /**\r\n     * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n     * @param endpoint Url of the request\r\n     * @param httpMethod Http method of the request\r\n     * @returns Array of scopes, or null if not found\r\n     *\r\n     */\r\n    getScopesForEndpoint(endpoint, httpMethod) {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        // Ensures endpoints and protected resources compared are normalized\r\n        const normalizedEndpoint = this.location.normalize(endpoint);\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\r\n        // Check absolute urls of resources first before checking relative to prevent incorrect matching where multiple resources have similar relative urls\r\n        if (matchingProtectedResources.absoluteResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.absoluteResources, httpMethod);\r\n        }\r\n        else if (matchingProtectedResources.relativeResources.length > 0) {\r\n            return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources.relativeResources, httpMethod);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Finds resource endpoints that match request endpoint\r\n     * @param protectedResourcesEndpoints\r\n     * @param endpoint\r\n     * @returns\r\n     */\r\n    matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\r\n        const matchingResources = { absoluteResources: [], relativeResources: [] };\r\n        protectedResourcesEndpoints.forEach(key => {\r\n            // Normalizes and adds resource to matchingResources.absoluteResources if key matches endpoint. StringUtils.matchPattern accounts for wildcards\r\n            const normalizedKey = this.location.normalize(key);\r\n            if (StringUtils.matchPattern(normalizedKey, endpoint)) {\r\n                matchingResources.absoluteResources.push(key);\r\n            }\r\n            // Get url components for relative urls\r\n            const absoluteKey = this.getAbsoluteUrl(key);\r\n            const keyComponents = new UrlString(absoluteKey).getUrlComponents();\r\n            const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\r\n            const endpointComponents = new UrlString(absoluteEndpoint).getUrlComponents();\r\n            // Normalized key should include query strings if applicable\r\n            const relativeNormalizedKey = keyComponents.QueryString ? `${keyComponents.AbsolutePath}?${keyComponents.QueryString}` : this.location.normalize(keyComponents.AbsolutePath);\r\n            // Add resource to matchingResources.relativeResources if same origin, relativeKey matches endpoint, and is not empty\r\n            if (keyComponents.HostNameAndPort === endpointComponents.HostNameAndPort && StringUtils.matchPattern(relativeNormalizedKey, absoluteEndpoint) && relativeNormalizedKey !== \"\" && relativeNormalizedKey !== \"/*\") {\r\n                matchingResources.relativeResources.push(key);\r\n            }\r\n        });\r\n        return matchingResources;\r\n    }\r\n    /**\r\n     * Transforms relative urls to absolute urls\r\n     * @param url\r\n     * @returns\r\n     */\r\n    getAbsoluteUrl(url) {\r\n        const link = this._document.createElement(\"a\");\r\n        link.href = url;\r\n        return link.href;\r\n    }\r\n    /**\r\n     * Finds scopes from first matching endpoint with HTTP method that matches request\r\n     * @param protectedResourceMap Protected resource map\r\n     * @param endpointArray Array of resources that match request endpoint\r\n     * @param httpMethod Http method of the request\r\n     * @returns\r\n     */\r\n    matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\r\n        const allMatchedScopes = [];\r\n        // Check each matched endpoint for matching HttpMethod and scopes\r\n        endpointArray.forEach(matchedEndpoint => {\r\n            const scopesForEndpoint = [];\r\n            const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\r\n            // Return if resource is unprotected\r\n            if (methodAndScopesArray === null) {\r\n                allMatchedScopes.push(null);\r\n                return;\r\n            }\r\n            methodAndScopesArray.forEach(entry => {\r\n                // Entry is either array of scopes or ProtectedResourceScopes object\r\n                if (typeof entry === \"string\") {\r\n                    scopesForEndpoint.push(entry);\r\n                }\r\n                else {\r\n                    // Ensure methods being compared are normalized\r\n                    const normalizedRequestMethod = httpMethod.toLowerCase();\r\n                    const normalizedResourceMethod = entry.httpMethod.toLowerCase();\r\n                    // Method in protectedResourceMap matches request http method\r\n                    if (normalizedResourceMethod === normalizedRequestMethod) {\r\n                        // Validate if scopes comes null to unprotect the resource in a certain http method \r\n                        if (entry.scopes === null) {\r\n                            allMatchedScopes.push(null);\r\n                        }\r\n                        else {\r\n                            entry.scopes.forEach((scope) => {\r\n                                scopesForEndpoint.push(scope);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            // Only add to all scopes if scopes for endpoint and method is found\r\n            if (scopesForEndpoint.length > 0) {\r\n                allMatchedScopes.push(scopesForEndpoint);\r\n            }\r\n        });\r\n        if (allMatchedScopes.length > 0) {\r\n            if (allMatchedScopes.length > 1) {\r\n                this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\r\n            }\r\n            // Returns scopes for first matching endpoint\r\n            return allMatchedScopes[0];\r\n        }\r\n        return null;\r\n    }\r\n}\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(t) { return new (t || MsalInterceptor)(ɵngcc0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(DOCUMENT)); };\nMsalInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalInterceptor, factory: MsalInterceptor.ɵfac });\r\nMsalInterceptor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MSAL_INTERCEPTOR_CONFIG,] }] },\r\n    { type: MsalService },\r\n    { type: Location },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MSAL_INTERCEPTOR_CONFIG]\n            }] }, { type: MsalService }, { type: ɵngcc1.Location }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalRedirectComponent {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    ngOnInit() {\r\n        this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\r\n        this.authService.handleRedirectObservable().subscribe();\r\n    }\r\n}\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(t) { return new (t || MsalRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(MsalService)); };\nMsalRedirectComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MsalRedirectComponent, selectors: [[\"app-redirect\"]], decls: 0, vars: 0, template: function MsalRedirectComponent_Template(rf, ctx) { }, encapsulation: 2 });\r\nMsalRedirectComponent.ctorParameters = () => [\r\n    { type: MsalService }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalRedirectComponent, [{\n        type: Component,\n        args: [{\n                selector: \"app-redirect\",\n                template: \"\"\n            }]\n    }], function () { return [{ type: MsalService }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass MsalModule {\r\n    static forRoot(msalInstance, guardConfig, interceptorConfig) {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n}\nMsalModule.ɵfac = function MsalModule_Factory(t) { return new (t || MsalModule)(); };\nMsalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MsalModule });\nMsalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MsalGuard,\n        MsalBroadcastService\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MsalRedirectComponent],\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    MsalGuard,\n                    MsalBroadcastService\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MsalModule, { declarations: function () { return [MsalRedirectComponent]; }, imports: function () { return [CommonModule]; } }); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md\r\n */\r\nclass MsalCustomNavigationClient extends NavigationClient {\r\n    constructor(authService, router, location) {\r\n        super();\r\n        this.authService = authService;\r\n        this.router = router;\r\n        this.location = location;\r\n    }\r\n    navigateInternal(url, options) {\r\n        const _super = Object.create(null, {\r\n            navigateInternal: { get: () => super.navigateInternal }\r\n        });\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\r\n            this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\r\n            this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\r\n            // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\r\n            if (options.noHistory) {\r\n                return _super.navigateInternal.call(this, url, options);\r\n            }\r\n            else {\r\n                // Normalizing newUrl if no query string\r\n                const urlComponents = new UrlString(url).getUrlComponents();\r\n                const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\r\n                this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });\r\n            }\r\n            return Promise.resolve(options.noHistory);\r\n        });\r\n    }\r\n}\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) { return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc1.Location)); };\nMsalCustomNavigationClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MsalCustomNavigationClient, factory: MsalCustomNavigationClient.ɵfac });\r\nMsalCustomNavigationClient.ctorParameters = () => [\r\n    { type: MsalService },\r\n    { type: Router },\r\n    { type: Location }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n        type: Injectable\n    }], function () { return [{ type: MsalService }, { type: ɵngcc2.Router }, { type: ɵngcc1.Location }]; }, null); })();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService };\n\n"]},"metadata":{},"sourceType":"module"}