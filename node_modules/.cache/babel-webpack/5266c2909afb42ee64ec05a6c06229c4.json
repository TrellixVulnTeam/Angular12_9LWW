{"ast":null,"code":"import { IgoMap, DataSourceService, LayerService, moveToOlFeatures, FeatureMotion, featureToOl, SpatialFilterService, SpatialFilterType, SpatialFilterItemType } from '@igo2/geo';\nimport { MessageService, LanguageService } from '@igo2/core';\nimport { EntityStore } from '@igo2/common';\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\nimport { BehaviorSubject } from 'rxjs';\nimport * as olstyle from 'ol/style';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/geo\";\nimport * as i2 from \"@igo2/core\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@igo2/common\";\nimport * as i5 from \"@angular/common\";\n\nfunction AppSpatialFilterComponent_ng_container_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"igo-feature-details\", 8);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const feature_r1 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"feature\", feature_r1);\n  }\n}\n\nexport let AppSpatialFilterComponent = /*#__PURE__*/(() => {\n  class AppSpatialFilterComponent {\n    constructor(spatialFilterService, dataSourceService, layerService, messageService, languageService) {\n      this.spatialFilterService = spatialFilterService;\n      this.dataSourceService = dataSourceService;\n      this.layerService = layerService;\n      this.messageService = messageService;\n      this.languageService = languageService;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          }\n        }\n      });\n      this.view = {\n        center: [-71.9, 46.9],\n        zoom: 10\n      };\n      this.itemType = SpatialFilterItemType.Address;\n      this.layers = [];\n      this.selectedFeature$ = new BehaviorSubject(undefined);\n      this.format = new olFormatGeoJSON();\n      this.store = new EntityStore([]); // Store to print results at the end\n\n      this.spatialListStore = new EntityStore([]);\n      this.loading = false;\n      this.dataSourceService.createAsyncDataSource({\n        type: 'osm'\n      }).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'OSM',\n          source: dataSource,\n          baseLayer: true,\n          visible: true\n        }));\n      });\n    }\n\n    getOutputType(event) {\n      this.type = event;\n      this.queryType = undefined;\n      this.radius = undefined;\n    }\n\n    getOutputQueryType(event) {\n      this.queryType = event;\n\n      if (this.queryType) {\n        this.loadFilterList();\n      }\n    }\n\n    loadFilterList() {\n      this.spatialFilterService.loadFilterList(this.queryType).subscribe(features => {\n        features.sort((a, b) => {\n          if (a.properties.nom < b.properties.nom) {\n            return -1;\n          }\n\n          if (a.properties.nom > b.properties.nom) {\n            return 1;\n          }\n\n          return 0;\n        });\n        this.spatialListStore.clear();\n        this.spatialListStore.load(features);\n      });\n    }\n\n    getOutputToggleSearch() {\n      this.loadThematics();\n    }\n\n    getOutputClearSearch() {\n      this.zone = undefined;\n      this.queryType = undefined;\n    }\n\n    loadThematics() {\n      this.loading = true;\n      this.tryAddFeaturesToMap([this.zone]);\n\n      if (!this.thematics) {\n        const theme = {\n          name: ''\n        };\n        this.thematics = [theme];\n      }\n\n      if (this.type === SpatialFilterType.Polygon) {\n        this.radius = undefined;\n      }\n\n      this.thematics.forEach(thematic => {\n        this.spatialFilterService.loadFilterItem(this.zone, this.itemType, this.queryType, thematic, this.radius).subscribe(features => {\n          this.store.insertMany(features);\n          const featuresPoint = [];\n          const featuresLinePoly = [];\n          let idPoint;\n          let idLinePoly;\n          features.forEach(feature => {\n            if (feature.geometry.type === 'Point') {\n              featuresPoint.push(feature);\n              idPoint = feature.meta.id;\n            } else {\n              featuresLinePoly.push(feature);\n              idLinePoly = feature.meta.id;\n            }\n          });\n          this.tryAddPointToMap(featuresPoint, idPoint);\n          this.tryAddLayerToMap(featuresLinePoly, idLinePoly);\n          this.loading = false;\n\n          if (features.length >= 10000) {\n            this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.maxSizeAlert'), this.languageService.translate.instant('igo.geo.spatialFilter.warning'), {\n              timeOut: 10000\n            });\n          }\n\n          if (!features.length) {\n            this.messageService.alert(this.languageService.translate.instant('igo.geo.spatialFilter.zeroResults'), this.languageService.translate.instant('igo.geo.spatialFilter.warning'), {\n              timeOut: 10000\n            });\n          }\n        });\n      });\n    }\n\n    onZoneChange(feature) {\n      this.zone = feature;\n\n      if (feature) {\n        this.tryAddFeaturesToMap([feature]);\n        this.zoomToFeatureExtent(feature);\n      }\n    }\n    /**\r\n     * Try to add zone feature to the map overlay\r\n     */\n\n\n    tryAddFeaturesToMap(features) {\n      let i = 1;\n\n      for (const feature of features) {\n        if (this.type === SpatialFilterType.Predefined) {\n          for (const layer of this.map.layers) {\n            if (layer.options._internal && layer.options._internal.code === feature.properties.code) {\n              return;\n            }\n\n            if (layer.title.startsWith('Zone')) {\n              this.map.removeLayer(layer);\n            }\n          }\n        }\n\n        for (const layer of this.map.layers) {\n          if (layer.title.startsWith('Zone')) {\n            i++;\n          }\n        }\n\n        this.dataSourceService.createAsyncDataSource({\n          type: 'vector',\n          queryable: true\n        }).subscribe(dataSource => {\n          const olLayer = this.layerService.createLayer({\n            title: 'Zone ' + i,\n            _internal: {\n              code: this.type === SpatialFilterType.Predefined ? feature.properties.code : undefined\n            },\n            source: dataSource,\n            visible: true,\n            style: (_feature, resolution) => {\n              const coordinates = features[0].coordinates;\n              return new olstyle.Style({\n                image: new olstyle.Circle({\n                  radius: coordinates ? this.radius / Math.cos(Math.PI / 180 * coordinates[1]) / resolution : undefined,\n                  fill: new olstyle.Fill({\n                    color: 'rgba(200, 200, 20, 0.2)'\n                  }),\n                  stroke: new olstyle.Stroke({\n                    width: 1,\n                    color: 'orange'\n                  })\n                }),\n                stroke: new olstyle.Stroke({\n                  width: 1,\n                  color: 'orange'\n                }),\n                fill: new olstyle.Fill({\n                  color: 'rgba(200, 200, 20, 0.2)'\n                })\n              });\n            }\n          });\n          const featuresOl = features.map(f => {\n            return featureToOl(f, this.map.projection);\n          });\n          const ol = dataSource.ol;\n          ol.addFeatures(featuresOl);\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n      }\n    }\n    /**\r\n     * Try to point features to the map\r\n     * Necessary to create clusters\r\n     */\n\n\n    tryAddPointToMap(features, id) {\n      let i = 1;\n\n      if (features.length >= 1) {\n        if (this.map === undefined) {\n          return;\n        }\n\n        for (const layer of this.map.layers) {\n          if (layer.title.startsWith(features[0].meta.title)) {\n            i++;\n          }\n        }\n\n        this.dataSourceService.createAsyncDataSource({\n          type: 'cluster',\n          id,\n          queryable: true,\n          distance: 120,\n          meta: {\n            title: 'Cluster'\n          }\n        }).subscribe(dataSource => {\n          const olLayer = this.layerService.createLayer({\n            title: features[0].meta.title + ' ' + i,\n            source: dataSource,\n            visible: true,\n            clusterParam: {\n              clusterRanges: [{\n                minRadius: 1,\n                maxRadius: 5,\n                style: {}\n              }]\n            }\n          });\n          const featuresOl = features.map(feature => {\n            return featureToOl(feature, this.map.projection);\n          });\n          const ol = dataSource.ol;\n          ol.getSource().addFeatures(featuresOl);\n\n          if (this.map.layers.find(layer => layer.id === olLayer.id)) {\n            this.map.removeLayer(this.map.layers.find(layer => layer.id === olLayer.id));\n            i = i - 1;\n            olLayer.title = features[0].meta.title + ' ' + i;\n            olLayer.options.title = olLayer.title;\n          }\n\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n      }\n    }\n    /**\r\n     * Try to add line or polygon features to the map\r\n     */\n\n\n    tryAddLayerToMap(features, id) {\n      let i = 1;\n\n      if (features.length > 1) {\n        if (this.map === undefined) {\n          return;\n        }\n\n        for (const layer of this.map.layers) {\n          if (layer.title.startsWith(features[0].meta.title)) {\n            i++;\n          }\n        }\n\n        this.dataSourceService.createAsyncDataSource({\n          type: 'vector',\n          id,\n          queryable: true\n        }).subscribe(dataSource => {\n          const olLayer = this.layerService.createLayer({\n            title: features[0].meta.title + ' ' + i,\n            source: dataSource,\n            visible: true\n          });\n          const featuresOl = features.map(feature => {\n            return featureToOl(feature, this.map.projection);\n          });\n          const ol = dataSource.ol;\n          ol.addFeatures(featuresOl);\n\n          if (this.map.layers.find(layer => layer.id === olLayer.id)) {\n            this.map.removeLayer(this.map.layers.find(layer => layer.id === olLayer.id));\n            i = i - 1;\n            olLayer.title = features[0].meta.title + ' ' + i;\n            olLayer.options.title = olLayer.title;\n          }\n\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n      }\n    }\n\n    zoomToFeatureExtent(feature) {\n      if (feature) {\n        const olFeature = this.format.readFeature(feature, {\n          dataProjection: feature.projection,\n          featureProjection: this.map.projection\n        });\n        moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\n      }\n    }\n    /**\r\n     * Permit the query action on one item result\r\n     */\n\n\n    handleQueryResults(results) {\n      const features = results.features;\n      let feature;\n\n      if (features.length) {\n        feature = features[0];\n      }\n\n      this.selectedFeature$.next(feature);\n    }\n\n  }\n\n  AppSpatialFilterComponent.ɵfac = function AppSpatialFilterComponent_Factory(t) {\n    return new (t || AppSpatialFilterComponent)(i0.ɵɵdirectiveInject(i1.SpatialFilterService), i0.ɵɵdirectiveInject(i1.DataSourceService), i0.ɵɵdirectiveInject(i1.LayerService), i0.ɵɵdirectiveInject(i2.MessageService), i0.ɵɵdirectiveInject(i2.LanguageService));\n  };\n\n  AppSpatialFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppSpatialFilterComponent,\n    selectors: [[\"app-spatial-filter\"]],\n    inputs: {\n      type: \"type\",\n      itemType: \"itemType\",\n      freehandDrawIsActive: \"freehandDrawIsActive\"\n    },\n    decls: 25,\n    vars: 17,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/spatial-filter\"], [\"igoOverlay\", \"\", \"igoQuery\", \"\", 3, \"map\", \"view\", \"queryFeatures\", \"query\"], [\"color\", \"primary\", 3, \"map\"], [\"title\", \"Spatial Filter\"], [3, \"store\", \"selectedQueryType\", \"zone\", \"eventType\", \"eventQueryType\", \"zoneChange\"], [3, \"type\", \"queryType\", \"map\", \"zone\", \"loading\", \"store\", \"layers\", \"radiusEvent\", \"freehandControl\", \"drawZoneEvent\", \"itemTypeChange\", \"thematicChange\", \"toggleSearch\", \"clearButtonEvent\", \"clearSearchEvent\"], [\"title\", \"Details\"], [4, \"ngIf\"], [3, \"feature\"]],\n    template: function AppSpatialFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Spatial filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"npm install --save moment@2.22.2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"li\");\n        i0.ɵɵtext(9, \"npm install --save @mat-datetimepicker/core@3.0.0-beta.0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"li\");\n        i0.ɵɵtext(11, \"Dependencies: LanguageService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13, \" See the \");\n        i0.ɵɵelementStart(14, \"a\", 0);\n        i0.ɵɵtext(15, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"hr\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"igo-map-browser\", 1);\n        i0.ɵɵlistener(\"query\", function AppSpatialFilterComponent_Template_igo_map_browser_query_17_listener($event) {\n          return ctx.handleQueryResults($event);\n        });\n        i0.ɵɵelement(18, \"igo-zoom-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"igo-panel\", 3);\n        i0.ɵɵelementStart(20, \"igo-spatial-filter-type\", 4);\n        i0.ɵɵlistener(\"eventType\", function AppSpatialFilterComponent_Template_igo_spatial_filter_type_eventType_20_listener($event) {\n          return ctx.getOutputType($event);\n        })(\"eventQueryType\", function AppSpatialFilterComponent_Template_igo_spatial_filter_type_eventQueryType_20_listener($event) {\n          return ctx.getOutputQueryType($event);\n        })(\"zoneChange\", function AppSpatialFilterComponent_Template_igo_spatial_filter_type_zoneChange_20_listener($event) {\n          return ctx.onZoneChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"igo-spatial-filter-item\", 5);\n        i0.ɵɵlistener(\"radiusEvent\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_radiusEvent_21_listener($event) {\n          return ctx.radius = $event;\n        })(\"freehandControl\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_freehandControl_21_listener($event) {\n          return ctx.freehandDrawIsActive = $event;\n        })(\"drawZoneEvent\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_drawZoneEvent_21_listener($event) {\n          return ctx.zone = $event;\n        })(\"itemTypeChange\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_itemTypeChange_21_listener($event) {\n          return ctx.itemType = $event;\n        })(\"thematicChange\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_thematicChange_21_listener($event) {\n          return ctx.thematics = $event;\n        })(\"toggleSearch\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_toggleSearch_21_listener() {\n          return ctx.getOutputToggleSearch();\n        })(\"clearButtonEvent\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_clearButtonEvent_21_listener($event) {\n          return ctx.layers = $event;\n        })(\"clearSearchEvent\", function AppSpatialFilterComponent_Template_igo_spatial_filter_item_clearSearchEvent_21_listener() {\n          return ctx.getOutputClearSearch();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"igo-panel\", 6);\n        i0.ɵɵtemplate(23, AppSpatialFilterComponent_ng_container_23_Template, 2, 1, \"ng-container\", 7);\n        i0.ɵɵpipe(24, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view)(\"queryFeatures\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"store\", ctx.spatialListStore)(\"selectedQueryType\", ctx.queryType)(\"zone\", ctx.zone);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"type\", ctx.type)(\"queryType\", ctx.queryType)(\"map\", ctx.map)(\"zone\", ctx.zone)(\"loading\", ctx.loading)(\"store\", ctx.store)(\"layers\", ctx.layers);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(24, 15, ctx.selectedFeature$));\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardSubtitle, i3.MatCardTitle, i3.MatCardContent, i1.MapBrowserComponent, i1.QueryDirective, i1.ZoomButtonComponent, i4.PanelComponent, i1.SpatialFilterTypeComponent, i1.SpatialFilterItemComponent, i5.NgIf, i1.FeatureDetailsComponent],\n    pipes: [i5.AsyncPipe],\n    styles: [\"igo-map-browser[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 300px;\\n}\\n\\nigo-panel[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding-top: 10px;\\n}\\n\\nigo-form[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\nigo-spatial-filter-item[_ngcontent-%COMP%]     .thematics-header {\\n  max-width: 225px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwYXRpYWwtZmlsdGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRiIsImZpbGUiOiJzcGF0aWFsLWZpbHRlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlnby1tYXAtYnJvd3NlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDMwMHB4O1xufVxuXG5pZ28tcGFuZWwge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZy10b3A6IDEwcHg7XG59XG5cbmlnby1mb3JtIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuaWdvLXNwYXRpYWwtZmlsdGVyLWl0ZW0gOjpuZy1kZWVwIC50aGVtYXRpY3MtaGVhZGVyIHtcbiAgbWF4LXdpZHRoOiAyMjVweDtcbn0iXX0= */\"]\n  });\n  return AppSpatialFilterComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\demo\\src\\app\\geo\\spatial-filter\\spatial-filter.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\demo\\src\\app\\geo\\spatial-filter\\spatial-filter.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core';\nimport {\n  IgoMap,\n  DataSourceService,\n  LayerService,\n  Feature,\n  moveToOlFeatures,\n  FeatureMotion,\n  ClusterDataSource,\n  featureToOl,\n  DataSource,\n  QueryableDataSourceOptions,\n  Layer,\n  SpatialFilterService,\n  SpatialFilterQueryType,\n  SpatialFilterType,\n  SpatialFilterItemType,\n  SpatialFilterThematic\n} from '@igo2/geo';\nimport { MessageService, LanguageService } from '@igo2/core';\nimport { EntityStore } from '@igo2/common';\nimport olFormatGeoJSON from 'ol/format/GeoJSON';\nimport { BehaviorSubject } from 'rxjs';\nimport * as olstyle from 'ol/style';\nimport olSourceCluster from 'ol/source/Cluster';\nimport olSourceVector from 'ol/source/Vector';\nimport type { default as OlGeometry } from 'ol/geom/Geometry';\n\n@Component({\n  selector: 'app-spatial-filter',\n  templateUrl: './spatial-filter.component.html',\n  styleUrls: ['./spatial-filter.component.scss']\n})\nexport class AppSpatialFilterComponent {\n  public map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      }\n    }\n  });\n\n  view = {\n    center: [-71.9, 46.9],\n    zoom: 10\n  };\n\n  @Input() type: SpatialFilterType;\n  @Input() itemType: SpatialFilterItemType = SpatialFilterItemType.Address;\n  @Input() freehandDrawIsActive: boolean;\n\n  public layers: Layer[] = [];\n\n  public queryType: SpatialFilterQueryType;\n  public thematics: SpatialFilterThematic[];\n  public zone: Feature;\n  public radius: number;\n\n  public selectedFeature$: BehaviorSubject<Feature> = new BehaviorSubject(\n    undefined\n  );\n\n  private format = new olFormatGeoJSON();\n\n  public store = new EntityStore<Feature>([]); // Store to print results at the end\n\n  public spatialListStore = new EntityStore<Feature>([]);\n\n  public loading = false;\n\n  constructor(\n    private spatialFilterService: SpatialFilterService,\n    private dataSourceService: DataSourceService,\n    private layerService: LayerService,\n    private messageService: MessageService,\n    private languageService: LanguageService\n  ) {\n    this.dataSourceService\n      .createAsyncDataSource({\n        type: 'osm'\n      })\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'OSM',\n            source: dataSource,\n            baseLayer: true,\n            visible: true\n          })\n        );\n      });\n  }\n\n  getOutputType(event: SpatialFilterType) {\n    this.type = event;\n    this.queryType = undefined;\n    this.radius = undefined;\n  }\n\n  getOutputQueryType(event: SpatialFilterQueryType) {\n    this.queryType = event;\n    if (this.queryType) {\n      this.loadFilterList();\n    }\n  }\n\n  private loadFilterList() {\n    this.spatialFilterService\n      .loadFilterList(this.queryType)\n      .subscribe((features: Feature[]) => {\n        features.sort((a, b) => {\n          if (a.properties.nom < b.properties.nom) {\n            return -1;\n          }\n          if (a.properties.nom > b.properties.nom) {\n            return 1;\n          }\n          return 0;\n        });\n        this.spatialListStore.clear();\n        this.spatialListStore.load(features);\n      });\n  }\n\n  getOutputToggleSearch() {\n    this.loadThematics();\n  }\n\n  getOutputClearSearch() {\n    this.zone = undefined;\n    this.queryType = undefined;\n  }\n\n  private loadThematics() {\n    this.loading = true;\n    this.tryAddFeaturesToMap([this.zone]);\n    if (!this.thematics) {\n      const theme: SpatialFilterThematic = {\n        name: ''\n      };\n      this.thematics = [theme];\n    }\n    if (this.type === SpatialFilterType.Polygon) {\n      this.radius = undefined;\n    }\n    this.thematics.forEach(thematic => {\n      this.spatialFilterService\n        .loadFilterItem(\n          this.zone,\n          this.itemType,\n          this.queryType,\n          thematic,\n          this.radius\n        )\n        .subscribe((features: Feature[]) => {\n          this.store.insertMany(features);\n          const featuresPoint: Feature[] = [];\n          const featuresLinePoly: Feature[] = [];\n          let idPoint;\n          let idLinePoly;\n          features.forEach(feature => {\n            if (feature.geometry.type === 'Point') {\n              featuresPoint.push(feature);\n              idPoint = feature.meta.id;\n            } else {\n              featuresLinePoly.push(feature);\n              idLinePoly = feature.meta.id;\n            }\n          });\n          this.tryAddPointToMap(featuresPoint, idPoint);\n          this.tryAddLayerToMap(featuresLinePoly, idLinePoly);\n          this.loading = false;\n          if (features.length >= 10000) {\n            this.messageService.alert(\n              this.languageService.translate.instant(\n                'igo.geo.spatialFilter.maxSizeAlert'\n              ),\n              this.languageService.translate.instant(\n                'igo.geo.spatialFilter.warning'\n              ),\n              { timeOut: 10000 }\n            );\n          }\n          if (!features.length) {\n            this.messageService.alert(\n              this.languageService.translate.instant(\n                'igo.geo.spatialFilter.zeroResults'\n              ),\n              this.languageService.translate.instant(\n                'igo.geo.spatialFilter.warning'\n              ),\n              { timeOut: 10000 }\n            );\n          }\n        });\n    });\n  }\n\n  onZoneChange(feature: Feature) {\n    this.zone = feature;\n    if (feature) {\n      this.tryAddFeaturesToMap([feature]);\n      this.zoomToFeatureExtent(feature);\n    }\n  }\n\n  /**\n   * Try to add zone feature to the map overlay\n   */\n  public tryAddFeaturesToMap(features: Feature[]) {\n    let i = 1;\n    for (const feature of features) {\n      if (this.type === SpatialFilterType.Predefined) {\n        for (const layer of this.map.layers) {\n          if (\n            layer.options._internal &&\n            layer.options._internal.code === feature.properties.code\n          ) {\n            return;\n          }\n          if (layer.title.startsWith('Zone')) {\n            this.map.removeLayer(layer);\n          }\n        }\n      }\n      for (const layer of this.map.layers) {\n        if (layer.title.startsWith('Zone')) {\n          i++;\n        }\n      }\n      this.dataSourceService\n        .createAsyncDataSource({\n          type: 'vector',\n          queryable: true\n        } as QueryableDataSourceOptions)\n        .subscribe((dataSource: DataSource) => {\n          const olLayer = this.layerService.createLayer({\n            title: ('Zone ' + i) as string,\n            _internal: {\n              code:\n                this.type === SpatialFilterType.Predefined\n                  ? feature.properties.code\n                  : undefined\n            },\n            source: dataSource,\n            visible: true,\n            style: (_feature, resolution) => {\n              const coordinates = (features[0] as any).coordinates;\n              return new olstyle.Style({\n                image: new olstyle.Circle({\n                  radius: coordinates\n                    ? this.radius /\n                      Math.cos((Math.PI / 180) * coordinates[1]) /\n                      resolution\n                    : undefined,\n                  fill: new olstyle.Fill({\n                    color: 'rgba(200, 200, 20, 0.2)'\n                  }),\n                  stroke: new olstyle.Stroke({\n                    width: 1,\n                    color: 'orange'\n                  })\n                }),\n                stroke: new olstyle.Stroke({\n                  width: 1,\n                  color: 'orange'\n                }),\n                fill: new olstyle.Fill({\n                  color: 'rgba(200, 200, 20, 0.2)'\n                })\n              });\n            }\n          });\n          const featuresOl = features.map(f => {\n            return featureToOl(f, this.map.projection);\n          });\n          const ol = dataSource.ol as olSourceVector<OlGeometry> | olSourceCluster;\n          ol.addFeatures(featuresOl);\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n    }\n  }\n\n  /**\n   * Try to point features to the map\n   * Necessary to create clusters\n   */\n  private tryAddPointToMap(features: Feature[], id) {\n    let i = 1;\n    if (features.length >= 1) {\n      if (this.map === undefined) {\n        return;\n      }\n      for (const layer of this.map.layers) {\n        if (layer.title.startsWith(features[0].meta.title)) {\n          i++;\n        }\n      }\n      this.dataSourceService\n        .createAsyncDataSource({\n          type: 'cluster',\n          id,\n          queryable: true,\n          distance: 120,\n          meta: {\n            title: 'Cluster'\n          }\n        } as QueryableDataSourceOptions)\n        .subscribe((dataSource: ClusterDataSource) => {\n          const olLayer = this.layerService.createLayer({\n            title: (features[0].meta.title + ' ' + i) as string,\n            source: dataSource,\n            visible: true,\n            clusterParam: {\n              clusterRanges: [{ minRadius: 1, maxRadius: 5, style: {} }]\n            }\n          });\n          const featuresOl = features.map(feature => {\n            return featureToOl(feature, this.map.projection);\n          });\n          const ol = dataSource.ol as olSourceCluster;\n          ol.getSource().addFeatures(featuresOl);\n          if (this.map.layers.find(layer => layer.id === olLayer.id)) {\n            this.map.removeLayer(\n              this.map.layers.find(layer => layer.id === olLayer.id)\n            );\n            i = i - 1;\n            olLayer.title = (features[0].meta.title + ' ' + i) as string;\n            olLayer.options.title = olLayer.title;\n          }\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n    }\n  }\n\n  /**\n   * Try to add line or polygon features to the map\n   */\n  private tryAddLayerToMap(features: Feature[], id) {\n    let i = 1;\n    if (features.length > 1) {\n      if (this.map === undefined) {\n        return;\n      }\n      for (const layer of this.map.layers) {\n        if (layer.title.startsWith(features[0].meta.title)) {\n          i++;\n        }\n      }\n      this.dataSourceService\n        .createAsyncDataSource({\n          type: 'vector',\n          id,\n          queryable: true\n        } as QueryableDataSourceOptions)\n        .subscribe((dataSource: DataSource) => {\n          const olLayer = this.layerService.createLayer({\n            title: (features[0].meta.title + ' ' + i) as string,\n            source: dataSource,\n            visible: true\n          });\n          const featuresOl = features.map(feature => {\n            return featureToOl(feature, this.map.projection);\n          });\n          const ol = dataSource.ol as olSourceVector<OlGeometry> | olSourceCluster;\n          ol.addFeatures(featuresOl);\n          if (this.map.layers.find(layer => layer.id === olLayer.id)) {\n            this.map.removeLayer(\n              this.map.layers.find(layer => layer.id === olLayer.id)\n            );\n            i = i - 1;\n            olLayer.title = (features[0].meta.title + ' ' + i) as string;\n            olLayer.options.title = olLayer.title;\n          }\n          this.map.addLayer(olLayer);\n          this.layers.push(olLayer);\n        });\n    }\n  }\n\n  zoomToFeatureExtent(feature) {\n    if (feature) {\n      const olFeature = this.format.readFeature(feature, {\n        dataProjection: feature.projection,\n        featureProjection: this.map.projection\n      });\n      moveToOlFeatures(this.map, [olFeature], FeatureMotion.Zoom);\n    }\n  }\n\n  /**\n   * Permit the query action on one item result\n   */\n  handleQueryResults(results) {\n    const features: Feature[] = results.features;\n    let feature;\n    if (features.length) {\n      feature = features[0];\n    }\n    this.selectedFeature$.next(feature);\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Spatial filter</mat-card-title>\n  <mat-card-content>\n    <li>npm install --save moment@2.22.2</li>\n    <li>npm install --save @mat-datetimepicker/core@3.0.0-beta.0</li>\n    <li>Dependencies: LanguageService</li>\n\n    <br>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/spatial-filter\">code of this example</a>\n    <hr>\n  </mat-card-content>\n\n  <igo-map-browser\n    [map]=\"map\"\n    [view]=\"view\"\n    igoOverlay igoQuery\n    (query)=\"handleQueryResults($event)\"\n    [queryFeatures]=\"true\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n  </igo-map-browser>\n\n  <igo-panel title=\"Spatial Filter\">\n    <igo-spatial-filter-type\n      [store]=\"spatialListStore\"\n      [selectedQueryType]=\"queryType\"\n      [zone]=\"zone\"\n      (eventType)=\"getOutputType($event)\"\n      (eventQueryType)=\"getOutputQueryType($event)\"\n      (zoneChange)=\"onZoneChange($event)\">\n    </igo-spatial-filter-type>\n\n    <igo-spatial-filter-item\n      [type]=\"type\"\n      [queryType]=\"queryType\"\n      [map]=\"map\"\n      [zone]=\"zone\"\n      [loading]=\"loading\"\n      [store]=\"store\"\n      [layers]=\"layers\"\n      (radiusEvent)=\"radius = $event\"\n      (freehandControl)=\"freehandDrawIsActive = $event\"\n      (drawZoneEvent)=\"zone = $event\"\n      (itemTypeChange)=\"itemType = $event\"\n      (thematicChange)=\"thematics = $event\"\n      (toggleSearch)=\"getOutputToggleSearch()\"\n      (clearButtonEvent)=\"layers = $event\"\n      (clearSearchEvent)=\"getOutputClearSearch()\">\n    </igo-spatial-filter-item>\n  </igo-panel>\n\n  <igo-panel title=\"Details\">\n    <ng-container *ngIf=\"selectedFeature$ | async as feature\">\n      <igo-feature-details [feature]=\"feature\"></igo-feature-details>\n    </ng-container>\n  </igo-panel>\n\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}