{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { PromptValue, Separators, GrantType, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\n\nvar AuthorizationCodeClient = function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n\n  function AuthorizationCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        queryString = this.createAuthCodeUrlQueryString(request);\n        return [2\n        /*return*/\n        , UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n\n\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null); // Deserialize hash fragment response parameters.\n\n    var hashUrlString = new UrlString(hashFragment); // Deserialize hash fragment response parameters.\n\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash()); // Get code response\n\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils); // throw when there is no auth code in the response\n\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n\n\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n\n    if (logoutRequest.account) {\n      // Clear given account.\n      this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\n    } else {\n      // Clear all accounts and tokens\n      this.cacheManager.clear();\n    }\n\n    var queryString = this.createLogoutUrlQueryString(logoutRequest); // Construct logout URI.\n\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId); // validate the redirectUri (to be a non null value)\n\n            parameterBuilder.addRedirectUri(request.redirectUri); // Add scope array, parameter builder will add default scopes and dedupe\n\n            parameterBuilder.addScopes(request.scopes); // add code: user set, not validated\n\n            parameterBuilder.addAuthorizationCode(request.code); // Add library metadata\n\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            } // add code_verifier if passed\n\n\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            cnfString = _a.sent();\n            parameterBuilder.addPopToken(cnfString);\n            _a.label = 2;\n\n          case 2:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            ccsCred = undefined;\n\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            } // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n\n\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n    var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n\n    parameterBuilder.addScopes(requestScopes); // validate the redirectUri (to be a non null value)\n\n    parameterBuilder.addRedirectUri(request.redirectUri); // generate the correlationId if not set by the user and add\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId); // add response_mode. If not passed in it defaults to query.\n\n    parameterBuilder.addResponseMode(request.responseMode); // add response_type = code\n\n    parameterBuilder.addResponseTypeCode(); // add library info parameters\n\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo); // add client_info=1\n\n    parameterBuilder.addClientInfo();\n\n    if (request.codeChallenge && request.codeChallengeMethod) {\n      parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n    }\n\n    if (request.prompt) {\n      parameterBuilder.addPrompt(request.prompt);\n    }\n\n    if (request.domainHint) {\n      parameterBuilder.addDomainHint(request.domainHint);\n    } // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n\n\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n      // AAD will throw if prompt=select_account is passed with an account hint\n      if (request.sid && request.prompt === PromptValue.NONE) {\n        // SessionID is only used in silent calls\n        this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n        parameterBuilder.addSid(request.sid);\n      } else if (request.account) {\n        var accountSid = this.extractAccountSid(request.account); // If account and loginHint are provided, we will check account first for sid before adding loginHint\n\n        if (accountSid && request.prompt === PromptValue.NONE) {\n          // SessionId is only used in silent calls\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n          parameterBuilder.addSid(accountSid);\n\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        } else if (request.loginHint) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        } else if (request.account.username) {\n          // Fallback to account username if provided\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n          parameterBuilder.addLoginHint(request.account.username);\n\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        }\n      } else if (request.loginHint) {\n        this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n        parameterBuilder.addLoginHint(request.loginHint);\n        parameterBuilder.addCcsUpn(request.loginHint);\n      }\n    } else {\n      this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n    }\n\n    if (request.nonce) {\n      parameterBuilder.addNonce(request.nonce);\n    }\n\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n\n\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n\n\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    if (account.idTokenClaims) {\n      var tokenClaims = account.idTokenClaims;\n      return tokenClaims.sid || null;\n    }\n\n    return null;\n  };\n\n  return AuthorizationCodeClient;\n}(BaseClient);\n\nexport { AuthorizationCodeClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js"],"names":["__extends","__awaiter","__generator","__assign","__spreadArrays","BaseClient","RequestParameterBuilder","PromptValue","Separators","GrantType","AuthenticationScheme","ResponseHandler","StringUtils","ClientAuthError","UrlString","AccountEntity","ClientConfigurationError","PopTokenGenerator","TimeUtils","buildClientInfoFromHomeAccountId","buildClientInfo","CcsCredentialType","AuthorizationCodeClient","_super","configuration","call","prototype","getAuthCodeUrl","request","queryString","_a","createAuthCodeUrlQueryString","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","reqTimestamp","response","responseHandler","label","logger","info","isEmpty","code","createTokenRequestCannotBeMadeError","nowSeconds","executeTokenRequest","sent","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","createEmptyLogoutRequestError","account","removeAccount","generateAccountCacheKey","clear","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","requestBody","queryParameters","ccsCredential","clientInfo","headers","endpoint","canonicalAuthority","scopes","createTokenRequestBody","createTokenQueryParameters","undefined","credential","uid","CLIENT_INFO_SEPARATOR","utid","type","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","clientAssertion","popTokenGenerator","cnfString","correlationId","ccsCred","addClientId","addRedirectUri","redirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","authenticationScheme","POP","generateCnf","addPopToken","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","requestScopes","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","SELECT_ACCOUNT","sid","NONE","addSid","accountSid","extractAccountSid","homeAccountId","loginHint","addLoginHint","username","nonce","addNonce","state","addState","extraQueryParameters","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","idTokenClaims","tokenClaims"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { PromptValue, Separators, GrantType, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { AccountEntity } from '../cache/entities/AccountEntity.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createAuthCodeUrlQueryString(request);\r\n                return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        if (!request || StringUtils.isEmpty(request.code)) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        if (logoutRequest.account) {\r\n            // Clear given account.\r\n            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\r\n        }\r\n        else {\r\n            // Clear all accounts and tokens\r\n            this.cacheManager.clear();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI.\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        cnfString = _a.sent();\r\n                        parameterBuilder.addPopToken(cnfString);\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n        parameterBuilder.addScopes(requestScopes);\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n        // generate the correlationId if not set by the user and add\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            }\r\n            else if (request.account) {\r\n                var accountSid = this.extractAccountSid(request.account);\r\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    // SessionId is only used in silent calls\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n                else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                }\r\n                else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        if (account.idTokenClaims) {\r\n            var tokenClaims = account.idTokenClaims;\r\n            return tokenClaims.sid || null;\r\n        }\r\n        return null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\nexport { AuthorizationCodeClient };\n"]},"metadata":{},"sourceType":"module"}