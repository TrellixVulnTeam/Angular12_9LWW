{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport * as olstyle from 'ol/style';\nimport { LanguageService } from '@igo2/core';\nimport { FormService } from '@igo2/common';\nimport { IgoMap, DataSourceService, LayerService } from '@igo2/geo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/core\";\nimport * as i2 from \"@igo2/common\";\nimport * as i3 from \"@igo2/geo\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\n\nfunction AppGeometryComponent_igo_form_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-form\", 4);\n    i0.ɵɵlistener(\"submitForm\", function AppGeometryComponent_igo_form_11_Template_igo_form_submitForm_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onSubmit($event);\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelement(2, \"igo-form-group\", 5);\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵelementStart(4, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppGeometryComponent_igo_form_11_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.fillForm();\n    });\n    i0.ɵɵtext(5, \" Fill Form \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AppGeometryComponent_igo_form_11_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.clearForm();\n    });\n    i0.ɵɵtext(7, \" Clear Form \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 8);\n    i0.ɵɵtext(9, \" Submit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const form_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"form\", form_r1)(\"formData\", i0.ɵɵpipeBind1(1, 4, ctx_r0.data$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"group\", form_r1.groups[0]);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.submitDisabled);\n  }\n}\n\nexport let AppGeometryComponent = /*#__PURE__*/(() => {\n  class AppGeometryComponent {\n    constructor(languageService, formService, dataSourceService, layerService) {\n      this.languageService = languageService;\n      this.formService = formService;\n      this.dataSourceService = dataSourceService;\n      this.layerService = layerService;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          },\n          scaleLine: true\n        }\n      });\n      this.view = {\n        center: [-73, 47.2],\n        zoom: 15\n      };\n      this.form$ = new BehaviorSubject(undefined);\n      this.data$ = new BehaviorSubject(undefined);\n      this.submitDisabled = true;\n    }\n\n    ngOnInit() {\n      this.dataSourceService.createAsyncDataSource({\n        type: 'osm'\n      }).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'OSM',\n          source: dataSource\n        }));\n      });\n      const fieldConfigs = [{\n        name: 'geometry',\n        title: 'Geometry',\n        options: {\n          validator: Validators.required\n        },\n        type: 'geometry',\n        inputs: {\n          map: this.map,\n          geometryTypeField: true,\n          geometryType: 'Polygon',\n          drawGuideField: true,\n          drawGuide: 50,\n          drawGuidePlaceholder: 'Draw Guide',\n          drawStyle: new olstyle.Style({\n            stroke: new olstyle.Stroke({\n              color: [255, 0, 0, 1],\n              width: 2\n            }),\n            fill: new olstyle.Fill({\n              color: [255, 0, 0, 0.2]\n            }),\n            image: new olstyle.Circle({\n              radius: 8,\n              stroke: new olstyle.Stroke({\n                color: [255, 0, 0, 1]\n              }),\n              fill: new olstyle.Fill({\n                color: [255, 0, 0, 0.2]\n              })\n            })\n          })\n        }\n      }, {\n        name: 'name',\n        title: 'Name',\n        options: {\n          validator: Validators.required\n        }\n      }];\n      const fields = fieldConfigs.map(config => this.formService.field(config));\n      const form = this.formService.form([], [this.formService.group({\n        name: 'info'\n      }, fields)]);\n      this.valueChanges$$ = form.control.valueChanges.subscribe(() => {\n        this.submitDisabled = !form.control.valid;\n      });\n      this.form$.next(form);\n    }\n\n    ngOnDestroy() {\n      this.valueChanges$$.unsubscribe();\n    }\n\n    fillForm() {\n      this.data$.next({\n        name: 'Place',\n        geometry: JSON.stringify({\n          type: 'Polygon',\n          coordinates: [[[-106, 42], [-107, 31], [-81, 32], [-82, 42], [-106, 42]]]\n        })\n      });\n    }\n\n    clearForm() {\n      this.form$.value.control.reset();\n    }\n\n    onSubmit(data) {\n      alert(JSON.stringify(data));\n    }\n\n  }\n\n  AppGeometryComponent.ɵfac = function AppGeometryComponent_Factory(t) {\n    return new (t || AppGeometryComponent)(i0.ɵɵdirectiveInject(i1.LanguageService), i0.ɵɵdirectiveInject(i2.FormService), i0.ɵɵdirectiveInject(i3.DataSourceService), i0.ɵɵdirectiveInject(i3.LayerService));\n  };\n\n  AppGeometryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppGeometryComponent,\n    selectors: [[\"app-geometry\"]],\n    decls: 13,\n    vars: 6,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/common/form\"], [3, \"map\", \"view\"], [\"color\", \"primary\", 3, \"map\"], [3, \"form\", \"formData\", \"submitForm\", 4, \"ngIf\"], [3, \"form\", \"formData\", \"submitForm\"], [3, \"group\"], [\"formButtons\", \"\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", \"color\", \"primary\", 3, \"click\"], [\"mat-flat-button\", \"\", \"type\", \"submit\", \"color\", \"primary\", 3, \"disabled\"]],\n    template: function AppGeometryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Geometry Form\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵtext(6, \" See the \");\n        i0.ɵɵelementStart(7, \"a\", 0);\n        i0.ɵɵtext(8, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"igo-map-browser\", 1);\n        i0.ɵɵelement(10, \"igo-zoom-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, AppGeometryComponent_igo_form_11_Template, 10, 6, \"igo-form\", 3);\n        i0.ɵɵpipe(12, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(12, 4, ctx.form$));\n      }\n    },\n    directives: [i4.MatCard, i4.MatCardSubtitle, i4.MatCardTitle, i4.MatCardContent, i3.MapBrowserComponent, i3.ZoomButtonComponent, i5.NgIf, i2.FormComponent, i2.FormGroupComponent, i6.MatButton],\n    pipes: [i5.AsyncPipe],\n    styles: [\"pre[_ngcontent-%COMP%], code[_ngcontent-%COMP%] {\\n  font-family: monospace, monospace;\\n}\\n\\npre[_ngcontent-%COMP%] {\\n  overflow: auto;\\n}\\n\\npre[_ngcontent-%COMP%]    > code[_ngcontent-%COMP%] {\\n  display: block;\\n  padding: 1rem;\\n  word-wrap: normal;\\n}\\n\\nigo-map-browser[_ngcontent-%COMP%] {\\n  width: 500px;\\n  height: 500px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlb21ldHJ5LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFLGlDQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxjQUFBO0FBRUY7O0FBQUE7RUFDRSxjQUFBO0VBQ0EsYUFBQTtFQUNBLGlCQUFBO0FBR0Y7O0FBQUE7RUFDRSxZQUFBO0VBQ0EsYUFBQTtBQUdGIiwiZmlsZSI6Imdlb21ldHJ5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsicHJlLFxuY29kZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbn1cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxucHJlID4gY29kZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiAxcmVtO1xuICB3b3JkLXdyYXA6IG5vcm1hbDtcbn1cblxuaWdvLW1hcC1icm93c2VyIHtcbiAgd2lkdGg6IDUwMHB4O1xuICBoZWlnaHQ6IDUwMHB4O1xufVxuIl19 */\"]\n  });\n  return AppGeometryComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\geometry\\geometry.component.ts","C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\geometry\\geometry.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport * as olstyle from 'ol/style';\n\nimport { LanguageService } from '@igo2/core';\nimport { Form, FormService } from '@igo2/common';\nimport { IgoMap, DataSourceService, LayerService } from '@igo2/geo';\n\n@Component({\n  selector: 'app-geometry',\n  templateUrl: './geometry.component.html',\n  styleUrls: ['./geometry.component.scss']\n})\nexport class AppGeometryComponent implements OnInit, OnDestroy {\n\n  map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      },\n      scaleLine: true\n    }\n  });\n\n  view = {\n    center: [-73, 47.2],\n    zoom: 15\n  };\n\n  form$ = new BehaviorSubject<Form>(undefined);\n\n  data$ = new BehaviorSubject<{[key: string]: any}>(undefined);\n\n  submitDisabled = true;\n\n  private valueChanges$$: Subscription;\n\n  constructor(\n    private languageService: LanguageService,\n    private formService: FormService,\n    private dataSourceService: DataSourceService,\n    private layerService: LayerService\n  ) {}\n\n  ngOnInit() {\n    this.dataSourceService\n      .createAsyncDataSource({\n        type: 'osm'\n      })\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'OSM',\n            source: dataSource\n          })\n        );\n      });\n\n    const fieldConfigs = [\n      {\n        name: 'geometry',\n        title: 'Geometry',\n        options:  {\n          validator: Validators.required\n        },\n        type: 'geometry',\n        inputs: {\n          map: this.map,\n          geometryTypeField: true,\n          geometryType: 'Polygon',\n          drawGuideField: true,\n          drawGuide: 50,\n          drawGuidePlaceholder: 'Draw Guide',\n          drawStyle: new olstyle.Style({\n            stroke: new olstyle.Stroke({\n              color: [255, 0, 0, 1],\n              width: 2\n            }),\n            fill:  new olstyle.Fill({\n              color: [255, 0, 0, 0.2]\n            }),\n            image: new olstyle.Circle({\n              radius: 8,\n              stroke: new olstyle.Stroke({\n                color: [255, 0, 0, 1]\n              }),\n              fill: new olstyle.Fill({\n                color: [255, 0, 0, 0.2]\n              })\n            })\n          })\n        }\n      },\n      {\n        name: 'name',\n        title: 'Name',\n        options:  {\n          validator: Validators.required\n        }\n      }\n    ];\n\n    const fields = fieldConfigs.map((config) => this.formService.field(config));\n    const form = this.formService.form([], [this.formService.group({name: 'info'}, fields)]);\n\n    this.valueChanges$$ = form.control.valueChanges.subscribe(() => {\n      this.submitDisabled = !form.control.valid;\n    });\n\n    this.form$.next(form);\n  }\n\n  ngOnDestroy() {\n    this.valueChanges$$.unsubscribe();\n  }\n\n  fillForm() {\n    this.data$.next({\n      name: 'Place',\n      geometry: JSON.stringify({type: 'Polygon', coordinates: [[\n        [-106, 42],\n        [-107, 31],\n        [-81, 32],\n        [-82, 42],\n        [-106, 42]\n      ]]})\n    });\n  }\n\n  clearForm() {\n    this.form$.value.control.reset();\n  }\n\n  onSubmit(data: {[key: string]: any}) {\n    alert(JSON.stringify(data));\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Geometry Form</mat-card-title>\n  <mat-card-content>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/common/form\">code of this example</a>\n  </mat-card-content>\n\n  <igo-map-browser [map]=\"map\" [view]=\"view\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n  </igo-map-browser>\n\n  <igo-form\n    *ngIf=\"form$ | async as form\"\n    [form]=\"form\"\n    [formData]=\"data$ | async\"\n    (submitForm)=\"onSubmit($event)\">\n\n    <igo-form-group [group]=\"form.groups[0]\"></igo-form-group>\n\n    <div formButtons>\n      <button\n        mat-stroked-button\n        type=\"button\"\n        color=\"primary\"\n        (click)=\"fillForm()\">\n        Fill Form\n      </button>\n      <button\n        mat-stroked-button\n        type=\"button\"\n        color=\"primary\"\n        (click)=\"clearForm()\">\n        Clear Form\n      </button>\n      <button\n        mat-flat-button\n        type=\"submit\"\n        color=\"primary\"\n        [disabled]=\"submitDisabled\">\n        Submit\n      </button>\n    </div>\n  </igo-form>\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}