{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, EventEmitter, Component, ChangeDetectionStrategy, Output, Inject, Input, Directive, NgModule } from '@angular/core';\nimport * as i3 from '@angular/router';\nimport { NavigationStart, RouterModule } from '@angular/router';\nimport { tap, catchError, filter, takeUntil, map } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BehaviorSubject, of, Subject, from } from 'rxjs';\nimport { globalCacheBusterNotifier } from 'ts-cacheable';\nimport { Base64 } from '@igo2/utils';\nimport jwtDecode from 'jwt-decode';\nimport * as i2 from '@igo2/core';\nimport { ConfigService, StorageService, StorageScope, IgoLanguageModule } from '@igo2/core';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport * as i3$1 from '@azure/msal-angular';\nimport { MsalBroadcastService, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MsalService, MsalModule } from '@azure/msal-angular';\nimport { PublicClientApplication, InteractionStatus, InteractionRequiredAuthError, WrapperSKU, EventMessageUtils, InteractionType } from '@azure/msal-browser';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i6 from '@ngx-translate/core';\nimport * as i3$2 from '@angular/forms';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport * as i4$1 from '@angular/material/form-field';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport * as i5$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { Md5 } from 'ts-md5';\nlet TokenService = /*#__PURE__*/(() => {\n  class TokenService {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    set(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n\n    remove() {\n      localStorage.removeItem(this.tokenKey);\n    }\n\n    get() {\n      return localStorage.getItem(this.tokenKey);\n    }\n\n    decode() {\n      const token = this.get();\n\n      if (!token) {\n        return;\n      }\n\n      return jwtDecode(token);\n    }\n\n    isExpired() {\n      const jwt = this.decode();\n      const currentTime = new Date().getTime() / 1000;\n\n      if (jwt && currentTime < jwt.exp) {\n        return false;\n      }\n\n      return true;\n    }\n\n    get tokenKey() {\n      const config = this.injector.get(ConfigService);\n      this.options = config.getConfig('auth') || {};\n      return this.options.tokenKey;\n    }\n\n  }\n\n  TokenService.ɵfac = function TokenService_Factory(t) {\n    return new (t || TokenService)(i0.ɵɵinject(i0.Injector));\n  };\n\n  TokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, tokenService, config, languageService, messageService, router) {\n      this.http = http;\n      this.tokenService = tokenService;\n      this.config = config;\n      this.languageService = languageService;\n      this.messageService = messageService;\n      this.router = router;\n      this.authenticate$ = new BehaviorSubject(undefined);\n      this.logged$ = new BehaviorSubject(undefined);\n      this.anonymous = false;\n      this.authenticate$.next(this.authenticated);\n      this.authenticate$.subscribe(authenticated => {\n        this.logged$.next(authenticated);\n        globalCacheBusterNotifier.next();\n      });\n    }\n\n    get hasAuthService() {\n      return this.config.getConfig('auth.url') !== undefined;\n    }\n\n    login(username, password) {\n      const myHeader = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const body = {\n        username,\n        password: this.encodePassword(password)\n      };\n      return this.loginCall(body, myHeader);\n    }\n\n    loginWithToken(token, type, infosUser) {\n      const myHeader = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const body = {\n        token,\n        typeConnection: type,\n        infosUser\n      };\n      return this.loginCall(body, myHeader);\n    }\n\n    loginAnonymous() {\n      this.anonymous = true;\n      this.logged$.next(true);\n      return of(true);\n    }\n\n    refresh() {\n      const url = this.config.getConfig('auth.url');\n      return this.http.post(`${url}/refresh`, {}).pipe(tap(data => {\n        this.tokenService.set(data.token);\n      }), catchError(err => {\n        err.error.caught = true;\n        throw err;\n      }));\n    }\n\n    logout() {\n      this.anonymous = false;\n      this.tokenService.remove();\n      this.authenticate$.next(false);\n      return of(true);\n    }\n\n    isAuthenticated() {\n      return !this.tokenService.isExpired();\n    }\n\n    getToken() {\n      return this.tokenService.get();\n    }\n\n    decodeToken() {\n      if (this.isAuthenticated()) {\n        return this.tokenService.decode();\n      }\n\n      return false;\n    }\n\n    goToRedirectUrl() {\n      if (!this.router) {\n        return;\n      }\n\n      const redirectUrl = this.redirectUrl || this.router.url;\n      const options = this.config.getConfig('auth') || {};\n\n      if (redirectUrl === options.loginRoute) {\n        const homeRoute = options.homeRoute || '/';\n        this.router.navigateByUrl(homeRoute);\n      } else if (redirectUrl) {\n        this.router.navigateByUrl(redirectUrl);\n      }\n    }\n\n    getUserInfo() {\n      const url = this.config.getConfig('auth.url') + '/info';\n      return this.http.get(url);\n    }\n\n    getProfils() {\n      const url = this.config.getConfig('auth.url');\n      return this.http.get(`${url}/profils`);\n    }\n\n    updateUser(user) {\n      const url = this.config.getConfig('auth.url');\n      return this.http.patch(url, user);\n    }\n\n    encodePassword(password) {\n      return Base64.encode(password);\n    } // authenticated or anonymous\n\n\n    get logged() {\n      return this.authenticated || this.isAnonymous;\n    }\n\n    get isAnonymous() {\n      return this.anonymous;\n    }\n\n    get authenticated() {\n      return this.isAuthenticated();\n    }\n\n    get isAdmin() {\n      const token = this.decodeToken();\n\n      if (token && token.user && token.user.isAdmin) {\n        return true;\n      }\n\n      return false;\n    }\n\n    loginCall(body, headers) {\n      const url = this.config.getConfig('auth.url');\n      return this.http.post(`${url}/login`, body, {\n        headers\n      }).pipe(tap(data => {\n        this.tokenService.set(data.token);\n        const tokenDecoded = this.decodeToken();\n\n        if (tokenDecoded && tokenDecoded.user) {\n          if (tokenDecoded.user.locale) {\n            this.languageService.setLanguage(tokenDecoded.user.locale);\n          }\n\n          if (tokenDecoded.user.isExpired) {\n            this.languageService.translate.get('igo.auth.error.Password expired').subscribe(expiredAlert => this.messageService.alert(expiredAlert));\n          }\n        }\n\n        this.authenticate$.next(true);\n      }), catchError(err => {\n        err.error.caught = true;\n        throw err;\n      }));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(TokenService), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i2.LanguageService), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.Router, 8));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthGoogleComponent = /*#__PURE__*/(() => {\n  class AuthGoogleComponent {\n    constructor(authService, config, languageService, appRef) {\n      this.authService = authService;\n      this.config = config;\n      this.languageService = languageService;\n      this.appRef = appRef;\n      this.login = new EventEmitter();\n      this.options = this.config.getConfig('auth.google') || {};\n\n      if (this.options.apiKey && this.options.clientId) {\n        this.loadSDKGoogle();\n        this.loadPlatform();\n      } else {\n        console.warn('Google authentification needs \"apiKey\" and \"clientId\" options');\n      }\n    }\n\n    handleSignInClick() {\n      window.gapi.auth2.getAuthInstance().signIn();\n    }\n\n    handleSignOutClick() {\n      window.gapi.auth2.getAuthInstance().signOut();\n    }\n\n    handleClientLoad() {\n      window.gapi.load('client:auth2', () => this.initClient());\n    }\n\n    initClient() {\n      window.gapi.client.init({\n        apiKey: this.options.apiKey,\n        clientId: this.options.clientId,\n        discoveryDocs: ['https://people.googleapis.com/$discovery/rest?version=v1'],\n        scope: 'profile'\n      }).then(() => {\n        this.handleSignOutClick();\n        this.updateTextButton();\n        window.gapi.auth2.getAuthInstance().isSignedIn.listen(rep => {\n          this.updateSigninStatus(rep);\n        });\n      });\n    }\n\n    updateSigninStatus(isSignedIn) {\n      this.updateTextButton();\n\n      if (isSignedIn) {\n        this.loginGoogle(window.gapi.client.getToken().access_token);\n      }\n    }\n\n    updateTextButton() {\n      const btn = document.querySelector('span[id^=\"not_signed_\"]');\n\n      if (btn && this.languageService.getLanguage() !== 'en') {\n        if (btn.innerHTML === 'Sign in with Google') {\n          btn.innerHTML = this.languageService.translate.instant('igo.auth.google.login');\n        } else if (btn.innerHTML === 'Signed in with Google') {\n          btn.innerHTML = this.languageService.translate.instant('igo.auth.google.logged');\n        }\n      }\n    }\n\n    loginGoogle(token) {\n      this.authService.loginWithToken(token, 'google').subscribe(() => {\n        this.appRef.tick();\n        this.login.emit(true);\n      });\n    }\n\n    loadSDKGoogle() {\n      const fjs = document.getElementsByTagName('script')[0];\n      const js = document.createElement('script');\n      js.id = 'google-jssdk';\n      js.src = 'https://apis.google.com/js/api.js';\n\n      js.onload = () => {\n        this.handleClientLoad();\n      };\n\n      fjs.parentNode.insertBefore(js, fjs);\n    }\n\n    loadPlatform() {\n      const fjs = document.getElementsByTagName('script')[0];\n      const js = document.createElement('script');\n      js.id = 'google-platform';\n      js.src = 'https://apis.google.com/js/platform.js';\n      fjs.parentNode.insertBefore(js, fjs);\n    }\n\n  }\n\n  AuthGoogleComponent.ɵfac = function AuthGoogleComponent_Factory(t) {\n    return new (t || AuthGoogleComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i2.LanguageService), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n\n  AuthGoogleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthGoogleComponent,\n    selectors: [[\"igo-auth-google\"]],\n    outputs: {\n      login: \"login\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"data-height\", \"40\", \"data-width\", \"265\", \"data-longtitle\", \"true\", 1, \"g-signin2\", \"google-login-button\"]],\n    template: function AuthGoogleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{padding:10px 10px 10px 0;display:inline-block}.google-login-button[_ngcontent-%COMP%]     .abcRioButton{color:#000000de}\"],\n    changeDetection: 0\n  });\n  return AuthGoogleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthMicrosoftComponent = /*#__PURE__*/(() => {\n  class AuthMicrosoftComponent {\n    constructor(authService, config, appRef, msalService, msalGuardConfig) {\n      this.authService = authService;\n      this.config = config;\n      this.appRef = appRef;\n      this.msalService = msalService;\n      this.msalGuardConfig = msalGuardConfig;\n      this._destroying$ = new Subject();\n      this.login = new EventEmitter();\n      this.options = this.config.getConfig('auth.microsoft') || {};\n      this.msalService.instance = new PublicClientApplication({\n        auth: this.options,\n        cache: {\n          cacheLocation: 'sessionStorage'\n        }\n      });\n      this.broadcastService = new MsalBroadcastService(this.msalService.instance, this.msalService);\n\n      if (this.options.clientId) {\n        this.broadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), takeUntil(this._destroying$)).subscribe(() => {\n          this.checkAccount();\n        });\n      } else {\n        console.warn('Microsoft authentification needs \"clientId\" option');\n      }\n    }\n\n    loginMicrosoft() {\n      this.msalService.loginPopup(Object.assign({}, this.getConf().authRequest)).subscribe(response => {\n        this.msalService.instance.setActiveAccount(response.account);\n        this.checkAccount();\n      });\n    }\n\n    checkAccount() {\n      this.msalService.instance.acquireTokenSilent(this.getConf().authRequest).then(response => {\n        const tokenAccess = response.accessToken;\n        const tokenId = response.idToken;\n        this.authService.loginWithToken(tokenAccess, 'microsoft', {\n          tokenId\n        }).subscribe(() => {\n          this.appRef.tick();\n          this.login.emit(true);\n        });\n      }).catch(error => __awaiter(this, void 0, void 0, function* () {\n        if (error instanceof InteractionRequiredAuthError) {\n          // fallback to interaction when silent call fails\n          return this.msalService.acquireTokenPopup(this.getConf().authRequest);\n        }\n\n        console.log(error);\n      })).catch(error => {\n        console.log('Silent token fails');\n      });\n    }\n\n    getConf() {\n      return this.msalGuardConfig.filter(conf => conf.type === 'add')[0];\n    }\n\n  }\n\n  AuthMicrosoftComponent.ɵfac = function AuthMicrosoftComponent_Factory(t) {\n    return new (t || AuthMicrosoftComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i3$1.MsalService), i0.ɵɵdirectiveInject(MSAL_GUARD_CONFIG));\n  };\n\n  AuthMicrosoftComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthMicrosoftComponent,\n    selectors: [[\"igo-auth-microsoft\"]],\n    outputs: {\n      login: \"login\"\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[\"mat-raised-button\", \"\", 1, \"microsoft-login-button\", 3, \"click\"], [\"svgIcon\", \"microsoft\"]],\n    template: function AuthMicrosoftComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AuthMicrosoftComponent_Template_button_click_0_listener() {\n          return ctx.loginMicrosoft();\n        });\n        i0.ɵɵelement(1, \"mat-icon\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"translate\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"igo.auth.microsoft.login\"), \"\\n\");\n      }\n    },\n    directives: [i4.MatButton, i5.MatIcon],\n    pipes: [i6.TranslatePipe],\n    styles: [\"[_nghost-%COMP%]{padding:10px 10px 10px 0;display:inline-block;position:relative;top:-15px}[_nghost-%COMP%] > button[_ngcontent-%COMP%]{font-size:15px;height:40px;width:265px}mat-icon[_ngcontent-%COMP%]{margin-right:10px}\"],\n    changeDetection: 0\n  });\n  return AuthMicrosoftComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalServiceb2c = /*#__PURE__*/(() => {\n  class MsalServiceb2c {\n    constructor(instance, location) {\n      this.instance = instance;\n      this.location = location;\n      this.name = '@azure/msal-angular';\n      this.version = '2.0.0-beta.2';\n      const hash = this.location.path(true).split('#').pop();\n\n      if (hash) {\n        this.redirectHash = `#${hash}`;\n      }\n\n      this.instance.initializeWrapperLibrary(WrapperSKU.Angular, this.version);\n    }\n\n    acquireTokenPopup(request) {\n      return from(this.instance.acquireTokenPopup(request));\n    }\n\n    acquireTokenRedirect(request) {\n      return from(this.instance.acquireTokenRedirect(request));\n    }\n\n    acquireTokenSilent(silentRequest) {\n      return from(this.instance.acquireTokenSilent(silentRequest));\n    }\n\n    handleRedirectObservable(hash) {\n      return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n    }\n\n    loginPopup(request) {\n      return from(this.instance.loginPopup(request));\n    }\n\n    loginRedirect(request) {\n      return from(this.instance.loginRedirect(request));\n    }\n\n    logout(logoutRequest) {\n      return from(this.instance.logout(logoutRequest));\n    }\n\n    logoutRedirect(logoutRequest) {\n      return from(this.instance.logoutRedirect(logoutRequest));\n    }\n\n    logoutPopup(logoutRequest) {\n      return from(this.instance.logoutPopup(logoutRequest));\n    }\n\n    ssoSilent(request) {\n      return from(this.instance.ssoSilent(request));\n    }\n    /**\r\n     * Gets logger for msal-angular.\r\n     * If no logger set, returns logger instance created with same options as msal-browser\r\n     */\n\n\n    getLogger() {\n      if (!this.logger) {\n        this.logger = this.instance.getLogger().clone(this.name, this.version);\n      }\n\n      return this.logger;\n    } // Create a logger instance for msal-angular with the same options as msal-browser\n\n\n    setLogger(logger) {\n      this.logger = logger.clone(this.name, this.version);\n      this.instance.setLogger(logger);\n    }\n\n  }\n\n  MsalServiceb2c.ɵfac = function MsalServiceb2c_Factory(t) {\n    return new (t || MsalServiceb2c)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(i1$1.Location));\n  };\n\n  MsalServiceb2c.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MsalServiceb2c,\n    factory: MsalServiceb2c.ɵfac\n  });\n  return MsalServiceb2c;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nlet MsalBroadcastServiceb2c = /*#__PURE__*/(() => {\n  class MsalBroadcastServiceb2c {\n    constructor(msalInstance, authService) {\n      this.msalInstance = msalInstance;\n      this.authService = authService;\n      this._msalSubject = new Subject();\n      this.msalSubject$ = this._msalSubject.asObservable(); // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n\n      this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n      this.inProgress$ = this._inProgress.asObservable();\n      this.msalInstance.addEventCallback(message => {\n        this._msalSubject.next(message);\n\n        const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n        if (status !== null) {\n          this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\n\n          this._inProgress.next(status);\n        }\n      });\n    }\n\n  }\n\n  MsalBroadcastServiceb2c.ɵfac = function MsalBroadcastServiceb2c_Factory(t) {\n    return new (t || MsalBroadcastServiceb2c)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(MsalServiceb2c));\n  };\n\n  MsalBroadcastServiceb2c.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MsalBroadcastServiceb2c,\n    factory: MsalBroadcastServiceb2c.ɵfac\n  });\n  return MsalBroadcastServiceb2c;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthMicrosoftb2cComponent = /*#__PURE__*/(() => {\n  class AuthMicrosoftb2cComponent {\n    constructor(authService, config, appRef, msalService, msalGuardConfig) {\n      this.authService = authService;\n      this.config = config;\n      this.appRef = appRef;\n      this.msalService = msalService;\n      this.msalGuardConfig = msalGuardConfig;\n      this._destroying$ = new Subject();\n      this.login = new EventEmitter();\n      this.options = this.config.getConfig('auth.microsoftb2c') || {};\n      this.msalService.instance = new PublicClientApplication({\n        auth: this.options.browserAuthOptions,\n        cache: {\n          cacheLocation: 'sessionStorage'\n        }\n      });\n      this.broadcastService = new MsalBroadcastServiceb2c(this.msalService.instance, this.msalService);\n\n      if (this.options.browserAuthOptions.clientId) {\n        this.broadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), takeUntil(this._destroying$)).subscribe(() => {\n          this.checkAccount();\n        });\n      } else {\n        console.warn('Microsoft authentification needs \"clientId\" option');\n      }\n    }\n\n    loginMicrosoftb2c() {\n      this.msalService.loginPopup(Object.assign({}, this.getConf().authRequest)).subscribe(response => {\n        this.msalService.instance.setActiveAccount(response.account);\n        this.checkAccount();\n      });\n    }\n\n    checkAccount() {\n      this.msalService.instance.acquireTokenSilent(this.getConf().authRequest).then(response => {\n        const token = response.idToken;\n        this.authService.loginWithToken(token, 'microsoftb2c').subscribe(() => {\n          this.appRef.tick();\n          this.login.emit(true);\n        });\n      }).catch(error => __awaiter(this, void 0, void 0, function* () {\n        if (error instanceof InteractionRequiredAuthError) {\n          // fallback to interaction when silent call fails\n          return this.msalService.acquireTokenPopup(this.getConf().authRequest);\n        }\n      })).catch(error => {\n        console.log('Silent token fails');\n      });\n    }\n\n    getConf() {\n      return this.msalGuardConfig.filter(conf => conf.type === 'b2c')[0];\n    }\n\n  }\n\n  AuthMicrosoftb2cComponent.ɵfac = function AuthMicrosoftb2cComponent_Factory(t) {\n    return new (t || AuthMicrosoftb2cComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(MsalServiceb2c), i0.ɵɵdirectiveInject(MSAL_GUARD_CONFIG));\n  };\n\n  AuthMicrosoftb2cComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthMicrosoftb2cComponent,\n    selectors: [[\"igo-auth-microsoftb2c\"]],\n    outputs: {\n      login: \"login\"\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[\"mat-raised-button\", \"\", 1, \"microsoft-login-button\", 3, \"click\"], [\"svgIcon\", \"microsoft\"]],\n    template: function AuthMicrosoftb2cComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function AuthMicrosoftb2cComponent_Template_button_click_0_listener() {\n          return ctx.loginMicrosoftb2c();\n        });\n        i0.ɵɵelement(1, \"mat-icon\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"translate\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 1, \"igo.auth.microsoftb2c.login\"), \"\\n\");\n      }\n    },\n    directives: [i4.MatButton, i5.MatIcon],\n    pipes: [i6.TranslatePipe],\n    styles: [\"[_nghost-%COMP%]{padding:10px 10px 10px 0;display:inline-block;position:relative;top:-15px}[_nghost-%COMP%] > button[_ngcontent-%COMP%]{font-size:15px;height:40px;width:265px}mat-icon[_ngcontent-%COMP%]{margin-right:10px}\"],\n    changeDetection: 0\n  });\n  return AuthMicrosoftb2cComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthFacebookComponent = /*#__PURE__*/(() => {\n  class AuthFacebookComponent {\n    constructor(authService, config, appRef) {\n      this.authService = authService;\n      this.config = config;\n      this.appRef = appRef;\n      this.login = new EventEmitter();\n      this.options = this.config.getConfig('auth.facebook') || {};\n\n      if (this.options.appId) {\n        this.loadSDKFacebook();\n      } else {\n        console.warn('Facebook authentification needs \"appId\" option');\n      }\n    }\n\n    subscribeEvents() {\n      window.FB.Event.subscribe('auth.statusChange', rep => {\n        this.statusChangeCallback(rep);\n      });\n    }\n\n    statusChangeCallback(response) {\n      if (response.status === 'connected') {\n        const accessToken = response.authResponse.accessToken;\n        this.loginFacebook(accessToken);\n      }\n    }\n\n    loginFacebook(token) {\n      this.authService.loginWithToken(token, 'facebook').subscribe(() => {\n        this.appRef.tick();\n        this.login.emit(true);\n      });\n    }\n\n    loadSDKFacebook() {\n      if (document.getElementById('facebook-jssdk')) {\n        return;\n      }\n\n      const urlSDK = 'https://connect.facebook.net/fr_CA/sdk.js#xfbml=1&version=v2.9';\n      const fjs = document.getElementsByTagName('script')[0];\n      const js = document.createElement('script');\n      js.id = 'facebook-jssdk';\n      js.src = `${urlSDK}&appId=${this.options.appId}`;\n\n      js.onload = () => {\n        this.subscribeEvents();\n      };\n\n      fjs.parentNode.insertBefore(js, fjs);\n    }\n\n  }\n\n  AuthFacebookComponent.ɵfac = function AuthFacebookComponent_Factory(t) {\n    return new (t || AuthFacebookComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n  };\n\n  AuthFacebookComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthFacebookComponent,\n    selectors: [[\"igo-auth-facebook\"]],\n    outputs: {\n      login: \"login\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"scope\", \"public_profile,email\", \"data-max-rows\", \"1\", \"data-size\", \"large\", \"data-button-type\", \"login_with\", \"data-show-faces\", \"false\", \"data-auto-logout-link\", \"false\", \"data-use-continue-as\", \"false\", 1, \"fb-login-button\"]],\n    template: function AuthFacebookComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{padding:10px 10px 10px 0;display:inline-block;position:relative;top:-3px}\"],\n    changeDetection: 0\n  });\n  return AuthFacebookComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction AuthInternComponent_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AuthInternComponent_button_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.loginAnonymous();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 2, \"igo.auth.accessAnonymous\"), \" \");\n  }\n}\n\nfunction AuthInternComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"font\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\n\nlet AuthInternComponent = /*#__PURE__*/(() => {\n  class AuthInternComponent {\n    constructor(auth, languageService, fb) {\n      this.auth = auth;\n      this.languageService = languageService;\n      this._allowAnonymous = true;\n      this.error = '';\n      this.loading = false;\n      this.login = new EventEmitter();\n      this.form = fb.group({\n        username: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n    }\n\n    get allowAnonymous() {\n      return this._allowAnonymous;\n    }\n\n    set allowAnonymous(value) {\n      this._allowAnonymous = value;\n    }\n\n    loginUser(values) {\n      this.loading = true;\n      this.auth.login(values.username, values.password).subscribe(() => {\n        this.login.emit(true);\n        this.loading = false;\n      }, error => {\n        try {\n          this.languageService.translate.get('igo.auth.error.' + error.error.message).subscribe(errorMsg => this.error = errorMsg);\n        } catch (e) {\n          this.error = error.error.message;\n        }\n\n        this.loading = false;\n      });\n      return false;\n    }\n\n    loginAnonymous() {\n      this.auth.loginAnonymous().subscribe(() => {\n        this.login.emit(true);\n      });\n    }\n\n  }\n\n  AuthInternComponent.ɵfac = function AuthInternComponent_Factory(t) {\n    return new (t || AuthInternComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.LanguageService), i0.ɵɵdirectiveInject(i3$2.FormBuilder));\n  };\n\n  AuthInternComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthInternComponent,\n    selectors: [[\"igo-auth-intern\"]],\n    inputs: {\n      allowAnonymous: \"allowAnonymous\"\n    },\n    outputs: {\n      login: \"login\"\n    },\n    decls: 14,\n    vars: 12,\n    consts: [[\"role\", \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"full-width\"], [\"matInput\", \"\", \"required\", \"\", \"formControlName\", \"username\", 3, \"placeholder\"], [\"matInput\", \"\", \"required\", \"\", \"type\", \"password\", \"formControlName\", \"password\", 3, \"placeholder\"], [\"mat-raised-button\", \"\", \"type\", \"submit\"], [\"mat-raised-button\", \"\", \"class\", \"anonymous\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"type\", \"button\", 1, \"anonymous\", 3, \"disabled\", \"click\"], [\"size\", \"3\", \"color\", \"red\"]],\n    template: function AuthInternComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthInternComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.loginUser(ctx.form.value);\n        });\n        i0.ɵɵelementStart(1, \"div\");\n        i0.ɵɵelementStart(2, \"mat-form-field\", 1);\n        i0.ɵɵelement(3, \"input\", 2);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\");\n        i0.ɵɵelementStart(6, \"mat-form-field\", 1);\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵpipe(8, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 4);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, AuthInternComponent_button_12_Template, 3, 4, \"button\", 5);\n        i0.ɵɵtemplate(13, AuthInternComponent_div_13_Template, 4, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(4, 6, \"igo.auth.user\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 8, \"igo.auth.password\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 10, \"igo.auth.login\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.allowAnonymous);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    directives: [i3$2.ɵNgNoValidate, i3$2.NgControlStatusGroup, i3$2.FormGroupDirective, i4$1.MatFormField, i5$1.MatInput, i3$2.DefaultValueAccessor, i3$2.RequiredValidator, i3$2.NgControlStatus, i3$2.FormControlName, i4.MatButton, i1$1.NgIf],\n    pipes: [i6.TranslatePipe],\n    styles: [\".full-width[_ngcontent-%COMP%]{width:100%}.anonymous[_ngcontent-%COMP%]{margin-left:10px}\"]\n  });\n  return AuthInternComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction AuthFormComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_igo_auth_google_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-auth-google\", 7);\n    i0.ɵɵlistener(\"login\", function AuthFormComponent_div_0_div_2_igo_auth_google_4_Template_igo_auth_google_login_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(3);\n      return ctx_r10.onLogin();\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_igo_auth_microsoft_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-auth-microsoft\", 7);\n    i0.ɵɵlistener(\"login\", function AuthFormComponent_div_0_div_2_igo_auth_microsoft_5_Template_igo_auth_microsoft_login_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(3);\n      return ctx_r12.onLogin();\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_igo_auth_microsoftb2c_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-auth-microsoftb2c\", 7);\n    i0.ɵɵlistener(\"login\", function AuthFormComponent_div_0_div_2_igo_auth_microsoftb2c_6_Template_igo_auth_microsoftb2c_login_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(3);\n      return ctx_r14.onLogin();\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_igo_auth_facebook_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-auth-facebook\", 7);\n    i0.ɵɵlistener(\"login\", function AuthFormComponent_div_0_div_2_igo_auth_facebook_7_Template_igo_auth_facebook_login_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(3);\n      return ctx_r16.onLogin();\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_igo_auth_intern_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"igo-auth-intern\", 8);\n    i0.ɵɵlistener(\"login\", function AuthFormComponent_div_0_div_2_igo_auth_intern_8_Template_igo_auth_intern_login_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext(3);\n      return ctx_r18.onLogin();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"allowAnonymous\", ctx_r9.options.allowAnonymous);\n  }\n}\n\nfunction AuthFormComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"h1\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, AuthFormComponent_div_0_div_2_igo_auth_google_4_Template, 1, 0, \"igo-auth-google\", 5);\n    i0.ɵɵtemplate(5, AuthFormComponent_div_0_div_2_igo_auth_microsoft_5_Template, 1, 0, \"igo-auth-microsoft\", 5);\n    i0.ɵɵtemplate(6, AuthFormComponent_div_0_div_2_igo_auth_microsoftb2c_6_Template, 1, 0, \"igo-auth-microsoftb2c\", 5);\n    i0.ɵɵtemplate(7, AuthFormComponent_div_0_div_2_igo_auth_facebook_7_Template, 1, 0, \"igo-auth-facebook\", 5);\n    i0.ɵɵtemplate(8, AuthFormComponent_div_0_div_2_igo_auth_intern_8_Template, 1, 1, \"igo-auth-intern\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 6, \"igo.auth.connection\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.options.google && ctx_r2.options.google.enabled !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.options.microsoft && ctx_r2.options.microsoft.enabled !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.options.microsoftb2c && ctx_r2.options.microsoftb2c.enabled !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.options.facebook && ctx_r2.options.facebook.enabled !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.options.intern || ctx_r2.options.intern.enabled !== false);\n  }\n}\n\nfunction AuthFormComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AuthFormComponent_div_0_div_3_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.logout();\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(3, 2, \"igo.auth.welcome\", ctx_r3.user));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"igo.auth.signOut\"));\n  }\n}\n\nfunction AuthFormComponent_div_0_div_4_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AuthFormComponent_div_0_div_4_button_4_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(3);\n      return ctx_r23.home();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, \"igo.auth.home\"));\n  }\n}\n\nfunction AuthFormComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, AuthFormComponent_div_0_div_4_button_4_Template, 3, 3, \"button\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, \"igo.auth.deconnection\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.options.homeRoute);\n  }\n}\n\nfunction AuthFormComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AuthFormComponent_div_0_div_1_Template, 1, 0, \"div\", 1);\n    i0.ɵɵtemplate(2, AuthFormComponent_div_0_div_2_Template, 9, 8, \"div\", 2);\n    i0.ɵɵtemplate(3, AuthFormComponent_div_0_div_3_Template, 7, 7, \"div\", 2);\n    i0.ɵɵtemplate(4, AuthFormComponent_div_0_div_4_Template, 5, 4, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.auth.logged && ctx_r0.backgroundDisable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.auth.logged && ctx_r0.showLoginDiv);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.auth.logged && ctx_r0.showAlreadyConnectedDiv);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showLogoutDiv);\n  }\n}\n\nlet AuthFormComponent = /*#__PURE__*/(() => {\n  class AuthFormComponent {\n    constructor(auth, config, router) {\n      this.auth = auth;\n      this.config = config;\n      this.router = router;\n      this._backgroundDisable = true;\n      this._hasAlreadyConnectedDiv = true;\n      this._hasLogoutDiv = true;\n      this._showAlreadyConnectedDiv = false;\n      this._showLogoutDiv = false;\n      this.login = new EventEmitter();\n      this.visible = true;\n      this.options = this.config.getConfig('auth') || {};\n      this.visible = Object.getOwnPropertyNames(this.options).length !== 0;\n    }\n\n    get backgroundDisable() {\n      if (this.isLogoutRoute || this.isLogoutRoute) {\n        return false;\n      }\n\n      return this._backgroundDisable;\n    }\n\n    set backgroundDisable(value) {\n      this._backgroundDisable = value.toString() === 'true';\n    }\n\n    get hasAlreadyConnectedDiv() {\n      return this._hasAlreadyConnectedDiv;\n    }\n\n    set hasAlreadyConnectedDiv(value) {\n      this._hasAlreadyConnectedDiv = value.toString() === 'true';\n    }\n\n    get hasLogoutDiv() {\n      return this._hasLogoutDiv;\n    }\n\n    set hasLogoutDiv(value) {\n      this._hasLogoutDiv = value.toString() === 'true';\n    }\n\n    get showAlreadyConnectedDiv() {\n      if (this.isLogoutRoute) {\n        return this.hasAlreadyConnectedDiv;\n      }\n\n      return this._showAlreadyConnectedDiv;\n    }\n\n    set showAlreadyConnectedDiv(value) {\n      this._showAlreadyConnectedDiv = value.toString() === 'true';\n    }\n\n    get showLogoutDiv() {\n      if (this.isLogoutRoute) {\n        return this.hasLogoutDiv;\n      }\n\n      return this._showLogoutDiv;\n    }\n\n    set showLogoutDiv(value) {\n      this._showLogoutDiv = value.toString() === 'true';\n    }\n\n    get showLoginDiv() {\n      if (!this.isLogoutRoute) {\n        return true;\n      }\n    }\n\n    ngOnInit() {\n      this.analyzeRoute();\n      this.getName();\n    }\n\n    onLogin() {\n      this.auth.goToRedirectUrl();\n      this.getName();\n      this.login.emit(true);\n    }\n\n    logout() {\n      this.auth.logout().subscribe(() => {\n        this.user = undefined;\n\n        if (this.router) {\n          if (this.options.logoutRoute) {\n            this.router.navigate([this.options.logoutRoute]);\n          } else if (this.options.homeRoute) {\n            this.router.navigate([this.options.homeRoute]);\n          }\n        }\n      });\n    }\n\n    home() {\n      if (this.router && this.options.homeRoute) {\n        this.router.navigate([this.options.homeRoute]);\n      }\n    }\n\n    getName() {\n      const tokenDecoded = this.auth.decodeToken();\n\n      if (tokenDecoded) {\n        this.user = {\n          name: tokenDecoded.user.firstName || tokenDecoded.user.sourceId\n        };\n      }\n    }\n\n    analyzeRoute() {\n      if (!this.router) {\n        return;\n      }\n\n      this.router.events.pipe(filter(event => event instanceof NavigationStart)).subscribe(changeEvent => {\n        if (changeEvent.url) {\n          const currentRoute = changeEvent.url;\n          const logoutRoute = this.options.logoutRoute;\n          const loginRoute = this.options.loginRoute;\n          this.isLogoutRoute = currentRoute === logoutRoute;\n          this.isLoginRoute = currentRoute === loginRoute;\n\n          if (this.isLogoutRoute) {\n            this.auth.logout();\n          }\n        }\n      });\n    }\n\n  }\n\n  AuthFormComponent.ɵfac = function AuthFormComponent_Factory(t) {\n    return new (t || AuthFormComponent)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i2.ConfigService), i0.ɵɵdirectiveInject(i3.Router, 8));\n  };\n\n  AuthFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthFormComponent,\n    selectors: [[\"igo-auth-form\"]],\n    inputs: {\n      backgroundDisable: \"backgroundDisable\",\n      hasAlreadyConnectedDiv: \"hasAlreadyConnectedDiv\",\n      hasLogoutDiv: \"hasLogoutDiv\",\n      showAlreadyConnectedDiv: \"showAlreadyConnectedDiv\",\n      showLogoutDiv: \"showLogoutDiv\"\n    },\n    outputs: {\n      login: \"login\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"backgroundDisable\", 4, \"ngIf\"], [\"class\", \"login center-block\", 4, \"ngIf\"], [1, \"backgroundDisable\"], [1, \"login\", \"center-block\"], [3, \"login\", 4, \"ngIf\"], [3, \"allowAnonymous\", \"login\", 4, \"ngIf\"], [3, \"login\"], [3, \"allowAnonymous\", \"login\"], [\"mat-raised-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"]],\n    template: function AuthFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AuthFormComponent_div_0_Template, 5, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i1$1.NgIf, AuthGoogleComponent, AuthMicrosoftComponent, AuthMicrosoftb2cComponent, AuthFacebookComponent, AuthInternComponent, i4.MatButton],\n    pipes: [i6.TranslatePipe],\n    styles: [\"[_nghost-%COMP%]{z-index:999}div.login[_ngcontent-%COMP%]{z-index:200;width:90%;min-width:360px;max-width:600px;padding:25px 50px;border:1px solid;background-color:#fff;border-color:#888}.center-block[_ngcontent-%COMP%]{position:fixed;top:20%;left:50%;transform:translate(-50%)}.backgroundDisable[_ngcontent-%COMP%]{position:fixed;top:0;left:0;background:#000;opacity:.8;z-index:100;height:100%;width:100%}\"]\n  });\n  return AuthFormComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LoggedGuard = /*#__PURE__*/(() => {\n  class LoggedGuard {\n    constructor(authService, config, router) {\n      this.authService = authService;\n      this.config = config;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      if (this.authService.logged) {\n        return true;\n      }\n\n      this.authService.redirectUrl = state.url;\n      const authConfig = this.config.getConfig('auth');\n\n      if (authConfig && authConfig.loginRoute) {\n        this.router.navigateByUrl(authConfig.loginRoute);\n      }\n\n      return false;\n    }\n\n  }\n\n  LoggedGuard.ɵfac = function LoggedGuard_Factory(t) {\n    return new (t || LoggedGuard)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.Router));\n  };\n\n  LoggedGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggedGuard,\n    factory: LoggedGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return LoggedGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, config, router) {\n      this.authService = authService;\n      this.config = config;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      if (this.authService.authenticated) {\n        return true;\n      }\n\n      this.authService.redirectUrl = state.url;\n      const authConfig = this.config.getConfig('auth');\n\n      if (authConfig && authConfig.loginRoute) {\n        this.router.navigateByUrl(authConfig.loginRoute);\n      }\n\n      return false;\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AdminGuard = /*#__PURE__*/(() => {\n  class AdminGuard {\n    constructor(authService, config, router) {\n      this.authService = authService;\n      this.config = config;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      const token = this.authService.decodeToken();\n\n      if (token && token.user && token.user.isAdmin) {\n        return true;\n      }\n\n      this.authService.redirectUrl = state.url;\n      const authConfig = this.config.getConfig('auth');\n\n      if (authConfig && authConfig.loginRoute) {\n        this.router.navigateByUrl(authConfig.loginRoute);\n      }\n\n      return false;\n    }\n\n  }\n\n  AdminGuard.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.Router));\n  };\n\n  AdminGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ProfilsGuard = /*#__PURE__*/(() => {\n  class ProfilsGuard {\n    constructor(authService, config, router) {\n      this.authService = authService;\n      this.config = config;\n      this.router = router;\n    }\n\n    canActivate(_route, state) {\n      return this.authService.getProfils().pipe(map(profils => {\n        const authConfig = this.config.getConfig('auth');\n\n        if (profils && profils.profils && profils.profils.some(v => authConfig.profilsGuard.indexOf(v) !== -1)) {\n          return true;\n        }\n\n        this.authService.redirectUrl = state.url;\n\n        if (authConfig && authConfig.loginRoute) {\n          this.router.navigateByUrl(authConfig.loginRoute);\n        }\n\n        return false;\n      }));\n    }\n\n  }\n\n  ProfilsGuard.ɵfac = function ProfilsGuard_Factory(t) {\n    return new (t || ProfilsGuard)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i3.Router));\n  };\n\n  ProfilsGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfilsGuard,\n    factory: ProfilsGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return ProfilsGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(config, tokenService, http) {\n      this.config = config;\n      this.tokenService = tokenService;\n      this.http = http;\n      this.refreshInProgress = false;\n    }\n\n    get trustHosts() {\n      const trustHosts = this.config.getConfig('auth.trustHosts') || [];\n      trustHosts.push(window.location.hostname);\n      return trustHosts;\n    }\n\n    get hostsWithCredentials() {\n      return this.config.getConfig('auth.hostsWithCredentials') || [];\n    }\n\n    get hostsWithAuthByKey() {\n      return this.config.getConfig('auth.hostsByKey') || [];\n    }\n\n    intercept(originalReq, next) {\n      const withCredentials = this.handleHostsWithCredentials(originalReq.url);\n      let req = originalReq.clone();\n      const hostWithKey = this.handleHostsAuthByKey(originalReq.url);\n\n      if (hostWithKey) {\n        req = req.clone({\n          params: req.params.set(hostWithKey.key, hostWithKey.value)\n        });\n      }\n\n      if (withCredentials) {\n        req = originalReq.clone({\n          withCredentials\n        });\n      }\n\n      this.refreshToken();\n      const token = this.tokenService.get();\n      const element = document.createElement('a');\n      element.href = req.url;\n\n      if (element.host === '') {\n        element.href = element.href; // FIX IE11, DO NOT REMOVE\n      }\n\n      if (!token || this.trustHosts.indexOf(element.hostname) === -1) {\n        return next.handle(req);\n      }\n\n      const authHeader = `Bearer ${token}`;\n      let authReq = req.clone({\n        headers: req.headers.set('Authorization', authHeader)\n      });\n      const tokenDecoded = this.tokenService.decode();\n\n      if (authReq.params.get('_i') === 'true' && tokenDecoded && tokenDecoded.user && tokenDecoded.user.sourceId) {\n        const hashUser = Md5.hashStr(tokenDecoded.user.sourceId);\n        authReq = authReq.clone({\n          params: authReq.params.set('_i', hashUser)\n        });\n      } else if (authReq.params.get('_i') === 'true') {\n        authReq = authReq.clone({\n          params: authReq.params.delete('_i')\n        });\n      }\n\n      return next.handle(authReq);\n    }\n\n    interceptXhr(xhr, url) {\n      const withCredentials = this.handleHostsWithCredentials(url);\n\n      if (withCredentials) {\n        xhr.withCredentials = withCredentials;\n        return true;\n      }\n\n      this.refreshToken();\n      const element = document.createElement('a');\n      element.href = url;\n      const token = this.tokenService.get();\n\n      if (!token || this.trustHosts.indexOf(element.hostname) === -1) {\n        return false;\n      }\n\n      xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n      return true;\n    }\n\n    alterUrlWithKeyAuth(url) {\n      const hostWithKey = this.handleHostsAuthByKey(url);\n      let interceptedUrl = url;\n\n      if (hostWithKey) {\n        const urlDecomposed = interceptedUrl.split(/[?&]/);\n        let urlWithKeyAdded = urlDecomposed.shift();\n        const paramsToKeep = urlDecomposed.filter(p => p.length !== 0);\n        paramsToKeep.push(`${hostWithKey.key}=${hostWithKey.value}`);\n\n        if (paramsToKeep.length) {\n          urlWithKeyAdded += '?' + paramsToKeep.join('&');\n        }\n\n        return urlWithKeyAdded;\n      }\n\n      return;\n    }\n\n    handleHostsWithCredentials(reqUrl) {\n      let withCredentials = false;\n\n      for (const hostWithCredentials of this.hostsWithCredentials) {\n        const domainRegex = new RegExp(hostWithCredentials.domainRegFilters);\n\n        if (domainRegex.test(reqUrl)) {\n          withCredentials = hostWithCredentials.withCredentials !== undefined ? hostWithCredentials.withCredentials : undefined;\n          break;\n        }\n      }\n\n      return withCredentials;\n    }\n\n    handleHostsAuthByKey(reqUrl) {\n      let hostWithKey;\n\n      for (const hostWithAuthByKey of this.hostsWithAuthByKey) {\n        const domainRegex = new RegExp(hostWithAuthByKey.domainRegFilters);\n\n        if (domainRegex.test(reqUrl)) {\n          var replace = `${hostWithAuthByKey.keyProperty}=${hostWithAuthByKey.keyValue}`;\n          var keyAdded = new RegExp(replace, \"gm\");\n\n          if (!keyAdded.test(reqUrl)) {\n            hostWithKey = {\n              key: hostWithAuthByKey.keyProperty,\n              value: hostWithAuthByKey.keyValue\n            };\n            break;\n          }\n        }\n      }\n\n      return hostWithKey;\n    }\n\n    refreshToken() {\n      const jwt = this.tokenService.decode();\n      const currentTime = new Date().getTime() / 1000;\n\n      if (!this.refreshInProgress && jwt && currentTime < jwt.exp && currentTime > jwt.exp - 1800) {\n        this.refreshInProgress = true;\n        const url = this.config.getConfig('auth.url');\n        return this.http.post(`${url}/refresh`, {}).subscribe(data => {\n          this.tokenService.set(data.token);\n          this.refreshInProgress = false;\n        }, err => {\n          err.error.caught = true;\n          return err;\n        });\n      }\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(TokenService), i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction MSALConfigFactory(config) {\n  const msConf = config.getConfig('auth.microsoft') || {};\n  msConf.redirectUri = msConf.redirectUri || window.location.href;\n  msConf.authority = msConf.authority || 'https://login.microsoftonline.com/organizations';\n  const myMsalObj = new PublicClientApplication({\n    auth: msConf,\n    cache: {\n      cacheLocation: 'sessionStorage'\n    }\n  });\n  return myMsalObj;\n}\n\nfunction MSALConfigFactoryb2c(config) {\n  const msConf = config.getConfig('auth.microsoftb2c.browserAuthOptions') || {};\n  msConf.redirectUri = msConf.redirectUri || window.location.href;\n  msConf.authority = msConf.authority || 'https://login.microsoftonline.com/organizations';\n  const myMsalObj = new PublicClientApplication({\n    auth: msConf,\n    cache: {\n      cacheLocation: 'sessionStorage'\n    }\n  });\n  return myMsalObj;\n}\n\nfunction MSALAngularConfigFactory(config) {\n  const msConf = config.getConfig('auth.microsoft') || {};\n  return {\n    interactionType: InteractionType.Popup,\n    authRequest: {\n      scopes: ['user.read'],\n      loginHint: 'todo'\n    },\n    type: 'add'\n  };\n}\n\nfunction MSALAngularConfigFactoryb2c(config) {\n  const msConf = config.getConfig('auth.microsoftb2c.browserAuthOptions') || {};\n  return {\n    interactionType: InteractionType.Popup,\n    authRequest: {\n      scopes: [msConf.clientId]\n    },\n    type: 'b2c'\n  };\n}\n\nfunction provideAuthMicrosoft(type) {\n  if (type === 'b2c') {\n    return [{\n      provide: MSAL_INSTANCE,\n      useFactory: MSALConfigFactoryb2c,\n      deps: [ConfigService]\n    }, {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALAngularConfigFactoryb2c,\n      deps: [ConfigService],\n      multi: true\n    }, MsalServiceb2c];\n  } else {\n    return [{\n      provide: MSAL_INSTANCE,\n      useFactory: MSALConfigFactory,\n      deps: [ConfigService]\n    }, {\n      provide: MSAL_GUARD_CONFIG,\n      useFactory: MSALAngularConfigFactory,\n      deps: [ConfigService],\n      multi: true\n    }, MsalService];\n  }\n}\n\nlet ProtectedDirective = /*#__PURE__*/(() => {\n  class ProtectedDirective {\n    constructor(authentication, el) {\n      if (!authentication.isAuthenticated()) {\n        el.nativeElement.parentNode.removeChild(el.nativeElement);\n      }\n    }\n\n  }\n\n  ProtectedDirective.ɵfac = function ProtectedDirective_Factory(t) {\n    return new (t || ProtectedDirective)(i0.ɵɵdirectiveInject(AuthService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ProtectedDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ProtectedDirective,\n    selectors: [[\"\", \"igoProtected\", \"\"]]\n  });\n  return ProtectedDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AuthStorageService = /*#__PURE__*/(() => {\n  class AuthStorageService extends StorageService {\n    constructor(config, http, authService, tokenService) {\n      super(config);\n      this.http = http;\n      this.authService = authService;\n      this.tokenService = tokenService;\n      this.authService.authenticate$.subscribe(isAuthenticated => {\n        if (isAuthenticated && this.options.url) {\n          this.http.get(this.options.url).subscribe(userIgo => {\n            if (userIgo && userIgo.preference) {\n              for (const key of Object.keys(userIgo.preference)) {\n                const value = userIgo.preference[key];\n                super.set(key, value);\n              }\n            }\n          });\n        }\n      });\n    }\n\n    set(key, value, scope = StorageScope.LOCAL) {\n      if (scope === StorageScope.LOCAL && this.authService.authenticated && this.options.url) {\n        const preference = {};\n        preference[key] = value;\n        this.http.patch(this.options.url, {\n          preference\n        }).subscribe();\n      }\n\n      super.set(key, value, scope);\n    }\n\n    remove(key, scope = StorageScope.LOCAL) {\n      if (scope === StorageScope.LOCAL && this.authService.authenticated && this.options.url) {\n        const preference = {};\n        preference[key] = undefined;\n        this.http.patch(this.options.url, {\n          preference\n        }).subscribe();\n      }\n\n      super.remove(key, scope);\n    }\n\n    clear(scope = StorageScope.LOCAL) {\n      if (scope === StorageScope.LOCAL && this.authService.authenticated && this.options.url) {\n        this.http.patch(this.options.url, {\n          preference: {}\n        }, {\n          params: {\n            mergePreference: 'false'\n          }\n        }).subscribe();\n      }\n\n      let token;\n\n      if (scope === StorageScope.LOCAL) {\n        token = this.tokenService.get();\n      }\n\n      super.clear(scope);\n\n      if (token) {\n        this.tokenService.set(token);\n      }\n\n      if (scope === StorageScope.LOCAL && this.authService.authenticated && this.options.url) {\n        this.http.get(this.options.url).subscribe(userIgo => {\n          if (userIgo && userIgo.preference) {\n            for (const key of Object.keys(userIgo.preference)) {\n              const value = userIgo.preference[key];\n              super.set(key, value);\n            }\n          }\n        });\n      }\n    }\n\n  }\n\n  AuthStorageService.ɵfac = function AuthStorageService_Factory(t) {\n    return new (t || AuthStorageService)(i0.ɵɵinject(i2.ConfigService), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(AuthService), i0.ɵɵinject(TokenService));\n  };\n\n  AuthStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthStorageService,\n    factory: AuthStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthStorageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst routes = [{\n  path: 'login',\n  component: AuthFormComponent\n}, {\n  path: 'logout',\n  component: AuthFormComponent\n}];\nlet AuthRoutingModule = /*#__PURE__*/(() => {\n  class AuthRoutingModule {}\n\n  AuthRoutingModule.ɵfac = function AuthRoutingModule_Factory(t) {\n    return new (t || AuthRoutingModule)();\n  };\n\n  AuthRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AuthRoutingModule\n  });\n  AuthRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[RouterModule.forChild(routes)], RouterModule]\n  });\n  return AuthRoutingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AuthRoutingModule, {\n    imports: [i3.RouterModule],\n    exports: [RouterModule]\n  });\n})();\n\nlet IgoAuthModule = /*#__PURE__*/(() => {\n  class IgoAuthModule {\n    static forRoot() {\n      return {\n        ngModule: IgoAuthModule,\n        providers: [{\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthInterceptor,\n          multi: true\n        }, {\n          provide: StorageService,\n          useClass: AuthStorageService\n        }, ...provideAuthMicrosoft('add'), ...provideAuthMicrosoft('b2c')]\n      };\n    }\n\n  }\n\n  IgoAuthModule.ɵfac = function IgoAuthModule_Factory(t) {\n    return new (t || IgoAuthModule)();\n  };\n\n  IgoAuthModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoAuthModule\n  });\n  IgoAuthModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatIconModule, MatButtonModule, IgoLanguageModule, MsalModule]]\n  });\n  return IgoAuthModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoAuthModule, {\n    declarations: [AuthFormComponent, AuthGoogleComponent, AuthInternComponent, AuthFacebookComponent, AuthMicrosoftComponent, AuthMicrosoftb2cComponent, ProtectedDirective],\n    imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatIconModule, MatButtonModule, IgoLanguageModule, MsalModule],\n    exports: [AuthFormComponent, ProtectedDirective]\n  });\n})();\n/*\r\n * Public API Surface of auth\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AdminGuard, AuthFormComponent, AuthGuard, AuthInterceptor, AuthRoutingModule, AuthService, AuthStorageService, IgoAuthModule, LoggedGuard, MSALAngularConfigFactory, MSALAngularConfigFactoryb2c, MSALConfigFactory, MSALConfigFactoryb2c, ProfilsGuard, ProtectedDirective, TokenService, provideAuthMicrosoft };","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\token.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-google.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-google.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-microsoft.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-microsoft.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth-msalServiceb2c.service..ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth-msalBroadcastServiceb2c.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-microsoftb2c.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-microsoftb2c.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-facebook.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-facebook.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-intern.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-intern.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-form.component.html","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-form\\auth-form.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\logged.guard.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth.guard.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\admin.guard.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\profils.guard.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth.interceptor.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\auth-microsoft.provider.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\protected.directive.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\shared\\storage.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth-routing.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\lib\\auth.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\auth\\src\\public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport jwtDecode from 'jwt-decode';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthOptions } from './auth.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenService {\n  private options: AuthOptions;\n\n  constructor(private injector: Injector) {}\n\n  set(token: string) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  remove() {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  get(): string {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  decode() {\n    const token = this.get();\n    if (!token) {\n      return;\n    }\n    return jwtDecode(token);\n  }\n\n  isExpired() {\n    const jwt = this.decode();\n    const currentTime = new Date().getTime() / 1000;\n    if (jwt && currentTime < jwt.exp) {\n      return false;\n    }\n    return true;\n  }\n\n  private get tokenKey() {\n    const config = this.injector.get<ConfigService>(ConfigService);\n    this.options = config.getConfig('auth') || {};\n    return this.options.tokenKey;\n  }\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { globalCacheBusterNotifier } from 'ts-cacheable';\n\nimport { ConfigService, LanguageService, MessageService } from '@igo2/core';\nimport { Base64 } from '@igo2/utils';\n\nimport { User, IInfosUser } from './auth.interface';\nimport { TokenService } from './token.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public authenticate$ = new BehaviorSubject<boolean>(undefined);\n  public logged$ = new BehaviorSubject<boolean>(undefined);\n  public redirectUrl: string;\n  private anonymous = false;\n\n  get hasAuthService() {\n    return this.config.getConfig('auth.url') !== undefined;\n  }\n\n  constructor(\n    private http: HttpClient,\n    private tokenService: TokenService,\n    private config: ConfigService,\n    private languageService: LanguageService,\n    private messageService: MessageService,\n    @Optional() private router: Router\n  ) {\n    this.authenticate$.next(this.authenticated);\n    this.authenticate$.subscribe((authenticated) => {\n      this.logged$.next(authenticated);\n      globalCacheBusterNotifier.next();\n    });\n  }\n\n  login(username: string, password: string): Observable<void> {\n    const myHeader = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    const body = {\n      username,\n      password: this.encodePassword(password)\n    };\n\n    return this.loginCall(body, myHeader);\n  }\n\n  loginWithToken(token: string, type: string, infosUser?: IInfosUser): Observable<void> {\n    const myHeader = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    const body = {\n      token,\n      typeConnection: type,\n      infosUser\n    };\n\n    return this.loginCall(body, myHeader);\n  }\n\n  loginAnonymous(): Observable<boolean> {\n    this.anonymous = true;\n    this.logged$.next(true);\n    return of(true);\n  }\n\n  refresh(): Observable<void> {\n    const url = this.config.getConfig('auth.url');\n    return this.http.post(`${url}/refresh`, {}).pipe(\n      tap((data: any) => {\n        this.tokenService.set(data.token);\n      }),\n      catchError((err) => {\n        err.error.caught = true;\n        throw err;\n      })\n    );\n  }\n\n  logout(): Observable<boolean> {\n    this.anonymous = false;\n    this.tokenService.remove();\n    this.authenticate$.next(false);\n    return of(true);\n  }\n\n  isAuthenticated(): boolean {\n    return !this.tokenService.isExpired();\n  }\n\n  getToken(): string {\n    return this.tokenService.get();\n  }\n\n  decodeToken() {\n    if (this.isAuthenticated()) {\n      return this.tokenService.decode();\n    }\n    return false;\n  }\n\n  goToRedirectUrl() {\n    if (!this.router) {\n      return;\n    }\n    const redirectUrl = this.redirectUrl || this.router.url;\n\n    const options = this.config.getConfig('auth') || {};\n    if (redirectUrl === options.loginRoute) {\n      const homeRoute = options.homeRoute || '/';\n      this.router.navigateByUrl(homeRoute);\n    } else if (redirectUrl) {\n      this.router.navigateByUrl(redirectUrl);\n    }\n  }\n\n  getUserInfo(): Observable<User> {\n    const url = this.config.getConfig('auth.url') + '/info';\n    return this.http.get<User>(url);\n  }\n\n  getProfils(): Observable<{ profils: string[] }> {\n    const url = this.config.getConfig('auth.url');\n    return this.http.get<{ profils: string[] }>(`${url}/profils`);\n  }\n\n  updateUser(user: User): Observable<User> {\n    const url = this.config.getConfig('auth.url');\n    return this.http.patch<User>(url, user);\n  }\n\n  private encodePassword(password: string) {\n    return Base64.encode(password);\n  }\n\n  // authenticated or anonymous\n  get logged(): boolean {\n    return this.authenticated || this.isAnonymous;\n  }\n\n  get isAnonymous(): boolean {\n    return this.anonymous;\n  }\n\n  get authenticated(): boolean {\n    return this.isAuthenticated();\n  }\n\n  get isAdmin(): boolean {\n    const token = this.decodeToken();\n    if (token && token.user && token.user.isAdmin) {\n      return true;\n    }\n    return false;\n  }\n\n  private loginCall(body, headers) {\n    const url = this.config.getConfig('auth.url');\n    return this.http.post(`${url}/login`, body, { headers }).pipe(\n      tap((data: any) => {\n        this.tokenService.set(data.token);\n        const tokenDecoded = this.decodeToken();\n        if (tokenDecoded && tokenDecoded.user) {\n          if (tokenDecoded.user.locale) {\n            this.languageService.setLanguage(tokenDecoded.user.locale);\n          }\n          if (tokenDecoded.user.isExpired) {\n            this.languageService.translate\n              .get('igo.auth.error.Password expired')\n              .subscribe((expiredAlert) =>\n                this.messageService.alert(expiredAlert)\n              );\n          }\n        }\n        this.authenticate$.next(true);\n      }),\n      catchError((err) => {\n        err.error.caught = true;\n        throw err;\n      })\n    );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  ApplicationRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { ConfigService, LanguageService } from '@igo2/core';\nimport { AuthGoogleOptions } from '../shared/auth.interface';\nimport { AuthService } from '../shared/auth.service';\n\n@Component({\n  selector: 'igo-auth-google',\n  templateUrl: './auth-google.component.html',\n  styleUrls: ['./auth-google.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthGoogleComponent {\n  private options: AuthGoogleOptions;\n\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private languageService: LanguageService,\n    private appRef: ApplicationRef\n  ) {\n    this.options = this.config.getConfig('auth.google') || {};\n\n    if (this.options.apiKey && this.options.clientId) {\n      this.loadSDKGoogle();\n      this.loadPlatform();\n    } else {\n      console.warn('Google authentification needs \"apiKey\" and \"clientId\" options');\n    }\n  }\n\n  public handleSignInClick() {\n    (window as any).gapi.auth2.getAuthInstance().signIn();\n  }\n\n  public handleSignOutClick() {\n    (window as any).gapi.auth2.getAuthInstance().signOut();\n  }\n\n  private handleClientLoad() {\n    (window as any).gapi.load('client:auth2', () => this.initClient());\n  }\n\n  private initClient() {\n    (window as any).gapi.client\n      .init({\n        apiKey: this.options.apiKey,\n        clientId: this.options.clientId,\n        discoveryDocs: [\n          'https://people.googleapis.com/$discovery/rest?version=v1'\n        ],\n        scope: 'profile'\n      })\n      .then(() => {\n        this.handleSignOutClick();\n        this.updateTextButton();\n        (window as any).gapi.auth2.getAuthInstance().isSignedIn.listen(rep => {\n          this.updateSigninStatus(rep);\n        });\n      });\n  }\n\n  private updateSigninStatus(isSignedIn) {\n    this.updateTextButton();\n    if (isSignedIn) {\n      this.loginGoogle((window as any).gapi.client.getToken().access_token);\n    }\n  }\n\n  private updateTextButton() {\n    const btn = document.querySelector('span[id^=\"not_signed_\"]');\n    if (btn && this.languageService.getLanguage() !== 'en') {\n      if (btn.innerHTML === 'Sign in with Google') {\n        btn.innerHTML = this.languageService.translate.instant('igo.auth.google.login');\n      } else if (btn.innerHTML === 'Signed in with Google') {\n        btn.innerHTML = this.languageService.translate.instant('igo.auth.google.logged');\n      }\n    }\n  }\n\n  private loginGoogle(token) {\n    this.authService.loginWithToken(token, 'google').subscribe(() => {\n      this.appRef.tick();\n      this.login.emit(true);\n    });\n  }\n\n  private loadSDKGoogle() {\n    const fjs = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-jssdk';\n    js.src = 'https://apis.google.com/js/api.js';\n    js.onload = () => {\n      this.handleClientLoad();\n    };\n    fjs.parentNode.insertBefore(js, fjs);\n  }\n\n  private loadPlatform() {\n    const fjs = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = 'https://apis.google.com/js/platform.js';\n    fjs.parentNode.insertBefore(js, fjs);\n  }\n}\n","<div class=\"g-signin2 google-login-button\" data-height=\"40\" data-width=\"265\" data-longtitle=\"true\">\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  ApplicationRef,\n  Output,\n  EventEmitter,\n  Inject\n} from '@angular/core';\nimport { MsalBroadcastService, MsalService, MSAL_GUARD_CONFIG} from '@azure/msal-angular';\nimport {\n  InteractionStatus,\n  AuthenticationResult,\n  PublicClientApplication,\n  PopupRequest,\n  SilentRequest,\n  InteractionRequiredAuthError\n} from '@azure/msal-browser';\nimport { ConfigService } from '@igo2/core';\nimport { AuthMicrosoftOptions, MSPMsalGuardConfiguration } from '../shared/auth.interface';\nimport { AuthService } from '../shared/auth.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'igo-auth-microsoft',\n  templateUrl: './auth-microsoft.component.html',\n  styleUrls: ['./auth-microsoft.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthMicrosoftComponent {\n  private options: AuthMicrosoftOptions;\n  private readonly _destroying$ = new Subject<void>();\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n  private broadcastService: MsalBroadcastService;\n\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private appRef: ApplicationRef,\n    private msalService: MsalService,\n    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MSPMsalGuardConfiguration[],\n  ) {\n    this.options = this.config.getConfig('auth.microsoft') || {};\n\n    this.msalService.instance = new PublicClientApplication({\n      auth: this.options,\n      cache: {\n        cacheLocation: 'sessionStorage'\n      }\n    });\n\n    this.broadcastService = new MsalBroadcastService(this.msalService.instance, this.msalService);\n\n    if (this.options.clientId) {\n      this.broadcastService.inProgress$\n      .pipe(\n        filter((status: InteractionStatus) => status === InteractionStatus.None),\n        takeUntil(this._destroying$)\n      )\n      .subscribe(() => {\n        this.checkAccount();\n      });\n\n    } else {\n      console.warn('Microsoft authentification needs \"clientId\" option');\n    }\n  }\n\n  public loginMicrosoft() {\n    this.msalService.loginPopup({...this.getConf().authRequest} as PopupRequest)\n    .subscribe((response: AuthenticationResult) => {\n      this.msalService.instance.setActiveAccount(response.account);\n      this.checkAccount();\n    });\n  }\n\n  private checkAccount() {\n    this.msalService.instance\n      .acquireTokenSilent(this.getConf().authRequest as SilentRequest)\n      .then((response: AuthenticationResult) => {\n        const tokenAccess = response.accessToken;\n        const tokenId = response.idToken;\n        this.authService.loginWithToken(tokenAccess, 'microsoft', { tokenId } ).subscribe(() => {\n          this.appRef.tick();\n          this.login.emit(true);\n        });\n      })\n      .catch(async (error) => {\n        if (error instanceof InteractionRequiredAuthError) {\n          // fallback to interaction when silent call fails\n          return this.msalService.acquireTokenPopup(this.getConf().authRequest as SilentRequest);\n        }\n        console.log(error);\n      }).catch(error => {\n        console.log('Silent token fails');\n      });\n  }\n\n  private getConf(): MSPMsalGuardConfiguration {\n    return this.msalGuardConfig.filter(conf => conf.type === 'add')[0];\n  }\n}\n","<button class=\"microsoft-login-button\" mat-raised-button (click)=\"loginMicrosoft()\">\n  <mat-icon svgIcon=\"microsoft\"></mat-icon>\n  {{'igo.auth.microsoft.login' | translate}}\n</button>\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport {\n    IPublicClientApplication,\n    EndSessionRequest,\n    EndSessionPopupRequest,\n    AuthenticationResult,\n    RedirectRequest,\n    SilentRequest,\n    PopupRequest,\n    SsoSilentRequest,\n    Logger,\n    WrapperSKU\n} from '@azure/msal-browser';\nimport { MSAL_INSTANCE } from '@azure/msal-angular';\nimport { Observable, from } from 'rxjs';\nimport { IMsalService } from '@azure/msal-angular';\n\n@Injectable()\nexport class MsalServiceb2c implements IMsalService {\n    private redirectHash: string;\n    private logger: Logger;\n    private name = '@azure/msal-angular';\n    private version = '2.0.0-beta.2';\n    constructor(\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\n        private location: Location\n    ) {\n        const hash = this.location.path(true).split('#').pop();\n        if (hash) {\n            this.redirectHash = `#${hash}`;\n        }\n        this.instance.initializeWrapperLibrary(WrapperSKU.Angular, this.version);\n    }\n\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\n        return from(this.instance.acquireTokenPopup(request));\n    }\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\n        return from(this.instance.acquireTokenRedirect(request));\n    }\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\n        return from(this.instance.acquireTokenSilent(silentRequest));\n    }\n    handleRedirectObservable(hash?: string): Observable<AuthenticationResult> {\n        return from(this.instance.handleRedirectPromise(hash || this.redirectHash));\n    }\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\n        return from(this.instance.loginPopup(request));\n    }\n    loginRedirect(request?: RedirectRequest): Observable<void> {\n        return from(this.instance.loginRedirect(request));\n    }\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\n        return from(this.instance.logout(logoutRequest));\n    }\n    logoutRedirect(logoutRequest?: EndSessionRequest): Observable<void> {\n        return from(this.instance.logoutRedirect(logoutRequest));\n    }\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Observable<void> {\n        return from(this.instance.logoutPopup(logoutRequest));\n    }\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\n        return from(this.instance.ssoSilent(request));\n    }\n    /**\n     * Gets logger for msal-angular.\n     * If no logger set, returns logger instance created with same options as msal-browser\n     */\n    getLogger(): Logger {\n        if (!this.logger) {\n            this.logger = this.instance.getLogger().clone(this.name, this.version);\n        }\n        return this.logger;\n    }\n    // Create a logger instance for msal-angular with the same options as msal-browser\n    setLogger(logger: Logger): void {\n        this.logger = logger.clone(this.name, this.version);\n        this.instance.setLogger(logger);\n    }\n\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { MSAL_INSTANCE } from '@azure/msal-angular';\nimport { EventMessage, EventMessageUtils, IPublicClientApplication, InteractionStatus } from '@azure/msal-browser';\nimport { MsalServiceb2c } from './auth-msalServiceb2c.service.';\n\n@Injectable()\nexport class MsalBroadcastServiceb2c {\n    private _msalSubject: Subject<EventMessage>;\n    public msalSubject$: Observable<EventMessage>;\n    private _inProgress: BehaviorSubject<InteractionStatus>;\n    public inProgress$: Observable<InteractionStatus>;\n\n    constructor(\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication,\n        private authService: MsalServiceb2c\n    ) {\n        this._msalSubject = new Subject<EventMessage>();\n        this.msalSubject$ = this._msalSubject.asObservable();\n\n        // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n        this._inProgress = new BehaviorSubject<InteractionStatus>(InteractionStatus.Startup);\n        this.inProgress$ = this._inProgress.asObservable();\n\n        this.msalInstance.addEventCallback((message: EventMessage) => {\n            this._msalSubject.next(message);\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n            if (status !== null) {\n                this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress to ${status}`);\n                this._inProgress.next(status);\n            }\n        });\n    }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  ApplicationRef,\n  Output,\n  EventEmitter,\n  Inject\n} from '@angular/core';\n\nimport { MSAL_GUARD_CONFIG } from '@azure/msal-angular';\nimport {\n  InteractionStatus,\n  AuthenticationResult,\n  PublicClientApplication,\n  PopupRequest,\n  SilentRequest,\n  InteractionRequiredAuthError\n} from '@azure/msal-browser';\nimport { ConfigService } from '@igo2/core';\nimport { AuthMicrosoftb2cOptions, MSPMsalGuardConfiguration } from '../shared/auth.interface';\nimport { AuthService } from '../shared/auth.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { MsalBroadcastServiceb2c } from '../shared/auth-msalBroadcastServiceb2c.service';\nimport { MsalServiceb2c } from '../shared/auth-msalServiceb2c.service.';\n\n@Component({\n  selector: 'igo-auth-microsoftb2c',\n  templateUrl: './auth-microsoftb2c.component.html',\n  styleUrls: ['./auth-microsoftb2c.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthMicrosoftb2cComponent {\n  private options: AuthMicrosoftb2cOptions;\n  private readonly _destroying$ = new Subject<void>();\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n  private broadcastService: MsalBroadcastServiceb2c;\n\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private appRef: ApplicationRef,\n    private msalService: MsalServiceb2c,\n    @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MSPMsalGuardConfiguration[],\n  ) {\n\n    this.options = this.config.getConfig('auth.microsoftb2c') || {};\n\n    this.msalService.instance = new PublicClientApplication({\n      auth: this.options.browserAuthOptions,\n      cache: {\n        cacheLocation: 'sessionStorage'\n      }\n    });\n\n    this.broadcastService = new MsalBroadcastServiceb2c(this.msalService.instance, this.msalService);\n\n    if (this.options.browserAuthOptions.clientId) {\n      this.broadcastService.inProgress$\n      .pipe(\n        filter((status: InteractionStatus) => status === InteractionStatus.None),\n        takeUntil(this._destroying$)\n      )\n      .subscribe(() => {\n        this.checkAccount();\n      });\n\n    } else {\n      console.warn('Microsoft authentification needs \"clientId\" option');\n    }\n  }\n\n  public loginMicrosoftb2c() {\n    this.msalService.loginPopup({...this.getConf().authRequest} as PopupRequest)\n    .subscribe((response: AuthenticationResult) => {\n      this.msalService.instance.setActiveAccount(response.account);\n      this.checkAccount();\n    });\n  }\n\n  private checkAccount() {\n    this.msalService.instance\n      .acquireTokenSilent(this.getConf().authRequest as SilentRequest)\n      .then((response: AuthenticationResult) => {\n        const token = response.idToken;\n        this.authService.loginWithToken(token, 'microsoftb2c').subscribe(() => {\n          this.appRef.tick();\n          this.login.emit(true);\n        });\n      })\n      .catch(async (error) => {\n        if (error instanceof InteractionRequiredAuthError) {\n          // fallback to interaction when silent call fails\n          return this.msalService.acquireTokenPopup(this.getConf().authRequest as SilentRequest);\n        }\n        }).catch(error => {\n          console.log('Silent token fails');\n        });\n  }\n\n  private getConf(): MSPMsalGuardConfiguration {\n    return this.msalGuardConfig.filter(conf => conf.type === 'b2c')[0];\n  }\n}\n","<button class=\"microsoft-login-button\" mat-raised-button (click)=\"loginMicrosoftb2c()\">\n  <mat-icon svgIcon=\"microsoft\"></mat-icon>\n  {{'igo.auth.microsoftb2c.login' | translate}}\n</button>\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  ApplicationRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthFacebookOptions } from '../shared/auth.interface';\nimport { AuthService } from '../shared/auth.service';\n\n@Component({\n  selector: 'igo-auth-facebook',\n  templateUrl: './auth-facebook.component.html',\n  styleUrls: ['./auth-facebook.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AuthFacebookComponent {\n  private options: AuthFacebookOptions;\n\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private appRef: ApplicationRef\n  ) {\n    this.options = this.config.getConfig('auth.facebook') || {};\n\n    if (this.options.appId) {\n      this.loadSDKFacebook();\n    } else {\n      console.warn('Facebook authentification needs \"appId\" option');\n    }\n  }\n\n  private subscribeEvents() {\n    (window as any).FB.Event.subscribe('auth.statusChange', rep => {\n      this.statusChangeCallback(rep);\n    });\n  }\n\n  private statusChangeCallback(response) {\n    if (response.status === 'connected') {\n      const accessToken = response.authResponse.accessToken;\n      this.loginFacebook(accessToken);\n    }\n  }\n\n  private loginFacebook(token) {\n    this.authService.loginWithToken(token, 'facebook').subscribe(() => {\n      this.appRef.tick();\n      this.login.emit(true);\n    });\n  }\n\n  private loadSDKFacebook() {\n    if (document.getElementById('facebook-jssdk')) {\n      return;\n    }\n\n    const urlSDK =\n      'https://connect.facebook.net/fr_CA/sdk.js#xfbml=1&version=v2.9';\n\n    const fjs = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'facebook-jssdk';\n    js.src = `${urlSDK}&appId=${this.options.appId}`;\n    js.onload = () => {\n      this.subscribeEvents();\n    };\n    fjs.parentNode.insertBefore(js, fjs);\n  }\n}\n","<div scope=\"public_profile,email\"\n     class=\"fb-login-button\" data-max-rows=\"1\" data-size=\"large\"\n     data-button-type=\"login_with\" data-show-faces=\"false\"\n     data-auto-logout-link=\"false\" data-use-continue-as=\"false\">\n</div>\n","<form [formGroup]=\"form\" role=\"form\" (ngSubmit)=\"loginUser(form.value)\">\n  <div>\n    <mat-form-field class=\"full-width\">\n      <input matInput required placeholder=\"{{'igo.auth.user' | translate}}\" formControlName=\"username\">\n    </mat-form-field>\n  </div>\n\n  <div>\n    <mat-form-field class=\"full-width\">\n      <input matInput required type=\"password\" placeholder=\"{{'igo.auth.password' | translate}}\" formControlName=\"password\">\n    </mat-form-field>\n  </div>\n\n  <button mat-raised-button type=\"submit\">{{'igo.auth.login' | translate}}</button>\n  <button *ngIf=\"allowAnonymous\" mat-raised-button class=\"anonymous\" type=\"button\" [disabled]=\"loading\" (click)=\"loginAnonymous()\">\n    {{'igo.auth.accessAnonymous' | translate }}\n  </button>\n  <div *ngIf=\"error\">\n    <br/>\n    <font size=\"3\" color=\"red\">{{error}}</font>\n  </div>\n</form>\n\n<!--\nThis part was removed from the below line to fix Angular issue 30616 : [disabled]=\"!form.valid || loading\n  <button mat-raised-button type=\"submit\" [disabled]=\"!form.valid || loading\">{{'igo.auth.login' | translate}}</button>*/\n-->\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\n\nimport { AuthService } from '../shared/auth.service';\nimport { LanguageService } from '@igo2/core';\n\n@Component({\n  selector: 'igo-auth-intern',\n  templateUrl: './auth-intern.component.html',\n  styleUrls: ['./auth-intern.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class AuthInternComponent {\n  @Input()\n  get allowAnonymous(): boolean {\n    return this._allowAnonymous;\n  }\n  set allowAnonymous(value: boolean) {\n    this._allowAnonymous = value;\n  }\n  private _allowAnonymous = true;\n\n  public error = '';\n  public form: FormGroup;\n  public loading = false;\n\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(\n    public auth: AuthService,\n    private languageService: LanguageService,\n    fb: FormBuilder\n  ) {\n    this.form = fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  loginUser(values: any) {\n    this.loading = true;\n    this.auth.login(values.username, values.password).subscribe(\n      () => {\n        this.login.emit(true);\n        this.loading = false;\n      },\n      (error: any) => {\n        try {\n          this.languageService.translate\n            .get('igo.auth.error.' + error.error.message)\n            .subscribe(errorMsg => (this.error = errorMsg));\n        } catch (e) {\n          this.error = error.error.message;\n        }\n        this.loading = false;\n      }\n    );\n    return false;\n  }\n\n  loginAnonymous() {\n    this.auth.loginAnonymous().subscribe(() => {\n      this.login.emit(true);\n    });\n  }\n}\n","<div *ngIf=\"visible\">\n  <div *ngIf=\"!auth.logged && backgroundDisable\" class=\"backgroundDisable\"></div>\n\n  <div *ngIf=\"!auth.logged && showLoginDiv\" class=\"login center-block\">\n    <h1>{{'igo.auth.connection' | translate}}</h1>\n\n    <igo-auth-google\n      *ngIf=\"options.google && options.google.enabled !== false\"\n      (login)=\"onLogin()\">\n    </igo-auth-google>\n    <igo-auth-microsoft\n      *ngIf=\"options.microsoft && options.microsoft.enabled !== false\"\n      (login)=\"onLogin()\">\n    </igo-auth-microsoft>\n    <igo-auth-microsoftb2c\n      *ngIf=\"options.microsoftb2c && options.microsoftb2c.enabled !== false\"\n      (login)=\"onLogin()\">\n    </igo-auth-microsoftb2c>\n    <igo-auth-facebook\n      *ngIf=\"options.facebook && options.facebook.enabled !== false\"\n      (login)=\"onLogin()\">\n    </igo-auth-facebook>\n    <igo-auth-intern\n      *ngIf=\"!options.intern || options.intern.enabled !== false\"\n      [allowAnonymous]=\"options.allowAnonymous\"\n      (login)=\"onLogin()\">\n    </igo-auth-intern>\n  </div>\n\n  <div *ngIf=\"auth.logged && showAlreadyConnectedDiv\" class=\"login center-block\">\n    <p>{{'igo.auth.welcome' | translate: user}}</p>\n    <button mat-raised-button type=\"button\" (click)=\"logout()\">{{'igo.auth.signOut' | translate}}</button>\n  </div>\n\n  <div *ngIf=\"showLogoutDiv\" class=\"login center-block\">\n    <p>{{'igo.auth.deconnection' | translate}}</p>\n    <button *ngIf=\"options.homeRoute\" mat-raised-button type=\"button\" (click)=\"home()\">{{'igo.auth.home' | translate}}</button>\n  </div>\n\n</div>\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  Input,\n  Optional,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthOptions } from '../shared/auth.interface';\nimport { AuthService } from '../shared/auth.service';\n\n@Component({\n  selector: 'igo-auth-form',\n  templateUrl: './auth-form.component.html',\n  styleUrls: ['./auth-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class AuthFormComponent implements OnInit {\n  @Input()\n  get backgroundDisable(): boolean {\n    if (this.isLogoutRoute || this.isLogoutRoute) {\n      return false;\n    }\n    return this._backgroundDisable;\n  }\n  set backgroundDisable(value: boolean) {\n    this._backgroundDisable = value.toString() === 'true';\n  }\n  private _backgroundDisable = true;\n\n  @Input()\n  get hasAlreadyConnectedDiv(): boolean {\n    return this._hasAlreadyConnectedDiv;\n  }\n  set hasAlreadyConnectedDiv(value: boolean) {\n    this._hasAlreadyConnectedDiv = value.toString() === 'true';\n  }\n  private _hasAlreadyConnectedDiv = true;\n\n  @Input()\n  get hasLogoutDiv(): boolean {\n    return this._hasLogoutDiv;\n  }\n  set hasLogoutDiv(value: boolean) {\n    this._hasLogoutDiv = value.toString() === 'true';\n  }\n  private _hasLogoutDiv = true;\n\n  @Input()\n  get showAlreadyConnectedDiv(): boolean {\n    if (this.isLogoutRoute) {\n      return this.hasAlreadyConnectedDiv;\n    }\n    return this._showAlreadyConnectedDiv;\n  }\n  set showAlreadyConnectedDiv(value: boolean) {\n    this._showAlreadyConnectedDiv = value.toString() === 'true';\n  }\n  private _showAlreadyConnectedDiv = false;\n\n  @Input()\n  get showLogoutDiv(): boolean {\n    if (this.isLogoutRoute) {\n      return this.hasLogoutDiv;\n    }\n    return this._showLogoutDiv;\n  }\n  set showLogoutDiv(value: boolean) {\n    this._showLogoutDiv = value.toString() === 'true';\n  }\n  private _showLogoutDiv = false;\n\n  get showLoginDiv(): boolean {\n    if (!this.isLogoutRoute) {\n      return true;\n    }\n  }\n\n  @Output() login: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  public options: AuthOptions;\n  public user;\n\n  public visible = true;\n\n  private isLoginRoute: boolean;\n  private isLogoutRoute: boolean;\n\n  constructor(\n    public auth: AuthService,\n    private config: ConfigService,\n    @Optional() private router: Router\n  ) {\n    this.options = this.config.getConfig('auth') || {};\n    this.visible = Object.getOwnPropertyNames(this.options).length !== 0;\n  }\n\n  public ngOnInit() {\n    this.analyzeRoute();\n    this.getName();\n  }\n\n  public onLogin() {\n    this.auth.goToRedirectUrl();\n    this.getName();\n    this.login.emit(true);\n  }\n\n  public logout() {\n    this.auth.logout().subscribe(() => {\n      this.user = undefined;\n      if (this.router) {\n        if (this.options.logoutRoute) {\n          this.router.navigate([this.options.logoutRoute]);\n        } else if (this.options.homeRoute) {\n          this.router.navigate([this.options.homeRoute]);\n        }\n      }\n    });\n  }\n\n  public home() {\n    if (this.router && this.options.homeRoute) {\n      this.router.navigate([this.options.homeRoute]);\n    }\n  }\n\n  private getName() {\n    const tokenDecoded = this.auth.decodeToken();\n    if (tokenDecoded) {\n      this.user = {\n        name: tokenDecoded.user.firstName || tokenDecoded.user.sourceId\n      };\n    }\n  }\n\n  private analyzeRoute() {\n    if (!this.router) {\n      return;\n    }\n\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe((changeEvent: any) => {\n        if (changeEvent.url) {\n          const currentRoute = changeEvent.url;\n          const logoutRoute = this.options.logoutRoute;\n          const loginRoute = this.options.loginRoute;\n\n          this.isLogoutRoute = currentRoute === logoutRoute;\n          this.isLoginRoute = currentRoute === loginRoute;\n\n          if (this.isLogoutRoute) {\n            this.auth.logout();\n          }\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.logged) {\n      return true;\n    }\n\n    this.authService.redirectUrl = state.url;\n\n    const authConfig = this.config.getConfig('auth');\n    if (authConfig && authConfig.loginRoute) {\n      this.router.navigateByUrl(authConfig.loginRoute);\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.authenticated) {\n      return true;\n    }\n\n    this.authService.redirectUrl = state.url;\n\n    const authConfig = this.config.getConfig('auth');\n    if (authConfig && authConfig.loginRoute) {\n      this.router.navigateByUrl(authConfig.loginRoute);\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const token = this.authService.decodeToken();\n    if (token && token.user && token.user.isAdmin) {\n      return true;\n    }\n\n    this.authService.redirectUrl = state.url;\n\n    const authConfig = this.config.getConfig('auth');\n    if (authConfig && authConfig.loginRoute) {\n      this.router.navigateByUrl(authConfig.loginRoute);\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { map } from 'rxjs/operators';\n\nimport { ConfigService } from '@igo2/core';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfilsGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private config: ConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(_route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.authService.getProfils().pipe(\n      map((profils: { profils: string[] }) => {\n        const authConfig = this.config.getConfig('auth');\n        if (\n          profils &&\n          profils.profils &&\n          profils.profils.some(v => authConfig.profilsGuard.indexOf(v) !== -1)\n        ) {\n          return true;\n        }\n\n        this.authService.redirectUrl = state.url;\n\n        if (authConfig && authConfig.loginRoute) {\n          this.router.navigateByUrl(authConfig.loginRoute);\n        }\n\n        return false;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Md5 } from 'ts-md5';\n\nimport { ConfigService } from '@igo2/core';\nimport { TokenService } from './token.service';\nimport { AuthByKeyOptions, WithCredentialsOptions } from './auth.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptor implements HttpInterceptor {\n  private refreshInProgress = false;\n\n  private get trustHosts() {\n    const trustHosts = this.config.getConfig('auth.trustHosts') || [];\n    trustHosts.push(window.location.hostname);\n    return trustHosts;\n  }\n\n  private get hostsWithCredentials(): WithCredentialsOptions[] {\n    return this.config.getConfig('auth.hostsWithCredentials') || [];\n  }\n\n  private get hostsWithAuthByKey(): AuthByKeyOptions[] {\n    return this.config.getConfig('auth.hostsByKey') || [];\n  }\n\n  constructor(\n    private config: ConfigService,\n    private tokenService: TokenService,\n    private http: HttpClient\n  ) {}\n\n  intercept(\n    originalReq: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const withCredentials = this.handleHostsWithCredentials(originalReq.url);\n    let req = originalReq.clone();\n    const hostWithKey = this.handleHostsAuthByKey(originalReq.url);\n    if (hostWithKey) {\n      req = req.clone({\n        params: req.params.set(hostWithKey.key, hostWithKey.value)\n      });\n    }\n    if (withCredentials) {\n      req = originalReq.clone({\n        withCredentials\n      });\n    }\n    this.refreshToken();\n    const token = this.tokenService.get();\n    const element = document.createElement('a');\n    element.href = req.url;\n    if (element.host === '') {\n      element.href = element.href; // FIX IE11, DO NOT REMOVE\n    }\n\n    if (!token || this.trustHosts.indexOf(element.hostname) === -1) {\n      return next.handle(req);\n    }\n\n    const authHeader = `Bearer ${token}`;\n    let authReq = req.clone({\n      headers: req.headers.set('Authorization', authHeader)\n    });\n\n    const tokenDecoded: any = this.tokenService.decode();\n    if (\n      authReq.params.get('_i') === 'true' &&\n      tokenDecoded &&\n      tokenDecoded.user &&\n      tokenDecoded.user.sourceId\n    ) {\n      const hashUser = Md5.hashStr(tokenDecoded.user.sourceId) as string;\n      authReq = authReq.clone({\n        params: authReq.params.set('_i', hashUser)\n      });\n    } else if (authReq.params.get('_i') === 'true') {\n      authReq = authReq.clone({\n        params: authReq.params.delete('_i')\n      });\n    }\n\n    return next.handle(authReq);\n  }\n\n  interceptXhr(xhr, url: string): boolean {\n    const withCredentials = this.handleHostsWithCredentials(url);\n    if (withCredentials) {\n       xhr.withCredentials = withCredentials;\n       return true;\n    }\n\n    this.refreshToken();\n    const element = document.createElement('a');\n    element.href = url;\n\n    const token = this.tokenService.get();\n    if (!token || this.trustHosts.indexOf(element.hostname) === -1) {\n      return false;\n    }\n    xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n    return true;\n  }\n\n  alterUrlWithKeyAuth(url: string): string {\n    const hostWithKey = this.handleHostsAuthByKey(url);\n    let interceptedUrl = url;\n    if (hostWithKey) {\n      const urlDecomposed = interceptedUrl.split(/[?&]/);\n      let urlWithKeyAdded = urlDecomposed.shift();\n      const paramsToKeep = urlDecomposed.filter(p => p.length !== 0);\n      paramsToKeep.push(`${hostWithKey.key}=${hostWithKey.value}`);\n      if (paramsToKeep.length) {\n        urlWithKeyAdded += '?' + paramsToKeep.join('&');\n      }\n      return urlWithKeyAdded;\n    }\n    return;\n  }\n\n  private handleHostsWithCredentials(reqUrl: string) {\n    let withCredentials = false;\n    for (const hostWithCredentials of this.hostsWithCredentials) {\n      const domainRegex = new RegExp(hostWithCredentials.domainRegFilters);\n      if (domainRegex.test(reqUrl)) {\n        withCredentials = hostWithCredentials.withCredentials !== undefined ? hostWithCredentials.withCredentials : undefined;\n        break;\n      }\n    }\n    return withCredentials;\n  }\n\n  private handleHostsAuthByKey(reqUrl: string): {key: string, value: string} {\n    let hostWithKey;\n    for (const hostWithAuthByKey of this.hostsWithAuthByKey) {\n      const domainRegex = new RegExp(hostWithAuthByKey.domainRegFilters);\n      if (domainRegex.test(reqUrl)) {\n        var replace = `${hostWithAuthByKey.keyProperty}=${hostWithAuthByKey.keyValue}`;\n        var keyAdded = new RegExp(replace,\"gm\");\n        if (!keyAdded.test(reqUrl)) {\n          hostWithKey = {key : hostWithAuthByKey.keyProperty, value: hostWithAuthByKey.keyValue};\n          break;\n        }\n      }\n    }\n    return hostWithKey;\n  }\n\n  refreshToken() {\n    const jwt = this.tokenService.decode();\n    const currentTime = new Date().getTime() / 1000;\n\n    if (\n      !this.refreshInProgress &&\n      jwt &&\n      currentTime < jwt.exp &&\n      currentTime > jwt.exp - 1800\n    ) {\n      this.refreshInProgress = true;\n\n      const url = this.config.getConfig('auth.url');\n      return this.http.post(`${url}/refresh`, {}).subscribe(\n        (data: any) => {\n          this.tokenService.set(data.token);\n          this.refreshInProgress = false;\n        },\n        err => {\n          err.error.caught = true;\n          return err;\n        }\n      );\n    }\n  }\n}\n","import {\n  MSAL_GUARD_CONFIG,\n  MSAL_INSTANCE,\n  MsalService,\n} from '@azure/msal-angular';\n\nimport {\n  PublicClientApplication,\n  InteractionType\n} from '@azure/msal-browser';\n\nimport { ConfigService } from '@igo2/core';\n\nimport { BrowserAuthOptions } from '@azure/msal-browser';\n\nimport { AuthMicrosoftOptions, MSPMsalGuardConfiguration } from './auth.interface';\n\nimport { MsalServiceb2c } from './auth-msalServiceb2c.service.';\n\nexport function MSALConfigFactory(config: ConfigService): PublicClientApplication {\n\n  const msConf: BrowserAuthOptions = config.getConfig('auth.microsoft') || {};\n\n  msConf.redirectUri = msConf.redirectUri || window.location.href;\n  msConf.authority = msConf.authority || 'https://login.microsoftonline.com/organizations';\n\n  const myMsalObj = new PublicClientApplication({\n    auth: msConf,\n    cache: {\n      cacheLocation: 'sessionStorage'\n    }\n  });\n\n  return myMsalObj;\n}\n\nexport function MSALConfigFactoryb2c(config: ConfigService): PublicClientApplication {\n\n  const msConf: BrowserAuthOptions = config.getConfig('auth.microsoftb2c.browserAuthOptions') || {};\n  msConf.redirectUri = msConf.redirectUri || window.location.href;\n  msConf.authority = msConf.authority || 'https://login.microsoftonline.com/organizations';\n\n  const myMsalObj = new PublicClientApplication({\n    auth: msConf,\n    cache: {\n      cacheLocation: 'sessionStorage'\n    }\n  });\n\n  return myMsalObj;\n}\n\nexport function MSALAngularConfigFactory(config: ConfigService): MSPMsalGuardConfiguration {\n\n  const msConf: AuthMicrosoftOptions = config.getConfig('auth.microsoft') || {};\n\n  return {\n    interactionType: InteractionType.Popup,\n    authRequest: {\n      scopes: ['user.read'],\n      loginHint: 'todo',\n    },\n    type: 'add'\n  };\n}\n\nexport function MSALAngularConfigFactoryb2c(config: ConfigService): MSPMsalGuardConfiguration {\n\n  const msConf: BrowserAuthOptions = config.getConfig('auth.microsoftb2c.browserAuthOptions') || {};\n\n  return {\n    interactionType: InteractionType.Popup,\n    authRequest: {\n      scopes: [msConf.clientId]\n    },\n    type: 'b2c'\n  };\n}\n\nexport function provideAuthMicrosoft(type?: string) {\n  if (type === 'b2c') {\n    return [\n      {\n        provide: MSAL_INSTANCE,\n        useFactory: MSALConfigFactoryb2c,\n        deps: [ConfigService]\n      },\n      {\n        provide: MSAL_GUARD_CONFIG,\n        useFactory: MSALAngularConfigFactoryb2c,\n        deps: [ConfigService],\n        multi: true\n      },\n      MsalServiceb2c\n    ];\n  } else {\n    return [\n      {\n        provide: MSAL_INSTANCE,\n        useFactory: MSALConfigFactory,\n        deps: [ConfigService]\n      },\n      {\n        provide: MSAL_GUARD_CONFIG,\n        useFactory: MSALAngularConfigFactory,\n        deps: [ConfigService],\n        multi: true\n      },\n      MsalService\n    ];\n  }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Directive({\n  selector: '[igoProtected]'\n})\nexport class ProtectedDirective {\n  constructor(authentication: AuthService, el: ElementRef) {\n    if (!authentication.isAuthenticated()) {\n      el.nativeElement.parentNode.removeChild(el.nativeElement);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { StorageService, StorageScope, ConfigService } from '@igo2/core';\nimport { AuthService } from './auth.service';\nimport { TokenService } from './token.service';\nimport { AuthStorageOptions } from './storage.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthStorageService extends StorageService {\n  protected options: AuthStorageOptions;\n\n  constructor(\n    config: ConfigService,\n    private http: HttpClient,\n    private authService: AuthService,\n    private tokenService: TokenService\n  ) {\n    super(config);\n\n    this.authService.authenticate$.subscribe(isAuthenticated => {\n      if (isAuthenticated && this.options.url) {\n        this.http\n          .get(this.options.url)\n          .subscribe((userIgo: { preference: object }) => {\n            if (userIgo && userIgo.preference) {\n              for (const key of Object.keys(userIgo.preference)) {\n                const value = userIgo.preference[key];\n                super.set(key, value);\n              }\n            }\n          });\n      }\n    });\n  }\n\n  set(\n    key: string,\n    value: string | object | boolean | number,\n    scope: StorageScope = StorageScope.LOCAL\n  ) {\n    if (\n      scope === StorageScope.LOCAL &&\n      this.authService.authenticated &&\n      this.options.url\n    ) {\n      const preference = {};\n      preference[key] = value;\n      this.http.patch(this.options.url, { preference }).subscribe();\n    }\n    super.set(key, value, scope);\n  }\n\n  remove(key: string, scope: StorageScope = StorageScope.LOCAL) {\n    if (\n      scope === StorageScope.LOCAL &&\n      this.authService.authenticated &&\n      this.options.url\n    ) {\n      const preference = {};\n      preference[key] = undefined;\n      this.http.patch(this.options.url, { preference }).subscribe();\n    }\n    super.remove(key, scope);\n  }\n\n  clear(scope: StorageScope = StorageScope.LOCAL) {\n    if (\n      scope === StorageScope.LOCAL &&\n      this.authService.authenticated &&\n      this.options.url\n    ) {\n      this.http.patch(this.options.url, { preference: {}}, {\n        params: {\n          mergePreference: 'false'\n        }\n      }).subscribe();\n    }\n\n    let token: string;\n    if (scope === StorageScope.LOCAL) {\n      token = this.tokenService.get();\n    }\n\n    super.clear(scope);\n\n    if (token) {\n      this.tokenService.set(token);\n    }\n\n    if (\n      scope === StorageScope.LOCAL &&\n      this.authService.authenticated &&\n      this.options.url\n    ) {\n      this.http\n        .get(this.options.url)\n        .subscribe((userIgo: { preference: object }) => {\n          if (userIgo && userIgo.preference) {\n            for (const key of Object.keys(userIgo.preference)) {\n              const value = userIgo.preference[key];\n              super.set(key, value);\n            }\n          }\n        });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthFormComponent } from './auth-form/auth-form.component';\n\nconst routes: Routes = [\n  { path: 'login', component: AuthFormComponent },\n  { path: 'logout', component: AuthFormComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class AuthRoutingModule {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MsalModule } from '@azure/msal-angular';\n\nimport { StorageService, IgoLanguageModule } from '@igo2/core';\n\nimport { AuthStorageService } from './shared/storage.service';\nimport { ProtectedDirective } from './shared/protected.directive';\nimport { AuthInterceptor } from './shared/auth.interceptor';\nimport { provideAuthMicrosoft } from './shared/auth-microsoft.provider';\n\nimport { AuthInternComponent } from './auth-form/auth-intern.component';\nimport { AuthFormComponent } from './auth-form/auth-form.component';\nimport { AuthGoogleComponent } from './auth-form/auth-google.component';\nimport { AuthFacebookComponent } from './auth-form/auth-facebook.component';\nimport { AuthMicrosoftComponent } from './auth-form/auth-microsoft.component';\nimport { AuthMicrosoftb2cComponent } from './auth-form/auth-microsoftb2c.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    IgoLanguageModule,\n    MsalModule\n  ],\n  declarations: [\n    AuthFormComponent,\n    AuthGoogleComponent,\n    AuthInternComponent,\n    AuthFacebookComponent,\n    AuthMicrosoftComponent,\n    AuthMicrosoftb2cComponent,\n    ProtectedDirective\n  ],\n  exports: [AuthFormComponent, ProtectedDirective]\n})\nexport class IgoAuthModule {\n  static forRoot(): ModuleWithProviders<IgoAuthModule> {\n    return {\n      ngModule: IgoAuthModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthInterceptor,\n          multi: true\n        },\n        {\n          provide: StorageService,\n          useClass: AuthStorageService\n        },\n        ...provideAuthMicrosoft('add'),\n        ...provideAuthMicrosoft('b2c')\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of auth\n */\n\nexport { AuthFormComponent } from './lib/auth-form';\nexport * from './lib/shared/auth.service';\nexport * from './lib/shared/logged.guard';\nexport * from './lib/shared/auth.guard';\nexport * from './lib/shared/admin.guard';\nexport * from './lib/shared/profils.guard';\nexport * from './lib/shared/auth.interceptor';\nexport * from './lib/shared/auth.interface';\nexport * from './lib/shared/auth-microsoft.provider';\nexport * from './lib/shared/protected.directive';\nexport * from './lib/shared/token.service';\nexport * from './lib/shared/storage.interface';\nexport * from './lib/shared/storage.service';\nexport * from './lib/auth-routing.module';\nexport * from './lib/auth.module';\n"]},"metadata":{},"sourceType":"module"}