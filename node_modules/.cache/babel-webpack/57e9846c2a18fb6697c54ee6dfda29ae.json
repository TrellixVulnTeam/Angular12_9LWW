{"ast":null,"code":"import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass TranslateLoader {}\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateLoader.prototype.getTranslation = function (lang) {};\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n\n\nlet TranslateFakeLoader = /*#__PURE__*/(() => {\n  class TranslateFakeLoader extends TranslateLoader {\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n      return of({});\n    }\n\n  }\n\n  TranslateFakeLoader.ɵfac = /*@__PURE__*/function () {\n    let ɵTranslateFakeLoader_BaseFactory;\n    return function TranslateFakeLoader_Factory(t) {\n      return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n    };\n  }();\n\n  TranslateFakeLoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TranslateFakeLoader,\n    factory: TranslateFakeLoader.ɵfac\n  });\n  return TranslateFakeLoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction MissingTranslationHandlerParams() {}\n\nif (false) {\n  /**\n   * the key that's missing in translation files\n   * @type {?}\n   */\n  MissingTranslationHandlerParams.prototype.key;\n  /**\n   * an instance of the service that was unable to translate the key.\n   * @type {?}\n   */\n\n  MissingTranslationHandlerParams.prototype.translateService;\n  /**\n   * interpolation params that were passed along for translating the given key.\n   * @type {?|undefined}\n   */\n\n  MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\n\n\nclass MissingTranslationHandler {}\n\nif (false) {\n  /**\n   * A function that handles missing translations.\n   *\n   * @abstract\n   * @param {?} params context for resolving a missing translation\n   * @return {?} a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  MissingTranslationHandler.prototype.handle = function (params) {};\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n\n\nlet FakeMissingTranslationHandler = /*#__PURE__*/(() => {\n  class FakeMissingTranslationHandler {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    handle(params) {\n      return params.key;\n    }\n\n  }\n\n  FakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n    return new (t || FakeMissingTranslationHandler)();\n  };\n\n  FakeMissingTranslationHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FakeMissingTranslationHandler,\n    factory: FakeMissingTranslationHandler.ɵfac\n  });\n  return FakeMissingTranslationHandler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/* tslint:disable */\n\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\n\n\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  // NaN === NaN\n\n  /** @type {?} */\n\n  let t1 = typeof o1;\n  /** @type {?} */\n\n  let t2 = typeof o2;\n  /** @type {?} */\n\n  let length;\n  /** @type {?} */\n\n  let key;\n  /** @type {?} */\n\n  let keySet;\n\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n\n      keySet = Object.create(null);\n\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n\n        keySet[key] = true;\n      }\n\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n/* tslint:enable */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\n\n\nfunction mergeDeep(target, source) {\n  /** @type {?} */\n  let output = Object.assign({}, target);\n\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n\n  return output;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nclass TranslateParser {}\n\nif (false) {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @abstract\n   * @param {?} expr\n   * @param {?=} params\n   * @return {?}\n   */\n  TranslateParser.prototype.interpolate = function (expr, params) {};\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @abstract\n   * @param {?} target\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  TranslateParser.prototype.getValue = function (target, key) {};\n}\n\nlet TranslateDefaultParser = /*#__PURE__*/(() => {\n  class TranslateDefaultParser extends TranslateParser {\n    constructor() {\n      super(...arguments);\n      this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    interpolate(expr, params) {\n      /** @type {?} */\n      let result;\n\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result = expr;\n      }\n\n      return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n\n\n    getValue(target, key) {\n      /** @type {?} */\n      let keys = typeof key === 'string' ? key.split('.') : [key];\n      key = '';\n\n      do {\n        key += keys.shift();\n\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n\n      return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n\n\n    interpolateString(expr, params) {\n      if (!params) {\n        return expr;\n      }\n\n      return expr.replace(this.templateMatcher,\n      /**\n      * @param {?} substring\n      * @param {?} b\n      * @return {?}\n      */\n      (substring, b) => {\n        /** @type {?} */\n        let r = this.getValue(params, b);\n        return isDefined(r) ? r : substring;\n      });\n    }\n\n  }\n\n  TranslateDefaultParser.ɵfac = /*@__PURE__*/function () {\n    let ɵTranslateDefaultParser_BaseFactory;\n    return function TranslateDefaultParser_Factory(t) {\n      return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n    };\n  }();\n\n  TranslateDefaultParser.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TranslateDefaultParser,\n    factory: TranslateDefaultParser.ɵfac\n  });\n  return TranslateDefaultParser;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslateDefaultParser.prototype.templateMatcher;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nclass TranslateCompiler {}\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} value\n   * @param {?} lang\n   * @return {?}\n   */\n  TranslateCompiler.prototype.compile = function (value, lang) {};\n  /**\n   * @abstract\n   * @param {?} translations\n   * @param {?} lang\n   * @return {?}\n   */\n\n\n  TranslateCompiler.prototype.compileTranslations = function (translations, lang) {};\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n\n\nlet TranslateFakeCompiler = /*#__PURE__*/(() => {\n  class TranslateFakeCompiler extends TranslateCompiler {\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    compile(value, lang) {\n      return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    compileTranslations(translations, lang) {\n      return translations;\n    }\n\n  }\n\n  TranslateFakeCompiler.ɵfac = /*@__PURE__*/function () {\n    let ɵTranslateFakeCompiler_BaseFactory;\n    return function TranslateFakeCompiler_Factory(t) {\n      return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n    };\n  }();\n\n  TranslateFakeCompiler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TranslateFakeCompiler,\n    factory: TranslateFakeCompiler.ɵfac\n  });\n  return TranslateFakeCompiler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass TranslateStore {\n  constructor() {\n    /**\n     * The lang currently used\n     */\n    this.currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n\n    this.translations = {};\n    /**\n     * an array of langs\n     */\n\n    this.langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     */\n\n    this.onDefaultLangChange = new EventEmitter();\n  }\n\n}\n\nif (false) {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   * @type {?}\n   */\n  TranslateStore.prototype.defaultLang;\n  /**\n   * The lang currently used\n   * @type {?}\n   */\n\n  TranslateStore.prototype.currentLang;\n  /**\n   * a list of translations per lang\n   * @type {?}\n   */\n\n  TranslateStore.prototype.translations;\n  /**\n   * an array of langs\n   * @type {?}\n   */\n\n  TranslateStore.prototype.langs;\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onTranslationChange;\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onLangChange;\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n   *     // do something\n   * });\n   * @type {?}\n   */\n\n  TranslateStore.prototype.onDefaultLangChange;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\n\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\n\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\n\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\n\nfunction TranslationChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  TranslationChangeEvent.prototype.translations;\n  /** @type {?} */\n\n  TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\n\n\nfunction LangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  LangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\n\n\nfunction DefaultLangChangeEvent() {}\n\nif (false) {\n  /** @type {?} */\n  DefaultLangChangeEvent.prototype.lang;\n  /** @type {?} */\n\n  DefaultLangChangeEvent.prototype.translations;\n}\n\nlet TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n     * @param {?=} defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n      this.store = store;\n      this.currentLoader = currentLoader;\n      this.compiler = compiler;\n      this.parser = parser;\n      this.missingTranslationHandler = missingTranslationHandler;\n      this.useDefaultLang = useDefaultLang;\n      this.isolate = isolate;\n      this.extend = extend;\n      this.pending = false;\n      this._onTranslationChange = new EventEmitter();\n      this._onLangChange = new EventEmitter();\n      this._onDefaultLangChange = new EventEmitter();\n      this._langs = [];\n      this._translations = {};\n      this._translationRequests = {};\n      /** set the default language from configuration */\n\n      if (defaultLanguage) {\n        this.setDefaultLang(defaultLanguage);\n      }\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n\n    get onTranslationChange() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n\n    get onLangChange() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n\n\n    get onDefaultLangChange() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n\n\n    get defaultLang() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n\n\n    set defaultLang(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n\n\n    get currentLang() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n\n\n    set currentLang(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n\n\n    get langs() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n\n\n    set langs(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n\n\n    get translations() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n\n\n    set translations(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    setDefaultLang(lang) {\n      if (lang === this.defaultLang) {\n        return;\n      }\n      /** @type {?} */\n\n\n      let pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (this.defaultLang == null) {\n          this.defaultLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        res => {\n          this.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n\n\n    getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    use(lang) {\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n      /** @type {?} */\n\n\n      let pending = this.retrieveTranslations(lang);\n\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n\n        pending.pipe(take(1)).subscribe(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        res => {\n          this.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    retrieveTranslations(lang) {\n      /** @type {?} */\n      let pending; // if this language is unavailable or extend is true, ask for it\n\n      if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n\n      return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    getTranslation(lang) {\n      this.pending = true;\n      /** @type {?} */\n\n      const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n      this.loadingTranslations = loadingTranslations.pipe(map(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n      this.loadingTranslations.subscribe({\n        next:\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        res => {\n          this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n          this.updateLangs();\n          this.pending = false;\n        },\n        error:\n        /**\n        * @param {?} err\n        * @return {?}\n        */\n        err => {\n          this.pending = false;\n        }\n      });\n      return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n\n\n    setTranslation(lang, translations, shouldMerge = false) {\n      translations = this.compiler.compileTranslations(translations, lang);\n\n      if ((shouldMerge || this.extend) && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n\n\n    getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n\n\n    addLangs(langs) {\n      langs.forEach(\n      /**\n      * @param {?} lang\n      * @return {?}\n      */\n      lang => {\n        if (this.langs.indexOf(lang) === -1) {\n          this.langs.push(lang);\n        }\n      });\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n\n\n    updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n\n    getParsedResult(translations, key, interpolateParams) {\n      /** @type {?} */\n      let res;\n\n      if (key instanceof Array) {\n        /** @type {?} */\n        let result = {};\n        /** @type {?} */\n\n        let observables = false;\n\n        for (let k of key) {\n          result[k] = this.getParsedResult(translations, k, interpolateParams);\n\n          if (isObservable(result[k])) {\n            observables = true;\n          }\n        }\n\n        if (observables) {\n          /** @type {?} */\n          const sources = key.map(\n          /**\n          * @param {?} k\n          * @return {?}\n          */\n          k => isObservable(result[k]) ? result[k] : of(result[k]));\n          return forkJoin(sources).pipe(map(\n          /**\n          * @param {?} arr\n          * @return {?}\n          */\n          arr => {\n            /** @type {?} */\n            let obj = {};\n            arr.forEach(\n            /**\n            * @param {?} value\n            * @param {?} index\n            * @return {?}\n            */\n            (value, index) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n\n        return result;\n      }\n\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n\n      if (typeof res === \"undefined\") {\n        /** @type {?} */\n        let params = {\n          key,\n          translateService: this\n        };\n\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n\n        res = this.missingTranslationHandler.handle(params);\n      }\n\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n\n\n    get(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      } // check if we are loading a new translation to use\n\n\n      if (this.pending) {\n        return this.loadingTranslations.pipe(concatMap(\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        res => {\n          res = this.getParsedResult(res, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        }));\n      } else {\n        /** @type {?} */\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n\n    getStreamOnTranslationChange(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n\n      return concat(defer(\n      /**\n      * @return {?}\n      */\n      () => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        /** @type {?} */\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n\n        if (typeof res.subscribe === 'function') {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n\n\n    stream(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n\n      return concat(defer(\n      /**\n      * @return {?}\n      */\n      () => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        /** @type {?} */\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n\n\n    instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      /** @type {?} */\n\n\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n\n      if (isObservable(res)) {\n        if (key instanceof Array) {\n          /** @type {?} */\n          let obj = {};\n          key.forEach(\n          /**\n          * @param {?} value\n          * @param {?} index\n          * @return {?}\n          */\n          (value, index) => {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n\n\n    set(key, value, lang = this.currentLang) {\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      }); // if there is no default lang, use the one that we just set\n\n      if (this.defaultLang == null) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n\n\n    resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n\n\n    getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      /** @type {?} */\n\n\n      let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n      if (typeof browserLang === 'undefined') {\n        return undefined;\n      }\n\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n\n      return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n\n\n    getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      /** @type {?} */\n\n\n      let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n\n  }\n\n  TranslateService.ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE), ɵngcc0.ɵɵinject(USE_EXTEND), ɵngcc0.ɵɵinject(DEFAULT_LANGUAGE));\n  };\n\n  TranslateService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac\n  });\n  /** @nocollapse */\n\n  return TranslateService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  TranslateService.prototype.loadingTranslations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.pending;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onTranslationChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._defaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._currentLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._langs;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype._translationRequests;\n  /** @type {?} */\n\n  TranslateService.prototype.store;\n  /** @type {?} */\n\n  TranslateService.prototype.currentLoader;\n  /** @type {?} */\n\n  TranslateService.prototype.compiler;\n  /** @type {?} */\n\n  TranslateService.prototype.parser;\n  /** @type {?} */\n\n  TranslateService.prototype.missingTranslationHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.useDefaultLang;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.isolate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateService.prototype.extend;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TranslateDirective = /*#__PURE__*/(() => {\n  class TranslateDirective {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    constructor(translateService, element, _ref) {\n      this.translateService = translateService;\n      this.element = element;\n      this._ref = _ref; // subscribe to onTranslationChange event, in case the translations of the current lang change\n\n      if (!this.onTranslationChangeSub) {\n        this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          if (event.lang === this.translateService.currentLang) {\n            this.checkNodes(true, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChangeSub) {\n        this.onLangChangeSub = this.translateService.onLangChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          this.checkNodes(true, event.translations);\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          this.checkNodes(true);\n        });\n      }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n\n    set translate(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n\n\n    set translateParams(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n\n\n    checkNodes(forceUpdate = false, translations) {\n      /** @type {?} */\n      let nodes = this.element.nativeElement.childNodes; // if the element is empty\n\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n\n      for (let i = 0; i < nodes.length; ++i) {\n        /** @type {?} */\n        let node = nodes[i];\n\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          // node type 3 is a text node\n\n          /** @type {?} */\n          let key;\n\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n\n          if (isDefined(node.lookupKey)) {\n            key = node.lookupKey;\n          } else if (this.key) {\n            key = this.key;\n          } else {\n            /** @type {?} */\n            let content = this.getContent(node);\n            /** @type {?} */\n\n            let trimmedContent = content.trim();\n\n            if (trimmedContent.length) {\n              node.lookupKey = trimmedContent; // we want to use the content as a key, not the translation value\n\n              if (content !== node.currentValue) {\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              } else if (node.originalContent) {\n                // the content seems ok, but the lang has changed\n                // the current content is the translation, not the key, use the last real content as key\n                key = node.originalContent.trim();\n              } else if (content !== node.currentValue) {\n                // we want to use the content as a key, not the translation value\n                key = trimmedContent; // the content was changed from the user, we'll use it as a reference if needed\n\n                node.originalContent = content || node.originalContent;\n              }\n            }\n          }\n\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n\n\n    updateValue(key, node, translations) {\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n\n        this.lastParams = this.currentParams;\n        /** @type {?} */\n\n        let onTranslation =\n        /**\n        * @param {?} res\n        * @return {?}\n        */\n        res => {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n\n          if (!node.originalContent) {\n            node.originalContent = this.getContent(node);\n          }\n\n          node.currentValue = isDefined(res) ? res : node.originalContent || key; // we replace in the original content to preserve spaces that we might have trimmed\n\n          this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n\n          this._ref.markForCheck();\n        };\n\n        if (isDefined(translations)) {\n          /** @type {?} */\n          let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n\n          if (isObservable(res)) {\n            res.subscribe(onTranslation);\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n\n\n    getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n\n\n    setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n\n  }\n\n  TranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n    return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  TranslateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TranslateDirective,\n    selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n    inputs: {\n      translate: \"translate\",\n      translateParams: \"translateParams\"\n    }\n  });\n  /** @nocollapse */\n\n  return TranslateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslateDirective.prototype.key;\n  /** @type {?} */\n\n  TranslateDirective.prototype.lastParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.currentParams;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onDefaultLangChangeSub;\n  /** @type {?} */\n\n  TranslateDirective.prototype.onTranslationChangeSub;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.translateService;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslateDirective.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TranslatePipe = /*#__PURE__*/(() => {\n  class TranslatePipe {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    constructor(translate, _ref) {\n      this.translate = translate;\n      this._ref = _ref;\n      this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n\n\n    updateValue(key, interpolateParams, translations) {\n      /** @type {?} */\n      let onTranslation =\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      res => {\n        this.value = res !== undefined ? res : key;\n        this.lastKey = key;\n\n        this._ref.markForCheck();\n      };\n\n      if (translations) {\n        /** @type {?} */\n        let res = this.translate.getParsedResult(translations, key, interpolateParams);\n\n        if (isObservable(res.subscribe)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n\n\n    transform(query, ...args) {\n      if (!query || !query.length) {\n        return query;\n      } // if we ask another time for the same key, return the last value\n\n\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n      /** @type {?} */\n\n\n      let interpolateParams;\n\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n\n          /** @type {?} */\n          let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (e) {\n            throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      } // store the query, in case it changes\n\n\n      this.lastKey = query; // store the params, in case they change\n\n      this.lastParams = args; // set the value\n\n      this.updateValue(query, interpolateParams); // if there is a subscription to onLangChange, clean it\n\n      this._dispose(); // subscribe to onTranslationChange event, in case the translations change\n\n\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          if (this.lastKey && event.lang === this.translate.currentLang) {\n            this.lastKey = null;\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onLangChange event, in case the language changes\n\n\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(\n        /**\n        * @param {?} event\n        * @return {?}\n        */\n        event => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      } // subscribe to onDefaultLangChange event, in case the default language changes\n\n\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(\n        /**\n        * @return {?}\n        */\n        () => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n\n            this.updateValue(query, interpolateParams);\n          }\n        });\n      }\n\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n\n\n    _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._dispose();\n    }\n\n  }\n\n  TranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n    return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef, 16));\n  };\n\n  TranslatePipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"translate\",\n    type: TranslatePipe,\n    pure: false\n  });\n  TranslatePipe.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TranslatePipe,\n    factory: TranslatePipe.ɵfac\n  });\n  /** @nocollapse */\n\n  return TranslatePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  TranslatePipe.prototype.value;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastKey;\n  /** @type {?} */\n\n  TranslatePipe.prototype.lastParams;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onTranslationChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onLangChange;\n  /** @type {?} */\n\n  TranslatePipe.prototype.onDefaultLangChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype.translate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  TranslatePipe.prototype._ref;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction TranslateModuleConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  TranslateModuleConfig.prototype.loader;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.compiler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.parser;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.missingTranslationHandler;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.isolate;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.extend;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.useDefaultLang;\n  /** @type {?|undefined} */\n\n  TranslateModuleConfig.prototype.defaultLanguage;\n}\n\nlet TranslateModule = /*#__PURE__*/(() => {\n  class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n\n\n    static forChild(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n\n  }\n\n  TranslateModule.ɵfac = function TranslateModule_Factory(t) {\n    return new (t || TranslateModule)();\n  };\n\n  TranslateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TranslateModule\n  });\n  TranslateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return TranslateModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, {\n    declarations: [TranslatePipe, TranslateDirective],\n    exports: [TranslatePipe, TranslateDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.js"],"names":["Injectable","EventEmitter","InjectionToken","Inject","Directive","ElementRef","ChangeDetectorRef","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","ɵngcc0","TranslateLoader","prototype","getTranslation","lang","TranslateFakeLoader","ɵfac","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","MissingTranslationHandlerParams","key","translateService","interpolateParams","MissingTranslationHandler","handle","params","FakeMissingTranslationHandler","FakeMissingTranslationHandler_Factory","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","interpolate","expr","getValue","TranslateDefaultParser","constructor","arguments","templateMatcher","result","interpolateString","interpolateFunction","split","shift","undefined","fn","replace","substring","b","r","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateCompiler","compile","compileTranslations","translations","TranslateFakeCompiler","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslationChangeEvent","LangChangeEvent","DefaultLangChangeEvent","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","observables","k","sources","arr","obj","index","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","TranslateService_Factory","ɵɵinject","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","TranslateDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","TranslatePipe","transform","query","args","validArgs","JSON","parse","e","SyntaxError","_dispose","TranslatePipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","TranslateModuleConfig","loader","TranslateModule","forRoot","config","ngModule","providers","provide","useClass","useValue","forChild","TranslateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nimport * as ɵngcc0 from '@angular/core';\nclass TranslateLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateLoader.prototype.getTranslation = function (lang) { };\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        return of({});\n    }\n}\nTranslateFakeLoader.ɵfac = /*@__PURE__*/ function () { let ɵTranslateFakeLoader_BaseFactory; return function TranslateFakeLoader_Factory(t) { return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader); }; }();\nTranslateFakeLoader.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeLoader, factory: TranslateFakeLoader.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeLoader, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/missing-translation-handler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MissingTranslationHandlerParams() { }\nif (false) {\n    /**\n     * the key that's missing in translation files\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.key;\n    /**\n     * an instance of the service that was unable to translate the key.\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.translateService;\n    /**\n     * interpolation params that were passed along for translating the given key.\n     * @type {?|undefined}\n     */\n    MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\nclass MissingTranslationHandler {\n}\nif (false) {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {?} params context for resolving a missing translation\n     * @return {?} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    MissingTranslationHandler.prototype.handle = function (params) { };\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    handle(params) {\n        return params.key;\n    }\n}\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) { return new (t || FakeMissingTranslationHandler)(); };\nFakeMissingTranslationHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FakeMissingTranslationHandler, factory: FakeMissingTranslationHandler.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/util.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    // NaN === NaN\n    /** @type {?} */\n    let t1 = typeof o1;\n    /** @type {?} */\n    let t2 = typeof o2;\n    /** @type {?} */\n    let length;\n    /** @type {?} */\n    let key;\n    /** @type {?} */\n    let keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n    /** @type {?} */\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        }));\n    }\n    return output;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.parser.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateParser {\n}\nif (false) {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @abstract\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateParser.prototype.interpolate = function (expr, params) { };\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @abstract\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    TranslateParser.prototype.getValue = function (target, key) { };\n}\nclass TranslateDefaultParser extends TranslateParser {\n    constructor() {\n        super(...arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolate(expr, params) {\n        /** @type {?} */\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = (/** @type {?} */ (expr));\n        }\n        return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    getValue(target, key) {\n        /** @type {?} */\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (/**\n         * @param {?} substring\n         * @param {?} b\n         * @return {?}\n         */\n        (substring, b) => {\n            /** @type {?} */\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        }));\n    }\n}\nTranslateDefaultParser.ɵfac = /*@__PURE__*/ function () { let ɵTranslateDefaultParser_BaseFactory; return function TranslateDefaultParser_Factory(t) { return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser); }; }();\nTranslateDefaultParser.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateDefaultParser, factory: TranslateDefaultParser.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDefaultParser, [{\n        type: Injectable\n    }], null, null); })();\nif (false) {\n    /** @type {?} */\n    TranslateDefaultParser.prototype.templateMatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.compiler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateCompiler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compile = function (value, lang) { };\n    /**\n     * @abstract\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    compile(value, lang) {\n        return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n}\nTranslateFakeCompiler.ɵfac = /*@__PURE__*/ function () { let ɵTranslateFakeCompiler_BaseFactory; return function TranslateFakeCompiler_Factory(t) { return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler); }; }();\nTranslateFakeCompiler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateFakeCompiler, factory: TranslateFakeCompiler.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.store.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateStore {\n    constructor() {\n        /**\n         * The lang currently used\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n}\nif (false) {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @type {?}\n     */\n    TranslateStore.prototype.defaultLang;\n    /**\n     * The lang currently used\n     * @type {?}\n     */\n    TranslateStore.prototype.currentLang;\n    /**\n     * a list of translations per lang\n     * @type {?}\n     */\n    TranslateStore.prototype.translations;\n    /**\n     * an array of langs\n     * @type {?}\n     */\n    TranslateStore.prototype.langs;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onTranslationChange;\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onLangChange;\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onDefaultLangChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\nfunction TranslationChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    TranslationChangeEvent.prototype.translations;\n    /** @type {?} */\n    TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\nfunction LangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    LangChangeEvent.prototype.lang;\n    /** @type {?} */\n    LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\nfunction DefaultLangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.lang;\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.translations;\n}\nclass TranslateService {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n     * @param {?=} defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeDefaultLang(lang);\n            }));\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeLang(lang);\n            }));\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    retrieveTranslations(lang) {\n        /** @type {?} */\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        /** @type {?} */\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => this.compiler.compileTranslations(res, lang))), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n                this.updateLangs();\n                this.pending = false;\n            }),\n            error: (/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                this.pending = false;\n            })\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n    addLangs(langs) {\n        langs.forEach((/**\n         * @param {?} lang\n         * @return {?}\n         */\n        (lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        }));\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        /** @type {?} */\n        let res;\n        if (key instanceof Array) {\n            /** @type {?} */\n            let result = {};\n            /** @type {?} */\n            let observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                /** @type {?} */\n                const sources = key.map((/**\n                 * @param {?} k\n                 * @return {?}\n                 */\n                k => isObservable(result[k]) ? result[k] : of((/** @type {?} */ (result[k])))));\n                return forkJoin(sources).pipe(map((/**\n                 * @param {?} arr\n                 * @return {?}\n                 */\n                (arr) => {\n                    /** @type {?} */\n                    let obj = {};\n                    arr.forEach((/**\n                     * @param {?} value\n                     * @param {?} index\n                     * @return {?}\n                     */\n                    (value, index) => {\n                        obj[key[index]] = value;\n                    }));\n                    return obj;\n                })));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            /** @type {?} */\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            })));\n        }\n        else {\n            /** @type {?} */\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onTranslationChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        }))));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onLangChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }))));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        /** @type {?} */\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                /** @type {?} */\n                let obj = {};\n                key.forEach((/**\n                 * @param {?} value\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (value, index) => {\n                    obj[key[index]] = key[index];\n                }));\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n}\nTranslateService.ɵfac = function TranslateService_Factory(t) { return new (t || TranslateService)(ɵngcc0.ɵɵinject(TranslateStore), ɵngcc0.ɵɵinject(TranslateLoader), ɵngcc0.ɵɵinject(TranslateCompiler), ɵngcc0.ɵɵinject(TranslateParser), ɵngcc0.ɵɵinject(MissingTranslationHandler), ɵngcc0.ɵɵinject(USE_DEFAULT_LANG), ɵngcc0.ɵɵinject(USE_STORE), ɵngcc0.ɵɵinject(USE_EXTEND), ɵngcc0.ɵɵinject(DEFAULT_LANGUAGE)); };\nTranslateService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslateService, factory: TranslateService.ɵfac });\n/** @nocollapse */\nTranslateService.ctorParameters = () => [\n    { type: TranslateStore },\n    { type: TranslateLoader },\n    { type: TranslateCompiler },\n    { type: TranslateParser },\n    { type: MissingTranslationHandler },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_STORE,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_EXTEND,] }] },\n    { type: String, decorators: [{ type: Inject, args: [DEFAULT_LANGUAGE,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateService, [{\n        type: Injectable\n    }], function () { return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [USE_DEFAULT_LANG]\n            }] }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [USE_STORE]\n            }] }, { type: Boolean, decorators: [{\n                type: Inject,\n                args: [USE_EXTEND]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [DEFAULT_LANGUAGE]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.loadingTranslations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.pending;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onTranslationChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._defaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._currentLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._langs;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translationRequests;\n    /** @type {?} */\n    TranslateService.prototype.store;\n    /** @type {?} */\n    TranslateService.prototype.currentLoader;\n    /** @type {?} */\n    TranslateService.prototype.compiler;\n    /** @type {?} */\n    TranslateService.prototype.parser;\n    /** @type {?} */\n    TranslateService.prototype.missingTranslationHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.useDefaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.isolate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.extend;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateDirective {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true, event.translations);\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true);\n            }));\n        }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n    checkNodes(forceUpdate = false, translations) {\n        /** @type {?} */\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            /** @type {?} */\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                // node type 3 is a text node\n                /** @type {?} */\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    /** @type {?} */\n                    let content = this.getContent(node);\n                    /** @type {?} */\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            /** @type {?} */\n            let onTranslation = (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            });\n            if (isDefined(translations)) {\n                /** @type {?} */\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) { return new (t || TranslateDirective)(ɵngcc0.ɵɵdirectiveInject(TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nTranslateDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TranslateDirective, selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]], inputs: { translate: \"translate\", translateParams: \"translateParams\" } });\n/** @nocollapse */\nTranslateDirective.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nTranslateDirective.propDecorators = {\n    translate: [{ type: Input }],\n    translateParams: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[translate],[ngx-translate]'\n            }]\n    }], function () { return [{ type: TranslateService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { translate: [{\n            type: Input\n        }], translateParams: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    TranslateDirective.prototype.key;\n    /** @type {?} */\n    TranslateDirective.prototype.lastParams;\n    /** @type {?} */\n    TranslateDirective.prototype.currentParams;\n    /** @type {?} */\n    TranslateDirective.prototype.onLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onDefaultLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onTranslationChangeSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.translateService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/translate.pipe.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslatePipe {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n    updateValue(key, interpolateParams, translations) {\n        /** @type {?} */\n        let onTranslation = (/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        });\n        if (translations) {\n            /** @type {?} */\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        /** @type {?} */\n        let interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                /** @type {?} */\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            }));\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dispose();\n    }\n}\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) { return new (t || TranslatePipe)(ɵngcc0.ɵɵdirectiveInject(TranslateService, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef, 16)); };\nTranslatePipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"translate\", type: TranslatePipe, pure: false });\nTranslatePipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: TranslatePipe, factory: TranslatePipe.ɵfac });\n/** @nocollapse */\nTranslatePipe.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslatePipe, [{\n        type: Injectable\n    }, {\n        type: Pipe,\n        args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            }]\n    }], function () { return [{ type: TranslateService }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    TranslatePipe.prototype.value;\n    /** @type {?} */\n    TranslatePipe.prototype.lastKey;\n    /** @type {?} */\n    TranslatePipe.prototype.lastParams;\n    /** @type {?} */\n    TranslatePipe.prototype.onTranslationChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onLangChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype.translate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TranslateModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.loader;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.compiler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.parser;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.missingTranslationHandler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.isolate;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.extend;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.useDefaultLang;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.defaultLanguage;\n}\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n}\nTranslateModule.ɵfac = function TranslateModule_Factory(t) { return new (t || TranslateModule)(); };\nTranslateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TranslateModule });\nTranslateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TranslateModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TranslateModule, { declarations: [TranslatePipe, TranslateDirective], exports: [TranslatePipe, TranslateDirective] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: ngx-translate-core.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n\n"]},"metadata":{},"sourceType":"module"}