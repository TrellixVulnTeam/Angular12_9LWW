{"ast":null,"code":"/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n *\n * @api\n */\n\nvar Style = function () {\n  /**\n   * @param {Options} [opt_options] Style options.\n   */\n  function Style(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n\n    this.geometry_ = null;\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n\n\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n\n    this.image_ = options.image !== undefined ? options.image : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n\n    this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n\n    this.text_ = options.text !== undefined ? options.text : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.zIndex_ = options.zIndex;\n  }\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n\n\n  Style.prototype.clone = function () {\n    var geometry = this.getGeometry();\n\n    if (geometry && typeof geometry === 'object') {\n      geometry =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      geometry.clone();\n    }\n\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setRenderer = function (renderer) {\n    this.renderer_ = renderer;\n  };\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.setHitDetectionRenderer = function (renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  };\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n\n\n  Style.prototype.getHitDetectionRenderer = function () {\n    return this.hitDetectionRenderer_;\n  };\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n\n\n  Style.prototype.getGeometry = function () {\n    return this.geometry_;\n  };\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n\n\n  Style.prototype.getGeometryFunction = function () {\n    return this.geometryFunction_;\n  };\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n\n\n  Style.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n\n\n  Style.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n\n\n  Style.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n\n\n  Style.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n\n\n  Style.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n\n\n  Style.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n\n\n  Style.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.getZIndex = function () {\n    return this.zIndex_;\n  };\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n\n\n  Style.prototype.setGeometry = function (geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return feature.get(geometry);\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return geometry;\n      };\n    }\n\n    this.geometry_ = geometry;\n  };\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n\n\n  Style.prototype.setZIndex = function (zIndex) {\n    this.zIndex_ = zIndex;\n  };\n\n  return Style;\n}();\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\n\n\nexport function toFunction(obj) {\n  var styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles_1;\n\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof\n      /** @type {?} */\n      obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n\n      var style = obj;\n      styles_1 = [style];\n    }\n\n    styleFunction = function () {\n      return styles_1;\n    };\n  }\n\n  return styleFunction;\n}\n/**\n * @type {Array<Style>}\n */\n\nvar defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\n\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n\n  return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\n\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\n\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/style/Style.js"],"names":["CircleStyle","Fill","GeometryType","Stroke","assert","Style","opt_options","options","geometry_","geometryFunction_","defaultGeometryFunction","geometry","undefined","setGeometry","fill_","fill","image_","image","renderer_","renderer","hitDetectionRenderer_","hitDetectionRenderer","stroke_","stroke","text_","text","zIndex_","zIndex","prototype","clone","getGeometry","getFill","getImage","getRenderer","getStroke","getText","getZIndex","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setFill","setImage","setStroke","setText","feature","get","setZIndex","toFunction","obj","styleFunction","styles_1","Array","isArray","style","defaultStyles","createDefaultStyle","resolution","color","width","radius","createEditingStyle","styles","white","blue","POLYGON","MULTI_POLYGON","LINE_STRING","MULTI_LINE_STRING","CIRCLE","concat","POINT","Infinity","MULTI_POINT","GEOMETRY_COLLECTION"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Style\n */\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Stroke from './Stroke.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\n * RenderFunction\n */\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n *\n * @api\n */\nvar Style = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Style options.\n     */\n    function Style(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n         */\n        this.geometry_ = null;\n        /**\n         * @private\n         * @type {!GeometryFunction}\n         */\n        this.geometryFunction_ = defaultGeometryFunction;\n        if (options.geometry !== undefined) {\n            this.setGeometry(options.geometry);\n        }\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n         * @private\n         * @type {import(\"./Image.js\").default}\n         */\n        this.image_ = options.image !== undefined ? options.image : null;\n        /**\n         * @private\n         * @type {RenderFunction|null}\n         */\n        this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n        /**\n         * @private\n         * @type {RenderFunction|null}\n         */\n        this.hitDetectionRenderer_ =\n            options.hitDetectionRenderer !== undefined\n                ? options.hitDetectionRenderer\n                : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {import(\"./Text.js\").default}\n         */\n        this.text_ = options.text !== undefined ? options.text : null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.zIndex_ = options.zIndex;\n    }\n    /**\n     * Clones the style.\n     * @return {Style} The cloned style.\n     * @api\n     */\n    Style.prototype.clone = function () {\n        var geometry = this.getGeometry();\n        if (geometry && typeof geometry === 'object') {\n            geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry).clone();\n        }\n        return new Style({\n            geometry: geometry,\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            image: this.getImage() ? this.getImage().clone() : undefined,\n            renderer: this.getRenderer(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            text: this.getText() ? this.getText().clone() : undefined,\n            zIndex: this.getZIndex(),\n        });\n    };\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setRenderer} or the `renderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n    Style.prototype.getRenderer = function () {\n        return this.renderer_;\n    };\n    /**\n     * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n     * and `image` options of the style will be ignored.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n    Style.prototype.setRenderer = function (renderer) {\n        this.renderer_ = renderer;\n    };\n    /**\n     * Sets a custom renderer function for this style used\n     * in hit detection.\n     * @param {RenderFunction|null} renderer Custom renderer function.\n     * @api\n     */\n    Style.prototype.setHitDetectionRenderer = function (renderer) {\n        this.hitDetectionRenderer_ = renderer;\n    };\n    /**\n     * Get the custom renderer function that was configured with\n     * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n     * @return {RenderFunction|null} Custom renderer function.\n     * @api\n     */\n    Style.prototype.getHitDetectionRenderer = function () {\n        return this.hitDetectionRenderer_;\n    };\n    /**\n     * Get the geometry to be rendered.\n     * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     * Feature property or geometry or function that returns the geometry that will\n     * be rendered with this style.\n     * @api\n     */\n    Style.prototype.getGeometry = function () {\n        return this.geometry_;\n    };\n    /**\n     * Get the function used to generate a geometry for rendering.\n     * @return {!GeometryFunction} Function that is called with a feature\n     * and returns the geometry to render instead of the feature's geometry.\n     * @api\n     */\n    Style.prototype.getGeometryFunction = function () {\n        return this.geometryFunction_;\n    };\n    /**\n     * Get the fill style.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Style.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Set the fill style.\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Style.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Get the image style.\n     * @return {import(\"./Image.js\").default} Image style.\n     * @api\n     */\n    Style.prototype.getImage = function () {\n        return this.image_;\n    };\n    /**\n     * Set the image style.\n     * @param {import(\"./Image.js\").default} image Image style.\n     * @api\n     */\n    Style.prototype.setImage = function (image) {\n        this.image_ = image;\n    };\n    /**\n     * Get the stroke style.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Style.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Set the stroke style.\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Style.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Get the text style.\n     * @return {import(\"./Text.js\").default} Text style.\n     * @api\n     */\n    Style.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Set the text style.\n     * @param {import(\"./Text.js\").default} text Text style.\n     * @api\n     */\n    Style.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Get the z-index for the style.\n     * @return {number|undefined} ZIndex.\n     * @api\n     */\n    Style.prototype.getZIndex = function () {\n        return this.zIndex_;\n    };\n    /**\n     * Set a geometry that is rendered instead of the feature's geometry.\n     *\n     * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n     *     Feature property or geometry or function returning a geometry to render\n     *     for this style.\n     * @api\n     */\n    Style.prototype.setGeometry = function (geometry) {\n        if (typeof geometry === 'function') {\n            this.geometryFunction_ = geometry;\n        }\n        else if (typeof geometry === 'string') {\n            this.geometryFunction_ = function (feature) {\n                return /** @type {import(\"../geom/Geometry.js\").default} */ (feature.get(geometry));\n            };\n        }\n        else if (!geometry) {\n            this.geometryFunction_ = defaultGeometryFunction;\n        }\n        else if (geometry !== undefined) {\n            this.geometryFunction_ = function () {\n                return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n            };\n        }\n        this.geometry_ = geometry;\n    };\n    /**\n     * Set the z-index.\n     *\n     * @param {number|undefined} zIndex ZIndex.\n     * @api\n     */\n    Style.prototype.setZIndex = function (zIndex) {\n        this.zIndex_ = zIndex;\n    };\n    return Style;\n}());\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n    var styleFunction;\n    if (typeof obj === 'function') {\n        styleFunction = obj;\n    }\n    else {\n        /**\n         * @type {Array<Style>}\n         */\n        var styles_1;\n        if (Array.isArray(obj)) {\n            styles_1 = obj;\n        }\n        else {\n            assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\n            var style = /** @type {Style} */ (obj);\n            styles_1 = [style];\n        }\n        styleFunction = function () {\n            return styles_1;\n        };\n    }\n    return styleFunction;\n}\n/**\n * @type {Array<Style>}\n */\nvar defaultStyles = null;\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n    // We don't use an immediately-invoked function\n    // and a closure so we don't get an error at script evaluation time in\n    // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n    // canvas.getContext('2d') at construction time, which will cause an.error\n    // in such browsers.)\n    if (!defaultStyles) {\n        var fill = new Fill({\n            color: 'rgba(255,255,255,0.4)',\n        });\n        var stroke = new Stroke({\n            color: '#3399CC',\n            width: 1.25,\n        });\n        defaultStyles = [\n            new Style({\n                image: new CircleStyle({\n                    fill: fill,\n                    stroke: stroke,\n                    radius: 5,\n                }),\n                fill: fill,\n                stroke: stroke,\n            }),\n        ];\n    }\n    return defaultStyles;\n}\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n    /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n    var styles = {};\n    var white = [255, 255, 255, 1];\n    var blue = [0, 153, 255, 1];\n    var width = 3;\n    styles[GeometryType.POLYGON] = [\n        new Style({\n            fill: new Fill({\n                color: [255, 255, 255, 0.5],\n            }),\n        }),\n    ];\n    styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n    styles[GeometryType.LINE_STRING] = [\n        new Style({\n            stroke: new Stroke({\n                color: white,\n                width: width + 2,\n            }),\n        }),\n        new Style({\n            stroke: new Stroke({\n                color: blue,\n                width: width,\n            }),\n        }),\n    ];\n    styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n    styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n    styles[GeometryType.POINT] = [\n        new Style({\n            image: new CircleStyle({\n                radius: width * 2,\n                fill: new Fill({\n                    color: blue,\n                }),\n                stroke: new Stroke({\n                    color: white,\n                    width: width / 2,\n                }),\n            }),\n            zIndex: Infinity,\n        }),\n    ];\n    styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n    styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n    return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n    return feature.getGeometry();\n}\nexport default Style;\n"]},"metadata":{},"sourceType":"module"}