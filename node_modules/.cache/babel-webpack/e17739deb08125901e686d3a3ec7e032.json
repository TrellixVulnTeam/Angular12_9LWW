{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/GML3\n */\n\n\nimport GML2 from './GML2.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, parseNode, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { assign } from '../obj.js';\nimport { createOrUpdate } from '../extent.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\n/**\n * @const\n * @type {string}\n * @private\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' + '1.0.0/gmlsf.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\n\nvar GML3 = function (_super) {\n  __extends(GML3, _super);\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n\n\n  function GML3(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, options) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.surface_ = options.surface !== undefined ? options.surface : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.curve_ = options.curve !== undefined ? options.curve : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.multiCurve_ = options.multiCurve !== undefined ? options.multiCurve : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.multiSurface_ = options.multiSurface !== undefined ? options.multiSurface : true;\n    /**\n     * @type {string}\n     */\n\n    _this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n    return _this;\n  }\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n\n\n  GML3.prototype.readMultiCurve = function (node, objectStack) {\n    /** @type {Array<LineString>} */\n    var lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n\n    if (lineStrings) {\n      var multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n\n\n  GML3.prototype.readMultiSurface = function (node, objectStack) {\n    /** @type {Array<Polygon>} */\n    var polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS, node, objectStack, this);\n\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML3.prototype.curveMemberParser = function (node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML3.prototype.surfaceMemberParser = function (node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPatch = function (node, objectStack) {\n    return pushParseAndPop([null], this.PATCHES_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readSegment = function (node, objectStack) {\n    return pushParseAndPop([null], this.SEGMENTS_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readPolygonPatch = function (node, objectStack) {\n    return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n\n\n  GML3.prototype.readLineStringSegment = function (node, objectStack) {\n    return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML3.prototype.interiorParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings = objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML3.prototype.exteriorParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings = objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n\n\n  GML3.prototype.readSurface = function (node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    var flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS, node, objectStack, this);\n\n    if (flatLinearRings && flatLinearRings[0]) {\n      var flatCoordinates = flatLinearRings[0];\n      var ends = [flatCoordinates.length];\n      var i = void 0,\n          ii = void 0;\n\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n\n\n  GML3.prototype.readCurve = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS, node, objectStack, this);\n\n    if (flatCoordinates) {\n      var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML3.prototype.readEnvelope = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPos = function (node, objectStack) {\n    var s = getAllTextContent(node, false);\n    var re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n\n    var flatCoordinates = [];\n    var m;\n\n    while (m = re.exec(s)) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n\n    if (s !== '') {\n      return undefined;\n    }\n\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    if (axisOrientation === 'neu') {\n      var i = void 0,\n          ii = void 0;\n\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        var y = flatCoordinates[i];\n        var x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n\n    var len = flatCoordinates.length;\n\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n\n    if (len === 0) {\n      return undefined;\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML3.prototype.readFlatPosList = function (node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var contextDimension = context['srsDimension'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n\n    var coords = s.split(/\\s+/); // The \"dimension\" attribute is from the GML 3.0.1 spec.\n\n    var dim = 2;\n\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n    /** @type {Element} */\n    node.parentNode.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n      /** @type {Element} */\n      node.parentNode.getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n\n    var x, y, z;\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePos_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n\n    var point = value.getCoordinates();\n    var coords; // only 2d for simple features profile\n\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    writeStringTextNode(node, coords);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML3.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ' ' + point[1] : point[1] + ' ' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writePosList_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n    var point;\n\n    for (var i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writePoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeEnvelope = function (node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop({\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeLinearRing = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML3.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeMultiSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeMultiPoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n    var hasZ = context['hasZ'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeMultiCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeRing = function (node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeSurfaceOrPolygonMember = function (node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writePointMember = function (node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeLineStringOrCurveMember = function (node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(geometry, context);\n    } else {\n      value = transformGeometryWithOptions(geometry, true, context);\n    }\n\n    pushSerializeAndPop(item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML3.prototype.writeFeatureElement = function (node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid', fid);\n    }\n\n    var context = objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var keys = [];\n    var values = [];\n\n    if (feature.hasProperties()) {\n      var properties = feature.getProperties();\n\n      for (var key in properties) {\n        var value = properties[key];\n\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n\n          if (key == geometryName || typeof\n          /** @type {?} */\n          value.getSimplifiedGeometry === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML3.prototype.writeFeatureMembers_ = function (node, features, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var featureType = context['featureType'];\n    var featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n\n    var serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(item, serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML3.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var curve = context['curve'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS(this.namespace, nodeName);\n  };\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n\n\n  GML3.prototype.writeGeometryNode = function (geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var geom = createElementNS(this.namespace, 'geom');\n    var context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  };\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n\n\n  GML3.prototype.writeFeaturesNode = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    var context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  };\n\n  return GML3;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\n\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment)\n  }\n};\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n * @return {string} Result.\n * @api\n */\n\nGML3.prototype.writeFeatures;\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope)\n  }\n};\nexport default GML3;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/GML3.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","GML2","GMLBase","GMLNS","GeometryLayout","LineString","MultiLineString","MultiPolygon","Polygon","OBJECT_PROPERTY_NODE_FACTORY","XML_SCHEMA_INSTANCE_URI","createElementNS","getAllTextContent","makeArrayPusher","makeChildAppender","makeReplacer","makeSimpleNodeFactory","parseNode","pushParseAndPop","pushSerializeAndPop","assign","createOrUpdate","extend","get","getProjection","readNonNegativeIntegerString","writeStringTextNode","transformExtentWithOptions","transformGeometryWithOptions","schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","_super","opt_options","_this","options","surface_","surface","undefined","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","MULTICURVE_PARSERS","multiLineString","readMultiSurface","polygons","MULTISURFACE_PARSERS","curveMemberParser","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","flatLinearRings","length","push","exteriorParser","readSurface","SURFACE_PARSERS","flatCoordinates","ends","i","ii","XYZ","readCurve","CURVE_PARSERS","lineString","readEnvelope","ENVELOPE_PARSERS","readFlatPos","s","re","m","exec","parseFloat","substr","context","containerSrs","axisOrientation","proj","getAxisOrientation","y","x","len","readFlatPosList","replace","contextDimension","coords","split","dim","getAttribute","parentNode","z","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","getCoords_","opt_srsName","opt_hasZ","writePosList_","points","parts","join","writePoint","geometry","pos","namespaceURI","appendChild","writeEnvelope","extent","keys","values","ENVELOPE_SERIALIZERS","writeLinearRing","posList","RING_NODE_FACTORY_","opt_nodeName","exteriorWritten","writeSurfaceOrPolygon","nodeName","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","isArray","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","hasProperties","properties","getProperties","key","getSimplifiedGeometry","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","readFlatCoordinates","GEOMETRY_PARSERS","readPoint","readMultiPoint","readLineString","readMultiLineString","readLinearRing","readPolygon","readMultiPolygon","writeFeatures"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, XML_SCHEMA_INSTANCE_URI, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, parseNode, pushParseAndPop, pushSerializeAndPop, } from '../xml.js';\nimport { assign } from '../obj.js';\nimport { createOrUpdate } from '../extent.js';\nimport { extend } from '../array.js';\nimport { get as getProjection } from '../proj.js';\nimport { readNonNegativeIntegerString, writeStringTextNode } from './xsd.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions, } from './Feature.js';\n/**\n * @const\n * @type {string}\n * @private\n */\nvar schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n    'MultiLineString': 'lineStringMember',\n    'MultiCurve': 'curveMember',\n    'MultiPolygon': 'polygonMember',\n    'MultiSurface': 'surfaceMember',\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nvar GML3 = /** @class */ (function (_super) {\n    __extends(GML3, _super);\n    /**\n     * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n     */\n    function GML3(opt_options) {\n        var _this = this;\n        var options = \n        /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n        _this = _super.call(this, options) || this;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.surface_ = options.surface !== undefined ? options.surface : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.curve_ = options.curve !== undefined ? options.curve : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.multiCurve_ =\n            options.multiCurve !== undefined ? options.multiCurve : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.multiSurface_ =\n            options.multiSurface !== undefined ? options.multiSurface : true;\n        /**\n         * @type {string}\n         */\n        _this.schemaLocation = options.schemaLocation\n            ? options.schemaLocation\n            : schemaLocation;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n        return _this;\n    }\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {MultiLineString|undefined} MultiLineString.\n     */\n    GML3.prototype.readMultiCurve = function (node, objectStack) {\n        /** @type {Array<LineString>} */\n        var lineStrings = pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);\n        if (lineStrings) {\n            var multiLineString = new MultiLineString(lineStrings);\n            return multiLineString;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {MultiPolygon|undefined} MultiPolygon.\n     */\n    GML3.prototype.readMultiSurface = function (node, objectStack) {\n        /** @type {Array<Polygon>} */\n        var polygons = pushParseAndPop([], this.MULTISURFACE_PARSERS, node, objectStack, this);\n        if (polygons) {\n            return new MultiPolygon(polygons);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML3.prototype.curveMemberParser = function (node, objectStack) {\n        parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML3.prototype.surfaceMemberParser = function (node, objectStack) {\n        parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<(Array<number>)>|undefined} flat coordinates.\n     */\n    GML3.prototype.readPatch = function (node, objectStack) {\n        return pushParseAndPop([null], this.PATCHES_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<number>|undefined} flat coordinates.\n     */\n    GML3.prototype.readSegment = function (node, objectStack) {\n        return pushParseAndPop([null], this.SEGMENTS_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<(Array<number>)>|undefined} flat coordinates.\n     */\n    GML3.prototype.readPolygonPatch = function (node, objectStack) {\n        return pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<number>|undefined} flat coordinates.\n     */\n    GML3.prototype.readLineStringSegment = function (node, objectStack) {\n        return pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML3.prototype.interiorParser = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = \n            /** @type {Array<Array<number>>} */\n            (objectStack[objectStack.length - 1]);\n            flatLinearRings.push(flatLinearRing);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML3.prototype.exteriorParser = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = \n            /** @type {Array<Array<number>>} */\n            (objectStack[objectStack.length - 1]);\n            flatLinearRings[0] = flatLinearRing;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Polygon|undefined} Polygon.\n     */\n    GML3.prototype.readSurface = function (node, objectStack) {\n        /** @type {Array<Array<number>>} */\n        var flatLinearRings = pushParseAndPop([null], this.SURFACE_PARSERS, node, objectStack, this);\n        if (flatLinearRings && flatLinearRings[0]) {\n            var flatCoordinates = flatLinearRings[0];\n            var ends = [flatCoordinates.length];\n            var i = void 0, ii = void 0;\n            for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n                extend(flatCoordinates, flatLinearRings[i]);\n                ends.push(flatCoordinates.length);\n            }\n            return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {LineString|undefined} LineString.\n     */\n    GML3.prototype.readCurve = function (node, objectStack) {\n        /** @type {Array<number>} */\n        var flatCoordinates = pushParseAndPop([null], this.CURVE_PARSERS, node, objectStack, this);\n        if (flatCoordinates) {\n            var lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n            return lineString;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n     */\n    GML3.prototype.readEnvelope = function (node, objectStack) {\n        /** @type {Array<number>} */\n        var flatCoordinates = pushParseAndPop([null], this.ENVELOPE_PARSERS, node, objectStack, this);\n        return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<number>|undefined} Flat coordinates.\n     */\n    GML3.prototype.readFlatPos = function (node, objectStack) {\n        var s = getAllTextContent(node, false);\n        var re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n        /** @type {Array<number>} */\n        var flatCoordinates = [];\n        var m;\n        while ((m = re.exec(s))) {\n            flatCoordinates.push(parseFloat(m[1]));\n            s = s.substr(m[0].length);\n        }\n        if (s !== '') {\n            return undefined;\n        }\n        var context = objectStack[0];\n        var containerSrs = context['srsName'];\n        var axisOrientation = 'enu';\n        if (containerSrs) {\n            var proj = getProjection(containerSrs);\n            axisOrientation = proj.getAxisOrientation();\n        }\n        if (axisOrientation === 'neu') {\n            var i = void 0, ii = void 0;\n            for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n                var y = flatCoordinates[i];\n                var x = flatCoordinates[i + 1];\n                flatCoordinates[i] = x;\n                flatCoordinates[i + 1] = y;\n            }\n        }\n        var len = flatCoordinates.length;\n        if (len == 2) {\n            flatCoordinates.push(0);\n        }\n        if (len === 0) {\n            return undefined;\n        }\n        return flatCoordinates;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<number>|undefined} Flat coordinates.\n     */\n    GML3.prototype.readFlatPosList = function (node, objectStack) {\n        var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n        var context = objectStack[0];\n        var containerSrs = context['srsName'];\n        var contextDimension = context['srsDimension'];\n        var axisOrientation = 'enu';\n        if (containerSrs) {\n            var proj = getProjection(containerSrs);\n            axisOrientation = proj.getAxisOrientation();\n        }\n        var coords = s.split(/\\s+/);\n        // The \"dimension\" attribute is from the GML 3.0.1 spec.\n        var dim = 2;\n        if (node.getAttribute('srsDimension')) {\n            dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n        }\n        else if (node.getAttribute('dimension')) {\n            dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n        }\n        else if (\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {\n            dim = readNonNegativeIntegerString(\n            /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));\n        }\n        else if (contextDimension) {\n            dim = readNonNegativeIntegerString(contextDimension);\n        }\n        var x, y, z;\n        var flatCoordinates = [];\n        for (var i = 0, ii = coords.length; i < ii; i += dim) {\n            x = parseFloat(coords[i]);\n            y = parseFloat(coords[i + 1]);\n            z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n            if (axisOrientation.substr(0, 2) === 'en') {\n                flatCoordinates.push(x, y, z);\n            }\n            else {\n                flatCoordinates.push(y, x, z);\n            }\n        }\n        return flatCoordinates;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} value Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePos_ = function (node, value, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsDimension = hasZ ? '3' : '2';\n        node.setAttribute('srsDimension', srsDimension);\n        var srsName = context['srsName'];\n        var axisOrientation = 'enu';\n        if (srsName) {\n            axisOrientation = getProjection(srsName).getAxisOrientation();\n        }\n        var point = value.getCoordinates();\n        var coords;\n        // only 2d for simple features profile\n        if (axisOrientation.substr(0, 2) === 'en') {\n            coords = point[0] + ' ' + point[1];\n        }\n        else {\n            coords = point[1] + ' ' + point[0];\n        }\n        if (hasZ) {\n            // For newly created points, Z can be undefined.\n            var z = point[2] || 0;\n            coords += ' ' + z;\n        }\n        writeStringTextNode(node, coords);\n    };\n    /**\n     * @param {Array<number>} point Point geometry.\n     * @param {string} [opt_srsName] Optional srsName\n     * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n     * @return {string} The coords string.\n     * @private\n     */\n    GML3.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n        var axisOrientation = 'enu';\n        if (opt_srsName) {\n            axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n        }\n        var coords = axisOrientation.substr(0, 2) === 'en'\n            ? point[0] + ' ' + point[1]\n            : point[1] + ' ' + point[0];\n        if (opt_hasZ) {\n            // For newly created points, Z can be undefined.\n            var z = point[2] || 0;\n            coords += ' ' + z;\n        }\n        return coords;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writePosList_ = function (node, value, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsDimension = hasZ ? '3' : '2';\n        node.setAttribute('srsDimension', srsDimension);\n        var srsName = context['srsName'];\n        // only 2d for simple features profile\n        var points = value.getCoordinates();\n        var len = points.length;\n        var parts = new Array(len);\n        var point;\n        for (var i = 0; i < len; ++i) {\n            point = points[i];\n            parts[i] = this.getCoords_(point, srsName, hasZ);\n        }\n        writeStringTextNode(node, parts.join(' '));\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writePoint = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var pos = createElementNS(node.namespaceURI, 'pos');\n        node.appendChild(pos);\n        this.writePos_(pos, geometry, objectStack);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeEnvelope = function (node, extent, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var keys = ['lowerCorner', 'upperCorner'];\n        var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        ({ node: node }), this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeLinearRing = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var posList = createElementNS(node.namespaceURI, 'posList');\n        node.appendChild(posList);\n        this.writePosList_(posList, geometry, objectStack);\n    };\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Node} Node.\n     * @private\n     */\n    GML3.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var parentNode = context.node;\n        var exteriorWritten = context['exteriorWritten'];\n        if (exteriorWritten === undefined) {\n            context['exteriorWritten'] = true;\n        }\n        return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Polygon} geometry Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeSurfaceOrPolygon = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'PolygonPatch' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n            var rings = geometry.getLinearRings();\n            pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n        }\n        else if (node.nodeName === 'Surface') {\n            var patches = createElementNS(node.namespaceURI, 'patches');\n            node.appendChild(patches);\n            this.writeSurfacePatches_(patches, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {LineString} geometry LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeCurveOrLineString = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'LineStringSegment' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'LineString' ||\n            node.nodeName === 'LineStringSegment') {\n            var posList = createElementNS(node.namespaceURI, 'posList');\n            node.appendChild(posList);\n            this.writePosList_(posList, geometry, objectStack);\n        }\n        else if (node.nodeName === 'Curve') {\n            var segments = createElementNS(node.namespaceURI, 'segments');\n            node.appendChild(segments);\n            this.writeCurveSegments_(segments, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {MultiPolygon} geometry MultiPolygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeMultiSurfaceOrPolygon = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var surface = context['surface'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var polygons = geometry.getPolygons();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, surface: surface }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeMultiPoint = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        var hasZ = context['hasZ'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var points = geometry.getPoints();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {MultiLineString} geometry MultiLineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeMultiCurveOrLineString = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var curve = context['curve'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var lines = geometry.getLineStrings();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, curve: curve }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeRing = function (node, ring, objectStack) {\n        var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n        node.appendChild(linearRing);\n        this.writeLinearRing(linearRing, ring, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Polygon} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeSurfaceOrPolygonMember = function (node, polygon, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeSurfaceOrPolygon(child, polygon, objectStack);\n        }\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Point.js\").default} point Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writePointMember = function (node, point, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'Point');\n        node.appendChild(child);\n        this.writePoint(child, point, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {LineString} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeLineStringOrCurveMember = function (node, line, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeCurveOrLineString(child, line, objectStack);\n        }\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Polygon} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n        node.appendChild(child);\n        this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {LineString} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n        node.appendChild(child);\n        this.writeCurveOrLineString(child, line, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n        var context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n        var item = assign({}, context);\n        item['node'] = node;\n        var value;\n        if (Array.isArray(geometry)) {\n            value = transformExtentWithOptions(\n            /** @type {import(\"../extent.js\").Extent} */ (geometry), context);\n        }\n        else {\n            value = transformGeometryWithOptions(\n            /** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n        }\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        (item), this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML3.prototype.writeFeatureElement = function (node, feature, objectStack) {\n        var fid = feature.getId();\n        if (fid) {\n            node.setAttribute('fid', /** @type {string} */ (fid));\n        }\n        var context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var featureNS = context['featureNS'];\n        var geometryName = feature.getGeometryName();\n        if (!context.serializers) {\n            context.serializers = {};\n            context.serializers[featureNS] = {};\n        }\n        var keys = [];\n        var values = [];\n        if (feature.hasProperties()) {\n            var properties = feature.getProperties();\n            for (var key in properties) {\n                var value = properties[key];\n                if (value !== null) {\n                    keys.push(key);\n                    values.push(value);\n                    if (key == geometryName ||\n                        typeof ( /** @type {?} */(value).getSimplifiedGeometry) ===\n                            'function') {\n                        if (!(key in context.serializers[featureNS])) {\n                            context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n                        }\n                    }\n                    else {\n                        if (!(key in context.serializers[featureNS])) {\n                            context.serializers[featureNS][key] =\n                                makeChildAppender(writeStringTextNode);\n                        }\n                    }\n                }\n            }\n        }\n        var item = assign({}, context);\n        item.node = node;\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        (item), context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML3.prototype.writeFeatureMembers_ = function (node, features, objectStack) {\n        var context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var featureType = context['featureType'];\n        var featureNS = context['featureNS'];\n        /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n        var serializers = {};\n        serializers[featureNS] = {};\n        serializers[featureNS][featureType] = makeChildAppender(this.writeFeatureElement, this);\n        var item = assign({}, context);\n        item.node = node;\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        (item), serializers, makeSimpleNodeFactory(featureType, featureNS), features, objectStack);\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Node|undefined} Node.\n     * @private\n     */\n    GML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var parentNode = objectStack[objectStack.length - 1].node;\n        return createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Element|undefined} Node.\n     * @private\n     */\n    GML3.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var multiSurface = context['multiSurface'];\n        var surface = context['surface'];\n        var curve = context['curve'];\n        var multiCurve = context['multiCurve'];\n        var nodeName;\n        if (!Array.isArray(value)) {\n            nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n            if (nodeName === 'MultiPolygon' && multiSurface === true) {\n                nodeName = 'MultiSurface';\n            }\n            else if (nodeName === 'Polygon' && surface === true) {\n                nodeName = 'Surface';\n            }\n            else if (nodeName === 'LineString' && curve === true) {\n                nodeName = 'Curve';\n            }\n            else if (nodeName === 'MultiLineString' && multiCurve === true) {\n                nodeName = 'MultiCurve';\n            }\n        }\n        else {\n            nodeName = 'Envelope';\n        }\n        return createElementNS(this.namespace, nodeName);\n    };\n    /**\n     * Encode a geometry in GML 3.1.1 Simple Features.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n     * @return {Node} Node.\n     * @api\n     */\n    GML3.prototype.writeGeometryNode = function (geometry, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var geom = createElementNS(this.namespace, 'geom');\n        var context = {\n            node: geom,\n            hasZ: this.hasZ,\n            srsName: this.srsName,\n            curve: this.curve_,\n            surface: this.surface_,\n            multiSurface: this.multiSurface_,\n            multiCurve: this.multiCurve_,\n        };\n        if (opt_options) {\n            assign(context, opt_options);\n        }\n        this.writeGeometryElement(geom, geometry, [context]);\n        return geom;\n    };\n    /**\n     * Encode an array of features in the GML 3.1.1 format as an XML node.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n     * @return {Element} Node.\n     * @api\n     */\n    GML3.prototype.writeFeaturesNode = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var node = createElementNS(this.namespace, 'featureMembers');\n        node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n        var context = {\n            srsName: this.srsName,\n            hasZ: this.hasZ,\n            curve: this.curve_,\n            surface: this.surface_,\n            multiSurface: this.multiSurface_,\n            multiCurve: this.multiCurve_,\n            featureNS: this.featureNS,\n            featureType: this.featureType,\n        };\n        if (opt_options) {\n            assign(context, opt_options);\n        }\n        this.writeFeatureMembers_(node, features, [context]);\n        return node;\n    };\n    return GML3;\n}(GMLBase));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'pos': makeReplacer(GML3.prototype.readFlatPos),\n        'posList': makeReplacer(GML3.prototype.readFlatPosList),\n        'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'interior': GML3.prototype.interiorParser,\n        'exterior': GML3.prototype.exteriorParser,\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'Point': makeReplacer(GMLBase.prototype.readPoint),\n        'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n        'LineString': makeReplacer(GMLBase.prototype.readLineString),\n        'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n        'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n        'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n        'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n        'Surface': makeReplacer(GML3.prototype.readSurface),\n        'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n        'Curve': makeReplacer(GML3.prototype.readCurve),\n        'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n        'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n        'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n        'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n        'Curve': makeArrayPusher(GML3.prototype.readCurve),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n        'Surface': makeArrayPusher(GML3.prototype.readSurface),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'patches': makeReplacer(GML3.prototype.readPatch),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'segments': makeReplacer(GML3.prototype.readSegment),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n        'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'LineStringSegment': makeReplacer(GML3.prototype.readLineStringSegment),\n    },\n};\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'exterior': makeChildAppender(GML3.prototype.writeRing),\n        'interior': makeChildAppender(GML3.prototype.writeRing),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'lowerCorner': makeChildAppender(writeStringTextNode),\n        'upperCorner': makeChildAppender(writeStringTextNode),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'surfaceMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n        'polygonMember': makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'lineStringMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n        'curveMember': makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n        'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n        'Point': makeChildAppender(GML3.prototype.writePoint),\n        'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n        'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n        'MultiLineString': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n        'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n        'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n        'MultiPolygon': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n        'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n        'MultiSurface': makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),\n        'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n    },\n};\nexport default GML3;\n"]},"metadata":{},"sourceType":"module"}