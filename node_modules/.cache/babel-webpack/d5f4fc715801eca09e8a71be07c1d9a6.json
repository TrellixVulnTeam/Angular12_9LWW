{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/EsriJSON\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { containsExtent } from '../extent.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { get as getProjection } from '../proj.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\n\nvar GEOMETRY_READERS = {};\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\n\nvar GEOMETRY_WRITERS = {};\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\n\nvar EsriJSON = function (_super) {\n  __extends(EsriJSON, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function EsriJSON(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n\n    _this.geometryName_ = options.geometryName;\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @param {string} [opt_idField] Name of the field where to get the id from.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  EsriJSON.prototype.readFeatureFromObject = function (object, opt_options, opt_idField) {\n    var esriJSONFeature = object;\n    var geometry = readGeometry(esriJSONFeature.geometry, opt_options);\n    var feature = new Feature();\n\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    }\n\n    feature.setGeometry(geometry);\n\n    if (esriJSONFeature.attributes) {\n      feature.setProperties(esriJSONFeature.attributes, true);\n      var id = esriJSONFeature.attributes[opt_idField];\n\n      if (id !== undefined) {\n        feature.setId(id);\n      }\n    }\n\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  EsriJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var options = opt_options ? opt_options : {};\n\n    if (object['features']) {\n      var esriJSONFeatureSet = object;\n      /** @type {Array<import(\"../Feature.js\").default>} */\n\n      var features = [];\n      var esriJSONFeatures = esriJSONFeatureSet.features;\n\n      for (var i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(esriJSONFeatures[i], options, object.objectIdFieldName));\n      }\n\n      return features;\n    } else {\n      return [this.readFeatureFromObject(object, options)];\n    }\n  };\n  /**\n   * @param {EsriJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  EsriJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  EsriJSON.prototype.readProjectionFromObject = function (object) {\n    if (object['spatialReference'] && object['spatialReference']['wkid'] !== undefined) {\n      var spatialReference = object['spatialReference'];\n      var crs = spatialReference.wkid;\n      return getProjection('EPSG:' + crs);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Encode a geometry as a EsriJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {EsriJSONGeometry} Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n  /**\n   * Encode a feature as a esriJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var object = {};\n\n    if (!feature.hasProperties()) {\n      object['attributes'] = {};\n      return object;\n    }\n\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      object['geometry'] = writeGeometry(geometry, opt_options);\n      var projection = opt_options && (opt_options.dataProjection || opt_options.featureProjection);\n\n      if (projection) {\n        object['geometry']['spatialReference'] = {\n          wkid: Number(getProjection(projection).getCode().split(':').pop())\n        };\n      }\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object['attributes'] = properties;\n    } else {\n      object['attributes'] = {};\n    }\n\n    return object;\n  };\n  /**\n   * Encode an array of features as a EsriJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {EsriJSONFeatureSet} EsriJSON Object.\n   * @api\n   */\n\n\n  EsriJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n\n    return {\n      'features': objects\n    };\n  };\n\n  return EsriJSON;\n}(JSONFeature);\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\n\n\nfunction readGeometry(object, opt_options) {\n  var _a, _b;\n\n  if (!object) {\n    return null;\n  }\n  /** @type {import(\"../geom/GeometryType.js\").default} */\n\n\n  var type;\n\n  if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n    type = GeometryType.POINT;\n  } else if (object['points']) {\n    type = GeometryType.MULTI_POINT;\n  } else if (object['paths']) {\n    var esriJSONPolyline = object;\n\n    if (esriJSONPolyline.paths.length === 1) {\n      type = GeometryType.LINE_STRING;\n    } else {\n      type = GeometryType.MULTI_LINE_STRING;\n    }\n  } else if (object['rings']) {\n    var esriJSONPolygon = object;\n    var layout = getGeometryLayout(esriJSONPolygon);\n    var rings = convertRings(esriJSONPolygon.rings, layout);\n\n    if (rings.length === 1) {\n      type = GeometryType.POLYGON;\n      object = assign({}, object, (_a = {}, _a['rings'] = rings[0], _a));\n    } else {\n      type = GeometryType.MULTI_POLYGON;\n      object = assign({}, object, (_b = {}, _b['rings'] = rings, _b));\n    }\n  }\n\n  var geometryReader = GEOMETRY_READERS[type];\n  return transformGeometryWithOptions(geometryReader(object), false, opt_options);\n}\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/GeometryLayout.js\").default} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\n\n\nfunction convertRings(rings, layout) {\n  var flatRing = [];\n  var outerRings = [];\n  var holes = [];\n  var i, ii;\n\n  for (i = 0, ii = rings.length; i < ii; ++i) {\n    flatRing.length = 0;\n    deflateCoordinates(flatRing, 0, rings[i], layout.length); // is this ring an outer ring? is it clockwise?\n\n    var clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n\n    if (clockwise) {\n      outerRings.push([rings[i]]);\n    } else {\n      holes.push(rings[i]);\n    }\n  }\n\n  while (holes.length) {\n    var hole = holes.shift();\n    var matched = false; // loop over all outer rings and see if they contain our hole.\n\n    for (i = outerRings.length - 1; i >= 0; i--) {\n      var outerRing = outerRings[i][0];\n      var containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n\n      if (containsHole) {\n        // the hole is contained push it into our polygon\n        outerRings[i].push(hole);\n        matched = true;\n        break;\n      }\n    }\n\n    if (!matched) {\n      // no outer rings contain this hole turn it into and outer\n      // ring (reverse it)\n      outerRings.push([hole.reverse()]);\n    }\n  }\n\n  return outerRings;\n}\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\n\n\nfunction readPointGeometry(object) {\n  var point;\n\n  if (object.m !== undefined && object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z, object.m], GeometryLayout.XYZM);\n  } else if (object.z !== undefined) {\n    point = new Point([object.x, object.y, object.z], GeometryLayout.XYZ);\n  } else if (object.m !== undefined) {\n    point = new Point([object.x, object.y, object.m], GeometryLayout.XYM);\n  } else {\n    point = new Point([object.x, object.y]);\n  }\n\n  return point;\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\n\n\nfunction readLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new LineString(object.paths[0], layout);\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\n\n\nfunction readMultiLineStringGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiLineString(object.paths, layout);\n}\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/GeometryLayout.js\").default} The geometry layout to use.\n */\n\n\nfunction getGeometryLayout(object) {\n  var layout = GeometryLayout.XY;\n\n  if (object.hasZ === true && object.hasM === true) {\n    layout = GeometryLayout.XYZM;\n  } else if (object.hasZ === true) {\n    layout = GeometryLayout.XYZ;\n  } else if (object.hasM === true) {\n    layout = GeometryLayout.XYM;\n  }\n\n  return layout;\n}\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\n\n\nfunction readMultiPointGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPoint(object.points, layout);\n}\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\n\n\nfunction readMultiPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new MultiPolygon(object.rings, layout);\n}\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\n\n\nfunction readPolygonGeometry(object) {\n  var layout = getGeometryLayout(object);\n  return new Polygon(object.rings, layout);\n}\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\n\n\nfunction writePointGeometry(geometry, opt_options) {\n  var coordinates = geometry.getCoordinates();\n  /** @type {EsriJSONPoint} */\n\n  var esriJSON;\n  var layout = geometry.getLayout();\n\n  if (layout === GeometryLayout.XYZ) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      m: coordinates[2]\n    };\n  } else if (layout === GeometryLayout.XYZM) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1],\n      z: coordinates[2],\n      m: coordinates[3]\n    };\n  } else if (layout === GeometryLayout.XY) {\n    esriJSON = {\n      x: coordinates[0],\n      y: coordinates[1]\n    };\n  } else {\n    assert(false, 34); // Invalid geometry layout\n  }\n\n  return esriJSON;\n}\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\n\n\nfunction getHasZM(geometry) {\n  var layout = geometry.getLayout();\n  return {\n    hasZ: layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM,\n    hasM: layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM\n  };\n}\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeLineStringGeometry(lineString, opt_options) {\n  var hasZM = getHasZM(lineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: [\n      /** @type {Array<EsriJSONPosition>} */\n    lineString.getCoordinates()]\n  };\n}\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writePolygonGeometry(polygon, opt_options) {\n  // Esri geometries use the left-hand rule\n  var hasZM = getHasZM(polygon);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: polygon.getCoordinates(false)\n  };\n}\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\n\n\nfunction writeMultiLineStringGeometry(multiLineString, opt_options) {\n  var hasZM = getHasZM(multiLineString);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    paths: multiLineString.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\n\n\nfunction writeMultiPointGeometry(multiPoint, opt_options) {\n  var hasZM = getHasZM(multiPoint);\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    points: multiPoint.getCoordinates()\n  };\n}\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\n\n\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var hasZM = getHasZM(geometry);\n  var coordinates = geometry.getCoordinates(false);\n  var output = [];\n\n  for (var i = 0; i < coordinates.length; i++) {\n    for (var x = coordinates[i].length - 1; x >= 0; x--) {\n      output.push(coordinates[i][x]);\n    }\n  }\n\n  return {\n    hasZ: hasZM.hasZ,\n    hasM: hasZM.hasM,\n    rings: output\n  };\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\n\n\nfunction writeGeometry(geometry, opt_options) {\n  var geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);\n}\n\nexport default EsriJSON;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/format/EsriJSON.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Feature","GeometryLayout","GeometryType","JSONFeature","LineString","LinearRing","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","assign","isEmpty","containsExtent","deflateCoordinates","get","getProjection","linearRingIsClockwise","transformGeometryWithOptions","GEOMETRY_READERS","POINT","readPointGeometry","LINE_STRING","readLineStringGeometry","POLYGON","readPolygonGeometry","MULTI_POINT","readMultiPointGeometry","MULTI_LINE_STRING","readMultiLineStringGeometry","MULTI_POLYGON","readMultiPolygonGeometry","GEOMETRY_WRITERS","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","EsriJSON","_super","opt_options","_this","options","geometryName_","geometryName","readFeatureFromObject","object","opt_idField","esriJSONFeature","geometry","readGeometry","feature","setGeometryName","setGeometry","attributes","setProperties","id","undefined","setId","readFeaturesFromObject","esriJSONFeatureSet","features","esriJSONFeatures","i","ii","length","push","objectIdFieldName","readGeometryFromObject","readProjectionFromObject","spatialReference","crs","wkid","writeGeometryObject","writeGeometry","adaptOptions","writeFeatureObject","hasProperties","properties","getProperties","getGeometry","projection","dataProjection","featureProjection","Number","getCode","split","pop","getGeometryName","writeFeaturesObject","objects","_a","_b","type","esriJSONPolyline","paths","esriJSONPolygon","layout","getGeometryLayout","rings","convertRings","geometryReader","flatRing","outerRings","holes","clockwise","hole","shift","matched","outerRing","containsHole","getExtent","reverse","point","m","z","x","y","XYZM","XYZ","XYM","XY","hasZ","hasM","points","coordinates","getCoordinates","esriJSON","getLayout","getHasZM","lineString","hasZM","polygon","multiLineString","multiPoint","output","geometryWriter","getType"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/EsriJSON\n */\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { containsExtent } from '../extent.js';\nimport { deflateCoordinates } from '../geom/flat/deflate.js';\nimport { get as getProjection } from '../proj.js';\nimport { linearRingIsClockwise } from '../geom/flat/orient.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"arcgis-rest-api\").Feature} EsriJSONFeature\n * @typedef {import(\"arcgis-rest-api\").FeatureSet} EsriJSONFeatureSet\n * @typedef {import(\"arcgis-rest-api\").Geometry} EsriJSONGeometry\n * @typedef {import(\"arcgis-rest-api\").Point} EsriJSONPoint\n * @typedef {import(\"arcgis-rest-api\").Polyline} EsriJSONPolyline\n * @typedef {import(\"arcgis-rest-api\").Polygon} EsriJSONPolygon\n * @typedef {import(\"arcgis-rest-api\").Multipoint} EsriJSONMultipoint\n * @typedef {import(\"arcgis-rest-api\").HasZM} EsriJSONHasZM\n * @typedef {import(\"arcgis-rest-api\").Position} EsriJSONPosition\n * @typedef {import(\"arcgis-rest-api\").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid\n */\n/**\n * @typedef {Object} EsriJSONMultiPolygon\n * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.\n * @property {boolean} [hasM] If the polygon coordinates have an M value.\n * @property {boolean} [hasZ] If the polygon coordinates have a Z value.\n * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.\n */\n/**\n * @const\n * @type {Object<import(\"../geom/GeometryType.js\").default, function(EsriJSONGeometry): import(\"../geom/Geometry.js\").default>}\n */\nvar GEOMETRY_READERS = {};\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default, import(\"./Feature.js\").WriteOptions=): (EsriJSONGeometry)>}\n */\nvar GEOMETRY_WRITERS = {};\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\n/**\n * @typedef {Object} Options\n * @property {string} [geometryName] Geometry name to use when creating features.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the EsriJSON format.\n *\n * @api\n */\nvar EsriJSON = /** @class */ (function (_super) {\n    __extends(EsriJSON, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function EsriJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        return _this;\n    }\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @param {string} [opt_idField] Name of the field where to get the id from.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    EsriJSON.prototype.readFeatureFromObject = function (object, opt_options, opt_idField) {\n        var esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\n        var geometry = readGeometry(esriJSONFeature.geometry, opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        feature.setGeometry(geometry);\n        if (esriJSONFeature.attributes) {\n            feature.setProperties(esriJSONFeature.attributes, true);\n            var id = esriJSONFeature.attributes[opt_idField];\n            if (id !== undefined) {\n                feature.setId(/** @type {number} */ (id));\n            }\n        }\n        return feature;\n    };\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    EsriJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var options = opt_options ? opt_options : {};\n        if (object['features']) {\n            var esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);\n            /** @type {Array<import(\"../Feature.js\").default>} */\n            var features = [];\n            var esriJSONFeatures = esriJSONFeatureSet.features;\n            for (var i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(esriJSONFeatures[i], options, object.objectIdFieldName));\n            }\n            return features;\n        }\n        else {\n            return [this.readFeatureFromObject(object, options)];\n        }\n    };\n    /**\n     * @param {EsriJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    EsriJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(object, opt_options);\n    };\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    EsriJSON.prototype.readProjectionFromObject = function (object) {\n        if (object['spatialReference'] &&\n            object['spatialReference']['wkid'] !== undefined) {\n            var spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (object['spatialReference']);\n            var crs = spatialReference.wkid;\n            return getProjection('EPSG:' + crs);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Encode a geometry as a EsriJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {EsriJSONGeometry} Object.\n     * @api\n     */\n    EsriJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    /**\n     * Encode a feature as a esriJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     * @api\n     */\n    EsriJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var object = {};\n        if (!feature.hasProperties()) {\n            object['attributes'] = {};\n            return object;\n        }\n        var properties = feature.getProperties();\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object['geometry'] = writeGeometry(geometry, opt_options);\n            var projection = opt_options &&\n                (opt_options.dataProjection || opt_options.featureProjection);\n            if (projection) {\n                object['geometry']['spatialReference'] =\n                    /** @type {EsriJSONSpatialReferenceWkid} */ ({\n                        wkid: Number(getProjection(projection).getCode().split(':').pop()),\n                    });\n            }\n            delete properties[feature.getGeometryName()];\n        }\n        if (!isEmpty(properties)) {\n            object['attributes'] = properties;\n        }\n        else {\n            object['attributes'] = {};\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a EsriJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {EsriJSONFeatureSet} EsriJSON Object.\n     * @api\n     */\n    EsriJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            'features': objects,\n        };\n    };\n    return EsriJSON;\n}(JSONFeature));\n/**\n * @param {EsriJSONGeometry} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    var _a, _b;\n    if (!object) {\n        return null;\n    }\n    /** @type {import(\"../geom/GeometryType.js\").default} */\n    var type;\n    if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {\n        type = GeometryType.POINT;\n    }\n    else if (object['points']) {\n        type = GeometryType.MULTI_POINT;\n    }\n    else if (object['paths']) {\n        var esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);\n        if (esriJSONPolyline.paths.length === 1) {\n            type = GeometryType.LINE_STRING;\n        }\n        else {\n            type = GeometryType.MULTI_LINE_STRING;\n        }\n    }\n    else if (object['rings']) {\n        var esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);\n        var layout = getGeometryLayout(esriJSONPolygon);\n        var rings = convertRings(esriJSONPolygon.rings, layout);\n        if (rings.length === 1) {\n            type = GeometryType.POLYGON;\n            object = assign({}, object, (_a = {}, _a['rings'] = rings[0], _a));\n        }\n        else {\n            type = GeometryType.MULTI_POLYGON;\n            object = assign({}, object, (_b = {}, _b['rings'] = rings, _b));\n        }\n    }\n    var geometryReader = GEOMETRY_READERS[type];\n    return transformGeometryWithOptions(geometryReader(object), false, opt_options);\n}\n/**\n * Determines inner and outer rings.\n * Checks if any polygons in this array contain any other polygons in this\n * array. It is used for checking for holes.\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\n * @param {Array<!Array<!Array<number>>>} rings Rings.\n * @param {import(\"../geom/GeometryLayout.js\").default} layout Geometry layout.\n * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.\n */\nfunction convertRings(rings, layout) {\n    var flatRing = [];\n    var outerRings = [];\n    var holes = [];\n    var i, ii;\n    for (i = 0, ii = rings.length; i < ii; ++i) {\n        flatRing.length = 0;\n        deflateCoordinates(flatRing, 0, rings[i], layout.length);\n        // is this ring an outer ring? is it clockwise?\n        var clockwise = linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);\n        if (clockwise) {\n            outerRings.push([rings[i]]);\n        }\n        else {\n            holes.push(rings[i]);\n        }\n    }\n    while (holes.length) {\n        var hole = holes.shift();\n        var matched = false;\n        // loop over all outer rings and see if they contain our hole.\n        for (i = outerRings.length - 1; i >= 0; i--) {\n            var outerRing = outerRings[i][0];\n            var containsHole = containsExtent(new LinearRing(outerRing).getExtent(), new LinearRing(hole).getExtent());\n            if (containsHole) {\n                // the hole is contained push it into our polygon\n                outerRings[i].push(hole);\n                matched = true;\n                break;\n            }\n        }\n        if (!matched) {\n            // no outer rings contain this hole turn it into and outer\n            // ring (reverse it)\n            outerRings.push([hole.reverse()]);\n        }\n    }\n    return outerRings;\n}\n/**\n * @param {EsriJSONPoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Point.\n */\nfunction readPointGeometry(object) {\n    var point;\n    if (object.m !== undefined && object.z !== undefined) {\n        point = new Point([object.x, object.y, object.z, object.m], GeometryLayout.XYZM);\n    }\n    else if (object.z !== undefined) {\n        point = new Point([object.x, object.y, object.z], GeometryLayout.XYZ);\n    }\n    else if (object.m !== undefined) {\n        point = new Point([object.x, object.y, object.m], GeometryLayout.XYM);\n    }\n    else {\n        point = new Point([object.x, object.y]);\n    }\n    return point;\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} LineString.\n */\nfunction readLineStringGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new LineString(object.paths[0], layout);\n}\n/**\n * @param {EsriJSONPolyline} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiLineString(object.paths, layout);\n}\n/**\n * @param {EsriJSONHasZM} object Object.\n * @return {import(\"../geom/GeometryLayout.js\").default} The geometry layout to use.\n */\nfunction getGeometryLayout(object) {\n    var layout = GeometryLayout.XY;\n    if (object.hasZ === true && object.hasM === true) {\n        layout = GeometryLayout.XYZM;\n    }\n    else if (object.hasZ === true) {\n        layout = GeometryLayout.XYZ;\n    }\n    else if (object.hasM === true) {\n        layout = GeometryLayout.XYM;\n    }\n    return layout;\n}\n/**\n * @param {EsriJSONMultipoint} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiPoint(object.points, layout);\n}\n/**\n * @param {EsriJSONMultiPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new MultiPolygon(object.rings, layout);\n}\n/**\n * @param {EsriJSONPolygon} object Object.\n * @return {import(\"../geom/Geometry.js\").default} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    var layout = getGeometryLayout(object);\n    return new Polygon(object.rings, layout);\n}\n/**\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPoint} EsriJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {EsriJSONPoint} */\n    var esriJSON;\n    var layout = geometry.getLayout();\n    if (layout === GeometryLayout.XYZ) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            z: coordinates[2],\n        };\n    }\n    else if (layout === GeometryLayout.XYM) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            m: coordinates[2],\n        };\n    }\n    else if (layout === GeometryLayout.XYZM) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n            z: coordinates[2],\n            m: coordinates[3],\n        };\n    }\n    else if (layout === GeometryLayout.XY) {\n        esriJSON = {\n            x: coordinates[0],\n            y: coordinates[1],\n        };\n    }\n    else {\n        assert(false, 34); // Invalid geometry layout\n    }\n    return esriJSON;\n}\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @return {Object} Object with boolean hasZ and hasM keys.\n */\nfunction getHasZM(geometry) {\n    var layout = geometry.getLayout();\n    return {\n        hasZ: layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM,\n        hasM: layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM,\n    };\n}\n/**\n * @param {import(\"../geom/LineString.js\").default} lineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeLineStringGeometry(lineString, opt_options) {\n    var hasZM = getHasZM(lineString);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        paths: [\n            /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),\n        ],\n    };\n}\n/**\n * @param {import(\"../geom/Polygon.js\").default} polygon Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writePolygonGeometry(polygon, opt_options) {\n    // Esri geometries use the left-hand rule\n    var hasZM = getHasZM(polygon);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        rings: /** @type {Array<Array<EsriJSONPosition>>} */ (polygon.getCoordinates(false)),\n    };\n}\n/**\n * @param {import(\"../geom/MultiLineString.js\").default} multiLineString Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolyline} EsriJSON geometry.\n */\nfunction writeMultiLineStringGeometry(multiLineString, opt_options) {\n    var hasZM = getHasZM(multiLineString);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        paths: /** @type {Array<Array<EsriJSONPosition>>} */ (multiLineString.getCoordinates()),\n    };\n}\n/**\n * @param {import(\"../geom/MultiPoint.js\").default} multiPoint Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONMultipoint} EsriJSON geometry.\n */\nfunction writeMultiPointGeometry(multiPoint, opt_options) {\n    var hasZM = getHasZM(multiPoint);\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        points: /** @type {Array<EsriJSONPosition>} */ (multiPoint.getCoordinates()),\n    };\n}\n/**\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONPolygon} EsriJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var hasZM = getHasZM(geometry);\n    var coordinates = geometry.getCoordinates(false);\n    var output = [];\n    for (var i = 0; i < coordinates.length; i++) {\n        for (var x = coordinates[i].length - 1; x >= 0; x--) {\n            output.push(coordinates[i][x]);\n        }\n    }\n    return {\n        hasZ: hasZM.hasZ,\n        hasM: hasZM.hasM,\n        rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),\n    };\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {EsriJSONGeometry} EsriJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    var geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n    return geometryWriter(transformGeometryWithOptions(geometry, true, opt_options), opt_options);\n}\nexport default EsriJSON;\n"]},"metadata":{},"sourceType":"module"}