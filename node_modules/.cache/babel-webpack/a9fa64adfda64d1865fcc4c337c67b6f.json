{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator = function () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    return eQParams;\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/request/RequestValidator.js"],"names":["StringUtils","ClientConfigurationError","CodeChallengeMethodValues","PromptValue","RequestValidator","validateRedirectUri","redirectUri","isEmpty","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","key"],"mappings":"AAAA;AACA;;AACA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,yBAAT,EAAoCC,WAApC,QAAuD,uBAAvD;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAkB,YAAY;AAC9C,WAASA,gBAAT,GAA4B,CAC3B;AACD;AACJ;AACA;AACA;;;AACIA,EAAAA,gBAAgB,CAACC,mBAAjB,GAAuC,UAAUC,WAAV,EAAuB;AAC1D,QAAIN,WAAW,CAACO,OAAZ,CAAoBD,WAApB,CAAJ,EAAsC;AAClC,YAAML,wBAAwB,CAACO,2BAAzB,EAAN;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;;;AACIJ,EAAAA,gBAAgB,CAACK,cAAjB,GAAkC,UAAUC,MAAV,EAAkB;AAChD,QAAIC,YAAY,GAAG,EAAnB;;AACA,SAAK,IAAIC,KAAT,IAAkBT,WAAlB,EAA+B;AAC3BQ,MAAAA,YAAY,CAACE,IAAb,CAAkBV,WAAW,CAACS,KAAD,CAA7B;AACH;;AACD,QAAID,YAAY,CAACG,OAAb,CAAqBJ,MAArB,IAA+B,CAAnC,EAAsC;AAClC,YAAMT,wBAAwB,CAACc,wBAAzB,CAAkDL,MAAlD,CAAN;AACH;AACJ,GARD;;AASAN,EAAAA,gBAAgB,CAACY,cAAjB,GAAkC,UAAUC,MAAV,EAAkB;AAChD,QAAI;AACAC,MAAAA,IAAI,CAACC,KAAL,CAAWF,MAAX;AACH,KAFD,CAGA,OAAOG,CAAP,EAAU;AACN,YAAMnB,wBAAwB,CAACoB,+BAAzB,EAAN;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;;;AACIjB,EAAAA,gBAAgB,CAACkB,2BAAjB,GAA+C,UAAUC,aAAV,EAAyBC,mBAAzB,EAA8C;AACzF,QAAIxB,WAAW,CAACO,OAAZ,CAAoBgB,aAApB,KAAsCvB,WAAW,CAACO,OAAZ,CAAoBiB,mBAApB,CAA1C,EAAoF;AAChF,YAAMvB,wBAAwB,CAACwB,qCAAzB,EAAN;AACH,KAFD,MAGK;AACD,WAAKC,2BAAL,CAAiCF,mBAAjC;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;;;AACIpB,EAAAA,gBAAgB,CAACsB,2BAAjB,GAA+C,UAAUF,mBAAV,EAA+B;AAC1E,QAAI,CACAtB,yBAAyB,CAACyB,KAD1B,EAEAzB,yBAAyB,CAAC0B,IAF1B,EAGFd,OAHE,CAGMU,mBAHN,IAG6B,CAHjC,EAGoC;AAChC,YAAMvB,wBAAwB,CAAC4B,qCAAzB,EAAN;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;;;AACIzB,EAAAA,gBAAgB,CAAC0B,gBAAjB,GAAoC,UAAUC,QAAV,EAAoBC,WAApB,EAAiC;AACjE,QAAI,CAACD,QAAL,EAAe;AACX,aAAO,EAAP;AACH,KAHgE,CAIjE;;;AACAC,IAAAA,WAAW,CAACC,OAAZ,CAAoB,UAAUrB,KAAV,EAAiBsB,GAAjB,EAAsB;AACtC,UAAIH,QAAQ,CAACG,GAAD,CAAZ,EAAmB;AACf,eAAOH,QAAQ,CAACG,GAAD,CAAf;AACH;AACJ,KAJD;AAKA,WAAOH,QAAP;AACH,GAXD;;AAYA,SAAO3B,gBAAP;AACH,CA3EqC,EAAtC;;AA6EA,SAASA,gBAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nvar RequestValidator = /** @class */ (function () {\r\n    function RequestValidator() {\r\n    }\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    RequestValidator.validateRedirectUri = function (redirectUri) {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    RequestValidator.validatePrompt = function (prompt) {\r\n        var promptValues = [];\r\n        for (var value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    RequestValidator.validateClaims = function (claims) {\r\n        try {\r\n            JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n        else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\r\n        if ([\r\n            CodeChallengeMethodValues.PLAIN,\r\n            CodeChallengeMethodValues.S256\r\n        ].indexOf(codeChallengeMethod) < 0) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    };\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach(function (value, key) {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    return RequestValidator;\r\n}());\n\nexport { RequestValidator };\n"]},"metadata":{},"sourceType":"module"}