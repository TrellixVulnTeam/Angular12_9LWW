{"ast":null,"code":"import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nlet MatTextareaAutosize = /*#__PURE__*/(() => {\n  class MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() {\n      return this.minRows;\n    }\n\n    set matAutosizeMinRows(value) {\n      this.minRows = value;\n    }\n\n    get matAutosizeMaxRows() {\n      return this.maxRows;\n    }\n\n    set matAutosizeMaxRows(value) {\n      this.maxRows = value;\n    }\n\n    get matAutosize() {\n      return this.enabled;\n    }\n\n    set matAutosize(value) {\n      this.enabled = value;\n    }\n\n    get matTextareaAutosize() {\n      return this.enabled;\n    }\n\n    set matTextareaAutosize(value) {\n      this.enabled = value;\n    }\n\n  }\n\n  MatTextareaAutosize.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTextareaAutosize_BaseFactory;\n    return function MatTextareaAutosize_Factory(t) {\n      return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize);\n    };\n  }();\n\n  MatTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTextareaAutosize,\n    selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"],\n    inputs: {\n      cdkAutosizeMinRows: \"cdkAutosizeMinRows\",\n      cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\",\n      matAutosizeMinRows: \"matAutosizeMinRows\",\n      matAutosizeMaxRows: \"matAutosizeMaxRows\",\n      matAutosize: [\"mat-autosize\", \"matAutosize\"],\n      matTextareaAutosize: \"matTextareaAutosize\"\n    },\n    exportAs: [\"matTextareaAutosize\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTextareaAutosize;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nconst MAT_INPUT_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nconst _MatInputBase = /*#__PURE__*/mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nlet MatInput = /*#__PURE__*/(() => {\n  class MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n      super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._autofillMonitor = _autofillMonitor;\n      this._formField = _formField;\n      this._uid = `mat-input-${nextUniqueId++}`;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      this.focused = false;\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      this.stateChanges = new Subject();\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      this.controlType = 'mat-input';\n      /**\n       * Implemented as part of MatFormFieldControl.\n       * @docs-private\n       */\n\n      this.autofilled = false;\n      this._disabled = false;\n      this._required = false;\n      this._type = 'text';\n      this._readonly = false;\n      this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n      const element = this._elementRef.nativeElement;\n      const nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n      // accessor.\n\n      this._inputValueAccessor = inputValueAccessor || element;\n      this._previousNativeValue = this.value; // Force setter to be called in case id was not specified.\n\n      this.id = this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n      // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n      // exists on iOS, we only bother to install the listener on iOS.\n\n      if (_platform.IOS) {\n        ngZone.runOutsideAngular(() => {\n          _elementRef.nativeElement.addEventListener('keyup', event => {\n            const el = event.target; // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n              // Note: Just setting `0, 0` doesn't fix the issue. Setting\n              // `1, 1` fixes it for the first time that you type text and\n              // then hold delete. Toggling to `1, 1` and then back to\n              // `0, 0` seems to completely fix it.\n              el.setSelectionRange(1, 1);\n              el.setSelectionRange(0, 0);\n            }\n          });\n        });\n      }\n\n      this._isServer = !this._platform.isBrowser;\n      this._isNativeSelect = nodeName === 'select';\n      this._isTextarea = nodeName === 'textarea';\n      this._isInFormField = !!_formField;\n\n      if (this._isNativeSelect) {\n        this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get disabled() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n\n\n    get type() {\n      return this._type;\n    }\n\n    set type(value) {\n      this._type = value || 'text';\n\n      this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n\n\n      if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n        this._elementRef.nativeElement.type = this._type;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get value() {\n      return this._inputValueAccessor.value;\n    }\n\n    set value(value) {\n      if (value !== this.value) {\n        this._inputValueAccessor.value = value;\n        this.stateChanges.next();\n      }\n    }\n    /** Whether the element is readonly. */\n\n\n    get readonly() {\n      return this._readonly;\n    }\n\n    set readonly(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n          this.autofilled = event.isAutofilled;\n          this.stateChanges.next();\n        });\n      }\n    }\n\n    ngOnChanges() {\n      this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n    }\n\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      } // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n\n\n      this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n      // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n      this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n\n\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n\n\n    _focusChanged(isFocused) {\n      if (isFocused !== this.focused) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n\n    _dirtyCheckPlaceholder() {\n      var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n      // screen readers will read it out twice: once from the label and once from the attribute.\n      // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n      // the only one that supports promoting the placeholder to a label.\n\n\n      const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n      if (placeholder !== this._previousPlaceholder) {\n        const element = this._elementRef.nativeElement;\n        this._previousPlaceholder = placeholder;\n        placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n      }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n\n\n    _dirtyCheckNativeValue() {\n      const newValue = this._elementRef.nativeElement.value;\n\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /** Make sure the input is a supported type. */\n\n\n    _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n\n\n    _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n\n\n    _isBadInput() {\n      // The `validity` property won't be present on platform-server.\n      let validity = this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get empty() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get shouldLabelFloat() {\n      if (this._isNativeSelect) {\n        // For a single-selection `<select>`, the label should float when the selected option has\n        // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n        // overlapping the label with the options.\n        const selectElement = this._elementRef.nativeElement;\n        const firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n        // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n        return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n      } else {\n        return this.focused || !this.empty;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n\n  }\n\n  MatInput.ɵfac = function MatInput_Factory(t) {\n    return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n  };\n\n  MatInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatInput,\n    selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n    hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n    hostVars: 9,\n    hostBindings: function MatInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n          return ctx._focusChanged(true);\n        })(\"blur\", function MatInput_blur_HostBindingHandler() {\n          return ctx._focusChanged(false);\n        })(\"input\", function MatInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      disabled: \"disabled\",\n      required: \"required\",\n      type: \"type\",\n      value: \"value\",\n      readonly: \"readonly\",\n      placeholder: \"placeholder\",\n      errorStateMatcher: \"errorStateMatcher\",\n      userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"]\n    },\n    exportAs: [\"matInput\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatInput;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatInputModule = /*#__PURE__*/(() => {\n  class MatInputModule {}\n\n  MatInputModule.ɵfac = function MatInputModule_Factory(t) {\n    return new (t || MatInputModule)();\n  };\n\n  MatInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatInputModule\n  });\n  MatInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ErrorStateMatcher],\n    imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule]\n  });\n  return MatInputModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, {\n    declarations: function () {\n      return [MatInput, MatTextareaAutosize];\n    },\n    imports: function () {\n      return [TextFieldModule, MatFormFieldModule, MatCommonModule];\n    },\n    exports: function () {\n      return [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput, MatTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/input.js"],"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","MatTextareaAutosize","matAutosizeMinRows","minRows","value","matAutosizeMaxRows","maxRows","matAutosize","enabled","matTextareaAutosize","ɵfac","ɵMatTextareaAutosize_BaseFactory","MatTextareaAutosize_Factory","t","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","exportAs","features","ɵɵInheritDefinitionFeature","ngDevMode","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","next","_id","required","_validateType","readonly","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","MatInput_Factory","ɵɵdirectiveInject","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","errorState","ɵɵclassProp","errorStateMatcher","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = /*@__PURE__*/ function () { let ɵMatTextareaAutosize_BaseFactory; return function MatTextareaAutosize_Factory(t) { return (ɵMatTextareaAutosize_BaseFactory || (ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize)))(t || MatTextareaAutosize); }; }();\nMatTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                    '[attr.aria-required]': 'required'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) { return new (t || MatInputModule)(); };\nMatInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n            MatCommonModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule,\n        MatCommonModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n"]},"metadata":{},"sourceType":"module"}