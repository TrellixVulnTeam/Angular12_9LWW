{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { StringUtils } from './StringUtils.js';\nimport { Constants } from './Constants.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\n\nvar ProtocolUtils = function () {\n  function ProtocolUtils() {}\n  /**\r\n   * Appends user state with random guid, or returns random guid.\r\n   * @param userState\r\n   * @param randomGuid\r\n   */\n\n\n  ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\n    var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n    return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\n  };\n  /**\r\n   * Generates the state value used by the common library.\r\n   * @param randomGuid\r\n   * @param cryptoObj\r\n   */\n\n\n  ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\n    } // Create a state object containing a unique id and the timestamp of the request creation\n\n\n    var stateObj = {\n      id: cryptoObj.createNewGuid()\n    };\n\n    if (meta) {\n      stateObj.meta = meta;\n    }\n\n    var stateString = JSON.stringify(stateObj);\n    return cryptoObj.base64Encode(stateString);\n  };\n  /**\r\n   * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n   * @param state\r\n   * @param cryptoObj\r\n   */\n\n\n  ProtocolUtils.parseRequestState = function (cryptoObj, state) {\n    if (!cryptoObj) {\n      throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\n    }\n\n    if (StringUtils.isEmpty(state)) {\n      throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\n    }\n\n    try {\n      // Split the state between library state and user passed state and decode them separately\n      var splitState = state.split(Constants.RESOURCE_DELIM);\n      var libraryState = splitState[0];\n      var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\n      var libraryStateString = cryptoObj.base64Decode(libraryState);\n      var libraryStateObj = JSON.parse(libraryStateString);\n      return {\n        userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\n        libraryState: libraryStateObj\n      };\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n\n  return ProtocolUtils;\n}();\n\nexport { ProtocolUtils };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/utils/ProtocolUtils.js"],"names":["StringUtils","Constants","ClientAuthError","ProtocolUtils","setRequestState","cryptoObj","userState","meta","libraryState","generateLibraryState","isEmpty","RESOURCE_DELIM","createNoCryptoObjectError","stateObj","id","createNewGuid","stateString","JSON","stringify","base64Encode","parseRequestState","state","createInvalidStateError","splitState","split","length","slice","join","libraryStateString","base64Decode","libraryStateObj","parse","userRequestState","e"],"mappings":"AAAA;AACA;;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAkB,YAAY;AAC3C,WAASA,aAAT,GAAyB,CACxB;AACD;AACJ;AACA;AACA;AACA;;;AACIA,EAAAA,aAAa,CAACC,eAAd,GAAgC,UAAUC,SAAV,EAAqBC,SAArB,EAAgCC,IAAhC,EAAsC;AAClE,QAAIC,YAAY,GAAGL,aAAa,CAACM,oBAAd,CAAmCJ,SAAnC,EAA8CE,IAA9C,CAAnB;AACA,WAAO,CAACP,WAAW,CAACU,OAAZ,CAAoBJ,SAApB,CAAD,GAAkC,KAAKE,YAAL,GAAoBP,SAAS,CAACU,cAA9B,GAA+CL,SAAjF,GAA6FE,YAApG;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIL,EAAAA,aAAa,CAACM,oBAAd,GAAqC,UAAUJ,SAAV,EAAqBE,IAArB,EAA2B;AAC5D,QAAI,CAACF,SAAL,EAAgB;AACZ,YAAMH,eAAe,CAACU,yBAAhB,CAA0C,sBAA1C,CAAN;AACH,KAH2D,CAI5D;;;AACA,QAAIC,QAAQ,GAAG;AACXC,MAAAA,EAAE,EAAET,SAAS,CAACU,aAAV;AADO,KAAf;;AAGA,QAAIR,IAAJ,EAAU;AACNM,MAAAA,QAAQ,CAACN,IAAT,GAAgBA,IAAhB;AACH;;AACD,QAAIS,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAlB;AACA,WAAOR,SAAS,CAACc,YAAV,CAAuBH,WAAvB,CAAP;AACH,GAbD;AAcA;AACJ;AACA;AACA;AACA;;;AACIb,EAAAA,aAAa,CAACiB,iBAAd,GAAkC,UAAUf,SAAV,EAAqBgB,KAArB,EAA4B;AAC1D,QAAI,CAAChB,SAAL,EAAgB;AACZ,YAAMH,eAAe,CAACU,yBAAhB,CAA0C,mBAA1C,CAAN;AACH;;AACD,QAAIZ,WAAW,CAACU,OAAZ,CAAoBW,KAApB,CAAJ,EAAgC;AAC5B,YAAMnB,eAAe,CAACoB,uBAAhB,CAAwCD,KAAxC,EAA+C,gCAA/C,CAAN;AACH;;AACD,QAAI;AACA;AACA,UAAIE,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAYvB,SAAS,CAACU,cAAtB,CAAjB;AACA,UAAIH,YAAY,GAAGe,UAAU,CAAC,CAAD,CAA7B;AACA,UAAIjB,SAAS,GAAGiB,UAAU,CAACE,MAAX,GAAoB,CAApB,GAAwBF,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoBC,IAApB,CAAyB1B,SAAS,CAACU,cAAnC,CAAxB,GAA6E,EAA7F;AACA,UAAIiB,kBAAkB,GAAGvB,SAAS,CAACwB,YAAV,CAAuBrB,YAAvB,CAAzB;AACA,UAAIsB,eAAe,GAAGb,IAAI,CAACc,KAAL,CAAWH,kBAAX,CAAtB;AACA,aAAO;AACHI,QAAAA,gBAAgB,EAAE,CAAChC,WAAW,CAACU,OAAZ,CAAoBJ,SAApB,CAAD,GAAkCA,SAAlC,GAA8C,EAD7D;AAEHE,QAAAA,YAAY,EAAEsB;AAFX,OAAP;AAIH,KAXD,CAYA,OAAOG,CAAP,EAAU;AACN,YAAM/B,eAAe,CAACoB,uBAAhB,CAAwCD,KAAxC,EAA+CY,CAA/C,CAAN;AACH;AACJ,GAtBD;;AAuBA,SAAO9B,aAAP;AACH,CA5DkC,EAAnC;;AA8DA,SAASA,aAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { StringUtils } from './StringUtils.js';\nimport { Constants } from './Constants.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nvar ProtocolUtils = /** @class */ (function () {\r\n    function ProtocolUtils() {\r\n    }\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\r\n        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\r\n    };\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        var stateObj = {\r\n            id: cryptoObj.createNewGuid()\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        var stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    };\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.parseRequestState = function (cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\r\n        }\r\n        if (StringUtils.isEmpty(state)) {\r\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            var splitState = state.split(Constants.RESOURCE_DELIM);\r\n            var libraryState = splitState[0];\r\n            var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\r\n            var libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            var libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\r\n                libraryState: libraryStateObj\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    };\r\n    return ProtocolUtils;\r\n}());\n\nexport { ProtocolUtils };\n"]},"metadata":{},"sourceType":"module"}