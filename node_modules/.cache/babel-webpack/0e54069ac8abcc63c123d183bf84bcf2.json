{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/GML2\n */\n\n\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, pushParseAndPop, pushSerializeAndPop } from '../xml.js';\nimport { assign } from '../obj.js';\nimport { createOrUpdate } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions } from './Feature.js';\nimport { writeStringTextNode } from './xsd.js';\n/**\n * @const\n * @type {string}\n */\n\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\n\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\n\nvar GML2 = function (_super) {\n  __extends(GML2, _super);\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n\n\n  function GML2(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, options) || this;\n    _this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(_this.readFeaturesInternal);\n    /**\n     * @type {string}\n     */\n\n    _this.schemaLocation = options.schemaLocation ? options.schemaLocation : schemaLocation;\n    return _this;\n  }\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n\n\n  GML2.prototype.readFlatCoordinates = function (node, objectStack) {\n    var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    var context = objectStack[0];\n    var containerSrs = context['srsName'];\n    var axisOrientation = 'enu';\n\n    if (containerSrs) {\n      var proj = getProjection(containerSrs);\n\n      if (proj) {\n        axisOrientation = proj.getAxisOrientation();\n      }\n    }\n\n    var coordsGroups = s.trim().split(/\\s+/);\n    var flatCoordinates = [];\n\n    for (var i = 0, ii = coordsGroups.length; i < ii; i++) {\n      var coords = coordsGroups[i].split(/,+/);\n      var x = parseFloat(coords[0]);\n      var y = parseFloat(coords[1]);\n      var z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n\n    return flatCoordinates;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n\n\n  GML2.prototype.readBox = function (node, objectStack) {\n    /** @type {Array<number>} */\n    var flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML2.prototype.innerBoundaryIsParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings = objectStack[objectStack.length - 1];\n      flatLinearRings.push(flatLinearRing);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n\n\n  GML2.prototype.outerBoundaryIsParser = function (node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n\n    if (flatLinearRing) {\n      var flatLinearRings = objectStack[objectStack.length - 1];\n      flatLinearRings[0] = flatLinearRing;\n    }\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var multiSurface = context['multiSurface'];\n    var surface = context['surface'];\n    var multiCurve = context['multiCurve'];\n    var nodeName;\n\n    if (!Array.isArray(value)) {\n      nodeName =\n      /** @type {import(\"../geom/Geometry.js\").default} */\n      value.getType();\n\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n\n    return createElementNS('http://www.opengis.net/gml', nodeName);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeFeatureElement = function (node, feature, objectStack) {\n    var fid = feature.getId();\n\n    if (fid) {\n      node.setAttribute('fid', fid);\n    }\n\n    var context = objectStack[objectStack.length - 1];\n    var featureNS = context['featureNS'];\n    var geometryName = feature.getGeometryName();\n\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n\n    var keys = [];\n    var values = [];\n\n    if (feature.hasProperties()) {\n      var properties = feature.getProperties();\n\n      for (var key in properties) {\n        var value = properties[key];\n\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n\n          if (key == geometryName || typeof\n          /** @type {?} */\n          value.getSimplifiedGeometry === 'function') {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n\n    var item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(item, context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'LineString' || node.nodeName === 'LineStringSegment') {\n      var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n      node.appendChild(coordinates);\n      this.writeCoordinates_(coordinates, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      var segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeLineStringOrCurveMember = function (node, line, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiCurveOrLineString = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var curve = context['curve'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var lines = geometry.getLineStrings();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      curve: curve\n    }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var item = assign({}, context);\n    item['node'] = node;\n    var value;\n\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(geometry, context);\n    } else {\n      value = transformGeometryWithOptions(geometry, true, context);\n    }\n\n    pushSerializeAndPop(item, this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n  };\n  /**\n   * @param {string} namespaceURI XML namespace.\n   * @return {Element} coordinates node.\n   * @private\n   */\n\n\n  GML2.prototype.createCoordinatesNode_ = function (namespaceURI) {\n    var coordinates = createElementNS(namespaceURI, 'coordinates');\n    coordinates.setAttribute('decimal', '.');\n    coordinates.setAttribute('cs', ',');\n    coordinates.setAttribute('ts', ' ');\n    return coordinates;\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCoordinates_ = function (node, value, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName']; // only 2d for simple features profile\n\n    var points = value.getCoordinates();\n    var len = points.length;\n    var parts = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      var point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n\n    writeStringTextNode(node, parts.join(' '));\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      var rings = geometry.getLinearRings();\n      pushSerializeAndPop({\n        node: node,\n        hasZ: hasZ,\n        srsName: srsName\n      }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      var patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  };\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n\n\n  GML2.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var context = objectStack[objectStack.length - 1];\n    var parentNode = context.node;\n    var exteriorWritten = context['exteriorWritten'];\n\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n\n    return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n\n\n  GML2.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeRing = function (node, ring, objectStack) {\n    var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  };\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n\n\n  GML2.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n    var axisOrientation = 'enu';\n\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n\n    var coords = axisOrientation.substr(0, 2) === 'en' ? point[0] + ',' + point[1] : point[1] + ',' + point[0];\n\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      var z = point[2] || 0;\n      coords += ',' + z;\n    }\n\n    return coords;\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writePoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    var point = geometry.getCoordinates();\n    var coord = this.getCoords_(point, srsName, hasZ);\n    writeStringTextNode(coordinates, coord);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiPoint = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var points = geometry.getPoints();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName\n    }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writePointMember = function (node, point, objectStack) {\n    var child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeLinearRing = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeMultiSurfaceOrPolygon = function (node, geometry, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var hasZ = context['hasZ'];\n    var srsName = context['srsName'];\n    var surface = context['surface'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var polygons = geometry.getPolygons();\n    pushSerializeAndPop({\n      node: node,\n      hasZ: hasZ,\n      srsName: srsName,\n      surface: surface\n    }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n  };\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeSurfaceOrPolygonMember = function (node, polygon, objectStack) {\n    var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n\n\n  GML2.prototype.writeEnvelope = function (node, extent, objectStack) {\n    var context = objectStack[objectStack.length - 1];\n    var srsName = context['srsName'];\n\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n\n    var keys = ['lowerCorner', 'upperCorner'];\n    var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop({\n      node: node\n    }, this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n  };\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n\n\n  GML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n    var parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  };\n\n  return GML2;\n}(GMLBase);\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\n\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n\nGML2.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Box': makeReplacer(GML2.prototype.readBox)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML2.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n    'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n    'Envelope': makeChildAppender(GML2.prototype.writeEnvelope)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n    'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML2.prototype.writePointMember)\n  }\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n    'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember)\n  }\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\n\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\nexport default GML2;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/GML2.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","GMLBase","GMLNS","OBJECT_PROPERTY_NODE_FACTORY","createElementNS","getAllTextContent","makeArrayPusher","makeChildAppender","makeReplacer","makeSimpleNodeFactory","pushParseAndPop","pushSerializeAndPop","assign","createOrUpdate","get","getProjection","transformExtentWithOptions","transformGeometryWithOptions","writeStringTextNode","schemaLocation","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML2","_super","opt_options","_this","options","FEATURE_COLLECTION_PARSERS","readFeaturesInternal","readFlatCoordinates","node","objectStack","s","replace","context","containerSrs","axisOrientation","proj","getAxisOrientation","coordsGroups","trim","split","flatCoordinates","i","ii","length","coords","x","parseFloat","y","z","substr","push","readBox","BOX_PARSERS_","innerBoundaryIsParser","flatLinearRing","undefined","RING_PARSERS","flatLinearRings","outerBoundaryIsParser","GEOMETRY_NODE_FACTORY_","value","opt_nodeName","multiSurface","surface","multiCurve","nodeName","isArray","getType","writeFeatureElement","feature","fid","getId","setAttribute","featureNS","geometryName","getGeometryName","serializers","keys","values","hasProperties","properties","getProperties","key","getSimplifiedGeometry","writeGeometryElement","item","writeCurveOrLineString","geometry","srsName","coordinates","createCoordinatesNode_","namespaceURI","appendChild","writeCoordinates_","segments","writeCurveSegments_","writeLineStringOrCurveMember","line","child","writeMultiCurveOrLineString","hasZ","curve","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","GEOMETRY_SERIALIZERS","points","getCoordinates","len","parts","point","getCoords_","join","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","RING_NODE_FACTORY_","patches","writeSurfacePatches_","parentNode","exteriorWritten","polygon","writeRing","ring","linearRing","writeLinearRing","opt_srsName","opt_hasZ","writePoint","coord","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","writePointMember","writeMultiSurfaceOrPolygon","polygons","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","writeSurfaceOrPolygonMember","writeEnvelope","extent","ENVELOPE_SERIALIZERS","GEOMETRY_FLAT_COORDINATES_PARSERS","FLAT_LINEAR_RINGS_PARSERS","GEOMETRY_PARSERS","readPoint","readMultiPoint","readLineString","readMultiLineString","readLinearRing","readPolygon","readMultiPolygon"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/GML2\n */\nimport GMLBase, { GMLNS } from './GMLBase.js';\nimport { OBJECT_PROPERTY_NODE_FACTORY, createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender, makeReplacer, makeSimpleNodeFactory, pushParseAndPop, pushSerializeAndPop, } from '../xml.js';\nimport { assign } from '../obj.js';\nimport { createOrUpdate } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformExtentWithOptions, transformGeometryWithOptions, } from './Feature.js';\nimport { writeStringTextNode } from './xsd.js';\n/**\n * @const\n * @type {string}\n */\nvar schemaLocation = GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n/**\n * @const\n * @type {Object<string, string>}\n */\nvar MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n    'MultiLineString': 'lineStringMember',\n    'MultiCurve': 'curveMember',\n    'MultiPolygon': 'polygonMember',\n    'MultiSurface': 'surfaceMember',\n};\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @api\n */\nvar GML2 = /** @class */ (function (_super) {\n    __extends(GML2, _super);\n    /**\n     * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n     */\n    function GML2(opt_options) {\n        var _this = this;\n        var options = \n        /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n        _this = _super.call(this, options) || this;\n        _this.FEATURE_COLLECTION_PARSERS[GMLNS]['featureMember'] = makeArrayPusher(_this.readFeaturesInternal);\n        /**\n         * @type {string}\n         */\n        _this.schemaLocation = options.schemaLocation\n            ? options.schemaLocation\n            : schemaLocation;\n        return _this;\n    }\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {Array<number>|undefined} Flat coordinates.\n     */\n    GML2.prototype.readFlatCoordinates = function (node, objectStack) {\n        var s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n        var context = /** @type {import(\"../xml.js\").NodeStackItem} */ (objectStack[0]);\n        var containerSrs = context['srsName'];\n        var axisOrientation = 'enu';\n        if (containerSrs) {\n            var proj = getProjection(containerSrs);\n            if (proj) {\n                axisOrientation = proj.getAxisOrientation();\n            }\n        }\n        var coordsGroups = s.trim().split(/\\s+/);\n        var flatCoordinates = [];\n        for (var i = 0, ii = coordsGroups.length; i < ii; i++) {\n            var coords = coordsGroups[i].split(/,+/);\n            var x = parseFloat(coords[0]);\n            var y = parseFloat(coords[1]);\n            var z = coords.length === 3 ? parseFloat(coords[2]) : 0;\n            if (axisOrientation.substr(0, 2) === 'en') {\n                flatCoordinates.push(x, y, z);\n            }\n            else {\n                flatCoordinates.push(y, x, z);\n            }\n        }\n        return flatCoordinates;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n     */\n    GML2.prototype.readBox = function (node, objectStack) {\n        /** @type {Array<number>} */\n        var flatCoordinates = pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);\n        return createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML2.prototype.innerBoundaryIsParser = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = \n            /** @type {Array<Array<number>>} */\n            (objectStack[objectStack.length - 1]);\n            flatLinearRings.push(flatLinearRing);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    GML2.prototype.outerBoundaryIsParser = function (node, objectStack) {\n        /** @type {Array<number>|undefined} */\n        var flatLinearRing = pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);\n        if (flatLinearRing) {\n            var flatLinearRings = \n            /** @type {Array<Array<number>>} */\n            (objectStack[objectStack.length - 1]);\n            flatLinearRings[0] = flatLinearRing;\n        }\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Element|undefined} Node.\n     * @private\n     */\n    GML2.prototype.GEOMETRY_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var multiSurface = context['multiSurface'];\n        var surface = context['surface'];\n        var multiCurve = context['multiCurve'];\n        var nodeName;\n        if (!Array.isArray(value)) {\n            nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n            if (nodeName === 'MultiPolygon' && multiSurface === true) {\n                nodeName = 'MultiSurface';\n            }\n            else if (nodeName === 'Polygon' && surface === true) {\n                nodeName = 'Surface';\n            }\n            else if (nodeName === 'MultiLineString' && multiCurve === true) {\n                nodeName = 'MultiCurve';\n            }\n        }\n        else {\n            nodeName = 'Envelope';\n        }\n        return createElementNS('http://www.opengis.net/gml', nodeName);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeFeatureElement = function (node, feature, objectStack) {\n        var fid = feature.getId();\n        if (fid) {\n            node.setAttribute('fid', /** @type {string} */ (fid));\n        }\n        var context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n        var featureNS = context['featureNS'];\n        var geometryName = feature.getGeometryName();\n        if (!context.serializers) {\n            context.serializers = {};\n            context.serializers[featureNS] = {};\n        }\n        var keys = [];\n        var values = [];\n        if (feature.hasProperties()) {\n            var properties = feature.getProperties();\n            for (var key in properties) {\n                var value = properties[key];\n                if (value !== null) {\n                    keys.push(key);\n                    values.push(value);\n                    if (key == geometryName ||\n                        typeof ( /** @type {?} */(value).getSimplifiedGeometry) ===\n                            'function') {\n                        if (!(key in context.serializers[featureNS])) {\n                            context.serializers[featureNS][key] = makeChildAppender(this.writeGeometryElement, this);\n                        }\n                    }\n                    else {\n                        if (!(key in context.serializers[featureNS])) {\n                            context.serializers[featureNS][key] =\n                                makeChildAppender(writeStringTextNode);\n                        }\n                    }\n                }\n            }\n        }\n        var item = assign({}, context);\n        item.node = node;\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        (item), context.serializers, makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LineString.js\").default} geometry LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeCurveOrLineString = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'LineStringSegment' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'LineString' ||\n            node.nodeName === 'LineStringSegment') {\n            var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n            node.appendChild(coordinates);\n            this.writeCoordinates_(coordinates, geometry, objectStack);\n        }\n        else if (node.nodeName === 'Curve') {\n            var segments = createElementNS(node.namespaceURI, 'segments');\n            node.appendChild(segments);\n            this.writeCurveSegments_(segments, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeLineStringOrCurveMember = function (node, line, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeCurveOrLineString(child, line, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry MultiLineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeMultiCurveOrLineString = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var curve = context['curve'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var lines = geometry.getLineStrings();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, curve: curve }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeGeometryElement = function (node, geometry, objectStack) {\n        var context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n        var item = assign({}, context);\n        item['node'] = node;\n        var value;\n        if (Array.isArray(geometry)) {\n            value = transformExtentWithOptions(\n            /** @type {import(\"../extent.js\").Extent} */ (geometry), context);\n        }\n        else {\n            value = transformGeometryWithOptions(\n            /** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n        }\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        (item), this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);\n    };\n    /**\n     * @param {string} namespaceURI XML namespace.\n     * @return {Element} coordinates node.\n     * @private\n     */\n    GML2.prototype.createCoordinatesNode_ = function (namespaceURI) {\n        var coordinates = createElementNS(namespaceURI, 'coordinates');\n        coordinates.setAttribute('decimal', '.');\n        coordinates.setAttribute('cs', ',');\n        coordinates.setAttribute('ts', ' ');\n        return coordinates;\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LineString.js\").default|import(\"../geom/LinearRing.js\").default} value Geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML2.prototype.writeCoordinates_ = function (node, value, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        // only 2d for simple features profile\n        var points = value.getCoordinates();\n        var len = points.length;\n        var parts = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            var point = points[i];\n            parts[i] = this.getCoords_(point, srsName, hasZ);\n        }\n        writeStringTextNode(node, parts.join(' '));\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LineString.js\").default} line LineString geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML2.prototype.writeCurveSegments_ = function (node, line, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'LineStringSegment');\n        node.appendChild(child);\n        this.writeCurveOrLineString(child, line, objectStack);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeSurfaceOrPolygon = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        if (node.nodeName !== 'PolygonPatch' && srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n            var rings = geometry.getLinearRings();\n            pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);\n        }\n        else if (node.nodeName === 'Surface') {\n            var patches = createElementNS(node.namespaceURI, 'patches');\n            node.appendChild(patches);\n            this.writeSurfacePatches_(patches, geometry, objectStack);\n        }\n    };\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Node} Node.\n     * @private\n     */\n    GML2.prototype.RING_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var context = objectStack[objectStack.length - 1];\n        var parentNode = context.node;\n        var exteriorWritten = context['exteriorWritten'];\n        if (exteriorWritten === undefined) {\n            context['exteriorWritten'] = true;\n        }\n        return createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     * @private\n     */\n    GML2.prototype.writeSurfacePatches_ = function (node, polygon, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'PolygonPatch');\n        node.appendChild(child);\n        this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeRing = function (node, ring, objectStack) {\n        var linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n        node.appendChild(linearRing);\n        this.writeLinearRing(linearRing, ring, objectStack);\n    };\n    /**\n     * @param {Array<number>} point Point geometry.\n     * @param {string} [opt_srsName] Optional srsName\n     * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n     * @return {string} The coords string.\n     * @private\n     */\n    GML2.prototype.getCoords_ = function (point, opt_srsName, opt_hasZ) {\n        var axisOrientation = 'enu';\n        if (opt_srsName) {\n            axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n        }\n        var coords = axisOrientation.substr(0, 2) === 'en'\n            ? point[0] + ',' + point[1]\n            : point[1] + ',' + point[0];\n        if (opt_hasZ) {\n            // For newly created points, Z can be undefined.\n            var z = point[2] || 0;\n            coords += ',' + z;\n        }\n        return coords;\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writePoint = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n        node.appendChild(coordinates);\n        var point = geometry.getCoordinates();\n        var coord = this.getCoords_(point, srsName, hasZ);\n        writeStringTextNode(coordinates, coord);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeMultiPoint = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var points = geometry.getPoints();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.POINTMEMBER_SERIALIZERS, makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Point.js\").default} point Point geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writePointMember = function (node, point, objectStack) {\n        var child = createElementNS(node.namespaceURI, 'Point');\n        node.appendChild(child);\n        this.writePoint(child, point, objectStack);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeLinearRing = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var coordinates = this.createCoordinatesNode_(node.namespaceURI);\n        node.appendChild(coordinates);\n        this.writeCoordinates_(coordinates, geometry, objectStack);\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeMultiSurfaceOrPolygon = function (node, geometry, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var hasZ = context['hasZ'];\n        var srsName = context['srsName'];\n        var surface = context['surface'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var polygons = geometry.getPolygons();\n        pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, surface: surface }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);\n    };\n    /**\n     * @param {Node} node Node.\n     * @param {import(\"../geom/Polygon.js\").default} polygon Polygon geometry.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeSurfaceOrPolygonMember = function (node, polygon, objectStack) {\n        var child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n        if (child) {\n            node.appendChild(child);\n            this.writeSurfaceOrPolygon(child, polygon, objectStack);\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {Array<*>} objectStack Node stack.\n     */\n    GML2.prototype.writeEnvelope = function (node, extent, objectStack) {\n        var context = objectStack[objectStack.length - 1];\n        var srsName = context['srsName'];\n        if (srsName) {\n            node.setAttribute('srsName', srsName);\n        }\n        var keys = ['lowerCorner', 'upperCorner'];\n        var values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n        pushSerializeAndPop(\n        /** @type {import(\"../xml.js\").NodeStackItem} */\n        ({ node: node }), this.ENVELOPE_SERIALIZERS, OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);\n    };\n    /**\n     * @const\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [opt_nodeName] Node name.\n     * @return {Node|undefined} Node.\n     * @private\n     */\n    GML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function (value, objectStack, opt_nodeName) {\n        var parentNode = objectStack[objectStack.length - 1].node;\n        return createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n    };\n    return GML2;\n}(GMLBase));\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,\n        'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.BOX_PARSERS_ = {\n    'http://www.opengis.net/gml': {\n        'coordinates': makeArrayPusher(GML2.prototype.readFlatCoordinates),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML2.prototype.GEOMETRY_PARSERS = {\n    'http://www.opengis.net/gml': {\n        'Point': makeReplacer(GMLBase.prototype.readPoint),\n        'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n        'LineString': makeReplacer(GMLBase.prototype.readLineString),\n        'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n        'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n        'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n        'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n        'Box': makeReplacer(GML2.prototype.readBox),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.GEOMETRY_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'Curve': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n        'MultiCurve': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n        'Point': makeChildAppender(GML2.prototype.writePoint),\n        'MultiPoint': makeChildAppender(GML2.prototype.writeMultiPoint),\n        'LineString': makeChildAppender(GML2.prototype.writeCurveOrLineString),\n        'MultiLineString': makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),\n        'LinearRing': makeChildAppender(GML2.prototype.writeLinearRing),\n        'Polygon': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n        'MultiPolygon': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n        'Surface': makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),\n        'MultiSurface': makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),\n        'Envelope': makeChildAppender(GML2.prototype.writeEnvelope),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'lineStringMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n        'curveMember': makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.RING_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'outerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n        'innerBoundaryIs': makeChildAppender(GML2.prototype.writeRing),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.POINTMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'pointMember': makeChildAppender(GML2.prototype.writePointMember),\n    },\n};\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'surfaceMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n        'polygonMember': makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),\n    },\n};\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML2.prototype.ENVELOPE_SERIALIZERS = {\n    'http://www.opengis.net/gml': {\n        'lowerCorner': makeChildAppender(writeStringTextNode),\n        'upperCorner': makeChildAppender(writeStringTextNode),\n    },\n};\nexport default GML2;\n"]},"metadata":{},"sourceType":"module"}