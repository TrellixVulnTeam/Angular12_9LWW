{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/View\n */\n\n\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { assign } from './obj.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { easeOut } from './easing.js';\nimport { equals } from './coordinate.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { inAndOut } from './easing.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\n\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\n\nvar View = function (_super) {\n  __extends(View, _super);\n  /**\n   * @param {ViewOptions} [opt_options] View options.\n   */\n\n\n  function View(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n\n    _this.un;\n    var options = assign({}, opt_options);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.hints_ = [0, 0];\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n\n    _this.animations_ = [];\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.updateAnimationKey_;\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n\n    _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n\n    _this.viewportSize_ = [100, 100];\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n\n    _this.targetCenter_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.targetResolution_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.targetRotation_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.nextCenter_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.nextResolution_;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.nextRotation_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n\n    _this.cancelAnchor_ = undefined;\n\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, _this.projection_);\n    }\n\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, _this.projection_);\n    }\n\n    _this.applyOptions_(options);\n\n    return _this;\n  }\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n\n\n  View.prototype.applyOptions_ = function (options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n\n    this.resolutions_ = options.resolutions;\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n\n    this.padding_ = options.padding;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n    /**\n     * @private\n     * @type {Constraints}\n     */\n\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(options.center !== undefined ? options.center : null);\n\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n\n    this.setProperties(properties);\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n\n    this.options_ = options;\n  };\n\n  Object.defineProperty(View.prototype, \"padding\", {\n    /**\n     * Padding (in css pixels).\n     * If the map viewport is partially covered with other content (overlays) along\n     * its edges, this setting allows to shift the center of the viewport away from that\n     * content. The order of the values in the array is top, right, bottom, left.\n     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n     * @type {Array<number>|undefined}\n     * @api\n     */\n    get: function () {\n      return this.padding_;\n    },\n    set: function (padding) {\n      var oldPadding = this.padding_;\n      this.padding_ = padding;\n      var center = this.getCenter();\n\n      if (center) {\n        var newPadding = padding || [0, 0, 0, 0];\n        oldPadding = oldPadding || [0, 0, 0, 0];\n        var resolution = this.getResolution();\n        var offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n        var offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n\n  View.prototype.getUpdatedOptions_ = function (newOptions) {\n    var options = assign({}, this.options_); // preserve resolution (or zoom)\n\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    } // preserve center\n\n\n    options.center = this.getCenterInternal(); // preserve rotation\n\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n\n\n  View.prototype.animate = function (var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n\n    var args = new Array(arguments.length);\n\n    for (var i = 0; i < args.length; ++i) {\n      var options = arguments[i];\n\n      if (options.center) {\n        options = assign({}, options);\n        options.center = fromUserCoordinate(options.center, this.getProjection());\n      }\n\n      if (options.anchor) {\n        options = assign({}, options);\n        options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n      }\n\n      args[i] = options;\n    }\n\n    this.animateInternal.apply(this, args);\n  };\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n\n\n  View.prototype.animateInternal = function (var_args) {\n    var animationCount = arguments.length;\n    var callback;\n\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    var i = 0;\n\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[i];\n\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n\n      return;\n    }\n\n    var start = Date.now();\n    var center = this.targetCenter_.slice();\n    var resolution = this.targetResolution_;\n    var rotation = this.targetRotation_;\n    var series = [];\n\n    for (; i < animationCount; ++i) {\n      var options = arguments[i];\n      var animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      } // check if animation is a no-op\n\n\n      if (isNoopAnimation(animation)) {\n        animation.complete = true; // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n\n      series.push(animation);\n    }\n\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n\n\n  View.prototype.getAnimating = function () {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n\n\n  View.prototype.getInteracting = function () {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n\n\n  View.prototype.cancelAnimations = function () {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    var anchor;\n\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n\n      if (!anchor) {\n        for (var j = 0, jj = series.length; j < jj; ++j) {\n          var animation = series[j];\n\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  };\n  /**\n   * Update all animations.\n   */\n\n\n  View.prototype.updateAnimations_ = function () {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n\n    if (!this.getAnimating()) {\n      return;\n    }\n\n    var now = Date.now();\n    var more = false;\n\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n\n        if (animation.complete) {\n          continue;\n        }\n\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n\n        var progress = animation.easing(fraction);\n\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n\n          if (animation.anchor) {\n            var size = this.getViewportSize_(this.getRotation());\n            var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n          }\n\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n\n          if (animation.anchor) {\n            var constrainedRotation = this.constraints_.rotation(rotation, true);\n            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n          }\n\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n\n        this.applyTargetState_(true);\n        more = true;\n\n        if (!animation.complete) {\n          break;\n        }\n      }\n\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        var callback = series[0].callback;\n\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    } // prune completed series\n\n\n    this.animations_ = this.animations_.filter(Boolean);\n\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n  };\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n\n\n  View.prototype.calculateCenterRotate = function (rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n\n    return center;\n  };\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n\n\n  View.prototype.calculateCenterZoom = function (resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n    var currentResolution = this.getResolution();\n\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n\n    return center;\n  };\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n\n\n  View.prototype.getViewportSize_ = function (opt_rotation) {\n    var size = this.viewportSize_;\n\n    if (opt_rotation) {\n      var w = size[0];\n      var h = size[1];\n      return [Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation)), Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation))];\n    } else {\n      return size;\n    }\n  };\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\n   */\n\n\n  View.prototype.setViewportSize = function (opt_size) {\n    this.viewportSize_ = Array.isArray(opt_size) ? opt_size.slice() : [100, 100];\n\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  };\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getCenter = function () {\n    var center = this.getCenterInternal();\n\n    if (!center) {\n      return center;\n    }\n\n    return toUserCoordinate(center, this.getProjection());\n  };\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n\n\n  View.prototype.getCenterInternal = function () {\n    return this.get(ViewProperty.CENTER);\n  };\n  /**\n   * @return {Constraints} Constraints.\n   */\n\n\n  View.prototype.getConstraints = function () {\n    return this.constraints_;\n  };\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n\n\n  View.prototype.getConstrainResolution = function () {\n    return this.options_.constrainResolution;\n  };\n  /**\n   * @param {Array<number>} [opt_hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n\n\n  View.prototype.getHints = function (opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  View.prototype.calculateExtent = function (opt_size) {\n    var extent = this.calculateExtentInternal(opt_size);\n    return toUserExtent(extent, this.getProjection());\n  };\n  /**\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n\n\n  View.prototype.calculateExtentInternal = function (opt_size) {\n    var size = opt_size || this.getViewportSizeMinusPadding_();\n    var center = this.getCenterInternal();\n    assert(center, 1); // The view center is not defined\n\n    var resolution = this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n\n    var rotation = this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMaxResolution = function () {\n    return this.maxResolution_;\n  };\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n\n\n  View.prototype.getMinResolution = function () {\n    return this.minResolution_;\n  };\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMaxZoom = function () {\n    return this.getZoomForResolution(this.minResolution_);\n  };\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMaxZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.getMinZoom = function () {\n    return this.getZoomForResolution(this.maxResolution_);\n  };\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n\n\n  View.prototype.setMinZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n\n\n  View.prototype.setConstrainResolution = function (enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      constrainResolution: enabled\n    }));\n  };\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n\n\n  View.prototype.getProjection = function () {\n    return this.projection_;\n  };\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getResolution = function () {\n    return this.get(ViewProperty.RESOLUTION);\n  };\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n\n\n  View.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForExtent = function (extent, opt_size) {\n    return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n\n\n  View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {\n    var size = opt_size || this.getViewportSizeMinusPadding_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n\n\n  View.prototype.getResolutionForValueFunction = function (opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.getRotation = function () {\n    return this.get(ViewProperty.ROTATION);\n  };\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [opt_power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n\n\n  View.prototype.getValueForResolutionFunction = function (opt_power) {\n    var logPower = Math.log(opt_power || 2);\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  };\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n\n\n  View.prototype.getViewportSizeMinusPadding_ = function (opt_rotation) {\n    var size = this.getViewportSize_(opt_rotation);\n    var padding = this.padding_;\n\n    if (padding) {\n      size = [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]];\n    }\n\n    return size;\n  };\n  /**\n   * @return {State} View state.\n   */\n\n\n  View.prototype.getState = function () {\n    var projection = this.getProjection();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var center = this.getCenterInternal();\n    var padding = this.padding_;\n\n    if (padding) {\n      var reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n    }\n\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom()\n    };\n  };\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n\n\n  View.prototype.getZoom = function () {\n    var zoom;\n    var resolution = this.getResolution();\n\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n\n    return zoom;\n  };\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n\n\n  View.prototype.getZoomForResolution = function (resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n\n\n  View.prototype.getResolutionForZoom = function (zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n\n      var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n      var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n    } else {\n      return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n  };\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [opt_options] Options.\n   * @api\n   */\n\n\n  View.prototype.fit = function (geometryOrExtent, opt_options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof\n    /** @type {?} */\n    geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n\n      var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      var userProjection = getUserProjection();\n\n      if (userProjection) {\n        geometry = geometryOrExtent.clone().transform(userProjection, this.getProjection());\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, opt_options);\n  };\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n\n\n  View.prototype.rotatedExtentForGeometry = function (geometry) {\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(rotation);\n    var sinAngle = Math.sin(-rotation);\n    var coords = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  };\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [opt_options] Options.\n   */\n\n\n  View.prototype.fitInternal = function (geometry, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    var rotatedExtent = this.rotatedExtentForGeometry(geometry); // calculate resolution\n\n    var resolution = this.getResolutionForExtentInternal(rotatedExtent, [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1); // calculate center\n\n    var rotation = this.getRotation();\n    var sinAngle = Math.sin(rotation);\n    var cosAngle = Math.cos(rotation);\n    var centerRot = getCenter(rotatedExtent);\n    centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n    centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    var center = this.getConstrainedCenter([centerX, centerY], resolution);\n    var callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  };\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n\n\n  View.prototype.centerOn = function (coordinate, size, position) {\n    this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n  };\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n\n\n  View.prototype.centerOnInternal = function (coordinate, size, position) {\n    this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n  };\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n\n\n  View.prototype.calculateCenterShift = function (center, resolution, rotation, size) {\n    var centerShift;\n    var padding = this.padding_;\n\n    if (padding && center) {\n      var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n      centerShift = [center[0] - shiftedCenter[0], center[1] - shiftedCenter[1]];\n    }\n\n    return centerShift;\n  };\n  /**\n   * @return {boolean} Is defined.\n   */\n\n\n  View.prototype.isDef = function () {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n\n\n  View.prototype.adjustCenter = function (deltaCoordinates) {\n    var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n\n\n  View.prototype.adjustCenterInternal = function (deltaCoordinates) {\n    var center = this.targetCenter_;\n    this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.adjustResolution = function (ratio, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var size = this.getViewportSize_(this.getRotation());\n    var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  };\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.adjustZoom = function (delta, opt_anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n  };\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   * @api\n   */\n\n\n  View.prototype.adjustRotation = function (delta, opt_anchor) {\n    if (opt_anchor) {\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n    }\n\n    this.adjustRotationInternal(delta, opt_anchor);\n  };\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n   */\n\n\n  View.prototype.adjustRotationInternal = function (delta, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n    }\n\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setCenter = function (center) {\n    this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));\n  };\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n\n\n  View.prototype.setCenterInternal = function (center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  };\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n\n\n  View.prototype.setHint = function (hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setResolution = function (resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n\n\n  View.prototype.setRotation = function (rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  };\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n\n\n  View.prototype.setZoom = function (zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n\n\n  View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {\n    var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving; // compute rotation\n\n    var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n    }\n\n    if (!this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n\n    this.cancelAnchor_ = undefined;\n  };\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [opt_duration] The animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var duration = opt_duration !== undefined ? opt_duration : 200;\n    var direction = opt_resolutionDirection || 0;\n    var newRotation = this.constraints_.rotation(this.targetRotation_);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor\n      });\n    }\n  };\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n\n\n  View.prototype.beginInteraction = function () {\n    this.resolveConstraints(0);\n    this.setHint(ViewHint.INTERACTING, 1);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   * @api\n   */\n\n\n  View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [opt_duration] Animation duration in ms.\n   * @param {number} [opt_resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n   */\n\n\n  View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n  };\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n\n\n  View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);\n  };\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n\n\n  View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {\n    var targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));\n  };\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n\n\n  View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {\n    var direction = opt_direction || 0;\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.resolution(targetResolution, direction, size);\n  };\n\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\n\n\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\n\n\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  var projection = createProjection(options.projection, 'EPSG:3857');\n\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    var extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\n\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution; // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  var projExtent = projection.getExtent();\n  var constrainOnlyCenter = options.constrainOnlyCenter;\n  var extent = options.extent;\n\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    var size = !projExtent ? // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM); // user provided maxResolution takes precedence\n\n    maxResolution = options.maxResolution;\n\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    } // user provided minResolution takes precedence\n\n\n    minResolution = options.minResolution;\n\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    } // given discrete zoom levels, minResolution may be different than provided\n\n\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\n\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\n\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\n\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution; // go back to original angle\n\n  sinAngle = -sinAngle; // go back to original rotation\n\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n  return [centerX, centerY];\n}\n\nexport default View;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/View.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","GeometryType","Units","ViewHint","ViewProperty","DEFAULT_TILE_SIZE","METERS_PER_UNIT","createProjection","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","VOID","add","addCoordinate","equals","coordinatesEqual","rotate","rotateCoordinate","assert","assign","none","centerNone","createExtent","clamp","modulo","createMinMaxResolution","createSnapToN","createSnapToZero","disable","rotationNone","createSnapToPower","createSnapToResolutions","easeOut","getCenter","getForViewAndSize","getHeight","getWidth","isEmpty","inAndOut","linearFindNearest","fromExtent","polygonFromExtent","DEFAULT_MIN_ZOOM","View","_super","opt_options","_this","on","once","un","options","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","undefined","center","extent","applyOptions_","properties","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","padding_","padding","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","setRotation","setCenterInternal","setResolution","zoom","setZoom","setProperties","options_","defineProperty","get","set","oldPadding","newPadding","getResolution","offsetX","offsetY","enumerable","configurable","getUpdatedOptions_","newOptions","getZoom","getCenterInternal","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","args","arguments","length","i","getProjection","anchor","animateInternal","apply","animationCount","callback","state","animationCallback","start","Date","now","slice","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","updateAnimations_","getInteracting","INTERACTING","cancelAnimations","ii","j","jj","NaN","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","x","y","size","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","bind","currentCenter","currentResolution","opt_rotation","w","h","abs","cos","sin","setViewportSize","opt_size","isArray","CENTER","getConstraints","getConstrainResolution","constrainResolution","getHints","opt_hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","RESOLUTION","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","xResolution","yResolution","max","getResolutionForValueFunction","opt_power","power","getConstrainedResolution","log","value","pow","ROTATION","getValueForResolutionFunction","logPower","getState","reducedSize","calculateCenterOn","nextCenter","nextResolution","nextRotation","offset","nearest","baseLevel","floor","fit","geometryOrExtent","geometry","getSimplifiedGeometry","getType","CIRCLE","getExtent","userProjection","clone","transform","fitInternal","rotatedExtentForGeometry","cosAngle","sinAngle","coords","getFlatCoordinates","stride","getStride","minRotX","Infinity","minRotY","maxRotX","maxRotY","rotX","rotY","min","rotatedExtent","isNaN","centerRot","centerX","centerY","getConstrainedCenter","centerOn","coordinate","position","centerOnInternal","calculateCenterShift","centerShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","ratio","opt_anchor","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","changed","opt_doNotCancelAnims","opt_forceMoving","newCenter","opt_duration","opt_resolutionDirection","direction","beginInteraction","endInteraction","endInteractionInternal","opt_targetResolution","getConstrainedZoom","targetZoom","opt_direction","targetRes","returnValue","setTimeout","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","DEGREES","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnB,QAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;AACJF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASW,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBb,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;AACH,GAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,eAAT,EAA0BC,gBAA1B,EAA4CC,kBAA5C,EAAgEC,cAAhE,EAAgFC,iBAAhF,EAAmGC,gBAAnG,EAAqHC,YAArH,QAA0I,WAA1I;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,GAAG,IAAIC,aAAhB,EAA+BC,MAAM,IAAIC,gBAAzC,EAA2DC,MAAM,IAAIC,gBAArE,QAA8F,iBAA9F;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,IAAI,IAAIC,UAAjB,EAA6BC,YAA7B,QAAiD,uBAAjD;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,WAA9B;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,OAA1C,EAAmDR,IAAI,IAAIS,YAA3D,QAAgF,yBAAhF;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA4D,2BAA5D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASlB,MAAT,QAAuB,iBAAvB;AACA,SAASmB,SAAT,EAAoBC,iBAApB,EAAuCC,SAAvC,EAAkDC,QAAlD,EAA4DC,OAA5D,QAA4E,aAA5E;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,UAAU,IAAIC,iBAAvB,QAAgD,mBAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,CAAvB;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAkB,UAAUC,MAAV,EAAkB;AACxC/D,EAAAA,SAAS,CAAC8D,IAAD,EAAOC,MAAP,CAAT;AACA;AACJ;AACA;;;AACI,WAASD,IAAT,CAAcE,WAAd,EAA2B;AACvB,QAAIC,KAAK,GAAGF,MAAM,CAACpD,IAAP,CAAY,IAAZ,KAAqB,IAAjC;AACA;AACR;AACA;;;AACQsD,IAAAA,KAAK,CAACC,EAAN;AACA;AACR;AACA;;AACQD,IAAAA,KAAK,CAACE,IAAN;AACA;AACR;AACA;;AACQF,IAAAA,KAAK,CAACG,EAAN;AACA,QAAIC,OAAO,GAAG/B,MAAM,CAAC,EAAD,EAAK0B,WAAL,CAApB;AACA;AACR;AACA;AACA;;AACQC,IAAAA,KAAK,CAACK,MAAN,GAAe,CAAC,CAAD,EAAI,CAAJ,CAAf;AACA;AACR;AACA;AACA;;AACQL,IAAAA,KAAK,CAACM,WAAN,GAAoB,EAApB;AACA;AACR;AACA;AACA;;AACQN,IAAAA,KAAK,CAACO,mBAAN;AACA;AACR;AACA;AACA;AACA;;AACQP,IAAAA,KAAK,CAACQ,WAAN,GAAoBjD,gBAAgB,CAAC6C,OAAO,CAACK,UAAT,EAAqB,WAArB,CAApC;AACA;AACR;AACA;AACA;;AACQT,IAAAA,KAAK,CAACU,aAAN,GAAsB,CAAC,GAAD,EAAM,GAAN,CAAtB;AACA;AACR;AACA;AACA;;AACQV,IAAAA,KAAK,CAACW,aAAN,GAAsB,IAAtB;AACA;AACR;AACA;AACA;;AACQX,IAAAA,KAAK,CAACY,iBAAN;AACA;AACR;AACA;AACA;;AACQZ,IAAAA,KAAK,CAACa,eAAN;AACA;AACR;AACA;AACA;;AACQb,IAAAA,KAAK,CAACc,WAAN,GAAoB,IAApB;AACA;AACR;AACA;AACA;;AACQd,IAAAA,KAAK,CAACe,eAAN;AACA;AACR;AACA;AACA;;AACQf,IAAAA,KAAK,CAACgB,aAAN;AACA;AACR;AACA;AACA;;AACQhB,IAAAA,KAAK,CAACiB,aAAN,GAAsBC,SAAtB;;AACA,QAAId,OAAO,CAACe,MAAZ,EAAoB;AAChBf,MAAAA,OAAO,CAACe,MAAR,GAAiB3D,kBAAkB,CAAC4C,OAAO,CAACe,MAAT,EAAiBnB,KAAK,CAACQ,WAAvB,CAAnC;AACH;;AACD,QAAIJ,OAAO,CAACgB,MAAZ,EAAoB;AAChBhB,MAAAA,OAAO,CAACgB,MAAR,GAAiB3D,cAAc,CAAC2C,OAAO,CAACgB,MAAT,EAAiBpB,KAAK,CAACQ,WAAvB,CAA/B;AACH;;AACDR,IAAAA,KAAK,CAACqB,aAAN,CAAoBjB,OAApB;;AACA,WAAOJ,KAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIH,EAAAA,IAAI,CAACrD,SAAL,CAAe6E,aAAf,GAA+B,UAAUjB,OAAV,EAAmB;AAC9C;AACR;AACA;AACQ,QAAIkB,UAAU,GAAG,EAAjB;AACA,QAAIC,wBAAwB,GAAGC,0BAA0B,CAACpB,OAAD,CAAzD;AACA;AACR;AACA;AACA;;AACQ,SAAKqB,cAAL,GAAsBF,wBAAwB,CAACG,aAA/C;AACA;AACR;AACA;AACA;;AACQ,SAAKC,cAAL,GAAsBJ,wBAAwB,CAACK,aAA/C;AACA;AACR;AACA;AACA;;AACQ,SAAKC,WAAL,GAAmBN,wBAAwB,CAACO,UAA5C;AACA;AACR;AACA;AACA;;AACQ,SAAKC,YAAL,GAAoB3B,OAAO,CAAC4B,WAA5B;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB7B,OAAO,CAAC8B,OAAxB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgBZ,wBAAwB,CAACa,OAAzC;AACA,QAAIC,gBAAgB,GAAGC,sBAAsB,CAAClC,OAAD,CAA7C;AACA,QAAImC,oBAAoB,GAAGhB,wBAAwB,CAACiB,UAApD;AACA,QAAIC,kBAAkB,GAAGC,wBAAwB,CAACtC,OAAD,CAAjD;AACA;AACR;AACA;AACA;;AACQ,SAAKuC,YAAL,GAAoB;AAChBxB,MAAAA,MAAM,EAAEkB,gBADQ;AAEhBO,MAAAA,UAAU,EAAEL,oBAFI;AAGhBM,MAAAA,QAAQ,EAAEJ;AAHM,KAApB;AAKA,SAAKK,WAAL,CAAiB1C,OAAO,CAACyC,QAAR,KAAqB3B,SAArB,GAAiCd,OAAO,CAACyC,QAAzC,GAAoD,CAArE;AACA,SAAKE,iBAAL,CAAuB3C,OAAO,CAACe,MAAR,KAAmBD,SAAnB,GAA+Bd,OAAO,CAACe,MAAvC,GAAgD,IAAvE;;AACA,QAAIf,OAAO,CAACwC,UAAR,KAAuB1B,SAA3B,EAAsC;AAClC,WAAK8B,aAAL,CAAmB5C,OAAO,CAACwC,UAA3B;AACH,KAFD,MAGK,IAAIxC,OAAO,CAAC6C,IAAR,KAAiB/B,SAArB,EAAgC;AACjC,WAAKgC,OAAL,CAAa9C,OAAO,CAAC6C,IAArB;AACH;;AACD,SAAKE,aAAL,CAAmB7B,UAAnB;AACA;AACR;AACA;AACA;;AACQ,SAAK8B,QAAL,GAAgBhD,OAAhB;AACH,GA9DD;;AA+DAjE,EAAAA,MAAM,CAACkH,cAAP,CAAsBxD,IAAI,CAACrD,SAA3B,EAAsC,SAAtC,EAAiD;AAC7C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ8G,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKrB,QAAZ;AACH,KAZ4C;AAa7CsB,IAAAA,GAAG,EAAE,UAAUrB,OAAV,EAAmB;AACpB,UAAIsB,UAAU,GAAG,KAAKvB,QAAtB;AACA,WAAKA,QAAL,GAAgBC,OAAhB;AACA,UAAIf,MAAM,GAAG,KAAKhC,SAAL,EAAb;;AACA,UAAIgC,MAAJ,EAAY;AACR,YAAIsC,UAAU,GAAGvB,OAAO,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B;AACAsB,QAAAA,UAAU,GAAGA,UAAU,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA3B;AACA,YAAIZ,UAAU,GAAG,KAAKc,aAAL,EAAjB;AACA,YAAIC,OAAO,GAAIf,UAAU,GAAG,CAAd,IACTa,UAAU,CAAC,CAAD,CAAV,GAAgBD,UAAU,CAAC,CAAD,CAA1B,GAAgCA,UAAU,CAAC,CAAD,CAA1C,GAAgDC,UAAU,CAAC,CAAD,CADjD,CAAd;AAEA,YAAIG,OAAO,GAAIhB,UAAU,GAAG,CAAd,IACTa,UAAU,CAAC,CAAD,CAAV,GAAgBD,UAAU,CAAC,CAAD,CAA1B,GAAgCA,UAAU,CAAC,CAAD,CAA1C,GAAgDC,UAAU,CAAC,CAAD,CADjD,CAAd;AAEA,aAAKV,iBAAL,CAAuB,CAAC5B,MAAM,CAAC,CAAD,CAAN,GAAYwC,OAAb,EAAsBxC,MAAM,CAAC,CAAD,CAAN,GAAYyC,OAAlC,CAAvB;AACH;AACJ,KA3B4C;AA4B7CC,IAAAA,UAAU,EAAE,KA5BiC;AA6B7CC,IAAAA,YAAY,EAAE;AA7B+B,GAAjD;AA+BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACIjE,EAAAA,IAAI,CAACrD,SAAL,CAAeuH,kBAAf,GAAoC,UAAUC,UAAV,EAAsB;AACtD,QAAI5D,OAAO,GAAG/B,MAAM,CAAC,EAAD,EAAK,KAAK+E,QAAV,CAApB,CADsD,CAEtD;;AACA,QAAIhD,OAAO,CAACwC,UAAR,KAAuB1B,SAA3B,EAAsC;AAClCd,MAAAA,OAAO,CAACwC,UAAR,GAAqB,KAAKc,aAAL,EAArB;AACH,KAFD,MAGK;AACDtD,MAAAA,OAAO,CAAC6C,IAAR,GAAe,KAAKgB,OAAL,EAAf;AACH,KARqD,CAStD;;;AACA7D,IAAAA,OAAO,CAACe,MAAR,GAAiB,KAAK+C,iBAAL,EAAjB,CAVsD,CAWtD;;AACA9D,IAAAA,OAAO,CAACyC,QAAR,GAAmB,KAAKsB,WAAL,EAAnB;AACA,WAAO9F,MAAM,CAAC,EAAD,EAAK+B,OAAL,EAAc4D,UAAd,CAAb;AACH,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInE,EAAAA,IAAI,CAACrD,SAAL,CAAe4H,OAAf,GAAyB,UAAUC,QAAV,EAAoB;AACzC,QAAI,KAAKC,KAAL,MAAgB,CAAC,KAAKC,YAAL,EAArB,EAA0C;AACtC,WAAKC,kBAAL,CAAwB,CAAxB;AACH;;AACD,QAAIC,IAAI,GAAG,IAAInI,KAAJ,CAAUoI,SAAS,CAACC,MAApB,CAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;AAClC,UAAIxE,OAAO,GAAGsE,SAAS,CAACE,CAAD,CAAvB;;AACA,UAAIxE,OAAO,CAACe,MAAZ,EAAoB;AAChBf,QAAAA,OAAO,GAAG/B,MAAM,CAAC,EAAD,EAAK+B,OAAL,CAAhB;AACAA,QAAAA,OAAO,CAACe,MAAR,GAAiB3D,kBAAkB,CAAC4C,OAAO,CAACe,MAAT,EAAiB,KAAK0D,aAAL,EAAjB,CAAnC;AACH;;AACD,UAAIzE,OAAO,CAAC0E,MAAZ,EAAoB;AAChB1E,QAAAA,OAAO,GAAG/B,MAAM,CAAC,EAAD,EAAK+B,OAAL,CAAhB;AACAA,QAAAA,OAAO,CAAC0E,MAAR,GAAiBtH,kBAAkB,CAAC4C,OAAO,CAAC0E,MAAT,EAAiB,KAAKD,aAAL,EAAjB,CAAnC;AACH;;AACDJ,MAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUxE,OAAV;AACH;;AACD,SAAK2E,eAAL,CAAqBC,KAArB,CAA2B,IAA3B,EAAiCP,IAAjC;AACH,GAlBD;AAmBA;AACJ;AACA;;;AACI5E,EAAAA,IAAI,CAACrD,SAAL,CAAeuI,eAAf,GAAiC,UAAUV,QAAV,EAAoB;AACjD,QAAIY,cAAc,GAAGP,SAAS,CAACC,MAA/B;AACA,QAAIO,QAAJ;;AACA,QAAID,cAAc,GAAG,CAAjB,IACA,OAAOP,SAAS,CAACO,cAAc,GAAG,CAAlB,CAAhB,KAAyC,UAD7C,EACyD;AACrDC,MAAAA,QAAQ,GAAGR,SAAS,CAACO,cAAc,GAAG,CAAlB,CAApB;AACA,QAAEA,cAAF;AACH;;AACD,QAAIL,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGK,cAAJ,IAAsB,CAAC,KAAKX,KAAL,EAA9B,EAA4C,EAAEM,CAA9C,EAAiD;AAC7C;AACA,UAAIO,KAAK,GAAGT,SAAS,CAACE,CAAD,CAArB;;AACA,UAAIO,KAAK,CAAChE,MAAV,EAAkB;AACd,aAAK4B,iBAAL,CAAuBoC,KAAK,CAAChE,MAA7B;AACH;;AACD,UAAIgE,KAAK,CAAClC,IAAN,KAAe/B,SAAnB,EAA8B;AAC1B,aAAKgC,OAAL,CAAaiC,KAAK,CAAClC,IAAnB;AACH,OAFD,MAGK,IAAIkC,KAAK,CAACvC,UAAV,EAAsB;AACvB,aAAKI,aAAL,CAAmBmC,KAAK,CAACvC,UAAzB;AACH;;AACD,UAAIuC,KAAK,CAACtC,QAAN,KAAmB3B,SAAvB,EAAkC;AAC9B,aAAK4B,WAAL,CAAiBqC,KAAK,CAACtC,QAAvB;AACH;AACJ;;AACD,QAAI+B,CAAC,KAAKK,cAAV,EAA0B;AACtB,UAAIC,QAAJ,EAAc;AACVE,QAAAA,iBAAiB,CAACF,QAAD,EAAW,IAAX,CAAjB;AACH;;AACD;AACH;;AACD,QAAIG,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAZ;AACA,QAAIpE,MAAM,GAAG,KAAKR,aAAL,CAAmB6E,KAAnB,EAAb;AACA,QAAI5C,UAAU,GAAG,KAAKhC,iBAAtB;AACA,QAAIiC,QAAQ,GAAG,KAAKhC,eAApB;AACA,QAAI4E,MAAM,GAAG,EAAb;;AACA,WAAOb,CAAC,GAAGK,cAAX,EAA2B,EAAEL,CAA7B,EAAgC;AAC5B,UAAIxE,OAAO,GAAoCsE,SAAS,CAACE,CAAD,CAAxD;AACA,UAAIc,SAAS,GAAG;AACZL,QAAAA,KAAK,EAAEA,KADK;AAEZM,QAAAA,QAAQ,EAAE,KAFE;AAGZb,QAAAA,MAAM,EAAE1E,OAAO,CAAC0E,MAHJ;AAIZc,QAAAA,QAAQ,EAAExF,OAAO,CAACwF,QAAR,KAAqB1E,SAArB,GAAiCd,OAAO,CAACwF,QAAzC,GAAoD,IAJlD;AAKZC,QAAAA,MAAM,EAAEzF,OAAO,CAACyF,MAAR,IAAkBrG,QALd;AAMZ0F,QAAAA,QAAQ,EAAEA;AANE,OAAhB;;AAQA,UAAI9E,OAAO,CAACe,MAAZ,EAAoB;AAChBuE,QAAAA,SAAS,CAACI,YAAV,GAAyB3E,MAAzB;AACAuE,QAAAA,SAAS,CAACK,YAAV,GAAyB3F,OAAO,CAACe,MAAR,CAAeqE,KAAf,EAAzB;AACArE,QAAAA,MAAM,GAAGuE,SAAS,CAACK,YAAnB;AACH;;AACD,UAAI3F,OAAO,CAAC6C,IAAR,KAAiB/B,SAArB,EAAgC;AAC5BwE,QAAAA,SAAS,CAACM,gBAAV,GAA6BpD,UAA7B;AACA8C,QAAAA,SAAS,CAACO,gBAAV,GAA6B,KAAKC,oBAAL,CAA0B9F,OAAO,CAAC6C,IAAlC,CAA7B;AACAL,QAAAA,UAAU,GAAG8C,SAAS,CAACO,gBAAvB;AACH,OAJD,MAKK,IAAI7F,OAAO,CAACwC,UAAZ,EAAwB;AACzB8C,QAAAA,SAAS,CAACM,gBAAV,GAA6BpD,UAA7B;AACA8C,QAAAA,SAAS,CAACO,gBAAV,GAA6B7F,OAAO,CAACwC,UAArC;AACAA,QAAAA,UAAU,GAAG8C,SAAS,CAACO,gBAAvB;AACH;;AACD,UAAI7F,OAAO,CAACyC,QAAR,KAAqB3B,SAAzB,EAAoC;AAChCwE,QAAAA,SAAS,CAACS,cAAV,GAA2BtD,QAA3B;AACA,YAAIuD,KAAK,GAAG1H,MAAM,CAAC0B,OAAO,CAACyC,QAAR,GAAmBA,QAAnB,GAA8BwD,IAAI,CAACC,EAApC,EAAwC,IAAID,IAAI,CAACC,EAAjD,CAAN,GAA6DD,IAAI,CAACC,EAA9E;AACAZ,QAAAA,SAAS,CAACa,cAAV,GAA2B1D,QAAQ,GAAGuD,KAAtC;AACAvD,QAAAA,QAAQ,GAAG6C,SAAS,CAACa,cAArB;AACH,OA9B2B,CA+B5B;;;AACA,UAAIC,eAAe,CAACd,SAAD,CAAnB,EAAgC;AAC5BA,QAAAA,SAAS,CAACC,QAAV,GAAqB,IAArB,CAD4B,CAE5B;AACH,OAHD,MAIK;AACDN,QAAAA,KAAK,IAAIK,SAAS,CAACE,QAAnB;AACH;;AACDH,MAAAA,MAAM,CAACgB,IAAP,CAAYf,SAAZ;AACH;;AACD,SAAKpF,WAAL,CAAiBmG,IAAjB,CAAsBhB,MAAtB;AACA,SAAKiB,OAAL,CAAavJ,QAAQ,CAACwJ,SAAtB,EAAiC,CAAjC;AACA,SAAKC,iBAAL;AACH,GAhFD;AAiFA;AACJ;AACA;AACA;AACA;;;AACI/G,EAAAA,IAAI,CAACrD,SAAL,CAAe+H,YAAf,GAA8B,YAAY;AACtC,WAAO,KAAKlE,MAAL,CAAYlD,QAAQ,CAACwJ,SAArB,IAAkC,CAAzC;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI9G,EAAAA,IAAI,CAACrD,SAAL,CAAeqK,cAAf,GAAgC,YAAY;AACxC,WAAO,KAAKxG,MAAL,CAAYlD,QAAQ,CAAC2J,WAArB,IAAoC,CAA3C;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIjH,EAAAA,IAAI,CAACrD,SAAL,CAAeuK,gBAAf,GAAkC,YAAY;AAC1C,SAAKL,OAAL,CAAavJ,QAAQ,CAACwJ,SAAtB,EAAiC,CAAC,KAAKtG,MAAL,CAAYlD,QAAQ,CAACwJ,SAArB,CAAlC;AACA,QAAI7B,MAAJ;;AACA,SAAK,IAAIF,CAAC,GAAG,CAAR,EAAWoC,EAAE,GAAG,KAAK1G,WAAL,CAAiBqE,MAAtC,EAA8CC,CAAC,GAAGoC,EAAlD,EAAsD,EAAEpC,CAAxD,EAA2D;AACvD,UAAIa,MAAM,GAAG,KAAKnF,WAAL,CAAiBsE,CAAjB,CAAb;;AACA,UAAIa,MAAM,CAAC,CAAD,CAAN,CAAUP,QAAd,EAAwB;AACpBE,QAAAA,iBAAiB,CAACK,MAAM,CAAC,CAAD,CAAN,CAAUP,QAAX,EAAqB,KAArB,CAAjB;AACH;;AACD,UAAI,CAACJ,MAAL,EAAa;AACT,aAAK,IAAImC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGzB,MAAM,CAACd,MAA5B,EAAoCsC,CAAC,GAAGC,EAAxC,EAA4C,EAAED,CAA9C,EAAiD;AAC7C,cAAIvB,SAAS,GAAGD,MAAM,CAACwB,CAAD,CAAtB;;AACA,cAAI,CAACvB,SAAS,CAACC,QAAf,EAAyB;AACrBb,YAAAA,MAAM,GAAGY,SAAS,CAACZ,MAAnB;AACA;AACH;AACJ;AACJ;AACJ;;AACD,SAAKxE,WAAL,CAAiBqE,MAAjB,GAA0B,CAA1B;AACA,SAAK1D,aAAL,GAAqB6D,MAArB;AACA,SAAKhE,WAAL,GAAmB,IAAnB;AACA,SAAKC,eAAL,GAAuBoG,GAAvB;AACA,SAAKnG,aAAL,GAAqBmG,GAArB;AACH,GAvBD;AAwBA;AACJ;AACA;;;AACItH,EAAAA,IAAI,CAACrD,SAAL,CAAeoK,iBAAf,GAAmC,YAAY;AAC3C,QAAI,KAAKrG,mBAAL,KAA6BW,SAAjC,EAA4C;AACxCkG,MAAAA,oBAAoB,CAAC,KAAK7G,mBAAN,CAApB;AACA,WAAKA,mBAAL,GAA2BW,SAA3B;AACH;;AACD,QAAI,CAAC,KAAKqD,YAAL,EAAL,EAA0B;AACtB;AACH;;AACD,QAAIgB,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAV;AACA,QAAI8B,IAAI,GAAG,KAAX;;AACA,SAAK,IAAIzC,CAAC,GAAG,KAAKtE,WAAL,CAAiBqE,MAAjB,GAA0B,CAAvC,EAA0CC,CAAC,IAAI,CAA/C,EAAkD,EAAEA,CAApD,EAAuD;AACnD,UAAIa,MAAM,GAAG,KAAKnF,WAAL,CAAiBsE,CAAjB,CAAb;AACA,UAAI0C,cAAc,GAAG,IAArB;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGzB,MAAM,CAACd,MAA5B,EAAoCsC,CAAC,GAAGC,EAAxC,EAA4C,EAAED,CAA9C,EAAiD;AAC7C,YAAIvB,SAAS,GAAGD,MAAM,CAACwB,CAAD,CAAtB;;AACA,YAAIvB,SAAS,CAACC,QAAd,EAAwB;AACpB;AACH;;AACD,YAAI4B,OAAO,GAAGhC,GAAG,GAAGG,SAAS,CAACL,KAA9B;AACA,YAAImC,QAAQ,GAAG9B,SAAS,CAACE,QAAV,GAAqB,CAArB,GAAyB2B,OAAO,GAAG7B,SAAS,CAACE,QAA7C,GAAwD,CAAvE;;AACA,YAAI4B,QAAQ,IAAI,CAAhB,EAAmB;AACf9B,UAAAA,SAAS,CAACC,QAAV,GAAqB,IAArB;AACA6B,UAAAA,QAAQ,GAAG,CAAX;AACH,SAHD,MAIK;AACDF,UAAAA,cAAc,GAAG,KAAjB;AACH;;AACD,YAAIG,QAAQ,GAAG/B,SAAS,CAACG,MAAV,CAAiB2B,QAAjB,CAAf;;AACA,YAAI9B,SAAS,CAACI,YAAd,EAA4B;AACxB,cAAI4B,EAAE,GAAGhC,SAAS,CAACI,YAAV,CAAuB,CAAvB,CAAT;AACA,cAAI6B,EAAE,GAAGjC,SAAS,CAACI,YAAV,CAAuB,CAAvB,CAAT;AACA,cAAI8B,EAAE,GAAGlC,SAAS,CAACK,YAAV,CAAuB,CAAvB,CAAT;AACA,cAAI8B,EAAE,GAAGnC,SAAS,CAACK,YAAV,CAAuB,CAAvB,CAAT;AACA,eAAKjF,WAAL,GAAmB4E,SAAS,CAACK,YAA7B;AACA,cAAI+B,CAAC,GAAGJ,EAAE,GAAGD,QAAQ,IAAIG,EAAE,GAAGF,EAAT,CAArB;AACA,cAAIK,CAAC,GAAGJ,EAAE,GAAGF,QAAQ,IAAII,EAAE,GAAGF,EAAT,CAArB;AACA,eAAKhH,aAAL,GAAqB,CAACmH,CAAD,EAAIC,CAAJ,CAArB;AACH;;AACD,YAAIrC,SAAS,CAACM,gBAAV,IAA8BN,SAAS,CAACO,gBAA5C,EAA8D;AAC1D,cAAIrD,UAAU,GAAG6E,QAAQ,KAAK,CAAb,GACX/B,SAAS,CAACO,gBADC,GAEXP,SAAS,CAACM,gBAAV,GACEyB,QAAQ,IACH/B,SAAS,CAACO,gBAAV,GAA6BP,SAAS,CAACM,gBADpC,CAHhB;;AAKA,cAAIN,SAAS,CAACZ,MAAd,EAAsB;AAClB,gBAAIkD,IAAI,GAAG,KAAKC,gBAAL,CAAsB,KAAK9D,WAAL,EAAtB,CAAX;AACA,gBAAI+D,qBAAqB,GAAG,KAAKvF,YAAL,CAAkBC,UAAlB,CAA6BA,UAA7B,EAAyC,CAAzC,EAA4CoF,IAA5C,EAAkD,IAAlD,CAA5B;AACA,iBAAKrH,aAAL,GAAqB,KAAKwH,mBAAL,CAAyBD,qBAAzB,EAAgDxC,SAAS,CAACZ,MAA1D,CAArB;AACH;;AACD,eAAK/D,eAAL,GAAuB2E,SAAS,CAACO,gBAAjC;AACA,eAAKrF,iBAAL,GAAyBgC,UAAzB;AACA,eAAKwF,iBAAL,CAAuB,IAAvB;AACH;;AACD,YAAI1C,SAAS,CAACS,cAAV,KAA6BjF,SAA7B,IACAwE,SAAS,CAACa,cAAV,KAA6BrF,SADjC,EAC4C;AACxC,cAAI2B,QAAQ,GAAG4E,QAAQ,KAAK,CAAb,GACT/I,MAAM,CAACgH,SAAS,CAACa,cAAV,GAA2BF,IAAI,CAACC,EAAjC,EAAqC,IAAID,IAAI,CAACC,EAA9C,CAAN,GACED,IAAI,CAACC,EAFE,GAGTZ,SAAS,CAACS,cAAV,GACEsB,QAAQ,IACH/B,SAAS,CAACa,cAAV,GAA2Bb,SAAS,CAACS,cADlC,CAJhB;;AAMA,cAAIT,SAAS,CAACZ,MAAd,EAAsB;AAClB,gBAAIuD,mBAAmB,GAAG,KAAK1F,YAAL,CAAkBE,QAAlB,CAA2BA,QAA3B,EAAqC,IAArC,CAA1B;AACA,iBAAKlC,aAAL,GAAqB,KAAK2H,qBAAL,CAA2BD,mBAA3B,EAAgD3C,SAAS,CAACZ,MAA1D,CAArB;AACH;;AACD,eAAK9D,aAAL,GAAqB0E,SAAS,CAACa,cAA/B;AACA,eAAK1F,eAAL,GAAuBgC,QAAvB;AACH;;AACD,aAAKuF,iBAAL,CAAuB,IAAvB;AACAf,QAAAA,IAAI,GAAG,IAAP;;AACA,YAAI,CAAC3B,SAAS,CAACC,QAAf,EAAyB;AACrB;AACH;AACJ;;AACD,UAAI2B,cAAJ,EAAoB;AAChB,aAAKhH,WAAL,CAAiBsE,CAAjB,IAAsB,IAAtB;AACA,aAAK8B,OAAL,CAAavJ,QAAQ,CAACwJ,SAAtB,EAAiC,CAAC,CAAlC;AACA,aAAK7F,WAAL,GAAmB,IAAnB;AACA,aAAKC,eAAL,GAAuBoG,GAAvB;AACA,aAAKnG,aAAL,GAAqBmG,GAArB;AACA,YAAIjC,QAAQ,GAAGO,MAAM,CAAC,CAAD,CAAN,CAAUP,QAAzB;;AACA,YAAIA,QAAJ,EAAc;AACVE,UAAAA,iBAAiB,CAACF,QAAD,EAAW,IAAX,CAAjB;AACH;AACJ;AACJ,KArF0C,CAsF3C;;;AACA,SAAK5E,WAAL,GAAmB,KAAKA,WAAL,CAAiBiI,MAAjB,CAAwBC,OAAxB,CAAnB;;AACA,QAAInB,IAAI,IAAI,KAAK9G,mBAAL,KAA6BW,SAAzC,EAAoD;AAChD,WAAKX,mBAAL,GAA2BkI,qBAAqB,CAAC,KAAK7B,iBAAL,CAAuB8B,IAAvB,CAA4B,IAA5B,CAAD,CAAhD;AACH;AACJ,GA3FD;AA4FA;AACJ;AACA;AACA;AACA;;;AACI7I,EAAAA,IAAI,CAACrD,SAAL,CAAe8L,qBAAf,GAAuC,UAAUzF,QAAV,EAAoBiC,MAApB,EAA4B;AAC/D,QAAI3D,MAAJ;AACA,QAAIwH,aAAa,GAAG,KAAKzE,iBAAL,EAApB;;AACA,QAAIyE,aAAa,KAAKzH,SAAtB,EAAiC;AAC7BC,MAAAA,MAAM,GAAG,CAACwH,aAAa,CAAC,CAAD,CAAb,GAAmB7D,MAAM,CAAC,CAAD,CAA1B,EAA+B6D,aAAa,CAAC,CAAD,CAAb,GAAmB7D,MAAM,CAAC,CAAD,CAAxD,CAAT;AACA3G,MAAAA,gBAAgB,CAACgD,MAAD,EAAS0B,QAAQ,GAAG,KAAKsB,WAAL,EAApB,CAAhB;AACApG,MAAAA,aAAa,CAACoD,MAAD,EAAS2D,MAAT,CAAb;AACH;;AACD,WAAO3D,MAAP;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;;;AACItB,EAAAA,IAAI,CAACrD,SAAL,CAAe2L,mBAAf,GAAqC,UAAUvF,UAAV,EAAsBkC,MAAtB,EAA8B;AAC/D,QAAI3D,MAAJ;AACA,QAAIwH,aAAa,GAAG,KAAKzE,iBAAL,EAApB;AACA,QAAI0E,iBAAiB,GAAG,KAAKlF,aAAL,EAAxB;;AACA,QAAIiF,aAAa,KAAKzH,SAAlB,IAA+B0H,iBAAiB,KAAK1H,SAAzD,EAAoE;AAChE,UAAI4G,CAAC,GAAGhD,MAAM,CAAC,CAAD,CAAN,GACHlC,UAAU,IAAIkC,MAAM,CAAC,CAAD,CAAN,GAAY6D,aAAa,CAAC,CAAD,CAA7B,CAAX,GAAgDC,iBADpD;AAEA,UAAIb,CAAC,GAAGjD,MAAM,CAAC,CAAD,CAAN,GACHlC,UAAU,IAAIkC,MAAM,CAAC,CAAD,CAAN,GAAY6D,aAAa,CAAC,CAAD,CAA7B,CAAX,GAAgDC,iBADpD;AAEAzH,MAAAA,MAAM,GAAG,CAAC2G,CAAD,EAAIC,CAAJ,CAAT;AACH;;AACD,WAAO5G,MAAP;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;;;AACItB,EAAAA,IAAI,CAACrD,SAAL,CAAeyL,gBAAf,GAAkC,UAAUY,YAAV,EAAwB;AACtD,QAAIb,IAAI,GAAG,KAAKtH,aAAhB;;AACA,QAAImI,YAAJ,EAAkB;AACd,UAAIC,CAAC,GAAGd,IAAI,CAAC,CAAD,CAAZ;AACA,UAAIe,CAAC,GAAGf,IAAI,CAAC,CAAD,CAAZ;AACA,aAAO,CACH3B,IAAI,CAAC2C,GAAL,CAASF,CAAC,GAAGzC,IAAI,CAAC4C,GAAL,CAASJ,YAAT,CAAb,IACIxC,IAAI,CAAC2C,GAAL,CAASD,CAAC,GAAG1C,IAAI,CAAC6C,GAAL,CAASL,YAAT,CAAb,CAFD,EAGHxC,IAAI,CAAC2C,GAAL,CAASF,CAAC,GAAGzC,IAAI,CAAC6C,GAAL,CAASL,YAAT,CAAb,IACIxC,IAAI,CAAC2C,GAAL,CAASD,CAAC,GAAG1C,IAAI,CAAC4C,GAAL,CAASJ,YAAT,CAAb,CAJD,CAAP;AAMH,KATD,MAUK;AACD,aAAOb,IAAP;AACH;AACJ,GAfD;AAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInI,EAAAA,IAAI,CAACrD,SAAL,CAAe2M,eAAf,GAAiC,UAAUC,QAAV,EAAoB;AACjD,SAAK1I,aAAL,GAAqBpE,KAAK,CAAC+M,OAAN,CAAcD,QAAd,IACfA,QAAQ,CAAC5D,KAAT,EADe,GAEf,CAAC,GAAD,EAAM,GAAN,CAFN;;AAGA,QAAI,CAAC,KAAKjB,YAAL,EAAL,EAA0B;AACtB,WAAKC,kBAAL,CAAwB,CAAxB;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACI3E,EAAAA,IAAI,CAACrD,SAAL,CAAe2C,SAAf,GAA2B,YAAY;AACnC,QAAIgC,MAAM,GAAG,KAAK+C,iBAAL,EAAb;;AACA,QAAI,CAAC/C,MAAL,EAAa;AACT,aAAOA,MAAP;AACH;;AACD,WAAOxD,gBAAgB,CAACwD,MAAD,EAAS,KAAK0D,aAAL,EAAT,CAAvB;AACH,GAND;AAOA;AACJ;AACA;AACA;;;AACIhF,EAAAA,IAAI,CAACrD,SAAL,CAAe0H,iBAAf,GAAmC,YAAY;AAC3C,WAAsE,KAAKZ,GAAL,CAASlG,YAAY,CAACkM,MAAtB,CAAtE;AACH,GAFD;AAGA;AACJ;AACA;;;AACIzJ,EAAAA,IAAI,CAACrD,SAAL,CAAe+M,cAAf,GAAgC,YAAY;AACxC,WAAO,KAAK5G,YAAZ;AACH,GAFD;AAGA;AACJ;AACA;;;AACI9C,EAAAA,IAAI,CAACrD,SAAL,CAAegN,sBAAf,GAAwC,YAAY;AAChD,WAAO,KAAKpG,QAAL,CAAcqG,mBAArB;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACI5J,EAAAA,IAAI,CAACrD,SAAL,CAAekN,QAAf,GAA0B,UAAUC,SAAV,EAAqB;AAC3C,QAAIA,SAAS,KAAKzI,SAAlB,EAA6B;AACzByI,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,KAAKtJ,MAAL,CAAY,CAAZ,CAAf;AACAsJ,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAe,KAAKtJ,MAAL,CAAY,CAAZ,CAAf;AACA,aAAOsJ,SAAP;AACH,KAJD,MAKK;AACD,aAAO,KAAKtJ,MAAL,CAAYmF,KAAZ,EAAP;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3F,EAAAA,IAAI,CAACrD,SAAL,CAAeoN,eAAf,GAAiC,UAAUR,QAAV,EAAoB;AACjD,QAAIhI,MAAM,GAAG,KAAKyI,uBAAL,CAA6BT,QAA7B,CAAb;AACA,WAAOxL,YAAY,CAACwD,MAAD,EAAS,KAAKyD,aAAL,EAAT,CAAnB;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIhF,EAAAA,IAAI,CAACrD,SAAL,CAAeqN,uBAAf,GAAyC,UAAUT,QAAV,EAAoB;AACzD,QAAIpB,IAAI,GAAGoB,QAAQ,IAAI,KAAKU,4BAAL,EAAvB;AACA,QAAI3I,MAAM,GAAyD,KAAK+C,iBAAL,EAAnE;AACA9F,IAAAA,MAAM,CAAC+C,MAAD,EAAS,CAAT,CAAN,CAHyD,CAGtC;;AACnB,QAAIyB,UAAU,GAA2B,KAAKc,aAAL,EAAzC;AACAtF,IAAAA,MAAM,CAACwE,UAAU,KAAK1B,SAAhB,EAA2B,CAA3B,CAAN,CALyD,CAKpB;;AACrC,QAAI2B,QAAQ,GAA2B,KAAKsB,WAAL,EAAvC;AACA/F,IAAAA,MAAM,CAACyE,QAAQ,KAAK3B,SAAd,EAAyB,CAAzB,CAAN,CAPyD,CAOtB;;AACnC,WAAO9B,iBAAiB,CAAC+B,MAAD,EAASyB,UAAT,EAAqBC,QAArB,EAA+BmF,IAA/B,CAAxB;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;;;AACInI,EAAAA,IAAI,CAACrD,SAAL,CAAeuN,gBAAf,GAAkC,YAAY;AAC1C,WAAO,KAAKtI,cAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI5B,EAAAA,IAAI,CAACrD,SAAL,CAAewN,gBAAf,GAAkC,YAAY;AAC1C,WAAO,KAAKrI,cAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI9B,EAAAA,IAAI,CAACrD,SAAL,CAAeyN,UAAf,GAA4B,YAAY;AACpC,WAA8B,KAAKC,oBAAL,CAA0B,KAAKvI,cAA/B,CAA9B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI9B,EAAAA,IAAI,CAACrD,SAAL,CAAe2N,UAAf,GAA4B,UAAUlH,IAAV,EAAgB;AACxC,SAAK5B,aAAL,CAAmB,KAAK0C,kBAAL,CAAwB;AAAEqG,MAAAA,OAAO,EAAEnH;AAAX,KAAxB,CAAnB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIpD,EAAAA,IAAI,CAACrD,SAAL,CAAe6N,UAAf,GAA4B,YAAY;AACpC,WAA8B,KAAKH,oBAAL,CAA0B,KAAKzI,cAA/B,CAA9B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI5B,EAAAA,IAAI,CAACrD,SAAL,CAAe8N,UAAf,GAA4B,UAAUrH,IAAV,EAAgB;AACxC,SAAK5B,aAAL,CAAmB,KAAK0C,kBAAL,CAAwB;AAAE3B,MAAAA,OAAO,EAAEa;AAAX,KAAxB,CAAnB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIpD,EAAAA,IAAI,CAACrD,SAAL,CAAe+N,sBAAf,GAAwC,UAAUC,OAAV,EAAmB;AACvD,SAAKnJ,aAAL,CAAmB,KAAK0C,kBAAL,CAAwB;AAAE0F,MAAAA,mBAAmB,EAAEe;AAAvB,KAAxB,CAAnB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACI3K,EAAAA,IAAI,CAACrD,SAAL,CAAeqI,aAAf,GAA+B,YAAY;AACvC,WAAO,KAAKrE,WAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,IAAI,CAACrD,SAAL,CAAekH,aAAf,GAA+B,YAAY;AACvC,WAAwC,KAAKJ,GAAL,CAASlG,YAAY,CAACqN,UAAtB,CAAxC;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI5K,EAAAA,IAAI,CAACrD,SAAL,CAAekO,cAAf,GAAgC,YAAY;AACxC,WAAO,KAAK3I,YAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlC,EAAAA,IAAI,CAACrD,SAAL,CAAemO,sBAAf,GAAwC,UAAUvJ,MAAV,EAAkBgI,QAAlB,EAA4B;AAChE,WAAO,KAAKwB,8BAAL,CAAoCnN,cAAc,CAAC2D,MAAD,EAAS,KAAKyD,aAAL,EAAT,CAAlD,EAAkFuE,QAAlF,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIvJ,EAAAA,IAAI,CAACrD,SAAL,CAAeoO,8BAAf,GAAgD,UAAUxJ,MAAV,EAAkBgI,QAAlB,EAA4B;AACxE,QAAIpB,IAAI,GAAGoB,QAAQ,IAAI,KAAKU,4BAAL,EAAvB;AACA,QAAIe,WAAW,GAAGvL,QAAQ,CAAC8B,MAAD,CAAR,GAAmB4G,IAAI,CAAC,CAAD,CAAzC;AACA,QAAI8C,WAAW,GAAGzL,SAAS,CAAC+B,MAAD,CAAT,GAAoB4G,IAAI,CAAC,CAAD,CAA1C;AACA,WAAO3B,IAAI,CAAC0E,GAAL,CAASF,WAAT,EAAsBC,WAAtB,CAAP;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;;;AACIjL,EAAAA,IAAI,CAACrD,SAAL,CAAewO,6BAAf,GAA+C,UAAUC,SAAV,EAAqB;AAChE,QAAIC,KAAK,GAAGD,SAAS,IAAI,CAAzB;AACA,QAAIvJ,aAAa,GAAG,KAAKyJ,wBAAL,CAA8B,KAAK1J,cAAnC,CAApB;AACA,QAAIG,aAAa,GAAG,KAAKD,cAAzB;AACA,QAAIoJ,GAAG,GAAG1E,IAAI,CAAC+E,GAAL,CAAS1J,aAAa,GAAGE,aAAzB,IAA0CyE,IAAI,CAAC+E,GAAL,CAASF,KAAT,CAApD;AACA;AACA;AACR;AACA;AACA;AACQ,gBAAUG,KAAV,EAAiB;AACb,YAAIzI,UAAU,GAAGlB,aAAa,GAAG2E,IAAI,CAACiF,GAAL,CAASJ,KAAT,EAAgBG,KAAK,GAAGN,GAAxB,CAAjC;AACA,eAAOnI,UAAP;AACH;AARD;AASH,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;;;AACI/C,EAAAA,IAAI,CAACrD,SAAL,CAAe2H,WAAf,GAA6B,YAAY;AACrC,WAA8B,KAAKb,GAAL,CAASlG,YAAY,CAACmO,QAAtB,CAA9B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI1L,EAAAA,IAAI,CAACrD,SAAL,CAAegP,6BAAf,GAA+C,UAAUP,SAAV,EAAqB;AAChE,QAAIQ,QAAQ,GAAGpF,IAAI,CAAC+E,GAAL,CAASH,SAAS,IAAI,CAAtB,CAAf;AACA,QAAIvJ,aAAa,GAAG,KAAKyJ,wBAAL,CAA8B,KAAK1J,cAAnC,CAApB;AACA,QAAIG,aAAa,GAAG,KAAKD,cAAzB;AACA,QAAIoJ,GAAG,GAAG1E,IAAI,CAAC+E,GAAL,CAAS1J,aAAa,GAAGE,aAAzB,IAA0C6J,QAApD;AACA;AACA;AACR;AACA;AACA;AACQ,gBAAU7I,UAAV,EAAsB;AAClB,YAAIyI,KAAK,GAAGhF,IAAI,CAAC+E,GAAL,CAAS1J,aAAa,GAAGkB,UAAzB,IAAuC6I,QAAvC,GAAkDV,GAA9D;AACA,eAAOM,KAAP;AACH;AARD;AASH,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;;;AACIxL,EAAAA,IAAI,CAACrD,SAAL,CAAesN,4BAAf,GAA8C,UAAUjB,YAAV,EAAwB;AAClE,QAAIb,IAAI,GAAG,KAAKC,gBAAL,CAAsBY,YAAtB,CAAX;AACA,QAAI3G,OAAO,GAAG,KAAKD,QAAnB;;AACA,QAAIC,OAAJ,EAAa;AACT8F,MAAAA,IAAI,GAAG,CACHA,IAAI,CAAC,CAAD,CAAJ,GAAU9F,OAAO,CAAC,CAAD,CAAjB,GAAuBA,OAAO,CAAC,CAAD,CAD3B,EAEH8F,IAAI,CAAC,CAAD,CAAJ,GAAU9F,OAAO,CAAC,CAAD,CAAjB,GAAuBA,OAAO,CAAC,CAAD,CAF3B,CAAP;AAIH;;AACD,WAAO8F,IAAP;AACH,GAVD;AAWA;AACJ;AACA;;;AACInI,EAAAA,IAAI,CAACrD,SAAL,CAAekP,QAAf,GAA0B,YAAY;AAClC,QAAIjL,UAAU,GAAG,KAAKoE,aAAL,EAAjB;AACA,QAAIjC,UAAU,GAAG,KAAKc,aAAL,EAAjB;AACA,QAAIb,QAAQ,GAAG,KAAKsB,WAAL,EAAf;AACA,QAAIhD,MAAM,GAAwD,KAAK+C,iBAAL,EAAlE;AACA,QAAIhC,OAAO,GAAG,KAAKD,QAAnB;;AACA,QAAIC,OAAJ,EAAa;AACT,UAAIyJ,WAAW,GAAG,KAAK7B,4BAAL,EAAlB;AACA3I,MAAAA,MAAM,GAAGyK,iBAAiB,CAACzK,MAAD,EAAS,KAAK8G,gBAAL,EAAT,EAAkC,CAAC0D,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB,GAAqBzJ,OAAO,CAAC,CAAD,CAA7B,EAAkCyJ,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB,GAAqBzJ,OAAO,CAAC,CAAD,CAA9D,CAAlC,EAAsGU,UAAtG,EAAkHC,QAAlH,CAA1B;AACH;;AACD,WAAO;AACH1B,MAAAA,MAAM,EAAEA,MAAM,CAACqE,KAAP,CAAa,CAAb,CADL;AAEH/E,MAAAA,UAAU,EAAEA,UAAU,KAAKS,SAAf,GAA2BT,UAA3B,GAAwC,IAFjD;AAGHmC,MAAAA,UAAU,EAAEA,UAHT;AAIHiJ,MAAAA,UAAU,EAAE,KAAK/K,WAJd;AAKHgL,MAAAA,cAAc,EAAE,KAAK/K,eALlB;AAMHgL,MAAAA,YAAY,EAAE,KAAK/K,aANhB;AAOH6B,MAAAA,QAAQ,EAAEA,QAPP;AAQHI,MAAAA,IAAI,EAAE,KAAKgB,OAAL;AARH,KAAP;AAUH,GApBD;AAqBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpE,EAAAA,IAAI,CAACrD,SAAL,CAAeyH,OAAf,GAAyB,YAAY;AACjC,QAAIhB,IAAJ;AACA,QAAIL,UAAU,GAAG,KAAKc,aAAL,EAAjB;;AACA,QAAId,UAAU,KAAK1B,SAAnB,EAA8B;AAC1B+B,MAAAA,IAAI,GAAG,KAAKiH,oBAAL,CAA0BtH,UAA1B,CAAP;AACH;;AACD,WAAOK,IAAP;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,IAAI,CAACrD,SAAL,CAAe0N,oBAAf,GAAsC,UAAUtH,UAAV,EAAsB;AACxD,QAAIoJ,MAAM,GAAG,KAAK7J,QAAL,IAAiB,CAA9B;AACA,QAAI4I,GAAJ,EAASjJ,UAAT;;AACA,QAAI,KAAKC,YAAT,EAAuB;AACnB,UAAIkK,OAAO,GAAGxM,iBAAiB,CAAC,KAAKsC,YAAN,EAAoBa,UAApB,EAAgC,CAAhC,CAA/B;AACAoJ,MAAAA,MAAM,GAAGC,OAAT;AACAlB,MAAAA,GAAG,GAAG,KAAKhJ,YAAL,CAAkBkK,OAAlB,CAAN;;AACA,UAAIA,OAAO,IAAI,KAAKlK,YAAL,CAAkB4C,MAAlB,GAA2B,CAA1C,EAA6C;AACzC7C,QAAAA,UAAU,GAAG,CAAb;AACH,OAFD,MAGK;AACDA,QAAAA,UAAU,GAAGiJ,GAAG,GAAG,KAAKhJ,YAAL,CAAkBkK,OAAO,GAAG,CAA5B,CAAnB;AACH;AACJ,KAVD,MAWK;AACDlB,MAAAA,GAAG,GAAG,KAAKtJ,cAAX;AACAK,MAAAA,UAAU,GAAG,KAAKD,WAAlB;AACH;;AACD,WAAOmK,MAAM,GAAG3F,IAAI,CAAC+E,GAAL,CAASL,GAAG,GAAGnI,UAAf,IAA6ByD,IAAI,CAAC+E,GAAL,CAAStJ,UAAT,CAA7C;AACH,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,IAAI,CAACrD,SAAL,CAAe0J,oBAAf,GAAsC,UAAUjD,IAAV,EAAgB;AAClD,QAAI,KAAKlB,YAAT,EAAuB;AACnB,UAAI,KAAKA,YAAL,CAAkB4C,MAAlB,IAA4B,CAAhC,EAAmC;AAC/B,eAAO,CAAP;AACH;;AACD,UAAIuH,SAAS,GAAGzN,KAAK,CAAC4H,IAAI,CAAC8F,KAAL,CAAWlJ,IAAX,CAAD,EAAmB,CAAnB,EAAsB,KAAKlB,YAAL,CAAkB4C,MAAlB,GAA2B,CAAjD,CAArB;AACA,UAAI7C,UAAU,GAAG,KAAKC,YAAL,CAAkBmK,SAAlB,IAA+B,KAAKnK,YAAL,CAAkBmK,SAAS,GAAG,CAA9B,CAAhD;AACA,aAAQ,KAAKnK,YAAL,CAAkBmK,SAAlB,IACJ7F,IAAI,CAACiF,GAAL,CAASxJ,UAAT,EAAqBrD,KAAK,CAACwE,IAAI,GAAGiJ,SAAR,EAAmB,CAAnB,EAAsB,CAAtB,CAA1B,CADJ;AAEH,KARD,MASK;AACD,aAAQ,KAAKzK,cAAL,GAAsB4E,IAAI,CAACiF,GAAL,CAAS,KAAKzJ,WAAd,EAA2BoB,IAAI,GAAG,KAAKd,QAAvC,CAA9B;AACH;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItC,EAAAA,IAAI,CAACrD,SAAL,CAAe4P,GAAf,GAAqB,UAAUC,gBAAV,EAA4BtM,WAA5B,EAAyC;AAC1D;AACA,QAAIuM,QAAJ;AACAlO,IAAAA,MAAM,CAAC9B,KAAK,CAAC+M,OAAN,CAAcgD,gBAAd,KACH;AAAS;AAAiBA,IAAAA,gBAAD,CAAmBE,qBAA5C,KACI,UAFF,EAEc,EAFd,CAAN,CAH0D,CAKjC;;AACzB,QAAIjQ,KAAK,CAAC+M,OAAN,CAAcgD,gBAAd,CAAJ,EAAqC;AACjCjO,MAAAA,MAAM,CAAC,CAACmB,OAAO,CAAC8M,gBAAD,CAAT,EAA6B,EAA7B,CAAN,CADiC,CACO;;AACxC,UAAIjL,MAAM,GAAG3D,cAAc,CAAC4O,gBAAD,EAAmB,KAAKxH,aAAL,EAAnB,CAA3B;AACAyH,MAAAA,QAAQ,GAAG3M,iBAAiB,CAACyB,MAAD,CAA5B;AACH,KAJD,MAKK,IAAIiL,gBAAgB,CAACG,OAAjB,OAA+BvP,YAAY,CAACwP,MAAhD,EAAwD;AACzD,UAAIrL,MAAM,GAAG3D,cAAc,CAAC4O,gBAAgB,CAACK,SAAjB,EAAD,EAA+B,KAAK7H,aAAL,EAA/B,CAA3B;AACAyH,MAAAA,QAAQ,GAAG3M,iBAAiB,CAACyB,MAAD,CAA5B;AACAkL,MAAAA,QAAQ,CAACpO,MAAT,CAAgB,KAAKiG,WAAL,EAAhB,EAAoChF,SAAS,CAACiC,MAAD,CAA7C;AACH,KAJI,MAKA;AACD,UAAIuL,cAAc,GAAGjP,iBAAiB,EAAtC;;AACA,UAAIiP,cAAJ,EAAoB;AAChBL,QAAAA,QAAQ,GAA8DD,gBAAgB,CACjFO,KADiE,GAEjEC,SAFiE,CAEvDF,cAFuD,EAEvC,KAAK9H,aAAL,EAFuC,CAAtE;AAGH,OAJD,MAKK;AACDyH,QAAAA,QAAQ,GAAGD,gBAAX;AACH;AACJ;;AACD,SAAKS,WAAL,CAAiBR,QAAjB,EAA2BvM,WAA3B;AACH,GA5BD;AA6BA;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACrD,SAAL,CAAeuQ,wBAAf,GAA0C,UAAUT,QAAV,EAAoB;AAC1D,QAAIzJ,QAAQ,GAAG,KAAKsB,WAAL,EAAf;AACA,QAAI6I,QAAQ,GAAG3G,IAAI,CAAC4C,GAAL,CAASpG,QAAT,CAAf;AACA,QAAIoK,QAAQ,GAAG5G,IAAI,CAAC6C,GAAL,CAAS,CAACrG,QAAV,CAAf;AACA,QAAIqK,MAAM,GAAGZ,QAAQ,CAACa,kBAAT,EAAb;AACA,QAAIC,MAAM,GAAGd,QAAQ,CAACe,SAAT,EAAb;AACA,QAAIC,OAAO,GAAG,CAACC,QAAf;AACA,QAAIC,OAAO,GAAG,CAACD,QAAf;AACA,QAAIE,OAAO,GAAG,CAACF,QAAf;AACA,QAAIG,OAAO,GAAG,CAACH,QAAf;;AACA,SAAK,IAAI3I,CAAC,GAAG,CAAR,EAAWoC,EAAE,GAAGkG,MAAM,CAACvI,MAA5B,EAAoCC,CAAC,GAAGoC,EAAxC,EAA4CpC,CAAC,IAAIwI,MAAjD,EAAyD;AACrD,UAAIO,IAAI,GAAGT,MAAM,CAACtI,CAAD,CAAN,GAAYoI,QAAZ,GAAuBE,MAAM,CAACtI,CAAC,GAAG,CAAL,CAAN,GAAgBqI,QAAlD;AACA,UAAIW,IAAI,GAAGV,MAAM,CAACtI,CAAD,CAAN,GAAYqI,QAAZ,GAAuBC,MAAM,CAACtI,CAAC,GAAG,CAAL,CAAN,GAAgBoI,QAAlD;AACAM,MAAAA,OAAO,GAAGjH,IAAI,CAACwH,GAAL,CAASP,OAAT,EAAkBK,IAAlB,CAAV;AACAH,MAAAA,OAAO,GAAGnH,IAAI,CAACwH,GAAL,CAASL,OAAT,EAAkBI,IAAlB,CAAV;AACAH,MAAAA,OAAO,GAAGpH,IAAI,CAAC0E,GAAL,CAAS0C,OAAT,EAAkBE,IAAlB,CAAV;AACAD,MAAAA,OAAO,GAAGrH,IAAI,CAAC0E,GAAL,CAAS2C,OAAT,EAAkBE,IAAlB,CAAV;AACH;;AACD,WAAO,CAACN,OAAD,EAAUE,OAAV,EAAmBC,OAAnB,EAA4BC,OAA5B,CAAP;AACH,GAnBD;AAoBA;AACJ;AACA;AACA;;;AACI7N,EAAAA,IAAI,CAACrD,SAAL,CAAesQ,WAAf,GAA6B,UAAUR,QAAV,EAAoBvM,WAApB,EAAiC;AAC1D,QAAIK,OAAO,GAAGL,WAAW,IAAI,EAA7B;AACA,QAAIiI,IAAI,GAAG5H,OAAO,CAAC4H,IAAnB;;AACA,QAAI,CAACA,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAG,KAAK8B,4BAAL,EAAP;AACH;;AACD,QAAI5H,OAAO,GAAG9B,OAAO,CAAC8B,OAAR,KAAoBhB,SAApB,GAAgCd,OAAO,CAAC8B,OAAxC,GAAkD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAhE;AACA,QAAI+J,OAAO,GAAG7L,OAAO,CAAC6L,OAAR,KAAoB/K,SAApB,GAAgCd,OAAO,CAAC6L,OAAxC,GAAkD,KAAhE;AACA,QAAIrK,aAAJ;;AACA,QAAIxB,OAAO,CAACwB,aAAR,KAA0BV,SAA9B,EAAyC;AACrCU,MAAAA,aAAa,GAAGxB,OAAO,CAACwB,aAAxB;AACH,KAFD,MAGK,IAAIxB,OAAO,CAACgK,OAAR,KAAoBlJ,SAAxB,EAAmC;AACpCU,MAAAA,aAAa,GAAG,KAAKsE,oBAAL,CAA0B9F,OAAO,CAACgK,OAAlC,CAAhB;AACH,KAFI,MAGA;AACDxI,MAAAA,aAAa,GAAG,CAAhB;AACH;;AACD,QAAIkM,aAAa,GAAG,KAAKf,wBAAL,CAA8BT,QAA9B,CAApB,CAlB0D,CAmB1D;;AACA,QAAI1J,UAAU,GAAG,KAAKgI,8BAAL,CAAoCkD,aAApC,EAAmD,CAChE9F,IAAI,CAAC,CAAD,CAAJ,GAAU9F,OAAO,CAAC,CAAD,CAAjB,GAAuBA,OAAO,CAAC,CAAD,CADkC,EAEhE8F,IAAI,CAAC,CAAD,CAAJ,GAAU9F,OAAO,CAAC,CAAD,CAAjB,GAAuBA,OAAO,CAAC,CAAD,CAFkC,CAAnD,CAAjB;AAIAU,IAAAA,UAAU,GAAGmL,KAAK,CAACnL,UAAD,CAAL,GACPhB,aADO,GAEPyE,IAAI,CAAC0E,GAAL,CAASnI,UAAT,EAAqBhB,aAArB,CAFN;AAGAgB,IAAAA,UAAU,GAAG,KAAKuI,wBAAL,CAA8BvI,UAA9B,EAA0CqJ,OAAO,GAAG,CAAH,GAAO,CAAxD,CAAb,CA3B0D,CA4B1D;;AACA,QAAIpJ,QAAQ,GAAG,KAAKsB,WAAL,EAAf;AACA,QAAI8I,QAAQ,GAAG5G,IAAI,CAAC6C,GAAL,CAASrG,QAAT,CAAf;AACA,QAAImK,QAAQ,GAAG3G,IAAI,CAAC4C,GAAL,CAASpG,QAAT,CAAf;AACA,QAAImL,SAAS,GAAG7O,SAAS,CAAC2O,aAAD,CAAzB;AACAE,IAAAA,SAAS,CAAC,CAAD,CAAT,IAAiB,CAAC9L,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4B,CAA7B,GAAkCU,UAAlD;AACAoL,IAAAA,SAAS,CAAC,CAAD,CAAT,IAAiB,CAAC9L,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAArB,IAA4B,CAA7B,GAAkCU,UAAlD;AACA,QAAIqL,OAAO,GAAGD,SAAS,CAAC,CAAD,CAAT,GAAehB,QAAf,GAA0BgB,SAAS,CAAC,CAAD,CAAT,GAAef,QAAvD;AACA,QAAIiB,OAAO,GAAGF,SAAS,CAAC,CAAD,CAAT,GAAehB,QAAf,GAA0BgB,SAAS,CAAC,CAAD,CAAT,GAAef,QAAvD;AACA,QAAI9L,MAAM,GAAG,KAAKgN,oBAAL,CAA0B,CAACF,OAAD,EAAUC,OAAV,CAA1B,EAA8CtL,UAA9C,CAAb;AACA,QAAIsC,QAAQ,GAAG9E,OAAO,CAAC8E,QAAR,GAAmB9E,OAAO,CAAC8E,QAA3B,GAAsCrH,IAArD;;AACA,QAAIuC,OAAO,CAACwF,QAAR,KAAqB1E,SAAzB,EAAoC;AAChC,WAAK6D,eAAL,CAAqB;AACjBnC,QAAAA,UAAU,EAAEA,UADK;AAEjBzB,QAAAA,MAAM,EAAEA,MAFS;AAGjByE,QAAAA,QAAQ,EAAExF,OAAO,CAACwF,QAHD;AAIjBC,QAAAA,MAAM,EAAEzF,OAAO,CAACyF;AAJC,OAArB,EAKGX,QALH;AAMH,KAPD,MAQK;AACD,WAAKtE,iBAAL,GAAyBgC,UAAzB;AACA,WAAKjC,aAAL,GAAqBQ,MAArB;AACA,WAAKiH,iBAAL,CAAuB,KAAvB,EAA8B,IAA9B;AACAhD,MAAAA,iBAAiB,CAACF,QAAD,EAAW,IAAX,CAAjB;AACH;AACJ,GArDD;AAsDA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIrF,EAAAA,IAAI,CAACrD,SAAL,CAAe4R,QAAf,GAA0B,UAAUC,UAAV,EAAsBrG,IAAtB,EAA4BsG,QAA5B,EAAsC;AAC5D,SAAKC,gBAAL,CAAsB/Q,kBAAkB,CAAC6Q,UAAD,EAAa,KAAKxJ,aAAL,EAAb,CAAxC,EAA4EmD,IAA5E,EAAkFsG,QAAlF;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIzO,EAAAA,IAAI,CAACrD,SAAL,CAAe+R,gBAAf,GAAkC,UAAUF,UAAV,EAAsBrG,IAAtB,EAA4BsG,QAA5B,EAAsC;AACpE,SAAKvL,iBAAL,CAAuB6I,iBAAiB,CAACyC,UAAD,EAAarG,IAAb,EAAmBsG,QAAnB,EAA6B,KAAK5K,aAAL,EAA7B,EAAmD,KAAKS,WAAL,EAAnD,CAAxC;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItE,EAAAA,IAAI,CAACrD,SAAL,CAAegS,oBAAf,GAAsC,UAAUrN,MAAV,EAAkByB,UAAlB,EAA8BC,QAA9B,EAAwCmF,IAAxC,EAA8C;AAChF,QAAIyG,WAAJ;AACA,QAAIvM,OAAO,GAAG,KAAKD,QAAnB;;AACA,QAAIC,OAAO,IAAIf,MAAf,EAAuB;AACnB,UAAIwK,WAAW,GAAG,KAAK7B,4BAAL,CAAkC,CAACjH,QAAnC,CAAlB;AACA,UAAI6L,aAAa,GAAG9C,iBAAiB,CAACzK,MAAD,EAAS6G,IAAT,EAAe,CAAC2D,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB,GAAqBzJ,OAAO,CAAC,CAAD,CAA7B,EAAkCyJ,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB,GAAqBzJ,OAAO,CAAC,CAAD,CAA9D,CAAf,EAAmFU,UAAnF,EAA+FC,QAA/F,CAArC;AACA4L,MAAAA,WAAW,GAAG,CACVtN,MAAM,CAAC,CAAD,CAAN,GAAYuN,aAAa,CAAC,CAAD,CADf,EAEVvN,MAAM,CAAC,CAAD,CAAN,GAAYuN,aAAa,CAAC,CAAD,CAFf,CAAd;AAIH;;AACD,WAAOD,WAAP;AACH,GAZD;AAaA;AACJ;AACA;;;AACI5O,EAAAA,IAAI,CAACrD,SAAL,CAAe8H,KAAf,GAAuB,YAAY;AAC/B,WAAO,CAAC,CAAC,KAAKJ,iBAAL,EAAF,IAA8B,KAAKR,aAAL,OAAyBxC,SAA9D;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIrB,EAAAA,IAAI,CAACrD,SAAL,CAAemS,YAAf,GAA8B,UAAUC,gBAAV,EAA4B;AACtD,QAAIzN,MAAM,GAAGxD,gBAAgB,CAAC,KAAKgD,aAAN,EAAqB,KAAKkE,aAAL,EAArB,CAA7B;AACA,SAAKgK,SAAL,CAAe,CACX1N,MAAM,CAAC,CAAD,CAAN,GAAYyN,gBAAgB,CAAC,CAAD,CADjB,EAEXzN,MAAM,CAAC,CAAD,CAAN,GAAYyN,gBAAgB,CAAC,CAAD,CAFjB,CAAf;AAIH,GAND;AAOA;AACJ;AACA;AACA;;;AACI/O,EAAAA,IAAI,CAACrD,SAAL,CAAesS,oBAAf,GAAsC,UAAUF,gBAAV,EAA4B;AAC9D,QAAIzN,MAAM,GAAG,KAAKR,aAAlB;AACA,SAAKoC,iBAAL,CAAuB,CACnB5B,MAAM,CAAC,CAAD,CAAN,GAAYyN,gBAAgB,CAAC,CAAD,CADT,EAEnBzN,MAAM,CAAC,CAAD,CAAN,GAAYyN,gBAAgB,CAAC,CAAD,CAFT,CAAvB;AAIH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/O,EAAAA,IAAI,CAACrD,SAAL,CAAeuS,gBAAf,GAAkC,UAAUC,KAAV,EAAiBC,UAAjB,EAA6B;AAC3D,QAAInK,MAAM,GAAGmK,UAAU,IAAIzR,kBAAkB,CAACyR,UAAD,EAAa,KAAKpK,aAAL,EAAb,CAA7C;AACA,SAAKqK,wBAAL,CAA8BF,KAA9B,EAAqClK,MAArC;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIjF,EAAAA,IAAI,CAACrD,SAAL,CAAe0S,wBAAf,GAA0C,UAAUF,KAAV,EAAiBC,UAAjB,EAA6B;AACnE,QAAIE,QAAQ,GAAG,KAAK5K,YAAL,MAAuB,KAAKsC,cAAL,EAAtC;AACA,QAAImB,IAAI,GAAG,KAAKC,gBAAL,CAAsB,KAAK9D,WAAL,EAAtB,CAAX;AACA,QAAIiL,aAAa,GAAG,KAAKzM,YAAL,CAAkBC,UAAlB,CAA6B,KAAKhC,iBAAL,GAAyBoO,KAAtD,EAA6D,CAA7D,EAAgEhH,IAAhE,EAAsEmH,QAAtE,CAApB;;AACA,QAAIF,UAAJ,EAAgB;AACZ,WAAKtO,aAAL,GAAqB,KAAKwH,mBAAL,CAAyBiH,aAAzB,EAAwCH,UAAxC,CAArB;AACH;;AACD,SAAKrO,iBAAL,IAA0BoO,KAA1B;AACA,SAAK5G,iBAAL;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIvI,EAAAA,IAAI,CAACrD,SAAL,CAAe6S,UAAf,GAA4B,UAAUjJ,KAAV,EAAiB6I,UAAjB,EAA6B;AACrD,SAAKF,gBAAL,CAAsB1I,IAAI,CAACiF,GAAL,CAAS,KAAKzJ,WAAd,EAA2B,CAACuE,KAA5B,CAAtB,EAA0D6I,UAA1D;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpP,EAAAA,IAAI,CAACrD,SAAL,CAAe8S,cAAf,GAAgC,UAAUlJ,KAAV,EAAiB6I,UAAjB,EAA6B;AACzD,QAAIA,UAAJ,EAAgB;AACZA,MAAAA,UAAU,GAAGzR,kBAAkB,CAACyR,UAAD,EAAa,KAAKpK,aAAL,EAAb,CAA/B;AACH;;AACD,SAAK0K,sBAAL,CAA4BnJ,KAA5B,EAAmC6I,UAAnC;AACH,GALD;AAMA;AACJ;AACA;AACA;;;AACIpP,EAAAA,IAAI,CAACrD,SAAL,CAAe+S,sBAAf,GAAwC,UAAUnJ,KAAV,EAAiB6I,UAAjB,EAA6B;AACjE,QAAIE,QAAQ,GAAG,KAAK5K,YAAL,MAAuB,KAAKsC,cAAL,EAAtC;AACA,QAAI2I,WAAW,GAAG,KAAK7M,YAAL,CAAkBE,QAAlB,CAA2B,KAAKhC,eAAL,GAAuBuF,KAAlD,EAAyD+I,QAAzD,CAAlB;;AACA,QAAIF,UAAJ,EAAgB;AACZ,WAAKtO,aAAL,GAAqB,KAAK2H,qBAAL,CAA2BkH,WAA3B,EAAwCP,UAAxC,CAArB;AACH;;AACD,SAAKpO,eAAL,IAAwBuF,KAAxB;AACA,SAAKgC,iBAAL;AACH,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;;;AACIvI,EAAAA,IAAI,CAACrD,SAAL,CAAeqS,SAAf,GAA2B,UAAU1N,MAAV,EAAkB;AACzC,SAAK4B,iBAAL,CAAuBvF,kBAAkB,CAAC2D,MAAD,EAAS,KAAK0D,aAAL,EAAT,CAAzC;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIhF,EAAAA,IAAI,CAACrD,SAAL,CAAeuG,iBAAf,GAAmC,UAAU5B,MAAV,EAAkB;AACjD,SAAKR,aAAL,GAAqBQ,MAArB;AACA,SAAKiH,iBAAL;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIvI,EAAAA,IAAI,CAACrD,SAAL,CAAekK,OAAf,GAAyB,UAAU+I,IAAV,EAAgBrJ,KAAhB,EAAuB;AAC5C,SAAK/F,MAAL,CAAYoP,IAAZ,KAAqBrJ,KAArB;AACA,SAAKsJ,OAAL;AACA,WAAO,KAAKrP,MAAL,CAAYoP,IAAZ,CAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACI5P,EAAAA,IAAI,CAACrD,SAAL,CAAewG,aAAf,GAA+B,UAAUJ,UAAV,EAAsB;AACjD,SAAKhC,iBAAL,GAAyBgC,UAAzB;AACA,SAAKwF,iBAAL;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIvI,EAAAA,IAAI,CAACrD,SAAL,CAAesG,WAAf,GAA6B,UAAUD,QAAV,EAAoB;AAC7C,SAAKhC,eAAL,GAAuBgC,QAAvB;AACA,SAAKuF,iBAAL;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIvI,EAAAA,IAAI,CAACrD,SAAL,CAAe0G,OAAf,GAAyB,UAAUD,IAAV,EAAgB;AACrC,SAAKD,aAAL,CAAmB,KAAKkD,oBAAL,CAA0BjD,IAA1B,CAAnB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,IAAI,CAACrD,SAAL,CAAe4L,iBAAf,GAAmC,UAAUuH,oBAAV,EAAgCC,eAAhC,EAAiD;AAChF,QAAIT,QAAQ,GAAG,KAAK5K,YAAL,MAAuB,KAAKsC,cAAL,EAAvB,IAAgD+I,eAA/D,CADgF,CAEhF;;AACA,QAAIJ,WAAW,GAAG,KAAK7M,YAAL,CAAkBE,QAAlB,CAA2B,KAAKhC,eAAhC,EAAiDsO,QAAjD,CAAlB;AACA,QAAInH,IAAI,GAAG,KAAKC,gBAAL,CAAsBuH,WAAtB,CAAX;AACA,QAAIJ,aAAa,GAAG,KAAKzM,YAAL,CAAkBC,UAAlB,CAA6B,KAAKhC,iBAAlC,EAAqD,CAArD,EAAwDoH,IAAxD,EAA8DmH,QAA9D,CAApB;AACA,QAAIU,SAAS,GAAG,KAAKlN,YAAL,CAAkBxB,MAAlB,CAAyB,KAAKR,aAA9B,EAA6CyO,aAA7C,EAA4DpH,IAA5D,EAAkEmH,QAAlE,EAA4E,KAAKX,oBAAL,CAA0B,KAAK7N,aAA/B,EAA8CyO,aAA9C,EAA6DI,WAA7D,EAA0ExH,IAA1E,CAA5E,CAAhB;;AACA,QAAI,KAAK1E,GAAL,CAASlG,YAAY,CAACmO,QAAtB,MAAoCiE,WAAxC,EAAqD;AACjD,WAAKjM,GAAL,CAASnG,YAAY,CAACmO,QAAtB,EAAgCiE,WAAhC;AACH;;AACD,QAAI,KAAKlM,GAAL,CAASlG,YAAY,CAACqN,UAAtB,MAAsC2E,aAA1C,EAAyD;AACrD,WAAK7L,GAAL,CAASnG,YAAY,CAACqN,UAAtB,EAAkC2E,aAAlC;AACH;;AACD,QAAI,CAAC,KAAK9L,GAAL,CAASlG,YAAY,CAACkM,MAAtB,CAAD,IACA,CAACtL,MAAM,CAAC,KAAKsF,GAAL,CAASlG,YAAY,CAACkM,MAAtB,CAAD,EAAgCuG,SAAhC,CADX,EACuD;AACnD,WAAKtM,GAAL,CAASnG,YAAY,CAACkM,MAAtB,EAA8BuG,SAA9B;AACH;;AACD,QAAI,KAAKtL,YAAL,MAAuB,CAACoL,oBAA5B,EAAkD;AAC9C,WAAK5I,gBAAL;AACH;;AACD,SAAK9F,aAAL,GAAqBC,SAArB;AACH,GArBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrB,EAAAA,IAAI,CAACrD,SAAL,CAAegI,kBAAf,GAAoC,UAAUsL,YAAV,EAAwBC,uBAAxB,EAAiDd,UAAjD,EAA6D;AAC7F,QAAIrJ,QAAQ,GAAGkK,YAAY,KAAK5O,SAAjB,GAA6B4O,YAA7B,GAA4C,GAA3D;AACA,QAAIE,SAAS,GAAGD,uBAAuB,IAAI,CAA3C;AACA,QAAIP,WAAW,GAAG,KAAK7M,YAAL,CAAkBE,QAAlB,CAA2B,KAAKhC,eAAhC,CAAlB;AACA,QAAImH,IAAI,GAAG,KAAKC,gBAAL,CAAsBuH,WAAtB,CAAX;AACA,QAAIJ,aAAa,GAAG,KAAKzM,YAAL,CAAkBC,UAAlB,CAA6B,KAAKhC,iBAAlC,EAAqDoP,SAArD,EAAgEhI,IAAhE,CAApB;AACA,QAAI6H,SAAS,GAAG,KAAKlN,YAAL,CAAkBxB,MAAlB,CAAyB,KAAKR,aAA9B,EAA6CyO,aAA7C,EAA4DpH,IAA5D,EAAkE,KAAlE,EAAyE,KAAKwG,oBAAL,CAA0B,KAAK7N,aAA/B,EAA8CyO,aAA9C,EAA6DI,WAA7D,EAA0ExH,IAA1E,CAAzE,CAAhB;;AACA,QAAIpC,QAAQ,KAAK,CAAb,IAAkB,CAAC,KAAK3E,aAA5B,EAA2C;AACvC,WAAKL,iBAAL,GAAyBwO,aAAzB;AACA,WAAKvO,eAAL,GAAuB2O,WAAvB;AACA,WAAK7O,aAAL,GAAqBkP,SAArB;AACA,WAAKzH,iBAAL;AACA;AACH;;AACD,QAAItD,MAAM,GAAGmK,UAAU,KAAKrJ,QAAQ,KAAK,CAAb,GAAiB,KAAK3E,aAAtB,GAAsCC,SAA3C,CAAvB;AACA,SAAKD,aAAL,GAAqBC,SAArB;;AACA,QAAI,KAAKwC,aAAL,OAAyB0L,aAAzB,IACA,KAAKjL,WAAL,OAAuBqL,WADvB,IAEA,CAAC,KAAKtL,iBAAL,EAFD,IAGA,CAAClG,MAAM,CAAC,KAAKkG,iBAAL,EAAD,EAA2B2L,SAA3B,CAHX,EAGkD;AAC9C,UAAI,KAAKtL,YAAL,EAAJ,EAAyB;AACrB,aAAKwC,gBAAL;AACH;;AACD,WAAKhC,eAAL,CAAqB;AACjBlC,QAAAA,QAAQ,EAAE2M,WADO;AAEjBrO,QAAAA,MAAM,EAAE0O,SAFS;AAGjBjN,QAAAA,UAAU,EAAEwM,aAHK;AAIjBxJ,QAAAA,QAAQ,EAAEA,QAJO;AAKjBC,QAAAA,MAAM,EAAE3G,OALS;AAMjB4F,QAAAA,MAAM,EAAEA;AANS,OAArB;AAQH;AACJ,GAhCD;AAiCA;AACJ;AACA;AACA;AACA;AACA;;;AACIjF,EAAAA,IAAI,CAACrD,SAAL,CAAeyT,gBAAf,GAAkC,YAAY;AAC1C,SAAKzL,kBAAL,CAAwB,CAAxB;AACA,SAAKkC,OAAL,CAAavJ,QAAQ,CAAC2J,WAAtB,EAAmC,CAAnC;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjH,EAAAA,IAAI,CAACrD,SAAL,CAAe0T,cAAf,GAAgC,UAAUJ,YAAV,EAAwBC,uBAAxB,EAAiDd,UAAjD,EAA6D;AACzF,QAAInK,MAAM,GAAGmK,UAAU,IAAIzR,kBAAkB,CAACyR,UAAD,EAAa,KAAKpK,aAAL,EAAb,CAA7C;AACA,SAAKsL,sBAAL,CAA4BL,YAA5B,EAA0CC,uBAA1C,EAAmEjL,MAAnE;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIjF,EAAAA,IAAI,CAACrD,SAAL,CAAe2T,sBAAf,GAAwC,UAAUL,YAAV,EAAwBC,uBAAxB,EAAiDd,UAAjD,EAA6D;AACjG,SAAKvI,OAAL,CAAavJ,QAAQ,CAAC2J,WAAtB,EAAmC,CAAC,CAApC;AACA,SAAKtC,kBAAL,CAAwBsL,YAAxB,EAAsCC,uBAAtC,EAA+Dd,UAA/D;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpP,EAAAA,IAAI,CAACrD,SAAL,CAAe2R,oBAAf,GAAsC,UAAUpI,YAAV,EAAwBqK,oBAAxB,EAA8C;AAChF,QAAIpI,IAAI,GAAG,KAAKC,gBAAL,CAAsB,KAAK9D,WAAL,EAAtB,CAAX;AACA,WAAO,KAAKxB,YAAL,CAAkBxB,MAAlB,CAAyB4E,YAAzB,EAAuCqK,oBAAoB,IAAI,KAAK1M,aAAL,EAA/D,EAAqFsE,IAArF,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInI,EAAAA,IAAI,CAACrD,SAAL,CAAe6T,kBAAf,GAAoC,UAAUC,UAAV,EAAsBC,aAAtB,EAAqC;AACrE,QAAIC,SAAS,GAAG,KAAKtK,oBAAL,CAA0BoK,UAA1B,CAAhB;AACA,WAAO,KAAKpG,oBAAL,CAA0B,KAAKiB,wBAAL,CAA8BqF,SAA9B,EAAyCD,aAAzC,CAA1B,CAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1Q,EAAAA,IAAI,CAACrD,SAAL,CAAe2O,wBAAf,GAA0C,UAAUlF,gBAAV,EAA4BsK,aAA5B,EAA2C;AACjF,QAAIP,SAAS,GAAGO,aAAa,IAAI,CAAjC;AACA,QAAIvI,IAAI,GAAG,KAAKC,gBAAL,CAAsB,KAAK9D,WAAL,EAAtB,CAAX;AACA,WAAO,KAAKxB,YAAL,CAAkBC,UAAlB,CAA6BqD,gBAA7B,EAA+C+J,SAA/C,EAA0DhI,IAA1D,CAAP;AACH,GAJD;;AAKA,SAAOnI,IAAP;AACH,CA9zCyB,CA8zCxB7C,UA9zCwB,CAA1B;AA+zCA;AACA;AACA;AACA;;;AACA,SAASoI,iBAAT,CAA2BF,QAA3B,EAAqCuL,WAArC,EAAkD;AAC9CC,EAAAA,UAAU,CAAC,YAAY;AACnBxL,IAAAA,QAAQ,CAACuL,WAAD,CAAR;AACH,GAFS,EAEP,CAFO,CAAV;AAGH;AACD;AACA;AACA;AACA;;;AACA,OAAO,SAASnO,sBAAT,CAAgClC,OAAhC,EAAyC;AAC5C,MAAIA,OAAO,CAACgB,MAAR,KAAmBF,SAAvB,EAAkC;AAC9B,QAAIyP,MAAM,GAAGvQ,OAAO,CAACwQ,sBAAR,KAAmC1P,SAAnC,GACPd,OAAO,CAACwQ,sBADD,GAEP,IAFN;AAGA,WAAOpS,YAAY,CAAC4B,OAAO,CAACgB,MAAT,EAAiBhB,OAAO,CAACyQ,mBAAzB,EAA8CF,MAA9C,CAAnB;AACH;;AACD,MAAIlQ,UAAU,GAAGlD,gBAAgB,CAAC6C,OAAO,CAACK,UAAT,EAAqB,WAArB,CAAjC;;AACA,MAAIL,OAAO,CAAC0Q,UAAR,KAAuB,IAAvB,IAA+BrQ,UAAU,CAACsQ,QAAX,EAAnC,EAA0D;AACtD,QAAI3P,MAAM,GAAGX,UAAU,CAACiM,SAAX,GAAuBlH,KAAvB,EAAb;AACApE,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAACmM,QAAb;AACAnM,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYmM,QAAZ;AACA,WAAO/O,YAAY,CAAC4C,MAAD,EAAS,KAAT,EAAgB,KAAhB,CAAnB;AACH;;AACD,SAAO7C,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiD,0BAAT,CAAoCpB,OAApC,EAA6C;AAChD,MAAImC,oBAAJ;AACA,MAAIb,aAAJ;AACA,MAAIE,aAAJ,CAHgD,CAIhD;AACA;;AACA,MAAIoP,cAAc,GAAG,EAArB;AACA,MAAIC,iBAAiB,GAAG,CAAxB;AACA,MAAI7O,OAAO,GAAGhC,OAAO,CAACgC,OAAR,KAAoBlB,SAApB,GAAgCd,OAAO,CAACgC,OAAxC,GAAkDxC,gBAAhE;AACA,MAAIwK,OAAO,GAAGhK,OAAO,CAACgK,OAAR,KAAoBlJ,SAApB,GAAgCd,OAAO,CAACgK,OAAxC,GAAkD4G,cAAhE;AACA,MAAIlP,UAAU,GAAG1B,OAAO,CAAC0B,UAAR,KAAuBZ,SAAvB,GAAmCd,OAAO,CAAC0B,UAA3C,GAAwDmP,iBAAzE;AACA,MAAIH,UAAU,GAAG1Q,OAAO,CAAC0Q,UAAR,KAAuB5P,SAAvB,GAAmCd,OAAO,CAAC0Q,UAA3C,GAAwD,KAAzE;AACA,MAAIH,MAAM,GAAGvQ,OAAO,CAAC8Q,0BAAR,KAAuChQ,SAAvC,GACPd,OAAO,CAAC8Q,0BADD,GAEP,IAFN;AAGA,MAAIC,cAAc,GAAG/Q,OAAO,CAAC+Q,cAAR,KAA2BjQ,SAA3B,GAAuCd,OAAO,CAAC+Q,cAA/C,GAAgE,KAArF;AACA,MAAI1Q,UAAU,GAAGlD,gBAAgB,CAAC6C,OAAO,CAACK,UAAT,EAAqB,WAArB,CAAjC;AACA,MAAI2Q,UAAU,GAAG3Q,UAAU,CAACiM,SAAX,EAAjB;AACA,MAAImE,mBAAmB,GAAGzQ,OAAO,CAACyQ,mBAAlC;AACA,MAAIzP,MAAM,GAAGhB,OAAO,CAACgB,MAArB;;AACA,MAAI,CAAC0P,UAAD,IAAe,CAAC1P,MAAhB,IAA0BX,UAAU,CAACsQ,QAAX,EAA9B,EAAqD;AACjDF,IAAAA,mBAAmB,GAAG,KAAtB;AACAzP,IAAAA,MAAM,GAAGgQ,UAAT;AACH;;AACD,MAAIhR,OAAO,CAAC4B,WAAR,KAAwBd,SAA5B,EAAuC;AACnC,QAAIc,WAAW,GAAG5B,OAAO,CAAC4B,WAA1B;AACAN,IAAAA,aAAa,GAAGM,WAAW,CAACI,OAAD,CAA3B;AACAR,IAAAA,aAAa,GACTI,WAAW,CAACoI,OAAD,CAAX,KAAyBlJ,SAAzB,GACMc,WAAW,CAACoI,OAAD,CADjB,GAEMpI,WAAW,CAACA,WAAW,CAAC2C,MAAZ,GAAqB,CAAtB,CAHrB;;AAIA,QAAIvE,OAAO,CAACqJ,mBAAZ,EAAiC;AAC7BlH,MAAAA,oBAAoB,GAAGtD,uBAAuB,CAAC+C,WAAD,EAAc2O,MAAd,EAAsB,CAACE,mBAAD,IAAwBzP,MAA9C,EAAsD+P,cAAtD,CAA9C;AACH,KAFD,MAGK;AACD5O,MAAAA,oBAAoB,GAAG5D,sBAAsB,CAAC+C,aAAD,EAAgBE,aAAhB,EAA+B+O,MAA/B,EAAuC,CAACE,mBAAD,IAAwBzP,MAA/D,EAAuE+P,cAAvE,CAA7C;AACH;AACJ,GAbD,MAcK;AACD;AACA,QAAInJ,IAAI,GAAG,CAACoJ,UAAD,GACL;AACG,UAAM9T,eAAe,CAACJ,KAAK,CAACmU,OAAP,CAAtB,GAAyC5Q,UAAU,CAAC6Q,gBAAX,EAFtC,GAGLjL,IAAI,CAAC0E,GAAL,CAASzL,QAAQ,CAAC8R,UAAD,CAAjB,EAA+B/R,SAAS,CAAC+R,UAAD,CAAxC,CAHN;AAIA,QAAIG,oBAAoB,GAAGvJ,IAAI,GAAG3K,iBAAP,GAA2BgJ,IAAI,CAACiF,GAAL,CAAS2F,iBAAT,EAA4BrR,gBAA5B,CAAtD;AACA,QAAI4R,oBAAoB,GAAGD,oBAAoB,GAC3ClL,IAAI,CAACiF,GAAL,CAAS2F,iBAAT,EAA4BD,cAAc,GAAGpR,gBAA7C,CADJ,CAPC,CASD;;AACA8B,IAAAA,aAAa,GAAGtB,OAAO,CAACsB,aAAxB;;AACA,QAAIA,aAAa,KAAKR,SAAtB,EAAiC;AAC7BkB,MAAAA,OAAO,GAAG,CAAV;AACH,KAFD,MAGK;AACDV,MAAAA,aAAa,GAAG6P,oBAAoB,GAAGlL,IAAI,CAACiF,GAAL,CAASxJ,UAAT,EAAqBM,OAArB,CAAvC;AACH,KAhBA,CAiBD;;;AACAR,IAAAA,aAAa,GAAGxB,OAAO,CAACwB,aAAxB;;AACA,QAAIA,aAAa,KAAKV,SAAtB,EAAiC;AAC7B,UAAId,OAAO,CAACgK,OAAR,KAAoBlJ,SAAxB,EAAmC;AAC/B,YAAId,OAAO,CAACsB,aAAR,KAA0BR,SAA9B,EAAyC;AACrCU,UAAAA,aAAa,GAAGF,aAAa,GAAG2E,IAAI,CAACiF,GAAL,CAASxJ,UAAT,EAAqBsI,OAArB,CAAhC;AACH,SAFD,MAGK;AACDxI,UAAAA,aAAa,GAAG2P,oBAAoB,GAAGlL,IAAI,CAACiF,GAAL,CAASxJ,UAAT,EAAqBsI,OAArB,CAAvC;AACH;AACJ,OAPD,MAQK;AACDxI,QAAAA,aAAa,GAAG4P,oBAAhB;AACH;AACJ,KA/BA,CAgCD;;;AACApH,IAAAA,OAAO,GACHhI,OAAO,GACHiE,IAAI,CAAC8F,KAAL,CAAW9F,IAAI,CAAC+E,GAAL,CAAS1J,aAAa,GAAGE,aAAzB,IAA0CyE,IAAI,CAAC+E,GAAL,CAAStJ,UAAT,CAArD,CAFR;AAGAF,IAAAA,aAAa,GAAGF,aAAa,GAAG2E,IAAI,CAACiF,GAAL,CAASxJ,UAAT,EAAqBsI,OAAO,GAAGhI,OAA/B,CAAhC;;AACA,QAAIhC,OAAO,CAACqJ,mBAAZ,EAAiC;AAC7BlH,MAAAA,oBAAoB,GAAGvD,iBAAiB,CAAC8C,UAAD,EAAaJ,aAAb,EAA4BE,aAA5B,EAA2C+O,MAA3C,EAAmD,CAACE,mBAAD,IAAwBzP,MAA3E,EAAmF+P,cAAnF,CAAxC;AACH,KAFD,MAGK;AACD5O,MAAAA,oBAAoB,GAAG5D,sBAAsB,CAAC+C,aAAD,EAAgBE,aAAhB,EAA+B+O,MAA/B,EAAuC,CAACE,mBAAD,IAAwBzP,MAA/D,EAAuE+P,cAAvE,CAA7C;AACH;AACJ;;AACD,SAAO;AACH3O,IAAAA,UAAU,EAAED,oBADT;AAEHb,IAAAA,aAAa,EAAEA,aAFZ;AAGHE,IAAAA,aAAa,EAAEA,aAHZ;AAIHQ,IAAAA,OAAO,EAAEA,OAJN;AAKHN,IAAAA,UAAU,EAAEA;AALT,GAAP;AAOH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASY,wBAAT,CAAkCtC,OAAlC,EAA2C;AAC9C,MAAIqR,cAAc,GAAGrR,OAAO,CAACqR,cAAR,KAA2BvQ,SAA3B,GAAuCd,OAAO,CAACqR,cAA/C,GAAgE,IAArF;;AACA,MAAIA,cAAJ,EAAoB;AAChB,QAAIC,iBAAiB,GAAGtR,OAAO,CAACsR,iBAAhC;;AACA,QAAIA,iBAAiB,KAAKxQ,SAAtB,IAAmCwQ,iBAAiB,KAAK,IAA7D,EAAmE;AAC/D,aAAO7S,gBAAgB,EAAvB;AACH,KAFD,MAGK,IAAI6S,iBAAiB,KAAK,KAA1B,EAAiC;AAClC,aAAO3S,YAAP;AACH,KAFI,MAGA,IAAI,OAAO2S,iBAAP,KAA6B,QAAjC,EAA2C;AAC5C,aAAO9S,aAAa,CAAC8S,iBAAD,CAApB;AACH,KAFI,MAGA;AACD,aAAO3S,YAAP;AACH;AACJ,GAdD,MAeK;AACD,WAAOD,OAAP;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0H,eAAT,CAAyBd,SAAzB,EAAoC;AACvC,MAAIA,SAAS,CAACI,YAAV,IAA0BJ,SAAS,CAACK,YAAxC,EAAsD;AAClD,QAAI,CAAC9H,gBAAgB,CAACyH,SAAS,CAACI,YAAX,EAAyBJ,SAAS,CAACK,YAAnC,CAArB,EAAuE;AACnE,aAAO,KAAP;AACH;AACJ;;AACD,MAAIL,SAAS,CAACM,gBAAV,KAA+BN,SAAS,CAACO,gBAA7C,EAA+D;AAC3D,WAAO,KAAP;AACH;;AACD,MAAIP,SAAS,CAACS,cAAV,KAA6BT,SAAS,CAACa,cAA3C,EAA2D;AACvD,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASqF,iBAAT,CAA2ByC,UAA3B,EAAuCrG,IAAvC,EAA6CsG,QAA7C,EAAuD1L,UAAvD,EAAmEC,QAAnE,EAA6E;AACzE;AACA,MAAImK,QAAQ,GAAG3G,IAAI,CAAC4C,GAAL,CAAS,CAACpG,QAAV,CAAf;AACA,MAAIoK,QAAQ,GAAG5G,IAAI,CAAC6C,GAAL,CAAS,CAACrG,QAAV,CAAf;AACA,MAAI8K,IAAI,GAAGU,UAAU,CAAC,CAAD,CAAV,GAAgBrB,QAAhB,GAA2BqB,UAAU,CAAC,CAAD,CAAV,GAAgBpB,QAAtD;AACA,MAAIW,IAAI,GAAGS,UAAU,CAAC,CAAD,CAAV,GAAgBrB,QAAhB,GAA2BqB,UAAU,CAAC,CAAD,CAAV,GAAgBpB,QAAtD;AACAU,EAAAA,IAAI,IAAI,CAAC3F,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAV,GAAcsG,QAAQ,CAAC,CAAD,CAAvB,IAA8B1L,UAAtC;AACAgL,EAAAA,IAAI,IAAI,CAACU,QAAQ,CAAC,CAAD,CAAR,GAActG,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAzB,IAA8BpF,UAAtC,CAPyE,CAQzE;;AACAqK,EAAAA,QAAQ,GAAG,CAACA,QAAZ,CATyE,CASnD;;AACtB,MAAIgB,OAAO,GAAGN,IAAI,GAAGX,QAAP,GAAkBY,IAAI,GAAGX,QAAvC;AACA,MAAIiB,OAAO,GAAGN,IAAI,GAAGZ,QAAP,GAAkBW,IAAI,GAAGV,QAAvC;AACA,SAAO,CAACgB,OAAD,EAAUC,OAAV,CAAP;AACH;;AACD,eAAerO,IAAf","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, rotate as rotateCoordinate, } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { assign } from './obj.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone, } from './rotationconstraint.js';\nimport { createSnapToPower, createSnapToResolutions, } from './resolutionconstraint.js';\nimport { easeOut } from './easing.js';\nimport { equals } from './coordinate.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty, } from './extent.js';\nimport { inAndOut } from './easing.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    /**\n     * @param {ViewOptions} [opt_options] View options.\n     */\n    function View(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ViewOnSignature<void>}\n         */\n        _this.un;\n        var options = assign({}, opt_options);\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.hints_ = [0, 0];\n        /**\n         * @private\n         * @type {Array<Array<Animation>>}\n         */\n        _this.animations_ = [];\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.updateAnimationKey_;\n        /**\n         * @private\n         * @const\n         * @type {import(\"./proj/Projection.js\").default}\n         */\n        _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n        /**\n         * @private\n         * @type {import(\"./size.js\").Size}\n         */\n        _this.viewportSize_ = [100, 100];\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate|undefined}\n         */\n        _this.targetCenter_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.targetResolution_;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.targetRotation_;\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate}\n         */\n        _this.nextCenter_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.nextResolution_;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.nextRotation_;\n        /**\n         * @private\n         * @type {import(\"./coordinate.js\").Coordinate|undefined}\n         */\n        _this.cancelAnchor_ = undefined;\n        if (options.center) {\n            options.center = fromUserCoordinate(options.center, _this.projection_);\n        }\n        if (options.extent) {\n            options.extent = fromUserExtent(options.extent, _this.projection_);\n        }\n        _this.applyOptions_(options);\n        return _this;\n    }\n    /**\n     * Set up the view with the given options.\n     * @param {ViewOptions} options View options.\n     */\n    View.prototype.applyOptions_ = function (options) {\n        /**\n         * @type {Object<string, *>}\n         */\n        var properties = {};\n        var resolutionConstraintInfo = createResolutionConstraint(options);\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.minResolution_ = resolutionConstraintInfo.minResolution;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n        /**\n         * @private\n         * @type {Array<number>|undefined}\n         */\n        this.resolutions_ = options.resolutions;\n        /**\n         * @type {Array<number>|undefined}\n         * @private\n         */\n        this.padding_ = options.padding;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.minZoom_ = resolutionConstraintInfo.minZoom;\n        var centerConstraint = createCenterConstraint(options);\n        var resolutionConstraint = resolutionConstraintInfo.constraint;\n        var rotationConstraint = createRotationConstraint(options);\n        /**\n         * @private\n         * @type {Constraints}\n         */\n        this.constraints_ = {\n            center: centerConstraint,\n            resolution: resolutionConstraint,\n            rotation: rotationConstraint,\n        };\n        this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n        this.setCenterInternal(options.center !== undefined ? options.center : null);\n        if (options.resolution !== undefined) {\n            this.setResolution(options.resolution);\n        }\n        else if (options.zoom !== undefined) {\n            this.setZoom(options.zoom);\n        }\n        this.setProperties(properties);\n        /**\n         * @private\n         * @type {ViewOptions}\n         */\n        this.options_ = options;\n    };\n    Object.defineProperty(View.prototype, \"padding\", {\n        /**\n         * Padding (in css pixels).\n         * If the map viewport is partially covered with other content (overlays) along\n         * its edges, this setting allows to shift the center of the viewport away from that\n         * content. The order of the values in the array is top, right, bottom, left.\n         * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n         * @type {Array<number>|undefined}\n         * @api\n         */\n        get: function () {\n            return this.padding_;\n        },\n        set: function (padding) {\n            var oldPadding = this.padding_;\n            this.padding_ = padding;\n            var center = this.getCenter();\n            if (center) {\n                var newPadding = padding || [0, 0, 0, 0];\n                oldPadding = oldPadding || [0, 0, 0, 0];\n                var resolution = this.getResolution();\n                var offsetX = (resolution / 2) *\n                    (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n                var offsetY = (resolution / 2) *\n                    (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n                this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get an updated version of the view options used to construct the view.  The\n     * current resolution (or zoom), center, and rotation are applied to any stored\n     * options.  The provided options can be used to apply new min/max zoom or\n     * resolution limits.\n     * @param {ViewOptions} newOptions New options to be applied.\n     * @return {ViewOptions} New options updated with the current view state.\n     */\n    View.prototype.getUpdatedOptions_ = function (newOptions) {\n        var options = assign({}, this.options_);\n        // preserve resolution (or zoom)\n        if (options.resolution !== undefined) {\n            options.resolution = this.getResolution();\n        }\n        else {\n            options.zoom = this.getZoom();\n        }\n        // preserve center\n        options.center = this.getCenterInternal();\n        // preserve rotation\n        options.rotation = this.getRotation();\n        return assign({}, options, newOptions);\n    };\n    /**\n     * Animate the view.  The view's center, zoom (or resolution), and rotation\n     * can be animated for smooth transitions between view states.  For example,\n     * to animate the view to a new zoom level:\n     *\n     *     view.animate({zoom: view.getZoom() + 1});\n     *\n     * By default, the animation lasts one second and uses in-and-out easing.  You\n     * can customize this behavior by including `duration` (in milliseconds) and\n     * `easing` options (see {@link module:ol/easing}).\n     *\n     * To chain together multiple animations, call the method with multiple\n     * animation objects.  For example, to first zoom and then pan:\n     *\n     *     view.animate({zoom: 10}, {center: [0, 0]});\n     *\n     * If you provide a function as the last argument to the animate method, it\n     * will get called at the end of an animation series.  The callback will be\n     * called with `true` if the animation series completed on its own or `false`\n     * if it was cancelled.\n     *\n     * Animations are cancelled by user interactions (e.g. dragging the map) or by\n     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n     * (or another method that calls one of these).\n     *\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n     *     options.  Multiple animations can be run in series by passing multiple\n     *     options objects.  To run multiple animations in parallel, call the method\n     *     multiple times.  An optional callback can be provided as a final\n     *     argument.  The callback will be called with a boolean indicating whether\n     *     the animation completed without being cancelled.\n     * @api\n     */\n    View.prototype.animate = function (var_args) {\n        if (this.isDef() && !this.getAnimating()) {\n            this.resolveConstraints(0);\n        }\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i) {\n            var options = arguments[i];\n            if (options.center) {\n                options = assign({}, options);\n                options.center = fromUserCoordinate(options.center, this.getProjection());\n            }\n            if (options.anchor) {\n                options = assign({}, options);\n                options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n            }\n            args[i] = options;\n        }\n        this.animateInternal.apply(this, args);\n    };\n    /**\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n     */\n    View.prototype.animateInternal = function (var_args) {\n        var animationCount = arguments.length;\n        var callback;\n        if (animationCount > 1 &&\n            typeof arguments[animationCount - 1] === 'function') {\n            callback = arguments[animationCount - 1];\n            --animationCount;\n        }\n        var i = 0;\n        for (; i < animationCount && !this.isDef(); ++i) {\n            // if view properties are not yet set, shortcut to the final state\n            var state = arguments[i];\n            if (state.center) {\n                this.setCenterInternal(state.center);\n            }\n            if (state.zoom !== undefined) {\n                this.setZoom(state.zoom);\n            }\n            else if (state.resolution) {\n                this.setResolution(state.resolution);\n            }\n            if (state.rotation !== undefined) {\n                this.setRotation(state.rotation);\n            }\n        }\n        if (i === animationCount) {\n            if (callback) {\n                animationCallback(callback, true);\n            }\n            return;\n        }\n        var start = Date.now();\n        var center = this.targetCenter_.slice();\n        var resolution = this.targetResolution_;\n        var rotation = this.targetRotation_;\n        var series = [];\n        for (; i < animationCount; ++i) {\n            var options = /** @type {AnimationOptions} */ (arguments[i]);\n            var animation = {\n                start: start,\n                complete: false,\n                anchor: options.anchor,\n                duration: options.duration !== undefined ? options.duration : 1000,\n                easing: options.easing || inAndOut,\n                callback: callback,\n            };\n            if (options.center) {\n                animation.sourceCenter = center;\n                animation.targetCenter = options.center.slice();\n                center = animation.targetCenter;\n            }\n            if (options.zoom !== undefined) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = this.getResolutionForZoom(options.zoom);\n                resolution = animation.targetResolution;\n            }\n            else if (options.resolution) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = options.resolution;\n                resolution = animation.targetResolution;\n            }\n            if (options.rotation !== undefined) {\n                animation.sourceRotation = rotation;\n                var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n                animation.targetRotation = rotation + delta;\n                rotation = animation.targetRotation;\n            }\n            // check if animation is a no-op\n            if (isNoopAnimation(animation)) {\n                animation.complete = true;\n                // we still push it onto the series for callback handling\n            }\n            else {\n                start += animation.duration;\n            }\n            series.push(animation);\n        }\n        this.animations_.push(series);\n        this.setHint(ViewHint.ANIMATING, 1);\n        this.updateAnimations_();\n    };\n    /**\n     * Determine if the view is being animated.\n     * @return {boolean} The view is being animated.\n     * @api\n     */\n    View.prototype.getAnimating = function () {\n        return this.hints_[ViewHint.ANIMATING] > 0;\n    };\n    /**\n     * Determine if the user is interacting with the view, such as panning or zooming.\n     * @return {boolean} The view is being interacted with.\n     * @api\n     */\n    View.prototype.getInteracting = function () {\n        return this.hints_[ViewHint.INTERACTING] > 0;\n    };\n    /**\n     * Cancel any ongoing animations.\n     * @api\n     */\n    View.prototype.cancelAnimations = function () {\n        this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n        var anchor;\n        for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n            var series = this.animations_[i];\n            if (series[0].callback) {\n                animationCallback(series[0].callback, false);\n            }\n            if (!anchor) {\n                for (var j = 0, jj = series.length; j < jj; ++j) {\n                    var animation = series[j];\n                    if (!animation.complete) {\n                        anchor = animation.anchor;\n                        break;\n                    }\n                }\n            }\n        }\n        this.animations_.length = 0;\n        this.cancelAnchor_ = anchor;\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n    };\n    /**\n     * Update all animations.\n     */\n    View.prototype.updateAnimations_ = function () {\n        if (this.updateAnimationKey_ !== undefined) {\n            cancelAnimationFrame(this.updateAnimationKey_);\n            this.updateAnimationKey_ = undefined;\n        }\n        if (!this.getAnimating()) {\n            return;\n        }\n        var now = Date.now();\n        var more = false;\n        for (var i = this.animations_.length - 1; i >= 0; --i) {\n            var series = this.animations_[i];\n            var seriesComplete = true;\n            for (var j = 0, jj = series.length; j < jj; ++j) {\n                var animation = series[j];\n                if (animation.complete) {\n                    continue;\n                }\n                var elapsed = now - animation.start;\n                var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n                if (fraction >= 1) {\n                    animation.complete = true;\n                    fraction = 1;\n                }\n                else {\n                    seriesComplete = false;\n                }\n                var progress = animation.easing(fraction);\n                if (animation.sourceCenter) {\n                    var x0 = animation.sourceCenter[0];\n                    var y0 = animation.sourceCenter[1];\n                    var x1 = animation.targetCenter[0];\n                    var y1 = animation.targetCenter[1];\n                    this.nextCenter_ = animation.targetCenter;\n                    var x = x0 + progress * (x1 - x0);\n                    var y = y0 + progress * (y1 - y0);\n                    this.targetCenter_ = [x, y];\n                }\n                if (animation.sourceResolution && animation.targetResolution) {\n                    var resolution = progress === 1\n                        ? animation.targetResolution\n                        : animation.sourceResolution +\n                            progress *\n                                (animation.targetResolution - animation.sourceResolution);\n                    if (animation.anchor) {\n                        var size = this.getViewportSize_(this.getRotation());\n                        var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n                    }\n                    this.nextResolution_ = animation.targetResolution;\n                    this.targetResolution_ = resolution;\n                    this.applyTargetState_(true);\n                }\n                if (animation.sourceRotation !== undefined &&\n                    animation.targetRotation !== undefined) {\n                    var rotation = progress === 1\n                        ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                            Math.PI\n                        : animation.sourceRotation +\n                            progress *\n                                (animation.targetRotation - animation.sourceRotation);\n                    if (animation.anchor) {\n                        var constrainedRotation = this.constraints_.rotation(rotation, true);\n                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n                    }\n                    this.nextRotation_ = animation.targetRotation;\n                    this.targetRotation_ = rotation;\n                }\n                this.applyTargetState_(true);\n                more = true;\n                if (!animation.complete) {\n                    break;\n                }\n            }\n            if (seriesComplete) {\n                this.animations_[i] = null;\n                this.setHint(ViewHint.ANIMATING, -1);\n                this.nextCenter_ = null;\n                this.nextResolution_ = NaN;\n                this.nextRotation_ = NaN;\n                var callback = series[0].callback;\n                if (callback) {\n                    animationCallback(callback, true);\n                }\n            }\n        }\n        // prune completed series\n        this.animations_ = this.animations_.filter(Boolean);\n        if (more && this.updateAnimationKey_ === undefined) {\n            this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n        }\n    };\n    /**\n     * @param {number} rotation Target rotation.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n     */\n    View.prototype.calculateCenterRotate = function (rotation, anchor) {\n        var center;\n        var currentCenter = this.getCenterInternal();\n        if (currentCenter !== undefined) {\n            center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n            rotateCoordinate(center, rotation - this.getRotation());\n            addCoordinate(center, anchor);\n        }\n        return center;\n    };\n    /**\n     * @param {number} resolution Target resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n     */\n    View.prototype.calculateCenterZoom = function (resolution, anchor) {\n        var center;\n        var currentCenter = this.getCenterInternal();\n        var currentResolution = this.getResolution();\n        if (currentCenter !== undefined && currentResolution !== undefined) {\n            var x = anchor[0] -\n                (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n            var y = anchor[1] -\n                (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n            center = [x, y];\n        }\n        return center;\n    };\n    /**\n     * Returns the current viewport size.\n     * @private\n     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n     */\n    View.prototype.getViewportSize_ = function (opt_rotation) {\n        var size = this.viewportSize_;\n        if (opt_rotation) {\n            var w = size[0];\n            var h = size[1];\n            return [\n                Math.abs(w * Math.cos(opt_rotation)) +\n                    Math.abs(h * Math.sin(opt_rotation)),\n                Math.abs(w * Math.sin(opt_rotation)) +\n                    Math.abs(h * Math.cos(opt_rotation)),\n            ];\n        }\n        else {\n            return size;\n        }\n    };\n    /**\n     * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n     * to avoid performance hit and layout reflow.\n     * This should be done on map size change.\n     * Note: the constraints are not resolved during an animation to avoid stopping it\n     * @param {import(\"./size.js\").Size} [opt_size] Viewport size; if undefined, [100, 100] is assumed\n     */\n    View.prototype.setViewportSize = function (opt_size) {\n        this.viewportSize_ = Array.isArray(opt_size)\n            ? opt_size.slice()\n            : [100, 100];\n        if (!this.getAnimating()) {\n            this.resolveConstraints(0);\n        }\n    };\n    /**\n     * Get the view center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.getCenter = function () {\n        var center = this.getCenterInternal();\n        if (!center) {\n            return center;\n        }\n        return toUserCoordinate(center, this.getProjection());\n    };\n    /**\n     * Get the view center without transforming to user projection.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     */\n    View.prototype.getCenterInternal = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));\n    };\n    /**\n     * @return {Constraints} Constraints.\n     */\n    View.prototype.getConstraints = function () {\n        return this.constraints_;\n    };\n    /**\n     * @return {boolean} Resolution constraint is set\n     */\n    View.prototype.getConstrainResolution = function () {\n        return this.options_.constrainResolution;\n    };\n    /**\n     * @param {Array<number>} [opt_hints] Destination array.\n     * @return {Array<number>} Hint.\n     */\n    View.prototype.getHints = function (opt_hints) {\n        if (opt_hints !== undefined) {\n            opt_hints[0] = this.hints_[0];\n            opt_hints[1] = this.hints_[1];\n            return opt_hints;\n        }\n        else {\n            return this.hints_.slice();\n        }\n    };\n    /**\n     * Calculate the extent for the current view state and the passed size.\n     * The size is the pixel dimensions of the box into which the calculated extent\n     * should fit. In most cases you want to get the extent of the entire map,\n     * that is `map.getSize()`.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided, the size\n     * of the map that uses this view will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     * @api\n     */\n    View.prototype.calculateExtent = function (opt_size) {\n        var extent = this.calculateExtentInternal(opt_size);\n        return toUserExtent(extent, this.getProjection());\n    };\n    /**\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size. If not provided,\n     * the map's last known viewport size will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     */\n    View.prototype.calculateExtentInternal = function (opt_size) {\n        var size = opt_size || this.getViewportSizeMinusPadding_();\n        var center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n        assert(center, 1); // The view center is not defined\n        var resolution = /** @type {!number} */ (this.getResolution());\n        assert(resolution !== undefined, 2); // The view resolution is not defined\n        var rotation = /** @type {!number} */ (this.getRotation());\n        assert(rotation !== undefined, 3); // The view rotation is not defined\n        return getForViewAndSize(center, resolution, rotation, size);\n    };\n    /**\n     * Get the maximum resolution of the view.\n     * @return {number} The maximum resolution of the view.\n     * @api\n     */\n    View.prototype.getMaxResolution = function () {\n        return this.maxResolution_;\n    };\n    /**\n     * Get the minimum resolution of the view.\n     * @return {number} The minimum resolution of the view.\n     * @api\n     */\n    View.prototype.getMinResolution = function () {\n        return this.minResolution_;\n    };\n    /**\n     * Get the maximum zoom level for the view.\n     * @return {number} The maximum zoom level.\n     * @api\n     */\n    View.prototype.getMaxZoom = function () {\n        return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n    };\n    /**\n     * Set a new maximum zoom level for the view.\n     * @param {number} zoom The maximum zoom level.\n     * @api\n     */\n    View.prototype.setMaxZoom = function (zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));\n    };\n    /**\n     * Get the minimum zoom level for the view.\n     * @return {number} The minimum zoom level.\n     * @api\n     */\n    View.prototype.getMinZoom = function () {\n        return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n    };\n    /**\n     * Set a new minimum zoom level for the view.\n     * @param {number} zoom The minimum zoom level.\n     * @api\n     */\n    View.prototype.setMinZoom = function (zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));\n    };\n    /**\n     * Set whether the view should allow intermediary zoom levels.\n     * @param {boolean} enabled Whether the resolution is constrained.\n     * @api\n     */\n    View.prototype.setConstrainResolution = function (enabled) {\n        this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));\n    };\n    /**\n     * Get the view projection.\n     * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n     * @api\n     */\n    View.prototype.getProjection = function () {\n        return this.projection_;\n    };\n    /**\n     * Get the view resolution.\n     * @return {number|undefined} The resolution of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.getResolution = function () {\n        return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n    };\n    /**\n     * Get the resolutions for the view. This returns the array of resolutions\n     * passed to the constructor of the View, or undefined if none were given.\n     * @return {Array<number>|undefined} The resolutions of the view.\n     * @api\n     */\n    View.prototype.getResolutions = function () {\n        return this.resolutions_;\n    };\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     * @api\n     */\n    View.prototype.getResolutionForExtent = function (extent, opt_size) {\n        return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);\n    };\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [opt_size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     */\n    View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {\n        var size = opt_size || this.getViewportSizeMinusPadding_();\n        var xResolution = getWidth(extent) / size[0];\n        var yResolution = getHeight(extent) / size[1];\n        return Math.max(xResolution, yResolution);\n    };\n    /**\n     * Return a function that returns a value between 0 and 1 for a\n     * resolution. Exponential scaling is assumed.\n     * @param {number} [opt_power] Power.\n     * @return {function(number): number} Resolution for value function.\n     */\n    View.prototype.getResolutionForValueFunction = function (opt_power) {\n        var power = opt_power || 2;\n        var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        var minResolution = this.minResolution_;\n        var max = Math.log(maxResolution / minResolution) / Math.log(power);\n        return (\n        /**\n         * @param {number} value Value.\n         * @return {number} Resolution.\n         */\n        function (value) {\n            var resolution = maxResolution / Math.pow(power, value * max);\n            return resolution;\n        });\n    };\n    /**\n     * Get the view rotation.\n     * @return {number} The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n    View.prototype.getRotation = function () {\n        return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n    };\n    /**\n     * Return a function that returns a resolution for a value between\n     * 0 and 1. Exponential scaling is assumed.\n     * @param {number} [opt_power] Power.\n     * @return {function(number): number} Value for resolution function.\n     */\n    View.prototype.getValueForResolutionFunction = function (opt_power) {\n        var logPower = Math.log(opt_power || 2);\n        var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        var minResolution = this.minResolution_;\n        var max = Math.log(maxResolution / minResolution) / logPower;\n        return (\n        /**\n         * @param {number} resolution Resolution.\n         * @return {number} Value.\n         */\n        function (resolution) {\n            var value = Math.log(maxResolution / resolution) / logPower / max;\n            return value;\n        });\n    };\n    /**\n     * Returns the size of the viewport minus padding.\n     * @private\n     * @param {number} [opt_rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n     */\n    View.prototype.getViewportSizeMinusPadding_ = function (opt_rotation) {\n        var size = this.getViewportSize_(opt_rotation);\n        var padding = this.padding_;\n        if (padding) {\n            size = [\n                size[0] - padding[1] - padding[3],\n                size[1] - padding[0] - padding[2],\n            ];\n        }\n        return size;\n    };\n    /**\n     * @return {State} View state.\n     */\n    View.prototype.getState = function () {\n        var projection = this.getProjection();\n        var resolution = this.getResolution();\n        var rotation = this.getRotation();\n        var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n        var padding = this.padding_;\n        if (padding) {\n            var reducedSize = this.getViewportSizeMinusPadding_();\n            center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n        }\n        return {\n            center: center.slice(0),\n            projection: projection !== undefined ? projection : null,\n            resolution: resolution,\n            nextCenter: this.nextCenter_,\n            nextResolution: this.nextResolution_,\n            nextRotation: this.nextRotation_,\n            rotation: rotation,\n            zoom: this.getZoom(),\n        };\n    };\n    /**\n     * Get the current zoom level. This method may return non-integer zoom levels\n     * if the view does not constrain the resolution, or if an interaction or\n     * animation is underway.\n     * @return {number|undefined} Zoom.\n     * @api\n     */\n    View.prototype.getZoom = function () {\n        var zoom;\n        var resolution = this.getResolution();\n        if (resolution !== undefined) {\n            zoom = this.getZoomForResolution(resolution);\n        }\n        return zoom;\n    };\n    /**\n     * Get the zoom level for a resolution.\n     * @param {number} resolution The resolution.\n     * @return {number|undefined} The zoom level for the provided resolution.\n     * @api\n     */\n    View.prototype.getZoomForResolution = function (resolution) {\n        var offset = this.minZoom_ || 0;\n        var max, zoomFactor;\n        if (this.resolutions_) {\n            var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n            offset = nearest;\n            max = this.resolutions_[nearest];\n            if (nearest == this.resolutions_.length - 1) {\n                zoomFactor = 2;\n            }\n            else {\n                zoomFactor = max / this.resolutions_[nearest + 1];\n            }\n        }\n        else {\n            max = this.maxResolution_;\n            zoomFactor = this.zoomFactor_;\n        }\n        return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    };\n    /**\n     * Get the resolution for a zoom level.\n     * @param {number} zoom Zoom level.\n     * @return {number} The view resolution for the provided zoom level.\n     * @api\n     */\n    View.prototype.getResolutionForZoom = function (zoom) {\n        if (this.resolutions_) {\n            if (this.resolutions_.length <= 1) {\n                return 0;\n            }\n            var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n            var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n            return (this.resolutions_[baseLevel] /\n                Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1)));\n        }\n        else {\n            return (this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_));\n        }\n    };\n    /**\n     * Fit the given geometry or extent based on the given map size and border.\n     * The size is pixel dimensions of the box to fit the extent into.\n     * In most cases you will want to use the map size, that is `map.getSize()`.\n     * Takes care of the map angle.\n     * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n     *     extent to fit the view to.\n     * @param {FitOptions} [opt_options] Options.\n     * @api\n     */\n    View.prototype.fit = function (geometryOrExtent, opt_options) {\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        var geometry;\n        assert(Array.isArray(geometryOrExtent) ||\n            typeof ( /** @type {?} */(geometryOrExtent).getSimplifiedGeometry) ===\n                'function', 24); // Invalid extent or geometry provided as `geometry`\n        if (Array.isArray(geometryOrExtent)) {\n            assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n            var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n            geometry = polygonFromExtent(extent);\n        }\n        else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n            var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n            geometry = polygonFromExtent(extent);\n            geometry.rotate(this.getRotation(), getCenter(extent));\n        }\n        else {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometryOrExtent\n                    .clone()\n                    .transform(userProjection, this.getProjection()));\n            }\n            else {\n                geometry = geometryOrExtent;\n            }\n        }\n        this.fitInternal(geometry, opt_options);\n    };\n    /**\n     * Calculate rotated extent\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n     */\n    View.prototype.rotatedExtentForGeometry = function (geometry) {\n        var rotation = this.getRotation();\n        var cosAngle = Math.cos(rotation);\n        var sinAngle = Math.sin(-rotation);\n        var coords = geometry.getFlatCoordinates();\n        var stride = geometry.getStride();\n        var minRotX = +Infinity;\n        var minRotY = +Infinity;\n        var maxRotX = -Infinity;\n        var maxRotY = -Infinity;\n        for (var i = 0, ii = coords.length; i < ii; i += stride) {\n            var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n            var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n            minRotX = Math.min(minRotX, rotX);\n            minRotY = Math.min(minRotY, rotY);\n            maxRotX = Math.max(maxRotX, rotX);\n            maxRotY = Math.max(maxRotY, rotY);\n        }\n        return [minRotX, minRotY, maxRotX, maxRotY];\n    };\n    /**\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @param {FitOptions} [opt_options] Options.\n     */\n    View.prototype.fitInternal = function (geometry, opt_options) {\n        var options = opt_options || {};\n        var size = options.size;\n        if (!size) {\n            size = this.getViewportSizeMinusPadding_();\n        }\n        var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n        var nearest = options.nearest !== undefined ? options.nearest : false;\n        var minResolution;\n        if (options.minResolution !== undefined) {\n            minResolution = options.minResolution;\n        }\n        else if (options.maxZoom !== undefined) {\n            minResolution = this.getResolutionForZoom(options.maxZoom);\n        }\n        else {\n            minResolution = 0;\n        }\n        var rotatedExtent = this.rotatedExtentForGeometry(geometry);\n        // calculate resolution\n        var resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2],\n        ]);\n        resolution = isNaN(resolution)\n            ? minResolution\n            : Math.max(resolution, minResolution);\n        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n        // calculate center\n        var rotation = this.getRotation();\n        var sinAngle = Math.sin(rotation);\n        var cosAngle = Math.cos(rotation);\n        var centerRot = getCenter(rotatedExtent);\n        centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n        centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n        var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n        var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n        var center = this.getConstrainedCenter([centerX, centerY], resolution);\n        var callback = options.callback ? options.callback : VOID;\n        if (options.duration !== undefined) {\n            this.animateInternal({\n                resolution: resolution,\n                center: center,\n                duration: options.duration,\n                easing: options.easing,\n            }, callback);\n        }\n        else {\n            this.targetResolution_ = resolution;\n            this.targetCenter_ = center;\n            this.applyTargetState_(false, true);\n            animationCallback(callback, true);\n        }\n    };\n    /**\n     * Center on coordinate and view position.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     * @api\n     */\n    View.prototype.centerOn = function (coordinate, size, position) {\n        this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n    };\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     */\n    View.prototype.centerOnInternal = function (coordinate, size, position) {\n        this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    };\n    /**\n     * Calculates the shift between map and viewport center.\n     * @param {import(\"./coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {import(\"./size.js\").Size} size Size.\n     * @return {Array<number>|undefined} Center shift.\n     */\n    View.prototype.calculateCenterShift = function (center, resolution, rotation, size) {\n        var centerShift;\n        var padding = this.padding_;\n        if (padding && center) {\n            var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n            var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n            centerShift = [\n                center[0] - shiftedCenter[0],\n                center[1] - shiftedCenter[1],\n            ];\n        }\n        return centerShift;\n    };\n    /**\n     * @return {boolean} Is defined.\n     */\n    View.prototype.isDef = function () {\n        return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    };\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     * @api\n     */\n    View.prototype.adjustCenter = function (deltaCoordinates) {\n        var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n        this.setCenter([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1],\n        ]);\n    };\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     */\n    View.prototype.adjustCenterInternal = function (deltaCoordinates) {\n        var center = this.targetCenter_;\n        this.setCenterInternal([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1],\n        ]);\n    };\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.adjustResolution = function (ratio, opt_anchor) {\n        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n        this.adjustResolutionInternal(ratio, anchor);\n    };\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {\n        var isMoving = this.getAnimating() || this.getInteracting();\n        var size = this.getViewportSize_(this.getRotation());\n        var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n        if (opt_anchor) {\n            this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n        }\n        this.targetResolution_ *= ratio;\n        this.applyTargetState_();\n    };\n    /**\n     * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom level.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.adjustZoom = function (delta, opt_anchor) {\n        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n    };\n    /**\n     * Adds a value to the view rotation, optionally using an anchor. Any rotation\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n     * @api\n     */\n    View.prototype.adjustRotation = function (delta, opt_anchor) {\n        if (opt_anchor) {\n            opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n        }\n        this.adjustRotationInternal(delta, opt_anchor);\n    };\n    /**\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The rotation center.\n     */\n    View.prototype.adjustRotationInternal = function (delta, opt_anchor) {\n        var isMoving = this.getAnimating() || this.getInteracting();\n        var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n        if (opt_anchor) {\n            this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n        }\n        this.targetRotation_ += delta;\n        this.applyTargetState_();\n    };\n    /**\n     * Set the center of the current view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.setCenter = function (center) {\n        this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));\n    };\n    /**\n     * Set the center using the view projection (not the user projection).\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     */\n    View.prototype.setCenterInternal = function (center) {\n        this.targetCenter_ = center;\n        this.applyTargetState_();\n    };\n    /**\n     * @param {import(\"./ViewHint.js\").default} hint Hint.\n     * @param {number} delta Delta.\n     * @return {number} New value.\n     */\n    View.prototype.setHint = function (hint, delta) {\n        this.hints_[hint] += delta;\n        this.changed();\n        return this.hints_[hint];\n    };\n    /**\n     * Set the resolution for this view. Any resolution constraint will apply.\n     * @param {number|undefined} resolution The resolution of the view.\n     * @observable\n     * @api\n     */\n    View.prototype.setResolution = function (resolution) {\n        this.targetResolution_ = resolution;\n        this.applyTargetState_();\n    };\n    /**\n     * Set the rotation for this view. Any rotation constraint will apply.\n     * @param {number} rotation The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n    View.prototype.setRotation = function (rotation) {\n        this.targetRotation_ = rotation;\n        this.applyTargetState_();\n    };\n    /**\n     * Zoom to a specific zoom level. Any resolution constrain will apply.\n     * @param {number} zoom Zoom level.\n     * @api\n     */\n    View.prototype.setZoom = function (zoom) {\n        this.setResolution(this.getResolutionForZoom(zoom));\n    };\n    /**\n     * Recompute rotation/resolution/center based on target values.\n     * Note: we have to compute rotation first, then resolution and center considering that\n     * parameters can influence one another in case a view extent constraint is present.\n     * @param {boolean} [opt_doNotCancelAnims] Do not cancel animations.\n     * @param {boolean} [opt_forceMoving] Apply constraints as if the view is moving.\n     * @private\n     */\n    View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {\n        var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;\n        // compute rotation\n        var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n        var size = this.getViewportSize_(newRotation);\n        var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (this.get(ViewProperty.ROTATION) !== newRotation) {\n            this.set(ViewProperty.ROTATION, newRotation);\n        }\n        if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n            this.set(ViewProperty.RESOLUTION, newResolution);\n        }\n        if (!this.get(ViewProperty.CENTER) ||\n            !equals(this.get(ViewProperty.CENTER), newCenter)) {\n            this.set(ViewProperty.CENTER, newCenter);\n        }\n        if (this.getAnimating() && !opt_doNotCancelAnims) {\n            this.cancelAnimations();\n        }\n        this.cancelAnchor_ = undefined;\n    };\n    /**\n     * If any constraints need to be applied, an animation will be triggered.\n     * This is typically done on interaction end.\n     * Note: calling this with a duration of 0 will apply the constrained values straight away,\n     * without animation.\n     * @param {number} [opt_duration] The animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        var duration = opt_duration !== undefined ? opt_duration : 200;\n        var direction = opt_resolutionDirection || 0;\n        var newRotation = this.constraints_.rotation(this.targetRotation_);\n        var size = this.getViewportSize_(newRotation);\n        var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (duration === 0 && !this.cancelAnchor_) {\n            this.targetResolution_ = newResolution;\n            this.targetRotation_ = newRotation;\n            this.targetCenter_ = newCenter;\n            this.applyTargetState_();\n            return;\n        }\n        var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n        this.cancelAnchor_ = undefined;\n        if (this.getResolution() !== newResolution ||\n            this.getRotation() !== newRotation ||\n            !this.getCenterInternal() ||\n            !equals(this.getCenterInternal(), newCenter)) {\n            if (this.getAnimating()) {\n                this.cancelAnimations();\n            }\n            this.animateInternal({\n                rotation: newRotation,\n                center: newCenter,\n                resolution: newResolution,\n                duration: duration,\n                easing: easeOut,\n                anchor: anchor,\n            });\n        }\n    };\n    /**\n     * Notify the View that an interaction has started.\n     * The view state will be resolved to a stable one if needed\n     * (depending on its constraints).\n     * @api\n     */\n    View.prototype.beginInteraction = function () {\n        this.resolveConstraints(0);\n        this.setHint(ViewHint.INTERACTING, 1);\n    };\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [opt_duration] Animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     * @api\n     */\n    View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n        this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n    };\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [opt_duration] Animation duration in ms.\n     * @param {number} [opt_resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [opt_anchor] The origin of the transformation.\n     */\n    View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n        this.setHint(ViewHint.INTERACTING, -1);\n        this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n    };\n    /**\n     * Get a valid position for the view center according to the current constraints.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n     * @param {number} [opt_targetResolution] Target resolution. If not supplied, the current one will be used.\n     * This is useful to guess a valid center position at a different zoom level.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n     */\n    View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {\n        var size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);\n    };\n    /**\n     * Get a valid zoom level according to the current view constraints.\n     * @param {number|undefined} targetZoom Target zoom.\n     * @param {number} [opt_direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid zoom level.\n     */\n    View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {\n        var targetRes = this.getResolutionForZoom(targetZoom);\n        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));\n    };\n    /**\n     * Get a valid resolution according to the current view constraints.\n     * @param {number|undefined} targetResolution Target resolution.\n     * @param {number} [opt_direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid resolution.\n     */\n    View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {\n        var direction = opt_direction || 0;\n        var size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.resolution(targetResolution, direction, size);\n    };\n    return View;\n}(BaseObject));\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n    setTimeout(function () {\n        callback(returnValue);\n    }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n    if (options.extent !== undefined) {\n        var smooth = options.smoothExtentConstraint !== undefined\n            ? options.smoothExtentConstraint\n            : true;\n        return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n    }\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    if (options.multiWorld !== true && projection.isGlobal()) {\n        var extent = projection.getExtent().slice();\n        extent[0] = -Infinity;\n        extent[2] = Infinity;\n        return createExtent(extent, false, false);\n    }\n    return centerNone;\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n    var resolutionConstraint;\n    var maxResolution;\n    var minResolution;\n    // TODO: move these to be ol constants\n    // see https://github.com/openlayers/openlayers/issues/2076\n    var defaultMaxZoom = 28;\n    var defaultZoomFactor = 2;\n    var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n    var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n    var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n    var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n    var smooth = options.smoothResolutionConstraint !== undefined\n        ? options.smoothResolutionConstraint\n        : true;\n    var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var projExtent = projection.getExtent();\n    var constrainOnlyCenter = options.constrainOnlyCenter;\n    var extent = options.extent;\n    if (!multiWorld && !extent && projection.isGlobal()) {\n        constrainOnlyCenter = false;\n        extent = projExtent;\n    }\n    if (options.resolutions !== undefined) {\n        var resolutions = options.resolutions;\n        maxResolution = resolutions[minZoom];\n        minResolution =\n            resolutions[maxZoom] !== undefined\n                ? resolutions[maxZoom]\n                : resolutions[resolutions.length - 1];\n        if (options.constrainResolution) {\n            resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n        else {\n            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n    }\n    else {\n        // calculate the default min and max resolution\n        var size = !projExtent\n            ? // use an extent that can fit the whole world if need be\n                (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()\n            : Math.max(getWidth(projExtent), getHeight(projExtent));\n        var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n        var defaultMinResolution = defaultMaxResolution /\n            Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n        // user provided maxResolution takes precedence\n        maxResolution = options.maxResolution;\n        if (maxResolution !== undefined) {\n            minZoom = 0;\n        }\n        else {\n            maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n        }\n        // user provided minResolution takes precedence\n        minResolution = options.minResolution;\n        if (minResolution === undefined) {\n            if (options.maxZoom !== undefined) {\n                if (options.maxResolution !== undefined) {\n                    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n                }\n                else {\n                    minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n                }\n            }\n            else {\n                minResolution = defaultMinResolution;\n            }\n        }\n        // given discrete zoom levels, minResolution may be different than provided\n        maxZoom =\n            minZoom +\n                Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n        if (options.constrainResolution) {\n            resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n        else {\n            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        }\n    }\n    return {\n        constraint: resolutionConstraint,\n        maxResolution: maxResolution,\n        minResolution: minResolution,\n        minZoom: minZoom,\n        zoomFactor: zoomFactor,\n    };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n    var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n    if (enableRotation) {\n        var constrainRotation = options.constrainRotation;\n        if (constrainRotation === undefined || constrainRotation === true) {\n            return createSnapToZero();\n        }\n        else if (constrainRotation === false) {\n            return rotationNone;\n        }\n        else if (typeof constrainRotation === 'number') {\n            return createSnapToN(constrainRotation);\n        }\n        else {\n            return rotationNone;\n        }\n    }\n    else {\n        return disable;\n    }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n    if (animation.sourceCenter && animation.targetCenter) {\n        if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n            return false;\n        }\n    }\n    if (animation.sourceResolution !== animation.targetResolution) {\n        return false;\n    }\n    if (animation.sourceRotation !== animation.targetRotation) {\n        return false;\n    }\n    return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n    // calculate rotated position\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    return [centerX, centerY];\n}\nexport default View;\n"]},"metadata":{},"sourceType":"module"}