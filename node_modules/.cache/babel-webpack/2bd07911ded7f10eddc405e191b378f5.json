{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Tile\n */\n\n\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\n\nvar TileSource = function (_super) {\n  __extends(TileSource, _super);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n\n\n  function TileSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX\n    }) || this;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @protected\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n    var tileGrid = options.tileGrid;\n\n    if (tileGrid) {\n      toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n    }\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n\n\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.key_ = options.key || '';\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n\n    _this.tileOptions = {\n      transition: options.transition\n    };\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n\n\n  TileSource.prototype.canExpireCache = function () {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n\n\n  TileSource.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n\n\n  TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (!tileCache) {\n      return false;\n    }\n\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n\n\n  TileSource.prototype.getGutterForProjection = function (projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.getKey = function () {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n\n\n  TileSource.prototype.setKey = function (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n\n\n  TileSource.prototype.getOpaque = function (projection) {\n    return this.opaque_;\n  };\n  /**\n   * @return {Array<number>} Resolutions.\n   */\n\n\n  TileSource.prototype.getResolutions = function () {\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n\n\n  TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @api\n   */\n\n\n  TileSource.prototype.getTileGrid = function () {\n    return this.tileGrid;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n\n\n  TileSource.prototype.getTileGridForProjection = function (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n\n\n  TileSource.prototype.getTileCacheForProjection = function (projection) {\n    assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n\n\n  TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n\n\n  TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n\n\n  TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n\n\n  TileSource.prototype.clear = function () {\n    this.tileCache.clear();\n  };\n\n  TileSource.prototype.refresh = function () {\n    this.clear();\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n    var tileCache = this.getTileCacheForProjection(projection);\n\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  TileSource.prototype.useTile = function (z, x, y, projection) {};\n\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\n\n\nvar TileSourceEvent = function (_super) {\n  __extends(TileSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n\n\n  function TileSourceEvent(type, tile) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n\n\n    _this.tile = tile;\n    return _this;\n  }\n\n  return TileSourceEvent;\n}(Event);\n\nexport { TileSourceEvent };\nexport default TileSource;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/Tile.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Event","Source","TileCache","TileState","abstract","assert","equivalent","getKeyZXY","withinExtentAndZ","getForProjection","getTileGridForProjection","wrapX","scale","scaleSize","toSize","TileSource","_super","options","_this","attributions","attributionsCollapsible","projection","state","on","once","un","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileSize","getTileSize","getMinZoom","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","zDirection","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutterForProjection","getKey","setKey","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","getProjection","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","tileCoord","opt_projection","getWrapX","isGlobal","clear","refresh","updateCacheSize","tileCount","highWaterMark","useTile","TileSourceEvent","type"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX, } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./State.js\").default} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /** @class */ (function (_super) {\n    __extends(TileSource, _super);\n    /**\n     * @param {Options} options SourceTile source options.\n     */\n    function TileSource(options) {\n        var _this = _super.call(this, {\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            projection: options.projection,\n            state: options.state,\n            wrapX: options.wrapX,\n        }) || this;\n        /***\n         * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {TileSourceOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.tilePixelRatio_ =\n            options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n        /**\n         * @protected\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n        var tileSize = [256, 256];\n        var tileGrid = options.tileGrid;\n        if (tileGrid) {\n            toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);\n        }\n        /**\n         * @protected\n         * @type {import(\"../TileCache.js\").default}\n         */\n        _this.tileCache = new TileCache(options.cacheSize || 0);\n        /**\n         * @protected\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.tmpSize = [0, 0];\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.key_ = options.key || '';\n        /**\n         * @protected\n         * @type {import(\"../Tile.js\").Options}\n         */\n        _this.tileOptions = { transition: options.transition };\n        /**\n         * zDirection hint, read by the renderer. Indicates which resolution should be used\n         * by a renderer if the views resolution does not match any resolution of the tile source.\n         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n         * will be used. If -1, the nearest higher resolution will be used.\n         * @type {number|import(\"../array.js\").NearestDirectionFunction}\n         */\n        _this.zDirection = options.zDirection ? options.zDirection : 0;\n        return _this;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    TileSource.prototype.canExpireCache = function () {\n        return this.tileCache.canExpireCache();\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n    TileSource.prototype.expireCache = function (projection, usedTiles) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (tileCache) {\n            tileCache.expireCache(usedTiles);\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {number} z Zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n     *     loaded tile.  If the callback returns `false`, the tile will not be\n     *     considered loaded.\n     * @return {boolean} The tile range is fully covered with loaded tiles.\n     */\n    TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (!tileCache) {\n            return false;\n        }\n        var covered = true;\n        var tile, tileCoordKey, loaded;\n        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                tileCoordKey = getKeyZXY(z, x, y);\n                loaded = false;\n                if (tileCache.containsKey(tileCoordKey)) {\n                    tile = /** @type {!import(\"../Tile.js\").default} */ (tileCache.get(tileCoordKey));\n                    loaded = tile.getState() === TileState.LOADED;\n                    if (loaded) {\n                        loaded = callback(tile) !== false;\n                    }\n                }\n                if (!loaded) {\n                    covered = false;\n                }\n            }\n        }\n        return covered;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n    TileSource.prototype.getGutterForProjection = function (projection) {\n        return 0;\n    };\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     * @protected\n     */\n    TileSource.prototype.getKey = function () {\n        return this.key_;\n    };\n    /**\n     * Set the value to be used as the key for all tiles in the source.\n     * @param {string} key The key for tiles.\n     * @protected\n     */\n    TileSource.prototype.setKey = function (key) {\n        if (this.key_ !== key) {\n            this.key_ = key;\n            this.changed();\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n    TileSource.prototype.getOpaque = function (projection) {\n        return this.opaque_;\n    };\n    /**\n     * @return {Array<number>} Resolutions.\n     */\n    TileSource.prototype.getResolutions = function () {\n        return this.tileGrid.getResolutions();\n    };\n    /**\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     */\n    TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n        return abstract();\n    };\n    /**\n     * Return the tile grid of the tile source.\n     * @return {import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     * @api\n     */\n    TileSource.prototype.getTileGrid = function () {\n        return this.tileGrid;\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n    TileSource.prototype.getTileGridForProjection = function (projection) {\n        if (!this.tileGrid) {\n            return getTileGridForProjection(projection);\n        }\n        else {\n            return this.tileGrid;\n        }\n    };\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     * @protected\n     */\n    TileSource.prototype.getTileCacheForProjection = function (projection) {\n        assert(equivalent(this.getProjection(), projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n        );\n        return this.tileCache;\n    };\n    /**\n     * Get the tile pixel ratio for this source. Subclasses may override this\n     * method, which is meant to return a supported pixel ratio that matches the\n     * provided `pixelRatio` as close as possible.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n    TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n        return this.tilePixelRatio_;\n    };\n    /**\n     * @param {number} z Z.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../size.js\").Size} Tile size.\n     */\n    TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n        var tileGrid = this.getTileGridForProjection(projection);\n        var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n        var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n        if (tilePixelRatio == 1) {\n            return tileSize;\n        }\n        else {\n            return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n        }\n    };\n    /**\n     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n     * is outside the resolution and extent range of the tile grid, `null` will be\n     * returned.\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n     *     null if no tile URL should be created for the passed `tileCoord`.\n     */\n    TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n        var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n        var tileGrid = this.getTileGridForProjection(projection);\n        if (this.getWrapX() && projection.isGlobal()) {\n            tileCoord = wrapX(tileGrid, tileCoord, projection);\n        }\n        return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n    };\n    /**\n     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n     * @api\n     */\n    TileSource.prototype.clear = function () {\n        this.tileCache.clear();\n    };\n    TileSource.prototype.refresh = function () {\n        this.clear();\n        _super.prototype.refresh.call(this);\n    };\n    /**\n     * Increases the cache size if needed\n     * @param {number} tileCount Minimum number of tiles needed.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n        var tileCache = this.getTileCacheForProjection(projection);\n        if (tileCount > tileCache.highWaterMark) {\n            tileCache.highWaterMark = tileCount;\n        }\n    };\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    TileSource.prototype.useTile = function (z, x, y, projection) { };\n    return TileSource;\n}(Source));\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nvar TileSourceEvent = /** @class */ (function (_super) {\n    __extends(TileSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../Tile.js\").default} tile The tile.\n     */\n    function TileSourceEvent(type, tile) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The tile related to the event.\n         * @type {import(\"../Tile.js\").default}\n         * @api\n         */\n        _this.tile = tile;\n        return _this;\n    }\n    return TileSourceEvent;\n}(Event));\nexport { TileSourceEvent };\nexport default TileSource;\n"]},"metadata":{},"sourceType":"module"}