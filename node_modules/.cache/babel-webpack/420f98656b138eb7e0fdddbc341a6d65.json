{"ast":null,"code":"import { LanguageService } from '@igo2/core';\nimport { IgoMap, DataSourceService, LayerService, TimeFilterType, TimeFilterStyle } from '@igo2/geo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/core\";\nimport * as i2 from \"@igo2/geo\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@igo2/common\";\nexport let AppTimeFilterComponent = /*#__PURE__*/(() => {\n  class AppTimeFilterComponent {\n    constructor(languageService, dataSourceService, layerService) {\n      this.languageService = languageService;\n      this.dataSourceService = dataSourceService;\n      this.layerService = layerService;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          }\n        }\n      });\n      this.view = {\n        center: [-73, 47.2],\n        zoom: 7\n      };\n      this.dataSourceService.createAsyncDataSource({\n        type: 'osm'\n      }).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'OSM',\n          source: dataSource\n        }));\n      }); // const datasource: TimeFilterableDataSourceOptions = {\n      //   type: 'wms',\n      //   url: 'https://geoegl.msp.gouv.qc.ca/ws/igo_gouvouvert.fcgi',\n      //   params: {\n      //     layers: 'vg_observation_v_inondation_embacle_wmst',\n      //     version: '1.3.0'\n      //   },\n      //   timeFilterable: true,\n      //   timeFilter: {\n      //     min: '2017-01-01',\n      //     max: '2018-01-01',\n      //     range: true,\n      //     type: TimeFilterType.DATETIME,\n      //     style: TimeFilterStyle.SLIDER,\n      //     step: 86400000,\n      //     timeInterval: 2000\n      //   }\n      // };\n\n      const datasourceYear = {\n        type: 'wms',\n        url: 'https://geoegl.msp.gouv.qc.ca/ws/igo_gouvouvert.fcgi',\n        params: {\n          LAYERS: 'vg_observation_v_inondation_embacle_wmst',\n          VERSION: '1.3.0'\n        },\n        timeFilterable: true,\n        timeFilter: {\n          min: '2013',\n          max: '2019',\n          range: false,\n          type: TimeFilterType.YEAR,\n          style: TimeFilterStyle.SLIDER,\n          step: 1,\n          timeInterval: 2000\n        }\n      };\n      this.dataSourceService.createAsyncDataSource(datasourceYear).subscribe(dataSource => {\n        this.map.addLayer(this.layerService.createLayer({\n          title: 'Embâcle YEAR',\n          visible: true,\n          source: dataSource\n        }));\n      });\n    }\n\n  }\n\n  AppTimeFilterComponent.ɵfac = function AppTimeFilterComponent_Factory(t) {\n    return new (t || AppTimeFilterComponent)(i0.ɵɵdirectiveInject(i1.LanguageService), i0.ɵɵdirectiveInject(i2.DataSourceService), i0.ɵɵdirectiveInject(i2.LayerService));\n  };\n\n  AppTimeFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppTimeFilterComponent,\n    selectors: [[\"app-time-filter\"]],\n    decls: 21,\n    vars: 4,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/time-filter\"], [3, \"map\", \"view\"], [\"color\", \"primary\", 3, \"map\"], [\"title\", \"Layers\"], [3, \"layers\"]],\n    template: function AppTimeFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Time filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"npm install --save moment@2.22.2\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"li\");\n        i0.ɵɵtext(9, \"npm install --save @mat-datetimepicker/core@3.0.0-beta.0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"li\");\n        i0.ɵɵtext(11, \"Dependencies: LanguageService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13, \" See the \");\n        i0.ɵɵelementStart(14, \"a\", 0);\n        i0.ɵɵtext(15, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"hr\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"igo-map-browser\", 1);\n        i0.ɵɵelement(18, \"igo-zoom-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"igo-panel\", 3);\n        i0.ɵɵelement(20, \"igo-time-filter-list\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"layers\", ctx.map.layers);\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardSubtitle, i3.MatCardTitle, i3.MatCardContent, i2.MapBrowserComponent, i2.ZoomButtonComponent, i4.PanelComponent, i2.TimeFilterListComponent],\n    styles: [\"igo-map-browser[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 300px;\\n}\\n\\nigo-panel[_ngcontent-%COMP%] {\\n  width: 100%;\\n  padding-top: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWUtZmlsdGVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7RUFDQSxpQkFBQTtBQUNGIiwiZmlsZSI6InRpbWUtZmlsdGVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaWdvLW1hcC1icm93c2VyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMzAwcHg7XG59XG5cbmlnby1wYW5lbCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nLXRvcDogMTBweDtcbn1cbiJdfQ== */\"]\n  });\n  return AppTimeFilterComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\demo\\src\\app\\geo\\time-filter\\time-filter.component.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\demo\\src\\app\\geo\\time-filter\\time-filter.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\n\nimport { LanguageService } from '@igo2/core';\nimport {\n  IgoMap,\n  DataSourceService,\n  LayerService,\n  TimeFilterableDataSourceOptions,\n  TimeFilterType,\n  TimeFilterStyle\n} from '@igo2/geo';\n\n@Component({\n  selector: 'app-time-filter',\n  templateUrl: './time-filter.component.html',\n  styleUrls: ['./time-filter.component.scss']\n})\nexport class AppTimeFilterComponent {\n  public map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      }\n    }\n  });\n\n  public view = {\n    center: [-73, 47.2],\n    zoom: 7\n  };\n\n  constructor(\n    private languageService: LanguageService,\n    private dataSourceService: DataSourceService,\n    private layerService: LayerService\n  ) {\n    this.dataSourceService\n      .createAsyncDataSource({\n        type: 'osm'\n      })\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'OSM',\n            source: dataSource\n          })\n        );\n      });\n\n    // const datasource: TimeFilterableDataSourceOptions = {\n    //   type: 'wms',\n    //   url: 'https://geoegl.msp.gouv.qc.ca/ws/igo_gouvouvert.fcgi',\n    //   params: {\n    //     layers: 'vg_observation_v_inondation_embacle_wmst',\n    //     version: '1.3.0'\n    //   },\n    //   timeFilterable: true,\n    //   timeFilter: {\n    //     min: '2017-01-01',\n    //     max: '2018-01-01',\n    //     range: true,\n    //     type: TimeFilterType.DATETIME,\n    //     style: TimeFilterStyle.SLIDER,\n    //     step: 86400000,\n    //     timeInterval: 2000\n    //   }\n    // };\n\n    const datasourceYear: TimeFilterableDataSourceOptions = {\n      type: 'wms',\n      url: 'https://geoegl.msp.gouv.qc.ca/ws/igo_gouvouvert.fcgi',\n      params: {\n        LAYERS: 'vg_observation_v_inondation_embacle_wmst',\n        VERSION: '1.3.0'\n      },\n      timeFilterable: true,\n      timeFilter: {\n        min: '2013',\n        max: '2019',\n        range: false,\n        type: TimeFilterType.YEAR,\n        style: TimeFilterStyle.SLIDER,\n        step: 1,\n        timeInterval: 2000\n      }\n    };\n\n    this.dataSourceService\n      .createAsyncDataSource(datasourceYear)\n      .subscribe(dataSource => {\n        this.map.addLayer(\n          this.layerService.createLayer({\n            title: 'Embâcle YEAR',\n            visible: true,\n            source: dataSource\n          })\n        );\n      });\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Time filter</mat-card-title>\n  <mat-card-content>\n    <li>npm install --save moment@2.22.2</li>\n    <li>npm install --save @mat-datetimepicker/core@3.0.0-beta.0</li>\n    <li>Dependencies: LanguageService</li>\n\n    <br>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/time-filter\">code of this example</a>\n    <hr>\n  </mat-card-content>\n\n  <igo-map-browser [map]=\"map\" [view]=\"view\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n  </igo-map-browser>\n\n  <igo-panel title=\"Layers\">\n    <igo-time-filter-list [layers]=\"map.layers\"></igo-time-filter-list>\n  </igo-panel>\n\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}