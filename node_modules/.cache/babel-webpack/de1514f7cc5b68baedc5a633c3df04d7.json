{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/IGC\n */\n\n\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\n * @enum {string}\n */\n\nvar IGCZ = {\n  BAROMETRIC: 'barometric',\n  GPS: 'gps',\n  NONE: 'none'\n};\n/**\n * @const\n * @type {RegExp}\n */\n\nvar B_RECORD_RE = /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\n/**\n * @const\n * @type {RegExp}\n */\n\nvar H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\n/**\n * @const\n * @type {RegExp}\n */\n\nvar HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\n/**\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\n *\n * @const\n * @type {RegExp}\n */\n\nvar NEWLINE_RE = /\\r\\n|\\r|\\n/;\n/**\n * @typedef {Object} Options\n * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible\n * values are `'barometric'`, `'gps'`, and `'none'`.\n */\n\n/**\n * @classdesc\n * Feature format for `*.igc` flight recording files.\n *\n * As IGC sources contain a single feature,\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\n * array\n *\n * @api\n */\n\nvar IGC = function (_super) {\n  __extends(IGC, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function IGC(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n\n    _this.dataProjection = getProjection('EPSG:4326');\n    /**\n     * @private\n     * @type {IGCZ}\n     */\n\n    _this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : IGCZ.NONE;\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  IGC.prototype.readFeatureFromText = function (text, opt_options) {\n    var altitudeMode = this.altitudeMode_;\n    var lines = text.split(NEWLINE_RE);\n    /** @type {Object<string, string>} */\n\n    var properties = {};\n    var flatCoordinates = [];\n    var year = 2000;\n    var month = 0;\n    var day = 1;\n    var lastDateTime = -1;\n    var i, ii;\n\n    for (i = 0, ii = lines.length; i < ii; ++i) {\n      var line = lines[i];\n      var m = void 0;\n\n      if (line.charAt(0) == 'B') {\n        m = B_RECORD_RE.exec(line);\n\n        if (m) {\n          var hour = parseInt(m[1], 10);\n          var minute = parseInt(m[2], 10);\n          var second = parseInt(m[3], 10);\n          var y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\n\n          if (m[6] == 'S') {\n            y = -y;\n          }\n\n          var x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\n\n          if (m[9] == 'W') {\n            x = -x;\n          }\n\n          flatCoordinates.push(x, y);\n\n          if (altitudeMode != IGCZ.NONE) {\n            var z = void 0;\n\n            if (altitudeMode == IGCZ.GPS) {\n              z = parseInt(m[11], 10);\n            } else if (altitudeMode == IGCZ.BAROMETRIC) {\n              z = parseInt(m[12], 10);\n            } else {\n              z = 0;\n            }\n\n            flatCoordinates.push(z);\n          }\n\n          var dateTime = Date.UTC(year, month, day, hour, minute, second); // Detect UTC midnight wrap around.\n\n          if (dateTime < lastDateTime) {\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\n          }\n\n          flatCoordinates.push(dateTime / 1000);\n          lastDateTime = dateTime;\n        }\n      } else if (line.charAt(0) == 'H') {\n        m = HFDTE_RECORD_RE.exec(line);\n\n        if (m) {\n          day = parseInt(m[1], 10);\n          month = parseInt(m[2], 10) - 1;\n          year = 2000 + parseInt(m[3], 10);\n        } else {\n          m = H_RECORD_RE.exec(line);\n\n          if (m) {\n            properties[m[1]] = m[2].trim();\n          }\n        }\n      }\n    }\n\n    if (flatCoordinates.length === 0) {\n      return null;\n    }\n\n    var layout = altitudeMode == IGCZ.NONE ? GeometryLayout.XYM : GeometryLayout.XYZM;\n    var lineString = new LineString(flatCoordinates, layout);\n    var feature = new Feature(transformGeometryWithOptions(lineString, false, opt_options));\n    feature.setProperties(properties, true);\n    return feature;\n  };\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n\n\n  IGC.prototype.readFeaturesFromText = function (text, opt_options) {\n    var feature = this.readFeatureFromText(text, opt_options);\n\n    if (feature) {\n      return [feature];\n    } else {\n      return [];\n    }\n  };\n\n  return IGC;\n}(TextFeature);\n\nexport default IGC;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/IGC.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Feature","GeometryLayout","LineString","TextFeature","get","getProjection","transformGeometryWithOptions","IGCZ","BAROMETRIC","GPS","NONE","B_RECORD_RE","H_RECORD_RE","HFDTE_RECORD_RE","NEWLINE_RE","IGC","_super","opt_options","_this","options","dataProjection","altitudeMode_","altitudeMode","readFeatureFromText","text","lines","split","properties","flatCoordinates","year","month","day","lastDateTime","i","ii","length","line","m","charAt","exec","hour","parseInt","minute","second","y","x","push","z","dateTime","Date","UTC","trim","layout","XYM","XYZM","lineString","feature","setProperties","readFeaturesFromText"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/IGC\n */\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\n * @enum {string}\n */\nvar IGCZ = {\n    BAROMETRIC: 'barometric',\n    GPS: 'gps',\n    NONE: 'none',\n};\n/**\n * @const\n * @type {RegExp}\n */\nvar B_RECORD_RE = /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\n/**\n * @const\n * @type {RegExp}\n */\nvar H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\n/**\n * @const\n * @type {RegExp}\n */\nvar HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\n/**\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\n *\n * @const\n * @type {RegExp}\n */\nvar NEWLINE_RE = /\\r\\n|\\r|\\n/;\n/**\n * @typedef {Object} Options\n * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible\n * values are `'barometric'`, `'gps'`, and `'none'`.\n */\n/**\n * @classdesc\n * Feature format for `*.igc` flight recording files.\n *\n * As IGC sources contain a single feature,\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\n * array\n *\n * @api\n */\nvar IGC = /** @class */ (function (_super) {\n    __extends(IGC, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function IGC(opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection('EPSG:4326');\n        /**\n         * @private\n         * @type {IGCZ}\n         */\n        _this.altitudeMode_ = options.altitudeMode\n            ? options.altitudeMode\n            : IGCZ.NONE;\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    IGC.prototype.readFeatureFromText = function (text, opt_options) {\n        var altitudeMode = this.altitudeMode_;\n        var lines = text.split(NEWLINE_RE);\n        /** @type {Object<string, string>} */\n        var properties = {};\n        var flatCoordinates = [];\n        var year = 2000;\n        var month = 0;\n        var day = 1;\n        var lastDateTime = -1;\n        var i, ii;\n        for (i = 0, ii = lines.length; i < ii; ++i) {\n            var line = lines[i];\n            var m = void 0;\n            if (line.charAt(0) == 'B') {\n                m = B_RECORD_RE.exec(line);\n                if (m) {\n                    var hour = parseInt(m[1], 10);\n                    var minute = parseInt(m[2], 10);\n                    var second = parseInt(m[3], 10);\n                    var y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\n                    if (m[6] == 'S') {\n                        y = -y;\n                    }\n                    var x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\n                    if (m[9] == 'W') {\n                        x = -x;\n                    }\n                    flatCoordinates.push(x, y);\n                    if (altitudeMode != IGCZ.NONE) {\n                        var z = void 0;\n                        if (altitudeMode == IGCZ.GPS) {\n                            z = parseInt(m[11], 10);\n                        }\n                        else if (altitudeMode == IGCZ.BAROMETRIC) {\n                            z = parseInt(m[12], 10);\n                        }\n                        else {\n                            z = 0;\n                        }\n                        flatCoordinates.push(z);\n                    }\n                    var dateTime = Date.UTC(year, month, day, hour, minute, second);\n                    // Detect UTC midnight wrap around.\n                    if (dateTime < lastDateTime) {\n                        dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\n                    }\n                    flatCoordinates.push(dateTime / 1000);\n                    lastDateTime = dateTime;\n                }\n            }\n            else if (line.charAt(0) == 'H') {\n                m = HFDTE_RECORD_RE.exec(line);\n                if (m) {\n                    day = parseInt(m[1], 10);\n                    month = parseInt(m[2], 10) - 1;\n                    year = 2000 + parseInt(m[3], 10);\n                }\n                else {\n                    m = H_RECORD_RE.exec(line);\n                    if (m) {\n                        properties[m[1]] = m[2].trim();\n                    }\n                }\n            }\n        }\n        if (flatCoordinates.length === 0) {\n            return null;\n        }\n        var layout = altitudeMode == IGCZ.NONE ? GeometryLayout.XYM : GeometryLayout.XYZM;\n        var lineString = new LineString(flatCoordinates, layout);\n        var feature = new Feature(transformGeometryWithOptions(lineString, false, opt_options));\n        feature.setProperties(properties, true);\n        return feature;\n    };\n    /**\n     * @param {string} text Text.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    IGC.prototype.readFeaturesFromText = function (text, opt_options) {\n        var feature = this.readFeatureFromText(text, opt_options);\n        if (feature) {\n            return [feature];\n        }\n        else {\n            return [];\n        }\n    };\n    return IGC;\n}(TextFeature));\nexport default IGC;\n"]},"metadata":{},"sourceType":"module"}