{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/XMLFeature\n */\n\n\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport { getXMLSerializer, isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\n\nvar XMLFeature = function (_super) {\n  __extends(XMLFeature, _super);\n\n  function XMLFeature() {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n\n\n    _this.xmlSerializer_ = getXMLSerializer();\n    return _this;\n  }\n  /**\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n\n\n  XMLFeature.prototype.getType = function () {\n    return FormatType.XML;\n  };\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeature = function (source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(source, opt_options);\n    } else {\n      return this.readFeatureFromNode(source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromDocument = function (doc, opt_options) {\n    var features = this.readFeaturesFromDocument(doc, opt_options);\n\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n\n\n  XMLFeature.prototype.readFeatureFromNode = function (node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readFeatures = function (source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(source, opt_options);\n    } else {\n      return this.readFeaturesFromNode(source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromDocument = function (doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = [];\n\n    for (var n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(n, opt_options));\n      }\n    }\n\n    return features;\n  };\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n\n\n  XMLFeature.prototype.readFeaturesFromNode = function (node, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a single geometry from a source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometry = function (source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(source, opt_options);\n    } else {\n      return this.readGeometryFromNode(source, opt_options);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromDocument = function (doc, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n\n\n  XMLFeature.prototype.readGeometryFromNode = function (node, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n\n\n  XMLFeature.prototype.readProjection = function (source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      var doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(source);\n    } else {\n      return this.readProjectionFromNode(source);\n    }\n  };\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromDocument = function (doc) {\n    return this.dataProjection;\n  };\n  /**\n   * @param {Element} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n\n\n  XMLFeature.prototype.readProjectionFromNode = function (node) {\n    return this.dataProjection;\n  };\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   */\n\n\n  XMLFeature.prototype.writeFeature = function (feature, opt_options) {\n    var node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @protected\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeatureNode = function (feature, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Result.\n   * @api\n   */\n\n\n  XMLFeature.prototype.writeFeatures = function (features, opt_options) {\n    var node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeFeaturesNode = function (features, opt_options) {\n    return null; // not implemented\n  };\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   */\n\n\n  XMLFeature.prototype.writeGeometry = function (geometry, opt_options) {\n    var node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  };\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   */\n\n\n  XMLFeature.prototype.writeGeometryNode = function (geometry, opt_options) {\n    return null; // not implemented\n  };\n\n  return XMLFeature;\n}(FeatureFormat);\n\nexport default XMLFeature;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/format/XMLFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","FeatureFormat","FormatType","abstract","extend","getXMLSerializer","isDocument","parse","XMLFeature","_super","_this","xmlSerializer_","getType","XML","readFeature","source","opt_options","doc","readFeatureFromDocument","readFeatureFromNode","features","readFeaturesFromDocument","length","node","readFeatures","readFeaturesFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","readGeometry","readGeometryFromDocument","readGeometryFromNode","readProjection","readProjectionFromDocument","readProjectionFromNode","dataProjection","writeFeature","feature","writeFeatureNode","serializeToString","writeFeatures","writeFeaturesNode","writeGeometry","geometry","writeGeometryNode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/XMLFeature\n */\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport { abstract } from '../util.js';\nimport { extend } from '../array.js';\nimport { getXMLSerializer, isDocument, parse } from '../xml.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\nvar XMLFeature = /** @class */ (function (_super) {\n    __extends(XMLFeature, _super);\n    function XMLFeature() {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {XMLSerializer}\n         * @private\n         */\n        _this.xmlSerializer_ = getXMLSerializer();\n        return _this;\n    }\n    /**\n     * @return {import(\"./FormatType.js\").default} Format.\n     */\n    XMLFeature.prototype.getType = function () {\n        return FormatType.XML;\n    };\n    /**\n     * Read a single feature.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     * @api\n     */\n    XMLFeature.prototype.readFeature = function (source, opt_options) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readFeatureFromDocument(doc, opt_options);\n        }\n        else if (isDocument(source)) {\n            return this.readFeatureFromDocument(\n            /** @type {Document} */ (source), opt_options);\n        }\n        else {\n            return this.readFeatureFromNode(\n            /** @type {Element} */ (source), opt_options);\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    XMLFeature.prototype.readFeatureFromDocument = function (doc, opt_options) {\n        var features = this.readFeaturesFromDocument(doc, opt_options);\n        if (features.length > 0) {\n            return features[0];\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    XMLFeature.prototype.readFeatureFromNode = function (node, opt_options) {\n        return null; // not implemented\n    };\n    /**\n     * Read all features from a feature collection.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     * @api\n     */\n    XMLFeature.prototype.readFeatures = function (source, opt_options) {\n        if (!source) {\n            return [];\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readFeaturesFromDocument(doc, opt_options);\n        }\n        else if (isDocument(source)) {\n            return this.readFeaturesFromDocument(\n            /** @type {Document} */ (source), opt_options);\n        }\n        else {\n            return this.readFeaturesFromNode(\n            /** @type {Element} */ (source), opt_options);\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    XMLFeature.prototype.readFeaturesFromDocument = function (doc, opt_options) {\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        var features = [];\n        for (var n = doc.firstChild; n; n = n.nextSibling) {\n            if (n.nodeType == Node.ELEMENT_NODE) {\n                extend(features, this.readFeaturesFromNode(/** @type {Element} */ (n), opt_options));\n            }\n        }\n        return features;\n    };\n    /**\n     * @abstract\n     * @param {Element} node Node.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    XMLFeature.prototype.readFeaturesFromNode = function (node, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a single geometry from a source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    XMLFeature.prototype.readGeometry = function (source, opt_options) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readGeometryFromDocument(doc, opt_options);\n        }\n        else if (isDocument(source)) {\n            return this.readGeometryFromDocument(\n            /** @type {Document} */ (source), opt_options);\n        }\n        else {\n            return this.readGeometryFromNode(\n            /** @type {Element} */ (source), opt_options);\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    XMLFeature.prototype.readGeometryFromDocument = function (doc, opt_options) {\n        return null; // not implemented\n    };\n    /**\n     * @param {Element} node Node.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    XMLFeature.prototype.readGeometryFromNode = function (node, opt_options) {\n        return null; // not implemented\n    };\n    /**\n     * Read the projection from the source.\n     *\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     * @api\n     */\n    XMLFeature.prototype.readProjection = function (source) {\n        if (!source) {\n            return null;\n        }\n        else if (typeof source === 'string') {\n            var doc = parse(source);\n            return this.readProjectionFromDocument(doc);\n        }\n        else if (isDocument(source)) {\n            return this.readProjectionFromDocument(/** @type {Document} */ (source));\n        }\n        else {\n            return this.readProjectionFromNode(/** @type {Element} */ (source));\n        }\n    };\n    /**\n     * @param {Document} doc Document.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    XMLFeature.prototype.readProjectionFromDocument = function (doc) {\n        return this.dataProjection;\n    };\n    /**\n     * @param {Element} node Node.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    XMLFeature.prototype.readProjectionFromNode = function (node) {\n        return this.dataProjection;\n    };\n    /**\n     * Encode a feature as string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded feature.\n     */\n    XMLFeature.prototype.writeFeature = function (feature, opt_options) {\n        var node = this.writeFeatureNode(feature, opt_options);\n        return this.xmlSerializer_.serializeToString(node);\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n     * @protected\n     * @return {Node} Node.\n     */\n    XMLFeature.prototype.writeFeatureNode = function (feature, opt_options) {\n        return null; // not implemented\n    };\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Result.\n     * @api\n     */\n    XMLFeature.prototype.writeFeatures = function (features, opt_options) {\n        var node = this.writeFeaturesNode(features, opt_options);\n        return this.xmlSerializer_.serializeToString(node);\n    };\n    /**\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n     * @return {Node} Node.\n     */\n    XMLFeature.prototype.writeFeaturesNode = function (features, opt_options) {\n        return null; // not implemented\n    };\n    /**\n     * Encode a geometry as string.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded geometry.\n     */\n    XMLFeature.prototype.writeGeometry = function (geometry, opt_options) {\n        var node = this.writeGeometryNode(geometry, opt_options);\n        return this.xmlSerializer_.serializeToString(node);\n    };\n    /**\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n     * @return {Node} Node.\n     */\n    XMLFeature.prototype.writeGeometryNode = function (geometry, opt_options) {\n        return null; // not implemented\n    };\n    return XMLFeature;\n}(FeatureFormat));\nexport default XMLFeature;\n"]},"metadata":{},"sourceType":"module"}