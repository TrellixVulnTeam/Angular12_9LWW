{"ast":null,"code":"import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: /*#__PURE__*/trigger('transformPanelWrap', [/*#__PURE__*/transition('* => void', /*#__PURE__*/query('@transformPanel', [/*#__PURE__*/animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), /*#__PURE__*/state('showing', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/state('showing-multiple', /*#__PURE__*/style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), /*#__PURE__*/transition('void => *', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)')), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms 25ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nconst SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nconst MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nconst MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nclass MatSelectChange {\n  constructor(\n  /** Reference to the select that emitted the change event. */\n  source,\n  /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nconst _MatSelectMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nlet MatSelectTrigger = /*#__PURE__*/(() => {\n  class MatSelectTrigger {}\n\n  MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n    return new (t || MatSelectTrigger)();\n  };\n\n  MatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatSelectTrigger,\n    selectors: [[\"mat-select-trigger\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_SELECT_TRIGGER,\n      useExisting: MatSelectTrigger\n    }])]\n  });\n  return MatSelectTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nlet _MatSelectBase = /*#__PURE__*/(() => {\n  class _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n      var _a, _b, _c;\n\n      super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._viewportRuler = _viewportRuler;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._ngZone = _ngZone;\n      this._dir = _dir;\n      this._parentFormField = _parentFormField;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._defaultOptions = _defaultOptions;\n      /** Whether or not the overlay panel is open. */\n\n      this._panelOpen = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n      this._compareWith = (o1, o2) => o1 === o2;\n      /** Unique id for this input. */\n\n\n      this._uid = `mat-select-${nextUniqueId++}`;\n      /** Current `ariar-labelledby` value for the select trigger. */\n\n      this._triggerAriaLabelledBy = null;\n      /** Emits whenever the component is destroyed. */\n\n      this._destroy = new Subject();\n      /** `View -> model callback called when value changes` */\n\n      this._onChange = () => {};\n      /** `View -> model callback called when select has been touched` */\n\n\n      this._onTouched = () => {};\n      /** ID for the DOM node containing the select's value. */\n\n\n      this._valueId = `mat-select-value-${nextUniqueId++}`;\n      /** Emits when the panel element is finished transforming in. */\n\n      this._panelDoneAnimatingStream = new Subject();\n      this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n      this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n\n      this.controlType = 'mat-select';\n      this._required = false;\n      this._multiple = false;\n      this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n      /** Aria label of the select. */\n\n      this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n\n      this.optionSelectionChanges = defer(() => {\n        const options = this.options;\n\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n\n        return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n      });\n      /** Event emitted when the select panel has been toggled. */\n\n      this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n\n      this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n      /** Event emitted when the select has been closed. */\n\n      this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n      /** Event emitted when the selected value has been changed by the user. */\n\n      this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n\n      this.valueChange = new EventEmitter();\n\n      if (this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        this.ngControl.valueAccessor = this;\n      } // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n      if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n        this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n      }\n\n      this._scrollStrategyFactory = scrollStrategyFactory;\n      this._scrollStrategy = this._scrollStrategyFactory();\n      this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n      this.id = this.id;\n    }\n    /** Whether the select is focused. */\n\n\n    get focused() {\n      return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n\n\n    get placeholder() {\n      return this._placeholder;\n    }\n\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multiple(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n\n\n    get disableOptionCentering() {\n      return this._disableOptionCentering;\n    }\n\n    set disableOptionCentering(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n\n    get compareWith() {\n      return this._compareWith;\n    }\n\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n\n        this._value = newValue;\n      }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n\n    get typeaheadDebounceInterval() {\n      return this._typeaheadDebounceInterval;\n    }\n\n    set typeaheadDebounceInterval(value) {\n      this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n\n    ngAfterContentInit() {\n      this._initKeyManager();\n\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n        event.added.forEach(option => option.select());\n        event.removed.forEach(option => option.deselect());\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n        this._resetOptions();\n\n        this._initializeSelection();\n      });\n    }\n\n    ngDoCheck() {\n      const newAriaLabelledby = this._getTriggerAriaLabelledby(); // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n\n\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        const element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    }\n\n    ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled']) {\n        this.stateChanges.next();\n      }\n\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n\n\n    toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n\n\n    open() {\n      if (this._canOpen()) {\n        this._panelOpen = true;\n\n        this._keyManager.withHorizontalOrientation(null);\n\n        this._highlightCorrectOption();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n\n\n    close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n\n\n    get panelOpen() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n\n\n    get selected() {\n      var _a, _b;\n\n      return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n\n\n    get triggerValue() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n\n\n    _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n\n\n    _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n\n\n    _handleClosedKeydown(event) {\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        const previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        const selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n\n\n    _handleOpenKeydown(event) {\n      const manager = this._keyManager;\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const isTyping = manager.isTyping();\n\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close(); // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n        this.options.forEach(option => {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        const previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n\n    _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n\n\n    _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n\n\n    _onAttached() {\n      this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n        this._changeDetectorRef.detectChanges();\n\n        this._positioningSettled();\n      });\n    }\n    /** Returns the theme to be used on the panel. */\n\n\n    _getPanelTheme() {\n      return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n\n\n    get empty() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n\n        this.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n\n\n    _setSelectionByValue(value) {\n      this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n\n      this._selectionModel.clear();\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        value.forEach(currentValue => this._selectValue(currentValue));\n\n        this._sortValues();\n      } else {\n        const correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n\n\n    _selectValue(value) {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (this._selectionModel.isSelected(option)) {\n          return false;\n        }\n\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && this._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n\n    _initKeyManager() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!this.multiple && this._keyManager.activeItem) {\n            this._keyManager.activeItem._selectViaInteraction();\n          } // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n\n\n          this.focus();\n          this.close();\n        }\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this._panelOpen && this.panel) {\n          this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n        } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n\n\n    _resetOptions() {\n      const changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n        this._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n\n\n    _onSelect(option, isUserInput) {\n      const wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n\n\n    _sortValues() {\n      if (this.multiple) {\n        const options = this.options.toArray();\n\n        this._selectionModel.sort((a, b) => {\n          return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n\n    _propagateChanges(fallbackValue) {\n      let valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit = this.selected.map(option => option.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n\n\n    _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n\n\n    _canOpen() {\n      var _a;\n\n      return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n\n\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n\n\n    _getPanelAriaLabelledby() {\n      var _a;\n\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n\n\n    _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n\n\n    _getTriggerAriaLabelledby() {\n      var _a;\n\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n      let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n\n      return value;\n    }\n    /** Called when the overlay panel is done animating. */\n\n\n    _panelDoneAnimating(isOpen) {\n      this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n\n    get shouldLabelFloat() {\n      return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n    }\n\n  }\n\n  _MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n    return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n  };\n\n  _MatSelectBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatSelectBase,\n    viewQuery: function _MatSelectBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      id: \"id\",\n      placeholder: \"placeholder\",\n      required: \"required\",\n      multiple: \"multiple\",\n      disableOptionCentering: \"disableOptionCentering\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n      panelClass: \"panelClass\",\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      errorStateMatcher: \"errorStateMatcher\",\n      sortComparator: \"sortComparator\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      _closedStream: \"closed\",\n      selectionChange: \"selectionChange\",\n      valueChange: \"valueChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return _MatSelectBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatSelect = /*#__PURE__*/(() => {\n  class MatSelect extends _MatSelectBase {\n    constructor() {\n      super(...arguments);\n      /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n      this._scrollTop = 0;\n      /** The cached font-size of the trigger element. */\n\n      this._triggerFontSize = 0;\n      /** The value of the select panel's transform-origin property. */\n\n      this._transformOrigin = 'top';\n      /**\n       * The y-offset of the overlay panel in relation to the trigger's top start corner.\n       * This must be adjusted to align the selected option text over the trigger text.\n       * when the panel opens. Will change based on the y-position of the selected option.\n       */\n\n      this._offsetY = 0;\n      this._positions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n\n\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      const itemHeight = this._getItemHeight();\n\n      const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      const halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n      // scroll container, then subtracts the scroll buffer to scroll the option down to\n      // the center of the overlay panel. Half the option height must be re-added to the\n      // scrollTop so the option is centered based on its middle, not its top edge.\n\n      const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this.panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n\n    open() {\n      if (super._canOpen()) {\n        super.open();\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n        this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n          if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n            this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n          }\n        });\n      }\n    }\n    /** Scrolls the active option into view. */\n\n\n    _scrollOptionIntoView(index) {\n      const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n      const itemHeight = this._getItemHeight();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        this.panel.nativeElement.scrollTop = 0;\n      } else {\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n      }\n    }\n\n    _positioningSettled() {\n      this._calculateOverlayOffsetX();\n\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n\n    _panelDoneAnimating(isOpen) {\n      if (this.panelOpen) {\n        this._scrollTop = 0;\n      } else {\n        this._overlayDir.offsetX = 0;\n\n        this._changeDetectorRef.markForCheck();\n      }\n\n      super._panelDoneAnimating(isOpen);\n    }\n\n    _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n\n\n    _calculateOverlayOffsetX() {\n      const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n      const viewportSize = this._viewportRuler.getViewportSize();\n\n      const isRtl = this._isRtl();\n\n      const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      let offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else if (this.disableOptionCentering) {\n        offsetX = SELECT_PANEL_PADDING_X;\n      } else {\n        let selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      } // Determine how much the select overflows on each side.\n\n\n      const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this._overlayDir.offsetX = Math.round(offsetX);\n\n      this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n\n\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      const itemHeight = this._getItemHeight();\n\n      const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      let optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this.disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        const selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n        // portion of it is shown in the viewport and account for it in our offset.\n\n        let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n\n\n    _checkOverlayWithinViewport(maxScroll) {\n      const itemHeight = this._getItemHeight();\n\n      const viewportSize = this._viewportRuler.getViewportSize();\n\n      const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      const panelHeightTop = Math.abs(this._offsetY);\n      const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n\n\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = `50% bottom 0px`;\n      }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n\n\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = `50% top 0px`;\n        return;\n      }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n\n    _calculateOverlayPosition() {\n      const itemHeight = this._getItemHeight();\n\n      const items = this._getItemCount();\n\n      const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      const scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n      const maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n      let selectedOptionOffset;\n\n      if (this.empty) {\n        selectedOptionOffset = 0;\n      } else {\n        selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n      }\n\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n\n      const scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n\n\n    _getOriginBasedOnOption() {\n      const itemHeight = this._getItemHeight();\n\n      const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n\n\n    _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n\n\n    _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n\n  }\n\n  MatSelect.ɵfac = /*@__PURE__*/function () {\n    let ɵMatSelect_BaseFactory;\n    return function MatSelect_Factory(t) {\n      return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n    };\n  }();\n\n  MatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSelect,\n    selectors: [[\"mat-select\"]],\n    contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n    hostVars: 20,\n    hostBindings: function MatSelect_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matSelect\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 12,\n    consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n    template: function MatSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n          return ctx.toggle();\n        });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n          return ctx.close();\n        })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n          return ctx._onAttached();\n        })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n          return ctx.close();\n        });\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n      }\n    },\n    directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass],\n    styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n    },\n    changeDetection: 0\n  });\n  return MatSelect;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSelectModule = /*#__PURE__*/(() => {\n  class MatSelectModule {}\n\n  MatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n    return new (t || MatSelectModule)();\n  };\n\n  MatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSelectModule\n  });\n  MatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n    imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n  });\n  return MatSelectModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function () {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/select.js"],"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","ɵɵattribute","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","useExisting","ngDevMode","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","focused","_placeholder","stateChanges","required","_selectionModel","compareWith","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","_MatSelectBase_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","errorStateMatcher","outputs","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","errorState","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","directives","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","styles","encapsulation","data","animation","changeDetection","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,mBAAlB,EAAuCC,aAAvC,QAA4D,sBAA5D;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,YAApC,EAAkDC,iBAAlD,EAAqEC,MAArE,EAA6EC,UAA7E,EAAyFC,QAAzF,EAAmGC,MAAnG,EAA2GC,IAA3G,EAAiHC,SAAjH,EAA4HC,SAA5H,EAAuIC,KAAvI,EAA8IC,MAA9I,EAAsJC,SAAtJ,EAAiKC,iBAAjK,EAAoLC,uBAApL,EAA6MC,eAA7M,EAA8NC,YAA9N,EAA4OC,QAA5O,QAA4P,eAA5P;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,aAA5C,EAA2DC,eAA3D,EAA4EC,iBAA5E,EAA+FC,6BAA/F,EAA8HC,wBAA9H,EAAwJC,2BAAxJ,EAAqLC,SAArL,EAAgMC,YAAhM,EAA8MC,eAA9M,EAA+NC,eAA/N,QAAsP,wBAAtP;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,mBAAvC,EAA4DC,kBAA5D,QAAsF,8BAAtF;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,wBAAnD;AACA,SAASC,0BAAT,EAAqCC,aAArC,QAA0D,mBAA1D;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,uBAA5D;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,KAAxD,EAA+DC,KAA/D,EAAsEC,cAAtE,EAAsFC,CAAtF,QAA+F,uBAA/F;AACA,SAASC,MAAT,EAAiBC,kBAAjB,EAAqCC,SAArC,QAAsD,gBAAtD;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,QAAsC,MAAtC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,GAA7C,EAAkDC,oBAAlD,EAAwEC,SAAxE,QAAyF,gBAAzF;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAqCC,YAArC,EAAmDC,KAAnD,EAA0DC,KAA1D,EAAiEC,OAAjE,QAAgF,qBAAhF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,8BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,sBAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AAEA,MAAMC,GAAG,GAAG,CAAC,SAAD,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,OAAD,CAAZ;;AACA,SAASC,yBAAT,CAAmCC,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACtDZ,IAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC;AACAd,IAAAA,MAAM,CAACe,MAAP,CAAc,CAAd;AACAf,IAAAA,MAAM,CAACgB,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,UAAMK,MAAM,GAAGjB,MAAM,CAACkB,aAAP,EAAf;AACAlB,IAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,IAAAA,MAAM,CAACoB,iBAAP,CAAyBH,MAAM,CAACI,WAAhC;AACH;AAAE;;AACH,SAASC,gCAAT,CAA0CV,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AAC7DZ,IAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,EAAjC;AACAd,IAAAA,MAAM,CAACe,MAAP,CAAc,CAAd;AACAf,IAAAA,MAAM,CAACgB,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,UAAMW,MAAM,GAAGvB,MAAM,CAACkB,aAAP,CAAqB,CAArB,CAAf;AACAlB,IAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,IAAAA,MAAM,CAACoB,iBAAP,CAAyBG,MAAM,CAACC,YAAhC;AACH;AAAE;;AACH,SAASC,sCAAT,CAAgDb,EAAhD,EAAoDC,GAApD,EAAyD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACnEZ,IAAAA,MAAM,CAAC0B,YAAP,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAAC,eAAD,EAAkB,MAAlB,CAA1B;AACH;AAAE;;AACH,SAASC,yBAAT,CAAmCf,EAAnC,EAAuCC,GAAvC,EAA4C;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AACtDZ,IAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,MAAzB,EAAiC,CAAjC;AACAd,IAAAA,MAAM,CAAC4B,UAAP,CAAkB,CAAlB,EAAqBN,gCAArB,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,MAA7D,EAAqE,EAArE;AACAtB,IAAAA,MAAM,CAAC4B,UAAP,CAAkB,CAAlB,EAAqBH,sCAArB,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,YAAnE,EAAiF,EAAjF;AACAzB,IAAAA,MAAM,CAACgB,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,UAAMiB,MAAM,GAAG7B,MAAM,CAACkB,aAAP,EAAf;AACAlB,IAAAA,MAAM,CAAC8B,UAAP,CAAkB,UAAlB,EAA8B,CAAC,CAACD,MAAM,CAACE,aAAvC;AACA/B,IAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,IAAAA,MAAM,CAAC8B,UAAP,CAAkB,cAAlB,EAAkC,IAAlC;AACH;AAAE;;AACH,SAASE,gCAAT,CAA0CpB,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,MAAID,EAAE,GAAG,CAAT,EAAY;AAC7D,UAAMqB,GAAG,GAAGjC,MAAM,CAACkC,gBAAP,EAAZ;;AACAlC,IAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,EAAhC;AACAd,IAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,EAAhC,EAAoC,EAApC;AACAd,IAAAA,MAAM,CAACmC,UAAP,CAAkB,sBAAlB,EAA0C,SAASC,6EAAT,CAAuFC,MAAvF,EAA+F;AAAErC,MAAAA,MAAM,CAACsC,aAAP,CAAqBL,GAArB;AAA2B,YAAMM,MAAM,GAAGvC,MAAM,CAACkB,aAAP,EAAf;AAAuC,aAAOqB,MAAM,CAACC,yBAAP,CAAiCC,IAAjC,CAAsCJ,MAAM,CAACK,OAA7C,CAAP;AAA+D,KAA5Q,EAA8Q,SAA9Q,EAAyR,SAASC,uDAAT,CAAiEN,MAAjE,EAAyE;AAAErC,MAAAA,MAAM,CAACsC,aAAP,CAAqBL,GAArB;AAA2B,YAAMW,OAAO,GAAG5C,MAAM,CAACkB,aAAP,EAAhB;AAAwC,aAAO0B,OAAO,CAACC,cAAR,CAAuBR,MAAvB,CAAP;AAAwC,KAA/c;AACArC,IAAAA,MAAM,CAAC0B,YAAP,CAAoB,CAApB,EAAuB,CAAvB;AACA1B,IAAAA,MAAM,CAACgB,YAAP;AACAhB,IAAAA,MAAM,CAACgB,YAAP;AACH;;AAAC,MAAIJ,EAAE,GAAG,CAAT,EAAY;AACV,UAAMkC,MAAM,GAAG9C,MAAM,CAACkB,aAAP,EAAf;AACAlB,IAAAA,MAAM,CAAC8B,UAAP,CAAkB,qBAAlB,EAAyCiB,SAAzC;AACA/C,IAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,IAAAA,MAAM,CAACgD,sBAAP,CAA8B,mBAA9B,EAAmDF,MAAM,CAACG,cAAP,EAAnD,EAA4E,EAA5E;AACAjD,IAAAA,MAAM,CAACkD,WAAP,CAAmB,kBAAnB,EAAuCJ,MAAM,CAACK,gBAA9C,EAAgE,WAAhE,EAA6EL,MAAM,CAACM,gBAApF,EAAsG,IAAtG;AACApD,IAAAA,MAAM,CAAC8B,UAAP,CAAkB,SAAlB,EAA6BgB,MAAM,CAACO,UAApC,EAAgD,iBAAhD,EAAmEP,MAAM,CAACQ,QAAP,GAAkB,kBAAlB,GAAuC,SAA1G;AACAtD,IAAAA,MAAM,CAACuD,WAAP,CAAmB,IAAnB,EAAyBT,MAAM,CAACU,EAAP,GAAY,QAArC,EAA+C,sBAA/C,EAAuEV,MAAM,CAACQ,QAA9E,EAAwF,YAAxF,EAAsGR,MAAM,CAACW,SAAP,IAAoB,IAA1H,EAAgI,iBAAhI,EAAmJX,MAAM,CAACY,uBAAP,EAAnJ;AACH;AAAE;;AACH,MAAMC,GAAG,GAAG,CAAC,CAAC,CAAC,oBAAD,CAAD,CAAD,EAA2B,GAA3B,CAAZ;AACA,MAAMC,GAAG,GAAG,CAAC,oBAAD,EAAuB,GAAvB,CAAZ;AACA,MAAMC,mBAAmB,GAAG;AACxB;AACJ;AACA;AACA;AACA;AACIC,EAAAA,kBAAkB,eAAErE,OAAO,CAAC,oBAAD,EAAuB,cAC9CC,UAAU,CAAC,WAAD,eAAcC,KAAK,CAAC,iBAAD,EAAoB,cAACC,YAAY,EAAb,CAApB,EAAsC;AAAEmE,IAAAA,QAAQ,EAAE;AAAZ,GAAtC,CAAnB,CADoC,CAAvB,CANH;;AASxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,cAAc,eAAEvE,OAAO,CAAC,gBAAD,EAAmB,cACtCI,KAAK,CAAC,MAAD,eAASC,KAAK,CAAC;AAChBmE,IAAAA,SAAS,EAAE,aADK;AAEhBC,IAAAA,QAAQ,EAAE,MAFM;AAGhBC,IAAAA,OAAO,EAAE;AAHO,GAAD,CAAd,CADiC,eAMtCtE,KAAK,CAAC,SAAD,eAAYC,KAAK,CAAC;AACnBqE,IAAAA,OAAO,EAAE,CADU;AAEnBD,IAAAA,QAAQ,EAAE,mBAFS;AAGnBD,IAAAA,SAAS,EAAE;AAHQ,GAAD,CAAjB,CANiC,eAWtCpE,KAAK,CAAC,kBAAD,eAAqBC,KAAK,CAAC;AAC5BqE,IAAAA,OAAO,EAAE,CADmB;AAE5BD,IAAAA,QAAQ,EAAE,mBAFkB;AAG5BD,IAAAA,SAAS,EAAE;AAHiB,GAAD,CAA1B,CAXiC,eAgBtCvE,UAAU,CAAC,WAAD,eAAcK,OAAO,CAAC,kCAAD,CAArB,CAhB4B,eAiBtCL,UAAU,CAAC,WAAD,eAAcK,OAAO,CAAC,mBAAD,eAAsBD,KAAK,CAAC;AAAEqE,IAAAA,OAAO,EAAE;AAAX,GAAD,CAA3B,CAArB,CAjB4B,CAAnB;AAlBC,CAA5B;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gCAAT,GAA4C;AACxC,SAAOC,KAAK,CAAC,+DAAD,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,8BAAT,GAA0C;AACtC,SAAOD,KAAK,CAAC,oDAAD,CAAZ;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASE,iCAAT,GAA6C;AACzC,SAAOF,KAAK,CAAC,mCAAD,CAAZ;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,YAAY,GAAG,CAAnB;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,MAAMC,uBAAuB,GAAG,GAAhC;AACA;;AACA,MAAMC,sBAAsB,GAAG,EAA/B;AACA;;AACA,MAAMC,6BAA6B,GAAGD,sBAAsB,GAAG,CAA/D;AACA;;AACA,MAAME,qBAAqB,GAAG,CAA9B,C,CACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,+BAA+B,GAAGH,sBAAsB,GAAG,GAAzB,GAA+B,EAAvE;AACA;AACA;AACA;AACA;;AACA,MAAMI,6BAA6B,GAAG,CAAtC;AACA;;AACA,MAAMC,0BAA0B,gBAAG,IAAItJ,cAAJ,CAAmB,4BAAnB,CAAnC;AACA;;AACA,SAASuJ,2CAAT,CAAqDC,OAArD,EAA8D;AAC1D,SAAO,MAAMA,OAAO,CAACC,gBAAR,CAAyBC,UAAzB,EAAb;AACH;AACD;;;AACA,MAAMC,iBAAiB,gBAAG,IAAI3J,cAAJ,CAAmB,mBAAnB,CAA1B;AACA;;AACA,MAAM4J,mCAAmC,GAAG;AACxCC,EAAAA,OAAO,EAAEP,0BAD+B;AAExCQ,EAAAA,IAAI,EAAE,CAAClK,OAAD,CAFkC;AAGxCmK,EAAAA,UAAU,EAAER;AAH4B,CAA5C;AAKA;;AACA,MAAMS,eAAN,CAAsB;AAClBC,EAAAA,WAAW;AACX;AACAC,EAAAA,MAFW;AAGX;AACAC,EAAAA,KAJW,EAIJ;AACH,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AARiB,C,CAUtB;;AACA;;;AACA,MAAMC,mBAAmB,gBAAGjJ,kBAAkB,eAACC,aAAa,eAACC,aAAa,eAACC,eAAe,CAAC,MAAM;AAC7F2I,EAAAA,WAAW,CAACI,WAAD,EAAcC,yBAAd,EAAyCC,WAAzC,EAAsDC,gBAAtD,EAAwEC,SAAxE,EAAmF;AAC1F,SAAKJ,WAAL,GAAmBA,WAAnB;AACA,SAAKC,yBAAL,GAAiCA,yBAAjC;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AAP4F,CAAP,CAAhB,CAAd,CAAd,CAA9C;AASA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,gBAAG,IAAI1K,cAAJ,CAAmB,kBAAnB,CAA3B;AACA;AACA;AACA;;IACM2K,gB;AAAN,QAAMA,gBAAN,CAAuB;;AAEvBA,EAAAA,gBAAgB,CAACC,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAIH,gBAAV,GAAP;AAAuC,GAAtG;;AACAA,EAAAA,gBAAgB,CAACI,IAAjB,GAAwB,aAAcxG,MAAM,CAACyG,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAEN,gBAAR;AAA0BO,IAAAA,SAAS,EAAE,CAAC,CAAC,oBAAD,CAAD,CAArC;AAA+DC,IAAAA,QAAQ,EAAE,CAAC5G,MAAM,CAAC6G,kBAAP,CAA0B,CAAC;AAAEvB,MAAAA,OAAO,EAAEa,kBAAX;AAA+BW,MAAAA,WAAW,EAAEV;AAA5C,KAAD,CAA1B,CAAD;AAAzE,GAAzB,CAAtC;SAHMA,gB;;;AAIN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOW,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAMO,CANtB;AAOA;;;IACMC,c;AAAN,QAAMA,cAAN,SAA6BnB,mBAA7B,CAAiD;AAC7CH,IAAAA,WAAW,CAACuB,cAAD,EAAiBC,kBAAjB,EAAqCC,OAArC,EAA8CpB,yBAA9C,EAAyEqB,UAAzE,EAAqFC,IAArF,EAA2FrB,WAA3F,EAAwGC,gBAAxG,EAA0HqB,gBAA1H,EAA4IpB,SAA5I,EAAuJqB,QAAvJ,EAAiKC,qBAAjK,EAAwLC,cAAxL,EAAwMC,eAAxM,EAAyN;AAChO,UAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ;;AACA,YAAMT,UAAN,EAAkBrB,yBAAlB,EAA6CC,WAA7C,EAA0DC,gBAA1D,EAA4EC,SAA5E;AACA,WAAKe,cAAL,GAAsBA,cAAtB;AACA,WAAKC,kBAAL,GAA0BA,kBAA1B;AACA,WAAKC,OAAL,GAAeA,OAAf;AACA,WAAKE,IAAL,GAAYA,IAAZ;AACA,WAAKC,gBAAL,GAAwBA,gBAAxB;AACA,WAAKG,cAAL,GAAsBA,cAAtB;AACA,WAAKC,eAAL,GAAuBA,eAAvB;AACA;;AACA,WAAKI,UAAL,GAAkB,KAAlB;AACA;;AACA,WAAKC,YAAL,GAAoB,CAACC,EAAD,EAAKC,EAAL,KAAYD,EAAE,KAAKC,EAAvC;AACA;;;AACA,WAAKC,IAAL,GAAa,cAAa1D,YAAY,EAAG,EAAzC;AACA;;AACA,WAAK2D,sBAAL,GAA8B,IAA9B;AACA;;AACA,WAAKC,QAAL,GAAgB,IAAIrJ,OAAJ,EAAhB;AACA;;AACA,WAAKsJ,SAAL,GAAiB,MAAM,CAAG,CAA1B;AACA;;;AACA,WAAKC,UAAL,GAAkB,MAAM,CAAG,CAA3B;AACA;;;AACA,WAAKC,QAAL,GAAiB,oBAAmB/D,YAAY,EAAG,EAAnD;AACA;;AACA,WAAKhC,yBAAL,GAAiC,IAAIzD,OAAJ,EAAjC;AACA,WAAKyJ,kBAAL,GAA0B,CAAC,CAACb,EAAE,GAAG,KAAKD,eAAX,MAAgC,IAAhC,IAAwCC,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACc,iBAArE,KAA2F,EAArH;AACA,WAAKC,QAAL,GAAgB,KAAhB;AACA;;AACA,WAAKC,WAAL,GAAmB,YAAnB;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACA,WAAKC,uBAAL,GAA+B,CAACjB,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKF,eAAX,MAAgC,IAAhC,IAAwCE,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACmB,sBAA1E,MAAsG,IAAtG,IAA8GlB,EAAE,KAAK,KAAK,CAA1H,GAA8HA,EAA9H,GAAmI,KAAlK;AACA;;AACA,WAAKpE,SAAL,GAAiB,EAAjB;AACA;;AACA,WAAKuF,sBAAL,GAA8BhK,KAAK,CAAC,MAAM;AACtC,cAAMiK,OAAO,GAAG,KAAKA,OAArB;;AACA,YAAIA,OAAJ,EAAa;AACT,iBAAOA,OAAO,CAACC,OAAR,CAAgBC,IAAhB,CAAqBjK,SAAS,CAAC+J,OAAD,CAA9B,EAAyC9J,SAAS,CAAC,MAAMF,KAAK,CAAC,GAAGgK,OAAO,CAAC3J,GAAR,CAAY8J,MAAM,IAAIA,MAAM,CAACC,iBAA7B,CAAJ,CAAZ,CAAlD,CAAP;AACH;;AACD,eAAO,KAAKlC,OAAL,CAAamC,QAAb,CACFH,IADE,CACG/J,IAAI,CAAC,CAAD,CADP,EACYD,SAAS,CAAC,MAAM,KAAK6J,sBAAZ,CADrB,CAAP;AAEH,OAPkC,CAAnC;AAQA;;AACA,WAAKO,YAAL,GAAoB,IAAI5N,YAAJ,EAApB;AACA;;AACA,WAAK6N,aAAL,GAAqB,KAAKD,YAAL,CAAkBJ,IAAlB,CAAuB9J,MAAM,CAACoK,CAAC,IAAIA,CAAN,CAA7B,EAAuCnK,GAAG,CAAC,MAAM,CAAG,CAAV,CAA1C,CAArB;AACA;;AACA,WAAKoK,aAAL,GAAqB,KAAKH,YAAL,CAAkBJ,IAAlB,CAAuB9J,MAAM,CAACoK,CAAC,IAAI,CAACA,CAAP,CAA7B,EAAwCnK,GAAG,CAAC,MAAM,CAAG,CAAV,CAA3C,CAArB;AACA;;AACA,WAAKqK,eAAL,GAAuB,IAAIhO,YAAJ,EAAvB;AACA;AACR;AACA;AACA;AACA;;AACQ,WAAKiO,WAAL,GAAmB,IAAIjO,YAAJ,EAAnB;;AACA,UAAI,KAAKuK,SAAT,EAAoB;AAChB;AACA;AACA,aAAKA,SAAL,CAAe2D,aAAf,GAA+B,IAA/B;AACH,OAhE+N,CAiEhO;AACA;;;AACA,UAAI,CAACnC,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACoC,yBAAnF,KAAiH,IAArH,EAA2H;AACvH,aAAKC,0BAAL,GAAkCrC,eAAe,CAACoC,yBAAlD;AACH;;AACD,WAAKE,sBAAL,GAA8BxC,qBAA9B;AACA,WAAKyC,eAAL,GAAuB,KAAKD,sBAAL,EAAvB;AACA,WAAKzC,QAAL,GAAgB2C,QAAQ,CAAC3C,QAAD,CAAR,IAAsB,CAAtC,CAxEgO,CAyEhO;;AACA,WAAK/D,EAAL,GAAU,KAAKA,EAAf;AACH;AACD;;;AACW,QAAP2G,OAAO,GAAG;AACV,aAAO,KAAKzB,QAAL,IAAiB,KAAKZ,UAA7B;AACH;AACD;;;AACe,QAAXzG,WAAW,GAAG;AAAE,aAAO,KAAK+I,YAAZ;AAA2B;;AAChC,QAAX/I,WAAW,CAACuE,KAAD,EAAQ;AACnB,WAAKwE,YAAL,GAAoBxE,KAApB;AACA,WAAKyE,YAAL,CAAkB5H,IAAlB;AACH;AACD;;;AACY,QAAR6H,QAAQ,GAAG;AAAE,aAAO,KAAK1B,SAAZ;AAAwB;;AAC7B,QAAR0B,QAAQ,CAAC1E,KAAD,EAAQ;AAChB,WAAKgD,SAAL,GAAiB3K,qBAAqB,CAAC2H,KAAD,CAAtC;AACA,WAAKyE,YAAL,CAAkB5H,IAAlB;AACH;AACD;;;AACY,QAARa,QAAQ,GAAG;AAAE,aAAO,KAAKuF,SAAZ;AAAwB;;AAC7B,QAARvF,QAAQ,CAACsC,KAAD,EAAQ;AAChB,UAAI,KAAK2E,eAAL,KAAyB,OAAOxD,SAAP,KAAqB,WAArB,IAAoCA,SAA7D,CAAJ,EAA6E;AACzE,cAAM3C,gCAAgC,EAAtC;AACH;;AACD,WAAKyE,SAAL,GAAiB5K,qBAAqB,CAAC2H,KAAD,CAAtC;AACH;AACD;;;AAC0B,QAAtBmD,sBAAsB,GAAG;AAAE,aAAO,KAAKD,uBAAZ;AAAsC;;AAC3C,QAAtBC,sBAAsB,CAACnD,KAAD,EAAQ;AAC9B,WAAKkD,uBAAL,GAA+B7K,qBAAqB,CAAC2H,KAAD,CAApD;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACmB,QAAX4E,WAAW,GAAG;AAAE,aAAO,KAAKzC,YAAZ;AAA2B;;AAChC,QAAXyC,WAAW,CAACC,EAAD,EAAK;AAChB,UAAI,OAAOA,EAAP,KAAc,UAAd,KAA6B,OAAO1D,SAAP,KAAqB,WAArB,IAAoCA,SAAjE,CAAJ,EAAiF;AAC7E,cAAMxC,iCAAiC,EAAvC;AACH;;AACD,WAAKwD,YAAL,GAAoB0C,EAApB;;AACA,UAAI,KAAKF,eAAT,EAA0B;AACtB;AACA,aAAKG,oBAAL;AACH;AACJ;AACD;;;AACS,QAAL9E,KAAK,GAAG;AAAE,aAAO,KAAK+E,MAAZ;AAAqB;;AAC1B,QAAL/E,KAAK,CAACgF,QAAD,EAAW;AAChB;AACA,UAAIA,QAAQ,KAAK,KAAKD,MAAlB,IAA6B,KAAK9B,SAAL,IAAkBgC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAnD,EAA6E;AACzE,YAAI,KAAK3B,OAAT,EAAkB;AACd,eAAK8B,oBAAL,CAA0BH,QAA1B;AACH;;AACD,aAAKD,MAAL,GAAcC,QAAd;AACH;AACJ;AACD;;;AAC6B,QAAzBd,yBAAyB,GAAG;AAAE,aAAO,KAAKC,0BAAZ;AAAyC;;AAC9C,QAAzBD,yBAAyB,CAAClE,KAAD,EAAQ;AACjC,WAAKmE,0BAAL,GAAkC7L,oBAAoB,CAAC0H,KAAD,CAAtD;AACH;AACD;;;AACM,QAAFpC,EAAE,GAAG;AAAE,aAAO,KAAKwH,GAAZ;AAAkB;;AACvB,QAAFxH,EAAE,CAACoC,KAAD,EAAQ;AACV,WAAKoF,GAAL,GAAWpF,KAAK,IAAI,KAAKsC,IAAzB;AACA,WAAKmC,YAAL,CAAkB5H,IAAlB;AACH;;AACDwI,IAAAA,QAAQ,GAAG;AACP,WAAKV,eAAL,GAAuB,IAAIpM,cAAJ,CAAmB,KAAKmF,QAAxB,CAAvB;AACA,WAAK+G,YAAL,CAAkB5H,IAAlB,GAFO,CAGP;AACA;AACA;;AACA,WAAKD,yBAAL,CACK2G,IADL,CACU5J,oBAAoB,EAD9B,EACkCC,SAAS,CAAC,KAAK4I,QAAN,CAD3C,EAEK8C,SAFL,CAEe,MAAM,KAAKC,mBAAL,CAAyB,KAAKC,SAA9B,CAFrB;AAGH;;AACDC,IAAAA,kBAAkB,GAAG;AACjB,WAAKC,eAAL;;AACA,WAAKf,eAAL,CAAqBgB,OAArB,CAA6BpC,IAA7B,CAAkC3J,SAAS,CAAC,KAAK4I,QAAN,CAA3C,EAA4D8C,SAA5D,CAAsEM,KAAK,IAAI;AAC3EA,QAAAA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBtC,MAAM,IAAIA,MAAM,CAACuC,MAAP,EAA9B;AACAH,QAAAA,KAAK,CAACI,OAAN,CAAcF,OAAd,CAAsBtC,MAAM,IAAIA,MAAM,CAACyC,QAAP,EAAhC;AACH,OAHD;;AAIA,WAAK5C,OAAL,CAAaC,OAAb,CAAqBC,IAArB,CAA0BjK,SAAS,CAAC,IAAD,CAAnC,EAA2CM,SAAS,CAAC,KAAK4I,QAAN,CAApD,EAAqE8C,SAArE,CAA+E,MAAM;AACjF,aAAKY,aAAL;;AACA,aAAKpB,oBAAL;AACH,OAHD;AAIH;;AACDqB,IAAAA,SAAS,GAAG;AACR,YAAMC,iBAAiB,GAAG,KAAKC,yBAAL,EAA1B,CADQ,CAER;AACA;AACA;;;AACA,UAAID,iBAAiB,KAAK,KAAK7D,sBAA/B,EAAuD;AACnD,cAAM+D,OAAO,GAAG,KAAKpG,WAAL,CAAiBqG,aAAjC;AACA,aAAKhE,sBAAL,GAA8B6D,iBAA9B;;AACA,YAAIA,iBAAJ,EAAuB;AACnBE,UAAAA,OAAO,CAACE,YAAR,CAAqB,iBAArB,EAAwCJ,iBAAxC;AACH,SAFD,MAGK;AACDE,UAAAA,OAAO,CAACG,eAAR,CAAwB,iBAAxB;AACH;AACJ;;AACD,UAAI,KAAKnG,SAAT,EAAoB;AAChB,aAAKoG,gBAAL;AACH;AACJ;;AACDC,IAAAA,WAAW,CAACrD,OAAD,EAAU;AACjB;AACA;AACA,UAAIA,OAAO,CAAC,UAAD,CAAX,EAAyB;AACrB,aAAKmB,YAAL,CAAkB5H,IAAlB;AACH;;AACD,UAAIyG,OAAO,CAAC,2BAAD,CAAP,IAAwC,KAAKsD,WAAjD,EAA8D;AAC1D,aAAKA,WAAL,CAAiBC,aAAjB,CAA+B,KAAK1C,0BAApC;AACH;AACJ;;AACD2C,IAAAA,WAAW,GAAG;AACV,WAAKtE,QAAL,CAAc3F,IAAd;;AACA,WAAK2F,QAAL,CAAcuE,QAAd;;AACA,WAAKtC,YAAL,CAAkBsC,QAAlB;AACH;AACD;;;AACAC,IAAAA,MAAM,GAAG;AACL,WAAKxB,SAAL,GAAiB,KAAKyB,KAAL,EAAjB,GAAgC,KAAKC,IAAL,EAAhC;AACH;AACD;;;AACAA,IAAAA,IAAI,GAAG;AACH,UAAI,KAAKC,QAAL,EAAJ,EAAqB;AACjB,aAAKjF,UAAL,GAAkB,IAAlB;;AACA,aAAK0E,WAAL,CAAiBQ,yBAAjB,CAA2C,IAA3C;;AACA,aAAKC,uBAAL;;AACA,aAAK/F,kBAAL,CAAwBgG,YAAxB;AACH;AACJ;AACD;;;AACAL,IAAAA,KAAK,GAAG;AACJ,UAAI,KAAK/E,UAAT,EAAqB;AACjB,aAAKA,UAAL,GAAkB,KAAlB;;AACA,aAAK0E,WAAL,CAAiBQ,yBAAjB,CAA2C,KAAKG,MAAL,KAAgB,KAAhB,GAAwB,KAAnE;;AACA,aAAKjG,kBAAL,CAAwBgG,YAAxB;;AACA,aAAK5E,UAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI8E,IAAAA,UAAU,CAACxH,KAAD,EAAQ;AACd,WAAKA,KAAL,GAAaA,KAAb;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIyH,IAAAA,gBAAgB,CAAC5C,EAAD,EAAK;AACjB,WAAKpC,SAAL,GAAiBoC,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI6C,IAAAA,iBAAiB,CAAC7C,EAAD,EAAK;AAClB,WAAKnC,UAAL,GAAkBmC,EAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI8C,IAAAA,gBAAgB,CAACC,UAAD,EAAa;AACzB,WAAKC,QAAL,GAAgBD,UAAhB;;AACA,WAAKtG,kBAAL,CAAwBgG,YAAxB;;AACA,WAAK7C,YAAL,CAAkB5H,IAAlB;AACH;AACD;;;AACa,QAAT2I,SAAS,GAAG;AACZ,aAAO,KAAKtD,UAAZ;AACH;AACD;;;AACY,QAAR4F,QAAQ,GAAG;AACX,UAAI/F,EAAJ,EAAQC,EAAR;;AACA,aAAO,KAAKtE,QAAL,GAAiB,CAAC,CAACqE,EAAE,GAAG,KAAK4C,eAAX,MAAgC,IAAhC,IAAwC5C,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAAC+F,QAArE,KAAkF,EAAnG,GACH,CAAC9F,EAAE,GAAG,KAAK2C,eAAX,MAAgC,IAAhC,IAAwC3C,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAAC8F,QAAH,CAAY,CAAZ,CADrE;AAEH;AACD;;;AACgB,QAAZlM,YAAY,GAAG;AACf,UAAI,KAAKmM,KAAT,EAAgB;AACZ,eAAO,EAAP;AACH;;AACD,UAAI,KAAK9E,SAAT,EAAoB;AAChB,cAAM+E,eAAe,GAAG,KAAKrD,eAAL,CAAqBmD,QAArB,CAA8BpO,GAA9B,CAAkC8J,MAAM,IAAIA,MAAM,CAACyE,SAAnD,CAAxB;;AACA,YAAI,KAAKV,MAAL,EAAJ,EAAmB;AACfS,UAAAA,eAAe,CAACE,OAAhB;AACH,SAJe,CAKhB;;;AACA,eAAOF,eAAe,CAACG,IAAhB,CAAqB,IAArB,CAAP;AACH;;AACD,aAAO,KAAKxD,eAAL,CAAqBmD,QAArB,CAA8B,CAA9B,EAAiCG,SAAxC;AACH;AACD;;;AACAV,IAAAA,MAAM,GAAG;AACL,aAAO,KAAK9F,IAAL,GAAY,KAAKA,IAAL,CAAUzB,KAAV,KAAoB,KAAhC,GAAwC,KAA/C;AACH;AACD;;;AACA/C,IAAAA,cAAc,CAAC2I,KAAD,EAAQ;AAClB,UAAI,CAAC,KAAKiC,QAAV,EAAoB;AAChB,aAAKrC,SAAL,GAAiB,KAAK4C,kBAAL,CAAwBxC,KAAxB,CAAjB,GAAkD,KAAKyC,oBAAL,CAA0BzC,KAA1B,CAAlD;AACH;AACJ;AACD;;;AACAyC,IAAAA,oBAAoB,CAACzC,KAAD,EAAQ;AACxB,YAAM0C,OAAO,GAAG1C,KAAK,CAAC0C,OAAtB;AACA,YAAMC,UAAU,GAAGD,OAAO,KAAK9P,UAAZ,IAA0B8P,OAAO,KAAK7P,QAAtC,IACf6P,OAAO,KAAK5P,UADG,IACW4P,OAAO,KAAK3P,WAD1C;AAEA,YAAM6P,SAAS,GAAGF,OAAO,KAAK1P,KAAZ,IAAqB0P,OAAO,KAAKzP,KAAnD;AACA,YAAM4P,OAAO,GAAG,KAAK7B,WAArB,CALwB,CAMxB;;AACA,UAAI,CAAC6B,OAAO,CAACC,QAAR,EAAD,IAAwBF,SAAS,IAAI,CAAC1P,cAAc,CAAC8M,KAAD,CAApD,IACC,CAAC,KAAKlI,QAAL,IAAiBkI,KAAK,CAAC+C,MAAxB,KAAmCJ,UADxC,EACqD;AACjD3C,QAAAA,KAAK,CAACgD,cAAN,GADiD,CACzB;;AACxB,aAAK1B,IAAL;AACH,OAJD,MAKK,IAAI,CAAC,KAAKxJ,QAAV,EAAoB;AACrB,cAAMmL,wBAAwB,GAAG,KAAKf,QAAtC;AACAW,QAAAA,OAAO,CAACK,SAAR,CAAkBlD,KAAlB;AACA,cAAMmD,cAAc,GAAG,KAAKjB,QAA5B,CAHqB,CAIrB;;AACA,YAAIiB,cAAc,IAAIF,wBAAwB,KAAKE,cAAnD,EAAmE;AAC/D;AACA;AACA,eAAKlH,cAAL,CAAoBmH,QAApB,CAA6BD,cAAc,CAACd,SAA5C,EAAuD,KAAvD;AACH;AACJ;AACJ;AACD;;;AACAG,IAAAA,kBAAkB,CAACxC,KAAD,EAAQ;AACtB,YAAM6C,OAAO,GAAG,KAAK7B,WAArB;AACA,YAAM0B,OAAO,GAAG1C,KAAK,CAAC0C,OAAtB;AACA,YAAMC,UAAU,GAAGD,OAAO,KAAK9P,UAAZ,IAA0B8P,OAAO,KAAK7P,QAAzD;AACA,YAAMiQ,QAAQ,GAAGD,OAAO,CAACC,QAAR,EAAjB;;AACA,UAAIH,UAAU,IAAI3C,KAAK,CAAC+C,MAAxB,EAAgC;AAC5B;AACA/C,QAAAA,KAAK,CAACgD,cAAN;AACA,aAAK3B,KAAL,GAH4B,CAI5B;AACA;AACH,OAND,MAOK,IAAI,CAACyB,QAAD,KAAcJ,OAAO,KAAK1P,KAAZ,IAAqB0P,OAAO,KAAKzP,KAA/C,KAAyD4P,OAAO,CAACQ,UAAjE,IACL,CAACnQ,cAAc,CAAC8M,KAAD,CADd,EACuB;AACxBA,QAAAA,KAAK,CAACgD,cAAN;;AACAH,QAAAA,OAAO,CAACQ,UAAR,CAAmBC,qBAAnB;AACH,OAJI,MAKA,IAAI,CAACR,QAAD,IAAa,KAAKzF,SAAlB,IAA+BqF,OAAO,KAAKvP,CAA3C,IAAgD6M,KAAK,CAACuD,OAA1D,EAAmE;AACpEvD,QAAAA,KAAK,CAACgD,cAAN;AACA,cAAMQ,oBAAoB,GAAG,KAAK/F,OAAL,CAAagG,IAAb,CAAkBC,GAAG,IAAI,CAACA,GAAG,CAACzB,QAAL,IAAiB,CAACyB,GAAG,CAACxB,QAA/C,CAA7B;AACA,aAAKzE,OAAL,CAAayC,OAAb,CAAqBtC,MAAM,IAAI;AAC3B,cAAI,CAACA,MAAM,CAACqE,QAAZ,EAAsB;AAClBuB,YAAAA,oBAAoB,GAAG5F,MAAM,CAACuC,MAAP,EAAH,GAAqBvC,MAAM,CAACyC,QAAP,EAAzC;AACH;AACJ,SAJD;AAKH,OARI,MASA;AACD,cAAMsD,sBAAsB,GAAGd,OAAO,CAACe,eAAvC;AACAf,QAAAA,OAAO,CAACK,SAAR,CAAkBlD,KAAlB;;AACA,YAAI,KAAK3C,SAAL,IAAkBsF,UAAlB,IAAgC3C,KAAK,CAAC6D,QAAtC,IAAkDhB,OAAO,CAACQ,UAA1D,IACAR,OAAO,CAACe,eAAR,KAA4BD,sBADhC,EACwD;AACpDd,UAAAA,OAAO,CAACQ,UAAR,CAAmBC,qBAAnB;AACH;AACJ;AACJ;;AACDQ,IAAAA,QAAQ,GAAG;AACP,UAAI,CAAC,KAAK7B,QAAV,EAAoB;AAChB,aAAK/E,QAAL,GAAgB,IAAhB;AACA,aAAK2B,YAAL,CAAkB5H,IAAlB;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACI8M,IAAAA,OAAO,GAAG;AACN,WAAK7G,QAAL,GAAgB,KAAhB;;AACA,UAAI,CAAC,KAAK+E,QAAN,IAAkB,CAAC,KAAKrC,SAA5B,EAAuC;AACnC,aAAK9C,UAAL;;AACA,aAAKpB,kBAAL,CAAwBgG,YAAxB;;AACA,aAAK7C,YAAL,CAAkB5H,IAAlB;AACH;AACJ;AACD;AACJ;AACA;;;AACI+M,IAAAA,WAAW,GAAG;AACV,WAAKC,WAAL,CAAiBC,cAAjB,CAAgCvG,IAAhC,CAAqC/J,IAAI,CAAC,CAAD,CAAzC,EAA8C8L,SAA9C,CAAwD,MAAM;AAC1D,aAAKhE,kBAAL,CAAwByI,aAAxB;;AACA,aAAKC,mBAAL;AACH,OAHD;AAIH;AACD;;;AACA3M,IAAAA,cAAc,GAAG;AACb,aAAO,KAAKqE,gBAAL,GAAyB,OAAM,KAAKA,gBAAL,CAAsBuI,KAAM,EAA3D,GAA+D,EAAtE;AACH;AACD;;;AACS,QAALlC,KAAK,GAAG;AACR,aAAO,CAAC,KAAKpD,eAAN,IAAyB,KAAKA,eAAL,CAAqBuF,OAArB,EAAhC;AACH;;AACDpF,IAAAA,oBAAoB,GAAG;AACnB;AACA;AACAqF,MAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AACzB,aAAKlF,oBAAL,CAA0B,KAAK7E,SAAL,GAAiB,KAAKA,SAAL,CAAeN,KAAhC,GAAwC,KAAK+E,MAAvE;;AACA,aAAKN,YAAL,CAAkB5H,IAAlB;AACH,OAHD;AAIH;AACD;AACJ;AACA;AACA;;;AACIsI,IAAAA,oBAAoB,CAACnF,KAAD,EAAQ;AACxB,WAAK2E,eAAL,CAAqBmD,QAArB,CAA8BhC,OAA9B,CAAsCtC,MAAM,IAAIA,MAAM,CAAC8G,iBAAP,EAAhD;;AACA,WAAK3F,eAAL,CAAqB4F,KAArB;;AACA,UAAI,KAAK7M,QAAL,IAAiBsC,KAArB,EAA4B;AACxB,YAAI,CAACiF,KAAK,CAACC,OAAN,CAAclF,KAAd,CAAD,KAA0B,OAAOmB,SAAP,KAAqB,WAArB,IAAoCA,SAA9D,CAAJ,EAA8E;AAC1E,gBAAMzC,8BAA8B,EAApC;AACH;;AACDsB,QAAAA,KAAK,CAAC8F,OAAN,CAAe0E,YAAD,IAAkB,KAAKC,YAAL,CAAkBD,YAAlB,CAAhC;;AACA,aAAKE,WAAL;AACH,OAND,MAOK;AACD,cAAMC,mBAAmB,GAAG,KAAKF,YAAL,CAAkBzK,KAAlB,CAA5B,CADC,CAED;AACA;;;AACA,YAAI2K,mBAAJ,EAAyB;AACrB,eAAK/D,WAAL,CAAiBgE,gBAAjB,CAAkCD,mBAAlC;AACH,SAFD,MAGK,IAAI,CAAC,KAAKnF,SAAV,EAAqB;AACtB;AACA;AACA,eAAKoB,WAAL,CAAiBgE,gBAAjB,CAAkC,CAAC,CAAnC;AACH;AACJ;;AACD,WAAKtJ,kBAAL,CAAwBgG,YAAxB;AACH;AACD;AACJ;AACA;AACA;;;AACImD,IAAAA,YAAY,CAACzK,KAAD,EAAQ;AAChB,YAAM2K,mBAAmB,GAAG,KAAKtH,OAAL,CAAawH,IAAb,CAAmBrH,MAAD,IAAY;AACtD;AACA;AACA,YAAI,KAAKmB,eAAL,CAAqBmG,UAArB,CAAgCtH,MAAhC,CAAJ,EAA6C;AACzC,iBAAO,KAAP;AACH;;AACD,YAAI;AACA;AACA,iBAAOA,MAAM,CAACxD,KAAP,IAAgB,IAAhB,IAAwB,KAAKmC,YAAL,CAAkBqB,MAAM,CAACxD,KAAzB,EAAgCA,KAAhC,CAA/B;AACH,SAHD,CAIA,OAAO+K,KAAP,EAAc;AACV,cAAI,OAAO5J,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AAC/C;AACA6J,YAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACH;;AACD,iBAAO,KAAP;AACH;AACJ,OAjB2B,CAA5B;;AAkBA,UAAIJ,mBAAJ,EAAyB;AACrB,aAAKhG,eAAL,CAAqBoB,MAArB,CAA4B4E,mBAA5B;AACH;;AACD,aAAOA,mBAAP;AACH;AACD;;;AACAjF,IAAAA,eAAe,GAAG;AACd,WAAKkB,WAAL,GAAmB,IAAI1O,0BAAJ,CAA+B,KAAKmL,OAApC,EACdwD,aADc,CACA,KAAK1C,0BADL,EAEd+G,uBAFc,GAGd9D,yBAHc,CAGY,KAAKG,MAAL,KAAgB,KAAhB,GAAwB,KAHpC,EAId4D,cAJc,GAKdC,uBALc,CAKU,CAAC,UAAD,CALV,CAAnB;;AAMA,WAAKxE,WAAL,CAAiByE,MAAjB,CAAwB9H,IAAxB,CAA6B3J,SAAS,CAAC,KAAK4I,QAAN,CAAtC,EAAuD8C,SAAvD,CAAiE,MAAM;AACnE,YAAI,KAAKE,SAAT,EAAoB;AAChB;AACA;AACA,cAAI,CAAC,KAAK9H,QAAN,IAAkB,KAAKkJ,WAAL,CAAiBqC,UAAvC,EAAmD;AAC/C,iBAAKrC,WAAL,CAAiBqC,UAAjB,CAA4BC,qBAA5B;AACH,WALe,CAMhB;AACA;;;AACA,eAAKoC,KAAL;AACA,eAAKrE,KAAL;AACH;AACJ,OAZD;;AAaA,WAAKL,WAAL,CAAiB2E,MAAjB,CAAwBhI,IAAxB,CAA6B3J,SAAS,CAAC,KAAK4I,QAAN,CAAtC,EAAuD8C,SAAvD,CAAiE,MAAM;AACnE,YAAI,KAAKpD,UAAL,IAAmB,KAAKsJ,KAA5B,EAAmC;AAC/B,eAAKC,qBAAL,CAA2B,KAAK7E,WAAL,CAAiB4C,eAAjB,IAAoC,CAA/D;AACH,SAFD,MAGK,IAAI,CAAC,KAAKtH,UAAN,IAAoB,CAAC,KAAKxE,QAA1B,IAAsC,KAAKkJ,WAAL,CAAiBqC,UAA3D,EAAuE;AACxE,eAAKrC,WAAL,CAAiBqC,UAAjB,CAA4BC,qBAA5B;AACH;AACJ,OAPD;AAQH;AACD;;;AACAhD,IAAAA,aAAa,GAAG;AACZ,YAAMwF,kBAAkB,GAAGrS,KAAK,CAAC,KAAKgK,OAAL,CAAaC,OAAd,EAAuB,KAAKd,QAA5B,CAAhC;AACA,WAAKY,sBAAL,CAA4BG,IAA5B,CAAiC3J,SAAS,CAAC8R,kBAAD,CAA1C,EAAgEpG,SAAhE,CAA0EM,KAAK,IAAI;AAC/E,aAAK+F,SAAL,CAAe/F,KAAK,CAAC7F,MAArB,EAA6B6F,KAAK,CAACgG,WAAnC;;AACA,YAAIhG,KAAK,CAACgG,WAAN,IAAqB,CAAC,KAAKlO,QAA3B,IAAuC,KAAKwE,UAAhD,EAA4D;AACxD,eAAK+E,KAAL;AACA,eAAKqE,KAAL;AACH;AACJ,OAND,EAFY,CASZ;AACA;;AACAjS,MAAAA,KAAK,CAAC,GAAG,KAAKgK,OAAL,CAAa3J,GAAb,CAAiB8J,MAAM,IAAIA,MAAM,CAACqI,aAAlC,CAAJ,CAAL,CACKtI,IADL,CACU3J,SAAS,CAAC8R,kBAAD,CADnB,EAEKpG,SAFL,CAEe,MAAM;AACjB,aAAKhE,kBAAL,CAAwBgG,YAAxB;;AACA,aAAK7C,YAAL,CAAkB5H,IAAlB;AACH,OALD;AAMH;AACD;;;AACA8O,IAAAA,SAAS,CAACnI,MAAD,EAASoI,WAAT,EAAsB;AAC3B,YAAME,WAAW,GAAG,KAAKnH,eAAL,CAAqBmG,UAArB,CAAgCtH,MAAhC,CAApB;;AACA,UAAIA,MAAM,CAACxD,KAAP,IAAgB,IAAhB,IAAwB,CAAC,KAAKiD,SAAlC,EAA6C;AACzCO,QAAAA,MAAM,CAACyC,QAAP;;AACA,aAAKtB,eAAL,CAAqB4F,KAArB;;AACA,YAAI,KAAKvK,KAAL,IAAc,IAAlB,EAAwB;AACpB,eAAK+L,iBAAL,CAAuBvI,MAAM,CAACxD,KAA9B;AACH;AACJ,OAND,MAOK;AACD,YAAI8L,WAAW,KAAKtI,MAAM,CAACsE,QAA3B,EAAqC;AACjCtE,UAAAA,MAAM,CAACsE,QAAP,GAAkB,KAAKnD,eAAL,CAAqBoB,MAArB,CAA4BvC,MAA5B,CAAlB,GACI,KAAKmB,eAAL,CAAqBsB,QAArB,CAA8BzC,MAA9B,CADJ;AAEH;;AACD,YAAIoI,WAAJ,EAAiB;AACb,eAAKhF,WAAL,CAAiBoF,aAAjB,CAA+BxI,MAA/B;AACH;;AACD,YAAI,KAAK9F,QAAT,EAAmB;AACf,eAAKgN,WAAL;;AACA,cAAIkB,WAAJ,EAAiB;AACb;AACA;AACA;AACA;AACA,iBAAKN,KAAL;AACH;AACJ;AACJ;;AACD,UAAIQ,WAAW,KAAK,KAAKnH,eAAL,CAAqBmG,UAArB,CAAgCtH,MAAhC,CAApB,EAA6D;AACzD,aAAKuI,iBAAL;AACH;;AACD,WAAKtH,YAAL,CAAkB5H,IAAlB;AACH;AACD;;;AACA6N,IAAAA,WAAW,GAAG;AACV,UAAI,KAAKhN,QAAT,EAAmB;AACf,cAAM2F,OAAO,GAAG,KAAKA,OAAL,CAAa4I,OAAb,EAAhB;;AACA,aAAKtH,eAAL,CAAqBuH,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,iBAAO,KAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBF,CAApB,EAAuBC,CAAvB,EAA0B/I,OAA1B,CAAtB,GACHA,OAAO,CAACiJ,OAAR,CAAgBH,CAAhB,IAAqB9I,OAAO,CAACiJ,OAAR,CAAgBF,CAAhB,CADzB;AAEH,SAHD;;AAIA,aAAK3H,YAAL,CAAkB5H,IAAlB;AACH;AACJ;AACD;;;AACAkP,IAAAA,iBAAiB,CAACQ,aAAD,EAAgB;AAC7B,UAAIC,WAAW,GAAG,IAAlB;;AACA,UAAI,KAAK9O,QAAT,EAAmB;AACf8O,QAAAA,WAAW,GAAG,KAAK1E,QAAL,CAAcpO,GAAd,CAAkB8J,MAAM,IAAIA,MAAM,CAACxD,KAAnC,CAAd;AACH,OAFD,MAGK;AACDwM,QAAAA,WAAW,GAAG,KAAK1E,QAAL,GAAgB,KAAKA,QAAL,CAAc9H,KAA9B,GAAsCuM,aAApD;AACH;;AACD,WAAKxH,MAAL,GAAcyH,WAAd;AACA,WAAKxI,WAAL,CAAiByI,IAAjB,CAAsBD,WAAtB;;AACA,WAAK/J,SAAL,CAAe+J,WAAf;;AACA,WAAKzI,eAAL,CAAqB0I,IAArB,CAA0B,KAAKC,eAAL,CAAqBF,WAArB,CAA1B;;AACA,WAAKlL,kBAAL,CAAwBgG,YAAxB;AACH;AACD;AACJ;AACA;AACA;;;AACID,IAAAA,uBAAuB,GAAG;AACtB,UAAI,KAAKT,WAAT,EAAsB;AAClB,YAAI,KAAKmB,KAAT,EAAgB;AACZ,eAAKnB,WAAL,CAAiB+F,kBAAjB;AACH,SAFD,MAGK;AACD,eAAK/F,WAAL,CAAiBoF,aAAjB,CAA+B,KAAKrH,eAAL,CAAqBmD,QAArB,CAA8B,CAA9B,CAA/B;AACH;AACJ;AACJ;AACD;;;AACAX,IAAAA,QAAQ,GAAG;AACP,UAAIpF,EAAJ;;AACA,aAAO,CAAC,KAAKG,UAAN,IAAoB,CAAC,KAAK2F,QAA1B,IAAsC,CAAC,CAAC9F,EAAE,GAAG,KAAKsB,OAAX,MAAwB,IAAxB,IAAgCtB,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAAC6K,MAA7D,IAAuE,CAApH;AACH;AACD;;;AACAtB,IAAAA,KAAK,CAACjI,OAAD,EAAU;AACX,WAAKnD,WAAL,CAAiBqG,aAAjB,CAA+B+E,KAA/B,CAAqCjI,OAArC;AACH;AACD;;;AACAvF,IAAAA,uBAAuB,GAAG;AACtB,UAAIiE,EAAJ;;AACA,UAAI,KAAKlE,SAAT,EAAoB;AAChB,eAAO,IAAP;AACH;;AACD,YAAMgP,OAAO,GAAG,CAAC9K,EAAE,GAAG,KAAKL,gBAAX,MAAiC,IAAjC,IAAyCK,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAAC+K,UAAH,EAAlF;AACA,YAAMC,eAAe,GAAIF,OAAO,GAAGA,OAAO,GAAG,GAAb,GAAmB,EAAnD;AACA,aAAO,KAAKG,cAAL,GAAsBD,eAAe,GAAG,KAAKC,cAA7C,GAA8DH,OAArE;AACH;AACD;;;AACAI,IAAAA,wBAAwB,GAAG;AACvB,UAAI,KAAKzH,SAAL,IAAkB,KAAKoB,WAAvB,IAAsC,KAAKA,WAAL,CAAiBqC,UAA3D,EAAuE;AACnE,eAAO,KAAKrC,WAAL,CAAiBqC,UAAjB,CAA4BrL,EAAnC;AACH;;AACD,aAAO,IAAP;AACH;AACD;;;AACAyI,IAAAA,yBAAyB,GAAG;AACxB,UAAItE,EAAJ;;AACA,UAAI,KAAKlE,SAAT,EAAoB;AAChB,eAAO,IAAP;AACH;;AACD,YAAMgP,OAAO,GAAG,CAAC9K,EAAE,GAAG,KAAKL,gBAAX,MAAiC,IAAjC,IAAyCK,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAAC+K,UAAH,EAAlF;AACA,UAAI9M,KAAK,GAAG,CAAC6M,OAAO,GAAGA,OAAO,GAAG,GAAb,GAAmB,EAA3B,IAAiC,KAAKlK,QAAlD;;AACA,UAAI,KAAKqK,cAAT,EAAyB;AACrBhN,QAAAA,KAAK,IAAI,MAAM,KAAKgN,cAApB;AACH;;AACD,aAAOhN,KAAP;AACH;AACD;;;AACAuF,IAAAA,mBAAmB,CAAC2H,MAAD,EAAS;AACxB,WAAKvJ,YAAL,CAAkB8I,IAAlB,CAAuBS,MAAvB;AACH;AACD;AACJ;AACA;AACA;;;AACIC,IAAAA,iBAAiB,CAACC,GAAD,EAAM;AACnB,WAAKC,gBAAL,GAAwBD,GAAG,CAACjF,IAAJ,CAAS,GAAT,CAAxB;AACH;AACD;AACJ;AACA;AACA;;;AACImF,IAAAA,gBAAgB,GAAG;AACf,WAAKhC,KAAL;AACA,WAAKpE,IAAL;AACH;AACD;AACJ;AACA;AACA;;;AACwB,QAAhBqG,gBAAgB,GAAG;AACnB,aAAO,KAAKrL,UAAL,IAAmB,CAAC,KAAK6F,KAAzB,IAAmC,KAAKjF,QAAL,IAAiB,CAAC,CAAC,KAAK0B,YAAlE;AACH;;AApoB4C;;AAsoBjDpD,EAAAA,cAAc,CAACX,IAAf,GAAsB,SAAS+M,sBAAT,CAAgC7M,CAAhC,EAAmC;AAAE,WAAO,KAAKA,CAAC,IAAIS,cAAV,EAA0BhH,MAAM,CAACqT,iBAAP,CAAyBpT,MAAM,CAACrC,aAAhC,CAA1B,EAA0EoC,MAAM,CAACqT,iBAAP,CAAyBrT,MAAM,CAACpE,iBAAhC,CAA1E,EAA8HoE,MAAM,CAACqT,iBAAP,CAAyBrT,MAAM,CAACnE,MAAhC,CAA9H,EAAuKmE,MAAM,CAACqT,iBAAP,CAAyBnT,MAAM,CAAClD,iBAAhC,CAAvK,EAA2NgD,MAAM,CAACqT,iBAAP,CAAyBrT,MAAM,CAAClE,UAAhC,CAA3N,EAAwQkE,MAAM,CAACqT,iBAAP,CAAyBlT,MAAM,CAACnC,cAAhC,EAAgD,CAAhD,CAAxQ,EAA4TgC,MAAM,CAACqT,iBAAP,CAAyBjT,MAAM,CAACxB,MAAhC,EAAwC,CAAxC,CAA5T,EAAwWoB,MAAM,CAACqT,iBAAP,CAAyBjT,MAAM,CAACvB,kBAAhC,EAAoD,CAApD,CAAxW,EAAgamB,MAAM,CAACqT,iBAAP,CAAyB5V,cAAzB,EAAyC,CAAzC,CAAha,EAA6cuC,MAAM,CAACqT,iBAAP,CAAyBjT,MAAM,CAACtB,SAAhC,EAA2C,EAA3C,CAA7c,EAA6fkB,MAAM,CAACsT,iBAAP,CAAyB,UAAzB,CAA7f,EAAmiBtT,MAAM,CAACqT,iBAAP,CAAyBtO,0BAAzB,CAAniB,EAAylB/E,MAAM,CAACqT,iBAAP,CAAyBhT,MAAM,CAACtC,aAAhC,CAAzlB,EAAyoBiC,MAAM,CAACqT,iBAAP,CAAyBjO,iBAAzB,EAA4C,CAA5C,CAAzoB,CAAP;AAAksB,GAA7vB;;AACA4B,EAAAA,cAAc,CAACR,IAAf,GAAsB,aAAcxG,MAAM,CAACyG,iBAAP,CAAyB;AAAEC,IAAAA,IAAI,EAAEM,cAAR;AAAwBuM,IAAAA,SAAS,EAAE,SAASC,oBAAT,CAA8B5S,EAA9B,EAAkCC,GAAlC,EAAuC;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AAC7IZ,QAAAA,MAAM,CAACyT,WAAP,CAAmBhT,GAAnB,EAAwB,CAAxB;AACAT,QAAAA,MAAM,CAACyT,WAAP,CAAmB/S,GAAnB,EAAwB,CAAxB;AACAV,QAAAA,MAAM,CAACyT,WAAP,CAAmBnY,mBAAnB,EAAwC,CAAxC;AACH;;AAAC,UAAIsF,EAAE,GAAG,CAAT,EAAY;AACV,YAAI8S,EAAJ;;AACA1T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAACpB,OAAJ,GAAciU,EAAE,CAACG,KAAtE;AACA7T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAACuQ,KAAJ,GAAYsC,EAAE,CAACG,KAApE;AACA7T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAAC4O,WAAJ,GAAkBiE,EAAE,CAACG,KAA1E;AACH;AAAE,KATsD;AASpDC,IAAAA,MAAM,EAAE;AAAErQ,MAAAA,SAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAAb;AAA0CD,MAAAA,EAAE,EAAE,IAA9C;AAAoDnC,MAAAA,WAAW,EAAE,aAAjE;AAAgFiJ,MAAAA,QAAQ,EAAE,UAA1F;AAAsGhH,MAAAA,QAAQ,EAAE,UAAhH;AAA4HyF,MAAAA,sBAAsB,EAAE,wBAApJ;AAA8KyB,MAAAA,WAAW,EAAE,aAA3L;AAA0M5E,MAAAA,KAAK,EAAE,OAAjN;AAA0NkE,MAAAA,yBAAyB,EAAE,2BAArP;AAAkRzG,MAAAA,UAAU,EAAE,YAA9R;AAA4SuP,MAAAA,cAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAA5T;AAAmWmB,MAAAA,iBAAiB,EAAE,mBAAtX;AAA2Y9B,MAAAA,cAAc,EAAE;AAA3Z,KAT4C;AASmY+B,IAAAA,OAAO,EAAE;AAAEzK,MAAAA,YAAY,EAAE,cAAhB;AAAgCC,MAAAA,aAAa,EAAE,QAA/C;AAAyDE,MAAAA,aAAa,EAAE,QAAxE;AAAkFC,MAAAA,eAAe,EAAE,iBAAnG;AAAsHC,MAAAA,WAAW,EAAE;AAAnI,KAT5Y;AASgiBhD,IAAAA,QAAQ,EAAE,CAAC5G,MAAM,CAACiU,0BAAR,EAAoCjU,MAAM,CAACkU,oBAA3C;AAT1iB,GAAzB,CAApC;SAvoBMlN,c;;;AAwrBN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOD,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AA6EC,CA7EhB;;IA8EMoN,S;AAAN,QAAMA,SAAN,SAAwBnN,cAAxB,CAAuC;AACnCtB,IAAAA,WAAW,GAAG;AACV,YAAM,GAAG0O,SAAT;AACA;;AACA,WAAKC,UAAL,GAAkB,CAAlB;AACA;;AACA,WAAKjR,gBAAL,GAAwB,CAAxB;AACA;;AACA,WAAKD,gBAAL,GAAwB,KAAxB;AACA;AACR;AACA;AACA;AACA;;AACQ,WAAKmR,QAAL,GAAgB,CAAhB;AACA,WAAKC,UAAL,GAAkB,CACd;AACIC,QAAAA,OAAO,EAAE,OADb;AAEIC,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,QAAQ,EAAE,OAHd;AAIIC,QAAAA,QAAQ,EAAE;AAJd,OADc,EAOd;AACIH,QAAAA,OAAO,EAAE,OADb;AAEIC,QAAAA,OAAO,EAAE,QAFb;AAGIC,QAAAA,QAAQ,EAAE,OAHd;AAIIC,QAAAA,QAAQ,EAAE;AAJd,OAPc,CAAlB;AAcH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,IAAAA,uBAAuB,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,SAA9B,EAAyC;AAC5D,YAAMC,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,YAAMC,yBAAyB,GAAGF,UAAU,GAAGH,aAA/C;AACA,YAAMM,gBAAgB,GAAGH,UAAU,GAAG,CAAtC,CAH4D,CAI5D;AACA;AACA;AACA;;AACA,YAAMI,qBAAqB,GAAGF,yBAAyB,GAAGJ,YAA5B,GAA2CK,gBAAzE;AACA,aAAOE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYH,qBAAZ,CAAT,EAA6CL,SAA7C,CAAP;AACH;;AACD9J,IAAAA,QAAQ,GAAG;AACP,YAAMA,QAAN;;AACA,WAAKhE,cAAL,CAAoBkK,MAApB,GAA6BhI,IAA7B,CAAkC3J,SAAS,CAAC,KAAK4I,QAAN,CAA3C,EAA4D8C,SAA5D,CAAsE,MAAM;AACxE,YAAI,KAAKE,SAAT,EAAoB;AAChB,eAAKoK,YAAL,GAAoB,KAAK/V,OAAL,CAAa0M,aAAb,CAA2BsJ,qBAA3B,EAApB;;AACA,eAAKvO,kBAAL,CAAwBgG,YAAxB;AACH;AACJ,OALD;AAMH;;AACDJ,IAAAA,IAAI,GAAG;AACH,UAAI,MAAMC,QAAN,EAAJ,EAAsB;AAClB,cAAMD,IAAN;AACA,aAAK0I,YAAL,GAAoB,KAAK/V,OAAL,CAAa0M,aAAb,CAA2BsJ,qBAA3B,EAApB,CAFkB,CAGlB;AACA;;AACA,aAAKrS,gBAAL,GACI8G,QAAQ,CAACwL,gBAAgB,CAAC,KAAKjW,OAAL,CAAa0M,aAAd,CAAhB,CAA6CwJ,QAA7C,IAAyD,GAA1D,CADZ;;AAEA,aAAKC,yBAAL,GAPkB,CAQlB;;;AACA,aAAKzO,OAAL,CAAamC,QAAb,CAAsBH,IAAtB,CAA2B/J,IAAI,CAAC,CAAD,CAA/B,EAAoC8L,SAApC,CAA8C,MAAM;AAChD,cAAI,KAAK9H,gBAAL,IAAyB,KAAKqM,WAAL,CAAiBoG,UAA1C,IACA,KAAKpG,WAAL,CAAiBoG,UAAjB,CAA4BC,cADhC,EACgD;AAC5C,iBAAKrG,WAAL,CAAiBoG,UAAjB,CAA4BC,cAA5B,CAA2ChW,KAA3C,CAAiD6V,QAAjD,GAA6D,GAAE,KAAKvS,gBAAiB,IAArF;AACH;AACJ,SALD;AAMH;AACJ;AACD;;;AACAiO,IAAAA,qBAAqB,CAAC0E,KAAD,EAAQ;AACzB,YAAMC,UAAU,GAAG/Y,6BAA6B,CAAC8Y,KAAD,EAAQ,KAAK9M,OAAb,EAAsB,KAAKgN,YAA3B,CAAhD;;AACA,YAAMjB,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,UAAIc,KAAK,KAAK,CAAV,IAAeC,UAAU,KAAK,CAAlC,EAAqC;AACjC;AACA;AACA;AACA,aAAK5E,KAAL,CAAWjF,aAAX,CAAyB+J,SAAzB,GAAqC,CAArC;AACH,OALD,MAMK;AACD,aAAK9E,KAAL,CAAWjF,aAAX,CAAyB+J,SAAzB,GAAqChZ,wBAAwB,CAAC,CAAC6Y,KAAK,GAAGC,UAAT,IAAuBhB,UAAxB,EAAoCA,UAApC,EAAgD,KAAK5D,KAAL,CAAWjF,aAAX,CAAyB+J,SAAzE,EAAoFzR,uBAApF,CAA7D;AACH;AACJ;;AACDmL,IAAAA,mBAAmB,GAAG;AAClB,WAAKuG,wBAAL;;AACA,WAAK/E,KAAL,CAAWjF,aAAX,CAAyB+J,SAAzB,GAAqC,KAAK7B,UAA1C;AACH;;AACDlJ,IAAAA,mBAAmB,CAAC2H,MAAD,EAAS;AACxB,UAAI,KAAK1H,SAAT,EAAoB;AAChB,aAAKiJ,UAAL,GAAkB,CAAlB;AACH,OAFD,MAGK;AACD,aAAK5E,WAAL,CAAiB2G,OAAjB,GAA2B,CAA3B;;AACA,aAAKlP,kBAAL,CAAwBgG,YAAxB;AACH;;AACD,YAAM/B,mBAAN,CAA0B2H,MAA1B;AACH;;AACDR,IAAAA,eAAe,CAAC1M,KAAD,EAAQ;AACnB,aAAO,IAAIH,eAAJ,CAAoB,IAApB,EAA0BG,KAA1B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIuQ,IAAAA,wBAAwB,GAAG;AACvB,YAAME,WAAW,GAAG,KAAK5G,WAAL,CAAiBoG,UAAjB,CAA4BC,cAA5B,CAA2CL,qBAA3C,EAApB;;AACA,YAAMa,YAAY,GAAG,KAAKrP,cAAL,CAAoBsP,eAApB,EAArB;;AACA,YAAMC,KAAK,GAAG,KAAKrJ,MAAL,EAAd;;AACA,YAAMsJ,YAAY,GAAG,KAAKnT,QAAL,GAAgBuB,+BAA+B,GAAGH,sBAAlD,GACjBA,sBAAsB,GAAG,CAD7B;AAEA,UAAI0R,OAAJ,CANuB,CAOvB;;AACA,UAAI,KAAK9S,QAAT,EAAmB;AACf8S,QAAAA,OAAO,GAAGvR,+BAAV;AACH,OAFD,MAGK,IAAI,KAAKkE,sBAAT,EAAiC;AAClCqN,QAAAA,OAAO,GAAG1R,sBAAV;AACH,OAFI,MAGA;AACD,YAAIgJ,QAAQ,GAAG,KAAKnD,eAAL,CAAqBmD,QAArB,CAA8B,CAA9B,KAAoC,KAAKzE,OAAL,CAAa4K,KAAhE;AACAuC,QAAAA,OAAO,GAAG1I,QAAQ,IAAIA,QAAQ,CAACgJ,KAArB,GAA6B/R,6BAA7B,GAA6DD,sBAAvE;AACH,OAjBsB,CAkBvB;;;AACA,UAAI,CAAC8R,KAAL,EAAY;AACRJ,QAAAA,OAAO,IAAI,CAAC,CAAZ;AACH,OArBsB,CAsBvB;;;AACA,YAAMO,YAAY,GAAG,KAAKN,WAAW,CAACO,IAAZ,GAAmBR,OAAnB,IAA8BI,KAAK,GAAGC,YAAH,GAAkB,CAArD,CAAL,CAArB;AACA,YAAMI,aAAa,GAAGR,WAAW,CAACS,KAAZ,GAAoBV,OAApB,GAA8BE,YAAY,CAACS,KAA3C,IACfP,KAAK,GAAG,CAAH,GAAOC,YADG,CAAtB,CAxBuB,CA0BvB;;AACA,UAAIE,YAAY,GAAG,CAAnB,EAAsB;AAClBP,QAAAA,OAAO,IAAIO,YAAY,GAAG7R,6BAA1B;AACH,OAFD,MAGK,IAAI+R,aAAa,GAAG,CAApB,EAAuB;AACxBT,QAAAA,OAAO,IAAIS,aAAa,GAAG/R,6BAA3B;AACH,OAhCsB,CAiCvB;AACA;AACA;;;AACA,WAAK2K,WAAL,CAAiB2G,OAAjB,GAA2Bf,IAAI,CAAC2B,KAAL,CAAWZ,OAAX,CAA3B;;AACA,WAAK3G,WAAL,CAAiBoG,UAAjB,CAA4BoB,cAA5B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,IAAAA,wBAAwB,CAACrC,aAAD,EAAgBC,YAAhB,EAA8BC,SAA9B,EAAyC;AAC7D,YAAMC,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,YAAMkC,sBAAsB,GAAG,CAACnC,UAAU,GAAG,KAAKQ,YAAL,CAAkB4B,MAAhC,IAA0C,CAAzE;AACA,YAAMC,mBAAmB,GAAGhC,IAAI,CAACiC,KAAL,CAAW7S,uBAAuB,GAAGuQ,UAArC,CAA5B;AACA,UAAIuC,wBAAJ,CAJ6D,CAK7D;;AACA,UAAI,KAAKxO,sBAAT,EAAiC;AAC7B,eAAO,CAAP;AACH;;AACD,UAAI,KAAKsL,UAAL,KAAoB,CAAxB,EAA2B;AACvBkD,QAAAA,wBAAwB,GAAG1C,aAAa,GAAGG,UAA3C;AACH,OAFD,MAGK,IAAI,KAAKX,UAAL,KAAoBU,SAAxB,EAAmC;AACpC,cAAMyC,mBAAmB,GAAG,KAAKC,aAAL,KAAuBJ,mBAAnD;AACA,cAAMK,oBAAoB,GAAG7C,aAAa,GAAG2C,mBAA7C,CAFoC,CAGpC;AACA;;AACA,YAAIG,iBAAiB,GAAG3C,UAAU,GAAG,CAAC,KAAKyC,aAAL,KAAuBzC,UAAvB,GAAoCvQ,uBAArC,IAAgEuQ,UAArG,CALoC,CAMpC;AACA;AACA;AACA;;AACAuC,QAAAA,wBAAwB,GAAGG,oBAAoB,GAAG1C,UAAvB,GAAoC2C,iBAA/D;AACH,OAXI,MAYA;AACD;AACA;AACA;AACAJ,QAAAA,wBAAwB,GAAGzC,YAAY,GAAGE,UAAU,GAAG,CAAvD;AACH,OA7B4D,CA8B7D;AACA;AACA;;;AACA,aAAOK,IAAI,CAAC2B,KAAL,CAAWO,wBAAwB,GAAG,CAAC,CAA5B,GAAgCJ,sBAA3C,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIS,IAAAA,2BAA2B,CAAC7C,SAAD,EAAY;AACnC,YAAMC,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,YAAMqB,YAAY,GAAG,KAAKrP,cAAL,CAAoBsP,eAApB,EAArB;;AACA,YAAMsB,iBAAiB,GAAG,KAAKrC,YAAL,CAAkBsC,GAAlB,GAAwBhT,6BAAlD;AACA,YAAMiT,oBAAoB,GAAGzB,YAAY,CAACc,MAAb,GAAsB,KAAK5B,YAAL,CAAkBwC,MAAxC,GAAiDlT,6BAA9E;AACA,YAAMmT,cAAc,GAAG5C,IAAI,CAAC6C,GAAL,CAAS,KAAK5D,QAAd,CAAvB;AACA,YAAM6D,gBAAgB,GAAG9C,IAAI,CAACC,GAAL,CAAS,KAAKmC,aAAL,KAAuBzC,UAAhC,EAA4CvQ,uBAA5C,CAAzB;AACA,YAAM2T,iBAAiB,GAAGD,gBAAgB,GAAGF,cAAnB,GAAoC,KAAKzC,YAAL,CAAkB4B,MAAhF;;AACA,UAAIgB,iBAAiB,GAAGL,oBAAxB,EAA8C;AAC1C,aAAKM,cAAL,CAAoBD,iBAApB,EAAuCL,oBAAvC;AACH,OAFD,MAGK,IAAIE,cAAc,GAAGJ,iBAArB,EAAwC;AACzC,aAAKS,gBAAL,CAAsBL,cAAtB,EAAsCJ,iBAAtC,EAAyD9C,SAAzD;AACH,OAFI,MAGA;AACD,aAAK5R,gBAAL,GAAwB,KAAKoV,uBAAL,EAAxB;AACH;AACJ;AACD;;;AACAF,IAAAA,cAAc,CAACD,iBAAD,EAAoBL,oBAApB,EAA0C;AACpD;AACA,YAAMS,qBAAqB,GAAGnD,IAAI,CAAC2B,KAAL,CAAWoB,iBAAiB,GAAGL,oBAA/B,CAA9B,CAFoD,CAGpD;AACA;;AACA,WAAK1D,UAAL,IAAmBmE,qBAAnB;AACA,WAAKlE,QAAL,IAAiBkE,qBAAjB;AACA,WAAKrV,gBAAL,GAAwB,KAAKoV,uBAAL,EAAxB,CAPoD,CAQpD;AACA;AACA;;AACA,UAAI,KAAKlE,UAAL,IAAmB,CAAvB,EAA0B;AACtB,aAAKA,UAAL,GAAkB,CAAlB;AACA,aAAKC,QAAL,GAAgB,CAAhB;AACA,aAAKnR,gBAAL,GAAyB,gBAAzB;AACH;AACJ;AACD;;;AACAmV,IAAAA,gBAAgB,CAACL,cAAD,EAAiBJ,iBAAjB,EAAoC9C,SAApC,EAA+C;AAC3D;AACA,YAAM0D,qBAAqB,GAAGpD,IAAI,CAAC2B,KAAL,CAAWiB,cAAc,GAAGJ,iBAA5B,CAA9B,CAF2D,CAG3D;AACA;;AACA,WAAKxD,UAAL,IAAmBoE,qBAAnB;AACA,WAAKnE,QAAL,IAAiBmE,qBAAjB;AACA,WAAKtV,gBAAL,GAAwB,KAAKoV,uBAAL,EAAxB,CAP2D,CAQ3D;AACA;AACA;;AACA,UAAI,KAAKlE,UAAL,IAAmBU,SAAvB,EAAkC;AAC9B,aAAKV,UAAL,GAAkBU,SAAlB;AACA,aAAKT,QAAL,GAAgB,CAAhB;AACA,aAAKnR,gBAAL,GAAyB,aAAzB;AACA;AACH;AACJ;AACD;;;AACAyS,IAAAA,yBAAyB,GAAG;AACxB,YAAMZ,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,YAAMyD,KAAK,GAAG,KAAKjB,aAAL,EAAd;;AACA,YAAMkB,WAAW,GAAGtD,IAAI,CAACC,GAAL,CAASoD,KAAK,GAAG1D,UAAjB,EAA6BvQ,uBAA7B,CAApB;AACA,YAAMmU,qBAAqB,GAAGF,KAAK,GAAG1D,UAAtC,CAJwB,CAKxB;;AACA,YAAMD,SAAS,GAAG6D,qBAAqB,GAAGD,WAA1C,CANwB,CAOxB;;AACA,UAAIE,oBAAJ;;AACA,UAAI,KAAKlL,KAAT,EAAgB;AACZkL,QAAAA,oBAAoB,GAAG,CAAvB;AACH,OAFD,MAGK;AACDA,QAAAA,oBAAoB,GAChBxD,IAAI,CAACE,GAAL,CAAS,KAAKtM,OAAL,CAAa4I,OAAb,GAAuBK,OAAvB,CAA+B,KAAK3H,eAAL,CAAqBmD,QAArB,CAA8B,CAA9B,CAA/B,CAAT,EAA2E,CAA3E,CADJ;AAEH;;AACDmL,MAAAA,oBAAoB,IAAI5b,6BAA6B,CAAC4b,oBAAD,EAAuB,KAAK5P,OAA5B,EAAqC,KAAKgN,YAA1C,CAArD,CAhBwB,CAiBxB;AACA;;AACA,YAAMnB,YAAY,GAAG6D,WAAW,GAAG,CAAnC;AACA,WAAKtE,UAAL,GAAkB,KAAKO,uBAAL,CAA6BiE,oBAA7B,EAAmD/D,YAAnD,EAAiEC,SAAjE,CAAlB;AACA,WAAKT,QAAL,GAAgB,KAAK4C,wBAAL,CAA8B2B,oBAA9B,EAAoD/D,YAApD,EAAkEC,SAAlE,CAAhB;;AACA,WAAK6C,2BAAL,CAAiC7C,SAAjC;AACH;AACD;;;AACAwD,IAAAA,uBAAuB,GAAG;AACtB,YAAMvD,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,YAAMkC,sBAAsB,GAAG,CAACnC,UAAU,GAAG,KAAKQ,YAAL,CAAkB4B,MAAhC,IAA0C,CAAzE;AACA,YAAM3C,OAAO,GAAGY,IAAI,CAAC6C,GAAL,CAAS,KAAK5D,QAAd,IAA0B6C,sBAA1B,GAAmDnC,UAAU,GAAG,CAAhF;AACA,aAAQ,OAAMP,OAAQ,QAAtB;AACH;AACD;;;AACAQ,IAAAA,cAAc,GAAG;AACb,aAAO,KAAK7R,gBAAL,GAAwBwB,qBAA/B;AACH;AACD;;;AACA6S,IAAAA,aAAa,GAAG;AACZ,aAAO,KAAKxO,OAAL,CAAauJ,MAAb,GAAsB,KAAKyD,YAAL,CAAkBzD,MAA/C;AACH;;AApSkC;;AAsSvC2B,EAAAA,SAAS,CAAC9N,IAAV,GAAiB,aAAc,YAAY;AAAE,QAAIyS,sBAAJ;AAA4B,WAAO,SAASC,iBAAT,CAA2BxS,CAA3B,EAA8B;AAAE,aAAO,CAACuS,sBAAsB,KAAKA,sBAAsB,GAAG9Y,MAAM,CAACgZ,qBAAP,CAA6B7E,SAA7B,CAA9B,CAAvB,EAA+F5N,CAAC,IAAI4N,SAApG,CAAP;AAAwH,KAA/J;AAAkK,GAA5M,EAA/B;;AACAA,EAAAA,SAAS,CAAC8E,IAAV,GAAiB,aAAcjZ,MAAM,CAACkZ,iBAAP,CAAyB;AAAExS,IAAAA,IAAI,EAAEyN,SAAR;AAAmBxN,IAAAA,SAAS,EAAE,CAAC,CAAC,YAAD,CAAD,CAA9B;AAAgDwS,IAAAA,cAAc,EAAE,SAASC,wBAAT,CAAkCxY,EAAlC,EAAsCC,GAAtC,EAA2CwY,QAA3C,EAAqD;AAAE,UAAIzY,EAAE,GAAG,CAAT,EAAY;AACnLZ,QAAAA,MAAM,CAACsZ,cAAP,CAAsBD,QAAtB,EAAgClT,kBAAhC,EAAoD,CAApD;AACAnG,QAAAA,MAAM,CAACsZ,cAAP,CAAsBD,QAAtB,EAAgCjc,SAAhC,EAA2C,CAA3C;AACA4C,QAAAA,MAAM,CAACsZ,cAAP,CAAsBD,QAAtB,EAAgChc,YAAhC,EAA8C,CAA9C;AACH;;AAAC,UAAIuD,EAAE,GAAG,CAAT,EAAY;AACV,YAAI8S,EAAJ;;AACA1T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAACkB,aAAJ,GAAoB2R,EAAE,CAACG,KAA5E;AACA7T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAACoI,OAAJ,GAAcyK,EAAnE;AACA1T,QAAAA,MAAM,CAAC2T,cAAP,CAAsBD,EAAE,GAAG1T,MAAM,CAAC4T,WAAP,EAA3B,MAAqD/S,GAAG,CAACoV,YAAJ,GAAmBvC,EAAxE;AACH;AAAE,KATiD;AAS/C6F,IAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,UAAT,EAAqB,mBAArB,EAA0C,MAA1C,EAAkD,eAAlD,EAAmE,MAAnE,EAA2E,CAA3E,EAA8E,YAA9E,CAToC;AASyDC,IAAAA,QAAQ,EAAE,EATnE;AASuEC,IAAAA,YAAY,EAAE,SAASC,sBAAT,CAAgC9Y,EAAhC,EAAoCC,GAApC,EAAyC;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AAC5LZ,QAAAA,MAAM,CAACmC,UAAP,CAAkB,SAAlB,EAA6B,SAASwX,oCAAT,CAA8CtX,MAA9C,EAAsD;AAAE,iBAAOxB,GAAG,CAACgC,cAAJ,CAAmBR,MAAnB,CAAP;AAAoC,SAAzH,EAA2H,OAA3H,EAAoI,SAASuX,kCAAT,GAA8C;AAAE,iBAAO/Y,GAAG,CAACyO,QAAJ,EAAP;AAAwB,SAA5M,EAA8M,MAA9M,EAAsN,SAASuK,iCAAT,GAA6C;AAAE,iBAAOhZ,GAAG,CAAC0O,OAAJ,EAAP;AAAuB,SAA5R;AACH;;AAAC,UAAI3O,EAAE,GAAG,CAAT,EAAY;AACVZ,QAAAA,MAAM,CAACuD,WAAP,CAAmB,IAAnB,EAAyB1C,GAAG,CAAC2C,EAA7B,EAAiC,UAAjC,EAA6C3C,GAAG,CAAC0G,QAAjD,EAA2D,eAA3D,EAA4E1G,GAAG,CAACuK,SAAJ,GAAgBvK,GAAG,CAAC2C,EAAJ,GAAS,QAAzB,GAAoC,IAAhH,EAAsH,eAAtH,EAAuI3C,GAAG,CAACuK,SAA3I,EAAsJ,YAAtJ,EAAoKvK,GAAG,CAAC4C,SAAJ,IAAiB,IAArL,EAA2L,eAA3L,EAA4M5C,GAAG,CAACyJ,QAAJ,CAAawP,QAAb,EAA5M,EAAqO,eAArO,EAAsPjZ,GAAG,CAAC4M,QAAJ,CAAaqM,QAAb,EAAtP,EAA+Q,cAA/Q,EAA+RjZ,GAAG,CAACkZ,UAAnS,EAA+S,kBAA/S,EAAmUlZ,GAAG,CAACoS,gBAAJ,IAAwB,IAA3V,EAAiW,uBAAjW,EAA0XpS,GAAG,CAACgS,wBAAJ,EAA1X;AACA7S,QAAAA,MAAM,CAACga,WAAP,CAAmB,qBAAnB,EAA0CnZ,GAAG,CAAC4M,QAA9C,EAAwD,oBAAxD,EAA8E5M,GAAG,CAACkZ,UAAlF,EAA8F,qBAA9F,EAAqHlZ,GAAG,CAACyJ,QAAzH,EAAmI,kBAAnI,EAAuJzJ,GAAG,CAAC8M,KAA3J,EAAkK,qBAAlK,EAAyL9M,GAAG,CAACyC,QAA7L;AACH;AAAE,KAdiD;AAc/CwQ,IAAAA,MAAM,EAAE;AAAErG,MAAAA,QAAQ,EAAE,UAAZ;AAAwBwM,MAAAA,aAAa,EAAE,eAAvC;AAAwD1S,MAAAA,QAAQ,EAAE;AAAlE,KAduC;AAcyC2S,IAAAA,QAAQ,EAAE,CAAC,WAAD,CAdnD;AAckEtT,IAAAA,QAAQ,EAAE,CAAC5G,MAAM,CAAC6G,kBAAP,CAA0B,CACnJ;AAAEvB,MAAAA,OAAO,EAAE5H,mBAAX;AAAgCoJ,MAAAA,WAAW,EAAEqN;AAA7C,KADmJ,EAEnJ;AAAE7O,MAAAA,OAAO,EAAEnI,2BAAX;AAAwC2J,MAAAA,WAAW,EAAEqN;AAArD,KAFmJ,CAA1B,CAAD,EAGxHnU,MAAM,CAACiU,0BAHiH,CAd5E;AAiBRkG,IAAAA,kBAAkB,EAAEvW,GAjBZ;AAiBiBwW,IAAAA,KAAK,EAAE,CAjBxB;AAiB2BC,IAAAA,IAAI,EAAE,EAjBjC;AAiBqCC,IAAAA,MAAM,EAAE,CAAC,CAAC,oBAAD,EAAuB,EAAvB,EAA2B,CAA3B,EAA8B,oBAA9B,EAAoD,CAApD,EAAuD,OAAvD,CAAD,EAAkE,CAAC,QAAD,EAAW,kBAAX,EAA+B,SAA/B,EAA0C,EAA1C,CAAlE,EAAiH,CAAC,CAAD,EAAI,kBAAJ,EAAwB,CAAxB,EAA2B,UAA3B,CAAjH,EAAyJ,CAAC,OAAD,EAAU,4CAAV,EAAwD,CAAxD,EAA2D,cAA3D,CAAzJ,EAAqO,CAAC,OAAD,EAAU,uBAAV,EAAmC,CAAnC,EAAsC,UAAtC,EAAkD,CAAlD,EAAqD,cAArD,CAArO,EAA2S,CAAC,CAAD,EAAI,0BAAJ,CAA3S,EAA4U,CAAC,CAAD,EAAI,kBAAJ,CAA5U,EAAqW,CAAC,uBAAD,EAA0B,EAA1B,EAA8B,iCAA9B,EAAiE,EAAjE,EAAqE,gCAArE,EAAuG,EAAvG,EAA2G,kCAA3G,EAA+I,kCAA/I,EAAmL,CAAnL,EAAsL,+BAAtL,EAAuN,mCAAvN,EAA4P,2BAA5P,EAAyR,yBAAzR,EAAoT,8BAApT,EAAoV,6BAApV,EAAmX,4BAAnX,EAAiZ,eAAjZ,EAAka,QAAla,EAA4a,QAA5a,CAArW,EAA4xB,CAAC,CAAD,EAAI,wBAAJ,EAA8B,qBAA9B,CAA5xB,EAAk1B,CAAC,CAAD,EAAI,uBAAJ,EAA6B,CAA7B,EAAgC,UAAhC,CAAl1B,EAA+3B,CAAC,OAAD,EAAU,qBAAV,EAAiC,CAAjC,EAAoC,iBAApC,CAA/3B,EAAu7B,CAAC,CAAD,EAAI,cAAJ,CAAv7B,EAA48B,CAAC,CAAD,EAAI,qBAAJ,CAA58B,EAAw+B,CAAC,CAAD,EAAI,uBAAJ,CAAx+B,EAAsgC,CAAC,MAAD,EAAS,SAAT,EAAoB,UAApB,EAAgC,IAAhC,EAAsC,CAAtC,EAAyC,SAAzC,EAAoD,SAApD,CAAtgC,EAAskC,CAAC,OAAD,EAAU,EAAV,CAAtkC,CAjB7C;AAiBmoCC,IAAAA,QAAQ,EAAE,SAASC,kBAAT,CAA4B5Z,EAA5B,EAAgCC,GAAhC,EAAqC;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AAChvCZ,QAAAA,MAAM,CAACya,eAAP,CAAuB9W,GAAvB;AACA3D,QAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC;AACAd,QAAAA,MAAM,CAACmC,UAAP,CAAkB,OAAlB,EAA2B,SAASuY,uCAAT,GAAmD;AAAE,iBAAO7Z,GAAG,CAAC+L,MAAJ,EAAP;AAAsB,SAAtG;AACA5M,QAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAd,QAAAA,MAAM,CAAC4B,UAAP,CAAkB,CAAlB,EAAqBjB,yBAArB,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,MAAtD,EAA8D,CAA9D;AACAX,QAAAA,MAAM,CAAC4B,UAAP,CAAkB,CAAlB,EAAqBD,yBAArB,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,MAAtD,EAA8D,CAA9D;AACA3B,QAAAA,MAAM,CAACgB,YAAP;AACAhB,QAAAA,MAAM,CAACc,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC;AACAd,QAAAA,MAAM,CAAC2a,SAAP,CAAiB,CAAjB,EAAoB,KAApB,EAA2B,CAA3B;AACA3a,QAAAA,MAAM,CAACgB,YAAP;AACAhB,QAAAA,MAAM,CAACgB,YAAP;AACAhB,QAAAA,MAAM,CAAC4B,UAAP,CAAkB,CAAlB,EAAqBI,gCAArB,EAAuD,CAAvD,EAA0D,EAA1D,EAA8D,aAA9D,EAA6E,CAA7E;AACAhC,QAAAA,MAAM,CAACmC,UAAP,CAAkB,eAAlB,EAAmC,SAASyY,uDAAT,GAAmE;AAAE,iBAAO/Z,GAAG,CAACgM,KAAJ,EAAP;AAAqB,SAA7H,EAA+H,QAA/H,EAAyI,SAASgO,gDAAT,GAA4D;AAAE,iBAAOha,GAAG,CAAC2O,WAAJ,EAAP;AAA2B,SAAlO,EAAoO,QAApO,EAA8O,SAASsL,gDAAT,GAA4D;AAAE,iBAAOja,GAAG,CAACgM,KAAJ,EAAP;AAAqB,SAAjU;AACH;;AAAC,UAAIjM,EAAE,GAAG,CAAT,EAAY;AACV,cAAMma,GAAG,GAAG/a,MAAM,CAACgb,WAAP,CAAmB,CAAnB,CAAZ;;AACAhb,QAAAA,MAAM,CAACuD,WAAP,CAAmB,WAAnB,EAAgC1C,GAAG,CAACuK,SAAJ,GAAgBvK,GAAG,CAAC2C,EAAJ,GAAS,QAAzB,GAAoC,IAApE;AACAxD,QAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,QAAAA,MAAM,CAAC8B,UAAP,CAAkB,UAAlB,EAA8BjB,GAAG,CAAC8M,KAAlC;AACA3N,QAAAA,MAAM,CAACuD,WAAP,CAAmB,IAAnB,EAAyB1C,GAAG,CAAC0H,QAA7B;AACAvI,QAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,QAAAA,MAAM,CAAC8B,UAAP,CAAkB,cAAlB,EAAkC,IAAlC;AACA9B,QAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,QAAAA,MAAM,CAAC8B,UAAP,CAAkB,cAAlB,EAAkC,KAAlC;AACA9B,QAAAA,MAAM,CAACmB,SAAP,CAAiB,CAAjB;AACAnB,QAAAA,MAAM,CAAC8B,UAAP,CAAkB,+BAAlB,EAAmDjB,GAAG,CAAC2H,kBAAvD,EAA2E,mCAA3E,EAAgH3H,GAAG,CAACoJ,eAApH,EAAqI,2BAArI,EAAkK8Q,GAAlK,EAAuK,yBAAvK,EAAkMla,GAAG,CAACuK,SAAtM,EAAiN,8BAAjN,EAAiPvK,GAAG,CAAC0T,UAArP,EAAiQ,6BAAjQ,EAAgS1T,GAAG,CAAC2U,YAAJ,IAAoB,IAApB,GAA2B,IAA3B,GAAkC3U,GAAG,CAAC2U,YAAJ,CAAiBuB,KAAnV,EAA0V,4BAA1V,EAAwXlW,GAAG,CAACyT,QAA5X;AACH;AAAE,KA3CiD;AA2C/C2G,IAAAA,UAAU,EAAE,CAAC1a,MAAM,CAAC2a,gBAAR,EAA0B1a,MAAM,CAAC2a,QAAjC,EAA2C3a,MAAM,CAAC4a,YAAlD,EAAgE7a,MAAM,CAACjF,mBAAvE,EAA4FkF,MAAM,CAAC6a,eAAnG,EAAoH7a,MAAM,CAAC8a,OAA3H,CA3CmC;AA2CkGC,IAAAA,MAAM,EAAE,CAAC,qvEAAD,CA3C1G;AA2Cm2EC,IAAAA,aAAa,EAAE,CA3Cl3E;AA2Cq3EC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAE,CACp7E7X,mBAAmB,CAACC,kBADg6E,EAEp7ED,mBAAmB,CAACG,cAFg6E;AAAb,KA3C33E;AA8C3C2X,IAAAA,eAAe,EAAE;AA9C0B,GAAzB,CAA/B;SAvSMxH,S;;;AA2VN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOpN,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAuDC,CAvDhB;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACM6U,e;AAAN,QAAMA,eAAN,CAAsB;;AAEtBA,EAAAA,eAAe,CAACvV,IAAhB,GAAuB,SAASwV,uBAAT,CAAiCtV,CAAjC,EAAoC;AAAE,WAAO,KAAKA,CAAC,IAAIqV,eAAV,GAAP;AAAsC,GAAnG;;AACAA,EAAAA,eAAe,CAACE,IAAhB,GAAuB,aAAc9b,MAAM,CAAC+b,gBAAP,CAAwB;AAAErV,IAAAA,IAAI,EAAEkV;AAAR,GAAxB,CAArC;AACAA,EAAAA,eAAe,CAACI,IAAhB,GAAuB,aAAchc,MAAM,CAACic,gBAAP,CAAwB;AAAEC,IAAAA,SAAS,EAAE,CAAC7W,mCAAD,CAAb;AAAoD8W,IAAAA,OAAO,EAAE,CAAC,CAC/G3gB,YAD+G,EAE/GD,aAF+G,EAG/G+B,eAH+G,EAI/GC,eAJ+G,CAAD,EAK/GM,mBAL+G,EAMlHF,kBANkH,EAOlHL,eAPkH,EAQlHC,eARkH;AAA7D,GAAxB,CAArC;SAJMqe,e;;;AAaN;AAAA,CAAC,YAAY;AAAE,GAAC,OAAO7U,SAAP,KAAqB,WAArB,IAAoCA,SAArC;AAoBO,CApBtB;;AAqBA;AAAA,CAAC,YAAY;AAAE,GAAC,OAAOqV,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDpc,MAAM,CAACqc,kBAAP,CAA0BT,eAA1B,EAA2C;AAAEU,IAAAA,YAAY,EAAE,YAAY;AAAE,aAAO,CAACnI,SAAD,EAAY/N,gBAAZ,CAAP;AAAuC,KAArE;AAAuE+V,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAC3gB,YAAD,EAC1MD,aAD0M,EAE1M+B,eAF0M,EAG1MC,eAH0M,CAAP;AAGhL,KAHkF;AAGhFgf,IAAAA,OAAO,EAAE,YAAY;AAAE,aAAO,CAAC1e,mBAAD,EACnDF,kBADmD,EAC/BwW,SAD+B,EACpB/N,gBADoB,EACF9I,eADE,EAEnDC,eAFmD,CAAP;AAEzB;AALkF,GAA3C,CAAnD;AAKkB,CALjC;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS6H,iBAAT,EAA4BL,0BAA5B,EAAwDM,mCAAxD,EAA6FL,2CAA7F,EAA0ImB,kBAA1I,EAA8JgO,SAA9J,EAAyK1O,eAAzK,EAA0LmW,eAA1L,EAA2MxV,gBAA3M,EAA6NY,cAA7N,EAA6OnD,mBAA7O","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], _overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\n            }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n\n"]},"metadata":{},"sourceType":"module"}