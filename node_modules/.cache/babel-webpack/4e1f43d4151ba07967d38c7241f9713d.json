{"ast":null,"code":"import { LanguageService, ConfigService, StorageService } from '@igo2/core';\nimport { IgoMap, LayerService, CatalogService } from '@igo2/geo';\nimport { EntityStore } from '@igo2/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@igo2/core\";\nimport * as i2 from \"@igo2/geo\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@igo2/common\";\nexport let AppCatalogComponent = /*#__PURE__*/(() => {\n  class AppCatalogComponent {\n    constructor(configService, languageService, layerService, catalogService, storageService) {\n      this.configService = configService;\n      this.languageService = languageService;\n      this.layerService = layerService;\n      this.catalogService = catalogService;\n      this.storageService = storageService;\n      this.map = new IgoMap({\n        controls: {\n          attribution: {\n            collapsed: true\n          }\n        }\n      });\n      this.view = {\n        center: [-73, 47.2],\n        zoom: 7\n      };\n      this.catalogStore = new EntityStore([]);\n      this.catalogItemStore = new EntityStore([]);\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    ngOnInit() {\n      this.layerService.createAsyncLayer({\n        title: 'OSM',\n        sourceOptions: {\n          type: 'osm'\n        }\n      }).subscribe(layer => this.map.addLayer(layer));\n      this.loadCatalogs();\n    }\n    /**\r\n     * When the selected catalog changes, toggle the the CatalogBrowser tool.\r\n     * @internal\r\n     * @param event Select event\r\n     */\n\n\n    onCatalogSelectChange(event) {\n      this.loadCatalogItems(event.catalog);\n    }\n    /**\r\n     * Get all the available catalogs from the CatalogService and\r\n     * load them into the store.\r\n     */\n\n\n    loadCatalogs() {\n      this.catalogService.loadCatalogs().subscribe(catalogs => {\n        this.catalogStore.clear();\n        this.catalogStore.load(catalogs.concat(this.storageService.get('addedCatalogs') || []));\n      });\n    }\n    /**\r\n     * Get the selected catalog's items from the CatalogService and\r\n     * load them into the store.\r\n     * @param catalog Selected catalog\r\n     */\n\n\n    loadCatalogItems(catalog) {\n      this.catalogService.loadCatalogItems(catalog).subscribe(items => {\n        this.catalogItemStore.clear();\n        this.catalogItemStore.load(items);\n      });\n    }\n\n  }\n\n  AppCatalogComponent.ɵfac = function AppCatalogComponent_Factory(t) {\n    return new (t || AppCatalogComponent)(i0.ɵɵdirectiveInject(i1.ConfigService), i0.ɵɵdirectiveInject(i1.LanguageService), i0.ɵɵdirectiveInject(i2.LayerService), i0.ɵɵdirectiveInject(i2.CatalogService), i0.ɵɵdirectiveInject(i1.StorageService));\n  };\n\n  AppCatalogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppCatalogComponent,\n    selectors: [[\"app-catalog\"]],\n    decls: 23,\n    vars: 6,\n    consts: [[\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/catalog\"], [\"href\", \"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/environments\"], [3, \"map\", \"view\"], [\"color\", \"primary\", 3, \"map\"], [\"title\", \"Catalog Library\"], [3, \"store\", \"catalogSelectChange\"], [\"title\", \"Catalog Browser\"], [3, \"store\", \"map\"]],\n    template: function AppCatalogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-subtitle\");\n        i0.ɵɵtext(2, \"Geo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵtext(4, \"Catalog\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"li\");\n        i0.ɵɵtext(7, \"Dependencies: ConfigService, LanguageService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" See the \");\n        i0.ɵɵelementStart(10, \"a\", 0);\n        i0.ɵɵtext(11, \"code of this example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13, \" See catalog section of the \");\n        i0.ɵɵelementStart(14, \"a\", 1);\n        i0.ɵɵtext(15, \" environment config\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"hr\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"igo-map-browser\", 2);\n        i0.ɵɵelement(18, \"igo-zoom-button\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"igo-panel\", 4);\n        i0.ɵɵelementStart(20, \"igo-catalog-library\", 5);\n        i0.ɵɵlistener(\"catalogSelectChange\", function AppCatalogComponent_Template_igo_catalog_library_catalogSelectChange_20_listener($event) {\n          return ctx.onCatalogSelectChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"igo-panel\", 6);\n        i0.ɵɵelement(22, \"igo-catalog-browser\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"map\", ctx.map)(\"view\", ctx.view);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"store\", ctx.catalogStore);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"store\", ctx.catalogItemStore)(\"map\", ctx.map);\n      }\n    },\n    directives: [i3.MatCard, i3.MatCardSubtitle, i3.MatCardTitle, i3.MatCardContent, i2.MapBrowserComponent, i2.ZoomButtonComponent, i4.PanelComponent, i2.CatalogLibaryComponent, i2.CatalogBrowserComponent],\n    styles: [\"igo-map-browser[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 300px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhdGFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0VBQ0EsYUFBQTtBQUNGIiwiZmlsZSI6ImNhdGFsb2cuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpZ28tbWFwLWJyb3dzZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAzMDBweDtcbn1cbiJdfQ== */\"]\n  });\n  return AppCatalogComponent;\n})();","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\catalog\\catalog.component.ts","C:\\Users\\admin\\Downloads\\igo2-lib-master\\igo2-lib-master\\demo\\src\\app\\geo\\catalog\\catalog.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\nimport { LanguageService, ConfigService, StorageService } from '@igo2/core';\nimport { IgoMap, LayerService, Catalog, CatalogItem, CatalogService } from '@igo2/geo';\nimport { EntityStore } from '@igo2/common';\n\n@Component({\n  selector: 'app-catalog',\n  templateUrl: './catalog.component.html',\n  styleUrls: ['./catalog.component.scss']\n})\nexport class AppCatalogComponent implements OnInit {\n  public map = new IgoMap({\n    controls: {\n      attribution: {\n        collapsed: true\n      }\n    }\n  });\n\n  public view = {\n    center: [-73, 47.2],\n    zoom: 7\n  };\n\n  public catalogStore = new EntityStore<Catalog>([]);\n\n  public catalogItemStore = new EntityStore<CatalogItem>([]);\n\n  constructor(\n    private configService: ConfigService,\n    private languageService: LanguageService,\n    private layerService: LayerService,\n    private catalogService: CatalogService,\n    private storageService: StorageService\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this.layerService\n      .createAsyncLayer({\n        title: 'OSM',\n        sourceOptions: {\n          type: 'osm'\n        }\n      })\n      .subscribe(layer => this.map.addLayer(layer));\n\n    this.loadCatalogs();\n  }\n\n  /**\n   * When the selected catalog changes, toggle the the CatalogBrowser tool.\n   * @internal\n   * @param event Select event\n   */\n  onCatalogSelectChange(event: {selected: boolean; catalog: Catalog}) {\n    this.loadCatalogItems(event.catalog);\n  }\n\n  /**\n   * Get all the available catalogs from the CatalogService and\n   * load them into the store.\n   */\n  private loadCatalogs() {\n    this.catalogService.loadCatalogs()\n      .subscribe((catalogs: Catalog[]) => {\n        this.catalogStore.clear();\n        this.catalogStore.load(catalogs.concat((this.storageService.get('addedCatalogs') || []) as Catalog[]));\n      });\n  }\n\n  /**\n   * Get the selected catalog's items from the CatalogService and\n   * load them into the store.\n   * @param catalog Selected catalog\n   */\n  private loadCatalogItems(catalog: Catalog) {\n    this.catalogService.loadCatalogItems(catalog)\n      .subscribe((items: CatalogItem[]) => {\n        this.catalogItemStore.clear();\n        this.catalogItemStore.load(items);\n      });\n  }\n}\n","<mat-card>\n  <mat-card-subtitle>Geo</mat-card-subtitle>\n  <mat-card-title>Catalog</mat-card-title>\n  <mat-card-content>\n    <li>Dependencies: ConfigService, LanguageService</li>\n\n    <br>\n    See the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/app/geo/catalog\">code of this example</a><br>\n    See catalog section of the <a href=\"https://github.com/infra-geo-ouverte/igo2-lib/tree/master/demo/src/environments\"> environment config</a>\n    <hr>\n  </mat-card-content>\n\n  <igo-map-browser [map]=\"map\" [view]=\"view\">\n    <igo-zoom-button [map]=\"map\" color=\"primary\"></igo-zoom-button>\n  </igo-map-browser>\n\n  <igo-panel title=\"Catalog Library\">\n    <igo-catalog-library\n      [store]=\"catalogStore\"\n      (catalogSelectChange)=\"onCatalogSelectChange($event)\">\n    </igo-catalog-library>\n  </igo-panel>\n\n  <igo-panel title=\"Catalog Browser\">\n    <igo-catalog-browser\n      [store]=\"catalogItemStore\"\n      [map]=\"map\">\n    </igo-catalog-browser>\n  </igo-panel>\n\n</mat-card>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}