{"ast":null,"code":"/**\n * @module ol/render/Feature\n */\nimport GeometryType from '../geom/GeometryType.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { get as getProjection } from '../proj.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { transform2D } from '../geom/flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\n\nvar tmpTransform = createTransform();\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\n\nvar RenderFeature = function () {\n  /**\n   * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n   *     to be right-handed for polygons.\n   * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n   * @param {Object<string, *>} properties Properties.\n   * @param {number|string|undefined} id Feature id.\n   */\n  function RenderFeature(type, flatCoordinates, ends, properties, id) {\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.extent_;\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n\n    this.id_ = id;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryType.js\").default}\n     */\n\n    this.type_ = type;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatCoordinates_ = flatCoordinates;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.flatMidpoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>|Array<Array<number>>}\n     */\n\n    this.ends_ = ends;\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n\n    this.properties_ = properties;\n  }\n  /**\n   * Get a feature property by its key.\n   * @param {string} key Key\n   * @return {*} Value for the requested key.\n   * @api\n   */\n\n\n  RenderFeature.prototype.get = function (key) {\n    return this.properties_[key];\n  };\n  /**\n   * Get the extent of this feature's geometry.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getExtent = function () {\n    if (!this.extent_) {\n      this.extent_ = this.type_ === GeometryType.POINT ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n    }\n\n    return this.extent_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  RenderFeature.prototype.getFlatInteriorPoint = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n\n\n  RenderFeature.prototype.getFlatInteriorPoints = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates_, 0, this.ends_, 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, this.ends_, 2, flatCenters);\n    }\n\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n\n\n  RenderFeature.prototype.getFlatMidpoint = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n    }\n\n    return this.flatMidpoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n\n\n  RenderFeature.prototype.getFlatMidpoints = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      var flatCoordinates = this.flatCoordinates_;\n      var offset = 0;\n      var ends = this.ends_;\n\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n\n    return this.flatMidpoints_;\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is set when reading data from a remote source.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getId = function () {\n    return this.id_;\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n\n\n  RenderFeature.prototype.getOrientedFlatCoordinates = function () {\n    return this.flatCoordinates_;\n  };\n  /**\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n   * determining the geometry type in style function (see {@link #getType}).\n   * @return {RenderFeature} Feature.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getGeometry = function () {\n    return this;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n\n\n  RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {RenderFeature} Simplified geometry.\n   */\n\n\n  RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n    return this;\n  };\n  /**\n   * Get the feature properties.\n   * @return {Object<string, *>} Feature properties.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getProperties = function () {\n    return this.properties_;\n  };\n  /**\n   * @return {number} Stride.\n   */\n\n\n  RenderFeature.prototype.getStride = function () {\n    return 2;\n  };\n  /**\n   * @return {undefined}\n   */\n\n\n  RenderFeature.prototype.getStyleFunction = function () {\n    return undefined;\n  };\n  /**\n   * Get the type of this feature's geometry.\n   * @return {import(\"../geom/GeometryType.js\").default} Geometry type.\n   * @api\n   */\n\n\n  RenderFeature.prototype.getType = function () {\n    return this.type_;\n  };\n  /**\n   * Transform geometry coordinates from tile pixel space to projected.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\n   */\n\n\n  RenderFeature.prototype.transform = function (projection) {\n    projection = getProjection(projection);\n    var pixelExtent = projection.getExtent();\n    var projectedExtent = projection.getWorldExtent();\n\n    if (pixelExtent && projectedExtent) {\n      var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n    }\n  };\n  /**\n   * @return {Array<number>|Array<Array<number>>} Ends or endss.\n   */\n\n\n  RenderFeature.prototype.getEnds = function () {\n    return this.ends_;\n  };\n\n  return RenderFeature;\n}();\n\nRenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;\n/**\n * @return {Array<number>} Flat coordinates.\n */\n\nRenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;\nexport default RenderFeature;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/render/Feature.js"],"names":["GeometryType","compose","composeTransform","create","createTransform","createOrUpdateFromCoordinate","createOrUpdateFromFlatCoordinates","getCenter","getHeight","extend","getInteriorPointOfArray","getInteriorPointsOfMultiArray","get","getProjection","interpolatePoint","linearRingss","linearRingssCenter","transform2D","tmpTransform","RenderFeature","type","flatCoordinates","ends","properties","id","extent_","id_","type_","flatCoordinates_","flatInteriorPoints_","flatMidpoints_","ends_","properties_","prototype","key","getExtent","POINT","length","getFlatInteriorPoint","flatCenter","getFlatInteriorPoints","flatCenters","getFlatMidpoint","getFlatMidpoints","offset","i","ii","end","midpoint","getId","getOrientedFlatCoordinates","getGeometry","getSimplifiedGeometry","squaredTolerance","simplifyTransformed","opt_transform","getProperties","getStride","getStyleFunction","undefined","getType","transform","projection","pixelExtent","projectedExtent","getWorldExtent","scale","getEnds","getEndss","getFlatCoordinates"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/Feature\n */\nimport GeometryType from '../geom/GeometryType.js';\nimport { compose as composeTransform, create as createTransform, } from '../transform.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight, } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray, } from '../geom/flat/interiorpoint.js';\nimport { get as getProjection } from '../proj.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { transform2D } from '../geom/flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\nvar RenderFeature = /** @class */ (function () {\n    /**\n     * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n     * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n     *     to be right-handed for polygons.\n     * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n     * @param {Object<string, *>} properties Properties.\n     * @param {number|string|undefined} id Feature id.\n     */\n    function RenderFeature(type, flatCoordinates, ends, properties, id) {\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        this.extent_;\n        /**\n         * @private\n         * @type {number|string|undefined}\n         */\n        this.id_ = id;\n        /**\n         * @private\n         * @type {import(\"../geom/GeometryType.js\").default}\n         */\n        this.type_ = type;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.flatCoordinates_ = flatCoordinates;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.flatInteriorPoints_ = null;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.flatMidpoints_ = null;\n        /**\n         * @private\n         * @type {Array<number>|Array<Array<number>>}\n         */\n        this.ends_ = ends;\n        /**\n         * @private\n         * @type {Object<string, *>}\n         */\n        this.properties_ = properties;\n    }\n    /**\n     * Get a feature property by its key.\n     * @param {string} key Key\n     * @return {*} Value for the requested key.\n     * @api\n     */\n    RenderFeature.prototype.get = function (key) {\n        return this.properties_[key];\n    };\n    /**\n     * Get the extent of this feature's geometry.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    RenderFeature.prototype.getExtent = function () {\n        if (!this.extent_) {\n            this.extent_ =\n                this.type_ === GeometryType.POINT\n                    ? createOrUpdateFromCoordinate(this.flatCoordinates_)\n                    : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n        }\n        return this.extent_;\n    };\n    /**\n     * @return {Array<number>} Flat interior points.\n     */\n    RenderFeature.prototype.getFlatInteriorPoint = function () {\n        if (!this.flatInteriorPoints_) {\n            var flatCenter = getCenter(this.getExtent());\n            this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, \n            /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);\n        }\n        return this.flatInteriorPoints_;\n    };\n    /**\n     * @return {Array<number>} Flat interior points.\n     */\n    RenderFeature.prototype.getFlatInteriorPoints = function () {\n        if (!this.flatInteriorPoints_) {\n            var flatCenters = linearRingssCenter(this.flatCoordinates_, 0, \n            /** @type {Array<Array<number>>} */ (this.ends_), 2);\n            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, \n            /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);\n        }\n        return this.flatInteriorPoints_;\n    };\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n    RenderFeature.prototype.getFlatMidpoint = function () {\n        if (!this.flatMidpoints_) {\n            this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n        }\n        return this.flatMidpoints_;\n    };\n    /**\n     * @return {Array<number>} Flat midpoints.\n     */\n    RenderFeature.prototype.getFlatMidpoints = function () {\n        if (!this.flatMidpoints_) {\n            this.flatMidpoints_ = [];\n            var flatCoordinates = this.flatCoordinates_;\n            var offset = 0;\n            var ends = /** @type {Array<number>} */ (this.ends_);\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                var end = ends[i];\n                var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n                extend(this.flatMidpoints_, midpoint);\n                offset = end;\n            }\n        }\n        return this.flatMidpoints_;\n    };\n    /**\n     * Get the feature identifier.  This is a stable identifier for the feature and\n     * is set when reading data from a remote source.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    RenderFeature.prototype.getId = function () {\n        return this.id_;\n    };\n    /**\n     * @return {Array<number>} Flat coordinates.\n     */\n    RenderFeature.prototype.getOrientedFlatCoordinates = function () {\n        return this.flatCoordinates_;\n    };\n    /**\n     * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n     * determining the geometry type in style function (see {@link #getType}).\n     * @return {RenderFeature} Feature.\n     * @api\n     */\n    RenderFeature.prototype.getGeometry = function () {\n        return this;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {RenderFeature} Simplified geometry.\n     */\n    RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        return this;\n    };\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {RenderFeature} Simplified geometry.\n     */\n    RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n        return this;\n    };\n    /**\n     * Get the feature properties.\n     * @return {Object<string, *>} Feature properties.\n     * @api\n     */\n    RenderFeature.prototype.getProperties = function () {\n        return this.properties_;\n    };\n    /**\n     * @return {number} Stride.\n     */\n    RenderFeature.prototype.getStride = function () {\n        return 2;\n    };\n    /**\n     * @return {undefined}\n     */\n    RenderFeature.prototype.getStyleFunction = function () {\n        return undefined;\n    };\n    /**\n     * Get the type of this feature's geometry.\n     * @return {import(\"../geom/GeometryType.js\").default} Geometry type.\n     * @api\n     */\n    RenderFeature.prototype.getType = function () {\n        return this.type_;\n    };\n    /**\n     * Transform geometry coordinates from tile pixel space to projected.\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\n     */\n    RenderFeature.prototype.transform = function (projection) {\n        projection = getProjection(projection);\n        var pixelExtent = projection.getExtent();\n        var projectedExtent = projection.getWorldExtent();\n        if (pixelExtent && projectedExtent) {\n            var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n            transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n        }\n    };\n    /**\n     * @return {Array<number>|Array<Array<number>>} Ends or endss.\n     */\n    RenderFeature.prototype.getEnds = function () {\n        return this.ends_;\n    };\n    return RenderFeature;\n}());\nRenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;\n/**\n * @return {Array<number>} Flat coordinates.\n */\nRenderFeature.prototype.getFlatCoordinates =\n    RenderFeature.prototype.getOrientedFlatCoordinates;\nexport default RenderFeature;\n"]},"metadata":{},"sourceType":"module"}