{"ast":null,"code":"/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\n\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n  var x1 = flatCoordinates[offset1];\n  var y1 = flatCoordinates[offset1 + 1];\n  var dx = flatCoordinates[offset2] - x1;\n  var dy = flatCoordinates[offset2 + 1] - y1;\n  var offset;\n\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n      }\n\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n\n  for (var i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n\n  closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\n\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n\n  for (offset += stride; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    var squaredDelta = squaredDx(x1, y1, x2, y2);\n\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n\n    x1 = x2;\n    y1 = y2;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\n\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n\n  var i, squaredDistance;\n\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  var index = offset + stride;\n\n  while (index < end) {\n    assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n  }\n\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n\n      closestPoint.length = stride;\n    }\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = end;\n  }\n\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\n\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = ends[ends.length - 1];\n  }\n\n  return minSquaredDistance;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/geom/flat/closest.js"],"names":["lerp","squaredDistance","squaredDx","assignClosest","flatCoordinates","offset1","offset2","stride","x","y","closestPoint","x1","y1","dx","dy","offset","t","i","length","maxSquaredDelta","end","max","x2","y2","squaredDelta","arrayMaxSquaredDelta","ends","ii","multiArrayMaxSquaredDelta","endss","assignClosestPoint","maxDelta","isRing","minSquaredDistance","opt_tmpPoint","tmpPoint","NaN","index","Math","sqrt","assignClosestArrayPoint","assignClosestMultiArrayPoint"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n    var x1 = flatCoordinates[offset1];\n    var y1 = flatCoordinates[offset1 + 1];\n    var dx = flatCoordinates[offset2] - x1;\n    var dy = flatCoordinates[offset2 + 1] - y1;\n    var offset;\n    if (dx === 0 && dy === 0) {\n        offset = offset1;\n    }\n    else {\n        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            offset = offset2;\n        }\n        else if (t > 0) {\n            for (var i = 0; i < stride; ++i) {\n                closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n            }\n            closestPoint.length = stride;\n            return;\n        }\n        else {\n            offset = offset1;\n        }\n    }\n    for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n    }\n    closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    for (offset += stride; offset < end; offset += stride) {\n        var x2 = flatCoordinates[offset];\n        var y2 = flatCoordinates[offset + 1];\n        var squaredDelta = squaredDx(x1, y1, x2, y2);\n        if (squaredDelta > max) {\n            max = squaredDelta;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n        offset = end;\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n        offset = ends[ends.length - 1];\n    }\n    return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    if (offset == end) {\n        return minSquaredDistance;\n    }\n    var i, squaredDistance;\n    if (maxDelta === 0) {\n        // All points are identical, so just test the first point.\n        squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n        if (squaredDistance < minSquaredDistance) {\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = flatCoordinates[offset + i];\n            }\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        else {\n            return minSquaredDistance;\n        }\n    }\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    var index = offset + stride;\n    while (index < end) {\n        assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n        squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = tmpPoint[i];\n            }\n            closestPoint.length = stride;\n            index += stride;\n        }\n        else {\n            // Skip ahead multiple points, because we know that all the skipped\n            // points cannot be any closer than the closest point we have found so\n            // far.  We know this because we know how close the current point is, how\n            // close the closest point we have found so far is, and the maximum\n            // distance between consecutive points.  For example, if we're currently\n            // at distance 10, the best we've found so far is 3, and that the maximum\n            // distance between consecutive points is 2, then we'll need to skip at\n            // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n            // finding a closer point.  We use Math.max(..., 1) to ensure that we\n            // always advance at least one point, to avoid an infinite loop.\n            index +=\n                stride *\n                    Math.max(((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n                        maxDelta) |\n                        0, 1);\n        }\n    }\n    if (isRing) {\n        // Check the closing segment.\n        assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n        squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for (i = 0; i < stride; ++i) {\n                closestPoint[i] = tmpPoint[i];\n            }\n            closestPoint.length = stride;\n        }\n    }\n    return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = end;\n    }\n    return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = ends[ends.length - 1];\n    }\n    return minSquaredDistance;\n}\n"]},"metadata":{},"sourceType":"module"}