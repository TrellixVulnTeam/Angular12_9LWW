{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragPan\n */\n\n\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\n\nvar DragPan = function (_super) {\n  __extends(DragPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function DragPan(opt_options) {\n    var _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n\n    _this.kinetic_ = options.kinetic;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n\n    _this.lastCentroid = null;\n    /**\n     * @type {number}\n     */\n\n    _this.lastPointersCount_;\n    /**\n     * @type {boolean}\n     */\n\n    _this.panning_ = false;\n    var condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    _this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.noKinetic_ = false;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n\n\n  DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n\n    var targetPointers = this.targetPointers;\n    var centroid = centroidFromPointers(targetPointers);\n\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n\n      if (this.lastCentroid) {\n        var delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        var distance = this.kinetic_.getDistance();\n        var angle = this.kinetic_.getAngle();\n        var center = view.getCenterInternal();\n        var centerpx = map.getPixelFromCoordinateInternal(center);\n        var dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n\n      this.lastCentroid = null;\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n\n\n  DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      this.lastCentroid = null; // stop any current animation\n\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      } // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n\n\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragPan;\n}(PointerInteraction);\n\nexport default DragPan;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/interaction/DragPan.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","PointerInteraction","centroid","centroidFromPointers","FALSE","all","focusWithTabindex","noModifierKeys","primaryAction","easeOut","rotate","rotateCoordinate","scale","scaleCoordinate","DragPan","_super","opt_options","_this","stopDown","options","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","handleDragEvent","mapBrowserEvent","getMap","getView","beginInteraction","targetPointers","length","update","delta","map","view","getResolution","getRotation","adjustCenterInternal","begin","originalEvent","preventDefault","handleUpEvent","end","distance","getDistance","angle","getAngle","center","getCenterInternal","centerpx","getPixelFromCoordinateInternal","dest","getCoordinateFromPixelInternal","Math","cos","sin","animateInternal","getConstrainedCenter","duration","easing","endInteraction","handleDownEvent","getAnimating","cancelAnimations"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, { centroid as centroidFromPointers, } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction, } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate, } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nvar DragPan = /** @class */ (function (_super) {\n    __extends(DragPan, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function DragPan(opt_options) {\n        var _this = _super.call(this, {\n            stopDown: FALSE,\n        }) || this;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @private\n         * @type {import(\"../Kinetic.js\").default|undefined}\n         */\n        _this.kinetic_ = options.kinetic;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         */\n        _this.lastCentroid = null;\n        /**\n         * @type {number}\n         */\n        _this.lastPointersCount_;\n        /**\n         * @type {boolean}\n         */\n        _this.panning_ = false;\n        var condition = options.condition\n            ? options.condition\n            : all(noModifierKeys, primaryAction);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.onFocusOnly\n            ? all(focusWithTabindex, condition)\n            : condition;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.noKinetic_ = false;\n        return _this;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n        if (!this.panning_) {\n            this.panning_ = true;\n            this.getMap().getView().beginInteraction();\n        }\n        var targetPointers = this.targetPointers;\n        var centroid = centroidFromPointers(targetPointers);\n        if (targetPointers.length == this.lastPointersCount_) {\n            if (this.kinetic_) {\n                this.kinetic_.update(centroid[0], centroid[1]);\n            }\n            if (this.lastCentroid) {\n                var delta = [\n                    this.lastCentroid[0] - centroid[0],\n                    centroid[1] - this.lastCentroid[1],\n                ];\n                var map = mapBrowserEvent.map;\n                var view = map.getView();\n                scaleCoordinate(delta, view.getResolution());\n                rotateCoordinate(delta, view.getRotation());\n                view.adjustCenterInternal(delta);\n            }\n        }\n        else if (this.kinetic_) {\n            // reset so we don't overestimate the kinetic energy after\n            // after one finger down, tiny drag, second finger down\n            this.kinetic_.begin();\n        }\n        this.lastCentroid = centroid;\n        this.lastPointersCount_ = targetPointers.length;\n        mapBrowserEvent.originalEvent.preventDefault();\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        if (this.targetPointers.length === 0) {\n            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n                var distance = this.kinetic_.getDistance();\n                var angle = this.kinetic_.getAngle();\n                var center = view.getCenterInternal();\n                var centerpx = map.getPixelFromCoordinateInternal(center);\n                var dest = map.getCoordinateFromPixelInternal([\n                    centerpx[0] - distance * Math.cos(angle),\n                    centerpx[1] - distance * Math.sin(angle),\n                ]);\n                view.animateInternal({\n                    center: view.getConstrainedCenter(dest),\n                    duration: 500,\n                    easing: easeOut,\n                });\n            }\n            if (this.panning_) {\n                this.panning_ = false;\n                view.endInteraction();\n            }\n            return false;\n        }\n        else {\n            if (this.kinetic_) {\n                // reset so we don't overestimate the kinetic energy after\n                // after one finger up, tiny drag, second finger up\n                this.kinetic_.begin();\n            }\n            this.lastCentroid = null;\n            return true;\n        }\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n            var map = mapBrowserEvent.map;\n            var view = map.getView();\n            this.lastCentroid = null;\n            // stop any current animation\n            if (view.getAnimating()) {\n                view.cancelAnimations();\n            }\n            if (this.kinetic_) {\n                this.kinetic_.begin();\n            }\n            // No kinetic as soon as more than one pointer on the screen is\n            // detected. This is to prevent nasty pans after pinch.\n            this.noKinetic_ = this.targetPointers.length > 1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    return DragPan;\n}(PointerInteraction));\nexport default DragPan;\n"]},"metadata":{},"sourceType":"module"}