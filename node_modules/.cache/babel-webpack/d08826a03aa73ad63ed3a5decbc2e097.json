{"ast":null,"code":"import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nconst _MatTreeNodeBase = /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nlet MatTreeNode = /*#__PURE__*/(() => {\n  class MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n      super(elementRef, tree);\n      this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('mat-tree-node');\n    } // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n    }\n\n  }\n\n  MatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n    return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNode,\n    selectors: [[\"mat-tree-node\"]],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: MatTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nlet MatTreeNodeDef = /*#__PURE__*/(() => {\n  class MatTreeNodeDef extends CdkTreeNodeDef {}\n\n  MatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTreeNodeDef_BaseFactory;\n    return function MatTreeNodeDef_Factory(t) {\n      return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n    };\n  }();\n\n  MatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeDef,\n    selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"matTreeNodeDefWhen\", \"when\"],\n      data: [\"matTreeNode\", \"data\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: MatTreeNodeDef\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeDef;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nlet MatNestedTreeNode = /*#__PURE__*/(() => {\n  class MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n      super(elementRef, tree, differs);\n      this._disabled = false;\n      this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n      // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n      // it is not set by the time it's children nodes try to read the class from it.\n      // TODO: move to host after View Engine deprecation\n\n      elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n\n\n    get tabIndex() {\n      return this.disabled ? -1 : this._tabIndex;\n    }\n\n    set tabIndex(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : 0;\n    } // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck();\n    }\n\n    ngAfterContentInit() {\n      super.ngAfterContentInit();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n    }\n\n  }\n\n  MatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n    return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatNestedTreeNode,\n    selectors: [[\"mat-nested-tree-node\"]],\n    inputs: {\n      role: \"role\",\n      disabled: \"disabled\",\n      tabIndex: \"tabIndex\",\n      node: [\"matNestedTreeNode\", \"node\"]\n    },\n    exportAs: [\"matNestedTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkNestedTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CdkTreeNode,\n      useExisting: MatNestedTreeNode\n    }, {\n      provide: CDK_TREE_NODE_OUTLET_NODE,\n      useExisting: MatNestedTreeNode\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatNestedTreeNode;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nlet MatTreeNodePadding = /*#__PURE__*/(() => {\n  class MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n      return this._level;\n    }\n\n    set level(value) {\n      this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n\n    get indent() {\n      return this._indent;\n    }\n\n    set indent(indent) {\n      this._setIndentInput(indent);\n    }\n\n  }\n\n  MatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTreeNodePadding_BaseFactory;\n    return function MatTreeNodePadding_Factory(t) {\n      return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n    };\n  }();\n\n  MatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodePadding,\n    selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"matTreeNodePadding\", \"level\"],\n      indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: MatTreeNodePadding\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodePadding;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nlet MatTreeNodeOutlet = /*#__PURE__*/(() => {\n  class MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n      this.viewContainer = viewContainer;\n      this._node = _node;\n    }\n\n  }\n\n  MatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n    return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  MatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeOutlet,\n    selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: MatTreeNodeOutlet\n    }])]\n  });\n  return MatTreeNodeOutlet;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nlet MatTree = /*#__PURE__*/(() => {\n  class MatTree extends CdkTree {}\n\n  MatTree.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTree_BaseFactory;\n    return function MatTree_Factory(t) {\n      return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n    };\n  }();\n\n  MatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatTree,\n    selectors: [[\"mat-tree\"]],\n    viewQuery: function MatTree_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n    exportAs: [\"matTree\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: MatTree\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"matTreeNodeOutlet\", \"\"]],\n    template: function MatTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [MatTreeNodeOutlet],\n    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n    encapsulation: 2\n  });\n  return MatTree;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\n\n\nlet MatTreeNodeToggle = /*#__PURE__*/(() => {\n  class MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() {\n      return this._recursive;\n    }\n\n    set recursive(value) {\n      // TODO: when we remove support for ViewEngine, change this setter to an input\n      // alias in the decorator metadata.\n      this._recursive = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n    let ɵMatTreeNodeToggle_BaseFactory;\n    return function MatTreeNodeToggle_Factory(t) {\n      return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n    };\n  }();\n\n  MatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatTreeNodeToggle,\n    selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n    inputs: {\n      recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: MatTreeNodeToggle\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatTreeNodeToggle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nlet MatTreeModule = /*#__PURE__*/(() => {\n  class MatTreeModule {}\n\n  MatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  };\n\n  MatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatTreeModule\n  });\n  MatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n  });\n  return MatTreeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CdkTreeModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n\n\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n  }\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/tree.js"],"names":["CdkTreeNode","CdkTree","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Directive","ElementRef","Attribute","Input","IterableDiffers","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","ɵngcc0","ɵngcc1","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","nativeElement","classList","add","ngOnInit","ngDoCheck","ngOnDestroy","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","inputs","role","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ngDevMode","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","differs","_disabled","value","_tabIndex","ngAfterContentInit","MatNestedTreeNode_Factory","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_nodeOutlet","first","hostAttrs","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","directives","styles","encapsulation","MatTreeNodeToggle","recursive","_recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"mappings":"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","sourcesContent":["import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-tree-node');\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n        // The classes are directly added here instead of in the host property because classes on\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n        // it is not set by the time it's children nodes try to read the class from it.\n        // TODO: move to host after View Engine deprecation\n        elementRef.nativeElement.classList.add('mat-nested-tree-node');\n    }\n    /** Whether the node is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Tabindex for the node. */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngDoCheck() {\n        super.ngDoCheck();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() { return this._level; }\n    set level(value) { this._setLevelInput(value); }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() { return this._indent; }\n    set indent(indent) { this._setIndentInput(indent); }\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n// tslint:disable-next-line: coercion-types\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    get recursive() { return this._recursive; }\n    set recursive(value) {\n        // TODO: when we remove support for ViewEngine, change this setter to an input\n        // alias in the decorator metadata.\n        this._recursive = coerceBooleanProperty(value);\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n"]},"metadata":{},"sourceType":"module"}