{"ast":null,"code":"import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\nconst _c0 = [\"*\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: /*#__PURE__*/trigger('transform', [\n  /*#__PURE__*/\n  // We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', /*#__PURE__*/style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), /*#__PURE__*/state('void', /*#__PURE__*/style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), /*#__PURE__*/transition('void => open-instant', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('void <=> open, open-instant => void', /*#__PURE__*/animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\n\n\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = /*#__PURE__*/new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\n\nconst MAT_DRAWER_CONTAINER = /*#__PURE__*/new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nlet MatDrawerContent = /*#__PURE__*/(() => {\n  class MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n      super(elementRef, scrollDispatcher, ngZone);\n      this._changeDetectorRef = _changeDetectorRef;\n      this._container = _container;\n    }\n\n    ngAfterContentInit() {\n      this._container._contentMarginChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n  }\n\n  MatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n    return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatDrawerContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContent,\n    selectors: [[\"mat-drawer-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\"],\n    hostVars: 4,\n    hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatDrawerContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nlet MatDrawer = /*#__PURE__*/(() => {\n  class MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._focusMonitor = _focusMonitor;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._doc = _doc;\n      this._container = _container;\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      /** Whether the drawer is initialized. Used for disabling the initial animation. */\n\n      this._enableAnimations = false;\n      this._position = 'start';\n      this._mode = 'over';\n      this._disableClose = false;\n      this._opened = false;\n      /** Emits whenever the drawer has started animating. */\n\n      this._animationStarted = new Subject();\n      /** Emits whenever the drawer is done animating. */\n\n      this._animationEnd = new Subject();\n      /** Current state of the sidenav animation. */\n      // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n      // metadata is not inherited by child classes, instead the host binding data is defined in a way\n      // that can be inherited.\n      // tslint:disable-next-line:no-host-decorator-in-concrete\n\n      this._animationState = 'void';\n      /** Event emitted when the drawer open state is changed. */\n\n      this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter(\n      /* isAsync */\n      true);\n      /** Event emitted when the drawer has been opened. */\n\n      this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n      /** Event emitted when the drawer has started opening. */\n\n      this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n      /** Event emitted when the drawer has been closed. */\n\n      this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n      /** Event emitted when the drawer has started closing. */\n\n      this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /** Event emitted when the drawer's position changes. */\n      // tslint:disable-next-line:no-output-on-prefix\n\n      this.onPositionChanged = new EventEmitter();\n      /**\n       * An observable that emits when the drawer mode changes. This is used by the drawer container to\n       * to know when to when the mode changes so it can adapt the margins on the content.\n       */\n\n      this._modeChanged = new Subject();\n      this.openedChange.subscribe(opened => {\n        if (opened) {\n          if (this._doc) {\n            this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n          }\n\n          this._takeFocus();\n        } else if (this._isFocusWithinDrawer()) {\n          this._restoreFocus();\n        }\n      });\n      /**\n       * Listen to `keydown` events outside the zone so that change detection is not run every\n       * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n       * and we don't have close disabled.\n       */\n\n      this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n          return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n          this.close();\n          event.stopPropagation();\n          event.preventDefault();\n        }));\n      }); // We need a Subject with distinctUntilChanged, because the `done` event\n      // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n      this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n        return x.fromState === y.fromState && x.toState === y.toState;\n      })).subscribe(event => {\n        const {\n          fromState,\n          toState\n        } = event;\n\n        if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n          this.openedChange.emit(this._opened);\n        }\n      });\n    }\n    /** The side that the drawer is attached to. */\n\n\n    get position() {\n      return this._position;\n    }\n\n    set position(value) {\n      // Make sure we have a valid value.\n      value = value === 'end' ? 'end' : 'start';\n\n      if (value != this._position) {\n        this._position = value;\n        this.onPositionChanged.emit();\n      }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n\n\n    get mode() {\n      return this._mode;\n    }\n\n    set mode(value) {\n      this._mode = value;\n\n      this._updateFocusTrapState();\n\n      this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n\n\n    get disableClose() {\n      return this._disableClose;\n    }\n\n    set disableClose(value) {\n      this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     */\n\n\n    get autoFocus() {\n      const value = this._autoFocus; // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n      // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n      // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n\n      return value == null ? this.mode !== 'side' : value;\n    }\n\n    set autoFocus(value) {\n      this._autoFocus = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n\n\n    get opened() {\n      return this._opened;\n    }\n\n    set opened(value) {\n      this.toggle(coerceBooleanProperty(value));\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n\n\n    _takeFocus() {\n      if (!this.autoFocus || !this._focusTrap) {\n        return;\n      }\n\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n        // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n        // still works. We need to check that `focus` is a function due to Universal.\n        if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n          this._elementRef.nativeElement.focus();\n        }\n      });\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n\n\n    _restoreFocus() {\n      if (!this.autoFocus) {\n        return;\n      } // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n\n\n      if (this._elementFocusedBeforeDrawerWasOpened) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      this._openedVia = null;\n    }\n    /** Whether focus is currently within the drawer. */\n\n\n    _isFocusWithinDrawer() {\n      var _a;\n\n      const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n      return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n\n    ngAfterContentInit() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n      this._updateFocusTrapState();\n    }\n\n    ngAfterContentChecked() {\n      // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n      // drawers that are open by default. When we're on the server, we shouldn't enable the\n      // animations, because we don't want the drawer to animate the first time the user sees\n      // the page.\n      if (this._platform.isBrowser) {\n        this._enableAnimations = true;\n      }\n    }\n\n    ngOnDestroy() {\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n\n      this._animationStarted.complete();\n\n      this._animationEnd.complete();\n\n      this._modeChanged.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n\n\n    open(openedVia) {\n      return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n\n\n    close() {\n      return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n\n\n    _closeViaBackdropClick() {\n      // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n      // don't need to check whether focus is currently in the drawer, as clicking on the\n      // backdrop causes blurring of the active element.\n      return this._setOpen(\n      /* isOpen */\n      false,\n      /* restoreFocus */\n      true);\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n\n\n    toggle(isOpen = !this.opened, openedVia) {\n      // If the focus is currently inside the drawer content and we are closing the drawer,\n      // restore the focus to the initially focused element (when the drawer opened).\n      return this._setOpen(isOpen,\n      /* restoreFocus */\n      !isOpen && this._isFocusWithinDrawer(), openedVia);\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n     *   origin will be used later when focus is restored on drawer close.\n     */\n\n\n    _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        this._openedVia = openedVia;\n      } else {\n        this._animationState = 'void';\n\n        if (restoreFocus) {\n          this._restoreFocus();\n        }\n      }\n\n      this._updateFocusTrapState();\n\n      return new Promise(resolve => {\n        this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n      });\n    }\n\n    _getWidth() {\n      return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n\n\n    _updateFocusTrapState() {\n      if (this._focusTrap) {\n        // The focus trap is only enabled when the drawer is open in any mode other than side.\n        this._focusTrap.enabled = this.opened && this.mode !== 'side';\n      }\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _animationStartListener(event) {\n      this._animationStarted.next(event);\n    } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n    _animationDoneListener(event) {\n      this._animationEnd.next(event);\n    }\n\n  }\n\n  MatDrawer.ɵfac = function MatDrawer_Factory(t) {\n    return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n  };\n\n  MatDrawer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawer,\n    selectors: [[\"mat-drawer\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n    hostVars: 12,\n    hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n          return ctx._animationStartListener($event);\n        })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n          return ctx._animationDoneListener($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n      }\n    },\n    inputs: {\n      position: \"position\",\n      mode: \"mode\",\n      disableClose: \"disableClose\",\n      autoFocus: \"autoFocus\",\n      opened: \"opened\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      openedStart: \"openedStart\",\n      _closedStream: \"closed\",\n      closedStart: \"closedStart\",\n      onPositionChanged: \"positionChanged\"\n    },\n    exportAs: [\"matDrawer\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]],\n    template: function MatDrawer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    directives: [ɵngcc1.CdkScrollable],\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatDrawer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nlet MatDrawerContainer = /*#__PURE__*/(() => {\n  class MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n      this._dir = _dir;\n      this._element = _element;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._animationMode = _animationMode;\n      /** Drawers that belong to this container. */\n\n      this._drawers = new QueryList();\n      /** Event emitted when the drawer backdrop is clicked. */\n\n      this.backdropClick = new EventEmitter();\n      /** Emits when the component is destroyed. */\n\n      this._destroyed = new Subject();\n      /** Emits on every ngDoCheck. Used for debouncing reflows. */\n\n      this._doCheckSubject = new Subject();\n      /**\n       * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n       * drawer is open. We use margin rather than transform even for push mode because transform breaks\n       * fixed position elements inside of the transformed element.\n       */\n\n      this._contentMargins = {\n        left: null,\n        right: null\n      };\n      this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n      // and update the left/right properties to point to the proper start/end.\n\n      if (_dir) {\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n          this._validateDrawers();\n\n          this.updateContentMargins();\n        });\n      } // Since the minimum width of the sidenav depends on the viewport width,\n      // we need to recompute the margins if the viewport changes.\n\n\n      viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n      this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n\n\n    get start() {\n      return this._start;\n    }\n    /** The drawer child with the `end` position. */\n\n\n    get end() {\n      return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n\n\n    get autosize() {\n      return this._autosize;\n    }\n\n    set autosize(value) {\n      this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n\n\n    get hasBackdrop() {\n      if (this._backdropOverride == null) {\n        return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n      }\n\n      return this._backdropOverride;\n    }\n\n    set hasBackdrop(value) {\n      this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n\n\n    get scrollable() {\n      return this._userContent || this._content;\n    }\n\n    ngAfterContentInit() {\n      this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(drawer => {\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n\n        this._drawers.notifyOnChanges();\n      });\n\n      this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n        this._validateDrawers();\n\n        this._drawers.forEach(drawer => {\n          this._watchDrawerToggle(drawer);\n\n          this._watchDrawerPosition(drawer);\n\n          this._watchDrawerMode(drawer);\n        });\n\n        if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n          this.updateContentMargins();\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }); // Avoid hitting the NgZone through the debounce timeout.\n\n\n      this._ngZone.runOutsideAngular(() => {\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n      });\n    }\n\n    ngOnDestroy() {\n      this._contentMarginChanges.complete();\n\n      this._doCheckSubject.complete();\n\n      this._drawers.destroy();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n\n\n    open() {\n      this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n\n\n    close() {\n      this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n\n\n    updateContentMargins() {\n      // 1. For drawers in `over` mode, they don't affect the content.\n      // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n      //    left margin (for left drawer) or right margin (for right the drawer).\n      // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n      //    adding to the left or right margin and simultaneously subtracting the same amount of\n      //    margin from the other side.\n      let left = 0;\n      let right = 0;\n\n      if (this._left && this._left.opened) {\n        if (this._left.mode == 'side') {\n          left += this._left._getWidth();\n        } else if (this._left.mode == 'push') {\n          const width = this._left._getWidth();\n\n          left += width;\n          right -= width;\n        }\n      }\n\n      if (this._right && this._right.opened) {\n        if (this._right.mode == 'side') {\n          right += this._right._getWidth();\n        } else if (this._right.mode == 'push') {\n          const width = this._right._getWidth();\n\n          right += width;\n          left -= width;\n        }\n      } // If either `right` or `left` is zero, don't set a style to the element. This\n      // allows users to specify a custom size via CSS class in SSR scenarios where the\n      // measured widths will always be zero. Note that we reset to `null` here, rather\n      // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n      left = left || null;\n      right = right || null;\n\n      if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n        this._contentMargins = {\n          left,\n          right\n        }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n        // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n        this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n      }\n    }\n\n    ngDoCheck() {\n      // If users opted into autosizing, do a check every change detection cycle.\n      if (this._autosize && this._isPushed()) {\n        // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n      }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n\n\n    _watchDrawerToggle(drawer) {\n      drawer._animationStarted.pipe(filter(event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(event => {\n        // Set the transition class on the container so that the animations occur. This should not\n        // be set initially because animations should only be triggered via a change in state.\n        if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n          this._element.nativeElement.classList.add('mat-drawer-transition');\n        }\n\n        this.updateContentMargins();\n\n        this._changeDetectorRef.markForCheck();\n      });\n\n      if (drawer.mode !== 'side') {\n        drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n      }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n\n\n    _watchDrawerPosition(drawer) {\n      if (!drawer) {\n        return;\n      } // NOTE: We need to wait for the microtask queue to be empty before validating,\n      // since both drawers may be swapping positions at the same time.\n\n\n      drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n          this._validateDrawers();\n        });\n      });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n\n\n    _watchDrawerMode(drawer) {\n      if (drawer) {\n        drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {\n          this.updateContentMargins();\n\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n\n\n    _setContainerClass(isAdd) {\n      const classList = this._element.nativeElement.classList;\n      const className = 'mat-drawer-container-has-open';\n\n      if (isAdd) {\n        classList.add(className);\n      } else {\n        classList.remove(className);\n      }\n    }\n    /** Validate the state of the drawer children components. */\n\n\n    _validateDrawers() {\n      this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n      this._drawers.forEach(drawer => {\n        if (drawer.position == 'end') {\n          if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('end');\n          }\n\n          this._end = drawer;\n        } else {\n          if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDuplicatedDrawerError('start');\n          }\n\n          this._start = drawer;\n        }\n      });\n\n      this._right = this._left = null; // Detect if we're LTR or RTL.\n\n      if (this._dir && this._dir.value === 'rtl') {\n        this._left = this._end;\n        this._right = this._start;\n      } else {\n        this._left = this._start;\n        this._right = this._end;\n      }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n\n\n    _isPushed() {\n      return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n    }\n\n    _onBackdropClicked() {\n      this.backdropClick.emit();\n\n      this._closeModalDrawersViaBackdrop();\n    }\n\n    _closeModalDrawersViaBackdrop() {\n      // Close all open drawers where closing is not disabled and the mode is not `side`.\n      [this._start, this._end].filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)).forEach(drawer => drawer._closeViaBackdropClick());\n    }\n\n    _isShowingBackdrop() {\n      return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n    }\n\n    _canHaveBackdrop(drawer) {\n      return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n\n    _isDrawerOpen(drawer) {\n      return drawer != null && drawer.opened;\n    }\n\n  }\n\n  MatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n    return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatDrawerContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDrawerContainer,\n    selectors: [[\"mat-drawer-container\"]],\n    contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n      }\n    },\n    viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\"],\n    hostVars: 2,\n    hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    inputs: {\n      autosize: \"autosize\",\n      hasBackdrop: \"hasBackdrop\"\n    },\n    outputs: {\n      backdropClick: \"backdropClick\"\n    },\n    exportAs: [\"matDrawerContainer\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatDrawerContainer\n    }])],\n    ngContentSelectors: _c2,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n    template: function MatDrawerContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatDrawerContent],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatDrawerContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSidenavContent = /*#__PURE__*/(() => {\n  class MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n      super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n\n  }\n\n  MatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n    return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  MatSidenavContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContent,\n    selectors: [[\"mat-sidenav-content\"]],\n    hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n    hostVars: 4,\n    hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatSidenavContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatSidenav = /*#__PURE__*/(() => {\n  class MatSidenav extends MatDrawer {\n    constructor() {\n      super(...arguments);\n      this._fixedInViewport = false;\n      this._fixedTopGap = 0;\n      this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n\n\n    get fixedInViewport() {\n      return this._fixedInViewport;\n    }\n\n    set fixedInViewport(value) {\n      this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n\n\n    get fixedTopGap() {\n      return this._fixedTopGap;\n    }\n\n    set fixedTopGap(value) {\n      this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n\n\n    get fixedBottomGap() {\n      return this._fixedBottomGap;\n    }\n\n    set fixedBottomGap(value) {\n      this._fixedBottomGap = coerceNumberProperty(value);\n    }\n\n  }\n\n  MatSidenav.ɵfac = /*@__PURE__*/function () {\n    let ɵMatSidenav_BaseFactory;\n    return function MatSidenav_Factory(t) {\n      return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav);\n    };\n  }();\n\n  MatSidenav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenav,\n    selectors: [[\"mat-sidenav\"]],\n    hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n    hostVars: 17,\n    hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n      }\n    },\n    inputs: {\n      fixedInViewport: \"fixedInViewport\",\n      fixedTopGap: \"fixedTopGap\",\n      fixedBottomGap: \"fixedBottomGap\"\n    },\n    exportAs: [\"matSidenav\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]],\n    template: function MatSidenav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    directives: [ɵngcc1.CdkScrollable],\n    encapsulation: 2,\n    data: {\n      animation: [matDrawerAnimations.transformDrawer]\n    },\n    changeDetection: 0\n  });\n  return MatSidenav;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatSidenavContainer = /*#__PURE__*/(() => {\n  class MatSidenavContainer extends MatDrawerContainer {}\n\n  MatSidenavContainer.ɵfac = /*@__PURE__*/function () {\n    let ɵMatSidenavContainer_BaseFactory;\n    return function MatSidenavContainer_Factory(t) {\n      return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer);\n    };\n  }();\n\n  MatSidenavContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSidenavContainer,\n    selectors: [[\"mat-sidenav-container\"]],\n    contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n    hostVars: 2,\n    hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n      }\n    },\n    exportAs: [\"matSidenavContainer\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatSidenavContainer\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c4,\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]],\n    template: function MatSidenavContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n      }\n    },\n    directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable],\n    styles: [_c5],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSidenavContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatSidenavModule = /*#__PURE__*/(() => {\n  class MatSidenavModule {}\n\n  MatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) {\n    return new (t || MatSidenavModule)();\n  };\n\n  MatSidenavModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSidenavModule\n  });\n  MatSidenavModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], CdkScrollableModule, MatCommonModule]\n  });\n  return MatSidenavModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, {\n    declarations: function () {\n      return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/sidenav.js"],"names":["Platform","PlatformModule","CdkScrollable","ScrollDispatcher","ViewportRuler","CdkScrollableModule","DOCUMENT","CommonModule","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","ChangeDetectorRef","Inject","forwardRef","ElementRef","NgZone","EventEmitter","Optional","Input","HostBinding","Output","HostListener","QueryList","ContentChildren","ContentChild","ViewChild","NgModule","MatCommonModule","FocusTrapFactory","FocusMonitor","Directionality","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","_c0","MatDrawerContainer_div_0_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatDrawerContainer_div_0_Template_div_click_0_listener","ɵɵrestoreView","ctx_r2","ɵɵnextContext","_onBackdropClicked","ɵɵelementEnd","ctx_r0","ɵɵclassProp","_isShowingBackdrop","MatDrawerContainer_mat_drawer_content_3_Template","ɵɵprojection","_c1","_c2","MatSidenavContainer_div_0_Template","MatSidenavContainer_div_0_Template_div_click_0_listener","MatSidenavContainer_mat_sidenav_content_3_Template","_c3","_c4","_c5","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","ɵfac","MatDrawerContent_Factory","t","ɵɵdirectiveInject","MatDrawerContainer","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDrawerContent_HostBindings","ɵɵstyleProp","_contentMargins","left","right","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatDrawerContent_Template","ɵɵprojectionDef","encapsulation","changeDetection","ngDevMode","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","nativeElement","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","emit","value","mode","_updateFocusTrapState","next","autoFocus","_autoFocus","toggle","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focus","focusVia","_openedVia","blur","_a","activeEl","contains","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","restoreFocus","Promise","resolve","_getWidth","offsetWidth","enabled","_animationStartListener","_animationDoneListener","MatDrawer_Factory","MatDrawer_HostBindings","ɵɵsyntheticHostListener","MatDrawer_animation_transform_start_HostBindingHandler","$event","MatDrawer_animation_transform_done_HostBindingHandler","ɵɵattribute","ɵɵsyntheticHostProperty","inputs","outputs","exportAs","consts","MatDrawer_Template","directives","data","animation","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","change","_validateDrawers","updateContentMargins","_autosize","start","_start","end","_end","autosize","hasBackdrop","_backdropOverride","scrollable","_userContent","_content","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","remove","_closeModalDrawersViaBackdrop","_canHaveBackdrop","MatDrawerContainer_Factory","contentQueries","MatDrawerContainer_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatDrawerContainer_Query","ɵɵviewQuery","MatDrawerContainer_HostBindings","ɵɵProvidersFeature","provide","useExisting","MatDrawerContainer_Template","ɵɵtemplate","ɵɵproperty","ɵɵadvance","NgIf","styles","MatSidenavContent","changeDetectorRef","container","MatSidenavContent_Factory","MatSidenavContainer","MatSidenavContent_HostBindings","MatSidenavContent_Template","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","ɵMatSidenav_BaseFactory","MatSidenav_Factory","ɵɵgetInheritedFactory","MatSidenav_HostBindings","MatSidenav_Template","ɵMatSidenavContainer_BaseFactory","MatSidenavContainer_Factory","MatSidenavContainer_ContentQueries","MatSidenavContainer_HostBindings","MatSidenavContainer_Template","MatSidenavModule","MatSidenavModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","ɵangular_material_src_material_sidenav_sidenav_a"],"mappings":"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","sourcesContent":["import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\n\nconst _c0 = [\"*\"];\nfunction MatDrawerContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\nfunction MatSidenavContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) { return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatDrawerContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContent, selectors: [[\"mat-drawer-content\"]], hostAttrs: [1, \"mat-drawer-content\"], hostVars: 4, hostBindings: function MatDrawerContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatDrawerContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatDrawerContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus();\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() { return this._position; }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() { return this._mode; }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() { return this._disableClose; }\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n        return value == null ? this.mode !== 'side' : value;\n    }\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() { return this._opened; }\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this.autoFocus || !this._focusTrap) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        });\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        var _a;\n        const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurring of the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n     *   origin will be used later when focus is restored on drawer close.\n     */\n    _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus();\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.ɵfac = function MatDrawer_Factory(t) { return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8)); };\nMatDrawer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawer, selectors: [[\"mat-drawer\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"], hostVars: 12, hostBindings: function MatDrawer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) { return ctx._animationStartListener($event); })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) { return ctx._animationDoneListener($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    } }, inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\", onPositionChanged: \"positionChanged\" }, exportAs: [\"matDrawer\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]], template: function MatDrawer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, directives: [ɵngcc1.CdkScrollable], encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    opened: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.FocusTrapFactory }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc3.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDrawerContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DRAWER_CONTAINER]\n            }] }]; }, { _animationState: [{\n            type: HostBinding,\n            args: ['@transform']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], openedStart: [{\n            type: Output\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], closedStart: [{\n            type: Output\n        }], onPositionChanged: [{\n            type: Output,\n            args: ['positionChanged']\n        }], position: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }], disableClose: [{\n            type: Input\n        }], autoFocus: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener: [{\n            type: HostListener,\n            args: ['@transform.start', ['$event']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener: [{\n            type: HostListener,\n            args: ['@transform.done', ['$event']]\n        }] }); })();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() { return this._start; }\n    /** The drawer child with the `end` position. */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() { return this._autosize; }\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) { return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatDrawerContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContainer, selectors: [[\"mat-drawer-container\"]], contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, viewQuery: function MatDrawerContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    } }, hostAttrs: [1, \"mat-drawer-container\"], hostVars: 2, hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, exportAs: [\"matDrawerContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer\n            }])], ngContentSelectors: _c2, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]], template: function MatDrawerContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatDrawerContent], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { backdropClick: [{\n            type: Output\n        }], autosize: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], _allDrawers: [{\n            type: ContentChildren,\n            args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatDrawerContent]\n        }], _userContent: [{\n            type: ViewChild,\n            args: [MatDrawerContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) { return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatSidenavContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContent, selectors: [[\"mat-sidenav-content\"]], hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"], hostVars: 4, hostBindings: function MatSidenavContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatSidenavContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatSidenavContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() { return this._fixedInViewport; }\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.ɵfac = /*@__PURE__*/ function () { let ɵMatSidenav_BaseFactory; return function MatSidenav_Factory(t) { return (ɵMatSidenav_BaseFactory || (ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav)))(t || MatSidenav); }; }();\nMatSidenav.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenav, selectors: [[\"mat-sidenav\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"], hostVars: 17, hostBindings: function MatSidenav_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    } }, inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, exportAs: [\"matSidenav\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[\"cdkScrollable\", \"\", 1, \"mat-drawer-inner-container\"]], template: function MatSidenav_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, directives: [ɵngcc1.CdkScrollable], encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, { fixedInViewport: [{\n            type: Input\n        }], fixedTopGap: [{\n            type: Input\n        }], fixedBottomGap: [{\n            type: Input\n        }] }); })();\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatSidenavContainer_BaseFactory; return function MatSidenavContainer_Factory(t) { return (ɵMatSidenavContainer_BaseFactory || (ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer)))(t || MatSidenavContainer); }; }();\nMatSidenavContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContainer, selectors: [[\"mat-sidenav-container\"]], contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"], hostVars: 2, hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, exportAs: [\"matSidenavContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]], template: function MatSidenavContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable], styles: [_c5], encapsulation: 2, changeDetection: 0 });\nMatSidenavContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], null, { _allDrawers: [{\n            type: ContentChildren,\n            args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatSidenavContent]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.ɵfac = function MatSidenavModule_Factory(t) { return new (t || MatSidenavModule)(); };\nMatSidenavModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSidenavModule });\nMatSidenavModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CommonModule,\n            MatCommonModule,\n            PlatformModule,\n            CdkScrollableModule,\n        ], CdkScrollableModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, { declarations: function () { return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        PlatformModule,\n        CdkScrollableModule]; }, exports: function () { return [CdkScrollableModule,\n        MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n\n"]},"metadata":{},"sourceType":"module"}