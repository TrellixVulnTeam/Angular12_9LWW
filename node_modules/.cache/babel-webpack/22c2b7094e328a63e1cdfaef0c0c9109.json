{"ast":null,"code":"/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n/**\n * Clear the projections cache.\n */\n\nexport function clear() {\n  cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\n\nexport function get(code) {\n  return cache[code] || cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] || null;\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\n\nexport function add(code, projection) {\n  cache[code] = projection;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/proj/projections.js"],"names":["cache","clear","get","code","replace","add","projection"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,EAAZ;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;AACpBD,EAAAA,KAAK,GAAG,EAAR;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,GAAT,CAAaC,IAAb,EAAmB;AACtB,SAAQH,KAAK,CAACG,IAAD,CAAL,IACJH,KAAK,CAACG,IAAI,CAACC,OAAL,CAAa,wCAAb,EAAuD,SAAvD,CAAD,CADD,IAEJ,IAFJ;AAGH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaF,IAAb,EAAmBG,UAAnB,EAA+B;AAClCN,EAAAA,KAAK,CAACG,IAAD,CAAL,GAAcG,UAAd;AACH","sourcesContent":["/**\n * @module ol/proj/projections\n */\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n    cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n    return (cache[code] ||\n        cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n        null);\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n    cache[code] = projection;\n}\n"]},"metadata":{},"sourceType":"module"}