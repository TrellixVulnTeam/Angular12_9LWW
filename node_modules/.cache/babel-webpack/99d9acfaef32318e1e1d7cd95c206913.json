{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\n\nvar TileDebug = function (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options} [opt_options] Debug tile options.\n   */\n\n\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n\n\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: function (tile, text) {\n        var z = tile.getTileCoord()[0];\n        var tileSize = toSize(_this.tileGrid.getTileSize(z));\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        /** @type {import(\"../ImageTile.js\").default} */\n\n        tile.setImage(context.canvas);\n      }\n    }) || this;\n    return _this;\n  }\n\n  return TileDebug;\n}(XYZ);\n\nexport default TileDebug;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/TileDebug.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","XYZ","createCanvasContext2D","toSize","TileDebug","_super","opt_options","_this","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","url","template","tileLoadFunction","tile","text","z","getTileCoord","tileSize","getTileSize","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","setImage","canvas"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nvar TileDebug = /** @class */ (function (_super) {\n    __extends(TileDebug, _super);\n    /**\n     * @param {Options} [opt_options] Debug tile options.\n     */\n    function TileDebug(opt_options) {\n        var _this = this;\n        /**\n         * @type {Options}\n         */\n        var options = opt_options || {};\n        _this = _super.call(this, {\n            opaque: false,\n            projection: options.projection,\n            tileGrid: options.tileGrid,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            zDirection: options.zDirection,\n            url: options.template || 'z:{z} x:{x} y:{y}',\n            tileLoadFunction: function (tile, text) {\n                var z = tile.getTileCoord()[0];\n                var tileSize = toSize(_this.tileGrid.getTileSize(z));\n                var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n                context.strokeStyle = 'grey';\n                context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n                context.fillStyle = 'grey';\n                context.strokeStyle = 'white';\n                context.textAlign = 'center';\n                context.textBaseline = 'middle';\n                context.font = '24px sans-serif';\n                context.lineWidth = 4;\n                context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n                context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n                /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(context.canvas);\n            },\n        }) || this;\n        return _this;\n    }\n    return TileDebug;\n}(XYZ));\nexport default TileDebug;\n"]},"metadata":{},"sourceType":"module"}