{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = function () {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n    /**\n     * @type {number}\n     */\n\n    this.maxX = maxX;\n    /**\n     * @type {number}\n     */\n\n    this.minY = minY;\n    /**\n     * @type {number}\n     */\n\n    this.maxY = maxY;\n  }\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n\n\n  TileRange.prototype.contains = function (tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n\n\n  TileRange.prototype.containsTileRange = function (tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  };\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n\n\n  TileRange.prototype.containsXY = function (x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n\n\n  TileRange.prototype.equals = function (tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n\n\n  TileRange.prototype.extend = function (tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  };\n  /**\n   * @return {number} Height.\n   */\n\n\n  TileRange.prototype.getHeight = function () {\n    return this.maxY - this.minY + 1;\n  };\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n\n\n  TileRange.prototype.getSize = function () {\n    return [this.getWidth(), this.getHeight()];\n  };\n  /**\n   * @return {number} Width.\n   */\n\n\n  TileRange.prototype.getWidth = function () {\n    return this.maxX - this.minX + 1;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n\n\n  TileRange.prototype.intersects = function (tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  };\n\n  return TileRange;\n}();\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\n\n\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/TileRange.js"],"names":["TileRange","minX","maxX","minY","maxY","prototype","contains","tileCoord","containsXY","containsTileRange","tileRange","x","y","equals","extend","getHeight","getSize","getWidth","intersects","createOrUpdate","undefined"],"mappings":"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","sourcesContent":["/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */ (function () {\n    /**\n     * @param {number} minX Minimum X.\n     * @param {number} maxX Maximum X.\n     * @param {number} minY Minimum Y.\n     * @param {number} maxY Maximum Y.\n     */\n    function TileRange(minX, maxX, minY, maxY) {\n        /**\n         * @type {number}\n         */\n        this.minX = minX;\n        /**\n         * @type {number}\n         */\n        this.maxX = maxX;\n        /**\n         * @type {number}\n         */\n        this.minY = minY;\n        /**\n         * @type {number}\n         */\n        this.maxY = maxY;\n    }\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {boolean} Contains tile coordinate.\n     */\n    TileRange.prototype.contains = function (tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n    TileRange.prototype.containsTileRange = function (tileRange) {\n        return (this.minX <= tileRange.minX &&\n            tileRange.maxX <= this.maxX &&\n            this.minY <= tileRange.minY &&\n            tileRange.maxY <= this.maxY);\n    };\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n    TileRange.prototype.containsXY = function (x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n    TileRange.prototype.equals = function (tileRange) {\n        return (this.minX == tileRange.minX &&\n            this.minY == tileRange.minY &&\n            this.maxX == tileRange.maxX &&\n            this.maxY == tileRange.maxY);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n    TileRange.prototype.extend = function (tileRange) {\n        if (tileRange.minX < this.minX) {\n            this.minX = tileRange.minX;\n        }\n        if (tileRange.maxX > this.maxX) {\n            this.maxX = tileRange.maxX;\n        }\n        if (tileRange.minY < this.minY) {\n            this.minY = tileRange.minY;\n        }\n        if (tileRange.maxY > this.maxY) {\n            this.maxY = tileRange.maxY;\n        }\n    };\n    /**\n     * @return {number} Height.\n     */\n    TileRange.prototype.getHeight = function () {\n        return this.maxY - this.minY + 1;\n    };\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n    TileRange.prototype.getSize = function () {\n        return [this.getWidth(), this.getHeight()];\n    };\n    /**\n     * @return {number} Width.\n     */\n    TileRange.prototype.getWidth = function () {\n        return this.maxX - this.minX + 1;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n    TileRange.prototype.intersects = function (tileRange) {\n        return (this.minX <= tileRange.maxX &&\n            this.maxX >= tileRange.minX &&\n            this.minY <= tileRange.maxY &&\n            this.maxY >= tileRange.minY);\n    };\n    return TileRange;\n}());\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    else {\n        return new TileRange(minX, maxX, minY, maxY);\n    }\n}\nexport default TileRange;\n"]},"metadata":{},"sourceType":"module"}