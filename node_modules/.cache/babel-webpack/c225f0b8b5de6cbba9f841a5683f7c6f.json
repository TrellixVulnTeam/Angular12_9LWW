{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient = function (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken || TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Update the server telemetry outcome\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            cachedIdToken = this.readIdTokenFromCache(request);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n              };\n              cachedAccount = this.readAccountFromCache(accountInfo);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read access token from cache TODO: CacheManager API should be used here\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * read idtoken from cache TODO: CacheManager API should be used here instead\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\n    var idTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      oboAssertion: request.oboAssertion\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    }); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * read account from cache, TODO: CacheManager API should be used here instead\r\n   * @param account\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\n    return this.cacheManager.readAccountFromCache(account);\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient);\n\nexport { OnBehalfOfClient };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/client/OnBehalfOfClient.js"],"names":["__extends","__awaiter","__generator","BaseClient","RequestParameterBuilder","ScopeSet","CredentialType","GrantType","AADServerParamKeys","CacheOutcome","Constants","ResponseHandler","TimeUtils","AuthToken","ClientAuthError","OnBehalfOfClient","_super","configuration","call","prototype","acquireToken","request","cachedAuthenticationResult","_a","label","scopeSet","scopes","skipCache","executeTokenRequest","authority","sent","getCachedAuthenticationResult","cachedAccessToken","cachedIdToken","idTokenObject","cachedAccount","localAccountId","accountInfo","_b","readAccessTokenFromCache","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","serverTelemetryManager","setCacheOutcome","CACHED_ACCESS_TOKEN_EXPIRED","NO_CACHED_ACCESS_TOKEN","readIdTokenFromCache","secret","cryptoInterface","claims","oid","sub","homeAccountId","environment","tenantId","realm","username","EMPTY_STRING","readAccountFromCache","generateAuthenticationResult","cryptoUtils","account","accessToken","idToken","refreshToken","appMetadata","accessTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","ACCESS_TOKEN","clientId","authOptions","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","numAccessTokens","length","createMultipleMatchingTokensInCacheError","idTokenFilter","ID_TOKEN","oboAssertion","idTokens","requestBody","headers","thumbprint","reqTimestamp","response","responseHandler","tokenResponse","createTokenRequestBody","createTokenRequestHeaders","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","parameterBuilder","addClientId","addScopes","addGrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","createQueryString"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nvar OnBehalfOfClient = /** @class */ (function (_super) {\r\n    __extends(OnBehalfOfClient, _super);\r\n    function OnBehalfOfClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * look up cache for tokens\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken ||\r\n                            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Update the server telemetry outcome\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        cachedIdToken = this.readIdTokenFromCache(request);\r\n                        cachedAccount = null;\r\n                        if (cachedIdToken) {\r\n                            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n                            localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n                            accountInfo = {\r\n                                homeAccountId: cachedIdToken.homeAccountId,\r\n                                environment: cachedIdToken.environment,\r\n                                tenantId: cachedIdToken.realm,\r\n                                username: Constants.EMPTY_STRING,\r\n                                localAccountId: localAccountId || \"\"\r\n                            };\r\n                            cachedAccount = this.readAccountFromCache(accountInfo);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: cachedAccount,\r\n                                accessToken: cachedAccessToken,\r\n                                idToken: cachedIdToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request, idTokenObject)];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * read access token from cache TODO: CacheManager API should be used here\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase(),\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * read idtoken from cache TODO: CacheManager API should be used here instead\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\r\n        var idTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            oboAssertion: request.oboAssertion\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\r\n        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * read account from cache, TODO: CacheManager API should be used here instead\r\n     * @param account\r\n     */\r\n    OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\r\n        return this.cacheManager.readAccountFromCache(account);\r\n    };\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return OnBehalfOfClient;\r\n}(BaseClient));\n\nexport { OnBehalfOfClient };\n"]},"metadata":{},"sourceType":"module"}