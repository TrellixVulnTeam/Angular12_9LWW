{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority = function () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscovery = new RegionDiscovery(networkInterface);\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n  }\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n      if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\n        return AuthorityType.Adfs;\n      }\n\n      return AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _a.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _a.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, autodetectedRegionName, azureRegion;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _b.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata)];\n\n          case 2:\n            autodetectedRegionName = _b.sent();\n            azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n            if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n   * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n   * @param cachedMetadata\r\n   * @param newMetadata\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _a.sent();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            } else {\n              // Metadata could not be obtained from config, cache or network\n              throw ClientConfigurationError.createUntrustedAuthorityError();\n            }\n\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      try {\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n\n        if (metadata) {\n          return metadata;\n        }\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   * @param networkInterface\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, match, response, metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            match = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];\n\n          case 2:\n            response = _a.sent();\n            metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n\n            if (metadata.length === 0) {\n              // If no metadata is returned, authority is untrusted\n              return [2\n              /*return*/\n              , null];\n            }\n\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            if (!match) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n    metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    return metadata;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/authority/Authority.js"],"names":["__awaiter","__generator","__assign","AuthorityType","isOpenIdConfigResponse","UrlString","ClientAuthError","Constants","AuthorityMetadataSource","RegionDiscoveryOutcomes","ClientConfigurationError","ProtocolMode","AuthorityMetadataEntity","isCloudInstanceDiscoveryResponse","RegionDiscovery","Authority","authority","networkInterface","cacheManager","authorityOptions","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscovery","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","Object","defineProperty","prototype","get","pathSegments","canonicalAuthorityUrlComponents","PathSegments","length","toLowerCase","ADFS","Adfs","Default","enumerable","configurable","protocolMode","urlString","set","url","_canonicalAuthorityUrlComponents","getUrlComponents","HostNameAndPort","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","issuer","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","OIDC","resolveEndpointsAsync","metadataEntity","cloudDiscoverySource","endpointSource","cacheKey","_a","label","getAuthorityMetadataByAlias","hostnameAndPort","updateCanonicalAuthority","updateCloudDiscoveryMetadata","sent","preferred_network","updateEndpointMetadata","CACHE","resetExpiresAt","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","autodetectedRegionName","azureRegion","_b","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","getEndpointMetadataFromNetwork","azureRegionConfiguration","detectRegion","environmentRegion","AZURE_REGION_AUTO_DISCOVER_FLAG","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","NETWORK","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","createInvalidAuthorityMetadataError","response","trys","push","sendGetRequestAsync","body","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","match","AAD_INSTANCE_DISCOVERY_ENDPT","_this","matches","knownAuthorities","filter","getDomainFromUrl","host","aliases","i","indexOf","getPreferredCache","isAlias","isPublicCloudAuthority","KNOWN_PUBLIC_CLOUDS","buildRegionalAuthorityString","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface, cacheManager, authorityOptions) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"authorityType\", {\r\n        // See above for AuthorityType\r\n        get: function () {\r\n            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\r\n            if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\r\n                return AuthorityType.Adfs;\r\n            }\r\n            return AuthorityType.Default;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"protocolMode\", {\r\n        /**\r\n         * ProtocolMode enum representing the way endpoints are constructed.\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions.protocolMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"options\", {\r\n        /**\r\n         * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthority.validateAsUri();\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\r\n        /**\r\n         * Get hostname and port i.e. login.microsoftonline.com\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.authorization_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.end_session_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.issuer);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    };\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replacePath = function (urlString) {\r\n        var endpoint = urlString;\r\n        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach(function (currentPart, index) {\r\n            var cachedPart = cachedAuthorityParts[index];\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\r\n            }\r\n        });\r\n        return endpoint;\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\r\n                return this.canonicalAuthority + \".well-known/openid-configuration\";\r\n            }\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.metadata;\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n                        if (!metadataEntity) {\r\n                            metadataEntity = new AuthorityMetadataEntity();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\r\n                    case 1:\r\n                        cloudDiscoverySource = _a.sent();\r\n                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\r\n                    case 2:\r\n                        endpointSource = _a.sent();\r\n                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n                            // Reset the expiration time unless both values came from a successful cache lookup\r\n                            metadataEntity.resetExpiresAt();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n                        this.metadata = metadataEntity;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, autodetectedRegionName, azureRegion;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        metadata = this.getEndpointMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateEndpointMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _b.sent();\r\n                        if (!metadata) return [3 /*break*/, 4];\r\n                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata)];\r\n                    case 2:\r\n                        autodetectedRegionName = _b.sent();\r\n                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\r\n                            ? autodetectedRegionName\r\n                            : this.authorityOptions.azureRegionConfiguration.azureRegion;\r\n                        if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                        }\r\n                        else {\r\n                            if (autodetectedRegionName) {\r\n                                this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\r\n                            }\r\n                            else {\r\n                                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                            }\r\n                        }\r\n                        if (azureRegion) {\r\n                            this.regionDiscoveryMetadata.region_used = azureRegion;\r\n                            metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\r\n                        }\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        metadataEntity.updateEndpointMetadata(metadata, true);\r\n                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                    case 4: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.isAuthoritySameType = function (metadataEntity) {\r\n        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    };\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromConfig = function () {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n     * @param cachedMetadata\r\n     * @param newMetadata\r\n     */\r\n    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                        }\r\n                        else {\r\n                            // Metadata could not be obtained from config, cache or network\r\n                            throw ClientConfigurationError.createUntrustedAuthorityError();\r\n                        }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            try {\r\n                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                if (metadata) {\r\n                    return metadata;\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     * @param networkInterface\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var instanceDiscoveryEndpoint, match, response, metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n                        match = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\r\n                        if (metadata.length === 0) {\r\n                            // If no metadata is returned, authority is untrusted\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4:\r\n                        if (!match) {\r\n                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \r\n                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n                        }\r\n                        return [2 /*return*/, match];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    Authority.prototype.isInKnownAuthorities = function () {\r\n        var _this = this;\r\n        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\r\n        });\r\n        return matches.length > 0;\r\n    };\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    Authority.createCloudDiscoveryMetadataFromHost = function (host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    };\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response\r\n     * @param authority\r\n     */\r\n    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\r\n        for (var i = 0; i < response.length; i++) {\r\n            var metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    Authority.prototype.getPreferredCache = function () {\r\n        if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    Authority.prototype.isAlias = function (host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    };\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    Authority.isPublicCloudAuthority = function (host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    };\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    Authority.buildRegionalAuthorityString = function (host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        var authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        var authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\r\n        }\r\n        // Include the query string portion of the url\r\n        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return url + \"?\" + queryString;\r\n        return url;\r\n    };\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\r\n        metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        return metadata;\r\n    };\r\n    return Authority;\r\n}());\n\nexport { Authority };\n"]},"metadata":{},"sourceType":"module"}