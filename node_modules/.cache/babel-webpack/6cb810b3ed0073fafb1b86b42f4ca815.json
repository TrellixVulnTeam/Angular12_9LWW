{"ast":null,"code":"/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { addCoordinateTransforms, addEquivalentProjections, addProjection, createSafeCoordinateTransform, get } from '../proj.js';\nimport { get as getTransform } from './transforms.js';\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {?} proj4 Proj4.\n * @api\n */\n\nexport function register(proj4) {\n  var projCodes = Object.keys(proj4.defs);\n  var len = projCodes.length;\n  var i, j;\n\n  for (i = 0; i < len; ++i) {\n    var code = projCodes[i];\n\n    if (!get(code)) {\n      var def = proj4.defs(code);\n      var units = def.units;\n\n      if (!units && def.projName === 'longlat') {\n        units = Units.DEGREES;\n      }\n\n      addProjection(new Projection({\n        code: code,\n        axisOrientation: def.axis,\n        metersPerUnit: def.to_meter,\n        units: units\n      }));\n    }\n  }\n\n  for (i = 0; i < len; ++i) {\n    var code1 = projCodes[i];\n    var proj1 = get(code1);\n\n    for (j = 0; j < len; ++j) {\n      var code2 = projCodes[j];\n      var proj2 = get(code2);\n\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          var transform = proj4(code1, code2);\n          addCoordinateTransforms(proj1, proj2, createSafeCoordinateTransform(proj1, proj2, transform.forward), createSafeCoordinateTransform(proj2, proj1, transform.inverse));\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/proj/proj4.js"],"names":["Projection","Units","addCoordinateTransforms","addEquivalentProjections","addProjection","createSafeCoordinateTransform","get","getTransform","register","proj4","projCodes","Object","keys","defs","len","length","i","j","code","def","units","projName","DEGREES","axisOrientation","axis","metersPerUnit","to_meter","code1","proj1","code2","proj2","transform","forward","inverse"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,EAA4DC,aAA5D,EAA2EC,6BAA3E,EAA0GC,GAA1G,QAAsH,YAAtH;AACA,SAASA,GAAG,IAAIC,YAAhB,QAAoC,iBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,MAAIC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,IAAlB,CAAhB;AACA,MAAIC,GAAG,GAAGJ,SAAS,CAACK,MAApB;AACA,MAAIC,CAAJ,EAAOC,CAAP;;AACA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,GAAhB,EAAqB,EAAEE,CAAvB,EAA0B;AACtB,QAAIE,IAAI,GAAGR,SAAS,CAACM,CAAD,CAApB;;AACA,QAAI,CAACV,GAAG,CAACY,IAAD,CAAR,EAAgB;AACZ,UAAIC,GAAG,GAAGV,KAAK,CAACI,IAAN,CAAWK,IAAX,CAAV;AACA,UAAIE,KAAK,GAAGD,GAAG,CAACC,KAAhB;;AACA,UAAI,CAACA,KAAD,IAAUD,GAAG,CAACE,QAAJ,KAAiB,SAA/B,EAA0C;AACtCD,QAAAA,KAAK,GAAGnB,KAAK,CAACqB,OAAd;AACH;;AACDlB,MAAAA,aAAa,CAAC,IAAIJ,UAAJ,CAAe;AACzBkB,QAAAA,IAAI,EAAEA,IADmB;AAEzBK,QAAAA,eAAe,EAAEJ,GAAG,CAACK,IAFI;AAGzBC,QAAAA,aAAa,EAAEN,GAAG,CAACO,QAHM;AAIzBN,QAAAA,KAAK,EAAEA;AAJkB,OAAf,CAAD,CAAb;AAMH;AACJ;;AACD,OAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,GAAhB,EAAqB,EAAEE,CAAvB,EAA0B;AACtB,QAAIW,KAAK,GAAGjB,SAAS,CAACM,CAAD,CAArB;AACA,QAAIY,KAAK,GAAGtB,GAAG,CAACqB,KAAD,CAAf;;AACA,SAAKV,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,GAAhB,EAAqB,EAAEG,CAAvB,EAA0B;AACtB,UAAIY,KAAK,GAAGnB,SAAS,CAACO,CAAD,CAArB;AACA,UAAIa,KAAK,GAAGxB,GAAG,CAACuB,KAAD,CAAf;;AACA,UAAI,CAACtB,YAAY,CAACoB,KAAD,EAAQE,KAAR,CAAjB,EAAiC;AAC7B,YAAIpB,KAAK,CAACI,IAAN,CAAWc,KAAX,MAAsBlB,KAAK,CAACI,IAAN,CAAWgB,KAAX,CAA1B,EAA6C;AACzC1B,UAAAA,wBAAwB,CAAC,CAACyB,KAAD,EAAQE,KAAR,CAAD,CAAxB;AACH,SAFD,MAGK;AACD,cAAIC,SAAS,GAAGtB,KAAK,CAACkB,KAAD,EAAQE,KAAR,CAArB;AACA3B,UAAAA,uBAAuB,CAAC0B,KAAD,EAAQE,KAAR,EAAezB,6BAA6B,CAACuB,KAAD,EAAQE,KAAR,EAAeC,SAAS,CAACC,OAAzB,CAA5C,EAA+E3B,6BAA6B,CAACyB,KAAD,EAAQF,KAAR,EAAeG,SAAS,CAACE,OAAzB,CAA5G,CAAvB;AACH;AACJ;AACJ;AACJ;AACJ","sourcesContent":["/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { addCoordinateTransforms, addEquivalentProjections, addProjection, createSafeCoordinateTransform, get, } from '../proj.js';\nimport { get as getTransform } from './transforms.js';\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {?} proj4 Proj4.\n * @api\n */\nexport function register(proj4) {\n    var projCodes = Object.keys(proj4.defs);\n    var len = projCodes.length;\n    var i, j;\n    for (i = 0; i < len; ++i) {\n        var code = projCodes[i];\n        if (!get(code)) {\n            var def = proj4.defs(code);\n            var units = def.units;\n            if (!units && def.projName === 'longlat') {\n                units = Units.DEGREES;\n            }\n            addProjection(new Projection({\n                code: code,\n                axisOrientation: def.axis,\n                metersPerUnit: def.to_meter,\n                units: units,\n            }));\n        }\n    }\n    for (i = 0; i < len; ++i) {\n        var code1 = projCodes[i];\n        var proj1 = get(code1);\n        for (j = 0; j < len; ++j) {\n            var code2 = projCodes[j];\n            var proj2 = get(code2);\n            if (!getTransform(code1, code2)) {\n                if (proj4.defs[code1] === proj4.defs[code2]) {\n                    addEquivalentProjections([proj1, proj2]);\n                }\n                else {\n                    var transform = proj4(code1, code2);\n                    addCoordinateTransforms(proj1, proj2, createSafeCoordinateTransform(proj1, proj2, transform.forward), createSafeCoordinateTransform(proj2, proj1, transform.inverse));\n                }\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}