{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, InjectionToken, APP_INITIALIZER, Injector, Inject, Optional, SkipSelf, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClient, HttpErrorResponse, HttpClientModule, HttpResponse } from '@angular/common/http';\nimport { finalize, catchError, map, tap, debounceTime, startWith } from 'rxjs/operators';\nimport { BehaviorSubject, throwError, of, combineLatest, fromEvent } from 'rxjs';\nimport { uuid, ObjectUtils } from '@igo2/utils';\nimport * as i1 from '@ngx-translate/core';\nimport { TranslateLoader, TranslateModule, MissingTranslationHandler } from '@ngx-translate/core';\nimport * as i1$1 from 'ngx-toastr';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\nimport * as i1$2 from '@angular/material/icon';\nimport * as i2 from '@angular/platform-browser';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG, HammerModule } from '@angular/platform-browser';\nimport * as i1$3 from '@angular/router';\nimport * as i1$4 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nlet ActivityService = /*#__PURE__*/(() => {\n  class ActivityService {\n    constructor() {\n      this.counter$ = new BehaviorSubject(0);\n      this.ids = [];\n    }\n\n    register() {\n      const id = uuid();\n      this.ids.push(id);\n      this.counter$.next(this.ids.length);\n      return id;\n    }\n\n    unregister(id) {\n      const index = this.ids.indexOf(id);\n\n      if (index === -1) {\n        return;\n      }\n\n      this.ids.splice(index, 1);\n      this.counter$.next(this.ids.length);\n    }\n\n  }\n\n  ActivityService.ɵfac = function ActivityService_Factory(t) {\n    return new (t || ActivityService)();\n  };\n\n  ActivityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ActivityService,\n    factory: ActivityService.ɵfac,\n    providedIn: 'root'\n  });\n  return ActivityService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ActivityInterceptor = /*#__PURE__*/(() => {\n  class ActivityInterceptor {\n    constructor(activityService) {\n      this.activityService = activityService;\n    }\n\n    intercept(req, next) {\n      const activity = req.headers.get('activityInterceptor');\n\n      if (activity) {\n        const actReq = req.clone({\n          headers: req.headers.delete('activityInterceptor')\n        });\n\n        if (activity === 'false') {\n          return next.handle(actReq);\n        }\n      }\n\n      const id = this.activityService.register();\n      return next.handle(req).pipe(finalize(() => {\n        this.activityService.unregister(id);\n      }));\n    }\n\n  }\n\n  ActivityInterceptor.ɵfac = function ActivityInterceptor_Factory(t) {\n    return new (t || ActivityInterceptor)(i0.ɵɵinject(ActivityService));\n  };\n\n  ActivityInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ActivityInterceptor,\n    factory: ActivityInterceptor.ɵfac\n  });\n  return ActivityInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoActivityModule = /*#__PURE__*/(() => {\n  class IgoActivityModule {\n    static forRoot() {\n      return {\n        ngModule: IgoActivityModule,\n        providers: [{\n          provide: HTTP_INTERCEPTORS,\n          useClass: ActivityInterceptor,\n          multi: true\n        }]\n      };\n    }\n\n  }\n\n  IgoActivityModule.ɵfac = function IgoActivityModule_Factory(t) {\n    return new (t || IgoActivityModule)();\n  };\n\n  IgoActivityModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoActivityModule\n  });\n  IgoActivityModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoActivityModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst version = {\n  lib: '1.11.1',\n  releaseDate: 1649355043171\n};\nlet ConfigService = /*#__PURE__*/(() => {\n  class ConfigService {\n    constructor(injector) {\n      this.injector = injector;\n      this.config = {};\n    }\n    /**\r\n     * Use to get the data found in config file\r\n     */\n\n\n    getConfig(key) {\n      return ObjectUtils.resolve(this.config, key);\n    }\n    /**\r\n     * This method loads \"[path]\" to get all config's variables\r\n     */\n\n\n    load(options) {\n      const baseConfig = options.default || {};\n\n      if (!options.path) {\n        this.config = baseConfig;\n        return true;\n      }\n\n      const http = this.injector.get(HttpClient);\n      return new Promise((resolve, _reject) => {\n        http.get(options.path).pipe(catchError(error => {\n          console.log(`Configuration file ${options.path} could not be read`);\n          resolve(true);\n          return throwError(error.error || 'Server error');\n        })).subscribe(configResponse => {\n          this.config = ObjectUtils.mergeDeep(ObjectUtils.mergeDeep({\n            version\n          }, baseConfig), configResponse);\n          resolve(true);\n        });\n      });\n    }\n\n  }\n\n  ConfigService.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i0.Injector));\n  };\n\n  ConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConfigService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CONFIG_OPTIONS = new InjectionToken('configOptions');\n\nfunction provideConfigOptions(options) {\n  return {\n    provide: CONFIG_OPTIONS,\n    useValue: options\n  };\n}\n\nfunction configFactory(configService, options) {\n  return () => configService.load(options);\n}\n\nfunction provideConfigLoader() {\n  return {\n    provide: APP_INITIALIZER,\n    useFactory: configFactory,\n    multi: true,\n    deps: [ConfigService, CONFIG_OPTIONS]\n  };\n}\n\nlet IgoConfigModule = /*#__PURE__*/(() => {\n  class IgoConfigModule {\n    static forRoot() {\n      return {\n        ngModule: IgoConfigModule,\n        providers: [provideConfigOptions({}), provideConfigLoader()]\n      };\n    }\n\n  }\n\n  IgoConfigModule.ɵfac = function IgoConfigModule_Factory(t) {\n    return new (t || IgoConfigModule)();\n  };\n\n  IgoConfigModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoConfigModule\n  });\n  IgoConfigModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoConfigModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass LanguageLoader {\n  constructor(http, prefix, suffix = '.json', config) {\n    this.http = http;\n    this.prefix = prefix;\n    this.suffix = suffix;\n    this.config = config;\n  }\n\n  getTranslation(lang) {\n    const translation = require(`../locale/${lang}.json`);\n\n    const igoLocale$ = of(translation);\n\n    if (this.config && !this.prefix) {\n      const prefix = this.config.getConfig('language.prefix');\n      this.prefix = !prefix || Array.isArray(prefix) ? prefix : [prefix];\n    }\n\n    if (!this.prefix || this.prefix.length === 0) {\n      return igoLocale$;\n    }\n\n    const appLocale$ = this.prefix.map(prefix => this.http.get(`${prefix}${lang}${this.suffix}`));\n    const locale$ = combineLatest([igoLocale$, ...appLocale$]);\n    return locale$.pipe(map(translations => {\n      return translations.reduce((acc, current) => ObjectUtils.mergeDeep(acc, current), {});\n    }));\n  }\n\n}\n\nfunction defaultLanguageLoader(http, config) {\n  return new LanguageLoader(http, undefined, undefined, config);\n}\n\nfunction provideLanguageLoader(loader) {\n  return {\n    provide: TranslateLoader,\n    useFactory: loader || defaultLanguageLoader,\n    deps: [HttpClient]\n  };\n}\n\nfunction provideDefaultLanguageLoader(loader) {\n  return {\n    provide: TranslateLoader,\n    useFactory: loader || defaultLanguageLoader,\n    deps: [HttpClient, ConfigService]\n  };\n}\n\nclass IgoMissingTranslationHandler {\n  handle(params) {\n    if (!params.translateService.langs.length) {\n      const error = 'Translations are not yet loaded. \\\n         Check that the LanguageService is injected.';\n      throw new Error(error);\n    }\n\n    if (params.key.substr(0, 4) === 'igo.') {\n      throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\n    } else {\n      return params.key;\n    }\n  }\n\n}\n\nlet IgoLanguageModule = /*#__PURE__*/(() => {\n  class IgoLanguageModule {\n    static forRoot() {\n      return {\n        ngModule: IgoLanguageModule,\n        providers: [provideDefaultLanguageLoader()]\n      };\n    }\n\n  }\n\n  IgoLanguageModule.ɵfac = function IgoLanguageModule_Factory(t) {\n    return new (t || IgoLanguageModule)();\n  };\n\n  IgoLanguageModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoLanguageModule\n  });\n  IgoLanguageModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[TranslateModule.forRoot({\n      missingTranslationHandler: {\n        provide: MissingTranslationHandler,\n        useClass: IgoMissingTranslationHandler\n      }\n    })], TranslateModule]\n  });\n  return IgoLanguageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoLanguageModule, {\n    imports: [i1.TranslateModule],\n    exports: [TranslateModule]\n  });\n})();\n\nlet IgoMessageModule = /*#__PURE__*/(() => {\n  class IgoMessageModule {\n    static forRoot() {\n      return {\n        ngModule: IgoMessageModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoMessageModule.ɵfac = function IgoMessageModule_Factory(t) {\n    return new (t || IgoMessageModule)();\n  };\n\n  IgoMessageModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoMessageModule\n  });\n  IgoMessageModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ToastrModule.forRoot({\n      positionClass: 'toast-bottom-right',\n      timeOut: 10000,\n      extendedTimeOut: 10000,\n      messageClass: 'toast-message mat-typography',\n      closeButton: true,\n      progressBar: true,\n      enableHtml: true,\n      tapToDismiss: true,\n      maxOpened: 4,\n      preventDuplicates: true,\n      resetTimeoutOnDuplicate: true,\n      countDuplicates: false,\n      includeTitleDuplicates: true\n    })]]\n  });\n  return IgoMessageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoMessageModule, {\n    imports: [CommonModule, i1$1.ToastrModule]\n  });\n})();\n\nlet LanguageService = /*#__PURE__*/(() => {\n  class LanguageService {\n    constructor(translate) {\n      this.translate = translate;\n      this.language = this.translate.getBrowserLang();\n      const lang = this.getLanguage();\n      this.translate.setDefaultLang(lang);\n    }\n\n    getLanguage() {\n      return this.language.match(/en|fr/) ? this.language : 'en';\n    }\n\n    setLanguage(language) {\n      this.language = language.match(/en|fr/) ? language : 'en';\n      this.translate.use(this.language);\n      this.translate.reloadLang(this.language);\n    }\n\n  }\n\n  LanguageService.ɵfac = function LanguageService_Factory(t) {\n    return new (t || LanguageService)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  LanguageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LanguageService,\n    factory: LanguageService.ɵfac,\n    providedIn: 'root'\n  });\n  return LanguageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MessageType = /*#__PURE__*/(() => {\n  (function (MessageType) {\n    MessageType[\"ERROR\"] = \"error\";\n    MessageType[\"ALERT\"] = \"warning\";\n    MessageType[\"WARNING\"] = \"warning\";\n    MessageType[\"INFO\"] = \"info\";\n    MessageType[\"SUCCESS\"] = \"success\";\n  })(MessageType || (MessageType = {}));\n\n  return MessageType;\n})();\nlet MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(injector, configService, languageService) {\n      this.injector = injector;\n      this.configService = configService;\n      this.languageService = languageService;\n      this.messages$ = new BehaviorSubject([]);\n      this.options = this.configService.getConfig('message') || {};\n    }\n\n    get toastr() {\n      return this.injector.get(ToastrService);\n    }\n\n    showError(httpError) {\n      httpError.error.caught = true;\n      return this.error(httpError.error.message, httpError.error.title);\n    }\n\n    message(message) {\n      this.messages$.next(this.messages$.value.concat([message]));\n      message.options = message.options || {};\n      const currentDate = new Date();\n      message.options.from = message.options.from ? message.options.from : new Date('1 jan 1900');\n      message.options.to = message.options.to ? message.options.to : new Date('1 jan 3000');\n\n      if (typeof message.options.from === 'string') {\n        message.options.from = new Date(Date.parse(message.options.from.replace(/-/g, ' ')));\n      }\n\n      if (typeof message.options.to === 'string') {\n        message.options.to = new Date(Date.parse(message.options.to.replace(/-/g, ' ')));\n      }\n\n      if (currentDate > message.options.from && currentDate < message.options.to) {\n        message = this.handleTemplate(message);\n\n        if (message.text) {\n          let messageShown;\n\n          switch (message.type) {\n            case MessageType.SUCCESS:\n              messageShown = this.success(message.text, message.title, message.options);\n              break;\n\n            case MessageType.ERROR:\n              messageShown = this.error(message.text, message.title, message.options);\n              break;\n\n            case MessageType.INFO:\n              messageShown = this.info(message.text, message.title, message.options);\n              break;\n\n            case MessageType.ALERT:\n            case MessageType.WARNING:\n              messageShown = this.alert(message.text, message.title, message.options);\n              break;\n\n            default:\n              messageShown = this.info(message.text, message.title, message.options);\n              break;\n          }\n\n          message.options.id = messageShown.toastId;\n        }\n      }\n    }\n\n    success(text, title = 'igo.core.message.success', options = {}) {\n      const message = this.languageService.translate.instant(text);\n      const translatedTitle = this.languageService.translate.instant(title);\n      return this.toastr.success(message, translatedTitle, options);\n    }\n\n    error(text, title = 'igo.core.message.error', options = {}) {\n      const message = this.languageService.translate.instant(text);\n      const translatedTitle = this.languageService.translate.instant(title);\n      return this.toastr.error(message, translatedTitle, options);\n    }\n\n    info(text, title = 'igo.core.message.info', options = {}) {\n      const message = this.languageService.translate.instant(text);\n      const translatedTitle = this.languageService.translate.instant(title);\n      return this.toastr.info(message, translatedTitle, options);\n    }\n\n    alert(text, title = 'igo.core.message.alert', options = {}) {\n      const message = this.languageService.translate.instant(text);\n      const translatedTitle = this.languageService.translate.instant(title);\n      return this.toastr.warning(message, translatedTitle, options);\n    }\n\n    remove(id) {\n      this.toastr.remove(id);\n    }\n\n    removeAllAreNotError() {\n      for (const mess of this.messages$.value) {\n        if (mess.type !== MessageType.ERROR) {\n          this.remove(mess.options.id);\n        }\n      }\n    }\n\n    handleTemplate(message) {\n      if (!this.options.template || message.html) {\n        return message;\n      }\n\n      let html = this.options.template;\n      html = html.replace('${text}', message.text);\n      html = html.replace('${title}', message.title);\n      message.html = undefined;\n      message.text = html;\n      message.title = undefined;\n      return message;\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(Injector), i0.ɵɵinject(ConfigService), i0.ɵɵinject(LanguageService));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(messageService, injector) {\n      this.messageService = messageService;\n      this.injector = injector;\n    }\n\n    intercept(req, next) {\n      const errorContainer = {\n        httpError: undefined\n      };\n      return next.handle(req).pipe(catchError(error => this.handleError(error, errorContainer)), finalize(() => {\n        this.handleCaughtError(errorContainer);\n        this.handleUncaughtError(errorContainer);\n      }));\n    }\n\n    handleError(httpError, errorContainer) {\n      if (httpError instanceof HttpErrorResponse) {\n        const errorObj = httpError.error === 'object' ? httpError.error : {};\n        errorObj.message = httpError.error.message || httpError.statusText;\n        errorObj.caught = false;\n        httpError = new HttpErrorResponse({\n          error: errorObj,\n          headers: httpError.headers,\n          status: httpError.status,\n          statusText: httpError.statusText,\n          url: httpError.url\n        });\n      }\n\n      errorContainer.httpError = httpError;\n      return throwError(httpError);\n    }\n\n    handleCaughtError(errorContainer) {\n      const httpError = errorContainer.httpError;\n\n      if (httpError && httpError.error.toDisplay) {\n        httpError.error.caught = true;\n        this.messageService.error(httpError.error.message, httpError.error.title);\n      }\n    }\n\n    handleUncaughtError(errorContainer) {\n      const httpError = errorContainer.httpError;\n\n      if (httpError && !httpError.error.caught) {\n        const translate = this.injector.get(LanguageService).translate;\n        const message = translate.instant('igo.core.errors.uncaught.message');\n        const title = translate.instant('igo.core.errors.uncaught.title');\n        httpError.error.caught = true;\n        this.messageService.error(message, title);\n      }\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(MessageService), i0.ɵɵinject(i0.Injector));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoErrorModule = /*#__PURE__*/(() => {\n  class IgoErrorModule {\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('IgoErrorModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n    static forRoot() {\n      return {\n        ngModule: IgoErrorModule,\n        providers: [{\n          provide: HTTP_INTERCEPTORS,\n          useClass: ErrorInterceptor,\n          multi: true\n        }]\n      };\n    }\n\n  }\n\n  IgoErrorModule.ɵfac = function IgoErrorModule_Factory(t) {\n    return new (t || IgoErrorModule)(i0.ɵɵinject(IgoErrorModule, 12));\n  };\n\n  IgoErrorModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoErrorModule\n  });\n  IgoErrorModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoErrorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoCoreModule = /*#__PURE__*/(() => {\n  class IgoCoreModule {\n    constructor(matIconRegistry, domSanitizer) {\n      matIconRegistry.addSvgIconSet(domSanitizer.bypassSecurityTrustResourceUrl('./assets/igo2/core/icons/mdi.svg'));\n    }\n\n    static forRoot() {\n      return {\n        ngModule: IgoCoreModule,\n        providers: []\n      };\n    }\n\n  }\n\n  IgoCoreModule.ɵfac = function IgoCoreModule_Factory(t) {\n    return new (t || IgoCoreModule)(i0.ɵɵinject(i1$2.MatIconRegistry), i0.ɵɵinject(i2.DomSanitizer));\n  };\n\n  IgoCoreModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoCoreModule\n  });\n  IgoCoreModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, HttpClientModule, IgoActivityModule.forRoot(), IgoConfigModule.forRoot(), IgoErrorModule.forRoot(), IgoLanguageModule.forRoot(), IgoMessageModule.forRoot()], IgoActivityModule, IgoConfigModule, IgoErrorModule, IgoLanguageModule, IgoMessageModule]\n  });\n  return IgoCoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoCoreModule, {\n    imports: [CommonModule, HttpClientModule, IgoActivityModule, IgoConfigModule, IgoErrorModule, IgoLanguageModule, IgoMessageModule],\n    exports: [IgoActivityModule, IgoConfigModule, IgoErrorModule, IgoLanguageModule, IgoMessageModule]\n  });\n})();\n\nlet IgoGestureConfig = /*#__PURE__*/(() => {\n  class IgoGestureConfig extends HammerGestureConfig {\n    buildHammer(element) {\n      const mc = super.buildHammer(element);\n      mc.set({\n        touchAction: 'pan-y'\n      });\n      return mc;\n    }\n\n  }\n\n  IgoGestureConfig.ɵfac = /*@__PURE__*/function () {\n    let ɵIgoGestureConfig_BaseFactory;\n    return function IgoGestureConfig_Factory(t) {\n      return (ɵIgoGestureConfig_BaseFactory || (ɵIgoGestureConfig_BaseFactory = i0.ɵɵgetInheritedFactory(IgoGestureConfig)))(t || IgoGestureConfig);\n    };\n  }();\n\n  IgoGestureConfig.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IgoGestureConfig,\n    factory: IgoGestureConfig.ɵfac\n  });\n  return IgoGestureConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoGestureModule = /*#__PURE__*/(() => {\n  class IgoGestureModule {\n    static forRoot() {\n      return {\n        ngModule: IgoGestureModule,\n        providers: [{\n          provide: HAMMER_GESTURE_CONFIG,\n          useClass: IgoGestureConfig\n        }]\n      };\n    }\n\n  }\n\n  IgoGestureModule.ɵfac = function IgoGestureModule_Factory(t) {\n    return new (t || IgoGestureModule)();\n  };\n\n  IgoGestureModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoGestureModule\n  });\n  IgoGestureModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[HammerModule]]\n  });\n  return IgoGestureModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IgoGestureModule, {\n    imports: [HammerModule]\n  });\n})();\n\nlet LoggingInterceptor = /*#__PURE__*/(() => {\n  class LoggingInterceptor {\n    intercept(req, next) {\n      const started = Date.now();\n      let ok; // extend server response observable with logging\n\n      return next.handle(req).pipe(tap( // Succeeds when there is a response; ignore other events\n      event => ok = event instanceof HttpResponse ? 'succeeded' : '', // Operation failed; error is an HttpErrorResponse\n      error => ok = 'failed'), // Log when response observable either completes or errors\n      finalize(() => {\n        const elapsed = Date.now() - started;\n        const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n        console.log(msg);\n      }));\n    }\n\n  }\n\n  LoggingInterceptor.ɵfac = function LoggingInterceptor_Factory(t) {\n    return new (t || LoggingInterceptor)();\n  };\n\n  LoggingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggingInterceptor,\n    factory: LoggingInterceptor.ɵfac\n  });\n  return LoggingInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet IgoLoggingModule = /*#__PURE__*/(() => {\n  class IgoLoggingModule {\n    static forRoot() {\n      return {\n        ngModule: IgoLoggingModule,\n        providers: [{\n          provide: HTTP_INTERCEPTORS,\n          useClass: LoggingInterceptor,\n          multi: true\n        }]\n      };\n    }\n\n  }\n\n  IgoLoggingModule.ɵfac = function IgoLoggingModule_Factory(t) {\n    return new (t || IgoLoggingModule)();\n  };\n\n  IgoLoggingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: IgoLoggingModule\n  });\n  IgoLoggingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return IgoLoggingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ROUTE_SERVICE_OPTIONS = new InjectionToken('routeServiceOptions');\n\nfunction provideRouteServiceOptions(options) {\n  return {\n    provide: ROUTE_SERVICE_OPTIONS,\n    useValue: options\n  };\n}\n\nlet RouteService = /*#__PURE__*/(() => {\n  class RouteService {\n    constructor(router, route, options) {\n      this.router = router;\n      this.route = route;\n      const defaultOptions = {\n        centerKey: 'center',\n        zoomKey: 'zoom',\n        projectionKey: 'projection',\n        contextKey: 'context',\n        searchKey: 'search',\n        visibleOnLayersKey: 'visiblelayers',\n        visibleOffLayersKey: 'invisiblelayers',\n        directionsCoordKey: 'routing',\n        directionsOptionsKey: 'routingOptions',\n        toolKey: 'tool',\n        wmsUrlKey: 'wmsUrl',\n        wmsLayersKey: 'wmsLayers',\n        wmtsUrlKey: 'wmtsUrl',\n        wmtsLayersKey: 'wmtsLayers',\n        arcgisUrlKey: 'arcgisUrl',\n        arcgisLayersKey: 'arcgisLayers',\n        iarcgisUrlKey: 'iarcgisUrl',\n        iarcgisLayersKey: 'iarcgisLayers',\n        tarcgisUrlKey: 'tarcgisUrl',\n        tarcgisLayersKey: 'tarcgisLayers',\n        vectorKey: 'vector'\n      };\n      this.options = Object.assign({}, defaultOptions, options);\n    }\n\n    get queryParams() {\n      let url = decodeURIComponent(location.search);\n\n      if (url.includes('¢er=')) {\n        url = url.replace('¢er', '&center');\n        const queryParams = url.slice(1).split('&').map(p => p.split('=')).reduce((obj, pair) => {\n          const [key, value] = pair.map(decodeURIComponent);\n          obj[key] = value;\n          return obj;\n        }, {});\n        this.router.navigate([], {\n          queryParams\n        });\n      }\n\n      return this.route.queryParams;\n    }\n\n  }\n\n  RouteService.ɵfac = function RouteService_Factory(t) {\n    return new (t || RouteService)(i0.ɵɵinject(i1$3.Router), i0.ɵɵinject(i1$3.ActivatedRoute), i0.ɵɵinject(ROUTE_SERVICE_OPTIONS, 8));\n  };\n\n  RouteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouteService,\n    factory: RouteService.ɵfac,\n    providedIn: 'root'\n  });\n  return RouteService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet AnalyticsService = /*#__PURE__*/(() => {\n  class AnalyticsService {\n    constructor(config) {\n      this.config = config;\n      this.options = this.config.getConfig('analytics') || {};\n\n      if (this.options.provider === 'matomo') {\n        this.initMatomo();\n      }\n    }\n\n    get paq() {\n      return window._paq = window._paq || [];\n    }\n\n    initMatomo() {\n      if (!this.options.url || !this.options.id) {\n        return;\n      }\n\n      const url = this.options.url.substr(-1) === '/' ? this.options.url + 'matomo' : this.options.url; // this.paq.push(['trackPageView']);\n      // this.paq.push(['enableLinkTracking']);\n\n      (() => {\n        this.paq.push(['setTrackerUrl', url + '.php']);\n        this.paq.push(['setSiteId', this.options.id]);\n        const g = document.createElement('script');\n        const s = document.getElementsByTagName('script')[0];\n        g.type = 'text/javascript';\n        g.async = true;\n        g.defer = true;\n        g.src = url + '.js';\n        s.parentNode.insertBefore(g, s);\n      })();\n    }\n\n    setUser(user, profils) {\n      if (this.options.provider === 'matomo') {\n        if (!user) {\n          this.paq.push(['resetUserId']);\n          this.paq.push(['deleteCustomVariable', 1, 'user']);\n          this.paq.push(['deleteCustomVariable', 2, 'name']);\n          this.paq.push(['deleteCustomVariable', 3, 'profils']);\n        } else {\n          this.paq.push(['setUserId', user.id]);\n          const name = `${user.firstName} ${user.lastName}`;\n          this.paq.push(['setCustomVariable', 1, 'user', user.sourceId, 'visit']);\n          this.paq.push(['setCustomVariable', 2, 'name', name, 'visit']);\n          this.paq.push(['setCustomVariable', 3, 'profils', profils, 'visit']);\n        }\n\n        this.paq.push(['trackPageView']);\n        this.paq.push(['enableLinkTracking']);\n      }\n    }\n\n    trackSearch(term, nbResults) {\n      if (this.options.provider === 'matomo') {\n        this.paq.push(['trackSiteSearch', term, false, nbResults]);\n      }\n    }\n\n    trackEvent(category, action, name) {\n      if (this.options.provider === 'matomo') {\n        this.paq.push(['trackEvent', category, action, name]);\n      }\n    }\n\n  }\n\n  AnalyticsService.ɵfac = function AnalyticsService_Factory(t) {\n    return new (t || AnalyticsService)(i0.ɵɵinject(ConfigService));\n  };\n\n  AnalyticsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnalyticsService,\n    factory: AnalyticsService.ɵfac,\n    providedIn: 'root'\n  });\n  return AnalyticsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar Media = /*#__PURE__*/(() => {\n  (function (Media) {\n    Media[\"Mobile\"] = \"mobile\";\n    Media[\"Tablet\"] = \"tablet\";\n    Media[\"Desktop\"] = \"desktop\";\n  })(Media || (Media = {}));\n\n  return Media;\n})();\nvar MediaOrientation = /*#__PURE__*/(() => {\n  (function (MediaOrientation) {\n    MediaOrientation[\"Portrait\"] = \"portrait\";\n    MediaOrientation[\"Landscape\"] = \"landscape\";\n  })(MediaOrientation || (MediaOrientation = {}));\n\n  return MediaOrientation;\n})();\nlet MediaService = /*#__PURE__*/(() => {\n  class MediaService {\n    constructor(breakpointObserver) {\n      this.media$ = new BehaviorSubject(undefined);\n      this.orientation$ = new BehaviorSubject(undefined);\n      breakpointObserver.observe([Breakpoints.HandsetLandscape]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Mobile);\n          this.orientation$.next(MediaOrientation.Landscape);\n        }\n      });\n      breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Mobile);\n          this.orientation$.next(MediaOrientation.Portrait);\n        }\n      });\n      breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Tablet);\n          this.orientation$.next(MediaOrientation.Landscape);\n        }\n      });\n      breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Tablet);\n          this.orientation$.next(MediaOrientation.Portrait);\n        }\n      });\n      breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Desktop);\n          this.orientation$.next(MediaOrientation.Landscape);\n        }\n      });\n      breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Desktop);\n          this.orientation$.next(MediaOrientation.Portrait);\n        }\n      });\n    }\n\n    getMedia() {\n      return this.media$.value;\n    }\n\n    getOrientation() {\n      return this.orientation$.value;\n    }\n\n    isTouchScreen() {\n      return 'ontouchstart' in document.documentElement ? true : false;\n    }\n\n    isMobile() {\n      const media = this.getMedia();\n      return media === 'mobile';\n    }\n\n    isDesktop() {\n      const media = this.getMedia();\n      return media === 'desktop';\n    }\n\n  }\n\n  MediaService.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)(i0.ɵɵinject(i1$4.BreakpointObserver));\n  };\n\n  MediaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: 'root'\n  });\n  return MediaService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar StorageScope = /*#__PURE__*/(() => {\n  (function (StorageScope) {\n    StorageScope[\"SESSION\"] = \"Session\";\n    StorageScope[\"LOCAL\"] = \"Local\";\n  })(StorageScope || (StorageScope = {}));\n\n  return StorageScope;\n})();\nvar StorageServiceEventEnum = /*#__PURE__*/(() => {\n  (function (StorageServiceEventEnum) {\n    StorageServiceEventEnum[\"ADDED\"] = \"Added\";\n    StorageServiceEventEnum[\"MODIFIED\"] = \"Modified\";\n    StorageServiceEventEnum[\"REMOVED\"] = \"Removed\";\n    StorageServiceEventEnum[\"CLEARED\"] = \"Cleared\";\n  })(StorageServiceEventEnum || (StorageServiceEventEnum = {}));\n\n  return StorageServiceEventEnum;\n})();\nlet StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor(config) {\n      this.config = config;\n      this.storageChange$ = new BehaviorSubject(undefined);\n      this.options = this.config.getConfig('storage') || {\n        key: 'igo'\n      };\n    }\n    /**\r\n     * Use to get the data found in storage file\r\n     */\n\n\n    get(key, scope) {\n      let value;\n\n      if (!scope || scope === StorageScope.SESSION) {\n        value = sessionStorage.getItem(`${this.options.key}.${key}`);\n      }\n\n      if (scope === StorageScope.LOCAL || !value && !scope) {\n        value = localStorage.getItem(`${this.options.key}.${key}`);\n      }\n\n      if (value) {\n        try {\n          value = JSON.parse(value);\n        } catch (_a) {\n          value = value;\n        }\n      }\n\n      return value;\n    }\n\n    set(key, value, scope = StorageScope.LOCAL) {\n      const previousValue = this.get(key, scope);\n\n      if (scope === StorageScope.SESSION) {\n        sessionStorage.setItem(`${this.options.key}.${key}`, JSON.stringify(value));\n      } else {\n        localStorage.setItem(`${this.options.key}.${key}`, JSON.stringify(value));\n      }\n\n      const currentValue = this.get(key, scope);\n\n      if (currentValue !== previousValue) {\n        this.storageChange$.next({\n          key,\n          scope,\n          event: previousValue !== undefined ? StorageServiceEventEnum.MODIFIED : StorageServiceEventEnum.ADDED,\n          previousValue,\n          currentValue\n        });\n      }\n    }\n\n    remove(key, scope = StorageScope.LOCAL) {\n      const previousValue = this.get(key, scope);\n\n      if (scope === StorageScope.SESSION) {\n        sessionStorage.removeItem(`${this.options.key}.${key}`);\n      } else {\n        localStorage.removeItem(`${this.options.key}.${key}`);\n      }\n\n      this.storageChange$.next({\n        key,\n        scope,\n        event: StorageServiceEventEnum.REMOVED,\n        previousValue\n      });\n    }\n\n    clear(scope = StorageScope.LOCAL) {\n      if (scope === StorageScope.SESSION) {\n        sessionStorage.clear();\n      } else {\n        localStorage.clear();\n      }\n\n      this.storageChange$.next({\n        scope,\n        event: StorageServiceEventEnum.CLEARED\n      });\n    }\n\n  }\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)(i0.ɵɵinject(ConfigService));\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NetworkService = /*#__PURE__*/(() => {\n  class NetworkService {\n    constructor(messageService, injector) {\n      this.messageService = messageService;\n      this.injector = injector;\n      this.stateChangeEventEmitter = new EventEmitter();\n      this.state = {\n        connection: window.navigator.onLine\n      };\n      this.checkNetworkState();\n    }\n\n    checkNetworkState() {\n      this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n        if (this.previousMessageId) {\n          this.messageService.remove(this.previousMessageId);\n        }\n\n        const translate = this.injector.get(LanguageService).translate;\n        const message = translate.instant('igo.core.network.online.message');\n        const title = translate.instant('igo.core.network.online.title');\n        const messageObj = this.messageService.info(message, title);\n        this.previousMessageId = messageObj.toastId;\n        this.state.connection = true;\n        this.emitEvent();\n      });\n      this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n        if (this.previousMessageId) {\n          this.messageService.remove(this.previousMessageId);\n        }\n\n        const translate = this.injector.get(LanguageService).translate;\n        const message = translate.instant('igo.core.network.offline.message');\n        const title = translate.instant('igo.core.network.offline.title');\n        const messageObj = this.messageService.info(message, title);\n        this.previousMessageId = messageObj.toastId;\n        this.state.connection = false;\n        this.emitEvent();\n      });\n    }\n\n    emitEvent() {\n      this.stateChangeEventEmitter.emit(this.state);\n    }\n\n    ngOnDestroy() {\n      try {\n        this.offlineSubscription.unsubscribe();\n        this.onlineSubscription.unsubscribe();\n      } catch (e) {}\n    }\n\n    currentState(reportState = true) {\n      return reportState ? this.stateChangeEventEmitter.pipe(debounceTime(300), startWith(this.state)) : this.stateChangeEventEmitter.pipe(debounceTime(300));\n    }\n\n  }\n\n  NetworkService.ɵfac = function NetworkService_Factory(t) {\n    return new (t || NetworkService)(i0.ɵɵinject(MessageService), i0.ɵɵinject(i0.Injector));\n  };\n\n  NetworkService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkService,\n    factory: NetworkService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetworkService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of core\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ActivityInterceptor, ActivityService, AnalyticsService, CONFIG_OPTIONS, ConfigService, ErrorInterceptor, IgoActivityModule, IgoConfigModule, IgoCoreModule, IgoErrorModule, IgoGestureConfig, IgoGestureModule, IgoLanguageModule, IgoLoggingModule, IgoMessageModule, IgoMissingTranslationHandler, LanguageLoader, LanguageService, LoggingInterceptor, Media, MediaOrientation, MediaService, MessageService, MessageType, NetworkService, ROUTE_SERVICE_OPTIONS, RouteService, StorageScope, StorageService, StorageServiceEventEnum, configFactory, defaultLanguageLoader, provideConfigLoader, provideConfigOptions, provideDefaultLanguageLoader, provideLanguageLoader, provideRouteServiceOptions, version };","map":{"version":3,"sources":["C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\activity\\activity.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\activity\\activity.interceptor.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\activity\\activity.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\config\\version.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\config\\config.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\config\\config.provider.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\config\\config.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\language\\shared\\language.loader.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\language\\shared\\language.provider.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\language\\shared\\missing-translation.guard.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\language\\language.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\message\\message.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\language\\shared\\language.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\message\\shared\\message.enum.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\message\\shared\\message.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\request\\error.interceptor.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\request\\error.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\core.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\gesture\\gesture.provider.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\gesture\\gesture.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\request\\logging.interceptor.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\request\\logging.module.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\route\\route.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\analytics\\shared\\analytics.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\media\\media.enum.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\media\\media.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\storage\\storage.interface.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\storage\\storage.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\lib\\network\\network.service.ts","C:\\Users\\admin\\Downloads\\angular\\igo2-lib-master\\packages\\core\\src\\public_api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { uuid } from '@igo2/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n  public counter$ = new BehaviorSubject<number>(0);\n\n  private ids: string[] = [];\n\n  constructor() {}\n\n  register(): string {\n    const id = uuid();\n    this.ids.push(id);\n    this.counter$.next(this.ids.length);\n\n    return id;\n  }\n\n  unregister(id: string) {\n    const index = this.ids.indexOf(id);\n    if (index === -1) {\n      return;\n    }\n    this.ids.splice(index, 1);\n\n    this.counter$.next(this.ids.length);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { ActivityService } from './activity.service';\n\n@Injectable()\nexport class ActivityInterceptor implements HttpInterceptor {\n  constructor(private activityService: ActivityService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const activity = req.headers.get('activityInterceptor');\n    if (activity) {\n      const actReq = req.clone({\n        headers: req.headers.delete('activityInterceptor')\n      });\n      if (activity === 'false') {\n        return next.handle(actReq);\n      }\n    }\n\n    const id = this.activityService.register();\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        this.activityService.unregister(id);\n      })\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ActivityInterceptor } from './activity.interceptor';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class IgoActivityModule {\n  static forRoot(): ModuleWithProviders<IgoActivityModule> {\n    return {\n      ngModule: IgoActivityModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: ActivityInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","export interface Version {\n  lib: string;\n  releaseDate: number;\n}\n\nexport const version: Version = {\n  lib: '1.11.1',\n  releaseDate: 1649355043171\n};\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ObjectUtils } from '@igo2/utils';\n\nimport { ConfigOptions } from './config.interface';\nimport { version } from './version';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n  private config: object = {};\n\n  constructor(private injector: Injector) {}\n\n  /**\n   * Use to get the data found in config file\n   */\n  public getConfig(key: string): any {\n    return ObjectUtils.resolve(this.config, key);\n  }\n\n  /**\n   * This method loads \"[path]\" to get all config's variables\n   */\n  public load(options: ConfigOptions) {\n    const baseConfig = options.default || {};\n    if (!options.path) {\n      this.config = baseConfig;\n      return true;\n    }\n\n    const http = this.injector.get(HttpClient);\n\n    return new Promise((resolve, _reject) => {\n      http\n        .get(options.path)\n        .pipe(\n          catchError((error: any): any => {\n            console.log(`Configuration file ${options.path} could not be read`);\n            resolve(true);\n            return throwError(error.error || 'Server error');\n          })\n        )\n        .subscribe((configResponse: object) => {\n          this.config = ObjectUtils.mergeDeep(\n            ObjectUtils.mergeDeep({ version }, baseConfig),\n            configResponse\n          );\n          resolve(true);\n        });\n    });\n  }\n}\n","import { APP_INITIALIZER, InjectionToken } from '@angular/core';\n\nimport { ConfigService } from './config.service';\nimport { ConfigOptions } from './config.interface';\n\nexport let CONFIG_OPTIONS = new InjectionToken<ConfigOptions>('configOptions');\n\nexport function provideConfigOptions(options: ConfigOptions) {\n  return {\n    provide: CONFIG_OPTIONS,\n    useValue: options\n  };\n}\n\nexport function configFactory(\n  configService: ConfigService,\n  options: ConfigOptions\n) {\n  return () => configService.load(options);\n}\n\nexport function provideConfigLoader() {\n  return {\n    provide: APP_INITIALIZER,\n    useFactory: configFactory,\n    multi: true,\n    deps: [ConfigService, CONFIG_OPTIONS]\n  };\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { provideConfigOptions, provideConfigLoader } from './config.provider';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class IgoConfigModule {\n  static forRoot(): ModuleWithProviders<IgoConfigModule> {\n    return {\n      ngModule: IgoConfigModule,\n      providers: [provideConfigOptions({}), provideConfigLoader()]\n    };\n  }\n}\n","import { HttpClient } from '@angular/common/http';\n\nimport { of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { TranslateLoader } from '@ngx-translate/core';\n\nimport { ObjectUtils } from '@igo2/utils';\n\nimport { ConfigService } from '../../config/config.service';\n\ndeclare function require(arg: string): any;\n\nexport class LanguageLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    private prefix?: string | string[],\n    private suffix: string = '.json',\n    private config?: ConfigService\n  ) {}\n\n  public getTranslation(lang: string): any {\n    const translation = require(`../locale/${lang}.json`);\n    const igoLocale$ = of(translation);\n\n    if (this.config && !this.prefix) {\n      const prefix = this.config.getConfig('language.prefix');\n      this.prefix = !prefix || Array.isArray(prefix) ? prefix : [prefix];\n    }\n\n    if (!this.prefix || this.prefix.length === 0) {\n      return igoLocale$;\n    }\n\n    const appLocale$ = (this.prefix as string[]).map((prefix) =>\n      this.http.get(`${prefix}${lang}${this.suffix}`)\n    );\n\n    const locale$ = combineLatest([igoLocale$, ...appLocale$]);\n\n    return locale$.pipe(\n      map((translations) => {\n        return translations.reduce(\n          (acc, current) => ObjectUtils.mergeDeep(acc, current),\n          {}\n        );\n      })\n    );\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { TranslateLoader } from '@ngx-translate/core';\n\nimport { ConfigService } from '../../config/config.service';\nimport { LanguageLoader } from './language.loader';\n\nexport function defaultLanguageLoader(\n  http: HttpClient,\n  config?: ConfigService\n) {\n  return new LanguageLoader(http, undefined, undefined, config);\n}\n\nexport function provideLanguageLoader(loader?) {\n  return {\n    provide: TranslateLoader,\n    useFactory: loader || defaultLanguageLoader,\n    deps: [HttpClient]\n  };\n}\n\nexport function provideDefaultLanguageLoader(loader?) {\n  return {\n    provide: TranslateLoader,\n    useFactory: loader || defaultLanguageLoader,\n    deps: [HttpClient, ConfigService]\n  };\n}\n","import {\n  MissingTranslationHandler,\n  MissingTranslationHandlerParams\n} from '@ngx-translate/core';\n\nexport class IgoMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams) {\n    if (!params.translateService.langs.length) {\n      const error =\n        'Translations are not yet loaded. \\\n         Check that the LanguageService is injected.';\n      throw new Error(error);\n    }\n\n    if (params.key.substr(0, 4) === 'igo.') {\n      throw new Error(`The Key \"${params.key}\" is missing in locale file.`);\n    } else {\n      return params.key;\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport {\n  TranslateModule,\n  MissingTranslationHandler\n} from '@ngx-translate/core';\n\nimport { provideDefaultLanguageLoader } from './shared/language.provider';\nimport { IgoMissingTranslationHandler } from './shared/missing-translation.guard';\n\n@NgModule({\n  imports: [\n    TranslateModule.forRoot({\n      missingTranslationHandler: {\n        provide: MissingTranslationHandler,\n        useClass: IgoMissingTranslationHandler\n      }\n    })\n  ],\n  declarations: [],\n  exports: [TranslateModule]\n})\nexport class IgoLanguageModule {\n  static forRoot(): ModuleWithProviders<IgoLanguageModule> {\n    return {\n      ngModule: IgoLanguageModule,\n      providers: [provideDefaultLanguageLoader()]\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GlobalConfig, ToastrModule } from 'ngx-toastr';\n\n@NgModule({\n  imports: [CommonModule,\n    ToastrModule.forRoot({\n      positionClass: 'toast-bottom-right',\n      timeOut: 10000,\n      extendedTimeOut: 10000,\n      messageClass: 'toast-message mat-typography',\n      closeButton: true,\n      progressBar: true,\n      enableHtml: true,\n      tapToDismiss: true,\n      maxOpened: 4,\n      preventDuplicates: true,\n      resetTimeoutOnDuplicate: true,\n      countDuplicates: false,\n      includeTitleDuplicates: true\n    } as GlobalConfig)],\n  declarations: [],\n  exports: []\n})\nexport class IgoMessageModule {\n  static forRoot(): ModuleWithProviders<IgoMessageModule> {\n    return {\n      ngModule: IgoMessageModule,\n      providers: []\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n  private language: string = this.translate.getBrowserLang();\n\n  constructor(public translate: TranslateService) {\n    const lang = this.getLanguage();\n    this.translate.setDefaultLang(lang);\n  }\n\n  public getLanguage(): string {\n    return this.language.match(/en|fr/) ? this.language : 'en';\n  }\n\n  public setLanguage(language: string) {\n    this.language = language.match(/en|fr/) ? language : 'en';\n    this.translate.use(this.language);\n    this.translate.reloadLang(this.language);\n  }\n}\n","export enum MessageType {\n  ERROR = 'error',\n  ALERT = 'warning', // todo delete (transition to ngx-toastr)\n  WARNING = 'warning',\n  INFO = 'info',\n  SUCCESS = 'success'\n}\n","import { Injectable, Inject, Injector } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ConfigService } from '../../config/config.service';\n\nimport { Message, MessageOptions } from './message.interface';\nimport { ActiveToast, IndividualConfig, ToastrService } from 'ngx-toastr';\nimport { MessageType } from './message.enum';\nimport { LanguageService } from '../../language/shared/language.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n  public messages$ = new BehaviorSubject<Message[]>([]);\n  private options: MessageOptions;\n\n  constructor(\n    @Inject(Injector) private injector: Injector,\n    private configService: ConfigService,\n    private languageService: LanguageService\n  ) {\n    this.options = this.configService.getConfig('message') || {};\n  }\n\n  private get toastr(): ToastrService {\n    return this.injector.get(ToastrService);\n  }\n\n  showError(httpError: HttpErrorResponse) {\n    httpError.error.caught = true;\n    return this.error(httpError.error.message, httpError.error.title);\n  }\n\n  message(message: Message) {\n    this.messages$.next(this.messages$.value.concat([message]));\n\n    message.options = message.options || {} as MessageOptions;\n    const currentDate = new Date();\n\n    message.options.from = message.options.from ? message.options.from : new Date('1 jan 1900');\n    message.options.to = message.options.to ? message.options.to : new Date('1 jan 3000');\n    if (typeof message.options.from === 'string') {\n      message.options.from = new Date(Date.parse(message.options.from.replace(/-/g, ' ')));\n    }\n    if (typeof message.options.to === 'string') {\n      message.options.to = new Date(Date.parse(message.options.to.replace(/-/g, ' ')));\n    }\n    if (\n      currentDate > message.options.from && currentDate < message.options.to) {\n\n      message = this.handleTemplate(message);\n\n      if (message.text) {\n        let messageShown: ActiveToast<any>;\n        switch (message.type) {\n          case MessageType.SUCCESS:\n            messageShown = this.success(message.text, message.title, message.options);\n            break;\n          case MessageType.ERROR:\n            messageShown = this.error(message.text, message.title, message.options);\n            break;\n          case MessageType.INFO:\n            messageShown = this.info(message.text, message.title, message.options);\n            break;\n          case MessageType.ALERT:\n          case MessageType.WARNING:\n            messageShown = this.alert(message.text, message.title, message.options);\n            break;\n          default:\n            messageShown = this.info(message.text, message.title, message.options);\n            break;\n        }\n        message.options.id = messageShown.toastId;\n      }\n    }\n  }\n\n  success(text: string, title: string = 'igo.core.message.success', options: Partial<IndividualConfig> = {}): ActiveToast<any> {\n    const message = this.languageService.translate.instant(text);\n    const translatedTitle = this.languageService.translate.instant(title);\n    return this.toastr.success(message, translatedTitle, options);\n  }\n\n  error(text: string, title: string = 'igo.core.message.error', options: Partial<IndividualConfig> = {}): ActiveToast<any> {\n    const message = this.languageService.translate.instant(text);\n    const translatedTitle = this.languageService.translate.instant(title);\n    return this.toastr.error(message, translatedTitle, options);\n  }\n\n  info(text: string, title: string = 'igo.core.message.info', options: Partial<IndividualConfig> = {}): ActiveToast<any> {\n    const message = this.languageService.translate.instant(text);\n    const translatedTitle = this.languageService.translate.instant(title);\n    return this.toastr.info(message, translatedTitle, options);\n  }\n\n  alert(text: string, title: string = 'igo.core.message.alert', options: Partial<IndividualConfig> = {}): ActiveToast<any> {\n    const message = this.languageService.translate.instant(text);\n    const translatedTitle = this.languageService.translate.instant(title);\n    return this.toastr.warning(message, translatedTitle, options);\n  }\n\n  remove(id?: number) {\n    this.toastr.remove(id);\n  }\n\n  removeAllAreNotError() {\n    for (const mess of this.messages$.value) {\n      if (mess.type !== MessageType.ERROR) {\n        this.remove(mess.options.id);\n      }\n    }\n  }\n\n  private handleTemplate(message: Message): Message {\n    if (!this.options.template || message.html) {\n      return message;\n    }\n\n    let html = this.options.template;\n    html = html.replace('${text}', message.text);\n    html = html.replace('${title}', message.title);\n\n    message.html = undefined;\n    message.text = html;\n    message.title = undefined;\n    return message;\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpEvent,\n  HttpErrorResponse\n} from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\n\nimport { MessageService } from '../message/shared/message.service';\nimport { LanguageService } from '../language/shared/language.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(\n    private messageService: MessageService,\n    private injector: Injector\n  ) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const errorContainer = { httpError: undefined };\n    return next.handle(req).pipe(\n      catchError(error => this.handleError(error, errorContainer)),\n      finalize(() => {\n        this.handleCaughtError(errorContainer);\n        this.handleUncaughtError(errorContainer);\n      })\n    );\n  }\n\n  private handleError(\n    httpError: HttpErrorResponse,\n    errorContainer: { httpError: HttpErrorResponse }\n  ) {\n    if (httpError instanceof HttpErrorResponse) {\n      const errorObj = httpError.error === 'object' ? httpError.error : {};\n      errorObj.message = httpError.error.message || httpError.statusText;\n      errorObj.caught = false;\n\n      httpError = new HttpErrorResponse({\n        error: errorObj,\n        headers: httpError.headers,\n        status: httpError.status,\n        statusText: httpError.statusText,\n        url: httpError.url\n      });\n    }\n\n    errorContainer.httpError = httpError;\n    return throwError(httpError);\n  }\n\n  private handleCaughtError(errorContainer: { httpError: HttpErrorResponse }) {\n    const httpError = errorContainer.httpError;\n    if (httpError && httpError.error.toDisplay) {\n      httpError.error.caught = true;\n      this.messageService.error(httpError.error.message, httpError.error.title);\n    }\n  }\n\n  private handleUncaughtError(errorContainer: {\n    httpError: HttpErrorResponse;\n  }) {\n    const httpError = errorContainer.httpError;\n    if (httpError && !httpError.error.caught) {\n      const translate = this.injector.get(LanguageService).translate;\n      const message = translate.instant('igo.core.errors.uncaught.message');\n      const title = translate.instant('igo.core.errors.uncaught.title');\n      httpError.error.caught = true;\n      this.messageService.error(message, title);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf\n} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ErrorInterceptor } from './error.interceptor';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class IgoErrorModule {\n  static forRoot(): ModuleWithProviders<IgoErrorModule> {\n    return {\n      ngModule: IgoErrorModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: ErrorInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n\n  constructor(@Optional() @SkipSelf() parentModule: IgoErrorModule) {\n    if (parentModule) {\n      throw new Error(\n        'IgoErrorModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatIconRegistry } from '@angular/material/icon';\n\nimport { IgoActivityModule } from './activity/activity.module';\nimport { IgoConfigModule } from './config/config.module';\nimport { IgoLanguageModule } from './language/language.module';\nimport { IgoMessageModule } from './message/message.module';\nimport { IgoErrorModule } from './request/error.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IgoActivityModule.forRoot(),\n    IgoConfigModule.forRoot(),\n    IgoErrorModule.forRoot(),\n    IgoLanguageModule.forRoot(),\n    IgoMessageModule.forRoot()\n  ],\n  declarations: [],\n  exports: [\n    IgoActivityModule,\n    IgoConfigModule,\n    IgoErrorModule,\n    IgoLanguageModule,\n    IgoMessageModule\n  ]\n})\nexport class IgoCoreModule {\n  static forRoot(): ModuleWithProviders<IgoCoreModule> {\n    return {\n      ngModule: IgoCoreModule,\n      providers: []\n    };\n  }\n\n  constructor(matIconRegistry: MatIconRegistry, domSanitizer: DomSanitizer) {\n    matIconRegistry.addSvgIconSet(\n      domSanitizer.bypassSecurityTrustResourceUrl(\n        './assets/igo2/core/icons/mdi.svg'\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HammerGestureConfig } from '@angular/platform-browser';\n\n\n@Injectable()\nexport class IgoGestureConfig extends HammerGestureConfig {\n  buildHammer(element: HTMLElement) {\n    const mc = super.buildHammer(element) as any;\n    mc.set({ touchAction: 'pan-y' });\n    return mc;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HammerModule, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nimport { IgoGestureConfig } from './gesture.provider';\n\n@NgModule({\n  imports: [HammerModule],\n  declarations: [],\n  exports: []\n})\nexport class IgoGestureModule {\n  static forRoot(): ModuleWithProviders<IgoGestureModule> {\n    return {\n      ngModule: IgoGestureModule,\n      providers: [\n        {\n          provide: HAMMER_GESTURE_CONFIG,\n          useClass: IgoGestureConfig\n        }\n      ]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpHandler,\n  HttpEvent,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { tap, finalize } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const started = Date.now();\n    let ok: string;\n\n    // extend server response observable with logging\n    return next.handle(req).pipe(\n      tap(\n        // Succeeds when there is a response; ignore other events\n        event => (ok = event instanceof HttpResponse ? 'succeeded' : ''),\n        // Operation failed; error is an HttpErrorResponse\n        error => (ok = 'failed')\n      ),\n      // Log when response observable either completes or errors\n      finalize(() => {\n        const elapsed = Date.now() - started;\n        const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n\n        console.log(msg);\n      })\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { LoggingInterceptor } from './logging.interceptor';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})\nexport class IgoLoggingModule {\n  static forRoot(): ModuleWithProviders<IgoLoggingModule> {\n    return {\n      ngModule: IgoLoggingModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: LoggingInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n","import { Injectable, Inject, InjectionToken, Optional } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { RouteServiceOptions } from './route.interface';\n\nexport let ROUTE_SERVICE_OPTIONS = new InjectionToken<RouteServiceOptions>(\n  'routeServiceOptions'\n);\n\nexport function provideRouteServiceOptions(options: RouteServiceOptions) {\n  return {\n    provide: ROUTE_SERVICE_OPTIONS,\n    useValue: options\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouteService {\n  public options: RouteServiceOptions;\n\n  constructor(\n    private router: Router,\n    public route: ActivatedRoute,\n    @Inject(ROUTE_SERVICE_OPTIONS)\n    @Optional()\n    options: RouteServiceOptions\n  ) {\n    const defaultOptions = {\n      centerKey: 'center',\n      zoomKey: 'zoom',\n      projectionKey: 'projection',\n      contextKey: 'context',\n      searchKey: 'search',\n      visibleOnLayersKey: 'visiblelayers',\n      visibleOffLayersKey: 'invisiblelayers',\n      directionsCoordKey: 'routing',\n      directionsOptionsKey: 'routingOptions',\n      toolKey: 'tool',\n      wmsUrlKey: 'wmsUrl',\n      wmsLayersKey:  'wmsLayers',\n      wmtsUrlKey: 'wmtsUrl',\n      wmtsLayersKey:  'wmtsLayers',\n      arcgisUrlKey: 'arcgisUrl',\n      arcgisLayersKey:  'arcgisLayers',\n      iarcgisUrlKey: 'iarcgisUrl',\n      iarcgisLayersKey:  'iarcgisLayers',\n      tarcgisUrlKey: 'tarcgisUrl',\n      tarcgisLayersKey:  'tarcgisLayers',\n      vectorKey: 'vector'\n    };\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  get queryParams(): Observable<Params> {\n    let url = decodeURIComponent(location.search);\n    if (url.includes('¢er=')) {\n      url = url.replace('¢er', '&center');\n      const queryParams: any = url\n      .slice(1)\n      .split('&')\n      .map(p => p.split('='))\n      .reduce((obj, pair) => {\n        const [key, value] = pair.map(decodeURIComponent);\n        obj[key] = value;\n        return obj;\n      }, {});\n      this.router.navigate([], { queryParams });\n    }\n    return this.route.queryParams;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ConfigService } from '../../config/config.service';\n\nimport { AnalyticsOptions } from './analytics.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnalyticsService {\n  private options: AnalyticsOptions;\n\n  get paq() {\n    return ((window as any)._paq = (window as any)._paq || []);\n  }\n\n  constructor(private config: ConfigService) {\n    this.options = this.config.getConfig('analytics') || {};\n\n    if (this.options.provider === 'matomo') {\n      this.initMatomo();\n    }\n  }\n\n  private initMatomo() {\n    if (!this.options.url || !this.options.id) {\n      return;\n    }\n    const url =\n      this.options.url.substr(-1) === '/'\n        ? this.options.url + 'matomo'\n        : this.options.url;\n\n    // this.paq.push(['trackPageView']);\n    // this.paq.push(['enableLinkTracking']);\n    (() => {\n      this.paq.push(['setTrackerUrl', url + '.php']);\n      this.paq.push(['setSiteId', this.options.id]);\n      const g = document.createElement('script');\n      const s = document.getElementsByTagName('script')[0];\n      g.type = 'text/javascript';\n      g.async = true;\n      g.defer = true;\n      g.src = url + '.js';\n      s.parentNode.insertBefore(g, s);\n    })();\n  }\n\n  public setUser(\n    user?: {\n      id: number;\n      sourceId?: string;\n      firstName?: string;\n      lastName?: string;\n    },\n    profils?: string[]\n  ) {\n    if (this.options.provider === 'matomo') {\n      if (!user) {\n        this.paq.push(['resetUserId']);\n        this.paq.push(['deleteCustomVariable', 1, 'user']);\n        this.paq.push(['deleteCustomVariable', 2, 'name']);\n        this.paq.push(['deleteCustomVariable', 3, 'profils']);\n      } else {\n        this.paq.push(['setUserId', user.id]);\n\n        const name = `${user.firstName} ${user.lastName}`;\n        this.paq.push(['setCustomVariable', 1, 'user', user.sourceId, 'visit']);\n        this.paq.push(['setCustomVariable', 2, 'name', name, 'visit']);\n        this.paq.push(['setCustomVariable', 3, 'profils', profils, 'visit']);\n      }\n\n      this.paq.push(['trackPageView']);\n      this.paq.push(['enableLinkTracking']);\n    }\n  }\n\n  public trackSearch(term: string, nbResults: number) {\n    if (this.options.provider === 'matomo') {\n      this.paq.push(['trackSiteSearch', term, false, nbResults]);\n    }\n  }\n\n  public trackEvent(category: string, action: string, name: string) {\n    if (this.options.provider === 'matomo') {\n      this.paq.push(['trackEvent', category, action, name]);\n    }\n  }\n}\n","export enum Media {\n  Mobile = 'mobile',\n  Tablet = 'tablet',\n  Desktop = 'desktop'\n}\n\nexport enum MediaOrientation {\n  Portrait = 'portrait',\n  Landscape = 'landscape'\n}\n","import { Injectable } from '@angular/core';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Media, MediaOrientation } from './media.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MediaService {\n  public media$ = new BehaviorSubject<Media>(undefined);\n  public orientation$ = new BehaviorSubject<MediaOrientation>(undefined);\n\n  constructor(breakpointObserver: BreakpointObserver) {\n    breakpointObserver\n      .observe([Breakpoints.HandsetLandscape])\n      .subscribe(res => {\n        if (res.matches) {\n          this.media$.next(Media.Mobile);\n          this.orientation$.next(MediaOrientation.Landscape);\n        }\n      });\n\n    breakpointObserver.observe([Breakpoints.HandsetPortrait]).subscribe(res => {\n      if (res.matches) {\n        this.media$.next(Media.Mobile);\n        this.orientation$.next(MediaOrientation.Portrait);\n      }\n    });\n\n    breakpointObserver.observe([Breakpoints.TabletLandscape]).subscribe(res => {\n      if (res.matches) {\n        this.media$.next(Media.Tablet);\n        this.orientation$.next(MediaOrientation.Landscape);\n      }\n    });\n\n    breakpointObserver.observe([Breakpoints.TabletPortrait]).subscribe(res => {\n      if (res.matches) {\n        this.media$.next(Media.Tablet);\n        this.orientation$.next(MediaOrientation.Portrait);\n      }\n    });\n\n    breakpointObserver.observe([Breakpoints.WebLandscape]).subscribe(res => {\n      if (res.matches) {\n        this.media$.next(Media.Desktop);\n        this.orientation$.next(MediaOrientation.Landscape);\n      }\n    });\n\n    breakpointObserver.observe([Breakpoints.WebPortrait]).subscribe(res => {\n      if (res.matches) {\n        this.media$.next(Media.Desktop);\n        this.orientation$.next(MediaOrientation.Portrait);\n      }\n    });\n  }\n\n  getMedia(): Media {\n    return this.media$.value;\n  }\n\n  getOrientation(): MediaOrientation {\n    return this.orientation$.value;\n  }\n\n  isTouchScreen(): boolean {\n    return 'ontouchstart' in document.documentElement ? true : false;\n  }\n\n  isMobile(): boolean {\n    const media = this.getMedia();\n    return media === 'mobile';\n  }\n\n  isDesktop(): boolean {\n    const media = this.getMedia();\n    return media === 'desktop';\n  }\n}\n","export enum StorageScope {\n  SESSION = 'Session',\n  LOCAL = 'Local'\n}\n\nexport interface StorageOptions {\n  key: string;\n}\n\nexport interface StorageServiceEvent {\n  key?: string;\n  scope: StorageScope;\n  event: StorageServiceEventEnum;\n  previousValue?: any;\n  currentValue?: any;\n}\n\nexport enum StorageServiceEventEnum {\n  ADDED = 'Added',\n  MODIFIED = 'Modified',\n  REMOVED = 'Removed',\n  CLEARED = 'Cleared'\n}\n","import { Injectable } from '@angular/core';\n\nimport { ConfigService } from '../config/config.service';\nimport { StorageScope, StorageOptions, StorageServiceEvent, StorageServiceEventEnum } from './storage.interface';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  protected options: StorageOptions;\n\n  public storageChange$: BehaviorSubject<StorageServiceEvent> = new BehaviorSubject(undefined);\n\n  constructor(private config: ConfigService) {\n    this.options = this.config.getConfig('storage') || { key: 'igo' };\n  }\n  /**\n   * Use to get the data found in storage file\n   */\n  get(key: string, scope?: StorageScope): string | object | boolean | number {\n    let value: any;\n\n    if (!scope || scope === StorageScope.SESSION) {\n      value = sessionStorage.getItem(`${this.options.key}.${key}`);\n    }\n\n    if (scope === StorageScope.LOCAL || (!value && !scope)) {\n      value = localStorage.getItem(`${this.options.key}.${key}`);\n    }\n\n    if (value) {\n      try {\n        value = JSON.parse(value);\n      } catch {\n        value = value;\n      }\n    }\n\n    return value;\n  }\n\n  set(\n    key: string,\n    value: string | object | boolean | number,\n    scope: StorageScope = StorageScope.LOCAL\n  ) {\n    const previousValue = this.get(key, scope);\n    if (scope === StorageScope.SESSION) {\n      sessionStorage.setItem(\n        `${this.options.key}.${key}`,\n        JSON.stringify(value)\n      );\n    } else {\n      localStorage.setItem(`${this.options.key}.${key}`, JSON.stringify(value));\n    }\n    const currentValue = this.get(key, scope);\n\n    if (currentValue !== previousValue) {\n      this.storageChange$.next({\n        key, scope,\n        event: previousValue !== undefined ? StorageServiceEventEnum.MODIFIED : StorageServiceEventEnum.ADDED,\n        previousValue,\n        currentValue\n      });\n    }\n  }\n\n  remove(key: string, scope: StorageScope = StorageScope.LOCAL) {\n    const previousValue = this.get(key, scope);\n    if (scope === StorageScope.SESSION) {\n      sessionStorage.removeItem(`${this.options.key}.${key}`);\n    } else {\n      localStorage.removeItem(`${this.options.key}.${key}`);\n    }\n    this.storageChange$.next({key, scope, event: StorageServiceEventEnum.REMOVED, previousValue });\n  }\n\n  clear(scope: StorageScope = StorageScope.LOCAL) {\n    if (scope === StorageScope.SESSION) {\n      sessionStorage.clear();\n    } else {\n      localStorage.clear();\n    }\n    this.storageChange$.next({scope, event: StorageServiceEventEnum.CLEARED });\n  }\n}\n","import { Injectable, EventEmitter, OnDestroy, Injector } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { debounceTime, startWith } from 'rxjs/operators';\n\nimport { MessageService } from '../message/shared/message.service';\nimport { LanguageService } from '../language/shared/language.service';\nimport { ConnectionState } from './network.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetworkService implements OnDestroy {\n  private stateChangeEventEmitter = new EventEmitter<ConnectionState>();\n  private onlineSubscription: Subscription;\n  private offlineSubscription: Subscription;\n  private previousMessageId;\n\n  private state: ConnectionState = {\n    connection: window.navigator.onLine\n  };\n\n  constructor(\n    private messageService: MessageService,\n    private injector: Injector\n  ) {\n      this.checkNetworkState();\n  }\n\n  private checkNetworkState() {\n    this.onlineSubscription = fromEvent(window, 'online').subscribe(() => {\n      if (this.previousMessageId) {\n        this.messageService.remove(this.previousMessageId);\n      }\n      const translate = this.injector.get(LanguageService).translate;\n      const message = translate.instant('igo.core.network.online.message');\n      const title = translate.instant('igo.core.network.online.title');\n      const messageObj = this.messageService.info(message, title);\n      this.previousMessageId = messageObj.toastId;\n      this.state.connection = true;\n      this.emitEvent();\n    });\n\n    this.offlineSubscription = fromEvent(window, 'offline').subscribe(() => {\n      if (this.previousMessageId) {\n        this.messageService.remove(this.previousMessageId);\n      }\n      const translate = this.injector.get(LanguageService).translate;\n      const message = translate.instant('igo.core.network.offline.message');\n      const title = translate.instant('igo.core.network.offline.title');\n      const messageObj = this.messageService.info(message, title);\n      this.previousMessageId = messageObj.toastId;\n      this.state.connection = false;\n      this.emitEvent();\n    });\n  }\n\n  private emitEvent() {\n    this.stateChangeEventEmitter.emit(this.state);\n  }\n\n  ngOnDestroy(): void {\n    try {\n      this.offlineSubscription.unsubscribe();\n      this.onlineSubscription.unsubscribe();\n    } catch (e) {}\n  }\n\n  currentState(reportState = true): Observable<ConnectionState> {\n    return reportState\n      ? this.stateChangeEventEmitter.pipe(\n          debounceTime(300),\n          startWith(this.state)\n        )\n      : this.stateChangeEventEmitter.pipe(debounceTime(300));\n  }\n}\n","/*\n * Public API Surface of core\n */\n\nexport * from './lib/core.module';\nexport * from './lib/activity/activity.module';\nexport * from './lib/config/config.module';\nexport * from './lib/gesture/gesture.module';\nexport * from './lib/language/language.module';\nexport * from './lib/message/message.module';\nexport * from './lib/request/error.module';\nexport * from './lib/request/logging.module';\n\nexport * from './lib/config/config.provider';\nexport * from './lib/gesture/gesture.provider';\nexport * from './lib/language/shared/language.provider';\nexport * from './lib/route/route.service';\nexport * from './lib/route/route.interface';\n\nexport * from './lib/activity';\nexport * from './lib/analytics';\nexport * from './lib/config';\nexport * from './lib/language';\nexport * from './lib/media';\nexport * from './lib/message';\nexport * from './lib/request';\nexport * from './lib/storage';\nexport * from './lib/network';\n"]},"metadata":{},"sourceType":"module"}