{"ast":null,"code":"import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nconst _MatBadgeBase = /*#__PURE__*/mixinDisabled(class {});\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\n\nlet MatBadge = /*#__PURE__*/(() => {\n  class MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n      super();\n      this._ngZone = _ngZone;\n      this._elementRef = _elementRef;\n      this._ariaDescriber = _ariaDescriber;\n      this._renderer = _renderer;\n      this._animationMode = _animationMode;\n      this._color = 'primary';\n      this._overlap = true;\n      /**\n       * Position the badge should reside.\n       * Accepts any combination of 'above'|'below' and 'before'|'after'\n       */\n\n      this.position = 'above after';\n      /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n      this.size = 'medium';\n      /** Unique id for the badge */\n\n      this._id = nextId++;\n      /** Whether the OnInit lifecycle hook has run yet */\n\n      this._isInitialized = false;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        const nativeElement = _elementRef.nativeElement;\n\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n\n\n    get color() {\n      return this._color;\n    }\n\n    set color(value) {\n      this._setColor(value);\n\n      this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n\n\n    get overlap() {\n      return this._overlap;\n    }\n\n    set overlap(val) {\n      this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n\n\n    get content() {\n      return this._content;\n    }\n\n    set content(newContent) {\n      this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n\n\n    get description() {\n      return this._description;\n    }\n\n    set description(newDescription) {\n      this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n\n\n    get hidden() {\n      return this._hidden;\n    }\n\n    set hidden(val) {\n      this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n\n\n    isAbove() {\n      return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n\n\n    isAfter() {\n      return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n\n\n    getBadgeElement() {\n      return this._badgeElement;\n    }\n\n    ngOnInit() {\n      // We may have server-side rendered badge that we need to clear.\n      // We need to do this in ngOnInit because the full content of the component\n      // on which the badge is attached won't necessarily be in the DOM until this point.\n      this._clearExistingBadges();\n\n      if (this.content && !this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n\n        this._updateRenderedContent(this.content);\n      }\n\n      this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n      // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(this._badgeElement);\n      }\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n\n\n    _createBadgeElement() {\n      const badgeElement = this._renderer.createElement('span');\n\n      const activeClass = 'mat-badge-active';\n      badgeElement.setAttribute('id', `mat-badge-content-${this._id}`); // The badge is aria-hidden because we don't want it to appear in the page's navigation\n      // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n\n      badgeElement.setAttribute('aria-hidden', 'true');\n      badgeElement.classList.add(BADGE_CONTENT_CLASS);\n\n      if (this._animationMode === 'NoopAnimations') {\n        badgeElement.classList.add('_mat-animation-noopable');\n      }\n\n      this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n      if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n        this._ngZone.runOutsideAngular(() => {\n          requestAnimationFrame(() => {\n            badgeElement.classList.add(activeClass);\n          });\n        });\n      } else {\n        badgeElement.classList.add(activeClass);\n      }\n\n      return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n\n\n    _updateRenderedContent(newContent) {\n      const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim(); // Don't create the badge element if the directive isn't initialized because we want to\n      // append the badge element to the *end* of the host element's content for backwards\n      // compatibility.\n\n      if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n        this._badgeElement = this._createBadgeElement();\n      }\n\n      if (this._badgeElement) {\n        this._badgeElement.textContent = newContentNormalized;\n      }\n\n      this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n\n\n    _updateHostAriaDescription(newDescription) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n\n      if (newDescription) {\n        this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n      }\n\n      this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n\n\n    _setColor(colorPalette) {\n      const classList = this._elementRef.nativeElement.classList;\n      classList.remove(`mat-badge-${this._color}`);\n\n      if (colorPalette) {\n        classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n\n\n    _clearExistingBadges() {\n      // Only check direct children of this host element in order to avoid deleting\n      // any badges that might exist in descendant elements.\n      const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n\n      for (const badgeElement of Array.from(badges)) {\n        if (badgeElement !== this._badgeElement) {\n          badgeElement.remove();\n        }\n      }\n    }\n\n  }\n\n  MatBadge.ɵfac = function MatBadge_Factory(t) {\n    return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatBadge,\n    selectors: [[\"\", \"matBadge\", \"\"]],\n    hostAttrs: [1, \"mat-badge\"],\n    hostVars: 20,\n    hostBindings: function MatBadge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: [\"matBadgeDisabled\", \"disabled\"],\n      position: [\"matBadgePosition\", \"position\"],\n      size: [\"matBadgeSize\", \"size\"],\n      color: [\"matBadgeColor\", \"color\"],\n      overlap: [\"matBadgeOverlap\", \"overlap\"],\n      content: [\"matBadge\", \"content\"],\n      description: [\"matBadgeDescription\", \"description\"],\n      hidden: [\"matBadgeHidden\", \"hidden\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatBadge;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatBadgeModule = /*#__PURE__*/(() => {\n  class MatBadgeModule {}\n\n  MatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  };\n\n  MatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatBadgeModule\n  });\n  MatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[A11yModule, MatCommonModule], MatCommonModule]\n  });\n  return MatBadgeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function () {\n      return [MatBadge];\n    },\n    imports: function () {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatBadge, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/badge.js"],"names":["Directive","NgZone","ElementRef","Renderer2","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","AriaDescriber","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_color","_overlap","position","size","_id","_isInitialized","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","color","value","_setColor","overlap","val","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","disabled","inputs","features","ɵɵInheritDefinitionFeature","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !content',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n"]},"metadata":{},"sourceType":"module"}