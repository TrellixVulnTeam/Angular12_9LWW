{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\n\n\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { cssOpacity } from '../../css.js';\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\nvar CanvasLayerRenderer = function (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n\n\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n\n    _this.containerReused = false;\n    return _this;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n\n\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n\n    if (target && target.style.opacity === cssOpacity(opacity) && target.className === layerClassName) {\n      var canvas = target.firstElementChild;\n\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n\n\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n\n\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    var data;\n\n    try {\n      var x = Math.round(renderPixel[0]);\n      var y = Math.round(renderPixel[1]);\n      var newCanvas = document.createElement('canvas');\n      var newContext = newCanvas.getContext('2d');\n      newCanvas.width = 1;\n      newCanvas.height = 1;\n      newContext.clearRect(0, 0, 1, 1);\n      newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = newContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        return new Uint8Array();\n      }\n\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  return CanvasLayerRenderer;\n}(LayerRenderer);\n\nexport default CanvasLayerRenderer;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/renderer/canvas/Layer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","createTransform","containsCoordinate","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createCanvasContext2D","cssOpacity","CanvasLayerRenderer","_super","layer","_this","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","useContainer","target","transform","opacity","layerClassName","getLayer","getClassName","style","className","canvas","firstElementChild","HTMLCanvasElement","getContext","document","createElement","position","width","height","appendChild","left","transformOrigin","clipUnrotated","frameState","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","resolution","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","pixel","hitTolerance","renderPixel","slice","layerExtent","getExtent","renderCoordinate","pixelToCoordinateTransform","data","x","y","newCanvas","newContext","clearRect","drawImage","getImageData","err","name","Uint8Array"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { cssOpacity } from '../../css.js';\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        return _this;\n    }\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {number} opacity Opacity.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.style.opacity === cssOpacity(opacity) &&\n            target.className === layerClassName) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var data;\n        try {\n            var x = Math.round(renderPixel[0]);\n            var y = Math.round(renderPixel[1]);\n            var newCanvas = document.createElement('canvas');\n            var newContext = newCanvas.getContext('2d');\n            newCanvas.width = 1;\n            newCanvas.height = 1;\n            newContext.clearRect(0, 0, 1, 1);\n            newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = newContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}