{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = function () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Fill(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n\n    this.color_ = options.color !== undefined ? options.color : null;\n  }\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n\n\n  Fill.prototype.clone = function () {\n    var color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  };\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n\n\n  Fill.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n\n\n  Fill.prototype.setColor = function (color) {\n    this.color_ = color;\n  };\n\n  return Fill;\n}();\n\nexport default Fill;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/style/Fill.js"],"names":["Fill","opt_options","options","color_","color","undefined","prototype","clone","getColor","Array","isArray","slice","setColor"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAkB,YAAY;AAClC;AACJ;AACA;AACI,WAASA,IAAT,CAAcC,WAAd,EAA2B;AACvB,QAAIC,OAAO,GAAGD,WAAW,IAAI,EAA7B;AACA;AACR;AACA;AACA;;AACQ,SAAKE,MAAL,GAAcD,OAAO,CAACE,KAAR,KAAkBC,SAAlB,GAA8BH,OAAO,CAACE,KAAtC,GAA8C,IAA5D;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIJ,EAAAA,IAAI,CAACM,SAAL,CAAeC,KAAf,GAAuB,YAAY;AAC/B,QAAIH,KAAK,GAAG,KAAKI,QAAL,EAAZ;AACA,WAAO,IAAIR,IAAJ,CAAS;AACZI,MAAAA,KAAK,EAAEK,KAAK,CAACC,OAAN,CAAcN,KAAd,IAAuBA,KAAK,CAACO,KAAN,EAAvB,GAAuCP,KAAK,IAAIC;AAD3C,KAAT,CAAP;AAGH,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACIL,EAAAA,IAAI,CAACM,SAAL,CAAeE,QAAf,GAA0B,YAAY;AAClC,WAAO,KAAKL,MAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,IAAI,CAACM,SAAL,CAAeM,QAAf,GAA0B,UAAUR,KAAV,EAAiB;AACvC,SAAKD,MAAL,GAAcC,KAAd;AACH,GAFD;;AAGA,SAAOJ,IAAP;AACH,CAzCyB,EAA1B;;AA0CA,eAAeA,IAAf","sourcesContent":["/**\n * @module ol/style/Fill\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Fill(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n         */\n        this.color_ = options.color !== undefined ? options.color : null;\n    }\n    /**\n     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n     * @return {Fill} The cloned style.\n     * @api\n     */\n    Fill.prototype.clone = function () {\n        var color = this.getColor();\n        return new Fill({\n            color: Array.isArray(color) ? color.slice() : color || undefined,\n        });\n    };\n    /**\n     * Get the fill color.\n     * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n     * @api\n     */\n    Fill.prototype.getColor = function () {\n        return this.color_;\n    };\n    /**\n     * Set the color.\n     *\n     * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n     * @api\n     */\n    Fill.prototype.setColor = function (color) {\n        this.color_ = color;\n    };\n    return Fill;\n}());\nexport default Fill;\n"]},"metadata":{},"sourceType":"module"}