{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\n\nvar AccessTokenEntity = function (_super) {\n  __extends(AccessTokenEntity, _super);\n\n  function AccessTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create AccessTokenEntity\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param accessToken\r\n   * @param clientId\r\n   * @param tenantId\r\n   * @param scopes\r\n   * @param expiresOn\r\n   * @param extExpiresOn\r\n   */\n\n\n  AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion) {\n    var _a;\n\n    var atEntity = new AccessTokenEntity();\n    atEntity.homeAccountId = homeAccountId;\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n    atEntity.secret = accessToken;\n    var currentTime = TimeUtils.nowSeconds();\n    atEntity.cachedAt = currentTime.toString();\n    /*\r\n     * Token expiry time.\r\n     * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n     */\n\n    atEntity.expiresOn = expiresOn.toString();\n    atEntity.extendedExpiresOn = extExpiresOn.toString();\n\n    if (refreshOn) {\n      atEntity.refreshOn = refreshOn.toString();\n    }\n\n    atEntity.environment = environment;\n    atEntity.clientId = clientId;\n    atEntity.realm = tenantId;\n    atEntity.target = scopes;\n    atEntity.oboAssertion = oboAssertion;\n    atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType; // Create Access Token With AuthScheme instead of regular access token\n\n    if (atEntity.tokenType === AuthenticationScheme.POP) {\n      atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME; // Make sure keyId is present and add it to credential\n\n      var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n\n      if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\n        throw ClientAuthError.createTokenClaimsRequiredError();\n      }\n\n      atEntity.keyId = tokenClaims.cnf.kid;\n    }\n\n    return atEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccessTokenEntity.isAccessTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n  };\n\n  return AccessTokenEntity;\n}(CredentialEntity);\n\nexport { AccessTokenEntity };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js"],"names":["__extends","CredentialEntity","CredentialType","AuthenticationScheme","TimeUtils","StringUtils","AuthToken","ClientAuthError","AccessTokenEntity","_super","apply","arguments","createAccessTokenEntity","homeAccountId","environment","accessToken","clientId","tenantId","scopes","expiresOn","extExpiresOn","cryptoUtils","refreshOn","tokenType","oboAssertion","_a","atEntity","credentialType","ACCESS_TOKEN","secret","currentTime","nowSeconds","cachedAt","toString","extendedExpiresOn","realm","target","isEmpty","BEARER","POP","ACCESS_TOKEN_WITH_AUTH_SCHEME","tokenClaims","extractTokenClaims","cnf","kid","createTokenClaimsRequiredError","keyId","isAccessTokenEntity","entity","hasOwnProperty"],"mappings":"AAAA;AACA;;AACA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,0BAArD;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,iBAAiB,GAAkB,UAAUC,MAAV,EAAkB;AACrDT,EAAAA,SAAS,CAACQ,iBAAD,EAAoBC,MAApB,CAAT;;AACA,WAASD,iBAAT,GAA6B;AACzB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIH,EAAAA,iBAAiB,CAACI,uBAAlB,GAA4C,UAAUC,aAAV,EAAyBC,WAAzB,EAAsCC,WAAtC,EAAmDC,QAAnD,EAA6DC,QAA7D,EAAuEC,MAAvE,EAA+EC,SAA/E,EAA0FC,YAA1F,EAAwGC,WAAxG,EAAqHC,SAArH,EAAgIC,SAAhI,EAA2IC,YAA3I,EAAyJ;AACjM,QAAIC,EAAJ;;AACA,QAAIC,QAAQ,GAAG,IAAIlB,iBAAJ,EAAf;AACAkB,IAAAA,QAAQ,CAACb,aAAT,GAAyBA,aAAzB;AACAa,IAAAA,QAAQ,CAACC,cAAT,GAA0BzB,cAAc,CAAC0B,YAAzC;AACAF,IAAAA,QAAQ,CAACG,MAAT,GAAkBd,WAAlB;AACA,QAAIe,WAAW,GAAG1B,SAAS,CAAC2B,UAAV,EAAlB;AACAL,IAAAA,QAAQ,CAACM,QAAT,GAAoBF,WAAW,CAACG,QAAZ,EAApB;AACA;AACR;AACA;AACA;;AACQP,IAAAA,QAAQ,CAACP,SAAT,GAAqBA,SAAS,CAACc,QAAV,EAArB;AACAP,IAAAA,QAAQ,CAACQ,iBAAT,GAA6Bd,YAAY,CAACa,QAAb,EAA7B;;AACA,QAAIX,SAAJ,EAAe;AACXI,MAAAA,QAAQ,CAACJ,SAAT,GAAqBA,SAAS,CAACW,QAAV,EAArB;AACH;;AACDP,IAAAA,QAAQ,CAACZ,WAAT,GAAuBA,WAAvB;AACAY,IAAAA,QAAQ,CAACV,QAAT,GAAoBA,QAApB;AACAU,IAAAA,QAAQ,CAACS,KAAT,GAAiBlB,QAAjB;AACAS,IAAAA,QAAQ,CAACU,MAAT,GAAkBlB,MAAlB;AACAQ,IAAAA,QAAQ,CAACF,YAAT,GAAwBA,YAAxB;AACAE,IAAAA,QAAQ,CAACH,SAAT,GAAqBlB,WAAW,CAACgC,OAAZ,CAAoBd,SAApB,IAAiCpB,oBAAoB,CAACmC,MAAtD,GAA+Df,SAApF,CAtBiM,CAuBjM;;AACA,QAAIG,QAAQ,CAACH,SAAT,KAAuBpB,oBAAoB,CAACoC,GAAhD,EAAqD;AACjDb,MAAAA,QAAQ,CAACC,cAAT,GAA0BzB,cAAc,CAACsC,6BAAzC,CADiD,CAEjD;;AACA,UAAIC,WAAW,GAAGnC,SAAS,CAACoC,kBAAV,CAA6B3B,WAA7B,EAA0CM,WAA1C,CAAlB;;AACA,UAAI,EAAE,CAACI,EAAE,GAAGgB,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACE,GAA5E,MAAqF,IAArF,IAA6FlB,EAAE,KAAK,KAAK,CAAzG,GAA6G,KAAK,CAAlH,GAAsHA,EAAE,CAACmB,GAA3H,CAAJ,EAAqI;AACjI,cAAMrC,eAAe,CAACsC,8BAAhB,EAAN;AACH;;AACDnB,MAAAA,QAAQ,CAACoB,KAAT,GAAiBL,WAAW,CAACE,GAAZ,CAAgBC,GAAjC;AACH;;AACD,WAAOlB,QAAP;AACH,GAlCD;AAmCA;AACJ;AACA;AACA;;;AACIlB,EAAAA,iBAAiB,CAACuC,mBAAlB,GAAwC,UAAUC,MAAV,EAAkB;AACtD,QAAI,CAACA,MAAL,EAAa;AACT,aAAO,KAAP;AACH;;AACD,WAAQA,MAAM,CAACC,cAAP,CAAsB,eAAtB,KACJD,MAAM,CAACC,cAAP,CAAsB,aAAtB,CADI,IAEJD,MAAM,CAACC,cAAP,CAAsB,gBAAtB,CAFI,IAGJD,MAAM,CAACC,cAAP,CAAsB,OAAtB,CAHI,IAIJD,MAAM,CAACC,cAAP,CAAsB,UAAtB,CAJI,IAKJD,MAAM,CAACC,cAAP,CAAsB,QAAtB,CALI,IAMJD,MAAM,CAACC,cAAP,CAAsB,QAAtB,CANI,KAOHD,MAAM,CAAC,gBAAD,CAAN,KAA6B9C,cAAc,CAAC0B,YAA5C,IAA4DoB,MAAM,CAAC,gBAAD,CAAN,KAA6B9C,cAAc,CAACsC,6BAPrG,CAAR;AAQH,GAZD;;AAaA,SAAOhC,iBAAP;AACH,CArEsC,CAqErCP,gBArEqC,CAAvC;;AAuEA,SAASO,iBAAT","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\r\nvar AccessTokenEntity = /** @class */ (function (_super) {\r\n    __extends(AccessTokenEntity, _super);\r\n    function AccessTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create AccessTokenEntity\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param accessToken\r\n     * @param clientId\r\n     * @param tenantId\r\n     * @param scopes\r\n     * @param expiresOn\r\n     * @param extExpiresOn\r\n     */\r\n    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion) {\r\n        var _a;\r\n        var atEntity = new AccessTokenEntity();\r\n        atEntity.homeAccountId = homeAccountId;\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\r\n        atEntity.secret = accessToken;\r\n        var currentTime = TimeUtils.nowSeconds();\r\n        atEntity.cachedAt = currentTime.toString();\r\n        /*\r\n         * Token expiry time.\r\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n         */\r\n        atEntity.expiresOn = expiresOn.toString();\r\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\r\n        if (refreshOn) {\r\n            atEntity.refreshOn = refreshOn.toString();\r\n        }\r\n        atEntity.environment = environment;\r\n        atEntity.clientId = clientId;\r\n        atEntity.realm = tenantId;\r\n        atEntity.target = scopes;\r\n        atEntity.oboAssertion = oboAssertion;\r\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\r\n        // Create Access Token With AuthScheme instead of regular access token\r\n        if (atEntity.tokenType === AuthenticationScheme.POP) {\r\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            // Make sure keyId is present and add it to credential\r\n            var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\r\n            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\r\n                throw ClientAuthError.createTokenClaimsRequiredError();\r\n            }\r\n            atEntity.keyId = tokenClaims.cnf.kid;\r\n        }\r\n        return atEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccessTokenEntity.isAccessTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity.hasOwnProperty(\"target\") &&\r\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n    };\r\n    return AccessTokenEntity;\r\n}(CredentialEntity));\n\nexport { AccessTokenEntity };\n"]},"metadata":{},"sourceType":"module"}