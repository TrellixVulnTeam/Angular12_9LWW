{"ast":null,"code":"import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /** Whether the dialog should focus the first focusable element on open. */\n\n    this.autoFocus = true;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: /*#__PURE__*/trigger('dialogContainer', [\n  /*#__PURE__*/\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    transform: 'none'\n  })), /*#__PURE__*/transition('* => enter', /*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  }))), /*#__PURE__*/transition('* => void, * => exit', /*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nlet _MatDialogContainerBase = /*#__PURE__*/(() => {\n  class _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n      super();\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._config = _config;\n      this._focusMonitor = _focusMonitor;\n      /** Emits when an animation state changes. */\n\n      this._animationStateChanged = new EventEmitter();\n      /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n      this._elementFocusedBeforeDialogWasOpened = null;\n      /**\n       * Type of interaction that led to the dialog being closed. This is used to determine\n       * whether the focus style will be applied when returning focus to its original location\n       * after the dialog is closed.\n       */\n\n      this._closeInteractionType = null;\n      /**\n       * Attaches a DOM portal to the dialog container.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      this.attachDomPortal = portal => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        return this._portalOutlet.attachDomPortal(portal);\n      };\n\n      this._ariaLabelledBy = _config.ariaLabelledBy || null;\n      this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n\n\n    _initializeWithAttachedContent() {\n      this._setupFocusTrap(); // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n\n\n      this._capturePreviouslyFocusedElement(); // Move focus onto the dialog immediately in order to prevent the user\n      // from accidentally opening multiple dialogs at the same time.\n\n\n      this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n\n    attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n\n    attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n\n\n    _recaptureFocus() {\n      if (!this._containsFocus()) {\n        const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n\n        if (focusContainer) {\n          this._elementRef.nativeElement.focus();\n        }\n      }\n    }\n    /** Moves the focus inside the focus trap. */\n\n\n    _trapFocus() {\n      // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      } else if (!this._containsFocus()) {\n        // Otherwise ensure that focus is on the dialog container. It's possible that a different\n        // component tried to move focus while the open animation was running. See:\n        // https://github.com/angular/components/issues/16215. Note that we only want to do this\n        // if the focus isn't inside the dialog already, because it's possible that the consumer\n        // turned off `autoFocus` in order to move focus themselves.\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n\n\n    _restoreFocus() {\n      const previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n        const activeElement = _getFocusedElementPierceShadowDom();\n\n        const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          if (this._focusMonitor) {\n            this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n            this._closeInteractionType = null;\n          } else {\n            previousElement.focus();\n          }\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /** Sets up the focus trap. */\n\n\n    _setupFocusTrap() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n\n\n    _capturePreviouslyFocusedElement() {\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n    /** Focuses the dialog container. */\n\n\n    _focusDialogContainer() {\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Returns whether focus is inside the dialog. */\n\n\n    _containsFocus() {\n      const element = this._elementRef.nativeElement;\n\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      return element === activeElement || element.contains(activeElement);\n    }\n\n  }\n\n  _MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n    return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n  };\n\n  _MatDialogContainerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatDialogContainerBase,\n    viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatDialogContainerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nlet MatDialogContainer = /*#__PURE__*/(() => {\n  class MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n      super(...arguments);\n      /** State of the dialog animation. */\n\n      this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n\n\n    _onAnimationDone({\n      toState,\n      totalTime\n    }) {\n      if (toState === 'enter') {\n        this._trapFocus();\n\n        this._animationStateChanged.next({\n          state: 'opened',\n          totalTime\n        });\n      } else if (toState === 'exit') {\n        this._restoreFocus();\n\n        this._animationStateChanged.next({\n          state: 'closed',\n          totalTime\n        });\n      }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n\n\n    _onAnimationStart({\n      toState,\n      totalTime\n    }) {\n      if (toState === 'enter') {\n        this._animationStateChanged.next({\n          state: 'opening',\n          totalTime\n        });\n      } else if (toState === 'exit' || toState === 'void') {\n        this._animationStateChanged.next({\n          state: 'closing',\n          totalTime\n        });\n      }\n    }\n    /** Starts the dialog exit animation. */\n\n\n    _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n\n  }\n\n  MatDialogContainer.ɵfac = /*@__PURE__*/function () {\n    let ɵMatDialogContainer_BaseFactory;\n    return function MatDialogContainer_Factory(t) {\n      return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer);\n    };\n  }();\n\n  MatDialogContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ɵngcc2.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  return MatDialogContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nclass MatDialogRef {\n  constructor(_overlayRef, _containerInstance,\n  /** Id of the dialog. */\n  id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance = null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(event => {\n      event.preventDefault();\n\n      _closeDialogVia(this, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(this, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._afterClosed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._overlayRef.updateSize({\n      width,\n      height\n    });\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._overlayRef.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._overlayRef.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* CLOSED */\n    ;\n\n    this._overlayRef.dispose();\n  }\n  /** Fetches the position strategy object from the overlay ref. */\n\n\n  _getPositionStrategy() {\n    return this._overlayRef.getConfig().positionStrategy;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = /*#__PURE__*/new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nlet _MatDialogBase = /*#__PURE__*/(() => {\n  class _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._dialogRefConstructor = _dialogRefConstructor;\n      this._dialogContainerType = _dialogContainerType;\n      this._dialogDataToken = _dialogDataToken;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n      this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n\n\n    get openDialogs() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n\n    get afterOpened() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n\n    _getAfterAllClosed() {\n      const parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n\n    open(componentOrTemplateRef, config) {\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n      }\n\n      const overlayRef = this._createOverlay(config);\n\n      const dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n      const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n      this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n      dialogContainer._initializeWithAttachedContent();\n\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n\n    closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n\n    getDialogById(id) {\n      return this.openDialogs.find(dialog => dialog.id === id);\n    }\n\n    ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n\n\n    _createOverlay(config) {\n      const overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n\n\n    _getOverlayConfig(dialogConfig) {\n      const state = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n\n\n    _attachDialogContainer(overlay, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatDialogConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n      const containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n      const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n          $implicit: config.data,\n          dialogRef\n        }));\n      } else {\n        const injector = this._createInjector(config, dialogRef, dialogContainer);\n\n        const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n\n\n    _createInjector(config, dialogRef, dialogContainer) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n      // content are created out of the same `ViewContainerRef` and as such, are siblings\n      // for injector purposes. To allow the hierarchy that is expected, the dialog\n      // container is explicitly provided in the injector.\n\n      const providers = [{\n        provide: this._dialogContainerType,\n        useValue: dialogContainer\n      }, {\n        provide: this._dialogDataToken,\n        useValue: config.data\n      }, {\n        provide: this._dialogRefConstructor,\n        useValue: dialogRef\n      }];\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n        providers.push({\n          provide: Directionality,\n          useValue: {\n            value: config.direction,\n            change: of()\n          }\n        });\n      }\n\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers\n      });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n\n\n    _removeOpenDialog(dialogRef) {\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach((previousValue, element) => {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n\n\n    _hideNonDialogContentFromAssistiveTechnology() {\n      const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        const siblings = overlayContainer.parentElement.children;\n\n        for (let i = siblings.length - 1; i > -1; i--) {\n          let sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /** Closes all of the dialogs in an array. */\n\n\n    _closeDialogs(dialogs) {\n      let i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n\n  }\n\n  _MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n    return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken));\n  };\n\n  _MatDialogBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatDialogBase\n  });\n  return _MatDialogBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nlet MatDialog = /*#__PURE__*/(() => {\n  class MatDialog extends _MatDialogBase {\n    constructor(overlay, injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n      super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n\n  }\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n  };\n\n  MatDialog.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  return MatDialog;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nlet MatDialogClose = /*#__PURE__*/(() => {\n  class MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Default to \"button\" to prevents accidental form submits. */\n\n      this.type = 'button';\n    }\n\n    ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n\n    ngOnChanges(changes) {\n      const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n\n    _onButtonClick(event) {\n      // Determinate the focus origin using the click event, because using the FocusMonitor will\n      // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n      // dialog, and therefore clicking the button won't result in a focus change. This means that\n      // the FocusMonitor won't detect any origin change, and will always output `program`.\n      _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n\n  }\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n          return ctx._onButtonClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatDialogClose;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nlet MatDialogTitle = /*#__PURE__*/(() => {\n  class MatDialogTitle {\n    constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n      this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n\n    ngOnInit() {\n      if (!this._dialogRef) {\n        this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(() => {\n          const container = this._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = this.id;\n          }\n        });\n      }\n    }\n\n  }\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  return MatDialogTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nlet MatDialogContent = /*#__PURE__*/(() => {\n  class MatDialogContent {}\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nlet MatDialogActions = /*#__PURE__*/(() => {\n  class MatDialogActions {}\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  return MatDialogActions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatDialogModule = /*#__PURE__*/(() => {\n  class MatDialogModule {}\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n  return MatDialogModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function () {\n      return [OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/dialog.js"],"names":["Overlay","OverlayConfig","OverlayContainer","OverlayModule","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","EventEmitter","Directive","ElementRef","ChangeDetectorRef","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Type","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","DOCUMENT","Location","Subject","defer","of","filter","take","startWith","FocusTrapFactory","FocusMonitor","_getFocusedElementPierceShadowDom","trigger","state","style","transition","animate","ESCAPE","hasModifierKey","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_initializeWithAttachedContent","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","_trapFocus","focusInitialElementWhenReady","_restoreFocus","previousElement","activeElement","element","body","contains","focusVia","destroy","create","ɵfac","_MatDialogContainerBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatDialogContainerBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","features","ɵɵInheritDefinitionFeature","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","next","_onAnimationStart","_startExitAnimation","markForCheck","ɵMatDialogContainer_BaseFactory","MatDialogContainer_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵsyntheticHostListener","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","ɵɵhostProperty","_id","ɵɵattribute","ɵɵsyntheticHostProperty","decls","vars","consts","template","MatDialogContainer_Template","ɵɵtemplate","directives","styles","encapsulation","animation","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","ref","interactionType","result","undefined","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","Object","assign","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._setupFocusTrap();\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        this._capturePreviouslyFocusedElement();\n        // Move focus onto the dialog immediately in order to prevent the user\n        // from accidentally opening multiple dialogs at the same time.\n        this._focusDialogContainer();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Sets up the focus trap. */\n    _setupFocusTrap() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    /** Captures the element that was focused before the dialog was opened. */\n    _capturePreviouslyFocusedElement() {\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\n_MatDialogContainerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatDialogContainerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\n_MatDialogContainerBase.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._trapFocus();\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatDialogContainer_BaseFactory; return function MatDialogContainer_Factory(t) { return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer); }; }();\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._getAfterAllClosed() :\n            this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\n        ];\n        if (config.direction && (!userInjector ||\n            !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\n_MatDialogBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\n_MatDialogBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: undefined },\n    { type: undefined },\n    { type: OverlayContainer },\n    { type: undefined },\n    { type: Type },\n    { type: Type },\n    { type: InjectionToken }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n"]},"metadata":{},"sourceType":"module"}