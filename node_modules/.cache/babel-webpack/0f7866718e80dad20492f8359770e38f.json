{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { getValues, isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\n\nvar VectorSourceEvent = function (_super) {\n  __extends(VectorSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [opt_feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [opt_features] Features.\n   */\n\n\n  function VectorSourceEvent(type, opt_feature, opt_features) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n\n\n    _this.feature = opt_feature;\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n\n    _this.features = opt_features;\n    return _this;\n  }\n\n  return VectorSourceEvent;\n}(Event);\n\nexport { VectorSourceEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          var features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\n\nvar VectorSource = function (_super) {\n  __extends(VectorSource, _super);\n  /**\n   * @param {Options} [opt_options] Vector source options.\n   */\n\n\n  function VectorSource(opt_options) {\n    var _this = this;\n\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    }) || this;\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.on;\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n\n    _this.loader_ = VOID;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n\n    _this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n\n    _this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      _this.loader_ = options.loader;\n    } else if (_this.url_ !== undefined) {\n      assert(_this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n\n      _this.loader_ = xhr(_this.url_, _this.format_);\n    }\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n\n\n    _this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n\n    _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n\n    _this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.loadingExtentsCount_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n\n    _this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n\n    _this.idIndex_ = {};\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n\n    _this.uidIndex_ = {};\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n\n    _this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n     */\n\n    _this.featuresCollection_ = null;\n    var collection, features;\n\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n\n    if (features !== undefined) {\n      _this.addFeaturesInternal(features);\n    }\n\n    if (collection !== undefined) {\n      _this.bindFeaturesCollection_(collection);\n    }\n\n    return _this;\n  }\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n\n\n  VectorSource.prototype.addFeature = function (feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n\n\n  VectorSource.prototype.addFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n\n    if (geometry) {\n      var extent = geometry.getExtent();\n\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n\n\n  VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n\n\n  VectorSource.prototype.addToIndex_ = function (featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n\n      this.uidIndex_[featureKey] = feature;\n    }\n\n    return valid;\n  };\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n\n\n  VectorSource.prototype.addFeatures = function (features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n\n\n  VectorSource.prototype.addFeaturesInternal = function (features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n\n    for (var i = 0, length_1 = features.length; i < length_1; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {\n      var feature = newFeatures[i];\n      var featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n      var geometry = feature.getGeometry();\n\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  };\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n\n\n  VectorSource.prototype.bindFeaturesCollection_ = function (collection) {\n    var modifyingCollection = false;\n    this.addEventListener(VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    this.addEventListener(VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    collection.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    this.featuresCollection_ = collection;\n  };\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature removefeature} events.\n   * @api\n   */\n\n\n  VectorSource.prototype.clear = function (opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeature = function (callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n\n\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n\n\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesCollection = function () {\n    return this.featuresCollection_;\n  };\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeatures = function () {\n    var features;\n\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n\n    return features;\n  };\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeaturesInExtent = function (extent) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.getInExtent(extent);\n    } else if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    } else {\n      return [];\n    }\n  };\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [opt_filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n\n\n  VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature; // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n\n\n  VectorSource.prototype.getExtent = function (opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   * @api\n   */\n\n\n  VectorSource.prototype.getFeatureById = function (id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   */\n\n\n  VectorSource.prototype.getFeatureByUid = function (uid) {\n    var feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n\n\n  VectorSource.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n\n\n  VectorSource.prototype.getOverlaps = function () {\n    return this.overlaps_;\n  };\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n\n\n  VectorSource.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n\n\n  VectorSource.prototype.handleFeatureChange_ = function (event) {\n    var feature = event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      var sid = id.toString();\n\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n\n\n  VectorSource.prototype.hasFeature = function (feature) {\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.uidIndex_;\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n\n\n  VectorSource.prototype.isEmpty = function () {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n\n\n  VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution, projection);\n\n    var _loop_1 = function (i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n\n      if (!alreadyLoaded) {\n        ++this_1.loadingExtentsCount_;\n        this_1.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n        this_1.loader_.call(this_1, extentToLoad, resolution, projection, function (features) {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n        }.bind(this_1), function () {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n        }.bind(this_1));\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      _loop_1(i, ii);\n    }\n\n    this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  };\n\n  VectorSource.prototype.refresh = function () {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n\n\n  VectorSource.prototype.removeLoadedExtent = function (extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n\n\n  VectorSource.prototype.removeFeature = function (feature) {\n    var featureKey = getUid(feature);\n\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n\n\n  VectorSource.prototype.removeFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n\n\n  VectorSource.prototype.removeFromIdIndex_ = function (feature) {\n    var removed = false;\n\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n\n    return removed;\n  };\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n\n\n  VectorSource.prototype.setLoader = function (loader) {\n    this.loader_ = loader;\n  };\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n\n\n  VectorSource.prototype.setUrl = function (url) {\n    assert(this.format_, 7); // `format` must be set when `url` is set\n\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  };\n\n  return VectorSource;\n}(Source);\n\nexport default VectorSource;","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/source/Vector.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Collection","CollectionEventType","Event","EventType","ObjectEventType","RBush","Source","SourceState","VectorEventType","TRUE","VOID","all","allStrategy","assert","containsExtent","equals","extend","getUid","getValues","isEmpty","listen","unlistenByKey","xhr","VectorSourceEvent","_super","type","opt_feature","opt_features","_this","feature","features","VectorSource","opt_options","options","attributions","projection","undefined","state","READY","wrapX","on","once","un","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","collection","isArray","getArray","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","changed","featureKey","addToIndex_","remove","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","id","getId","toString","addFeatures","extents","newFeatures","geometryFeatures","i","length_1","length","push","length_2","load","length_3","modifyingCollection","addEventListener","evt","REMOVEFEATURE","ADD","element","bind","REMOVE","removeFeature","clear","opt_fast","featureId","keys","forEach","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","slice","getAll","getFeaturesAtCoordinate","getFeaturesInExtent","getInExtent","getClosestFeatureToCoordinate","opt_filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","filter","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","opt_extent","getFeatureById","getFeatureByUid","uid","getFormat","getOverlaps","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","_loop_1","ii","extentToLoad","alreadyLoaded","object","this_1","FEATURESLOADSTART","FEATURESLOADEND","FEATURESLOADERROR","loading","refresh","removeLoadedExtent","obj","removed","setLoader","setUrl"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Vector\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { getValues, isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSourceEvent = /** @class */ (function (_super) {\n    __extends(VectorSourceEvent, _super);\n    /**\n     * @param {string} type Type.\n     * @param {import(\"../Feature.js\").default<Geometry>} [opt_feature] Feature.\n     * @param {Array<import(\"../Feature.js\").default<Geometry>>} [opt_features] Features.\n     */\n    function VectorSourceEvent(type, opt_feature, opt_features) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n         * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n         * @api\n         */\n        _this.feature = opt_feature;\n        /**\n         * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n         * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n         * @api\n         */\n        _this.features = opt_features;\n        return _this;\n    }\n    return VectorSourceEvent;\n}(Event));\nexport { VectorSourceEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          var features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSource = /** @class */ (function (_super) {\n    __extends(VectorSource, _super);\n    /**\n     * @param {Options} [opt_options] Vector source options.\n     */\n    function VectorSource(opt_options) {\n        var _this = this;\n        var options = opt_options || {};\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            projection: undefined,\n            state: SourceState.READY,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n        }) || this;\n        /***\n         * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {VectorSourceOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {import(\"../featureloader.js\").FeatureLoader}\n         */\n        _this.loader_ = VOID;\n        /**\n         * @private\n         * @type {import(\"../format/Feature.js\").default|undefined}\n         */\n        _this.format_ = options.format;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n        /**\n         * @private\n         * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n         */\n        _this.url_ = options.url;\n        if (options.loader !== undefined) {\n            _this.loader_ = options.loader;\n        }\n        else if (_this.url_ !== undefined) {\n            assert(_this.format_, 7); // `format` must be set when `url` is set\n            // create a XHR feature loader for \"url\" and \"format\"\n            _this.loader_ = xhr(_this.url_, \n            /** @type {import(\"../format/Feature.js\").default} */ (_this.format_));\n        }\n        /**\n         * @private\n         * @type {LoadingStrategy}\n         */\n        _this.strategy_ =\n            options.strategy !== undefined ? options.strategy : allStrategy;\n        var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n        /**\n         * @private\n         * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n         */\n        _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n        /**\n         * @private\n         * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n         */\n        _this.loadedExtentsRtree_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.loadingExtentsCount_ = 0;\n        /**\n         * @private\n         * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n         */\n        _this.nullGeometryFeatures_ = {};\n        /**\n         * A lookup of features by id (the return from feature.getId()).\n         * @private\n         * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n         */\n        _this.idIndex_ = {};\n        /**\n         * A lookup of features by uid (using getUid(feature)).\n         * @private\n         * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n         */\n        _this.uidIndex_ = {};\n        /**\n         * @private\n         * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n         */\n        _this.featureChangeKeys_ = {};\n        /**\n         * @private\n         * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n         */\n        _this.featuresCollection_ = null;\n        var collection, features;\n        if (Array.isArray(options.features)) {\n            features = options.features;\n        }\n        else if (options.features) {\n            collection = options.features;\n            features = collection.getArray();\n        }\n        if (!useSpatialIndex && collection === undefined) {\n            collection = new Collection(features);\n        }\n        if (features !== undefined) {\n            _this.addFeaturesInternal(features);\n        }\n        if (collection !== undefined) {\n            _this.bindFeaturesCollection_(collection);\n        }\n        return _this;\n    }\n    /**\n     * Add a single feature to the source.  If you want to add a batch of features\n     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n     * instead. A feature will not be added to the source if feature with\n     * the same id is already there. The reason for this behavior is to avoid\n     * feature duplication when using bbox or tile loading strategies.\n     * Note: this also applies if an {@link module:ol/Collection} is used for features,\n     * meaning that if a feature with a duplicate id is added in the collection, it will\n     * be removed from it right away.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n     * @api\n     */\n    VectorSource.prototype.addFeature = function (feature) {\n        this.addFeatureInternal(feature);\n        this.changed();\n    };\n    /**\n     * Add a feature without firing a `change` event.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @protected\n     */\n    VectorSource.prototype.addFeatureInternal = function (feature) {\n        var featureKey = getUid(feature);\n        if (!this.addToIndex_(featureKey, feature)) {\n            if (this.featuresCollection_) {\n                this.featuresCollection_.remove(feature);\n            }\n            return;\n        }\n        this.setupChangeEvents_(featureKey, feature);\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var extent = geometry.getExtent();\n            if (this.featuresRtree_) {\n                this.featuresRtree_.insert(extent, feature);\n            }\n        }\n        else {\n            this.nullGeometryFeatures_[featureKey] = feature;\n        }\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n    };\n    /**\n     * @param {string} featureKey Unique identifier for the feature.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @private\n     */\n    VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {\n        this.featureChangeKeys_[featureKey] = [\n            listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n            listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this),\n        ];\n    };\n    /**\n     * @param {string} featureKey Unique identifier for the feature.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @return {boolean} The feature is \"valid\", in the sense that it is also a\n     *     candidate for insertion into the Rtree.\n     * @private\n     */\n    VectorSource.prototype.addToIndex_ = function (featureKey, feature) {\n        var valid = true;\n        var id = feature.getId();\n        if (id !== undefined) {\n            if (!(id.toString() in this.idIndex_)) {\n                this.idIndex_[id.toString()] = feature;\n            }\n            else {\n                valid = false;\n            }\n        }\n        if (valid) {\n            assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n            this.uidIndex_[featureKey] = feature;\n        }\n        return valid;\n    };\n    /**\n     * Add a batch of features to the source.\n     * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n     * @api\n     */\n    VectorSource.prototype.addFeatures = function (features) {\n        this.addFeaturesInternal(features);\n        this.changed();\n    };\n    /**\n     * Add features without firing a `change` event.\n     * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n     * @protected\n     */\n    VectorSource.prototype.addFeaturesInternal = function (features) {\n        var extents = [];\n        var newFeatures = [];\n        var geometryFeatures = [];\n        for (var i = 0, length_1 = features.length; i < length_1; i++) {\n            var feature = features[i];\n            var featureKey = getUid(feature);\n            if (this.addToIndex_(featureKey, feature)) {\n                newFeatures.push(feature);\n            }\n        }\n        for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {\n            var feature = newFeatures[i];\n            var featureKey = getUid(feature);\n            this.setupChangeEvents_(featureKey, feature);\n            var geometry = feature.getGeometry();\n            if (geometry) {\n                var extent = geometry.getExtent();\n                extents.push(extent);\n                geometryFeatures.push(feature);\n            }\n            else {\n                this.nullGeometryFeatures_[featureKey] = feature;\n            }\n        }\n        if (this.featuresRtree_) {\n            this.featuresRtree_.load(extents, geometryFeatures);\n        }\n        for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {\n            this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n        }\n    };\n    /**\n     * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n     * @private\n     */\n    VectorSource.prototype.bindFeaturesCollection_ = function (collection) {\n        var modifyingCollection = false;\n        this.addEventListener(VectorEventType.ADDFEATURE, \n        /**\n         * @param {VectorSourceEvent<Geometry>} evt The vector source event\n         */\n        function (evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.push(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        this.addEventListener(VectorEventType.REMOVEFEATURE, \n        /**\n         * @param {VectorSourceEvent<Geometry>} evt The vector source event\n         */\n        function (evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.remove(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        collection.addEventListener(CollectionEventType.ADD, \n        /**\n         * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n         */\n        function (evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.addFeature(\n                /** @type {import(\"../Feature.js\").default<Geometry>} */ (evt.element));\n                modifyingCollection = false;\n            }\n        }.bind(this));\n        collection.addEventListener(CollectionEventType.REMOVE, \n        /**\n         * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n         */\n        function (evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.removeFeature(\n                /** @type {import(\"../Feature.js\").default<Geometry>} */ (evt.element));\n                modifyingCollection = false;\n            }\n        }.bind(this));\n        this.featuresCollection_ = collection;\n    };\n    /**\n     * Remove all features from the source.\n     * @param {boolean} [opt_fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature removefeature} events.\n     * @api\n     */\n    VectorSource.prototype.clear = function (opt_fast) {\n        if (opt_fast) {\n            for (var featureId in this.featureChangeKeys_) {\n                var keys = this.featureChangeKeys_[featureId];\n                keys.forEach(unlistenByKey);\n            }\n            if (!this.featuresCollection_) {\n                this.featureChangeKeys_ = {};\n                this.idIndex_ = {};\n                this.uidIndex_ = {};\n            }\n        }\n        else {\n            if (this.featuresRtree_) {\n                this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n                for (var id in this.nullGeometryFeatures_) {\n                    this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n                }\n            }\n        }\n        if (this.featuresCollection_) {\n            this.featuresCollection_.clear();\n        }\n        if (this.featuresRtree_) {\n            this.featuresRtree_.clear();\n        }\n        this.nullGeometryFeatures_ = {};\n        var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n        this.dispatchEvent(clearEvent);\n        this.changed();\n    };\n    /**\n     * Iterate through all features on the source, calling the provided callback\n     * with each one.  If the callback returns any \"truthy\" value, iteration will\n     * stop and the function will return the same value.\n     * Note: this function only iterate through the feature that have a defined geometry.\n     *\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     on the source.  Return a truthy value to stop iteration.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n    VectorSource.prototype.forEachFeature = function (callback) {\n        if (this.featuresRtree_) {\n            return this.featuresRtree_.forEach(callback);\n        }\n        else if (this.featuresCollection_) {\n            this.featuresCollection_.forEach(callback);\n        }\n    };\n    /**\n     * Iterate through all features whose geometries contain the provided\n     * coordinate, calling the callback with each feature.  If the callback returns\n     * a \"truthy\" value, iteration will stop and the function will return the same\n     * value.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose goemetry contains the provided coordinate.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     */\n    VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {\n        var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n        return this.forEachFeatureInExtent(extent, function (feature) {\n            var geometry = feature.getGeometry();\n            if (geometry.intersectsCoordinate(coordinate)) {\n                return callback(feature);\n            }\n            else {\n                return undefined;\n            }\n        });\n    };\n    /**\n     * Iterate through all features whose bounding box intersects the provided\n     * extent (note that the feature's geometry may not intersect the extent),\n     * calling the callback with each feature.  If the callback returns a \"truthy\"\n     * value, iteration will stop and the function will return the same value.\n     *\n     * If you are interested in features whose geometry intersects an extent, call\n     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n     *\n     * When `useSpatialIndex` is set to false, this method will loop through all\n     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose bounding box intersects the provided extent.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n    VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {\n        if (this.featuresRtree_) {\n            return this.featuresRtree_.forEachInExtent(extent, callback);\n        }\n        else if (this.featuresCollection_) {\n            this.featuresCollection_.forEach(callback);\n        }\n    };\n    /**\n     * Iterate through all features whose geometry intersects the provided extent,\n     * calling the callback with each feature.  If the callback returns a \"truthy\"\n     * value, iteration will stop and the function will return the same value.\n     *\n     * If you only want to test for bounding box intersection, call the\n     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose geometry intersects the provided extent.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n    VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {\n        return this.forEachFeatureInExtent(extent, \n        /**\n         * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n         * @return {T|undefined} The return value from the last call to the callback.\n         */\n        function (feature) {\n            var geometry = feature.getGeometry();\n            if (geometry.intersectsExtent(extent)) {\n                var result = callback(feature);\n                if (result) {\n                    return result;\n                }\n            }\n        });\n    };\n    /**\n     * Get the features collection associated with this source. Will be `null`\n     * unless the source was configured with `useSpatialIndex` set to `false`, or\n     * with an {@link module:ol/Collection} as `features`.\n     * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n     * @api\n     */\n    VectorSource.prototype.getFeaturesCollection = function () {\n        return this.featuresCollection_;\n    };\n    /**\n     * Get a snapshot of the features currently on the source in random order. The returned array\n     * is a copy, the features are references to the features in the source.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n    VectorSource.prototype.getFeatures = function () {\n        var features;\n        if (this.featuresCollection_) {\n            features = this.featuresCollection_.getArray().slice(0);\n        }\n        else if (this.featuresRtree_) {\n            features = this.featuresRtree_.getAll();\n            if (!isEmpty(this.nullGeometryFeatures_)) {\n                extend(features, getValues(this.nullGeometryFeatures_));\n            }\n        }\n        return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (features);\n    };\n    /**\n     * Get all features whose geometry intersects the provided coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n    VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {\n        var features = [];\n        this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n            features.push(feature);\n        });\n        return features;\n    };\n    /**\n     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n     * all features intersecting the given extent in random order (so it may include\n     * features whose geometries do not intersect the extent).\n     *\n     * When `useSpatialIndex` is set to false, this method will return all\n     * features.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n    VectorSource.prototype.getFeaturesInExtent = function (extent) {\n        if (this.featuresRtree_) {\n            return this.featuresRtree_.getInExtent(extent);\n        }\n        else if (this.featuresCollection_) {\n            return this.featuresCollection_.getArray().slice(0);\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * Get the closest feature to the provided coordinate.\n     *\n     * This method is not available when the source is configured with\n     * `useSpatialIndex` set to `false`.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [opt_filter] Feature filter function.\n     *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n     *     and it should return a boolean value. By default, no filtering is made.\n     * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n     * @api\n     */\n    VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {\n        // Find the closest feature using branch and bound.  We start searching an\n        // infinite extent, and find the distance from the first feature found.  This\n        // becomes the closest feature.  We then compute a smaller extent which any\n        // closer feature must intersect.  We continue searching with this smaller\n        // extent, trying to find a closer feature.  Every time we find a closer\n        // feature, we update the extent being searched so that any even closer\n        // feature must intersect it.  We continue until we run out of features.\n        var x = coordinate[0];\n        var y = coordinate[1];\n        var closestFeature = null;\n        var closestPoint = [NaN, NaN];\n        var minSquaredDistance = Infinity;\n        var extent = [-Infinity, -Infinity, Infinity, Infinity];\n        var filter = opt_filter ? opt_filter : TRUE;\n        this.featuresRtree_.forEachInExtent(extent, \n        /**\n         * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n         */\n        function (feature) {\n            if (filter(feature)) {\n                var geometry = feature.getGeometry();\n                var previousMinSquaredDistance = minSquaredDistance;\n                minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n                if (minSquaredDistance < previousMinSquaredDistance) {\n                    closestFeature = feature;\n                    // This is sneaky.  Reduce the extent that it is currently being\n                    // searched while the R-Tree traversal using this same extent object\n                    // is still in progress.  This is safe because the new extent is\n                    // strictly contained by the old extent.\n                    var minDistance = Math.sqrt(minSquaredDistance);\n                    extent[0] = x - minDistance;\n                    extent[1] = y - minDistance;\n                    extent[2] = x + minDistance;\n                    extent[3] = y + minDistance;\n                }\n            }\n        });\n        return closestFeature;\n    };\n    /**\n     * Get the extent of the features currently in the source.\n     *\n     * This method is not available when the source is configured with\n     * `useSpatialIndex` set to `false`.\n     * @param {import(\"../extent.js\").Extent} [opt_extent] Destination extent. If provided, no new extent\n     *     will be created. Instead, that extent's coordinates will be overwritten.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    VectorSource.prototype.getExtent = function (opt_extent) {\n        return this.featuresRtree_.getExtent(opt_extent);\n    };\n    /**\n     * Get a feature by its identifier (the value returned by feature.getId()).\n     * Note that the index treats string and numeric identifiers as the same.  So\n     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n     *\n     * @param {string|number} id Feature identifier.\n     * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n     * @api\n     */\n    VectorSource.prototype.getFeatureById = function (id) {\n        var feature = this.idIndex_[id.toString()];\n        return feature !== undefined ? feature : null;\n    };\n    /**\n     * Get a feature by its internal unique identifier (using `getUid`).\n     *\n     * @param {string} uid Feature identifier.\n     * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n     */\n    VectorSource.prototype.getFeatureByUid = function (uid) {\n        var feature = this.uidIndex_[uid];\n        return feature !== undefined ? feature : null;\n    };\n    /**\n     * Get the format associated with this source.\n     *\n     * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n     * @api\n     */\n    VectorSource.prototype.getFormat = function () {\n        return this.format_;\n    };\n    /**\n     * @return {boolean} The source can have overlapping geometries.\n     */\n    VectorSource.prototype.getOverlaps = function () {\n        return this.overlaps_;\n    };\n    /**\n     * Get the url associated with this source.\n     *\n     * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n     * @api\n     */\n    VectorSource.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * @param {Event} event Event.\n     * @private\n     */\n    VectorSource.prototype.handleFeatureChange_ = function (event) {\n        var feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (event.target);\n        var featureKey = getUid(feature);\n        var geometry = feature.getGeometry();\n        if (!geometry) {\n            if (!(featureKey in this.nullGeometryFeatures_)) {\n                if (this.featuresRtree_) {\n                    this.featuresRtree_.remove(feature);\n                }\n                this.nullGeometryFeatures_[featureKey] = feature;\n            }\n        }\n        else {\n            var extent = geometry.getExtent();\n            if (featureKey in this.nullGeometryFeatures_) {\n                delete this.nullGeometryFeatures_[featureKey];\n                if (this.featuresRtree_) {\n                    this.featuresRtree_.insert(extent, feature);\n                }\n            }\n            else {\n                if (this.featuresRtree_) {\n                    this.featuresRtree_.update(extent, feature);\n                }\n            }\n        }\n        var id = feature.getId();\n        if (id !== undefined) {\n            var sid = id.toString();\n            if (this.idIndex_[sid] !== feature) {\n                this.removeFromIdIndex_(feature);\n                this.idIndex_[sid] = feature;\n            }\n        }\n        else {\n            this.removeFromIdIndex_(feature);\n            this.uidIndex_[featureKey] = feature;\n        }\n        this.changed();\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n    };\n    /**\n     * Returns true if the feature is contained within the source.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {boolean} Has feature.\n     * @api\n     */\n    VectorSource.prototype.hasFeature = function (feature) {\n        var id = feature.getId();\n        if (id !== undefined) {\n            return id in this.idIndex_;\n        }\n        else {\n            return getUid(feature) in this.uidIndex_;\n        }\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    VectorSource.prototype.isEmpty = function () {\n        return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {\n        var loadedExtentsRtree = this.loadedExtentsRtree_;\n        var extentsToLoad = this.strategy_(extent, resolution, projection);\n        var _loop_1 = function (i, ii) {\n            var extentToLoad = extentsToLoad[i];\n            var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, \n            /**\n             * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n             * @return {boolean} Contains.\n             */\n            function (object) {\n                return containsExtent(object.extent, extentToLoad);\n            });\n            if (!alreadyLoaded) {\n                ++this_1.loadingExtentsCount_;\n                this_1.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n                this_1.loader_.call(this_1, extentToLoad, resolution, projection, function (features) {\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n                }.bind(this_1), function () {\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n                }.bind(this_1));\n                loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });\n            }\n        };\n        var this_1 = this;\n        for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n            _loop_1(i, ii);\n        }\n        this.loading =\n            this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n    };\n    VectorSource.prototype.refresh = function () {\n        this.clear(true);\n        this.loadedExtentsRtree_.clear();\n        _super.prototype.refresh.call(this);\n    };\n    /**\n     * Remove an extent from the list of loaded extents.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    VectorSource.prototype.removeLoadedExtent = function (extent) {\n        var loadedExtentsRtree = this.loadedExtentsRtree_;\n        var obj;\n        loadedExtentsRtree.forEachInExtent(extent, function (object) {\n            if (equals(object.extent, extent)) {\n                obj = object;\n                return true;\n            }\n        });\n        if (obj) {\n            loadedExtentsRtree.remove(obj);\n        }\n    };\n    /**\n     * Remove a single feature from the source.  If you want to remove all features\n     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n     * instead.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n     * @api\n     */\n    VectorSource.prototype.removeFeature = function (feature) {\n        var featureKey = getUid(feature);\n        if (featureKey in this.nullGeometryFeatures_) {\n            delete this.nullGeometryFeatures_[featureKey];\n        }\n        else {\n            if (this.featuresRtree_) {\n                this.featuresRtree_.remove(feature);\n            }\n        }\n        this.removeFeatureInternal(feature);\n        this.changed();\n    };\n    /**\n     * Remove feature without firing a `change` event.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @protected\n     */\n    VectorSource.prototype.removeFeatureInternal = function (feature) {\n        var featureKey = getUid(feature);\n        this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n        delete this.featureChangeKeys_[featureKey];\n        var id = feature.getId();\n        if (id !== undefined) {\n            delete this.idIndex_[id.toString()];\n        }\n        delete this.uidIndex_[featureKey];\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n    };\n    /**\n     * Remove a feature from the id index.  Called internally when the feature id\n     * may have changed.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @return {boolean} Removed the feature from the index.\n     * @private\n     */\n    VectorSource.prototype.removeFromIdIndex_ = function (feature) {\n        var removed = false;\n        for (var id in this.idIndex_) {\n            if (this.idIndex_[id] === feature) {\n                delete this.idIndex_[id];\n                removed = true;\n                break;\n            }\n        }\n        return removed;\n    };\n    /**\n     * Set the new loader of the source. The next render cycle will use the\n     * new loader.\n     * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n     * @api\n     */\n    VectorSource.prototype.setLoader = function (loader) {\n        this.loader_ = loader;\n    };\n    /**\n     * Points the source to a new url. The next render cycle will use the new url.\n     * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n     * @api\n     */\n    VectorSource.prototype.setUrl = function (url) {\n        assert(this.format_, 7); // `format` must be set when `url` is set\n        this.url_ = url;\n        this.setLoader(xhr(url, this.format_));\n    };\n    return VectorSource;\n}(Source));\nexport default VectorSource;\n"]},"metadata":{},"sourceType":"module"}