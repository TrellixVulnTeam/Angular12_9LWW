{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Geolocation\n */\n\n\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\n\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\n\nvar GeolocationError = function (_super) {\n  __extends(GeolocationError, _super);\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  function GeolocationError(error) {\n    var _this = _super.call(this, EventType.ERROR) || this;\n    /**\n     * @type {number}\n     */\n\n\n    _this.code = error.code;\n    /**\n     * @type {string}\n     */\n\n    _this.message = error.message;\n    return _this;\n  }\n\n  return GeolocationError;\n}(BaseEvent);\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\n\n\nvar Geolocation = function (_super) {\n  __extends(Geolocation, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function Geolocation(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n\n    _this.un;\n    var options = opt_options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n\n    _this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n\n    _this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    _this.watchId_ = undefined;\n\n    _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n\n    _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      _this.setProjection(options.projection);\n    }\n\n    if (options.trackingOptions !== undefined) {\n      _this.setTrackingOptions(options.trackingOptions);\n    }\n\n    _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  Geolocation.prototype.disposeInternal = function () {\n    this.setTracking(false);\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleProjectionChanged_ = function () {\n    var projection = this.getProjection();\n\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  Geolocation.prototype.handleTrackingChanged_ = function () {\n    if ('geolocation' in navigator) {\n      var tracking = this.getTracking();\n\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n\n\n  Geolocation.prototype.positionChange_ = function (position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n\n\n  Geolocation.prototype.positionError_ = function (error) {\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracy = function () {\n    return this.get(Property.ACCURACY);\n  };\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAccuracyGeometry = function () {\n    return this.get(Property.ACCURACY_GEOMETRY) || null;\n  };\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitude = function () {\n    return this.get(Property.ALTITUDE);\n  };\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getAltitudeAccuracy = function () {\n    return this.get(Property.ALTITUDE_ACCURACY);\n  };\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getHeading = function () {\n    return this.get(Property.HEADING);\n  };\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getPosition = function () {\n    return this.get(Property.POSITION);\n  };\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getProjection = function () {\n    return this.get(Property.PROJECTION);\n  };\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getSpeed = function () {\n    return this.get(Property.SPEED);\n  };\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTracking = function () {\n    return this.get(Property.TRACKING);\n  };\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.getTrackingOptions = function () {\n    return this.get(Property.TRACKING_OPTIONS);\n  };\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setProjection = function (projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTracking = function (tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n\n\n  Geolocation.prototype.setTrackingOptions = function (options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n\n  return Geolocation;\n}(BaseObject);\n\nexport default Geolocation;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/Geolocation.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseEvent","BaseObject","EventType","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","GeolocationError","_super","error","_this","ERROR","code","message","Geolocation","opt_options","on","once","un","options","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","disposeInternal","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","speed","geometry","applyTransform","changed","dispatchEvent","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform, } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\nvar Property = {\n    ACCURACY: 'accuracy',\n    ACCURACY_GEOMETRY: 'accuracyGeometry',\n    ALTITUDE: 'altitude',\n    ALTITUDE_ACCURACY: 'altitudeAccuracy',\n    HEADING: 'heading',\n    POSITION: 'position',\n    PROJECTION: 'projection',\n    SPEED: 'speed',\n    TRACKING: 'tracking',\n    TRACKING_OPTIONS: 'trackingOptions',\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nvar GeolocationError = /** @class */ (function (_super) {\n    __extends(GeolocationError, _super);\n    /**\n     * @param {GeolocationPositionError} error error object.\n     */\n    function GeolocationError(error) {\n        var _this = _super.call(this, EventType.ERROR) || this;\n        /**\n         * @type {number}\n         */\n        _this.code = error.code;\n        /**\n         * @type {string}\n         */\n        _this.message = error.message;\n        return _this;\n    }\n    return GeolocationError;\n}(BaseEvent));\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nvar Geolocation = /** @class */ (function (_super) {\n    __extends(Geolocation, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Geolocation(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {GeolocationOnSignature<void>}\n         */\n        _this.un;\n        var options = opt_options || {};\n        /**\n         * The unprojected (EPSG:4326) device position.\n         * @private\n         * @type {?import(\"./coordinate.js\").Coordinate}\n         */\n        _this.position_ = null;\n        /**\n         * @private\n         * @type {import(\"./proj.js\").TransformFunction}\n         */\n        _this.transform_ = identityTransform;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.watchId_ = undefined;\n        _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n        _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n        if (options.projection !== undefined) {\n            _this.setProjection(options.projection);\n        }\n        if (options.trackingOptions !== undefined) {\n            _this.setTrackingOptions(options.trackingOptions);\n        }\n        _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n        return _this;\n    }\n    /**\n     * Clean up.\n     */\n    Geolocation.prototype.disposeInternal = function () {\n        this.setTracking(false);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @private\n     */\n    Geolocation.prototype.handleProjectionChanged_ = function () {\n        var projection = this.getProjection();\n        if (projection) {\n            this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n            if (this.position_) {\n                this.set(Property.POSITION, this.transform_(this.position_));\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    Geolocation.prototype.handleTrackingChanged_ = function () {\n        if ('geolocation' in navigator) {\n            var tracking = this.getTracking();\n            if (tracking && this.watchId_ === undefined) {\n                this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n            }\n            else if (!tracking && this.watchId_ !== undefined) {\n                navigator.geolocation.clearWatch(this.watchId_);\n                this.watchId_ = undefined;\n            }\n        }\n    };\n    /**\n     * @private\n     * @param {GeolocationPosition} position position event.\n     */\n    Geolocation.prototype.positionChange_ = function (position) {\n        var coords = position.coords;\n        this.set(Property.ACCURACY, coords.accuracy);\n        this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n        this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n        this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n        if (!this.position_) {\n            this.position_ = [coords.longitude, coords.latitude];\n        }\n        else {\n            this.position_[0] = coords.longitude;\n            this.position_[1] = coords.latitude;\n        }\n        var projectedPosition = this.transform_(this.position_);\n        this.set(Property.POSITION, projectedPosition);\n        this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n        var geometry = circularPolygon(this.position_, coords.accuracy);\n        geometry.applyTransform(this.transform_);\n        this.set(Property.ACCURACY_GEOMETRY, geometry);\n        this.changed();\n    };\n    /**\n     * @private\n     * @param {GeolocationPositionError} error error object.\n     */\n    Geolocation.prototype.positionError_ = function (error) {\n        this.dispatchEvent(new GeolocationError(error));\n    };\n    /**\n     * Get the accuracy of the position in meters.\n     * @return {number|undefined} The accuracy of the position measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAccuracy = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n    };\n    /**\n     * Get a geometry of the position accuracy.\n     * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAccuracyGeometry = function () {\n        return /** @type {?import(\"./geom/Polygon.js\").default} */ (this.get(Property.ACCURACY_GEOMETRY) || null);\n    };\n    /**\n     * Get the altitude associated with the position.\n     * @return {number|undefined} The altitude of the position in meters above mean\n     *     sea level.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAltitude = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n    };\n    /**\n     * Get the altitude accuracy of the position.\n     * @return {number|undefined} The accuracy of the altitude measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getAltitudeAccuracy = function () {\n        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE_ACCURACY));\n    };\n    /**\n     * Get the heading as radians clockwise from North.\n     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n     * is set to `true` in the tracking options.\n     * @return {number|undefined} The heading of the device in radians from north.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getHeading = function () {\n        return /** @type {number|undefined} */ (this.get(Property.HEADING));\n    };\n    /**\n     * Get the position of the device.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n     *     in the current projection.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the projection associated with the position.\n     * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getProjection = function () {\n        return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (this.get(Property.PROJECTION));\n    };\n    /**\n     * Get the speed in meters per second.\n     * @return {number|undefined} The instantaneous speed of the device in meters\n     *     per second.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getSpeed = function () {\n        return /** @type {number|undefined} */ (this.get(Property.SPEED));\n    };\n    /**\n     * Determine if the device location is being tracked.\n     * @return {boolean} The device location is being tracked.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getTracking = function () {\n        return /** @type {boolean} */ (this.get(Property.TRACKING));\n    };\n    /**\n     * Get the tracking options.\n     * See https://www.w3.org/TR/geolocation-API/#position-options.\n     * @return {PositionOptions|undefined} PositionOptions as defined by\n     *     the [HTML5 Geolocation spec\n     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.getTrackingOptions = function () {\n        return /** @type {PositionOptions|undefined} */ (this.get(Property.TRACKING_OPTIONS));\n    };\n    /**\n     * Set the projection to use for transforming the coordinates.\n     * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setProjection = function (projection) {\n        this.set(Property.PROJECTION, getProjection(projection));\n    };\n    /**\n     * Enable or disable tracking.\n     * @param {boolean} tracking Enable tracking.\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setTracking = function (tracking) {\n        this.set(Property.TRACKING, tracking);\n    };\n    /**\n     * Set the tracking options.\n     * See http://www.w3.org/TR/geolocation-API/#position-options.\n     * @param {PositionOptions} options PositionOptions as defined by the\n     *     [HTML5 Geolocation spec\n     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n    Geolocation.prototype.setTrackingOptions = function (options) {\n        this.set(Property.TRACKING_OPTIONS, options);\n    };\n    return Geolocation;\n}(BaseObject));\nexport default Geolocation;\n"]},"metadata":{},"sourceType":"module"}