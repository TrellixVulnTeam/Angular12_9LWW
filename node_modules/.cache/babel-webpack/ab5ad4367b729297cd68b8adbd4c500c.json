{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\n\n\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {import(\"./OverlayPositioning.js\").default} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\n\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\n\nvar Overlay = function (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n\n\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n\n    _this.on;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n\n    _this.once;\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n\n    _this.un;\n    /**\n     * @protected\n     * @type {Options}\n     */\n\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n    var autoPan = options.autoPan;\n\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n\n\n    _this.autoPan =\n    /** @type {PanIntoViewOptions} */\n    autoPan || false;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n\n    _this.mapPostrenderListenerKey = null;\n\n    _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n\n    _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n\n    _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n\n    _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n\n    _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    _this.setPositioning(options.positioning !== undefined ? options.positioning : OverlayPositioning.TOP_LEFT);\n\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getElement = function () {\n    return this.get(Property.ELEMENT);\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n\n\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getMap = function () {\n    return this.get(Property.MAP);\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getOffset = function () {\n    return this.get(Property.OFFSET);\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPosition = function () {\n    return this.get(Property.POSITION);\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {import(\"./OverlayPositioning.js\").default} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.getPositioning = function () {\n    return this.get(Property.POSITIONING);\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n\n    var map = this.getMap();\n\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n\n      this.performAutoPan();\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  };\n  /**\n   * @protected\n   */\n\n\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n\n\n  Overlay.prototype.performAutoPan = function () {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n   * @api\n   */\n\n\n  Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n    var map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var panIntoViewOptions = opt_panIntoViewOptions || {};\n    var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center = map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n\n        if (!centerPx) {\n          return;\n        }\n\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        var panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n\n\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {import(\"./OverlayPositioning.js\").default} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n\n\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n\n\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n\n\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n\n\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var x = Math.round(pixel[0] + offset[0]) + 'px';\n    var y = Math.round(pixel[1] + offset[1]) + 'px';\n    var posX = '0%';\n    var posY = '0%';\n\n    if (positioning == OverlayPositioning.BOTTOM_RIGHT || positioning == OverlayPositioning.CENTER_RIGHT || positioning == OverlayPositioning.TOP_RIGHT) {\n      posX = '-100%';\n    } else if (positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.TOP_CENTER) {\n      posX = '-50%';\n    }\n\n    if (positioning == OverlayPositioning.BOTTOM_LEFT || positioning == OverlayPositioning.BOTTOM_CENTER || positioning == OverlayPositioning.BOTTOM_RIGHT) {\n      posY = '-100%';\n    } else if (positioning == OverlayPositioning.CENTER_LEFT || positioning == OverlayPositioning.CENTER_CENTER || positioning == OverlayPositioning.CENTER_RIGHT) {\n      posY = '-50%';\n    }\n\n    var transform = \"translate(\" + posX + \", \" + posY + \") translate(\" + x + \", \" + y + \")\";\n\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform; // @ts-ignore IE9\n\n      style.msTransform = transform;\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n\n\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  return Overlay;\n}(BaseObject);\n\nexport default Overlay;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/Overlay.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","BaseObject","MapEventType","OverlayPositioning","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","_super","options","_this","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","TOP_LEFT","setPosition","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","BOTTOM_RIGHT","CENTER_RIGHT","TOP_RIGHT","BOTTOM_CENTER","CENTER_CENTER","TOP_CENTER","BOTTOM_LEFT","CENTER_LEFT","transform","msTransform","getOptions"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIC,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EAAgDN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAFrG;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnB,QAAI,OAAOA,CAAP,KAAa,UAAb,IAA2BA,CAAC,KAAK,IAArC,EACI,MAAM,IAAIS,SAAJ,CAAc,yBAAyBC,MAAM,CAACV,CAAD,CAA/B,GAAqC,+BAAnD,CAAN;AACJF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASW,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBb,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACO,SAAF,GAAcN,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACY,MAAP,CAAcb,CAAd,CAAb,IAAiCW,EAAE,CAACL,SAAH,GAAeN,CAAC,CAACM,SAAjB,EAA4B,IAAIK,EAAJ,EAA7D,CAAd;AACH,GAND;AAOH,CAd2C,EAA5C;AAeA;AACA;AACA;;;AACA,OAAOG,UAAP,MAAuB,aAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,aAAtC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,cAAlC,EAAkDC,UAAlD,QAAoE,UAApE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,OAAO,EAAE,SADE;AAEXC,EAAAA,GAAG,EAAE,KAFM;AAGXC,EAAAA,MAAM,EAAE,QAHG;AAIXC,EAAAA,QAAQ,EAAE,UAJC;AAKXC,EAAAA,WAAW,EAAE;AALF,CAAf;AAOA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAkB,UAAUC,MAAV,EAAkB;AAC3CnC,EAAAA,SAAS,CAACkC,OAAD,EAAUC,MAAV,CAAT;AACA;AACJ;AACA;;;AACI,WAASD,OAAT,CAAiBE,OAAjB,EAA0B;AACtB,QAAIC,KAAK,GAAGF,MAAM,CAACxB,IAAP,CAAY,IAAZ,KAAqB,IAAjC;AACA;AACR;AACA;;;AACQ0B,IAAAA,KAAK,CAACC,EAAN;AACA;AACR;AACA;;AACQD,IAAAA,KAAK,CAACE,IAAN;AACA;AACR;AACA;;AACQF,IAAAA,KAAK,CAACG,EAAN;AACA;AACR;AACA;AACA;;AACQH,IAAAA,KAAK,CAACD,OAAN,GAAgBA,OAAhB;AACA;AACR;AACA;AACA;;AACQC,IAAAA,KAAK,CAACI,EAAN,GAAWL,OAAO,CAACK,EAAnB;AACA;AACR;AACA;AACA;;AACQJ,IAAA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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport OverlayPositioning from './OverlayPositioning.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {import(\"./OverlayPositioning.js\").default} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning',\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {OverlayOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst =\n            options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className =\n            options.className !== undefined\n                ? options.className\n                : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        _this.element.style.pointerEvents = 'auto';\n        var autoPan = options.autoPan;\n        if (autoPan && 'object' !== typeof autoPan) {\n            autoPan = {\n                animation: options.autoPanAnimation,\n                margin: options.autoPanMargin,\n            };\n        }\n        /**\n         * @protected\n         * @type {PanIntoViewOptions|false}\n         */\n        _this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n        /**\n         * @protected\n         * @type {{transform_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            transform_: '',\n            visible: true,\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n        _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning !== undefined\n            ? /** @type {import(\"./OverlayPositioning.js\").default} */ (options.positioning)\n            : OverlayPositioning.TOP_LEFT);\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|undefined} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return /** @type {import(\"./PluggableMap.js\").default|undefined} */ (this.get(Property.MAP));\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {import(\"./OverlayPositioning.js\").default} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return /** @type {import(\"./OverlayPositioning.js\").default} */ (this.get(Property.POSITIONING));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent\n                ? map.getOverlayContainerStopEvent()\n                : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n            this.performAutoPan();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|undefined} map The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n    Overlay.prototype.performAutoPan = function () {\n        if (this.autoPan) {\n            this.panIntoView(this.autoPan);\n        }\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n     * @api\n     */\n    Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [\n            outerWidth(element),\n            outerHeight(element),\n        ]);\n        var panIntoViewOptions = opt_panIntoViewOptions || {};\n        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - myMargin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + myMargin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - myMargin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + myMargin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) {\n                    return;\n                }\n                var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n                var panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing,\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {import(\"./OverlayPositioning.js\").default} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var x = Math.round(pixel[0] + offset[0]) + 'px';\n        var y = Math.round(pixel[1] + offset[1]) + 'px';\n        var posX = '0%';\n        var posY = '0%';\n        if (positioning == OverlayPositioning.BOTTOM_RIGHT ||\n            positioning == OverlayPositioning.CENTER_RIGHT ||\n            positioning == OverlayPositioning.TOP_RIGHT) {\n            posX = '-100%';\n        }\n        else if (positioning == OverlayPositioning.BOTTOM_CENTER ||\n            positioning == OverlayPositioning.CENTER_CENTER ||\n            positioning == OverlayPositioning.TOP_CENTER) {\n            posX = '-50%';\n        }\n        if (positioning == OverlayPositioning.BOTTOM_LEFT ||\n            positioning == OverlayPositioning.BOTTOM_CENTER ||\n            positioning == OverlayPositioning.BOTTOM_RIGHT) {\n            posY = '-100%';\n        }\n        else if (positioning == OverlayPositioning.CENTER_LEFT ||\n            positioning == OverlayPositioning.CENTER_CENTER ||\n            positioning == OverlayPositioning.CENTER_RIGHT) {\n            posY = '-50%';\n        }\n        var transform = \"translate(\" + posX + \", \" + posY + \") translate(\" + x + \", \" + y + \")\";\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n            // @ts-ignore IE9\n            style.msTransform = transform;\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}