{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nclass MatAutocompleteSelectedEvent {\n  constructor(\n  /** Reference to the autocomplete panel that emitted the event. */\n  source,\n  /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n\n} // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nconst _MatAutocompleteMixinBase = /*#__PURE__*/mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nlet _MatAutocompleteBase = /*#__PURE__*/(() => {\n  class _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n      super();\n      this._changeDetectorRef = _changeDetectorRef;\n      this._elementRef = _elementRef;\n      this._activeOptionChanges = Subscription.EMPTY;\n      /** Whether the autocomplete panel should be visible, depending on option length. */\n\n      this.showPanel = false;\n      this._isOpen = false;\n      /** Function that maps an option's control value to its display value in the trigger. */\n\n      this.displayWith = null;\n      /** Event that is emitted whenever an option from the list is selected. */\n\n      this.optionSelected = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is opened. */\n\n      this.opened = new EventEmitter();\n      /** Event that is emitted when the autocomplete panel is closed. */\n\n      this.closed = new EventEmitter();\n      /** Emits whenever an option is activated using the keyboard. */\n\n      this.optionActivated = new EventEmitter();\n      this._classList = {};\n      /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n      this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`; // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n      // Safari using VoiceOver. We should occasionally check back to see whether the bug\n      // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n      // option altogether.\n\n      this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n      this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n\n\n    get isOpen() {\n      return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n\n\n    get autoActiveFirstOption() {\n      return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value) {\n      this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n\n\n    set classList(value) {\n      if (value && value.length) {\n        this._classList = coerceStringArray(value).reduce((classList, className) => {\n          classList[className] = true;\n          return classList;\n        }, {});\n      } else {\n        this._classList = {};\n      }\n\n      this._setVisibilityClasses(this._classList);\n\n      this._elementRef.nativeElement.className = '';\n    }\n\n    ngAfterContentInit() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n      this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n        if (this.isOpen) {\n          this.optionActivated.emit({\n            source: this,\n            option: this.options.toArray()[index] || null\n          });\n        }\n      }); // Set the initial visibility state.\n\n      this._setVisibility();\n    }\n\n    ngOnDestroy() {\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n\n\n    _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n\n\n    _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n\n\n    _setVisibility() {\n      this.showPanel = !!this.options.length;\n\n      this._setVisibilityClasses(this._classList);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n\n\n    _emitSelectEvent(option) {\n      const event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n\n\n    _getPanelAriaLabelledby(labelId) {\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n\n    _setVisibilityClasses(classList) {\n      classList[this._visibleClass] = this.showPanel;\n      classList[this._hiddenClass] = !this.showPanel;\n    }\n\n  }\n\n  _MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n    return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform));\n  };\n\n  _MatAutocompleteBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteBase,\n    viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      }\n    },\n    inputs: {\n      displayWith: \"displayWith\",\n      autoActiveFirstOption: \"autoActiveFirstOption\",\n      classList: [\"class\", \"classList\"],\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      panelWidth: \"panelWidth\"\n    },\n    outputs: {\n      optionSelected: \"optionSelected\",\n      opened: \"opened\",\n      closed: \"closed\",\n      optionActivated: \"optionActivated\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatAutocompleteBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatAutocomplete = /*#__PURE__*/(() => {\n  class MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n      super(...arguments);\n      this._visibleClass = 'mat-autocomplete-visible';\n      this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n\n  }\n\n  MatAutocomplete.ɵfac = /*@__PURE__*/function () {\n    let ɵMatAutocomplete_BaseFactory;\n    return function MatAutocomplete_Factory(t) {\n      return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n    };\n  }();\n\n  MatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatAutocomplete,\n    selectors: [[\"mat-autocomplete\"]],\n    contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-autocomplete\"],\n    inputs: {\n      disableRipple: \"disableRipple\"\n    },\n    exportAs: [\"matAutocomplete\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n    template: function MatAutocomplete_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatAutocomplete;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nlet _MatAutocompleteOriginBase = /*#__PURE__*/(() => {\n  class _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  _MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n    return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  _MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteOriginBase\n  });\n  return _MatAutocompleteOriginBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nlet MatAutocompleteOrigin = /*#__PURE__*/(() => {\n  class MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n\n  MatAutocompleteOrigin.ɵfac = /*@__PURE__*/function () {\n    let ɵMatAutocompleteOrigin_BaseFactory;\n    return function MatAutocompleteOrigin_Factory(t) {\n      return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n    };\n  }();\n\n  MatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAutocompleteOrigin,\n    selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n    exportAs: [\"matAutocompleteOrigin\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteOrigin;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nlet _MatAutocompleteTriggerBase = /*#__PURE__*/(() => {\n  class _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n      this._element = _element;\n      this._overlay = _overlay;\n      this._viewContainerRef = _viewContainerRef;\n      this._zone = _zone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dir = _dir;\n      this._formField = _formField;\n      this._document = _document;\n      this._viewportRuler = _viewportRuler;\n      this._defaults = _defaults;\n      this._componentDestroyed = false;\n      this._autocompleteDisabled = false;\n      /** Whether or not the label state is being overridden. */\n\n      this._manuallyFloatingLabel = false;\n      /** Subscription to viewport size changes. */\n\n      this._viewportSubscription = Subscription.EMPTY;\n      /**\n       * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n       * closed autocomplete from being reopened if the user switches to another browser tab and then\n       * comes back.\n       */\n\n      this._canOpenOnNextFocus = true;\n      /** Stream of keyboard events that can close the panel. */\n\n      this._closeKeyEventStream = new Subject();\n      /**\n       * Event handler for when the window is blurred. Needs to be an\n       * arrow function in order to preserve the context.\n       */\n\n      this._windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n      };\n      /** `View -> model callback called when value changes` */\n\n\n      this._onChange = () => {};\n      /** `View -> model callback called when autocomplete has been touched` */\n\n\n      this._onTouched = () => {};\n      /**\n       * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n       * will render the panel underneath the trigger if there is enough space for it to fit in\n       * the viewport, otherwise the panel will be shown above it. If the position is set to\n       * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n       * whether it fits completely in the viewport.\n       */\n\n\n      this.position = 'auto';\n      /**\n       * `autocomplete` attribute to be set on the input element.\n       * @docs-private\n       */\n\n      this.autocompleteAttribute = 'off';\n      this._overlayAttached = false;\n      /** Stream of autocomplete option selections. */\n\n      this.optionSelections = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n          return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n        } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n\n\n        return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n      });\n      this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n\n\n    get autocompleteDisabled() {\n      return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value) {\n      this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    ngAfterViewInit() {\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      const window = this._getWindow();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('blur', this._windowBlurHandler);\n      }\n\n      this._viewportSubscription.unsubscribe();\n\n      this._componentDestroyed = true;\n\n      this._destroyPanel();\n\n      this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n\n\n    get panelOpen() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n\n\n    openPanel() {\n      this._attachOverlay();\n\n      this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n\n\n    closePanel() {\n      this._resetLabel();\n\n      if (!this._overlayAttached) {\n        return;\n      }\n\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        this.autocomplete.closed.emit();\n      }\n\n      this.autocomplete._isOpen = this._overlayAttached = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n\n        this._closingActionsSubscription.unsubscribe();\n      } // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n\n\n    updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n\n\n    get panelClosingActions() {\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n\n\n    get activeOption() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n\n      return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n\n\n    _getOutsideClickStream() {\n      return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n        // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n        // fall back to check the first element in the path of the click event.\n        const clickTarget = _getEventTarget(event);\n\n        const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n        const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n        return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n      }));\n    } // Implemented as part of ControlValueAccessor.\n\n\n    writeValue(value) {\n      Promise.resolve(null).then(() => this._setTriggerValue(value));\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n\n    _handleKeydown(event) {\n      const keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n\n      if (keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n      }\n\n      if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n        this.activeOption._selectViaInteraction();\n\n        this._resetActiveItem();\n\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        const prevActiveItem = this.autocomplete._keyManager.activeItem;\n        const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n        if (this.panelOpen || keyCode === TAB) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this.openPanel();\n        }\n\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n        }\n      }\n    }\n\n    _handleInput(event) {\n      let target = event.target;\n      let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      } // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n\n        this._onChange(value);\n\n        if (this._canOpen() && this._document.activeElement === event.target) {\n          this.openPanel();\n        }\n      }\n    }\n\n    _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n\n        this._attachOverlay();\n\n        this._floatLabel(true);\n      }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n\n\n    _floatLabel(shouldAnimate = false) {\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n\n\n    _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        this._formField.floatLabel = 'auto';\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n\n\n    _subscribeToClosingActions() {\n      const firstStable = this._zone.onStable.pipe(take(1));\n\n      const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)); // When the zone is stable initially, and when the option list changes...\n\n      return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(() => {\n        const wasOpen = this.panelOpen;\n\n        this._resetActiveItem();\n\n        this.autocomplete._setVisibility();\n\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n\n\n          if (wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n          }\n        }\n\n        return this.panelClosingActions;\n      }), // when the first closing event occurs...\n      take(1)) // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n\n\n    _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n    }\n\n    _setTriggerValue(value) {\n      const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n      const inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n\n      if (this._formField) {\n        this._formField._control.value = inputValue;\n      } else {\n        this._element.nativeElement.value = inputValue;\n      }\n\n      this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n\n\n    _setValueAndClose(event) {\n      if (event && event.source) {\n        this._clearPreviousSelectedOption(event.source);\n\n        this._setTriggerValue(event.source.value);\n\n        this._onChange(event.source.value);\n\n        this._element.nativeElement.focus();\n\n        this.autocomplete._emitSelectEvent(event.source);\n      }\n\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n\n\n    _clearPreviousSelectedOption(skip) {\n      this.autocomplete.options.forEach(option => {\n        if (option !== skip && option.selected) {\n          option.deselect();\n        }\n      });\n    }\n\n    _attachOverlay() {\n      var _a;\n\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      }\n\n      let overlayRef = this._overlayRef;\n\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n          id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n        });\n        overlayRef = this._overlay.create(this._getOverlayConfig());\n        this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n        // the overlay event targeting provided by the CDK overlay.\n\n        overlayRef.keydownEvents().subscribe(event => {\n          // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n          // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n          if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n            this._closeKeyEventStream.next();\n\n            this._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        });\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n\n      const wasOpen = this.panelOpen;\n\n      this.autocomplete._setVisibility();\n\n      this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this.autocomplete.opened.emit();\n      }\n    }\n\n    _getOverlayConfig() {\n      var _a;\n\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir,\n        panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n      });\n    }\n\n    _getOverlayPosition() {\n      const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n      this._setStrategyPositions(strategy);\n\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n\n\n    _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      const belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }]; // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n\n      const panelClass = this._aboveClass;\n      const abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass\n      }];\n      let positions;\n\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [...belowPositions, ...abovePositions];\n      }\n\n      positionStrategy.withPositions(positions);\n    }\n\n    _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n\n    _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n\n\n    _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n\n\n    _resetActiveItem() {\n      const autocomplete = this.autocomplete;\n\n      if (autocomplete.autoActiveFirstOption) {\n        // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n        // the former will find the next enabled option, if the first one is disabled.\n        autocomplete._keyManager.setFirstItemActive();\n      } else {\n        autocomplete._keyManager.setActiveItem(-1);\n      }\n    }\n    /** Determines whether the panel can be opened. */\n\n\n    _canOpen() {\n      const element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n    _getWindow() {\n      var _a;\n\n      return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n\n\n    _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      const autocomplete = this.autocomplete;\n\n      const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else if (autocomplete.panel) {\n        const option = autocomplete.options.toArray()[index];\n\n        if (option) {\n          const element = option._getHostElement();\n\n          const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n\n  }\n\n  _MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n    return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n  };\n\n  _MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatAutocompleteTriggerBase,\n    inputs: {\n      position: [\"matAutocompletePosition\", \"position\"],\n      autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n      autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n      autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n      connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return _MatAutocompleteTriggerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatAutocompleteTrigger = /*#__PURE__*/(() => {\n  class MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n      super(...arguments);\n      this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n\n  }\n\n  MatAutocompleteTrigger.ɵfac = /*@__PURE__*/function () {\n    let ɵMatAutocompleteTrigger_BaseFactory;\n    return function MatAutocompleteTrigger_Factory(t) {\n      return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n    };\n  }();\n\n  MatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatAutocompleteTrigger,\n    selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n    hostAttrs: [1, \"mat-autocomplete-trigger\"],\n    hostVars: 7,\n    hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n          return ctx._onTouched();\n        })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n          return ctx._handleInput($event);\n        })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n      }\n    },\n    exportAs: [\"matAutocompleteTrigger\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatAutocompleteTrigger;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatAutocompleteModule = /*#__PURE__*/(() => {\n  class MatAutocompleteModule {}\n\n  MatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n    return new (t || MatAutocompleteModule)();\n  };\n\n  MatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatAutocompleteModule\n  });\n  MatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n  });\n  return MatAutocompleteModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function () {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@angular/material/fesm2015/autocomplete.js"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getEventTarget","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ngDevMode","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_MatAutocompleteTriggerBase_Factory","ɵɵNgOnChangesFeature","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._closeKeyEventStream.next();\n                    this._resetActiveItem();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n"]},"metadata":{},"sourceType":"module"}