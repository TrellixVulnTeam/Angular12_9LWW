{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserProtocolUtils = function () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n\n\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n\n\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n\n  return BrowserProtocolUtils;\n}();\n\nexport { BrowserProtocolUtils };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.js"],"names":["StringUtils","ProtocolUtils","ClientAuthError","UrlString","BrowserProtocolUtils","extractBrowserRequestState","browserCrypto","state","isEmpty","requestStateObj","parseRequestState","libraryState","meta","e","createInvalidStateError","parseServerResponseFromHash","locationHash","hashUrlString","getDeserializedHash","getHash"],"mappings":"AAAA;AACA;;AACA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,eAArC,EAAsDC,SAAtD,QAAuE,oBAAvE;AAEA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAkB,YAAY;AAClD,WAASA,oBAAT,GAAgC,CAC/B;AACD;AACJ;AACA;AACA;AACA;;;AACIA,EAAAA,oBAAoB,CAACC,0BAArB,GAAkD,UAAUC,aAAV,EAAyBC,KAAzB,EAAgC;AAC9E,QAAIP,WAAW,CAACQ,OAAZ,CAAoBD,KAApB,CAAJ,EAAgC;AAC5B,aAAO,IAAP;AACH;;AACD,QAAI;AACA,UAAIE,eAAe,GAAGR,aAAa,CAACS,iBAAd,CAAgCJ,aAAhC,EAA+CC,KAA/C,CAAtB;AACA,aAAOE,eAAe,CAACE,YAAhB,CAA6BC,IAApC;AACH,KAHD,CAIA,OAAOC,CAAP,EAAU;AACN,YAAMX,eAAe,CAACY,uBAAhB,CAAwCP,KAAxC,EAA+CM,CAA/C,CAAN;AACH;AACJ,GAXD;AAYA;AACJ;AACA;AACA;;;AACIT,EAAAA,oBAAoB,CAACW,2BAArB,GAAmD,UAAUC,YAAV,EAAwB;AACvE,QAAI,CAACA,YAAL,EAAmB;AACf,aAAO,EAAP;AACH;;AACD,QAAIC,aAAa,GAAG,IAAId,SAAJ,CAAca,YAAd,CAApB;AACA,WAAOb,SAAS,CAACe,mBAAV,CAA8BD,aAAa,CAACE,OAAd,EAA9B,CAAP;AACH,GAND;;AAOA,SAAOf,oBAAP;AACH,CAhCyC,EAA1C;;AAkCA,SAASA,oBAAT","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar BrowserProtocolUtils = /** @class */ (function () {\r\n    function BrowserProtocolUtils() {\r\n    }\r\n    /**\r\n     * Extracts the BrowserStateObject from the state string.\r\n     * @param browserCrypto\r\n     * @param state\r\n     */\r\n    BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\r\n        if (StringUtils.isEmpty(state)) {\r\n            return null;\r\n        }\r\n        try {\r\n            var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\r\n            return requestStateObj.libraryState.meta;\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    };\r\n    /**\r\n     * Parses properties of server response from url hash\r\n     * @param locationHash Hash from url\r\n     */\r\n    BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\r\n        if (!locationHash) {\r\n            return {};\r\n        }\r\n        var hashUrlString = new UrlString(locationHash);\r\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\r\n    };\r\n    return BrowserProtocolUtils;\r\n}());\n\nexport { BrowserProtocolUtils };\n"]},"metadata":{},"sourceType":"module"}