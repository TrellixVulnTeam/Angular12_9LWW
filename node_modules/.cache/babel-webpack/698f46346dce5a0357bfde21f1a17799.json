{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar EventHandler = function () {\n  function EventHandler(logger, browserCrypto) {\n    this.eventCallbacks = new Map();\n    this.logger = logger;\n    this.browserCrypto = browserCrypto;\n  }\n  /**\r\n   * Adds event callbacks to array\r\n   * @param callback\r\n   */\n\n\n  EventHandler.prototype.addEventCallback = function (callback) {\n    if (typeof window !== \"undefined\") {\n      var callbackId = this.browserCrypto.createNewGuid();\n      this.eventCallbacks.set(callbackId, callback);\n      this.logger.verbose(\"Event callback registered with id: \" + callbackId);\n      return callbackId;\n    }\n\n    return null;\n  };\n  /**\r\n   * Removes callback with provided id from callback array\r\n   * @param callbackId\r\n   */\n\n\n  EventHandler.prototype.removeEventCallback = function (callbackId) {\n    this.eventCallbacks.delete(callbackId);\n    this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\n  };\n  /**\r\n   * Emits events by calling callback with event message\r\n   * @param eventType\r\n   * @param interactionType\r\n   * @param payload\r\n   * @param error\r\n   */\n\n\n  EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\n    var _this = this;\n\n    if (typeof window !== \"undefined\") {\n      var message_1 = {\n        eventType: eventType,\n        interactionType: interactionType || null,\n        payload: payload || null,\n        error: error || null,\n        timestamp: Date.now()\n      };\n      this.logger.info(\"Emitting event: \" + eventType);\n      this.eventCallbacks.forEach(function (callback, callbackId) {\n        _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\n\n        callback.apply(null, [message_1]);\n      });\n    }\n  };\n\n  return EventHandler;\n}();\n\nexport { EventHandler };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@azure/msal-browser/dist/event/EventHandler.js"],"names":["EventHandler","logger","browserCrypto","eventCallbacks","Map","prototype","addEventCallback","callback","window","callbackId","createNewGuid","set","verbose","removeEventCallback","delete","emitEvent","eventType","interactionType","payload","error","_this","message_1","timestamp","Date","now","info","forEach","apply"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,YAAY,GAAkB,YAAY;AAC1C,WAASA,YAAT,CAAsBC,MAAtB,EAA8BC,aAA9B,EAA6C;AACzC,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACH;AACD;AACJ;AACA;AACA;;;AACIF,EAAAA,YAAY,CAACK,SAAb,CAAuBC,gBAAvB,GAA0C,UAAUC,QAAV,EAAoB;AAC1D,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAIC,UAAU,GAAG,KAAKP,aAAL,CAAmBQ,aAAnB,EAAjB;AACA,WAAKP,cAAL,CAAoBQ,GAApB,CAAwBF,UAAxB,EAAoCF,QAApC;AACA,WAAKN,MAAL,CAAYW,OAAZ,CAAoB,wCAAwCH,UAA5D;AACA,aAAOA,UAAP;AACH;;AACD,WAAO,IAAP;AACH,GARD;AASA;AACJ;AACA;AACA;;;AACIT,EAAAA,YAAY,CAACK,SAAb,CAAuBQ,mBAAvB,GAA6C,UAAUJ,UAAV,EAAsB;AAC/D,SAAKN,cAAL,CAAoBW,MAApB,CAA2BL,UAA3B;AACA,SAAKR,MAAL,CAAYW,OAAZ,CAAoB,oBAAoBH,UAApB,GAAiC,WAArD;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,YAAY,CAACK,SAAb,CAAuBU,SAAvB,GAAmC,UAAUC,SAAV,EAAqBC,eAArB,EAAsCC,OAAtC,EAA+CC,KAA/C,EAAsD;AACrF,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,OAAOZ,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAIa,SAAS,GAAG;AACZL,QAAAA,SAAS,EAAEA,SADC;AAEZC,QAAAA,eAAe,EAAEA,eAAe,IAAI,IAFxB;AAGZC,QAAAA,OAAO,EAAEA,OAAO,IAAI,IAHR;AAIZC,QAAAA,KAAK,EAAEA,KAAK,IAAI,IAJJ;AAKZG,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AALC,OAAhB;AAOA,WAAKvB,MAAL,CAAYwB,IAAZ,CAAiB,qBAAqBT,SAAtC;AACA,WAAKb,cAAL,CAAoBuB,OAApB,CAA4B,UAAUnB,QAAV,EAAoBE,UAApB,EAAgC;AACxDW,QAAAA,KAAK,CAACnB,MAAN,CAAaW,OAAb,CAAqB,gCAAgCH,UAAhC,GAA6C,IAA7C,GAAoDO,SAAzE;;AACAT,QAAAA,QAAQ,CAACoB,KAAT,CAAe,IAAf,EAAqB,CAACN,SAAD,CAArB;AACH,OAHD;AAIH;AACJ,GAhBD;;AAiBA,SAAOrB,YAAP;AACH,CApDiC,EAAlC;;AAsDA,SAASA,YAAT","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar EventHandler = /** @class */ (function () {\r\n    function EventHandler(logger, browserCrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n    }\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    EventHandler.prototype.addEventCallback = function (callback) {\r\n        if (typeof window !== \"undefined\") {\r\n            var callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(\"Event callback registered with id: \" + callbackId);\r\n            return callbackId;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    EventHandler.prototype.removeEventCallback = function (callbackId) {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(\"Event callback \" + callbackId + \" removed.\");\r\n    };\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {\r\n        var _this = this;\r\n        if (typeof window !== \"undefined\") {\r\n            var message_1 = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n            this.logger.info(\"Emitting event: \" + eventType);\r\n            this.eventCallbacks.forEach(function (callback, callbackId) {\r\n                _this.logger.verbose(\"Emitting event to callback \" + callbackId + \": \" + eventType);\r\n                callback.apply(null, [message_1]);\r\n            });\r\n        }\r\n    };\r\n    return EventHandler;\r\n}());\n\nexport { EventHandler };\n"]},"metadata":{},"sourceType":"module"}