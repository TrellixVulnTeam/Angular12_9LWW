{"ast":null,"code":"/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { DatabaseStorage } from '../cache/DatabaseStorage.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps = function () {\n  function CryptoOps() {\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto();\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(publicJwkString)];\n\n          case 3:\n            publicJwkBuffer = _a.sent();\n            publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _a.sent(); // Store Keypair data in keystore\n\n            this.cache.put(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            });\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.get(kid)];\n\n          case 1:\n            cachedKeyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            header = {\n              alg: publicKeyJwk.alg,\n              type: KEY_FORMAT_JWK\n            };\n            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header)); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _a.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            return [2\n            /*return*/\n            , tokenString + \".\" + encodedSignature];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  CryptoOps.DB_VERSION = 1;\n  CryptoOps.DB_NAME = \"msal.db\";\n  CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + \".keys\";\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js"],"names":["__awaiter","__generator","GuidGenerator","Base64Encode","Base64Decode","PkceGenerator","BrowserCrypto","DatabaseStorage","BrowserStringUtils","KEY_FORMAT_JWK","CryptoOps","browserCrypto","b64Encode","b64Decode","guidGenerator","pkceGenerator","cache","DB_NAME","TABLE_NAME","DB_VERSION","prototype","createNewGuid","generateGuid","base64Encode","input","encode","base64Decode","decode","generatePkceCodes","_a","generateCodes","getPublicKeyThumbprint","request","keyPair","publicKeyJwk","pubKeyThumprintObj","publicJwkString","publicJwkBuffer","publicJwkHash","privateKeyJwk","unextractablePrivateKey","label","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","sent","exportJwk","publicKey","e","kty","n","getJwkString","sha256Digest","urlEncodeArr","Uint8Array","privateKey","importJwk","put","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","signJwt","payload","kid","cachedKeyPair","publicKeyJwkString","header","encodedHeader","encodedPayload","tokenString","tokenBuffer","signatureBuffer","encodedSignature","get","alg","type","urlEncode","JSON","stringify","cnf","jwk","parse","stringToArrayBuffer","sign"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.16.1 2021-08-02 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { DatabaseStorage } from '../cache/DatabaseStorage.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nvar CryptoOps = /** @class */ (function () {\r\n    function CryptoOps() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto();\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoOps.prototype.createNewGuid = function () {\r\n        return this.guidGenerator.generateGuid();\r\n    };\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Encode = function (input) {\r\n        return this.b64Encode.encode(input);\r\n    };\r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Decode = function (input) {\r\n        return this.b64Decode.decode(input);\r\n    };\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    CryptoOps.prototype.generatePkceCodes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.pkceGenerator.generateCodes()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\r\n                    case 1:\r\n                        keyPair = _a.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _a.sent();\r\n                        pubKeyThumprintObj = {\r\n                            e: publicKeyJwk.e,\r\n                            kty: publicKeyJwk.kty,\r\n                            n: publicKeyJwk.n\r\n                        };\r\n                        publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\r\n                        return [4 /*yield*/, this.browserCrypto.sha256Digest(publicJwkString)];\r\n                    case 3:\r\n                        publicJwkBuffer = _a.sent();\r\n                        publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\r\n                    case 4:\r\n                        privateKeyJwk = _a.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\r\n                    case 5:\r\n                        unextractablePrivateKey = _a.sent();\r\n                        // Store Keypair data in keystore\r\n                        this.cache.put(publicJwkHash, {\r\n                            privateKey: unextractablePrivateKey,\r\n                            publicKey: keyPair.publicKey,\r\n                            requestMethod: request.resourceRequestMethod,\r\n                            requestUri: request.resourceRequestUri\r\n                        });\r\n                        return [2 /*return*/, publicJwkHash];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload\r\n     * @param kid\r\n     */\r\n    CryptoOps.prototype.signJwt = function (payload, kid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cache.get(kid)];\r\n                    case 1:\r\n                        cachedKeyPair = _a.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _a.sent();\r\n                        publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\r\n                        header = {\r\n                            alg: publicKeyJwk.alg,\r\n                            type: KEY_FORMAT_JWK\r\n                        };\r\n                        encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\r\n                        // Generate payload\r\n                        payload.cnf = {\r\n                            jwk: JSON.parse(publicKeyJwkString)\r\n                        };\r\n                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n                        tokenString = encodedHeader + \".\" + encodedPayload;\r\n                        tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n                        return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\r\n                    case 3:\r\n                        signatureBuffer = _a.sent();\r\n                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n                        return [2 /*return*/, tokenString + \".\" + encodedSignature];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\r\n    CryptoOps.EXTRACTABLE = true;\r\n    CryptoOps.DB_VERSION = 1;\r\n    CryptoOps.DB_NAME = \"msal.db\";\r\n    CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + \".keys\";\r\n    return CryptoOps;\r\n}());\n\nexport { CryptoOps };\n"]},"metadata":{},"sourceType":"module"}