{"ast":null,"code":"import clone from \"@turf/clone\";\nimport distance from \"@turf/distance\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Takes a reference {@link Point|point} and a FeatureCollection of Features\n * with Point geometries and returns the\n * point from the FeatureCollection closest to the reference. This calculation\n * is geodesic.\n *\n * @name nearestPoint\n * @param {Coord} targetPoint the reference point\n * @param {FeatureCollection<Point>} points against input point set\n * @returns {Feature<Point>} the closest point in the set to the reference point\n * @example\n * var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\n * var points = turf.featureCollection([\n *     turf.point([28.973865, 41.011122]),\n *     turf.point([28.948459, 41.024204]),\n *     turf.point([28.938674, 41.013324])\n * ]);\n *\n * var nearest = turf.nearestPoint(targetPoint, points);\n *\n * //addToMap\n * var addToMap = [targetPoint, points, nearest];\n * nearest.properties['marker-color'] = '#F00';\n */\n\nfunction nearestPoint(targetPoint, points) {\n  // Input validation\n  if (!targetPoint) throw new Error(\"targetPoint is required\");\n  if (!points) throw new Error(\"points is required\");\n  var nearest;\n  var minDist = Infinity;\n  var bestFeatureIndex = 0;\n  featureEach(points, function (pt, featureIndex) {\n    var distanceToPoint = distance(targetPoint, pt);\n\n    if (distanceToPoint < minDist) {\n      bestFeatureIndex = featureIndex;\n      minDist = distanceToPoint;\n    }\n  });\n  nearest = clone(points.features[bestFeatureIndex]);\n  nearest.properties.featureIndex = bestFeatureIndex;\n  nearest.properties.distanceToPoint = minDist;\n  return nearest;\n}\n\nexport default nearestPoint;","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@turf/nearest-point/dist/es/index.js"],"names":["clone","distance","featureEach","nearestPoint","targetPoint","points","Error","nearest","minDist","Infinity","bestFeatureIndex","pt","featureIndex","distanceToPoint","features","properties"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,MAAnC,EAA2C;AACvC;AACA,MAAI,CAACD,WAAL,EACI,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACJ,MAAI,CAACD,MAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACJ,MAAIC,OAAJ;AACA,MAAIC,OAAO,GAAGC,QAAd;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACAR,EAAAA,WAAW,CAACG,MAAD,EAAS,UAAUM,EAAV,EAAcC,YAAd,EAA4B;AAC5C,QAAIC,eAAe,GAAGZ,QAAQ,CAACG,WAAD,EAAcO,EAAd,CAA9B;;AACA,QAAIE,eAAe,GAAGL,OAAtB,EAA+B;AAC3BE,MAAAA,gBAAgB,GAAGE,YAAnB;AACAJ,MAAAA,OAAO,GAAGK,eAAV;AACH;AACJ,GANU,CAAX;AAOAN,EAAAA,OAAO,GAAGP,KAAK,CAACK,MAAM,CAACS,QAAP,CAAgBJ,gBAAhB,CAAD,CAAf;AACAH,EAAAA,OAAO,CAACQ,UAAR,CAAmBH,YAAnB,GAAkCF,gBAAlC;AACAH,EAAAA,OAAO,CAACQ,UAAR,CAAmBF,eAAnB,GAAqCL,OAArC;AACA,SAAOD,OAAP;AACH;;AACD,eAAeJ,YAAf","sourcesContent":["import clone from \"@turf/clone\";\nimport distance from \"@turf/distance\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Takes a reference {@link Point|point} and a FeatureCollection of Features\n * with Point geometries and returns the\n * point from the FeatureCollection closest to the reference. This calculation\n * is geodesic.\n *\n * @name nearestPoint\n * @param {Coord} targetPoint the reference point\n * @param {FeatureCollection<Point>} points against input point set\n * @returns {Feature<Point>} the closest point in the set to the reference point\n * @example\n * var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\n * var points = turf.featureCollection([\n *     turf.point([28.973865, 41.011122]),\n *     turf.point([28.948459, 41.024204]),\n *     turf.point([28.938674, 41.013324])\n * ]);\n *\n * var nearest = turf.nearestPoint(targetPoint, points);\n *\n * //addToMap\n * var addToMap = [targetPoint, points, nearest];\n * nearest.properties['marker-color'] = '#F00';\n */\nfunction nearestPoint(targetPoint, points) {\n    // Input validation\n    if (!targetPoint)\n        throw new Error(\"targetPoint is required\");\n    if (!points)\n        throw new Error(\"points is required\");\n    var nearest;\n    var minDist = Infinity;\n    var bestFeatureIndex = 0;\n    featureEach(points, function (pt, featureIndex) {\n        var distanceToPoint = distance(targetPoint, pt);\n        if (distanceToPoint < minDist) {\n            bestFeatureIndex = featureIndex;\n            minDist = distanceToPoint;\n        }\n    });\n    nearest = clone(points.features[bestFeatureIndex]);\n    nearest.properties.featureIndex = bestFeatureIndex;\n    nearest.properties.distanceToPoint = minDist;\n    return nearest;\n}\nexport default nearestPoint;\n"]},"metadata":{},"sourceType":"module"}