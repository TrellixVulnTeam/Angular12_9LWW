{"ast":null,"code":"/**\n * @module ol/tileurlfunction\n */\nimport { assert } from './asserts.js';\nimport { modulo } from './math.js';\nimport { hash as tileCoordHash } from './tilecoord.js';\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\n\nexport function createFromTemplate(template, tileGrid) {\n  var zRegEx = /\\{z\\}/g;\n  var xRegEx = /\\{x\\}/g;\n  var yRegEx = /\\{y\\}/g;\n  var dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function () {\n          var z = tileCoord[0];\n          var range = tileGrid.getFullTileRange(z);\n          assert(range, 55); // The {-y} placeholder requires a tile grid with extent\n\n          var y = range.getHeight() - tileCoord[2] - 1;\n          return y.toString();\n        });\n      }\n    }\n  );\n}\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\n\nexport function createFromTemplates(templates, tileGrid) {\n  var len = templates.length;\n  var tileUrlFunctions = new Array(len);\n\n  for (var i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\n\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      } else {\n        var h = tileCoordHash(tileCoord);\n        var index = modulo(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n      }\n    }\n  );\n}\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\n\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\n\nexport function expandUrl(url) {\n  var urls = [];\n  var match = /\\{([a-z])-([a-z])\\}/.exec(url);\n\n  if (match) {\n    // char range\n    var startCharCode = match[1].charCodeAt(0);\n    var stopCharCode = match[2].charCodeAt(0);\n    var charCode = void 0;\n\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n\n    return urls;\n  }\n\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n\n  if (match) {\n    // number range\n    var stop_1 = parseInt(match[2], 10);\n\n    for (var i = parseInt(match[1], 10); i <= stop_1; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n\n    return urls;\n  }\n\n  urls.push(url);\n  return urls;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/tileurlfunction.js"],"names":["assert","modulo","hash","tileCoordHash","createFromTemplate","template","tileGrid","zRegEx","xRegEx","yRegEx","dashYRegEx","tileCoord","pixelRatio","projection","undefined","replace","toString","z","range","getFullTileRange","y","getHeight","createFromTemplates","templates","len","length","tileUrlFunctions","Array","i","createFromTileUrlFunctions","h","index","nullTileUrlFunction","expandUrl","url","urls","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","push","String","fromCharCode","stop_1","parseInt"],"mappings":"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","sourcesContent":["/**\n * @module ol/tileurlfunction\n */\nimport { assert } from './asserts.js';\nimport { modulo } from './math.js';\nimport { hash as tileCoordHash } from './tilecoord.js';\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n    var zRegEx = /\\{z\\}/g;\n    var xRegEx = /\\{x\\}/g;\n    var yRegEx = /\\{y\\}/g;\n    var dashYRegEx = /\\{-y\\}/g;\n    return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n            return undefined;\n        }\n        else {\n            return template\n                .replace(zRegEx, tileCoord[0].toString())\n                .replace(xRegEx, tileCoord[1].toString())\n                .replace(yRegEx, tileCoord[2].toString())\n                .replace(dashYRegEx, function () {\n                var z = tileCoord[0];\n                var range = tileGrid.getFullTileRange(z);\n                assert(range, 55); // The {-y} placeholder requires a tile grid with extent\n                var y = range.getHeight() - tileCoord[2] - 1;\n                return y.toString();\n            });\n        }\n    });\n}\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n    var len = templates.length;\n    var tileUrlFunctions = new Array(len);\n    for (var i = 0; i < len; ++i) {\n        tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n    }\n    return createFromTileUrlFunctions(tileUrlFunctions);\n}\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n    if (tileUrlFunctions.length === 1) {\n        return tileUrlFunctions[0];\n    }\n    return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n            return undefined;\n        }\n        else {\n            var h = tileCoordHash(tileCoord);\n            var index = modulo(h, tileUrlFunctions.length);\n            return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n        }\n    });\n}\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n}\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n    var urls = [];\n    var match = /\\{([a-z])-([a-z])\\}/.exec(url);\n    if (match) {\n        // char range\n        var startCharCode = match[1].charCodeAt(0);\n        var stopCharCode = match[2].charCodeAt(0);\n        var charCode = void 0;\n        for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n            urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n        }\n        return urls;\n    }\n    match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n    if (match) {\n        // number range\n        var stop_1 = parseInt(match[2], 10);\n        for (var i = parseInt(match[1], 10); i <= stop_1; i++) {\n            urls.push(url.replace(match[0], i.toString()));\n        }\n        return urls;\n    }\n    urls.push(url);\n    return urls;\n}\n"]},"metadata":{},"sourceType":"module"}