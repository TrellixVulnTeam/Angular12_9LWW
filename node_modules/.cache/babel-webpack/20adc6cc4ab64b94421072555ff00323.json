{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [opt_tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\n\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\n\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\n\nexport function getCacheKeyForTileKey(tileKey) {\n  var _a = tileKey.substring(tileKey.lastIndexOf('/') + 1, tileKey.length).split(',').map(Number),\n      z = _a[0],\n      x = _a[1],\n      y = _a[2];\n\n  return getKeyZXY(z, x, y);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\n\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\n\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\n\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n\n  var tileRange = tileGrid.getFullTileRange(z);\n\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/tilecoord.js"],"names":["createOrUpdate","z","x","y","opt_tileCoord","undefined","getKeyZXY","getKey","tileCoord","getCacheKeyForTileKey","tileKey","_a","substring","lastIndexOf","length","split","map","Number","fromKey","key","hash","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","tileRange","getFullTileRange","containsXY"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,aAAjC,EAAgD;AACnD,MAAIA,aAAa,KAAKC,SAAtB,EAAiC;AAC7BD,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBH,CAAnB;AACAG,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBF,CAAnB;AACAE,IAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBD,CAAnB;AACA,WAAOC,aAAP;AACH,GALD,MAMK;AACD,WAAO,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,SAAT,CAAmBL,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC/B,SAAOF,CAAC,GAAG,GAAJ,GAAUC,CAAV,GAAc,GAAd,GAAoBC,CAA3B;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,MAAT,CAAgBC,SAAhB,EAA2B;AAC9B,SAAOF,SAAS,CAACE,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,EAA6BA,SAAS,CAAC,CAAD,CAAtC,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AAC3C,MAAIC,EAAE,GAAGD,OAAO,CACXE,SADI,CACMF,OAAO,CAACG,WAAR,CAAoB,GAApB,IAA2B,CADjC,EACoCH,OAAO,CAACI,MAD5C,EAEJC,KAFI,CAEE,GAFF,EAGJC,GAHI,CAGAC,MAHA,CAAT;AAAA,MAGkBhB,CAAC,GAAGU,EAAE,CAAC,CAAD,CAHxB;AAAA,MAG6BT,CAAC,GAAGS,EAAE,CAAC,CAAD,CAHnC;AAAA,MAGwCR,CAAC,GAAGQ,EAAE,CAAC,CAAD,CAH9C;;AAIA,SAAOL,SAAS,CAACL,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,OAAT,CAAiBC,GAAjB,EAAsB;AACzB,SAAOA,GAAG,CAACJ,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAmBC,MAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASG,IAAT,CAAcZ,SAAd,EAAyB;AAC5B,SAAO,CAACA,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAA1B,IAAiCA,SAAS,CAAC,CAAD,CAAjD;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,gBAAT,CAA0Bb,SAA1B,EAAqCc,QAArC,EAA+C;AAClD,MAAIrB,CAAC,GAAGO,SAAS,CAAC,CAAD,CAAjB;AACA,MAAIN,CAAC,GAAGM,SAAS,CAAC,CAAD,CAAjB;AACA,MAAIL,CAAC,GAAGK,SAAS,CAAC,CAAD,CAAjB;;AACA,MAAIc,QAAQ,CAACC,UAAT,KAAwBtB,CAAxB,IAA6BA,CAAC,GAAGqB,QAAQ,CAACE,UAAT,EAArC,EAA4D;AACxD,WAAO,KAAP;AACH;;AACD,MAAIC,SAAS,GAAGH,QAAQ,CAACI,gBAAT,CAA0BzB,CAA1B,CAAhB;;AACA,MAAI,CAACwB,SAAL,EAAgB;AACZ,WAAO,IAAP;AACH,GAFD,MAGK;AACD,WAAOA,SAAS,CAACE,UAAV,CAAqBzB,CAArB,EAAwBC,CAAxB,CAAP;AACH;AACJ","sourcesContent":["/**\n * @module ol/tilecoord\n */\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [opt_tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n    if (opt_tileCoord !== undefined) {\n        opt_tileCoord[0] = z;\n        opt_tileCoord[1] = x;\n        opt_tileCoord[2] = y;\n        return opt_tileCoord;\n    }\n    else {\n        return [z, x, y];\n    }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n    return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n    var _a = tileKey\n        .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n        .split(',')\n        .map(Number), z = _a[0], x = _a[1], y = _a[2];\n    return getKeyZXY(z, x, y);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n    return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n    var z = tileCoord[0];\n    var x = tileCoord[1];\n    var y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n        return false;\n    }\n    var tileRange = tileGrid.getFullTileRange(z);\n    if (!tileRange) {\n        return true;\n    }\n    else {\n        return tileRange.containsXY(x, y);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}