{"ast":null,"code":"/**\n * @module ol/extent\n */\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\n\nexport function boundingExtent(coordinates) {\n  var extent = createEmpty();\n\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [opt_extent] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\n\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n  var minX = Math.min.apply(null, xs);\n  var minY = Math.min.apply(null, ys);\n  var maxX = Math.max.apply(null, xs);\n  var maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n * @api\n */\n\n\nexport function buffer(extent, value, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0] - value;\n    opt_extent[1] = extent[1] - value;\n    opt_extent[2] = extent[2] + value;\n    opt_extent[3] = extent[3] + value;\n    return opt_extent;\n  } else {\n    return [extent[0] - value, extent[1] - value, extent[2] + value, extent[3] + value];\n  }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} The clone.\n */\n\nexport function clone(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent.slice();\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\n\nexport function closestSquaredDistanceXY(extent, x, y) {\n  var dx, dy;\n\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n\n  return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\n\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\n\nexport function containsExtent(extent1, extent2) {\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\n\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\n\nexport function coordinateRelationship(extent, coordinate) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var x = coordinate[0];\n  var y = coordinate[1];\n  var relationship = Relationship.UNKNOWN;\n\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n\n  return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\n\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = minX;\n    opt_extent[1] = minY;\n    opt_extent[2] = maxX;\n    opt_extent[3] = maxY;\n    return opt_extent;\n  } else {\n    return [minX, minY, maxX, maxY];\n  }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateEmpty(opt_extent) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n  var x = coordinate[0];\n  var y = coordinate[1];\n  return createOrUpdate(x, y, x, y, opt_extent);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function createOrUpdateFromRings(rings, opt_extent) {\n  var extent = createOrUpdateEmpty(opt_extent);\n  return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\n\nexport function equals(extent1, extent2) {\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\n\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\n\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n\n  return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\n\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\n\nexport function extendCoordinates(extent, coordinates) {\n  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\n\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\n\nexport function extendRings(extent, rings) {\n  for (var i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n\n  return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\n\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\n\nexport function forEachCorner(extent, callback) {\n  var val;\n  val = callback(getBottomLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getBottomRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getTopRight(extent));\n\n  if (val) {\n    return val;\n  }\n\n  val = callback(getTopLeft(extent));\n\n  if (val) {\n    return val;\n  }\n\n  return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\n\nexport function getArea(extent) {\n  var area = 0;\n\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n\n  return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\n\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\n\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\n\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./extent/Corner.js\").default} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\n\nexport function getCorner(extent, corner) {\n  var coordinate;\n\n  if (corner === Corner.BOTTOM_LEFT) {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === Corner.BOTTOM_RIGHT) {\n    coordinate = getBottomRight(extent);\n  } else if (corner === Corner.TOP_LEFT) {\n    coordinate = getTopLeft(extent);\n  } else if (corner === Corner.TOP_RIGHT) {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n\n  return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\n\nexport function getEnlargedArea(extent1, extent2) {\n  var minX = Math.min(extent1[0], extent2[0]);\n  var minY = Math.min(extent1[1], extent2[1]);\n  var maxX = Math.max(extent1[2], extent2[2]);\n  var maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\n\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n  var dx = resolution * size[0] / 2;\n  var dy = resolution * size[1] / 2;\n  var cosRotation = Math.cos(rotation);\n  var sinRotation = Math.sin(rotation);\n  var xCos = dx * cosRotation;\n  var xSin = dx * sinRotation;\n  var yCos = dy * cosRotation;\n  var ySin = dy * sinRotation;\n  var x = center[0];\n  var y = center[1];\n  var x0 = x - xCos + ySin;\n  var x1 = x - xCos - ySin;\n  var x2 = x + xCos - ySin;\n  var x3 = x + xCos + ySin;\n  var y0 = y - xSin - yCos;\n  var y1 = y - xSin + yCos;\n  var y2 = y + xSin + yCos;\n  var y3 = y + xSin - yCos;\n  return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\n\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\n\nexport function getIntersectionArea(extent1, extent2) {\n  var intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [opt_extent] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\n\nexport function getIntersection(extent1, extent2, opt_extent) {\n  var intersection = opt_extent ? opt_extent : createEmpty();\n\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n\n  return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\n\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\n\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\n\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\n\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\n\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\n\nexport function intersects(extent1, extent2) {\n  return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\n\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\n\nexport function returnOrUpdate(extent, opt_extent) {\n  if (opt_extent) {\n    opt_extent[0] = extent[0];\n    opt_extent[1] = extent[1];\n    opt_extent[2] = extent[2];\n    opt_extent[3] = extent[3];\n    return opt_extent;\n  } else {\n    return extent;\n  }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\n\nexport function scaleFromCenter(extent, value) {\n  var deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n  var deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\n\nexport function intersectsSegment(extent, start, end) {\n  var intersects = false;\n  var startRel = coordinateRelationship(extent, start);\n  var endRel = coordinateRelationship(extent, end);\n\n  if (startRel === Relationship.INTERSECTING || endRel === Relationship.INTERSECTING) {\n    intersects = true;\n  } else {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var startX = start[0];\n    var startY = start[1];\n    var endX = end[0];\n    var endY = end[1];\n    var slope = (endY - startY) / (endX - startX);\n    var x = void 0,\n        y = void 0;\n\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.RIGHT) && !(startRel & Relationship.RIGHT)) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n\n    if (!intersects && !!(endRel & Relationship.BELOW) && !(startRel & Relationship.BELOW)) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n\n    if (!intersects && !!(endRel & Relationship.LEFT) && !(startRel & Relationship.LEFT)) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n\n  return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [opt_extent] Destination extent.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\n\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\n  var coordinates = [];\n\n  if (opt_stops > 1) {\n    var width = extent[2] - extent[0];\n    var height = extent[3] - extent[1];\n\n    for (var i = 0; i < opt_stops; ++i) {\n      coordinates.push(extent[0] + width * i / opt_stops, extent[1], extent[2], extent[1] + height * i / opt_stops, extent[2] - width * i / opt_stops, extent[3], extent[0], extent[3] - height * i / opt_stops);\n    }\n  } else {\n    coordinates = [extent[0], extent[1], extent[2], extent[1], extent[2], extent[3], extent[0], extent[3]];\n  }\n\n  transformFn(coordinates, coordinates, 2);\n  var xs = [];\n  var ys = [];\n\n  for (var i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n\n  return _boundingExtentXYs(xs, ys, opt_extent);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\n\nexport function wrapX(extent, projection) {\n  var projectionExtent = projection.getExtent();\n  var center = getCenter(extent);\n\n  if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n    var offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n\n  return extent;\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/ol/extent.js"],"names":["Corner","Relationship","assert","boundingExtent","coordinates","extent","createEmpty","i","ii","length","extendCoordinate","_boundingExtentXYs","xs","ys","opt_extent","minX","Math","min","apply","minY","maxX","max","maxY","createOrUpdate","buffer","value","clone","slice","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","containsExtent","extent1","extent2","coordinateRelationship","relationship","UNKNOWN","LEFT","RIGHT","BELOW","ABOVE","INTERSECTING","Infinity","createOrUpdateEmpty","createOrUpdateFromCoordinate","createOrUpdateFromCoordinates","extendCoordinates","createOrUpdateFromFlatCoordinates","flatCoordinates","offset","end","stride","extendFlatCoordinates","createOrUpdateFromRings","rings","extendRings","equals","approximatelyEquals","tolerance","abs","extend","extendXY","forEachCorner","callback","val","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","isEmpty","getWidth","getHeight","getCenter","getCorner","corner","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","getEnlargedArea","getForViewAndSize","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","x0","x1","x2","x3","y0","y1","y2","y3","getIntersectionArea","intersection","getIntersection","intersects","getMargin","getSize","returnOrUpdate","scaleFromCenter","deltaX","deltaY","intersectsSegment","start","startRel","endRel","startX","startY","endX","endY","slope","applyTransform","transformFn","opt_stops","width","height","push","l","wrapX","projection","projectionExtent","getExtent","canWrapX","worldWidth","worldsAway","floor"],"mappings":"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","sourcesContent":["/**\n * @module ol/extent\n */\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n    var extent = createEmpty();\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [opt_extent] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n    var minX = Math.min.apply(null, xs);\n    var minY = Math.min.apply(null, ys);\n    var maxX = Math.max.apply(null, xs);\n    var maxY = Math.max.apply(null, ys);\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0] - value;\n        opt_extent[1] = extent[1] - value;\n        opt_extent[2] = extent[2] + value;\n        opt_extent[3] = extent[3] + value;\n        return opt_extent;\n    }\n    else {\n        return [\n            extent[0] - value,\n            extent[1] - value,\n            extent[2] + value,\n            extent[3] + value,\n        ];\n    }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent.slice();\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n    var dx, dy;\n    if (x < extent[0]) {\n        dx = extent[0] - x;\n    }\n    else if (extent[2] < x) {\n        dx = x - extent[2];\n    }\n    else {\n        dx = 0;\n    }\n    if (y < extent[1]) {\n        dy = extent[1] - y;\n    }\n    else if (extent[3] < y) {\n        dy = y - extent[3];\n    }\n    else {\n        dy = 0;\n    }\n    return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n    return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n    return (extent1[0] <= extent2[0] &&\n        extent2[2] <= extent1[2] &&\n        extent1[1] <= extent2[1] &&\n        extent2[3] <= extent1[3]);\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var relationship = Relationship.UNKNOWN;\n    if (x < minX) {\n        relationship = relationship | Relationship.LEFT;\n    }\n    else if (x > maxX) {\n        relationship = relationship | Relationship.RIGHT;\n    }\n    if (y < minY) {\n        relationship = relationship | Relationship.BELOW;\n    }\n    else if (y > maxY) {\n        relationship = relationship | Relationship.ABOVE;\n    }\n    if (relationship === Relationship.UNKNOWN) {\n        relationship = Relationship.INTERSECTING;\n    }\n    return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n    return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = minX;\n        opt_extent[1] = minY;\n        opt_extent[2] = maxX;\n        opt_extent[3] = maxY;\n        return opt_extent;\n    }\n    else {\n        return [minX, minY, maxX, maxY];\n    }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n    var x = coordinate[0];\n    var y = coordinate[1];\n    return createOrUpdate(x, y, x, y, opt_extent);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n    return (extent1[0] == extent2[0] &&\n        extent1[2] == extent2[2] &&\n        extent1[1] == extent2[1] &&\n        extent1[3] == extent2[3]);\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n    return (Math.abs(extent1[0] - extent2[0]) < tolerance &&\n        Math.abs(extent1[2] - extent2[2]) < tolerance &&\n        Math.abs(extent1[1] - extent2[1]) < tolerance &&\n        Math.abs(extent1[3] - extent2[3]) < tolerance);\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n    if (extent2[0] < extent1[0]) {\n        extent1[0] = extent2[0];\n    }\n    if (extent2[2] > extent1[2]) {\n        extent1[2] = extent2[2];\n    }\n    if (extent2[1] < extent1[1]) {\n        extent1[1] = extent2[1];\n    }\n    if (extent2[3] > extent1[3]) {\n        extent1[3] = extent2[3];\n    }\n    return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n    if (coordinate[0] < extent[0]) {\n        extent[0] = coordinate[0];\n    }\n    if (coordinate[0] > extent[2]) {\n        extent[2] = coordinate[0];\n    }\n    if (coordinate[1] < extent[1]) {\n        extent[1] = coordinate[1];\n    }\n    if (coordinate[1] > extent[3]) {\n        extent[3] = coordinate[1];\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n    for (; offset < end; offset += stride) {\n        extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n    for (var i = 0, ii = rings.length; i < ii; ++i) {\n        extendCoordinates(extent, rings[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n    var val;\n    val = callback(getBottomLeft(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getBottomRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopLeft(extent));\n    if (val) {\n        return val;\n    }\n    return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n    var area = 0;\n    if (!isEmpty(extent)) {\n        area = getWidth(extent) * getHeight(extent);\n    }\n    return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n    return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n    return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./extent/Corner.js\").default} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n    var coordinate;\n    if (corner === Corner.BOTTOM_LEFT) {\n        coordinate = getBottomLeft(extent);\n    }\n    else if (corner === Corner.BOTTOM_RIGHT) {\n        coordinate = getBottomRight(extent);\n    }\n    else if (corner === Corner.TOP_LEFT) {\n        coordinate = getTopLeft(extent);\n    }\n    else if (corner === Corner.TOP_RIGHT) {\n        coordinate = getTopRight(extent);\n    }\n    else {\n        assert(false, 13); // Invalid corner\n    }\n    return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n    var minX = Math.min(extent1[0], extent2[0]);\n    var minY = Math.min(extent1[1], extent2[1]);\n    var maxX = Math.max(extent1[2], extent2[2]);\n    var maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [opt_extent] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n    var dx = (resolution * size[0]) / 2;\n    var dy = (resolution * size[1]) / 2;\n    var cosRotation = Math.cos(rotation);\n    var sinRotation = Math.sin(rotation);\n    var xCos = dx * cosRotation;\n    var xSin = dx * sinRotation;\n    var yCos = dy * cosRotation;\n    var ySin = dy * sinRotation;\n    var x = center[0];\n    var y = center[1];\n    var x0 = x - xCos + ySin;\n    var x1 = x - xCos - ySin;\n    var x2 = x + xCos - ySin;\n    var x3 = x + xCos + ySin;\n    var y0 = y - xSin - yCos;\n    var y1 = y - xSin + yCos;\n    var y2 = y + xSin + yCos;\n    var y3 = y + xSin - yCos;\n    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n    return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n    var intersection = getIntersection(extent1, extent2);\n    return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [opt_extent] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n    var intersection = opt_extent ? opt_extent : createEmpty();\n    if (intersects(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) {\n            intersection[0] = extent1[0];\n        }\n        else {\n            intersection[0] = extent2[0];\n        }\n        if (extent1[1] > extent2[1]) {\n            intersection[1] = extent1[1];\n        }\n        else {\n            intersection[1] = extent2[1];\n        }\n        if (extent1[2] < extent2[2]) {\n            intersection[2] = extent1[2];\n        }\n        else {\n            intersection[2] = extent2[2];\n        }\n        if (extent1[3] < extent2[3]) {\n            intersection[3] = extent1[3];\n        }\n        else {\n            intersection[3] = extent2[3];\n        }\n    }\n    else {\n        createOrUpdateEmpty(intersection);\n    }\n    return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n    return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n    return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n    return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n    return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n    return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n    return (extent1[0] <= extent2[2] &&\n        extent1[2] >= extent2[0] &&\n        extent1[1] <= extent2[3] &&\n        extent1[3] >= extent2[1]);\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [opt_extent] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent;\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n    var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n    var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n    var intersects = false;\n    var startRel = coordinateRelationship(extent, start);\n    var endRel = coordinateRelationship(extent, end);\n    if (startRel === Relationship.INTERSECTING ||\n        endRel === Relationship.INTERSECTING) {\n        intersects = true;\n    }\n    else {\n        var minX = extent[0];\n        var minY = extent[1];\n        var maxX = extent[2];\n        var maxY = extent[3];\n        var startX = start[0];\n        var startY = start[1];\n        var endX = end[0];\n        var endY = end[1];\n        var slope = (endY - startY) / (endX - startX);\n        var x = void 0, y = void 0;\n        if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.RIGHT) &&\n            !(startRel & Relationship.RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.BELOW) &&\n            !(startRel & Relationship.BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.LEFT) &&\n            !(startRel & Relationship.LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [opt_extent] Destination extent.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\n    var coordinates = [];\n    if (opt_stops > 1) {\n        var width = extent[2] - extent[0];\n        var height = extent[3] - extent[1];\n        for (var i = 0; i < opt_stops; ++i) {\n            coordinates.push(extent[0] + (width * i) / opt_stops, extent[1], extent[2], extent[1] + (height * i) / opt_stops, extent[2] - (width * i) / opt_stops, extent[3], extent[0], extent[3] - (height * i) / opt_stops);\n        }\n    }\n    else {\n        coordinates = [\n            extent[0],\n            extent[1],\n            extent[2],\n            extent[1],\n            extent[2],\n            extent[3],\n            extent[0],\n            extent[3],\n        ];\n    }\n    transformFn(coordinates, coordinates, 2);\n    var xs = [];\n    var ys = [];\n    for (var i = 0, l = coordinates.length; i < l; i += 2) {\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return _boundingExtentXYs(xs, ys, opt_extent);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n    var projectionExtent = projection.getExtent();\n    var center = getCenter(extent);\n    if (projection.canWrapX() &&\n        (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        var offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\n"]},"metadata":{},"sourceType":"module"}