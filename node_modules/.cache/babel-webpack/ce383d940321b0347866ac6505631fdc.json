{"ast":null,"code":"import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nconst _c0 = [\"input\"];\n\nconst _c1 = function (a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\n\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\n\nclass MatRadioChange {\n  constructor(\n  /** The MatRadioButton that emits the change event. */\n  source,\n  /** The value of the MatRadioButton. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\n\nconst MAT_RADIO_GROUP = /*#__PURE__*/new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n\nlet _MatRadioGroupBase = /*#__PURE__*/(() => {\n  class _MatRadioGroupBase {\n    constructor(_changeDetector) {\n      this._changeDetector = _changeDetector;\n      /** Selected value for the radio group. */\n\n      this._value = null;\n      /** The HTML name attribute applied to radio buttons in this group. */\n\n      this._name = `mat-radio-group-${nextUniqueId++}`;\n      /** The currently selected radio button. Should match value. */\n\n      this._selected = null;\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n      this._labelPosition = 'after';\n      /** Whether the radio group is disabled. */\n\n      this._disabled = false;\n      /** Whether the radio group is required. */\n\n      this._required = false;\n      /** The method to be called in order to update ngModel */\n\n      this._controlValueAccessorChangeFn = () => {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       * @docs-private\n       */\n\n\n      this.onTouched = () => {};\n      /**\n       * Event emitted when the group value changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * a radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n\n      this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n\n    get labelPosition() {\n      return this._labelPosition;\n    }\n\n    set labelPosition(v) {\n      this._labelPosition = v === 'before' ? 'before' : 'after';\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n\n    _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n\n\n    ngAfterContentInit() {\n      // Mark this component as initialized in AfterContentInit because the initial value can\n      // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n      // NgModel occurs *after* the OnInit of the MatRadioGroup.\n      this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n\n\n    _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n\n    _updateRadioButtonNames() {\n      if (this._radios) {\n        this._radios.forEach(radio => {\n          radio.name = this.name;\n\n          radio._markForCheck();\n        });\n      }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n\n\n    _updateSelectedRadioFromValue() {\n      // If the value already matches the selected radio, do nothing.\n      const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(radio => {\n          radio.checked = this.value === radio.value;\n\n          if (radio.checked) {\n            this._selected = radio;\n          }\n        });\n      }\n    }\n    /** Dispatch change event with current selection and group value. */\n\n\n    _emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MatRadioChange(this._selected, this._value));\n      }\n    }\n\n    _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(radio => radio._markForCheck());\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetector.markForCheck();\n    }\n\n  }\n\n  _MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) {\n    return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  _MatRadioGroupBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatRadioGroupBase,\n    inputs: {\n      name: \"name\",\n      labelPosition: \"labelPosition\",\n      value: \"value\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n      required: \"required\",\n      color: \"color\"\n    },\n    outputs: {\n      change: \"change\"\n    }\n  });\n  return _MatRadioGroupBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nlet MatRadioGroup = /*#__PURE__*/(() => {\n  class MatRadioGroup extends _MatRadioGroupBase {}\n\n  MatRadioGroup.ɵfac = /*@__PURE__*/function () {\n    let ɵMatRadioGroup_BaseFactory;\n    return function MatRadioGroup_Factory(t) {\n      return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup);\n    };\n  }();\n\n  MatRadioGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatRadioGroup,\n    selectors: [[\"mat-radio-group\"]],\n    contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n    exportAs: [\"matRadioGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MAT_RADIO_GROUP,\n      useExisting: MatRadioGroup\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRadioGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to MatRadioButton.\n\n/** @docs-private */\n\n\nclass MatRadioButtonBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatRadioButtonMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n\n\nlet _MatRadioButtonBase = /*#__PURE__*/(() => {\n  class _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\n      super(elementRef);\n      this._changeDetector = _changeDetector;\n      this._focusMonitor = _focusMonitor;\n      this._radioDispatcher = _radioDispatcher;\n      this._providerOverride = _providerOverride;\n      this._uniqueId = `mat-radio-${++nextUniqueId}`;\n      /** The unique ID for the radio button. */\n\n      this.id = this._uniqueId;\n      /**\n       * Event emitted when the checked state of this radio button changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * the radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n      this.change = new EventEmitter();\n      /** Whether this radio is checked. */\n\n      this._checked = false;\n      /** Value assigned to this radio. */\n\n      this._value = null;\n      /** Unregister function for _radioDispatcher */\n\n      this._removeUniqueSelectionListener = () => {}; // Assertions. Ideally these should be stripped out by the compiler.\n      // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n      this.radioGroup = radioGroup;\n      this._noopAnimations = animationMode === 'NoopAnimations';\n\n      if (tabIndex) {\n        this.tabIndex = coerceNumberProperty(tabIndex, 0);\n      }\n\n      this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n    }\n    /** Whether this radio button is checked. */\n\n\n    get checked() {\n      return this._checked;\n    }\n\n    set checked(value) {\n      const newCheckedState = coerceBooleanProperty(value);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /** The value of this radio button. */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      if (this._value !== value) {\n        this._value = value;\n\n        if (this.radioGroup !== null) {\n          if (!this.checked) {\n            // Update checked when the value changed to match the radio group's value\n            this.checked = this.radioGroup.value === value;\n          }\n\n          if (this.checked) {\n            this.radioGroup.selected = this;\n          }\n        }\n      }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n\n\n    get labelPosition() {\n      return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n    }\n\n    set labelPosition(value) {\n      this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n\n    set disabled(value) {\n      this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n\n\n    get required() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n\n\n    get color() {\n      // As per Material design specifications the selection control radio should use the accent color\n      // palette by default. https://material.io/guidelines/components/selection-controls.html\n      return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n    }\n\n    set color(newValue) {\n      this._color = newValue;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n\n\n    get inputId() {\n      return `${this.id || this._uniqueId}-input`;\n    }\n    /** Focuses the radio button. */\n\n\n    focus(options, origin) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      } else {\n        this._inputElement.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n\n\n    _markForCheck() {\n      // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n      // update radio button's status\n      this._changeDetector.markForCheck();\n    }\n\n    ngOnInit() {\n      if (this.radioGroup) {\n        // If the radio is inside a radio group, determine if it should be checked\n        this.checked = this.radioGroup.value === this._value;\n\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        } // Copy name from parent radio group\n\n\n        this.name = this.radioGroup.name;\n      }\n    }\n\n    ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n\n\n    _emitChangeEvent() {\n      this.change.emit(new MatRadioChange(this, this._value));\n    }\n\n    _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n\n    _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `radio-button` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n\n\n    _onInputInteraction(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n\n      if (!this.checked && !this.disabled) {\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n\n        this._emitChangeEvent();\n\n        if (this.radioGroup) {\n          this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n          if (groupValueChanged) {\n            this.radioGroup._emitChangeEvent();\n          }\n        }\n      }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n\n\n    _setDisabled(value) {\n      if (this._disabled !== value) {\n        this._disabled = value;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n\n  }\n\n  _MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) {\n    return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String));\n  };\n\n  _MatRadioButtonBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: _MatRadioButtonBase,\n    viewQuery: function _MatRadioButtonBase_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      checked: \"checked\",\n      value: \"value\",\n      labelPosition: \"labelPosition\",\n      disabled: \"disabled\",\n      required: \"required\",\n      color: \"color\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatRadioButtonBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nlet MatRadioButton = /*#__PURE__*/(() => {\n  class MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n      super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n\n  }\n\n  MatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n    return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatRadioButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatRadioButton,\n    selectors: [[\"mat-radio-button\"]],\n    hostAttrs: [1, \"mat-radio-button\"],\n    hostVars: 17,\n    hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n          return ctx._inputElement.nativeElement.focus();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._noopAnimations)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matRadioButton\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 13,\n    vars: 20,\n    consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n    template: function MatRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) {\n          return ctx._onInputInteraction($event);\n        })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) {\n          return ctx._onInputClick($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction1(18, _c1, ctx._noopAnimations ? 0 : 150));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n      }\n    },\n    directives: [ɵngcc3.MatRipple],\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatRadioButton;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatRadioModule = /*#__PURE__*/(() => {\n  class MatRadioModule {}\n\n  MatRadioModule.ɵfac = function MatRadioModule_Factory(t) {\n    return new (t || MatRadioModule)();\n  };\n\n  MatRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatRadioModule\n  });\n  MatRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MatRippleModule, MatCommonModule], MatCommonModule]\n  });\n  return MatRadioModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function () {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function () {\n      return [MatRippleModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };","map":{"version":3,"sources":["C:/Users/admin/Downloads/igo2-lib-master/igo2-lib-master/node_modules/@angular/material/fesm2015/radio.js"],"names":["InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Output","Input","ContentChildren","ElementRef","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","NgModule","mixinDisableRipple","mixinTabIndex","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","coerceNumberProperty","UniqueSelectionDispatcher","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","a0","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","_MatRadioGroupBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","inputs","outputs","ngDevMode","ɵMatRadioGroup_BaseFactory","MatRadioGroup_Factory","ɵɵgetInheritedFactory","selectors","contentQueries","MatRadioGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatRadioButton","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","animationMode","_providerOverride","tabIndex","_uniqueId","id","_checked","_removeUniqueSelectionListener","_noopAnimations","listen","newCheckedState","notify","_setDisabled","_color","inputId","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputInteraction","groupValueChanged","_MatRadioButtonBase_Factory","String","undefined","viewQuery","_MatRadioButtonBase_Query","ɵɵviewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","providerOverride","MatRadioButton_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","MatRadioButton_HostBindings","ɵɵlistener","MatRadioButton_focus_HostBindingHandler","ɵɵattribute","ɵɵclassProp","ngContentSelectors","decls","vars","consts","template","MatRadioButton_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵelement","MatRadioButton_Template_input_change_5_listener","$event","MatRadioButton_Template_input_click_5_listener","ɵɵelementEnd","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","directives","MatRipple","styles","encapsulation","changeDetection","MatRadioModule","MatRadioModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function (a0) { return { enterDuration: a0 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        // As per Material design specifications the selection control radio should use the accent color\n        // palette by default. https://material.io/guidelines/components/selection-controls.html\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._noopAnimations)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 20, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputInteraction($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction1(18, _c1, ctx._noopAnimations ? 0 : 150));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_noopAnimations',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n"]},"metadata":{},"sourceType":"module"}