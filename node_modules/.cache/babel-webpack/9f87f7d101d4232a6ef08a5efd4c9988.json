{"ast":null,"code":"/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, getDocument } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBoolean(node) {\n  var s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\n\nexport function readBooleanString(string) {\n  var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\n\nexport function readDateTime(node) {\n  var s = getAllTextContent(node, false);\n  var dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimal(node) {\n  var s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\n\nexport function readDecimalString(string) {\n  // FIXME check spec\n  var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readPositiveInteger(node) {\n  var s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\n\nexport function readNonNegativeIntegerString(string) {\n  var m = /^\\s*(\\d+)\\s*$/.exec(string);\n\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\n\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\n\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, bool ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\n\nexport function writeCDATASection(node, string) {\n  node.appendChild(getDocument().createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\n\nexport function writeDateTimeTextNode(node, dateTime) {\n  var date = new Date(dateTime * 1000);\n  var string = date.getUTCFullYear() + '-' + padNumber(date.getUTCMonth() + 1, 2) + '-' + padNumber(date.getUTCDate(), 2) + 'T' + padNumber(date.getUTCHours(), 2) + ':' + padNumber(date.getUTCMinutes(), 2) + ':' + padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\n\nexport function writeDecimalTextNode(node, decimal) {\n  var string = decimal.toPrecision();\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\n\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  var string = nonNegativeInteger.toString();\n  node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\n\nexport function writeStringTextNode(node, string) {\n  node.appendChild(getDocument().createTextNode(string));\n}","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/ol/format/xsd.js"],"names":["getAllTextContent","getDocument","padNumber","readBoolean","node","s","readBooleanString","string","m","exec","undefined","readDateTime","dateTime","Date","parse","isNaN","readDecimal","readDecimalString","parseFloat","readPositiveInteger","readNonNegativeIntegerString","parseInt","readString","trim","writeBooleanTextNode","bool","writeStringTextNode","writeCDATASection","appendChild","createCDATASection","writeDateTimeTextNode","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","createTextNode","writeDecimalTextNode","decimal","toPrecision","writeNonNegativeIntegerTextNode","nonNegativeInteger","toString"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/xsd\n */\nimport { getAllTextContent, getDocument } from '../xml.js';\nimport { padNumber } from '../string.js';\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n    var s = getAllTextContent(node, false);\n    return readBooleanString(s);\n}\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n    var m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n    if (m) {\n        return m[1] !== undefined || false;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n    var s = getAllTextContent(node, false);\n    var dateTime = Date.parse(s);\n    return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n    var s = getAllTextContent(node, false);\n    return readDecimalString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n    // FIXME check spec\n    var m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n    if (m) {\n        return parseFloat(m[1]);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readPositiveInteger(node) {\n    var s = getAllTextContent(node, false);\n    return readNonNegativeIntegerString(s);\n}\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n    var m = /^\\s*(\\d+)\\s*$/.exec(string);\n    if (m) {\n        return parseInt(m[1], 10);\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n    return getAllTextContent(node, false).trim();\n}\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n    writeStringTextNode(node, bool ? '1' : '0');\n}\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n    node.appendChild(getDocument().createCDATASection(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n    var date = new Date(dateTime * 1000);\n    var string = date.getUTCFullYear() +\n        '-' +\n        padNumber(date.getUTCMonth() + 1, 2) +\n        '-' +\n        padNumber(date.getUTCDate(), 2) +\n        'T' +\n        padNumber(date.getUTCHours(), 2) +\n        ':' +\n        padNumber(date.getUTCMinutes(), 2) +\n        ':' +\n        padNumber(date.getUTCSeconds(), 2) +\n        'Z';\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n    var string = decimal.toPrecision();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n    var string = nonNegativeInteger.toString();\n    node.appendChild(getDocument().createTextNode(string));\n}\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n    node.appendChild(getDocument().createTextNode(string));\n}\n"]},"metadata":{},"sourceType":"module"}