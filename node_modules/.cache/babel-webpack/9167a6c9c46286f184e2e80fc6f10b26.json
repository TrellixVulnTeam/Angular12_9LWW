{"ast":null,"code":"/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\n\nvar AccountEntity = function () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n\n\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n\n\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n\n      default:\n        {\n          throw ClientAuthError.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n\n\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n\n\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || \"\", accountInterface.tenantId || \"\"];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n\n\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    var env = authority.getPreferredCache();\n\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    account.environment = env; // non AAD scenarios can have empty realm\n\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\n    account.oboAssertion = oboAssertion;\n\n    if (idToken) {\n      account.idTokenClaims = idToken.claims; // How do you account for MSA CID here?\n\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n       * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n       */\n\n      account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n\n\n  AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\n    var _a, _b, _c, _d;\n\n    var account = new AccountEntity();\n    account.authorityType = authority.authorityType === AuthorityType.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId; // non AAD scenarios can have empty realm\n\n    account.realm = \"\";\n    account.oboAssertion = oboAssertion;\n    var env = authority.getPreferredCache();\n\n    if (StringUtils.isEmpty(env)) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\"; // upn claim for most ADFS scenarios\n\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n\n\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING; // since ADFS does not have tid and does not set client_info\n\n    if (authType === AuthorityType.Adfs) {\n      return accountId;\n    } // for cases where there is clientInfo\n\n\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    } // default to \"sub\" claim\n\n\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n\n\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {}; // issued at timestamp and nonce are expected to change each time a new id token is acquired\n\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && claimsMatch;\n  };\n\n  return AccountEntity;\n}();\n\nexport { AccountEntity };","map":{"version":3,"sources":["C:/Users/admin/Downloads/angular/igo2-lib-master/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js"],"names":["Separators","CacheAccountType","CacheType","Constants","buildClientInfo","StringUtils","ClientAuthError","AuthorityType","AccountEntity","prototype","generateAccountId","accountId","homeAccountId","environment","join","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","generateType","authorityType","ADFS_ACCOUNT_TYPE","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","createUnexpectedAccountTypeError","getAccountInfo","name","idTokenClaims","accountInterface","accountKey","createAccount","clientInfo","authority","idToken","oboAssertion","cloudGraphHostName","msGraphHost","_a","_b","_c","_d","_e","_f","account","env","getPreferredCache","isEmpty","createInvalidCacheEnvironmentError","claims","tid","oid","sub","preferred_username","emails","createGenericAccount","Adfs","upn","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","EMPTY_STRING","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"mappings":"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","sourcesContent":["/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\r\nvar AccountEntity = /** @class */ (function () {\r\n    function AccountEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    AccountEntity.prototype.generateAccountId = function () {\r\n        var accountId = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    AccountEntity.prototype.generateAccountKey = function () {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    AccountEntity.prototype.generateType = function () {\r\n        switch (this.authorityType) {\r\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return CacheType.ADFS;\r\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return CacheType.MSA;\r\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return CacheType.MSSTS;\r\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    AccountEntity.prototype.getAccountInfo = function () {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims\r\n        };\r\n    };\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    AccountEntity.generateAccountCacheKey = function (accountInterface) {\r\n        var accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || \"\",\r\n            accountInterface.tenantId || \"\",\r\n        ];\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var account = new AccountEntity();\r\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n             */\r\n            account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\r\n            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\r\n        }\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        return account;\r\n    };\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\r\n        var _a, _b, _c, _d;\r\n        var account = new AccountEntity();\r\n        account.authorityType = (authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\";\r\n            // upn claim for most ADFS scenarios\r\n            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\r\n            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\r\n            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\r\n        }\r\n        account.environment = env;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n        return account;\r\n    };\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\r\n        var _a;\r\n        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === AuthorityType.Adfs) {\r\n            return accountId;\r\n        }\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccountEntity.isAccountEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    };\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            var accountAClaims = (accountA.idTokenClaims || {});\r\n            var accountBClaims = (accountB.idTokenClaims || {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n                (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            claimsMatch;\r\n    };\r\n    return AccountEntity;\r\n}());\n\nexport { AccountEntity };\n"]},"metadata":{},"sourceType":"module"}