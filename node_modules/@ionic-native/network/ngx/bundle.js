'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');
var rxjs = require('rxjs');
var operators = require('rxjs/operators');

exports.Connection = void 0;
(function (Connection) {
    Connection["UNKNOWN"] = "unknown";
    Connection["ETHERNET"] = "ethernet";
    Connection["WIFI"] = "wifi";
    Connection["CELL_2G"] = "2g";
    Connection["CELL_3G"] = "3g";
    Connection["CELL_4G"] = "4g";
    Connection["CELL"] = "cellular";
    Connection["NONE"] = "none";
})(exports.Connection || (exports.Connection = {}));
var ɵngcc0 = require('@angular/core');
var Network = /** @class */ (function (_super) {
    tslib.__extends(Network, _super);
    function Network() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Constants for possible connection types
         */
        _this.Connection = {
            UNKNOWN: 'unknown',
            ETHERNET: 'ethernet',
            WIFI: 'wifi',
            CELL_2G: '2g',
            CELL_3G: '3g',
            CELL_4G: '4g',
            CELL: 'cellular',
            NONE: 'none',
        };
        return _this;
    }
    Network.prototype.onChange = function () {
        var _this = this;
        return (function () {
            if (core.checkAvailability(_this) === true) {
                return rxjs.merge(_this.onConnect().pipe(operators.mapTo('connected')), _this.onDisconnect().pipe(operators.mapTo('disconnected')));
            }
        })();
    };
    Network.prototype.onDisconnect = function () { return core.cordova(this, "onDisconnect", { "eventObservable": true, "event": "offline", "element": "document" }, arguments); };
    Network.prototype.onConnect = function () { return core.cordova(this, "onConnect", { "eventObservable": true, "event": "online", "element": "document" }, arguments); };
    Object.defineProperty(Network.prototype, "type", {
        get: function () { return core.cordovaPropertyGet(this, "type"); },
        set: function (value) { core.cordovaPropertySet(this, "type", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Network.prototype, "downlinkMax", {
        get: function () { return core.cordovaPropertyGet(this, "downlinkMax"); },
        set: function (value) { core.cordovaPropertySet(this, "downlinkMax", value); },
        enumerable: false,
        configurable: true
    });
    Network.pluginName = "Network";
    Network.plugin = "cordova-plugin-network-information";
    Network.pluginRef = "navigator.connection";
    Network.repo = "https://github.com/apache/cordova-plugin-network-information";
    Network.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Network.ɵfac = /*@__PURE__*/ function () { var ɵNetwork_BaseFactory; return function Network_Factory(t) { return (ɵNetwork_BaseFactory || (ɵNetwork_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Network)))(t || Network); }; }();
Network.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Network, factory: function (t) { return Network.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Network, [{
        type: core$1.Injectable
    }], null, null); })();
    return Network;
}(core.IonicNativePlugin));

exports.Network = Network;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OzswQkFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNvcmUkMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGlvbmljLW5hdGl2ZS9jb3JlJyk7XG52YXIgcnhqcyA9IHJlcXVpcmUoJ3J4anMnKTtcbnZhciBvcGVyYXRvcnMgPSByZXF1aXJlKCdyeGpzL29wZXJhdG9ycycpO1xuXG5leHBvcnRzLkNvbm5lY3Rpb24gPSB2b2lkIDA7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb24pIHtcbiAgICBDb25uZWN0aW9uW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xuICAgIENvbm5lY3Rpb25bXCJFVEhFUk5FVFwiXSA9IFwiZXRoZXJuZXRcIjtcbiAgICBDb25uZWN0aW9uW1wiV0lGSVwiXSA9IFwid2lmaVwiO1xuICAgIENvbm5lY3Rpb25bXCJDRUxMXzJHXCJdID0gXCIyZ1wiO1xuICAgIENvbm5lY3Rpb25bXCJDRUxMXzNHXCJdID0gXCIzZ1wiO1xuICAgIENvbm5lY3Rpb25bXCJDRUxMXzRHXCJdID0gXCI0Z1wiO1xuICAgIENvbm5lY3Rpb25bXCJDRUxMXCJdID0gXCJjZWxsdWxhclwiO1xuICAgIENvbm5lY3Rpb25bXCJOT05FXCJdID0gXCJub25lXCI7XG59KShleHBvcnRzLkNvbm5lY3Rpb24gfHwgKGV4cG9ydHMuQ29ubmVjdGlvbiA9IHt9KSk7XG52YXIgTmV0d29yayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYi5fX2V4dGVuZHMoTmV0d29yaywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOZXR3b3JrKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0YW50cyBmb3IgcG9zc2libGUgY29ubmVjdGlvbiB0eXBlc1xuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuQ29ubmVjdGlvbiA9IHtcbiAgICAgICAgICAgIFVOS05PV046ICd1bmtub3duJyxcbiAgICAgICAgICAgIEVUSEVSTkVUOiAnZXRoZXJuZXQnLFxuICAgICAgICAgICAgV0lGSTogJ3dpZmknLFxuICAgICAgICAgICAgQ0VMTF8yRzogJzJnJyxcbiAgICAgICAgICAgIENFTExfM0c6ICczZycsXG4gICAgICAgICAgICBDRUxMXzRHOiAnNGcnLFxuICAgICAgICAgICAgQ0VMTDogJ2NlbGx1bGFyJyxcbiAgICAgICAgICAgIE5PTkU6ICdub25lJyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBOZXR3b3JrLnByb3RvdHlwZS5vbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY29yZS5jaGVja0F2YWlsYWJpbGl0eShfdGhpcykgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnhqcy5tZXJnZShfdGhpcy5vbkNvbm5lY3QoKS5waXBlKG9wZXJhdG9ycy5tYXBUbygnY29ubmVjdGVkJykpLCBfdGhpcy5vbkRpc2Nvbm5lY3QoKS5waXBlKG9wZXJhdG9ycy5tYXBUbygnZGlzY29ubmVjdGVkJykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9O1xuICAgIE5ldHdvcmsucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmUuY29yZG92YSh0aGlzLCBcIm9uRGlzY29ubmVjdFwiLCB7IFwiZXZlbnRPYnNlcnZhYmxlXCI6IHRydWUsIFwiZXZlbnRcIjogXCJvZmZsaW5lXCIsIFwiZWxlbWVudFwiOiBcImRvY3VtZW50XCIgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBOZXR3b3JrLnByb3RvdHlwZS5vbkNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmEodGhpcywgXCJvbkNvbm5lY3RcIiwgeyBcImV2ZW50T2JzZXJ2YWJsZVwiOiB0cnVlLCBcImV2ZW50XCI6IFwib25saW5lXCIsIFwiZWxlbWVudFwiOiBcImRvY3VtZW50XCIgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmV0d29yay5wcm90b3R5cGUsIFwidHlwZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29yZS5jb3Jkb3ZhUHJvcGVydHlHZXQodGhpcywgXCJ0eXBlXCIpOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBjb3JlLmNvcmRvdmFQcm9wZXJ0eVNldCh0aGlzLCBcInR5cGVcIiwgdmFsdWUpOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5ldHdvcmsucHJvdG90eXBlLCBcImRvd25saW5rTWF4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlLmNvcmRvdmFQcm9wZXJ0eUdldCh0aGlzLCBcImRvd25saW5rTWF4XCIpOyB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyBjb3JlLmNvcmRvdmFQcm9wZXJ0eVNldCh0aGlzLCBcImRvd25saW5rTWF4XCIsIHZhbHVlKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE5ldHdvcmsucGx1Z2luTmFtZSA9IFwiTmV0d29ya1wiO1xuICAgIE5ldHdvcmsucGx1Z2luID0gXCJjb3Jkb3ZhLXBsdWdpbi1uZXR3b3JrLWluZm9ybWF0aW9uXCI7XG4gICAgTmV0d29yay5wbHVnaW5SZWYgPSBcIm5hdmlnYXRvci5jb25uZWN0aW9uXCI7XG4gICAgTmV0d29yay5yZXBvID0gXCJodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb25cIjtcbiAgICBOZXR3b3JrLnBsYXRmb3JtcyA9IFtcIkFtYXpvbiBGaXJlIE9TXCIsIFwiQW5kcm9pZFwiLCBcIkJyb3dzZXJcIiwgXCJpT1NcIiwgXCJXaW5kb3dzXCJdO1xuICAgIE5ldHdvcmsuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBjb3JlJDEuSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gTmV0d29yaztcbn0oY29yZS5Jb25pY05hdGl2ZVBsdWdpbikpO1xuXG5leHBvcnRzLk5ldHdvcmsgPSBOZXR3b3JrO1xuIl19