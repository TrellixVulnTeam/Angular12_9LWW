import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW } from "@angular/cdk/keycodes";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, ViewEncapsulation } from "@angular/core";
import { MatDatepickerIntl } from "@angular/material/datepicker";
import { first } from "rxjs/operators";
import { DatetimeAdapter } from "../adapter/datetime-adapter";
import { MAT_DATETIME_FORMATS } from "../adapter/datetime-formats";
import { slideCalendar } from "./datetimepicker-animations";
import { createMissingDateImplError } from "./datetimepicker-errors";
import { MatDatetimepickerFilterType } from "./datetimepicker-filtertype";
import { getActiveOffset, isSameMultiYearView, yearsPerPage, yearsPerRow } from "./multi-year-view";
/**
 * A calendar that is used as part of the datepicker.
 * @docs-private
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/datepicker';
import * as ɵngcc2 from '../adapter/datetime-adapter';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from './month-view';
import * as ɵngcc6 from './year-view';
import * as ɵngcc7 from './multi-year-view';
import * as ɵngcc8 from './clock';

function MatDatetimepickerCalendar_div_1_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon");
    ɵngcc0.ɵɵtext(1, "arrow_drop_down");
    ɵngcc0.ɵɵelementEnd();
} }
function MatDatetimepickerCalendar_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_1_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9._yearClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵtemplate(2, MatDatetimepickerCalendar_div_1_mat_icon_2_Template, 2, 0, "mat-icon", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r0.currentView === "year" || ctx_r0.currentView === "multi-year");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0._yearLabel, " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.multiYearSelector || ctx_r0.type === "year");
} }
function MatDatetimepickerCalendar_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_3_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._dateClicked(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r1.currentView === "month")("not-clickable", ctx_r1.type === "month");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1._dateLabel);
} }
function MatDatetimepickerCalendar_span_4_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 17);
    ɵngcc0.ɵɵelementStart(1, "span", 18);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_span_7_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14._ampmClicked("AM"); });
    ɵngcc0.ɵɵtext(2, "AM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, "/");
    ɵngcc0.ɵɵelementStart(4, "span", 18);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_span_7_Template_span_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16._ampmClicked("PM"); });
    ɵngcc0.ɵɵtext(5, "PM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", ctx_r13._AMPM === "AM");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵclassProp("active", ctx_r13._AMPM === "PM");
} }
function MatDatetimepickerCalendar_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵelementStart(1, "span", 14);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17._hoursClicked(); });
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, ":");
    ɵngcc0.ɵɵelementStart(4, "span", 15);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_span_4_Template_span_click_4_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19._minutesClicked(); });
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "br");
    ɵngcc0.ɵɵtemplate(7, MatDatetimepickerCalendar_span_4_span_7_Template, 6, 4, "span", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r2.currentView === "clock");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("active", ctx_r2._clockView == "hour");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2._hoursLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("active", ctx_r2._clockView == "minute");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2._minutesLabel);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.twelvehour);
} }
function MatDatetimepickerCalendar_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵelementStart(2, "div", 21);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_6_Template_div_click_2_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20._previousClicked(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(3, "svg", 22);
    ɵngcc0.ɵɵelement(4, "path", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(5, "div", 24);
    ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerCalendar_div_6_Template_div_animation_slideCalendar_done_5_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22._calendarStateDone(); });
    ɵngcc0.ɵɵelementStart(6, "strong");
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 25);
    ɵngcc0.ɵɵlistener("click", function MatDatetimepickerCalendar_div_6_Template_div_click_8_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23._nextClicked(); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(9, "svg", 22);
    ɵngcc0.ɵɵelement(10, "path", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r3._previousEnabled());
    ɵngcc0.ɵɵattribute("aria-disabled", !ctx_r3._previousEnabled())("aria-label", ctx_r3._ariaLabelPrev);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("@slideCalendar", ctx_r3._calendarState);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3._monthYearLabel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("disabled", !ctx_r3._nextEnabled());
    ɵngcc0.ɵɵattribute("aria-disabled", !ctx_r3._nextEnabled())("aria-label", ctx_r3._ariaLabelNext);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-month-view", 27);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template_mat_datetimepicker_month_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template_mat_datetimepicker_month_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26._dateSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r4._activeDate)("dateFilter", ctx_r4._dateFilterForViews)("selected", ctx_r4.selected)("type", ctx_r4.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-year-view", 27);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template_mat_datetimepicker_year_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template_mat_datetimepicker_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29._monthSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r5._activeDate)("dateFilter", ctx_r5._dateFilterForViews)("selected", ctx_r5.selected)("type", ctx_r5.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-multi-year-view", 28);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template_mat_datetimepicker_multi_year_view__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30._userSelected(); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template_mat_datetimepicker_multi_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r31); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32._yearSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("activeDate", ctx_r6._activeDate)("dateFilter", ctx_r6._dateFilterForViews)("maxDate", ctx_r6.maxDate)("minDate", ctx_r6.minDate)("selected", ctx_r6.selected)("type", ctx_r6.type);
} }
function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-datetimepicker-clock", 29);
    ɵngcc0.ɵɵlistener("_userSelection", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock__userSelection_0_listener() { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33._userSelected(); })("activeDateChange", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock_activeDateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35._onActiveDateChange($event); })("selectedChange", function MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template_mat_datetimepicker_clock_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r34); const ctx_r36 = ɵngcc0.ɵɵnextContext(); return ctx_r36._timeSelected($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("dateFilter", ctx_r7.dateFilter)("interval", ctx_r7.timeInterval)("maxDate", ctx_r7.maxDate)("minDate", ctx_r7.minDate)("selected", ctx_r7._activeDate)("startView", ctx_r7._clockView)("twelvehour", ctx_r7.twelvehour);
} }
export class MatDatetimepickerCalendar {
    constructor(_elementRef, _intl, _ngZone, _adapter, _dateFormats, changeDetectorRef) {
        this._elementRef = _elementRef;
        this._intl = _intl;
        this._ngZone = _ngZone;
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        /** Active multi year view when click on year. */
        this.multiYearSelector = false;
        /** Whether the calendar should be started in month or year view. */
        this.startView = "month";
        this.twelvehour = false;
        this.timeInterval = 1;
        this.ariaLabel = "Use arrow keys to navigate";
        this.ariaNextMonthLabel = "Next month";
        this.ariaPrevMonthLabel = "Previous month";
        this.ariaNextYearLabel = "Next year";
        this.ariaPrevYearLabel = "Previous year";
        this.ariaNextMultiYearLabel = "Next year range";
        this.ariaPrevMultiYearLabel = "Previous year range";
        /** Prevent user to select same date time */
        this.preventSameDateTimeSelection = false;
        /** Emits when the currently selected date changes. */
        this.selectedChange = new EventEmitter();
        /** Emits when the view has been changed. **/
        this.viewChanged = new EventEmitter();
        this._clockView = "hour";
        this._type = "date";
        /** Date filter for the month and year views. */
        this._dateFilterForViews = (date) => {
            return !!date &&
                (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.DATE)) &&
                (!this.minDate || this._adapter.compareDate(date, this.minDate) >= 0) &&
                (!this.maxDate || this._adapter.compareDate(date, this.maxDate) <= 0);
        };
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || "date";
        if (this.type === "year") {
            this.multiYearSelector = true;
        }
    }
    /** A date representing the period (month or year) to start the calendar in. */
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this._adapter.getValidDateOrNull(value);
    }
    /** The currently selected date. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = this._adapter.getValidDateOrNull(value);
    }
    /** The minimum selectable date. */
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this._adapter.getValidDateOrNull(value);
    }
    /** The maximum selectable date. */
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this._adapter.getValidDateOrNull(value);
    }
    /**
     * The current active date. This determines which time period is shown and which date is
     * highlighted when using keyboard navigation.
     */
    get _activeDate() {
        return this._clampedActiveDate;
    }
    set _activeDate(value) {
        const oldActiveDate = this._clampedActiveDate;
        this._clampedActiveDate = this._adapter.clampDate(value, this.minDate, this.maxDate);
        if (oldActiveDate && this._clampedActiveDate && this.currentView === "month" &&
            !this._adapter.sameMonthAndYear(oldActiveDate, this._clampedActiveDate)) {
            if (this._adapter.isInNextMonth(oldActiveDate, this._clampedActiveDate)) {
                this.calendarState("right");
            }
            else {
                this.calendarState("left");
            }
        }
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
        this.viewChanged.emit(view);
    }
    /** The label for the current calendar view. */
    get _yearLabel() {
        return this._adapter.getYearName(this._activeDate);
    }
    get _monthYearLabel() {
        if (this.currentView === "multi-year") {
            // The offset from the active year to the "slot" for the starting year is the
            // *actual* first rendered year in the multi-year view, and the last year is
            // just yearsPerPage - 1 away.
            const activeYear = this._adapter.getYear(this._activeDate);
            const minYearOfPage = activeYear - getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate);
            const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
            const minYearName = this._adapter.getYearName(this._adapter.createDate(minYearOfPage, 0, 1));
            const maxYearName = this._adapter.getYearName(this._adapter.createDate(maxYearOfPage, 0, 1));
            return this._intl.formatYearRange(minYearName, maxYearName);
        }
        return this.currentView === "month" ? this._adapter.getMonthNames("long")[this._adapter.getMonth(this._activeDate)] :
            this._adapter.getYearName(this._activeDate);
    }
    get _dateLabel() {
        switch (this.type) {
            case "month":
                return this._adapter.getMonthNames("long")[this._adapter.getMonth(this._activeDate)];
            default:
                return this._adapter.format(this._activeDate, this._dateFormats.display.popupHeaderDateLabel);
        }
    }
    get _hoursLabel() {
        let hour = this._adapter.getHour(this._activeDate);
        if (!!this.twelvehour) {
            if (hour === 0) {
                hour = 24;
            }
            hour = hour > 12 ? (hour - 12) : hour;
        }
        return this._2digit(hour);
    }
    get _minutesLabel() {
        return this._2digit(this._adapter.getMinute(this._activeDate));
    }
    get _ariaLabelNext() {
        switch (this._currentView) {
            case "month":
                return this.ariaNextMonthLabel;
            case "year":
                return this.ariaNextYearLabel;
            case "multi-year":
                return this.ariaNextMultiYearLabel;
            default:
                return "";
        }
    }
    get _ariaLabelPrev() {
        switch (this._currentView) {
            case "month":
                return this.ariaPrevMonthLabel;
            case "year":
                return this.ariaPrevYearLabel;
            case "multi-year":
                return this.ariaPrevMultiYearLabel;
            default:
                return "";
        }
    }
    _userSelected() {
        this._userSelection.emit();
    }
    ngAfterContentInit() {
        this._activeDate = this.startAt || this._adapter.today();
        this._selectAMPM(this._activeDate);
        this._focusActiveCell();
        if (this.type === "year") {
            this.currentView = "multi-year";
        }
        else if (this.type === "month") {
            this.currentView = "year";
        }
        else if (this.type === "time") {
            this.currentView = "clock";
        }
        else {
            this.currentView = this.startView || "month";
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
    }
    /** Handles date selection in the month view. */
    _dateSelected(date) {
        if (this.type === "date") {
            if (!this._adapter.sameDate(date, this.selected) || !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(date);
            }
        }
        else {
            this._activeDate = date;
            this.currentView = "clock";
        }
    }
    /** Handles month selection in the year view. */
    _monthSelected(month) {
        if (this.type === "month") {
            if (!this._adapter.sameMonthAndYear(month, this.selected) || !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(this._adapter.getFirstDateOfMonth(month));
            }
        }
        else {
            this._activeDate = month;
            this.currentView = "month";
            this._clockView = "hour";
        }
    }
    /** Handles year selection in the multi year view. */
    _yearSelected(year) {
        if (this.type === "year") {
            if (!this._adapter.sameYear(year, this.selected) || !this.preventSameDateTimeSelection) {
                const normalizedDate = this._adapter.createDatetime(this._adapter.getYear(year), 0, 1, 0, 0);
                this.selectedChange.emit(normalizedDate);
            }
        }
        else {
            this._activeDate = year;
            this.currentView = "year";
        }
    }
    _timeSelected(date) {
        if (this._clockView !== "minute") {
            this._activeDate = this._updateDate(date);
            this._clockView = "minute";
        }
        else {
            if (!this._adapter.sameDatetime(date, this.selected) || !this.preventSameDateTimeSelection) {
                this.selectedChange.emit(date);
            }
        }
    }
    _onActiveDateChange(date) {
        this._activeDate = date;
    }
    _updateDate(date) {
        if (!!this.twelvehour) {
            const HOUR = this._adapter.getHour(date);
            if (HOUR === 12) {
                if (this._AMPM === "AM") {
                    return this._adapter.addCalendarHours(date, -12);
                }
            }
            else if (this._AMPM === "PM") {
                return this._adapter.addCalendarHours(date, 12);
            }
        }
        return date;
    }
    _selectAMPM(date) {
        if (this._adapter.getHour(date) > 11) {
            this._AMPM = "PM";
        }
        else {
            this._AMPM = "AM";
        }
    }
    _ampmClicked(source) {
        if (source === this._AMPM) {
            return;
        }
        this._AMPM = source;
        if (this._AMPM === "AM") {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, -12);
        }
        else {
            this._activeDate = this._adapter.addCalendarHours(this._activeDate, 12);
        }
    }
    _yearClicked() {
        if (this.type === "year" || this.multiYearSelector) {
            this.currentView = "multi-year";
            return;
        }
        this.currentView = "year";
    }
    _dateClicked() {
        if (this.type !== "month") {
            this.currentView = "month";
        }
    }
    _hoursClicked() {
        this.currentView = "clock";
        this._clockView = "hour";
    }
    _minutesClicked() {
        this.currentView = "clock";
        this._clockView = "minute";
    }
    /** Handles user clicks on the previous button. */
    _previousClicked() {
        this._activeDate = this.currentView === "month" ?
            this._adapter.addCalendarMonths(this._activeDate, -1) :
            this._adapter.addCalendarYears(this._activeDate, this.currentView === "year" ? -1 : -yearsPerPage);
    }
    /** Handles user clicks on the next button. */
    _nextClicked() {
        this._activeDate = this.currentView === "month" ?
            this._adapter.addCalendarMonths(this._activeDate, 1) :
            this._adapter.addCalendarYears(this._activeDate, this.currentView === "year" ? 1 : yearsPerPage);
    }
    /** Whether the previous period button is enabled. */
    _previousEnabled() {
        if (!this.minDate) {
            return true;
        }
        return !this.minDate || !this._isSameView(this._activeDate, this.minDate);
    }
    /** Whether the next period button is enabled. */
    _nextEnabled() {
        return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);
    }
    /** Handles keydown events on the calendar body. */
    _handleCalendarBodyKeydown(event) {
        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent
        // disabled ones from being selected. This may not be ideal, we should look into whether
        // navigation should skip over disabled dates, and if so, how to implement that efficiently.
        if (this.currentView === "month") {
            this._handleCalendarBodyKeydownInMonthView(event);
        }
        else if (this.currentView === "year") {
            this._handleCalendarBodyKeydownInYearView(event);
        }
        else if (this.currentView === "multi-year") {
            this._handleCalendarBodyKeydownInMultiYearView(event);
        }
        else {
            this._handleCalendarBodyKeydownInClockView(event);
        }
    }
    _focusActiveCell() {
        this._ngZone.runOutsideAngular(() => {
            this._ngZone.onStable.asObservable().pipe(first()).subscribe(() => {
                this._elementRef.nativeElement.focus();
            });
        });
    }
    _calendarStateDone() {
        this._calendarState = "";
    }
    /** Whether the two dates represent the same view in the current view mode (month or year). */
    _isSameView(date1, date2) {
        if (this.currentView === "month") {
            return this._adapter.getYear(date1) === this._adapter.getYear(date2) &&
                this._adapter.getMonth(date1) === this._adapter.getMonth(date2);
        }
        if (this.currentView === "year") {
            return this._adapter.getYear(date1) === this._adapter.getYear(date2);
        }
        // Otherwise we are in 'multi-year' view.
        return isSameMultiYearView(this._adapter, date1, date2, this.minDate, this.maxDate);
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydownInMonthView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1 - this._adapter.getDate(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarDays(this._activeDate, (this._adapter.getNumDaysInMonth(this._activeDate) -
                    this._adapter.getDate(this._activeDate)));
                break;
            case PAGE_UP:
                this._activeDate = event.altKey ?
                    this._adapter.addCalendarYears(this._activeDate, -1) :
                    this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this._activeDate = event.altKey ?
                    this._adapter.addCalendarYears(this._activeDate, 1) :
                    this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
                if (this._dateFilterForViews(this._activeDate)) {
                    this._dateSelected(this._activeDate);
                    // Prevent unexpected default actions such as form submission.
                    event.preventDefault();
                }
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Handles keydown events on the calendar body when calendar is in year view. */
    _handleCalendarBodyKeydownInYearView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._prevMonthInSameCol(this._activeDate);
                break;
            case DOWN_ARROW:
                this._activeDate = this._nextMonthInSameCol(this._activeDate);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -this._adapter.getMonth(this._activeDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 11 - this._adapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
                this._monthSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /** Handles keydown events on the calendar body when calendar is in multi-year view. */
    _handleCalendarBodyKeydownInMultiYearView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case LEFT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -1);
                break;
            case RIGHT_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, 1);
                break;
            case UP_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, -getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate));
                break;
            case END:
                this._activeDate = this._adapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._adapter, this._activeDate, this.minDate, this.maxDate) - 1);
                break;
            case PAGE_UP:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case PAGE_DOWN:
                this._activeDate =
                    this._adapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case ENTER:
                this._yearSelected(this._activeDate);
                break;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
    }
    /** Handles keydown events on the calendar body when calendar is in month view. */
    _handleCalendarBodyKeydownInClockView(event) {
        // tslint:disable-next-line:deprecation
        switch (event.keyCode) {
            case UP_ARROW:
                this._activeDate = this._clockView === "hour" ?
                    this._adapter.addCalendarHours(this._activeDate, 1) :
                    this._adapter.addCalendarMinutes(this._activeDate, 1);
                break;
            case DOWN_ARROW:
                this._activeDate = this._clockView === "hour" ?
                    this._adapter.addCalendarHours(this._activeDate, -1) :
                    this._adapter.addCalendarMinutes(this._activeDate, -1);
                break;
            case ENTER:
                this._timeSelected(this._activeDate);
                return;
            default:
                // Don't prevent default or focus active cell on keys that we don't explicitly handle.
                return;
        }
        // Prevent unexpected default actions such as form submission.
        event.preventDefault();
    }
    /**
     * Determine the date for the month that comes before the given month in the same column in the
     * calendar table.
     */
    _prevMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        const increment = this._adapter.getMonth(date) <= 4 ? -5 :
            (this._adapter.getMonth(date) >= 7 ? -7 : -12);
        return this._adapter.addCalendarMonths(date, increment);
    }
    /**
     * Determine the date for the month that comes after the given month in the same column in the
     * calendar table.
     */
    _nextMonthInSameCol(date) {
        // Determine how many months to jump forward given that there are 2 empty slots at the beginning
        // of each year.
        const increment = this._adapter.getMonth(date) <= 4 ? 7 :
            (this._adapter.getMonth(date) >= 7 ? 5 : 12);
        return this._adapter.addCalendarMonths(date, increment);
    }
    calendarState(direction) {
        this._calendarState = direction;
    }
    _2digit(n) {
        return ("00" + n).slice(-2);
    }
}
MatDatetimepickerCalendar.ɵfac = function MatDatetimepickerCalendar_Factory(t) { return new (t || MatDatetimepickerCalendar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
MatDatetimepickerCalendar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerCalendar, selectors: [["mat-datetimepicker-calendar"]], hostAttrs: ["role", "dialog", "tabindex", "0"], hostVars: 3, hostBindings: function MatDatetimepickerCalendar_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function MatDatetimepickerCalendar_keydown_HostBindingHandler($event) { return ctx._handleCalendarBodyKeydown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-label", ctx.ariaLabel);
        ɵngcc0.ɵɵclassProp("mat-datetimepicker-calendar", true);
    } }, inputs: { multiYearSelector: "multiYearSelector", startView: "startView", twelvehour: "twelvehour", timeInterval: "timeInterval", ariaLabel: "ariaLabel", ariaNextMonthLabel: "ariaNextMonthLabel", ariaPrevMonthLabel: "ariaPrevMonthLabel", ariaNextYearLabel: "ariaNextYearLabel", ariaPrevYearLabel: "ariaPrevYearLabel", ariaNextMultiYearLabel: "ariaNextMultiYearLabel", ariaPrevMultiYearLabel: "ariaPrevMultiYearLabel", preventSameDateTimeSelection: "preventSameDateTimeSelection", type: "type", startAt: "startAt", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange", viewChanged: "viewChanged" }, decls: 11, vars: 8, consts: [[1, "mat-datetimepicker-calendar-header"], ["class", "mat-datetimepicker-calendar-header-year", "role", "button", 3, "active", "click", 4, "ngIf"], [1, "mat-datetimepicker-calendar-header-date-time"], ["class", "mat-datetimepicker-calendar-header-date", "role", "button", 3, "active", "not-clickable", "click", 4, "ngIf"], ["class", "mat-datetimepicker-calendar-header-time", 3, "active", 4, "ngIf"], [1, "mat-datetimepicker-calendar-content", 3, "ngSwitch"], ["class", "mat-month-content", 4, "ngIf"], [3, "activeDate", "dateFilter", "selected", "type", "_userSelection", "selectedChange", 4, "ngSwitchCase"], [3, "activeDate", "dateFilter", "maxDate", "minDate", "selected", "type", "_userSelection", "selectedChange", 4, "ngSwitchCase"], [3, "dateFilter", "interval", "maxDate", "minDate", "selected", "startView", "twelvehour", "_userSelection", "activeDateChange", "selectedChange", 4, "ngSwitchDefault"], ["role", "button", 1, "mat-datetimepicker-calendar-header-year", 3, "click"], [4, "ngIf"], ["role", "button", 1, "mat-datetimepicker-calendar-header-date", 3, "click"], [1, "mat-datetimepicker-calendar-header-time"], ["role", "button", 1, "mat-datetimepicker-calendar-header-hours", 3, "click"], ["role", "button", 1, "mat-datetimepicker-calendar-header-minutes", 3, "click"], ["class", "mat-datetimepicker-calendar-header-ampm-container", 4, "ngIf"], [1, "mat-datetimepicker-calendar-header-ampm-container"], [1, "mat-datetimepicker-calendar-header-ampm", 3, "click"], [1, "mat-month-content"], [1, "mat-datetimepicker-calendar-controls"], ["role", "button", 1, "mat-datetimepicker-calendar-previous-button", 3, "click"], ["height", "24", "viewBox", "0 0 24 24", "width", "24"], ["d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"], [1, "mat-datetimepicker-calendar-period-button"], ["role", "button", 1, "mat-datetimepicker-calendar-next-button", 3, "click"], ["d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"], [3, "activeDate", "dateFilter", "selected", "type", "_userSelection", "selectedChange"], [3, "activeDate", "dateFilter", "maxDate", "minDate", "selected", "type", "_userSelection", "selectedChange"], [3, "dateFilter", "interval", "maxDate", "minDate", "selected", "startView", "twelvehour", "_userSelection", "activeDateChange", "selectedChange"]], template: function MatDatetimepickerCalendar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, MatDatetimepickerCalendar_div_1_Template, 3, 4, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, MatDatetimepickerCalendar_span_3_Template, 2, 5, "span", 3);
        ɵngcc0.ɵɵtemplate(4, MatDatetimepickerCalendar_span_4_Template, 8, 9, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵtemplate(6, MatDatetimepickerCalendar_div_6_Template, 11, 10, "div", 6);
        ɵngcc0.ɵɵtemplate(7, MatDatetimepickerCalendar_mat_datetimepicker_month_view_7_Template, 1, 4, "mat-datetimepicker-month-view", 7);
        ɵngcc0.ɵɵtemplate(8, MatDatetimepickerCalendar_mat_datetimepicker_year_view_8_Template, 1, 4, "mat-datetimepicker-year-view", 7);
        ɵngcc0.ɵɵtemplate(9, MatDatetimepickerCalendar_mat_datetimepicker_multi_year_view_9_Template, 1, 6, "mat-datetimepicker-multi-year-view", 8);
        ɵngcc0.ɵɵtemplate(10, MatDatetimepickerCalendar_mat_datetimepicker_clock_10_Template, 1, 7, "mat-datetimepicker-clock", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "time");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type !== "time" && ctx.type !== "year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.type.endsWith("time"));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitch", ctx.currentView);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.currentView === "month" || ctx.currentView === "year" || ctx.currentView === "multi-year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "month");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "year");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngSwitchCase", "multi-year");
    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc3.NgSwitchDefault, ɵngcc4.MatIcon, ɵngcc5.MatDatetimepickerMonthView, ɵngcc6.MatDatetimepickerYearView, ɵngcc7.MatDatetimepickerMultiYearView, ɵngcc8.MatDatetimepickerClock], styles: [".mat-datetimepicker-calendar{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;outline:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{padding:16px;font-size:14px;color:#fff;box-sizing:border-box}[mode=landscape] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar-header-date-time,.mat-datetimepicker-calendar-header-year{width:100%;font-weight:500;white-space:nowrap}.mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header-ampm:not(.active),.mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header-year:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header-ampm.not-clickable,.mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header-year.not-clickable{cursor:auto}.mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{width:100%;padding:0 8px 8px;outline:none;box-sizing:border-box;overflow:hidden}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-period-button,.mat-datetimepicker-calendar-previous-button{display:inline-block;height:48px;padding:12px;outline:none;border:0;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-previous-button{width:48px;cursor:pointer}.mat-datetimepicker-calendar-next-button.disabled,.mat-datetimepicker-calendar-previous-button.disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-calendar-next-button svg,.mat-datetimepicker-calendar-previous-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-datetimepicker-calendar-table-header{color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-table-header th{text-align:center;font-size:11px;padding:0 0 8px}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}"], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerCalendar.ctorParameters = () => [
    { type: ElementRef },
    { type: MatDatepickerIntl },
    { type: NgZone },
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] },
    { type: ChangeDetectorRef }
];
MatDatetimepickerCalendar.propDecorators = {
    _userSelection: [{ type: Output }],
    multiYearSelector: [{ type: Input }],
    startView: [{ type: Input }],
    twelvehour: [{ type: Input }],
    timeInterval: [{ type: Input }],
    dateFilter: [{ type: Input }],
    ariaLabel: [{ type: Input }],
    ariaNextMonthLabel: [{ type: Input }],
    ariaPrevMonthLabel: [{ type: Input }],
    ariaNextYearLabel: [{ type: Input }],
    ariaPrevYearLabel: [{ type: Input }],
    ariaNextMultiYearLabel: [{ type: Input }],
    ariaPrevMultiYearLabel: [{ type: Input }],
    preventSameDateTimeSelection: [{ type: Input }],
    selectedChange: [{ type: Output }],
    viewChanged: [{ type: Output }],
    type: [{ type: Input }],
    startAt: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDatetimepickerCalendar, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-calendar",
                template: "<div class=\"mat-datetimepicker-calendar-header\">\r\n  <div (click)=\"_yearClicked()\"\r\n       *ngIf=\"type !== 'time'\"\r\n       [class.active]=\"currentView === 'year' || currentView === 'multi-year'\"\r\n       class=\"mat-datetimepicker-calendar-header-year\"\r\n       role=\"button\">{{ _yearLabel }}\r\n    <mat-icon *ngIf=\"multiYearSelector || type === 'year'\">arrow_drop_down</mat-icon>\r\n  </div>\r\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\r\n    <span (click)=\"_dateClicked()\" *ngIf=\"type !== 'time' && type !== 'year'\"\r\n          [class.active]=\"currentView === 'month'\"\r\n          [class.not-clickable]=\"type === 'month'\"\r\n          class=\"mat-datetimepicker-calendar-header-date\"\r\n          role=\"button\">{{ _dateLabel }}</span>\r\n    <span *ngIf=\"type.endsWith('time')\"\r\n          [class.active]=\"currentView === 'clock'\"\r\n          class=\"mat-datetimepicker-calendar-header-time\">\r\n      <span (click)=\"_hoursClicked()\"\r\n            [class.active]=\"_clockView == 'hour'\"\r\n            class=\"mat-datetimepicker-calendar-header-hours\"\r\n            role=\"button\">{{ _hoursLabel }}</span>:<span (click)=\"_minutesClicked()\"\r\n                                                                     [class.active]=\"_clockView == 'minute'\"\r\n                                                                     class=\"mat-datetimepicker-calendar-header-minutes\"\r\n                                                                     role=\"button\">{{ _minutesLabel }}</span>\r\n      <br/>\r\n      <span *ngIf=\"twelvehour\"\r\n            class=\"mat-datetimepicker-calendar-header-ampm-container\">\r\n        <span (click)=\"_ampmClicked('AM')\"\r\n              [class.active]=\"_AMPM === 'AM'\"\r\n              class=\"mat-datetimepicker-calendar-header-ampm\">AM</span>/<span (click)=\"_ampmClicked('PM')\"\r\n                                                           [class.active]=\"_AMPM === 'PM'\"\r\n                                                           class=\"mat-datetimepicker-calendar-header-ampm\">PM</span>\r\n      </span>\r\n    </span>\r\n  </div>\r\n</div>\r\n<div [ngSwitch]=\"currentView\" class=\"mat-datetimepicker-calendar-content\">\r\n  <div *ngIf=\"currentView === 'month' || currentView === 'year' || currentView === 'multi-year'\"\r\n       class=\"mat-month-content\">\r\n    <div class=\"mat-datetimepicker-calendar-controls\">\r\n      <div (click)=\"_previousClicked()\"\r\n           [attr.aria-disabled]=\"!_previousEnabled()\"\r\n           [attr.aria-label]=\"_ariaLabelPrev\"\r\n           [class.disabled]=\"!_previousEnabled()\"\r\n           class=\"mat-datetimepicker-calendar-previous-button\"\r\n           role=\"button\">\r\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\r\n        </svg>\r\n      </div>\r\n      <div (@slideCalendar.done)=\"_calendarStateDone()\" [@slideCalendar]=\"_calendarState\"\r\n           class=\"mat-datetimepicker-calendar-period-button\">\r\n        <strong>{{ _monthYearLabel }}</strong>\r\n      </div>\r\n      <div (click)=\"_nextClicked()\"\r\n           [attr.aria-disabled]=\"!_nextEnabled()\"\r\n           [attr.aria-label]=\"_ariaLabelNext\"\r\n           [class.disabled]=\"!_nextEnabled()\"\r\n           class=\"mat-datetimepicker-calendar-next-button\"\r\n           role=\"button\">\r\n        <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <mat-datetimepicker-month-view (_userSelection)=\"_userSelected()\"\r\n                                 (selectedChange)=\"_dateSelected($event)\"\r\n                                 *ngSwitchCase=\"'month'\"\r\n                                 [activeDate]=\"_activeDate\"\r\n                                 [dateFilter]=\"_dateFilterForViews\"\r\n                                 [selected]=\"selected\"\r\n                                 [type]=\"type\">\r\n  </mat-datetimepicker-month-view>\r\n  <mat-datetimepicker-year-view (_userSelection)=\"_userSelected()\"\r\n                                (selectedChange)=\"_monthSelected($event)\"\r\n                                *ngSwitchCase=\"'year'\"\r\n                                [activeDate]=\"_activeDate\"\r\n                                [dateFilter]=\"_dateFilterForViews\"\r\n                                [selected]=\"selected\"\r\n                                [type]=\"type\">\r\n  </mat-datetimepicker-year-view>\r\n  <mat-datetimepicker-multi-year-view (_userSelection)=\"_userSelected()\"\r\n                                      (selectedChange)=\"_yearSelected($event)\"\r\n                                      *ngSwitchCase=\"'multi-year'\"\r\n                                      [activeDate]=\"_activeDate\"\r\n                                      [dateFilter]=\"_dateFilterForViews\"\r\n                                      [maxDate]=\"maxDate\"\r\n                                      [minDate]=\"minDate\"\r\n                                      [selected]=\"selected\"\r\n                                      [type]=\"type\">\r\n  </mat-datetimepicker-multi-year-view>\r\n  <mat-datetimepicker-clock (_userSelection)=\"_userSelected()\"\r\n                            (activeDateChange)=\"_onActiveDateChange($event)\"\r\n                            (selectedChange)=\"_timeSelected($event)\"\r\n                            *ngSwitchDefault\r\n                            [dateFilter]=\"dateFilter\"\r\n                            [interval]=\"timeInterval\"\r\n                            [maxDate]=\"maxDate\"\r\n                            [minDate]=\"minDate\"\r\n                            [selected]=\"_activeDate\"\r\n                            [startView]=\"_clockView\"\r\n                            [twelvehour]=\"twelvehour\">\r\n  </mat-datetimepicker-clock>\r\n</div>\r\n",
                host: {
                    "[class.mat-datetimepicker-calendar]": "true",
                    "[attr.aria-label]": "ariaLabel",
                    "role": "dialog",
                    "tabindex": "0",
                    "(keydown)": "_handleCalendarBodyKeydown($event)"
                },
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".mat-datetimepicker-calendar{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;outline:none}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{padding:16px;font-size:14px;color:#fff;box-sizing:border-box}[mode=landscape] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar-header-date-time,.mat-datetimepicker-calendar-header-year{width:100%;font-weight:500;white-space:nowrap}.mat-datetimepicker-calendar-header-year{font-size:16px}.mat-datetimepicker-calendar-header-year mat-icon{transform:translateY(5px)}.mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:34px}[mode=landscape] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header-ampm-container{font-size:.77em}.mat-datetimepicker-calendar-header-ampm:not(.active),.mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header-year:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header-ampm.not-clickable,.mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header-year.not-clickable{cursor:auto}.mat-datetimepicker-calendar-header-time{padding-left:8px}.mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-ampm,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{width:100%;padding:0 8px 8px;outline:none;box-sizing:border-box;overflow:hidden}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-period-button,.mat-datetimepicker-calendar-previous-button{display:inline-block;height:48px;padding:12px;outline:none;border:0;background:transparent;box-sizing:border-box}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-previous-button{width:48px;cursor:pointer}.mat-datetimepicker-calendar-next-button.disabled,.mat-datetimepicker-calendar-previous-button.disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-calendar-next-button svg,.mat-datetimepicker-calendar-previous-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-datetimepicker-calendar-table-header{color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-table-header th{text-align:center;font-size:11px;padding:0 0 8px}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.MatDatepickerIntl }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _userSelection: [{
            type: Output
        }], multiYearSelector: [{
            type: Input
        }], startView: [{
            type: Input
        }], twelvehour: [{
            type: Input
        }], timeInterval: [{
            type: Input
        }], ariaLabel: [{
            type: Input
        }], ariaNextMonthLabel: [{
            type: Input
        }], ariaPrevMonthLabel: [{
            type: Input
        }], ariaNextYearLabel: [{
            type: Input
        }], ariaPrevYearLabel: [{
            type: Input
        }], ariaNextMultiYearLabel: [{
            type: Input
        }], ariaPrevMultiYearLabel: [{
            type: Input
        }], preventSameDateTimeSelection: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], viewChanged: [{
            type: Output
        }], type: [{
            type: Input
        }], startAt: [{
            type: Input
        }], selected: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,